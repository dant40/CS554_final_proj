{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar PropertyValueInc = require('./PropertyValueInc');\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then adds the given value to each of them.\r\n *\r\n * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `IncXY(group.getChildren(), x, y, stepX, stepY)`\r\n *\r\n * @function Phaser.Actions.IncXY\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {number} x - The amount to be added to the `x` property.\r\n * @param {number} [y=x] - The amount to be added to the `y` property. If `undefined` or `null` it uses the `x` value.\r\n * @param {number} [stepX=0] - This is added to the `x` amount, multiplied by the iteration counter.\r\n * @param {number} [stepY=0] - This is added to the `y` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\n\n\nvar IncXY = function (items, x, y, stepX, stepY, index, direction) {\n  if (y === undefined || y === null) {\n    y = x;\n  }\n\n  PropertyValueInc(items, 'x', x, stepX, index, direction);\n  return PropertyValueInc(items, 'y', y, stepY, index, direction);\n};\n\nmodule.exports = IncXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/actions/IncXY.js"],"names":["PropertyValueInc","require","IncXY","items","x","y","stepX","stepY","index","direction","undefined","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIC,KAAK,GAAG,UAAUC,KAAV,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,SAA5C,EACZ;AACI,MAAIJ,CAAC,KAAKK,SAAN,IAAmBL,CAAC,KAAK,IAA7B,EAAmC;AAAEA,IAAAA,CAAC,GAAGD,CAAJ;AAAQ;;AAE7CJ,EAAAA,gBAAgB,CAACG,KAAD,EAAQ,GAAR,EAAaC,CAAb,EAAgBE,KAAhB,EAAuBE,KAAvB,EAA8BC,SAA9B,CAAhB;AAEA,SAAOT,gBAAgB,CAACG,KAAD,EAAQ,GAAR,EAAaE,CAAb,EAAgBE,KAAhB,EAAuBC,KAAvB,EAA8BC,SAA9B,CAAvB;AACH,CAPD;;AASAE,MAAM,CAACC,OAAP,GAAiBV,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar PropertyValueInc = require('./PropertyValueInc');\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have public `x` and `y` properties,\r\n * and then adds the given value to each of them.\r\n *\r\n * The optional `stepX` and `stepY` properties are applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `IncXY(group.getChildren(), x, y, stepX, stepY)`\r\n *\r\n * @function Phaser.Actions.IncXY\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {number} x - The amount to be added to the `x` property.\r\n * @param {number} [y=x] - The amount to be added to the `y` property. If `undefined` or `null` it uses the `x` value.\r\n * @param {number} [stepX=0] - This is added to the `x` amount, multiplied by the iteration counter.\r\n * @param {number} [stepY=0] - This is added to the `y` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\r\nvar IncXY = function (items, x, y, stepX, stepY, index, direction)\r\n{\r\n    if (y === undefined || y === null) { y = x; }\r\n\r\n    PropertyValueInc(items, 'x', x, stepX, index, direction);\r\n\r\n    return PropertyValueInc(items, 'y', y, stepY, index, direction);\r\n};\r\n\r\nmodule.exports = IncXY;\r\n"]},"metadata":{},"sourceType":"script"}