{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../../src/utils/Class');\n\nvar Vector3 = require('../../../src/math/Vector3'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class OrthographicCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\n\nvar OrthographicCamera = new Class({\n  Extends: Camera,\n  initialize: function OrthographicCamera(scene, viewportWidth, viewportHeight) {\n    if (viewportWidth === undefined) {\n      viewportWidth = 0;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = 0;\n    }\n\n    Camera.call(this, scene);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportWidth\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = viewportWidth;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportHeight\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = viewportHeight;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#_zoom\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._zoom = 1.0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#near\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.near = 0;\n    this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.OrthographicCamera#setToOrtho\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} yDown - [description]\r\n   * @param {number} [viewportWidth] - [description]\r\n   * @param {number} [viewportHeight] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  setToOrtho: function (yDown, viewportWidth, viewportHeight) {\n    if (viewportWidth === undefined) {\n      viewportWidth = this.viewportWidth;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = this.viewportHeight;\n    }\n\n    var zoom = this.zoom;\n    this.up.set(0, yDown ? -1 : 1, 0);\n    this.direction.set(0, 0, yDown ? 1 : -1);\n    this.position.set(zoom * viewportWidth / 2, zoom * viewportHeight / 2, 0);\n    this.viewportWidth = viewportWidth;\n    this.viewportHeight = viewportHeight;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.OrthographicCamera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  update: function () {\n    var w = this.viewportWidth;\n    var h = this.viewportHeight;\n    var near = Math.abs(this.near);\n    var far = Math.abs(this.far);\n    var zoom = this.zoom;\n\n    if (w === 0 || h === 0) {\n      //  What to do here... hmm?\n      return this;\n    }\n\n    this.projection.ortho(zoom * -w / 2, zoom * w / 2, zoom * -h / 2, zoom * h / 2, near, far); //  Build the view matrix\n\n    tmpVec3.copy(this.position).add(this.direction);\n    this.view.lookAt(this.position, tmpVec3, this.up); //  Projection * view matrix\n\n    this.combined.copy(this.projection).multiply(this.view); //  Invert combined matrix, used for unproject\n\n    this.invProjectionView.copy(this.combined).invert();\n    this.billboardMatrixDirty = true;\n    this.updateChildren();\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.OrthographicCamera#zoom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  zoom: {\n    get: function () {\n      return this._zoom;\n    },\n    set: function (value) {\n      this._zoom = value;\n      this.update();\n    }\n  }\n});\nmodule.exports = OrthographicCamera;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/camera3d/src/OrthographicCamera.js"],"names":["Camera","require","Class","Vector3","tmpVec3","OrthographicCamera","Extends","initialize","scene","viewportWidth","viewportHeight","undefined","call","_zoom","near","update","setToOrtho","yDown","zoom","up","set","direction","position","w","h","Math","abs","far","projection","ortho","copy","add","view","lookAt","combined","multiply","invProjectionView","invert","billboardMatrixDirty","updateChildren","get","value","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../../src/utils/Class');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class OrthographicCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\r\nvar OrthographicCamera = new Class({\r\n\r\n    Extends: Camera,\r\n\r\n    initialize:\r\n\r\n    function OrthographicCamera (scene, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = 0; }\r\n        if (viewportHeight === undefined) { viewportHeight = 0; }\r\n\r\n        Camera.call(this, scene);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportWidth\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = viewportWidth;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#viewportHeight\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 1.0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.OrthographicCamera#near\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 0;\r\n\r\n        this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#setToOrtho\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} yDown - [description]\r\n     * @param {number} [viewportWidth] - [description]\r\n     * @param {number} [viewportHeight] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    setToOrtho: function (yDown, viewportWidth, viewportHeight)\r\n    {\r\n        if (viewportWidth === undefined) { viewportWidth = this.viewportWidth; }\r\n        if (viewportHeight === undefined) { viewportHeight = this.viewportHeight; }\r\n\r\n        var zoom = this.zoom;\r\n\r\n        this.up.set(0, (yDown) ? -1 : 1, 0);\r\n        this.direction.set(0, 0, (yDown) ? 1 : -1);\r\n        this.position.set(zoom * viewportWidth / 2, zoom * viewportHeight / 2, 0);\r\n\r\n        this.viewportWidth = viewportWidth;\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.OrthographicCamera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    update: function ()\r\n    {\r\n        var w = this.viewportWidth;\r\n        var h = this.viewportHeight;\r\n        var near = Math.abs(this.near);\r\n        var far = Math.abs(this.far);\r\n        var zoom = this.zoom;\r\n\r\n        if (w === 0 || h === 0)\r\n        {\r\n            //  What to do here... hmm?\r\n            return this;\r\n        }\r\n\r\n        this.projection.ortho(\r\n            zoom * -w / 2, zoom * w / 2,\r\n            zoom * -h / 2, zoom * h / 2,\r\n            near,\r\n            far\r\n        );\r\n\r\n        //  Build the view matrix\r\n        tmpVec3.copy(this.position).add(this.direction);\r\n\r\n        this.view.lookAt(this.position, tmpVec3, this.up);\r\n\r\n        //  Projection * view matrix\r\n        this.combined.copy(this.projection).multiply(this.view);\r\n\r\n        //  Invert combined matrix, used for unproject\r\n        this.invProjectionView.copy(this.combined).invert();\r\n\r\n        this.billboardMatrixDirty = true;\r\n\r\n        this.updateChildren();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.OrthographicCamera#zoom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    zoom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._zoom;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._zoom = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = OrthographicCamera;\r\n"]},"metadata":{},"sourceType":"script"}