{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CheckMatrix = require('./CheckMatrix');\n\nvar TransposeMatrix = require('./TransposeMatrix');\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateMatrix\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n * @param {(number|string)} [direction=90] - The amount to rotate the matrix by.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\n\n\nvar RotateMatrix = function (matrix, direction) {\n  if (direction === undefined) {\n    direction = 90;\n  }\n\n  if (!CheckMatrix(matrix)) {\n    return null;\n  }\n\n  if (typeof direction !== 'string') {\n    direction = (direction % 360 + 360) % 360;\n  }\n\n  if (direction === 90 || direction === -270 || direction === 'rotateLeft') {\n    matrix = TransposeMatrix(matrix);\n    matrix.reverse();\n  } else if (direction === -90 || direction === 270 || direction === 'rotateRight') {\n    matrix.reverse();\n    matrix = TransposeMatrix(matrix);\n  } else if (Math.abs(direction) === 180 || direction === 'rotate180') {\n    for (var i = 0; i < matrix.length; i++) {\n      matrix[i].reverse();\n    }\n\n    matrix.reverse();\n  }\n\n  return matrix;\n};\n\nmodule.exports = RotateMatrix;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/matrix/RotateMatrix.js"],"names":["CheckMatrix","require","TransposeMatrix","RotateMatrix","matrix","direction","undefined","reverse","Math","abs","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIE,YAAY,GAAG,UAAUC,MAAV,EAAkBC,SAAlB,EACnB;AACI,MAAIA,SAAS,KAAKC,SAAlB,EAA6B;AAAED,IAAAA,SAAS,GAAG,EAAZ;AAAiB;;AAEhD,MAAI,CAACL,WAAW,CAACI,MAAD,CAAhB,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAI,OAAOC,SAAP,KAAqB,QAAzB,EACA;AACIA,IAAAA,SAAS,GAAG,CAAEA,SAAS,GAAG,GAAb,GAAoB,GAArB,IAA4B,GAAxC;AACH;;AAED,MAAIA,SAAS,KAAK,EAAd,IAAoBA,SAAS,KAAK,CAAC,GAAnC,IAA0CA,SAAS,KAAK,YAA5D,EACA;AACID,IAAAA,MAAM,GAAGF,eAAe,CAACE,MAAD,CAAxB;AACAA,IAAAA,MAAM,CAACG,OAAP;AACH,GAJD,MAKK,IAAIF,SAAS,KAAK,CAAC,EAAf,IAAqBA,SAAS,KAAK,GAAnC,IAA0CA,SAAS,KAAK,aAA5D,EACL;AACID,IAAAA,MAAM,CAACG,OAAP;AACAH,IAAAA,MAAM,GAAGF,eAAe,CAACE,MAAD,CAAxB;AACH,GAJI,MAKA,IAAII,IAAI,CAACC,GAAL,CAASJ,SAAT,MAAwB,GAAxB,IAA+BA,SAAS,KAAK,WAAjD,EACL;AACI,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACIN,MAAAA,MAAM,CAACM,CAAD,CAAN,CAAUH,OAAV;AACH;;AAEDH,IAAAA,MAAM,CAACG,OAAP;AACH;;AAED,SAAOH,MAAP;AACH,CAnCD;;AAqCAQ,MAAM,CAACC,OAAP,GAAiBV,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CheckMatrix = require('./CheckMatrix');\r\nvar TransposeMatrix = require('./TransposeMatrix');\r\n\r\n/**\r\n * Rotates the array matrix based on the given rotation value.\r\n *\r\n * The value can be given in degrees: 90, -90, 270, -270 or 180,\r\n * or a string command: `rotateLeft`, `rotateRight` or `rotate180`.\r\n *\r\n * Based on the routine from {@link http://jsfiddle.net/MrPolywhirl/NH42z/}.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.RotateMatrix\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix,$return]\r\n *\r\n * @param {T[][]} [matrix] - The array to rotate.\r\n * @param {(number|string)} [direction=90] - The amount to rotate the matrix by.\r\n *\r\n * @return {T[][]} The rotated matrix array. The source matrix should be discard for the returned matrix.\r\n */\r\nvar RotateMatrix = function (matrix, direction)\r\n{\r\n    if (direction === undefined) { direction = 90; }\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (typeof direction !== 'string')\r\n    {\r\n        direction = ((direction % 360) + 360) % 360;\r\n    }\r\n\r\n    if (direction === 90 || direction === -270 || direction === 'rotateLeft')\r\n    {\r\n        matrix = TransposeMatrix(matrix);\r\n        matrix.reverse();\r\n    }\r\n    else if (direction === -90 || direction === 270 || direction === 'rotateRight')\r\n    {\r\n        matrix.reverse();\r\n        matrix = TransposeMatrix(matrix);\r\n    }\r\n    else if (Math.abs(direction) === 180 || direction === 'rotate180')\r\n    {\r\n        for (var i = 0; i < matrix.length; i++)\r\n        {\r\n            matrix[i].reverse();\r\n        }\r\n\r\n        matrix.reverse();\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\nmodule.exports = RotateMatrix;\r\n"]},"metadata":{},"sourceType":"script"}