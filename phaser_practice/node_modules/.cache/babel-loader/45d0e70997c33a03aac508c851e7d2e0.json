{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A generic Key object which can be passed to the Process functions (and so on)\r\n * keycode must be an integer\r\n *\r\n * @class Key\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Keyboard.KeyboardPlugin} plugin - The Keyboard Plugin instance that owns this Key object.\r\n * @param {integer} keyCode - The keycode of this key.\r\n */\n\n\nvar Key = new Class({\n  Extends: EventEmitter,\n  initialize: function Key(plugin, keyCode) {\n    EventEmitter.call(this);\n    /**\r\n     * The Keyboard Plugin instance that owns this Key object.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#plugin\r\n     * @type {Phaser.Input.Keyboard.KeyboardPlugin}\r\n     * @since 3.17.0\r\n     */\n\n    this.plugin = plugin;\n    /**\r\n     * The keycode of this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#keyCode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.keyCode = keyCode;\n    /**\r\n     * The original DOM event.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#originalEvent\r\n     * @type {KeyboardEvent}\r\n     * @since 3.0.0\r\n     */\n\n    this.originalEvent = undefined;\n    /**\r\n     * Can this Key be processed?\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#isDown\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isDown = false;\n    /**\r\n     * The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#isUp\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.isUp = true;\n    /**\r\n     * The down state of the ALT key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#altKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.altKey = false;\n    /**\r\n     * The down state of the CTRL key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#ctrlKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.ctrlKey = false;\n    /**\r\n     * The down state of the SHIFT key, if pressed at the same time as this key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#shiftKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shiftKey = false;\n    /**\r\n     * The down state of the Meta key, if pressed at the same time as this key.\r\n     * On a Mac the Meta Key is the Command key. On Windows keyboards, it's the Windows key.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#metaKey\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.metaKey = false;\n    /**\r\n     * The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#location\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.location = 0;\n    /**\r\n     * The timestamp when the key was last pressed down.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#timeDown\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeDown = 0;\n    /**\r\n     * The number of milliseconds this key was held down for in the previous down - up sequence.\r\n     * This value isn't updated every game step, only when the Key changes state.\r\n     * To get the current duration use the `getDuration` method.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The timestamp when the key was last released.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#timeUp\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.timeUp = 0;\n    /**\r\n     * When a key is held down should it continuously fire the `down` event each time it repeats?\r\n     * \r\n     * By default it will emit the `down` event just once, but if you wish to receive the event\r\n     * for each repeat as well, enable this property.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#emitOnRepeat\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.emitOnRepeat = false;\n    /**\r\n     * If a key is held down this holds down the number of times the key has 'repeated'.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#repeats\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeats = 0;\n    /**\r\n     * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_justDown\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._justDown = false;\n    /**\r\n     * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_justUp\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._justUp = false;\n    /**\r\n     * Internal tick counter.\r\n     *\r\n     * @name Phaser.Input.Keyboard.Key#_tick\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._tick = -1;\n  },\n\n  /**\r\n   * Controls if this Key will continuously emit a `down` event while being held down (true),\r\n   * or emit the event just once, on first press, and then skip future events (false).\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#setEmitOnRepeat\r\n   * @since 3.16.0\r\n   * \r\n   * @param {boolean} value - Emit `down` events on repeated key down actions, or just once?\r\n   * \r\n   * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n   */\n  setEmitOnRepeat: function (value) {\n    this.emitOnRepeat = value;\n    return this;\n  },\n\n  /**\r\n   * Processes the Key Down action for this Key.\r\n   * Called automatically by the Keyboard Plugin.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#onDown\r\n   * @fires Phaser.Input.Keyboard.Events#DOWN\r\n   * @since 3.16.0\r\n   * \r\n   * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n   */\n  onDown: function (event) {\n    this.originalEvent = event;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    this.altKey = event.altKey;\n    this.ctrlKey = event.ctrlKey;\n    this.shiftKey = event.shiftKey;\n    this.metaKey = event.metaKey;\n    this.location = event.location;\n    this.repeats++;\n\n    if (!this.isDown) {\n      this.isDown = true;\n      this.isUp = false;\n      this.timeDown = event.timeStamp;\n      this.duration = 0;\n      this._justDown = true;\n      this._justUp = false;\n      this.emit(Events.DOWN, this, event);\n    } else if (this.emitOnRepeat) {\n      this.emit(Events.DOWN, this, event);\n    }\n  },\n\n  /**\r\n   * Processes the Key Up action for this Key.\r\n   * Called automatically by the Keyboard Plugin.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#onUp\r\n   * @fires Phaser.Input.Keyboard.Events#UP\r\n   * @since 3.16.0\r\n   * \r\n   * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n   */\n  onUp: function (event) {\n    this.originalEvent = event;\n\n    if (!this.enabled) {\n      return;\n    }\n\n    this.isDown = false;\n    this.isUp = true;\n    this.timeUp = event.timeStamp;\n    this.duration = this.timeUp - this.timeDown;\n    this.repeats = 0;\n    this._justDown = false;\n    this._justUp = true;\n    this._tick = -1;\n    this.emit(Events.UP, this, event);\n  },\n\n  /**\r\n   * Resets this Key object back to its default un-pressed state.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#reset\r\n   * @since 3.6.0\r\n   * \r\n   * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n   */\n  reset: function () {\n    this.preventDefault = true;\n    this.enabled = true;\n    this.isDown = false;\n    this.isUp = true;\n    this.altKey = false;\n    this.ctrlKey = false;\n    this.shiftKey = false;\n    this.metaKey = false;\n    this.timeDown = 0;\n    this.duration = 0;\n    this.timeUp = 0;\n    this.repeats = 0;\n    this._justDown = false;\n    this._justUp = false;\n    this._tick = -1;\n    return this;\n  },\n\n  /**\r\n   * Returns the duration, in ms, that the Key has been held down for.\r\n   * \r\n   * If the key is not currently down it will return zero.\r\n   * \r\n   * The get the duration the Key was held down for in the previous up-down cycle,\r\n   * use the `Key.duration` property value instead.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#getDuration\r\n   * @since 3.17.0\r\n   * \r\n   * @return {number} The duration, in ms, that the Key has been held down for if currently down.\r\n   */\n  getDuration: function () {\n    if (this.isDown) {\n      return this.plugin.game.loop.time - this.timeDown;\n    } else {\n      return 0;\n    }\n  },\n\n  /**\r\n   * Removes any bound event handlers and removes local references.\r\n   *\r\n   * @method Phaser.Input.Keyboard.Key#destroy\r\n   * @since 3.16.0\r\n   */\n  destroy: function () {\n    this.removeAllListeners();\n    this.originalEvent = null;\n    this.plugin = null;\n  }\n});\nmodule.exports = Key;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/keyboard/keys/Key.js"],"names":["Class","require","EventEmitter","Events","Key","Extends","initialize","plugin","keyCode","call","originalEvent","undefined","enabled","isDown","isUp","altKey","ctrlKey","shiftKey","metaKey","location","timeDown","duration","timeUp","emitOnRepeat","repeats","_justDown","_justUp","_tick","setEmitOnRepeat","value","onDown","event","timeStamp","emit","DOWN","onUp","UP","reset","preventDefault","getDuration","game","loop","time","destroy","removeAllListeners","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * A generic Key object which can be passed to the Process functions (and so on)\r\n * keycode must be an integer\r\n *\r\n * @class Key\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Keyboard.KeyboardPlugin} plugin - The Keyboard Plugin instance that owns this Key object.\r\n * @param {integer} keyCode - The keycode of this key.\r\n */\r\nvar Key = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Key (plugin, keyCode)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The Keyboard Plugin instance that owns this Key object.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#plugin\r\n         * @type {Phaser.Input.Keyboard.KeyboardPlugin}\r\n         * @since 3.17.0\r\n         */\r\n        this.plugin = plugin;\r\n\r\n        /**\r\n         * The keycode of this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#keyCode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.keyCode = keyCode;\r\n\r\n        /**\r\n         * The original DOM event.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#originalEvent\r\n         * @type {KeyboardEvent}\r\n         * @since 3.0.0\r\n         */\r\n        this.originalEvent = undefined;\r\n\r\n        /**\r\n         * Can this Key be processed?\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The \"down\" state of the key. This will remain `true` for as long as the keyboard thinks this key is held down.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#isDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isDown = false;\r\n\r\n        /**\r\n         * The \"up\" state of the key. This will remain `true` for as long as the keyboard thinks this key is up.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#isUp\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.isUp = true;\r\n\r\n        /**\r\n         * The down state of the ALT key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#altKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.altKey = false;\r\n\r\n        /**\r\n         * The down state of the CTRL key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#ctrlKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.ctrlKey = false;\r\n\r\n        /**\r\n         * The down state of the SHIFT key, if pressed at the same time as this key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#shiftKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shiftKey = false;\r\n\r\n        /**\r\n         * The down state of the Meta key, if pressed at the same time as this key.\r\n         * On a Mac the Meta Key is the Command key. On Windows keyboards, it's the Windows key.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#metaKey\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.16.0\r\n         */\r\n        this.metaKey = false;\r\n\r\n        /**\r\n         * The location of the modifier key. 0 for standard (or unknown), 1 for left, 2 for right, 3 for numpad.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#location\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.location = 0;\r\n\r\n        /**\r\n         * The timestamp when the key was last pressed down.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#timeDown\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeDown = 0;\r\n\r\n        /**\r\n         * The number of milliseconds this key was held down for in the previous down - up sequence.\r\n         * This value isn't updated every game step, only when the Key changes state.\r\n         * To get the current duration use the `getDuration` method.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The timestamp when the key was last released.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#timeUp\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.timeUp = 0;\r\n\r\n        /**\r\n         * When a key is held down should it continuously fire the `down` event each time it repeats?\r\n         * \r\n         * By default it will emit the `down` event just once, but if you wish to receive the event\r\n         * for each repeat as well, enable this property.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#emitOnRepeat\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.16.0\r\n         */\r\n        this.emitOnRepeat = false;\r\n\r\n        /**\r\n         * If a key is held down this holds down the number of times the key has 'repeated'.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#repeats\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeats = 0;\r\n\r\n        /**\r\n         * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_justDown\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._justDown = false;\r\n\r\n        /**\r\n         * True if the key has just been pressed (NOTE: requires to be reset, see justDown getter)\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_justUp\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._justUp = false;\r\n\r\n        /**\r\n         * Internal tick counter.\r\n         *\r\n         * @name Phaser.Input.Keyboard.Key#_tick\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._tick = -1;\r\n    },\r\n\r\n    /**\r\n     * Controls if this Key will continuously emit a `down` event while being held down (true),\r\n     * or emit the event just once, on first press, and then skip future events (false).\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#setEmitOnRepeat\r\n     * @since 3.16.0\r\n     * \r\n     * @param {boolean} value - Emit `down` events on repeated key down actions, or just once?\r\n     * \r\n     * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n     */\r\n    setEmitOnRepeat: function (value)\r\n    {\r\n        this.emitOnRepeat = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Processes the Key Down action for this Key.\r\n     * Called automatically by the Keyboard Plugin.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#onDown\r\n     * @fires Phaser.Input.Keyboard.Events#DOWN\r\n     * @since 3.16.0\r\n     * \r\n     * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n     */\r\n    onDown: function (event)\r\n    {\r\n        this.originalEvent = event;\r\n\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.altKey = event.altKey;\r\n        this.ctrlKey = event.ctrlKey;\r\n        this.shiftKey = event.shiftKey;\r\n        this.metaKey = event.metaKey;\r\n        this.location = event.location;\r\n    \r\n        this.repeats++;\r\n\r\n        if (!this.isDown)\r\n        {\r\n            this.isDown = true;\r\n            this.isUp = false;\r\n            this.timeDown = event.timeStamp;\r\n            this.duration = 0;\r\n            this._justDown = true;\r\n            this._justUp = false;\r\n\r\n            this.emit(Events.DOWN, this, event);\r\n        }\r\n        else if (this.emitOnRepeat)\r\n        {\r\n            this.emit(Events.DOWN, this, event);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Processes the Key Up action for this Key.\r\n     * Called automatically by the Keyboard Plugin.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#onUp\r\n     * @fires Phaser.Input.Keyboard.Events#UP\r\n     * @since 3.16.0\r\n     * \r\n     * @param {KeyboardEvent} event - The native DOM Keyboard event.\r\n     */\r\n    onUp: function (event)\r\n    {\r\n        this.originalEvent = event;\r\n\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n    \r\n        this.isDown = false;\r\n        this.isUp = true;\r\n        this.timeUp = event.timeStamp;\r\n        this.duration = this.timeUp - this.timeDown;\r\n        this.repeats = 0;\r\n    \r\n        this._justDown = false;\r\n        this._justUp = true;\r\n        this._tick = -1;\r\n        \r\n        this.emit(Events.UP, this, event);\r\n    },\r\n\r\n    /**\r\n     * Resets this Key object back to its default un-pressed state.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#reset\r\n     * @since 3.6.0\r\n     * \r\n     * @return {Phaser.Input.Keyboard.Key} This Key instance.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.preventDefault = true;\r\n        this.enabled = true;\r\n        this.isDown = false;\r\n        this.isUp = true;\r\n        this.altKey = false;\r\n        this.ctrlKey = false;\r\n        this.shiftKey = false;\r\n        this.metaKey = false;\r\n        this.timeDown = 0;\r\n        this.duration = 0;\r\n        this.timeUp = 0;\r\n        this.repeats = 0;\r\n        this._justDown = false;\r\n        this._justUp = false;\r\n        this._tick = -1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the duration, in ms, that the Key has been held down for.\r\n     * \r\n     * If the key is not currently down it will return zero.\r\n     * \r\n     * The get the duration the Key was held down for in the previous up-down cycle,\r\n     * use the `Key.duration` property value instead.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#getDuration\r\n     * @since 3.17.0\r\n     * \r\n     * @return {number} The duration, in ms, that the Key has been held down for if currently down.\r\n     */\r\n    getDuration: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return (this.plugin.game.loop.time - this.timeDown);\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes any bound event handlers and removes local references.\r\n     *\r\n     * @method Phaser.Input.Keyboard.Key#destroy\r\n     * @since 3.16.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.originalEvent = null;\r\n\r\n        this.plugin = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Key;\r\n"]},"metadata":{},"sourceType":"script"}