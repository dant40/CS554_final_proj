{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar modes = require('../../BlendModes');\n\nvar CanvasFeatures = require('../../../device/CanvasFeatures');\n/**\r\n * Returns an array which maps the default blend modes to supported Canvas blend modes.\r\n *\r\n * If the browser doesn't support a blend mode, it will default to the normal `source-over` blend mode.\r\n *\r\n * @function Phaser.Renderer.Canvas.GetBlendModes\r\n * @since 3.0.0\r\n *\r\n * @return {array} Which Canvas blend mode corresponds to which default Phaser blend mode.\r\n */\n\n\nvar GetBlendModes = function () {\n  var output = [];\n  var useNew = CanvasFeatures.supportNewBlendModes;\n  var so = 'source-over';\n  output[modes.NORMAL] = so;\n  output[modes.ADD] = 'lighter';\n  output[modes.MULTIPLY] = useNew ? 'multiply' : so;\n  output[modes.SCREEN] = useNew ? 'screen' : so;\n  output[modes.OVERLAY] = useNew ? 'overlay' : so;\n  output[modes.DARKEN] = useNew ? 'darken' : so;\n  output[modes.LIGHTEN] = useNew ? 'lighten' : so;\n  output[modes.COLOR_DODGE] = useNew ? 'color-dodge' : so;\n  output[modes.COLOR_BURN] = useNew ? 'color-burn' : so;\n  output[modes.HARD_LIGHT] = useNew ? 'hard-light' : so;\n  output[modes.SOFT_LIGHT] = useNew ? 'soft-light' : so;\n  output[modes.DIFFERENCE] = useNew ? 'difference' : so;\n  output[modes.EXCLUSION] = useNew ? 'exclusion' : so;\n  output[modes.HUE] = useNew ? 'hue' : so;\n  output[modes.SATURATION] = useNew ? 'saturation' : so;\n  output[modes.COLOR] = useNew ? 'color' : so;\n  output[modes.LUMINOSITY] = useNew ? 'luminosity' : so;\n  output[modes.ERASE] = 'destination-out';\n  output[modes.SOURCE_IN] = 'source-in';\n  output[modes.SOURCE_OUT] = 'source-out';\n  output[modes.SOURCE_ATOP] = 'source-atop';\n  output[modes.DESTINATION_OVER] = 'destination-over';\n  output[modes.DESTINATION_IN] = 'destination-in';\n  output[modes.DESTINATION_OUT] = 'destination-out';\n  output[modes.DESTINATION_ATOP] = 'destination-atop';\n  output[modes.LIGHTER] = 'lighter';\n  output[modes.COPY] = 'copy';\n  output[modes.XOR] = 'xor';\n  return output;\n};\n\nmodule.exports = GetBlendModes;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/canvas/utils/GetBlendModes.js"],"names":["modes","require","CanvasFeatures","GetBlendModes","output","useNew","supportNewBlendModes","so","NORMAL","ADD","MULTIPLY","SCREEN","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","ERASE","SOURCE_IN","SOURCE_OUT","SOURCE_ATOP","DESTINATION_OVER","DESTINATION_IN","DESTINATION_OUT","DESTINATION_ATOP","LIGHTER","COPY","XOR","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar modes = require('../../BlendModes');\r\nvar CanvasFeatures = require('../../../device/CanvasFeatures');\r\n\r\n/**\r\n * Returns an array which maps the default blend modes to supported Canvas blend modes.\r\n *\r\n * If the browser doesn't support a blend mode, it will default to the normal `source-over` blend mode.\r\n *\r\n * @function Phaser.Renderer.Canvas.GetBlendModes\r\n * @since 3.0.0\r\n *\r\n * @return {array} Which Canvas blend mode corresponds to which default Phaser blend mode.\r\n */\r\nvar GetBlendModes = function ()\r\n{\r\n    var output = [];\r\n    var useNew = CanvasFeatures.supportNewBlendModes;\r\n    var so = 'source-over';\r\n\r\n    output[modes.NORMAL] = so;\r\n    output[modes.ADD] = 'lighter';\r\n    output[modes.MULTIPLY] = (useNew) ? 'multiply' : so;\r\n    output[modes.SCREEN] = (useNew) ? 'screen' : so;\r\n    output[modes.OVERLAY] = (useNew) ? 'overlay' : so;\r\n    output[modes.DARKEN] = (useNew) ? 'darken' : so;\r\n    output[modes.LIGHTEN] = (useNew) ? 'lighten' : so;\r\n    output[modes.COLOR_DODGE] = (useNew) ? 'color-dodge' : so;\r\n    output[modes.COLOR_BURN] = (useNew) ? 'color-burn' : so;\r\n    output[modes.HARD_LIGHT] = (useNew) ? 'hard-light' : so;\r\n    output[modes.SOFT_LIGHT] = (useNew) ? 'soft-light' : so;\r\n    output[modes.DIFFERENCE] = (useNew) ? 'difference' : so;\r\n    output[modes.EXCLUSION] = (useNew) ? 'exclusion' : so;\r\n    output[modes.HUE] = (useNew) ? 'hue' : so;\r\n    output[modes.SATURATION] = (useNew) ? 'saturation' : so;\r\n    output[modes.COLOR] = (useNew) ? 'color' : so;\r\n    output[modes.LUMINOSITY] = (useNew) ? 'luminosity' : so;\r\n    output[modes.ERASE] = 'destination-out';\r\n    output[modes.SOURCE_IN] = 'source-in';\r\n    output[modes.SOURCE_OUT] = 'source-out';\r\n    output[modes.SOURCE_ATOP] = 'source-atop';\r\n    output[modes.DESTINATION_OVER] = 'destination-over';\r\n    output[modes.DESTINATION_IN] = 'destination-in';\r\n    output[modes.DESTINATION_OUT] = 'destination-out';\r\n    output[modes.DESTINATION_ATOP] = 'destination-atop';\r\n    output[modes.LIGHTER] = 'lighter';\r\n    output[modes.COPY] = 'copy';\r\n    output[modes.XOR] = 'xor';\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetBlendModes;\r\n"]},"metadata":{},"sourceType":"script"}