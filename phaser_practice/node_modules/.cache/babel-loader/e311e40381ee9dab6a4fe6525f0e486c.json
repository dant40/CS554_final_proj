{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A Tileset is a combination of an image containing the tiles and a container for data about\r\n * each tile.\r\n *\r\n * @class Tileset\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tileset in the map data.\r\n * @param {integer} firstgid - The first tile index this tileset contains.\r\n * @param {integer} [tileWidth=32] - Width of each tile (in pixels).\r\n * @param {integer} [tileHeight=32] - Height of each tile (in pixels).\r\n * @param {integer} [tileMargin=0] - The margin around all tiles in the sheet (in pixels).\r\n * @param {integer} [tileSpacing=0] - The spacing between each tile in the sheet (in pixels).\r\n * @param {object} [tileProperties={}] - Custom properties defined per tile in the Tileset.\r\n * These typically are custom properties created in Tiled when editing a tileset.\r\n * @param {object} [tileData={}] - Data stored per tile. These typically are created in Tiled\r\n * when editing a tileset, e.g. from Tiled's tile collision editor or terrain editor.\r\n */\n\n\nvar Tileset = new Class({\n  initialize: function Tileset(name, firstgid, tileWidth, tileHeight, tileMargin, tileSpacing, tileProperties, tileData) {\n    if (tileWidth === undefined || tileWidth <= 0) {\n      tileWidth = 32;\n    }\n\n    if (tileHeight === undefined || tileHeight <= 0) {\n      tileHeight = 32;\n    }\n\n    if (tileMargin === undefined) {\n      tileMargin = 0;\n    }\n\n    if (tileSpacing === undefined) {\n      tileSpacing = 0;\n    }\n\n    if (tileProperties === undefined) {\n      tileProperties = {};\n    }\n\n    if (tileData === undefined) {\n      tileData = {};\n    }\n    /**\r\n     * The name of the Tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.name = name;\n    /**\r\n     * The starting index of the first tile index this Tileset contains.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#firstgid\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.firstgid = firstgid;\n    /**\r\n     * The width of each tile (in pixels). Use setTileSize to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileWidth\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileWidth = tileWidth;\n    /**\r\n     * The height of each tile (in pixels). Use setTileSize to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileHeight\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileHeight = tileHeight;\n    /**\r\n     * The margin around the tiles in the sheet (in pixels). Use `setSpacing` to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileMargin\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileMargin = tileMargin;\n    /**\r\n     * The spacing between each the tile in the sheet (in pixels). Use `setSpacing` to change.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileSpacing\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.tileSpacing = tileSpacing;\n    /**\r\n     * Tileset-specific properties per tile that are typically defined in the Tiled editor in the\r\n     * Tileset editor.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileProperties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileProperties = tileProperties;\n    /**\r\n     * Tileset-specific data per tile that are typically defined in the Tiled editor, e.g. within\r\n     * the Tileset collision editor. This is where collision objects and terrain are stored.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#tileData\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileData = tileData;\n    /**\r\n     * The cached image that contains the individual tiles. Use setImage to set.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#image\r\n     * @type {?Phaser.Textures.Texture}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.image = null;\n    /**\r\n     * The gl texture used by the WebGL renderer.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.glTexture = null;\n    /**\r\n     * The number of tile rows in the the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#rows\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.rows = 0;\n    /**\r\n     * The number of tile columns in the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#columns\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.columns = 0;\n    /**\r\n     * The total number of tiles in the tileset.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#total\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.total = 0;\n    /**\r\n     * The look-up table to specific tile image texture coordinates (UV in pixels). Each element\r\n     * contains the coordinates for a tile in an object of the form {x, y}.\r\n     *\r\n     * @name Phaser.Tilemaps.Tileset#texCoordinates\r\n     * @type {object[]}\r\n     * @readonly\r\n     * @since 3.0.0\r\n    */\n\n    this.texCoordinates = [];\n  },\n\n  /**\r\n   * Get a tiles properties that are stored in the Tileset. Returns null if tile index is not\r\n   * contained in this Tileset. This is typically defined in Tiled under the Tileset editor.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileProperties\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?(object|undefined)}\r\n   */\n  getTileProperties: function (tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.tileProperties[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Get a tile's data that is stored in the Tileset. Returns null if tile index is not contained\r\n   * in this Tileset. This is typically defined in Tiled and will contain both Tileset collision\r\n   * info and terrain mapping.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileData\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object|undefined}\r\n   */\n  getTileData: function (tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.tileData[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Get a tile's collision group that is stored in the Tileset. Returns null if tile index is not\r\n   * contained in this Tileset. This is typically defined within Tiled's tileset collision editor.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object}\r\n   */\n  getTileCollisionGroup: function (tileIndex) {\n    var data = this.getTileData(tileIndex);\n    return data && data.objectgroup ? data.objectgroup : null;\n  },\n\n  /**\r\n   * Returns true if and only if this Tileset contains the given tile index.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#containsTileIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {boolean}\r\n   */\n  containsTileIndex: function (tileIndex) {\n    return tileIndex >= this.firstgid && tileIndex < this.firstgid + this.total;\n  },\n\n  /**\r\n   * Returns the texture coordinates (UV in pixels) in the Tileset image for the given tile index.\r\n   * Returns null if tile index is not contained in this Tileset.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#getTileTextureCoordinates\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n   *\r\n   * @return {?object} Object in the form { x, y } representing the top-left UV coordinate\r\n   * within the Tileset image.\r\n   */\n  getTileTextureCoordinates: function (tileIndex) {\n    if (!this.containsTileIndex(tileIndex)) {\n      return null;\n    }\n\n    return this.texCoordinates[tileIndex - this.firstgid];\n  },\n\n  /**\r\n   * Sets the image associated with this Tileset and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.Texture} texture - The image that contains the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setImage: function (texture) {\n    this.image = texture;\n    this.glTexture = texture.get().source.glTexture;\n    this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    return this;\n  },\n\n  /**\r\n   * Sets the tile width & height and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setTileSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileWidth] - The width of a tile in pixels.\r\n   * @param {integer} [tileHeight] - The height of a tile in pixels.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setTileSize: function (tileWidth, tileHeight) {\n    if (tileWidth !== undefined) {\n      this.tileWidth = tileWidth;\n    }\n\n    if (tileHeight !== undefined) {\n      this.tileHeight = tileHeight;\n    }\n\n    if (this.image) {\n      this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the tile margin & spacing and updates the tile data (rows, columns, etc.).\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#setSpacing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [margin] - The margin around the tiles in the sheet (in pixels).\r\n   * @param {integer} [spacing] - The spacing between the tiles in the sheet (in pixels).\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  setSpacing: function (margin, spacing) {\n    if (margin !== undefined) {\n      this.tileMargin = margin;\n    }\n\n    if (spacing !== undefined) {\n      this.tileSpacing = spacing;\n    }\n\n    if (this.image) {\n      this.updateTileData(this.image.source[0].width, this.image.source[0].height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Updates tile texture coordinates and tileset data.\r\n   *\r\n   * @method Phaser.Tilemaps.Tileset#updateTileData\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} imageWidth - The (expected) width of the image to slice.\r\n   * @param {integer} imageHeight - The (expected) height of the image to slice.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n   */\n  updateTileData: function (imageWidth, imageHeight) {\n    var rowCount = (imageHeight - this.tileMargin * 2 + this.tileSpacing) / (this.tileHeight + this.tileSpacing);\n    var colCount = (imageWidth - this.tileMargin * 2 + this.tileSpacing) / (this.tileWidth + this.tileSpacing);\n\n    if (rowCount % 1 !== 0 || colCount % 1 !== 0) {\n      console.warn('Image tile area not tile size multiple in: ' + this.name);\n    } // In Tiled a tileset image that is not an even multiple of the tile dimensions is truncated\n    // - hence the floor when calculating the rows/columns.\n\n\n    rowCount = Math.floor(rowCount);\n    colCount = Math.floor(colCount);\n    this.rows = rowCount;\n    this.columns = colCount; // In Tiled, \"empty\" spaces in a tileset count as tiles and hence count towards the gid\n\n    this.total = rowCount * colCount;\n    this.texCoordinates.length = 0;\n    var tx = this.tileMargin;\n    var ty = this.tileMargin;\n\n    for (var y = 0; y < this.rows; y++) {\n      for (var x = 0; x < this.columns; x++) {\n        this.texCoordinates.push({\n          x: tx,\n          y: ty\n        });\n        tx += this.tileWidth + this.tileSpacing;\n      }\n\n      tx = this.tileMargin;\n      ty += this.tileHeight + this.tileSpacing;\n    }\n\n    return this;\n  }\n});\nmodule.exports = Tileset;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/Tileset.js"],"names":["Class","require","Tileset","initialize","name","firstgid","tileWidth","tileHeight","tileMargin","tileSpacing","tileProperties","tileData","undefined","image","glTexture","rows","columns","total","texCoordinates","getTileProperties","tileIndex","containsTileIndex","getTileData","getTileCollisionGroup","data","objectgroup","getTileTextureCoordinates","setImage","texture","get","source","updateTileData","width","height","setTileSize","setSpacing","margin","spacing","imageWidth","imageHeight","rowCount","colCount","console","warn","Math","floor","length","tx","ty","y","x","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAIC,OAAO,GAAG,IAAIF,KAAJ,CAAU;AAEpBG,EAAAA,UAAU,EAEV,SAASD,OAAT,CAAkBE,IAAlB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,UAA7C,EAAyDC,UAAzD,EAAqEC,WAArE,EAAkFC,cAAlF,EAAkGC,QAAlG,EACA;AACI,QAAIL,SAAS,KAAKM,SAAd,IAA2BN,SAAS,IAAI,CAA5C,EAA+C;AAAEA,MAAAA,SAAS,GAAG,EAAZ;AAAiB;;AAClE,QAAIC,UAAU,KAAKK,SAAf,IAA4BL,UAAU,IAAI,CAA9C,EAAiD;AAAEA,MAAAA,UAAU,GAAG,EAAb;AAAkB;;AACrE,QAAIC,UAAU,KAAKI,SAAnB,EAA8B;AAAEJ,MAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,QAAIC,WAAW,KAAKG,SAApB,EAA+B;AAAEH,MAAAA,WAAW,GAAG,CAAd;AAAkB;;AACnD,QAAIC,cAAc,KAAKE,SAAvB,EAAkC;AAAEF,MAAAA,cAAc,GAAG,EAAjB;AAAsB;;AAC1D,QAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAAED,MAAAA,QAAQ,GAAG,EAAX;AAAgB;AAE9C;;;;;;;;;AAOA,SAAKP,IAAL,GAAYA,IAAZ;AAEA;;;;;;;;AAOA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA;;;;;;;;;AAQA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA;;;;;;;;;AAQA,SAAKC,UAAL,GAAkBA,UAAlB;AAEA;;;;;;;;;AAQA,SAAKC,UAAL,GAAkBA,UAAlB;AAEA;;;;;;;;;AAQA,SAAKC,WAAL,GAAmBA,WAAnB;AAEA;;;;;;;;;AAQA,SAAKC,cAAL,GAAsBA,cAAtB;AAEA;;;;;;;;;AAQA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA;;;;;;;;;AAQA,SAAKE,KAAL,GAAa,IAAb;AAEA;;;;;;;;;AAQA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;;;;;;;;AAQA,SAAKC,IAAL,GAAY,CAAZ;AAEA;;;;;;;;;AAQA,SAAKC,OAAL,GAAe,CAAf;AAEA;;;;;;;;;AAQA,SAAKC,KAAL,GAAa,CAAb;AAEA;;;;;;;;;;AASA,SAAKC,cAAL,GAAsB,EAAtB;AACH,GAvJmB;;AAyJpB;;;;;;;;;;;AAWAC,EAAAA,iBAAiB,EAAE,UAAUC,SAAV,EACnB;AACI,QAAI,CAAC,KAAKC,iBAAL,CAAuBD,SAAvB,CAAL,EAAwC;AAAE,aAAO,IAAP;AAAc;;AAExD,WAAO,KAAKV,cAAL,CAAoBU,SAAS,GAAG,KAAKf,QAArC,CAAP;AACH,GAzKmB;;AA2KpB;;;;;;;;;;;;AAYAiB,EAAAA,WAAW,EAAE,UAAUF,SAAV,EACb;AACI,QAAI,CAAC,KAAKC,iBAAL,CAAuBD,SAAvB,CAAL,EAAwC;AAAE,aAAO,IAAP;AAAc;;AAExD,WAAO,KAAKT,QAAL,CAAcS,SAAS,GAAG,KAAKf,QAA/B,CAAP;AACH,GA5LmB;;AA8LpB;;;;;;;;;;;AAWAkB,EAAAA,qBAAqB,EAAE,UAAUH,SAAV,EACvB;AACI,QAAII,IAAI,GAAG,KAAKF,WAAL,CAAiBF,SAAjB,CAAX;AAEA,WAAQI,IAAI,IAAIA,IAAI,CAACC,WAAd,GAA6BD,IAAI,CAACC,WAAlC,GAAgD,IAAvD;AACH,GA9MmB;;AAgNpB;;;;;;;;;;AAUAJ,EAAAA,iBAAiB,EAAE,UAAUD,SAAV,EACnB;AACI,WACIA,SAAS,IAAI,KAAKf,QAAlB,IACAe,SAAS,GAAI,KAAKf,QAAL,GAAgB,KAAKY,KAFtC;AAIH,GAhOmB;;AAkOpB;;;;;;;;;;;;AAYAS,EAAAA,yBAAyB,EAAE,UAAUN,SAAV,EAC3B;AACI,QAAI,CAAC,KAAKC,iBAAL,CAAuBD,SAAvB,CAAL,EAAwC;AAAE,aAAO,IAAP;AAAc;;AAExD,WAAO,KAAKF,cAAL,CAAoBE,SAAS,GAAG,KAAKf,QAArC,CAAP;AACH,GAnPmB;;AAqPpB;;;;;;;;;;AAUAsB,EAAAA,QAAQ,EAAE,UAAUC,OAAV,EACV;AACI,SAAKf,KAAL,GAAae,OAAb;AAEA,SAAKd,SAAL,GAAiBc,OAAO,CAACC,GAAR,GAAcC,MAAd,CAAqBhB,SAAtC;AAEA,SAAKiB,cAAL,CAAoB,KAAKlB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBE,KAAzC,EAAgD,KAAKnB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBG,MAArE;AAEA,WAAO,IAAP;AACH,GAxQmB;;AA0QpB;;;;;;;;;;;AAWAC,EAAAA,WAAW,EAAE,UAAU5B,SAAV,EAAqBC,UAArB,EACb;AACI,QAAID,SAAS,KAAKM,SAAlB,EAA6B;AAAE,WAAKN,SAAL,GAAiBA,SAAjB;AAA6B;;AAC5D,QAAIC,UAAU,KAAKK,SAAnB,EAA8B;AAAE,WAAKL,UAAL,GAAkBA,UAAlB;AAA+B;;AAE/D,QAAI,KAAKM,KAAT,EACA;AACI,WAAKkB,cAAL,CAAoB,KAAKlB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBE,KAAzC,EAAgD,KAAKnB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBG,MAArE;AACH;;AAED,WAAO,IAAP;AACH,GAhSmB;;AAkSpB;;;;;;;;;;;AAWAE,EAAAA,UAAU,EAAE,UAAUC,MAAV,EAAkBC,OAAlB,EACZ;AACI,QAAID,MAAM,KAAKxB,SAAf,EAA0B;AAAE,WAAKJ,UAAL,GAAkB4B,MAAlB;AAA2B;;AACvD,QAAIC,OAAO,KAAKzB,SAAhB,EAA2B;AAAE,WAAKH,WAAL,GAAmB4B,OAAnB;AAA6B;;AAE1D,QAAI,KAAKxB,KAAT,EACA;AACI,WAAKkB,cAAL,CAAoB,KAAKlB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBE,KAAzC,EAAgD,KAAKnB,KAAL,CAAWiB,MAAX,CAAkB,CAAlB,EAAqBG,MAArE;AACH;;AAED,WAAO,IAAP;AACH,GAxTmB;;AA0TpB;;;;;;;;;;;AAWAF,EAAAA,cAAc,EAAE,UAAUO,UAAV,EAAsBC,WAAtB,EAChB;AACI,QAAIC,QAAQ,GAAG,CAACD,WAAW,GAAG,KAAK/B,UAAL,GAAkB,CAAhC,GAAoC,KAAKC,WAA1C,KAA0D,KAAKF,UAAL,GAAkB,KAAKE,WAAjF,CAAf;AACA,QAAIgC,QAAQ,GAAG,CAACH,UAAU,GAAG,KAAK9B,UAAL,GAAkB,CAA/B,GAAmC,KAAKC,WAAzC,KAAyD,KAAKH,SAAL,GAAiB,KAAKG,WAA/E,CAAf;;AAEA,QAAI+B,QAAQ,GAAG,CAAX,KAAiB,CAAjB,IAAsBC,QAAQ,GAAG,CAAX,KAAiB,CAA3C,EACA;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAa,gDAAgD,KAAKvC,IAAlE;AACH,KAPL,CASI;AACA;;;AACAoC,IAAAA,QAAQ,GAAGI,IAAI,CAACC,KAAL,CAAWL,QAAX,CAAX;AACAC,IAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAX;AAEA,SAAK1B,IAAL,GAAYyB,QAAZ;AACA,SAAKxB,OAAL,GAAeyB,QAAf,CAfJ,CAiBI;;AACA,SAAKxB,KAAL,GAAauB,QAAQ,GAAGC,QAAxB;AAEA,SAAKvB,cAAL,CAAoB4B,MAApB,GAA6B,CAA7B;AAEA,QAAIC,EAAE,GAAG,KAAKvC,UAAd;AACA,QAAIwC,EAAE,GAAG,KAAKxC,UAAd;;AAEA,SAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlC,IAAzB,EAA+BkC,CAAC,EAAhC,EACA;AACI,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlC,OAAzB,EAAkCkC,CAAC,EAAnC,EACA;AACI,aAAKhC,cAAL,CAAoBiC,IAApB,CAAyB;AAAED,UAAAA,CAAC,EAAEH,EAAL;AAASE,UAAAA,CAAC,EAAED;AAAZ,SAAzB;AACAD,QAAAA,EAAE,IAAI,KAAKzC,SAAL,GAAiB,KAAKG,WAA5B;AACH;;AAEDsC,MAAAA,EAAE,GAAG,KAAKvC,UAAV;AACAwC,MAAAA,EAAE,IAAI,KAAKzC,UAAL,GAAkB,KAAKE,WAA7B;AACH;;AAED,WAAO,IAAP;AACH;AA5WmB,CAAV,CAAd;AAgXA2C,MAAM,CAACC,OAAP,GAAiBnD,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Tileset is a combination of an image containing the tiles and a container for data about\r\n * each tile.\r\n *\r\n * @class Tileset\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tileset in the map data.\r\n * @param {integer} firstgid - The first tile index this tileset contains.\r\n * @param {integer} [tileWidth=32] - Width of each tile (in pixels).\r\n * @param {integer} [tileHeight=32] - Height of each tile (in pixels).\r\n * @param {integer} [tileMargin=0] - The margin around all tiles in the sheet (in pixels).\r\n * @param {integer} [tileSpacing=0] - The spacing between each tile in the sheet (in pixels).\r\n * @param {object} [tileProperties={}] - Custom properties defined per tile in the Tileset.\r\n * These typically are custom properties created in Tiled when editing a tileset.\r\n * @param {object} [tileData={}] - Data stored per tile. These typically are created in Tiled\r\n * when editing a tileset, e.g. from Tiled's tile collision editor or terrain editor.\r\n */\r\nvar Tileset = new Class({\r\n\r\n    initialize:\r\n\r\n    function Tileset (name, firstgid, tileWidth, tileHeight, tileMargin, tileSpacing, tileProperties, tileData)\r\n    {\r\n        if (tileWidth === undefined || tileWidth <= 0) { tileWidth = 32; }\r\n        if (tileHeight === undefined || tileHeight <= 0) { tileHeight = 32; }\r\n        if (tileMargin === undefined) { tileMargin = 0; }\r\n        if (tileSpacing === undefined) { tileSpacing = 0; }\r\n        if (tileProperties === undefined) { tileProperties = {}; }\r\n        if (tileData === undefined) { tileData = {}; }\r\n\r\n        /**\r\n         * The name of the Tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = name;\r\n\r\n        /**\r\n         * The starting index of the first tile index this Tileset contains.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#firstgid\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstgid = firstgid;\r\n\r\n        /**\r\n         * The width of each tile (in pixels). Use setTileSize to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileWidth\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = tileWidth;\r\n\r\n        /**\r\n         * The height of each tile (in pixels). Use setTileSize to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileHeight\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = tileHeight;\r\n\r\n        /**\r\n         * The margin around the tiles in the sheet (in pixels). Use `setSpacing` to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileMargin\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileMargin = tileMargin;\r\n\r\n        /**\r\n         * The spacing between each the tile in the sheet (in pixels). Use `setSpacing` to change.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileSpacing\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.tileSpacing = tileSpacing;\r\n\r\n        /**\r\n         * Tileset-specific properties per tile that are typically defined in the Tiled editor in the\r\n         * Tileset editor.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileProperties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileProperties = tileProperties;\r\n\r\n        /**\r\n         * Tileset-specific data per tile that are typically defined in the Tiled editor, e.g. within\r\n         * the Tileset collision editor. This is where collision objects and terrain are stored.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#tileData\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileData = tileData;\r\n\r\n        /**\r\n         * The cached image that contains the individual tiles. Use setImage to set.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#image\r\n         * @type {?Phaser.Textures.Texture}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.image = null;\r\n\r\n        /**\r\n         * The gl texture used by the WebGL renderer.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#glTexture\r\n         * @type {?WebGLTexture}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        /**\r\n         * The number of tile rows in the the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#rows\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.rows = 0;\r\n\r\n        /**\r\n         * The number of tile columns in the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#columns\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.columns = 0;\r\n\r\n        /**\r\n         * The total number of tiles in the tileset.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#total\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.total = 0;\r\n\r\n        /**\r\n         * The look-up table to specific tile image texture coordinates (UV in pixels). Each element\r\n         * contains the coordinates for a tile in an object of the form {x, y}.\r\n         *\r\n         * @name Phaser.Tilemaps.Tileset#texCoordinates\r\n         * @type {object[]}\r\n         * @readonly\r\n         * @since 3.0.0\r\n        */\r\n        this.texCoordinates = [];\r\n    },\r\n\r\n    /**\r\n     * Get a tiles properties that are stored in the Tileset. Returns null if tile index is not\r\n     * contained in this Tileset. This is typically defined in Tiled under the Tileset editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileProperties\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?(object|undefined)}\r\n     */\r\n    getTileProperties: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.tileProperties[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Get a tile's data that is stored in the Tileset. Returns null if tile index is not contained\r\n     * in this Tileset. This is typically defined in Tiled and will contain both Tileset collision\r\n     * info and terrain mapping.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileData\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object|undefined}\r\n     */\r\n    getTileData: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.tileData[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Get a tile's collision group that is stored in the Tileset. Returns null if tile index is not\r\n     * contained in this Tileset. This is typically defined within Tiled's tileset collision editor.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object}\r\n     */\r\n    getTileCollisionGroup: function (tileIndex)\r\n    {\r\n        var data = this.getTileData(tileIndex);\r\n\r\n        return (data && data.objectgroup) ? data.objectgroup : null;\r\n    },\r\n\r\n    /**\r\n     * Returns true if and only if this Tileset contains the given tile index.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#containsTileIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {boolean}\r\n     */\r\n    containsTileIndex: function (tileIndex)\r\n    {\r\n        return (\r\n            tileIndex >= this.firstgid &&\r\n            tileIndex < (this.firstgid + this.total)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Returns the texture coordinates (UV in pixels) in the Tileset image for the given tile index.\r\n     * Returns null if tile index is not contained in this Tileset.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#getTileTextureCoordinates\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileIndex - The unique id of the tile across all tilesets in the map.\r\n     *\r\n     * @return {?object} Object in the form { x, y } representing the top-left UV coordinate\r\n     * within the Tileset image.\r\n     */\r\n    getTileTextureCoordinates: function (tileIndex)\r\n    {\r\n        if (!this.containsTileIndex(tileIndex)) { return null; }\r\n\r\n        return this.texCoordinates[tileIndex - this.firstgid];\r\n    },\r\n\r\n    /**\r\n     * Sets the image associated with this Tileset and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.Texture} texture - The image that contains the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setImage: function (texture)\r\n    {\r\n        this.image = texture;\r\n\r\n        this.glTexture = texture.get().source.glTexture;\r\n\r\n        this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile width & height and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setTileSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileWidth] - The width of a tile in pixels.\r\n     * @param {integer} [tileHeight] - The height of a tile in pixels.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setTileSize: function (tileWidth, tileHeight)\r\n    {\r\n        if (tileWidth !== undefined) { this.tileWidth = tileWidth; }\r\n        if (tileHeight !== undefined) { this.tileHeight = tileHeight; }\r\n\r\n        if (this.image)\r\n        {\r\n            this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tile margin & spacing and updates the tile data (rows, columns, etc.).\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#setSpacing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [margin] - The margin around the tiles in the sheet (in pixels).\r\n     * @param {integer} [spacing] - The spacing between the tiles in the sheet (in pixels).\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    setSpacing: function (margin, spacing)\r\n    {\r\n        if (margin !== undefined) { this.tileMargin = margin; }\r\n        if (spacing !== undefined) { this.tileSpacing = spacing; }\r\n\r\n        if (this.image)\r\n        {\r\n            this.updateTileData(this.image.source[0].width, this.image.source[0].height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates tile texture coordinates and tileset data.\r\n     *\r\n     * @method Phaser.Tilemaps.Tileset#updateTileData\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} imageWidth - The (expected) width of the image to slice.\r\n     * @param {integer} imageHeight - The (expected) height of the image to slice.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tileset} This Tileset object.\r\n     */\r\n    updateTileData: function (imageWidth, imageHeight)\r\n    {\r\n        var rowCount = (imageHeight - this.tileMargin * 2 + this.tileSpacing) / (this.tileHeight + this.tileSpacing);\r\n        var colCount = (imageWidth - this.tileMargin * 2 + this.tileSpacing) / (this.tileWidth + this.tileSpacing);\r\n\r\n        if (rowCount % 1 !== 0 || colCount % 1 !== 0)\r\n        {\r\n            console.warn('Image tile area not tile size multiple in: ' + this.name);\r\n        }\r\n\r\n        // In Tiled a tileset image that is not an even multiple of the tile dimensions is truncated\r\n        // - hence the floor when calculating the rows/columns.\r\n        rowCount = Math.floor(rowCount);\r\n        colCount = Math.floor(colCount);\r\n\r\n        this.rows = rowCount;\r\n        this.columns = colCount;\r\n\r\n        // In Tiled, \"empty\" spaces in a tileset count as tiles and hence count towards the gid\r\n        this.total = rowCount * colCount;\r\n\r\n        this.texCoordinates.length = 0;\r\n\r\n        var tx = this.tileMargin;\r\n        var ty = this.tileMargin;\r\n\r\n        for (var y = 0; y < this.rows; y++)\r\n        {\r\n            for (var x = 0; x < this.columns; x++)\r\n            {\r\n                this.texCoordinates.push({ x: tx, y: ty });\r\n                tx += this.tileWidth + this.tileSpacing;\r\n            }\r\n\r\n            tx = this.tileMargin;\r\n            ty += this.tileHeight + this.tileSpacing;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Tileset;\r\n"]},"metadata":{},"sourceType":"script"}