{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar FillStyleCanvas = require('../FillStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.IsoTriangle#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.IsoTriangle} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar IsoTriangleCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix) && src.isFilled) {\n    var size = src.width;\n    var height = src.height;\n    var sizeA = size / 2;\n    var sizeB = size / src.projection;\n    var reversed = src.isReversed; //  Top Face\n\n    if (src.showTop && reversed) {\n      FillStyleCanvas(ctx, src, src.fillTop);\n      ctx.beginPath();\n      ctx.moveTo(-sizeA, -height);\n      ctx.lineTo(0, -sizeB - height);\n      ctx.lineTo(sizeA, -height);\n      ctx.lineTo(0, sizeB - height);\n      ctx.fill();\n    } //  Left Face\n\n\n    if (src.showLeft) {\n      FillStyleCanvas(ctx, src, src.fillLeft);\n      ctx.beginPath();\n\n      if (reversed) {\n        ctx.moveTo(-sizeA, -height);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      } else {\n        ctx.moveTo(-sizeA, 0);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      }\n\n      ctx.fill();\n    } //  Right Face\n\n\n    if (src.showRight) {\n      FillStyleCanvas(ctx, src, src.fillRight);\n      ctx.beginPath();\n\n      if (reversed) {\n        ctx.moveTo(sizeA, -height);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      } else {\n        ctx.moveTo(sizeA, 0);\n        ctx.lineTo(0, sizeB);\n        ctx.lineTo(0, sizeB - height);\n      }\n\n      ctx.fill();\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = IsoTriangleCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/isotriangle/IsoTriangleCanvasRenderer.js"],"names":["FillStyleCanvas","require","SetTransform","IsoTriangleCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","ctx","currentContext","isFilled","size","width","height","sizeA","sizeB","projection","reversed","isReversed","showTop","fillTop","beginPath","moveTo","lineTo","fill","showLeft","fillLeft","showRight","fillRight","restore","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar FillStyleCanvas = require('../FillStyleCanvas');\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.IsoTriangle#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.IsoTriangle} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar IsoTriangleCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (SetTransform(renderer, ctx, src, camera, parentMatrix) && src.isFilled)\r\n    {\r\n        var size = src.width;\r\n        var height = src.height;\r\n    \r\n        var sizeA = size / 2;\r\n        var sizeB = size / src.projection;\r\n\r\n        var reversed = src.isReversed;\r\n\r\n        //  Top Face\r\n\r\n        if (src.showTop && reversed)\r\n        {\r\n            FillStyleCanvas(ctx, src, src.fillTop);\r\n\r\n            ctx.beginPath();\r\n\r\n            ctx.moveTo(-sizeA, -height);\r\n            ctx.lineTo(0, -sizeB - height);\r\n            ctx.lineTo(sizeA, -height);\r\n            ctx.lineTo(0, sizeB - height);\r\n\r\n            ctx.fill();\r\n        }\r\n\r\n        //  Left Face\r\n\r\n        if (src.showLeft)\r\n        {\r\n            FillStyleCanvas(ctx, src, src.fillLeft);\r\n\r\n            ctx.beginPath();\r\n\r\n            if (reversed)\r\n            {\r\n                ctx.moveTo(-sizeA, -height);\r\n                ctx.lineTo(0, sizeB);\r\n                ctx.lineTo(0, sizeB - height);\r\n            }\r\n            else\r\n            {\r\n                ctx.moveTo(-sizeA, 0);\r\n                ctx.lineTo(0, sizeB);\r\n                ctx.lineTo(0, sizeB - height);\r\n            }\r\n\r\n            ctx.fill();\r\n        }\r\n\r\n        //  Right Face\r\n\r\n        if (src.showRight)\r\n        {\r\n            FillStyleCanvas(ctx, src, src.fillRight);\r\n\r\n            ctx.beginPath();\r\n\r\n            if (reversed)\r\n            {\r\n                ctx.moveTo(sizeA, -height);\r\n                ctx.lineTo(0, sizeB);\r\n                ctx.lineTo(0, sizeB - height);\r\n            }\r\n            else\r\n            {\r\n                ctx.moveTo(sizeA, 0);\r\n                ctx.lineTo(0, sizeB);\r\n                ctx.lineTo(0, sizeB - height);\r\n            }\r\n\r\n            ctx.fill();\r\n        }\r\n\r\n        //  Restore the context saved in SetTransform\r\n        ctx.restore();\r\n    }\r\n};\r\n\r\nmodule.exports = IsoTriangleCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}