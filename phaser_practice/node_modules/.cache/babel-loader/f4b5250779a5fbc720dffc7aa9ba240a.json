{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Base64ToArrayBuffer = require('../../utils/base64/Base64ToArrayBuffer');\n\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar WebAudioSound = require('./WebAudioSound');\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the sound manager.\r\n *\r\n * @class WebAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar WebAudioSoundManager = new Class({\n  Extends: BaseSoundManager,\n  initialize: function WebAudioSoundManager(game) {\n    /**\r\n     * The AudioContext being used for playback.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#context\r\n     * @type {AudioContext}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n    this.context = this.createAudioContext(game);\n    /**\r\n     * Gain node responsible for controlling global muting.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#masterMuteNode\r\n     * @type {GainNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.masterMuteNode = this.context.createGain();\n    /**\r\n     * Gain node responsible for controlling global volume.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#masterVolumeNode\r\n     * @type {GainNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.masterVolumeNode = this.context.createGain();\n    this.masterMuteNode.connect(this.masterVolumeNode);\n    this.masterVolumeNode.connect(this.context.destination);\n    /**\r\n     * Destination node for connecting individual sounds to.\r\n     *\r\n     * @name Phaser.Sound.WebAudioSoundManager#destination\r\n     * @type {AudioNode}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.destination = this.masterMuteNode;\n    this.locked = this.context.state === 'suspended' && ('ontouchstart' in window || 'onclick' in window);\n    BaseSoundManager.call(this, game);\n\n    if (this.locked) {\n      this.unlock();\n    }\n  },\n\n  /**\r\n   * Method responsible for instantiating and returning AudioContext instance.\r\n   * If an instance of an AudioContext class was provided through the game config,\r\n   * that instance will be returned instead. This can come in handy if you are reloading\r\n   * a Phaser game on a page that never properly refreshes (such as in an SPA project)\r\n   * and you want to reuse already instantiated AudioContext.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#createAudioContext\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Game} game - Reference to the current game instance.\r\n   *\r\n   * @return {AudioContext} The AudioContext instance to be used for playback.\r\n   */\n  createAudioContext: function (game) {\n    var audioConfig = game.config.audio;\n\n    if (audioConfig && audioConfig.context) {\n      audioConfig.context.resume();\n      return audioConfig.context;\n    }\n\n    return new AudioContext();\n  },\n\n  /**\r\n   * This method takes a new AudioContext reference and then sets\r\n   * this Sound Manager to use that context for all playback.\r\n   * \r\n   * As part of this call it also disconnects the master mute and volume\r\n   * nodes and then re-creates them on the new given context.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#setAudioContext\r\n   * @since 3.21.0\r\n   *\r\n   * @param {AudioContext} context - Reference to an already created AudioContext instance.\r\n   *\r\n   * @return {this} The WebAudioSoundManager instance.\r\n   */\n  setAudioContext: function (context) {\n    if (this.context) {\n      this.context.close();\n    }\n\n    if (this.masterMuteNode) {\n      this.masterMuteNode.disconnect();\n    }\n\n    if (this.masterVolumeNode) {\n      this.masterVolumeNode.disconnect();\n    }\n\n    this.context = context;\n    this.masterMuteNode = context.createGain();\n    this.masterVolumeNode = context.createGain();\n    this.masterMuteNode.connect(this.masterVolumeNode);\n    this.masterVolumeNode.connect(context.destination);\n    this.destination = this.masterMuteNode;\n    return this;\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSound} The new sound instance.\r\n   */\n  add: function (key, config) {\n    var sound = new WebAudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n\n  /**\r\n   * Decode audio data into a format ready for playback via Web Audio.\r\n   * \r\n   * The audio data can be a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n   * \r\n   * The `audioKey` is the key that will be used to save the decoded audio to the audio cache.\r\n   * \r\n   * Instead of passing a single entry you can instead pass an array of `Phaser.Types.Sound.DecodeAudioConfig`\r\n   * objects as the first and only argument.\r\n   * \r\n   * Decoding is an async process, so be sure to listen for the events to know when decoding has completed.\r\n   * \r\n   * Once the audio has decoded it can be added to the Sound Manager or played via its key.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#decodeAudio\r\n   * @fires Phaser.Sound.Events#DECODED\r\n   * @fires Phaser.Sound.Events#DECODED_ALL\r\n   * @since 3.18.0\r\n   *\r\n   * @param {(Phaser.Types.Sound.DecodeAudioConfig[]|string)} [audioKey] - The string-based key to be used to reference the decoded audio in the audio cache, or an array of audio config objects.\r\n   * @param {(ArrayBuffer|string)} [audioData] - The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n   */\n  decodeAudio: function (audioKey, audioData) {\n    var audioFiles;\n\n    if (!Array.isArray(audioKey)) {\n      audioFiles = [{\n        key: audioKey,\n        data: audioData\n      }];\n    } else {\n      audioFiles = audioKey;\n    }\n\n    var cache = this.game.cache.audio;\n    var remaining = audioFiles.length;\n\n    for (var i = 0; i < audioFiles.length; i++) {\n      var entry = audioFiles[i];\n      var key = entry.key;\n      var data = entry.data;\n\n      if (typeof data === 'string') {\n        data = Base64ToArrayBuffer(data);\n      }\n\n      var success = function (key, audioBuffer) {\n        cache.add(key, audioBuffer);\n        this.emit(Events.DECODED, key);\n        remaining--;\n\n        if (remaining === 0) {\n          this.emit(Events.DECODED_ALL);\n        }\n      }.bind(this, key);\n\n      var failure = function (key, error) {\n        //  eslint-disable-next-line no-console\n        console.error('Error decoding audio: ' + key + ' - ', error ? error.message : '');\n        remaining--;\n\n        if (remaining === 0) {\n          this.emit(Events.DECODED_ALL);\n        }\n      }.bind(this, key);\n\n      this.context.decodeAudioData(data, success, failure);\n    }\n  },\n\n  /**\r\n   * Unlocks Web Audio API on the initial input event.\r\n   *\r\n   * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#unlock\r\n   * @since 3.0.0\r\n   */\n  unlock: function () {\n    var _this = this;\n\n    var body = document.body;\n\n    var unlockHandler = function unlockHandler() {\n      if (_this.context) {\n        _this.context.resume().then(function () {\n          body.removeEventListener('touchstart', unlockHandler);\n          body.removeEventListener('touchend', unlockHandler);\n          body.removeEventListener('click', unlockHandler);\n          body.removeEventListener('keydown', unlockHandler);\n          _this.unlocked = true;\n        }, function () {\n          body.removeEventListener('touchstart', unlockHandler);\n          body.removeEventListener('touchend', unlockHandler);\n          body.removeEventListener('click', unlockHandler);\n          body.removeEventListener('keydown', unlockHandler);\n        });\n      }\n    };\n\n    if (body) {\n      body.addEventListener('touchstart', unlockHandler, false);\n      body.addEventListener('touchend', unlockHandler, false);\n      body.addEventListener('click', unlockHandler, false);\n      body.addEventListener('keydown', unlockHandler, false);\n    }\n  },\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#onBlur\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: function () {\n    if (!this.locked) {\n      this.context.suspend();\n    }\n  },\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#onFocus\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: function () {\n    if (!this.locked) {\n      this.context.resume();\n    }\n  },\n\n  /**\r\n   * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n   * and cleans up all Web Audio API related stuff.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.destination = null;\n    this.masterVolumeNode.disconnect();\n    this.masterVolumeNode = null;\n    this.masterMuteNode.disconnect();\n    this.masterMuteNode = null;\n\n    if (this.game.config.audio && this.game.config.audio.context) {\n      this.context.suspend();\n    } else {\n      var _this = this;\n\n      this.context.close().then(function () {\n        _this.context = null;\n      });\n    }\n\n    BaseSoundManager.prototype.destroy.call(this);\n  },\n\n  /**\r\n   * Sets the muted state of all this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#setMute\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n   */\n  setMute: function (value) {\n    this.mute = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.WebAudioSoundManager#mute\r\n   * @type {boolean}\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.0.0\r\n   */\n  mute: {\n    get: function () {\n      return this.masterMuteNode.gain.value === 0;\n    },\n    set: function (value) {\n      this.masterMuteNode.gain.setValueAtTime(value ? 0 : 1, 0);\n      this.emit(Events.GLOBAL_MUTE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the volume of this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.WebAudioSoundManager#setVolume\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The global volume of this Sound Manager.\r\n   *\r\n   * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n   */\n  setVolume: function (value) {\n    this.volume = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.WebAudioSoundManager#volume\r\n   * @type {number}\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.0.0\r\n   */\n  volume: {\n    get: function () {\n      return this.masterVolumeNode.gain.value;\n    },\n    set: function (value) {\n      this.masterVolumeNode.gain.setValueAtTime(value, 0);\n      this.emit(Events.GLOBAL_VOLUME, this, value);\n    }\n  }\n});\nmodule.exports = WebAudioSoundManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/sound/webaudio/WebAudioSoundManager.js"],"names":["Base64ToArrayBuffer","require","BaseSoundManager","Class","Events","WebAudioSound","WebAudioSoundManager","Extends","initialize","game","context","createAudioContext","masterMuteNode","createGain","masterVolumeNode","connect","destination","locked","state","window","call","unlock","audioConfig","config","audio","resume","AudioContext","setAudioContext","close","disconnect","add","key","sound","sounds","push","decodeAudio","audioKey","audioData","audioFiles","Array","isArray","data","cache","remaining","length","i","entry","success","audioBuffer","emit","DECODED","DECODED_ALL","bind","failure","error","console","message","decodeAudioData","_this","body","document","unlockHandler","then","removeEventListener","unlocked","addEventListener","onBlur","suspend","onFocus","destroy","prototype","setMute","value","mute","get","gain","set","setValueAtTime","GLOBAL_MUTE","setVolume","volume","GLOBAL_VOLUME","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Base64ToArrayBuffer = require('../../utils/base64/Base64ToArrayBuffer');\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar WebAudioSound = require('./WebAudioSound');\r\n\r\n/**\r\n * @classdesc\r\n * Web Audio API implementation of the sound manager.\r\n *\r\n * @class WebAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar WebAudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function WebAudioSoundManager (game)\r\n    {\r\n        /**\r\n         * The AudioContext being used for playback.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#context\r\n         * @type {AudioContext}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.context = this.createAudioContext(game);\r\n\r\n        /**\r\n         * Gain node responsible for controlling global muting.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterMuteNode\r\n         * @type {GainNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.masterMuteNode = this.context.createGain();\r\n\r\n        /**\r\n         * Gain node responsible for controlling global volume.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#masterVolumeNode\r\n         * @type {GainNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.masterVolumeNode = this.context.createGain();\r\n\r\n        this.masterMuteNode.connect(this.masterVolumeNode);\r\n\r\n        this.masterVolumeNode.connect(this.context.destination);\r\n\r\n        /**\r\n         * Destination node for connecting individual sounds to.\r\n         *\r\n         * @name Phaser.Sound.WebAudioSoundManager#destination\r\n         * @type {AudioNode}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.destination = this.masterMuteNode;\r\n\r\n        this.locked = this.context.state === 'suspended' && ('ontouchstart' in window || 'onclick' in window);\r\n\r\n        BaseSoundManager.call(this, game);\r\n\r\n        if (this.locked)\r\n        {\r\n            this.unlock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method responsible for instantiating and returning AudioContext instance.\r\n     * If an instance of an AudioContext class was provided through the game config,\r\n     * that instance will be returned instead. This can come in handy if you are reloading\r\n     * a Phaser game on a page that never properly refreshes (such as in an SPA project)\r\n     * and you want to reuse already instantiated AudioContext.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#createAudioContext\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - Reference to the current game instance.\r\n     *\r\n     * @return {AudioContext} The AudioContext instance to be used for playback.\r\n     */\r\n    createAudioContext: function (game)\r\n    {\r\n        var audioConfig = game.config.audio;\r\n\r\n        if (audioConfig && audioConfig.context)\r\n        {\r\n            audioConfig.context.resume();\r\n\r\n            return audioConfig.context;\r\n        }\r\n\r\n        return new AudioContext();\r\n    },\r\n\r\n    /**\r\n     * This method takes a new AudioContext reference and then sets\r\n     * this Sound Manager to use that context for all playback.\r\n     * \r\n     * As part of this call it also disconnects the master mute and volume\r\n     * nodes and then re-creates them on the new given context.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setAudioContext\r\n     * @since 3.21.0\r\n     *\r\n     * @param {AudioContext} context - Reference to an already created AudioContext instance.\r\n     *\r\n     * @return {this} The WebAudioSoundManager instance.\r\n     */\r\n    setAudioContext: function (context)\r\n    {\r\n        if (this.context)\r\n        {\r\n            this.context.close();\r\n        }\r\n\r\n        if (this.masterMuteNode)\r\n        {\r\n            this.masterMuteNode.disconnect();\r\n        }\r\n\r\n        if (this.masterVolumeNode)\r\n        {\r\n            this.masterVolumeNode.disconnect();\r\n        }\r\n\r\n        this.context = context;\r\n\r\n        this.masterMuteNode = context.createGain();\r\n        this.masterVolumeNode = context.createGain();\r\n\r\n        this.masterMuteNode.connect(this.masterVolumeNode);\r\n        this.masterVolumeNode.connect(context.destination);\r\n\r\n        this.destination = this.masterMuteNode;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new WebAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Decode audio data into a format ready for playback via Web Audio.\r\n     * \r\n     * The audio data can be a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n     * \r\n     * The `audioKey` is the key that will be used to save the decoded audio to the audio cache.\r\n     * \r\n     * Instead of passing a single entry you can instead pass an array of `Phaser.Types.Sound.DecodeAudioConfig`\r\n     * objects as the first and only argument.\r\n     * \r\n     * Decoding is an async process, so be sure to listen for the events to know when decoding has completed.\r\n     * \r\n     * Once the audio has decoded it can be added to the Sound Manager or played via its key.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#decodeAudio\r\n     * @fires Phaser.Sound.Events#DECODED\r\n     * @fires Phaser.Sound.Events#DECODED_ALL\r\n     * @since 3.18.0\r\n     *\r\n     * @param {(Phaser.Types.Sound.DecodeAudioConfig[]|string)} [audioKey] - The string-based key to be used to reference the decoded audio in the audio cache, or an array of audio config objects.\r\n     * @param {(ArrayBuffer|string)} [audioData] - The audio data, either a base64 encoded string, an audio media-type data uri, or an ArrayBuffer instance.\r\n     */\r\n    decodeAudio: function (audioKey, audioData)\r\n    {\r\n        var audioFiles;\r\n\r\n        if (!Array.isArray(audioKey))\r\n        {\r\n            audioFiles = [ { key: audioKey, data: audioData } ];\r\n        }\r\n        else\r\n        {\r\n            audioFiles = audioKey;\r\n        }\r\n\r\n        var cache = this.game.cache.audio;\r\n        var remaining = audioFiles.length;\r\n\r\n        for (var i = 0; i < audioFiles.length; i++)\r\n        {\r\n            var entry = audioFiles[i];\r\n\r\n            var key = entry.key;\r\n            var data = entry.data;\r\n\r\n            if (typeof data === 'string')\r\n            {\r\n                data = Base64ToArrayBuffer(data);\r\n            }\r\n\r\n            var success = function (key, audioBuffer)\r\n            {\r\n                cache.add(key, audioBuffer);\r\n    \r\n                this.emit(Events.DECODED, key);\r\n\r\n                remaining--;\r\n\r\n                if (remaining === 0)\r\n                {\r\n                    this.emit(Events.DECODED_ALL);\r\n                }\r\n            }.bind(this, key);\r\n    \r\n            var failure = function (key, error)\r\n            {\r\n                //  eslint-disable-next-line no-console\r\n                console.error('Error decoding audio: ' + key + ' - ', error ? error.message : '');\r\n\r\n                remaining--;\r\n\r\n                if (remaining === 0)\r\n                {\r\n                    this.emit(Events.DECODED_ALL);\r\n                }\r\n            }.bind(this, key);\r\n\r\n            this.context.decodeAudioData(data, success, failure);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Unlocks Web Audio API on the initial input event.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        var body = document.body;\r\n\r\n        var unlockHandler = function unlockHandler ()\r\n        {\r\n            if (_this.context)\r\n            {\r\n                _this.context.resume().then(function ()\r\n                {\r\n                    body.removeEventListener('touchstart', unlockHandler);\r\n                    body.removeEventListener('touchend', unlockHandler);\r\n                    body.removeEventListener('click', unlockHandler);\r\n                    body.removeEventListener('keydown', unlockHandler);\r\n    \r\n                    _this.unlocked = true;\r\n                }, function ()\r\n                {\r\n                    body.removeEventListener('touchstart', unlockHandler);\r\n                    body.removeEventListener('touchend', unlockHandler);\r\n                    body.removeEventListener('click', unlockHandler);\r\n                    body.removeEventListener('keydown', unlockHandler);\r\n                });\r\n            }\r\n        };\r\n\r\n        if (body)\r\n        {\r\n            body.addEventListener('touchstart', unlockHandler, false);\r\n            body.addEventListener('touchend', unlockHandler, false);\r\n            body.addEventListener('click', unlockHandler, false);\r\n            body.addEventListener('keydown', unlockHandler, false);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        if (!this.locked)\r\n        {\r\n            this.context.suspend();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.WebAudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        if (!this.locked)\r\n        {\r\n            this.context.resume();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all Web Audio API related stuff.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.destination = null;\r\n        this.masterVolumeNode.disconnect();\r\n        this.masterVolumeNode = null;\r\n        this.masterMuteNode.disconnect();\r\n        this.masterMuteNode = null;\r\n\r\n        if (this.game.config.audio && this.game.config.audio.context)\r\n        {\r\n            this.context.suspend();\r\n        }\r\n        else\r\n        {\r\n            var _this = this;\r\n\r\n            this.context.close().then(function ()\r\n            {\r\n                _this.context = null;\r\n            });\r\n        }\r\n\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setMute\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.masterMuteNode.gain.value === 0);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterMuteNode.gain.setValueAtTime(value ? 0 : 1, 0);\r\n\r\n            this.emit(Events.GLOBAL_MUTE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.WebAudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.WebAudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.WebAudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.masterVolumeNode.gain.value;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.masterVolumeNode.gain.setValueAtTime(value, 0);\r\n\r\n            this.emit(Events.GLOBAL_VOLUME, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebAudioSoundManager;\r\n"]},"metadata":{},"sourceType":"script"}