{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Events = require('./events');\n/**\r\n * @callback DataEachCallback\r\n *\r\n * @param {*} parent - The parent object of the DataManager.\r\n * @param {string} key - The key of the value.\r\n * @param {*} value - The value.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n */\n\n/**\r\n * @classdesc\r\n * The Data Manager Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManager\r\n * @memberof Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} parent - The object that this DataManager belongs to.\r\n * @param {Phaser.Events.EventEmitter} eventEmitter - The DataManager's event emitter.\r\n */\n\n\nvar DataManager = new Class({\n  initialize: function DataManager(parent, eventEmitter) {\n    /**\r\n     * The object that this DataManager belongs to.\r\n     *\r\n     * @name Phaser.Data.DataManager#parent\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * The DataManager's event emitter.\r\n     *\r\n     * @name Phaser.Data.DataManager#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = eventEmitter;\n\n    if (!eventEmitter) {\n      this.events = parent.events ? parent.events : parent;\n    }\n    /**\r\n     * The data list.\r\n     *\r\n     * @name Phaser.Data.DataManager#list\r\n     * @type {Object.<string, *>}\r\n     * @default {}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.list = {};\n    /**\r\n     * The public values list. You can use this to access anything you have stored\r\n     * in this Data Manager. For example, if you set a value called `gold` you can\r\n     * access it via:\r\n     *\r\n     * ```javascript\r\n     * this.data.values.gold;\r\n     * ```\r\n     *\r\n     * You can also modify it directly:\r\n     * \r\n     * ```javascript\r\n     * this.data.values.gold += 1000;\r\n     * ```\r\n     *\r\n     * Doing so will emit a `setdata` event from the parent of this Data Manager.\r\n     * \r\n     * Do not modify this object directly. Adding properties directly to this object will not\r\n     * emit any events. Always use `DataManager.set` to create new items the first time around.\r\n     *\r\n     * @name Phaser.Data.DataManager#values\r\n     * @type {Object.<string, *>}\r\n     * @default {}\r\n     * @since 3.10.0\r\n     */\n\n    this.values = {};\n    /**\r\n     * Whether setting data is frozen for this DataManager.\r\n     *\r\n     * @name Phaser.Data.DataManager#_frozen\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._frozen = false;\n\n    if (!parent.hasOwnProperty('sys') && this.events) {\n      this.events.once('destroy', this.destroy, this);\n    }\n  },\n\n  /**\r\n   * Retrieves the value for the given key, or undefined if it doesn't exist.\r\n   *\r\n   * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\r\n   * \r\n   * ```javascript\r\n   * this.data.get('gold');\r\n   * ```\r\n   *\r\n   * Or access the value directly:\r\n   * \r\n   * ```javascript\r\n   * this.data.values.gold;\r\n   * ```\r\n   *\r\n   * You can also pass in an array of keys, in which case an array of values will be returned:\r\n   * \r\n   * ```javascript\r\n   * this.data.get([ 'gold', 'armor', 'health' ]);\r\n   * ```\r\n   *\r\n   * This approach is useful for destructuring arrays in ES6.\r\n   *\r\n   * @method Phaser.Data.DataManager#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} key - The key of the value to retrieve, or an array of keys.\r\n   *\r\n   * @return {*} The value belonging to the given key, or an array of values, the order of which will match the input array.\r\n   */\n  get: function (key) {\n    var list = this.list;\n\n    if (Array.isArray(key)) {\n      var output = [];\n\n      for (var i = 0; i < key.length; i++) {\n        output.push(list[key[i]]);\n      }\n\n      return output;\n    } else {\n      return list[key];\n    }\n  },\n\n  /**\r\n   * Retrieves all data values in a new object.\r\n   *\r\n   * @method Phaser.Data.DataManager#getAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Object.<string, *>} All data values.\r\n   */\n  getAll: function () {\n    var results = {};\n\n    for (var key in this.list) {\n      if (this.list.hasOwnProperty(key)) {\n        results[key] = this.list[key];\n      }\n    }\n\n    return results;\n  },\n\n  /**\r\n   * Queries the DataManager for the values of keys matching the given regular expression.\r\n   *\r\n   * @method Phaser.Data.DataManager#query\r\n   * @since 3.0.0\r\n   *\r\n   * @param {RegExp} search - A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\r\n   *\r\n   * @return {Object.<string, *>} The values of the keys matching the search string.\r\n   */\n  query: function (search) {\n    var results = {};\n\n    for (var key in this.list) {\n      if (this.list.hasOwnProperty(key) && key.match(search)) {\n        results[key] = this.list[key];\n      }\n    }\n\n    return results;\n  },\n\n  /**\r\n   * Sets a value for the given key. If the key doesn't already exist in the Data Manager then it is created.\r\n   * \r\n   * ```javascript\r\n   * data.set('name', 'Red Gem Stone');\r\n   * ```\r\n   *\r\n   * You can also pass in an object of key value pairs as the first argument:\r\n   *\r\n   * ```javascript\r\n   * data.set({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\r\n   * ```\r\n   *\r\n   * To get a value back again you can call `get`:\r\n   * \r\n   * ```javascript\r\n   * data.get('gold');\r\n   * ```\r\n   * \r\n   * Or you can access the value directly via the `values` property, where it works like any other variable:\r\n   * \r\n   * ```javascript\r\n   * data.values.gold += 50;\r\n   * ```\r\n   *\r\n   * When the value is first set, a `setdata` event is emitted.\r\n   *\r\n   * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\r\n   * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata-PlayerLives`.\r\n   * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\r\n   *\r\n   * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\r\n   * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#set\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|object)} key - The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\r\n   * @param {*} data - The value to set for the given key. If an object is provided as the key this argument is ignored.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  set: function (key, data) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (typeof key === 'string') {\n      return this.setValue(key, data);\n    } else {\n      for (var entry in key) {\n        this.setValue(entry, key[entry]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal value setter, called automatically by the `set` method.\r\n   *\r\n   * @method Phaser.Data.DataManager#setValue\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @private\r\n   * @since 3.10.0\r\n   *\r\n   * @param {string} key - The key to set the value for.\r\n   * @param {*} data - The value to set.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  setValue: function (key, data) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (this.has(key)) {\n      //  Hit the key getter, which will in turn emit the events.\n      this.values[key] = data;\n    } else {\n      var _this = this;\n\n      var list = this.list;\n      var events = this.events;\n      var parent = this.parent;\n      Object.defineProperty(this.values, key, {\n        enumerable: true,\n        configurable: true,\n        get: function () {\n          return list[key];\n        },\n        set: function (value) {\n          if (!_this._frozen) {\n            var previousValue = list[key];\n            list[key] = value;\n            events.emit(Events.CHANGE_DATA, parent, key, value, previousValue);\n            events.emit(Events.CHANGE_DATA_KEY + key, parent, value, previousValue);\n          }\n        }\n      });\n      list[key] = data;\n      events.emit(Events.SET_DATA, parent, key, data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Passes all data entries to the given callback.\r\n   *\r\n   * @method Phaser.Data.DataManager#each\r\n   * @since 3.0.0\r\n   *\r\n   * @param {DataEachCallback} callback - The function to call.\r\n   * @param {*} [context] - Value to use as `this` when executing callback.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  each: function (callback, context) {\n    var args = [this.parent, null, undefined];\n\n    for (var i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (var key in this.list) {\n      args[1] = key;\n      args[2] = this.list[key];\n      callback.apply(context, args);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Merge the given object of key value pairs into this DataManager.\r\n   *\r\n   * Any newly created values will emit a `setdata` event. Any updated values (see the `overwrite` argument)\r\n   * will emit a `changedata` event.\r\n   *\r\n   * @method Phaser.Data.DataManager#merge\r\n   * @fires Phaser.Data.Events#SET_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA\r\n   * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Object.<string, *>} data - The data to merge.\r\n   * @param {boolean} [overwrite=true] - Whether to overwrite existing data. Defaults to true.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  merge: function (data, overwrite) {\n    if (overwrite === undefined) {\n      overwrite = true;\n    } //  Merge data from another component into this one\n\n\n    for (var key in data) {\n      if (data.hasOwnProperty(key) && (overwrite || !overwrite && !this.has(key))) {\n        this.setValue(key, data[key]);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Remove the value for the given key.\r\n   *\r\n   * If the key is found in this Data Manager it is removed from the internal lists and a\r\n   * `removedata` event is emitted.\r\n   * \r\n   * You can also pass in an array of keys, in which case all keys in the array will be removed:\r\n   * \r\n   * ```javascript\r\n   * this.data.remove([ 'gold', 'armor', 'health' ]);\r\n   * ```\r\n   *\r\n   * @method Phaser.Data.DataManager#remove\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} key - The key to remove, or an array of keys to remove.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  remove: function (key) {\n    if (this._frozen) {\n      return this;\n    }\n\n    if (Array.isArray(key)) {\n      for (var i = 0; i < key.length; i++) {\n        this.removeValue(key[i]);\n      }\n    } else {\n      return this.removeValue(key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal value remover, called automatically by the `remove` method.\r\n   *\r\n   * @method Phaser.Data.DataManager#removeValue\r\n   * @private\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.10.0\r\n   *\r\n   * @param {string} key - The key to set the value for.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  removeValue: function (key) {\n    if (this.has(key)) {\n      var data = this.list[key];\n      delete this.list[key];\n      delete this.values[key];\n      this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Retrieves the data associated with the given 'key', deletes it from this Data Manager, then returns it.\r\n   *\r\n   * @method Phaser.Data.DataManager#pop\r\n   * @fires Phaser.Data.Events#REMOVE_DATA\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the value to retrieve and delete.\r\n   *\r\n   * @return {*} The value of the given key.\r\n   */\n  pop: function (key) {\n    var data = undefined;\n\n    if (!this._frozen && this.has(key)) {\n      data = this.list[key];\n      delete this.list[key];\n      delete this.values[key];\n      this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\n    }\n\n    return data;\n  },\n\n  /**\r\n   * Determines whether the given key is set in this Data Manager.\r\n   * \r\n   * Please note that the keys are case-sensitive and must be valid JavaScript Object property strings.\r\n   * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#has\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key to check.\r\n   *\r\n   * @return {boolean} Returns `true` if the key exists, otherwise `false`.\r\n   */\n  has: function (key) {\n    return this.list.hasOwnProperty(key);\n  },\n\n  /**\r\n   * Freeze or unfreeze this Data Manager. A frozen Data Manager will block all attempts\r\n   * to create new values or update existing ones.\r\n   *\r\n   * @method Phaser.Data.DataManager#setFreeze\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - Whether to freeze or unfreeze the Data Manager.\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  setFreeze: function (value) {\n    this._frozen = value;\n    return this;\n  },\n\n  /**\r\n   * Delete all data in this Data Manager and unfreeze it.\r\n   *\r\n   * @method Phaser.Data.DataManager#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Data.DataManager} This DataManager object.\r\n   */\n  reset: function () {\n    for (var key in this.list) {\n      delete this.list[key];\n      delete this.values[key];\n    }\n\n    this._frozen = false;\n    return this;\n  },\n\n  /**\r\n   * Destroy this data manager.\r\n   *\r\n   * @method Phaser.Data.DataManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.events.off(Events.CHANGE_DATA);\n    this.events.off(Events.SET_DATA);\n    this.events.off(Events.REMOVE_DATA);\n    this.parent = null;\n  },\n\n  /**\r\n   * Gets or sets the frozen state of this Data Manager.\r\n   * A frozen Data Manager will block all attempts to create new values or update existing ones.\r\n   *\r\n   * @name Phaser.Data.DataManager#freeze\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  freeze: {\n    get: function () {\n      return this._frozen;\n    },\n    set: function (value) {\n      this._frozen = value ? true : false;\n    }\n  },\n\n  /**\r\n   * Return the total number of entries in this Data Manager.\r\n   *\r\n   * @name Phaser.Data.DataManager#count\r\n   * @type {integer}\r\n   * @since 3.0.0\r\n   */\n  count: {\n    get: function () {\n      var i = 0;\n\n      for (var key in this.list) {\n        if (this.list[key] !== undefined) {\n          i++;\n        }\n      }\n\n      return i;\n    }\n  }\n});\nmodule.exports = DataManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/data/DataManager.js"],"names":["Class","require","Events","DataManager","initialize","parent","eventEmitter","events","list","values","_frozen","hasOwnProperty","once","destroy","get","key","Array","isArray","output","i","length","push","getAll","results","query","search","match","set","data","setValue","entry","has","_this","Object","defineProperty","enumerable","configurable","value","previousValue","emit","CHANGE_DATA","CHANGE_DATA_KEY","SET_DATA","each","callback","context","args","undefined","arguments","apply","merge","overwrite","remove","removeValue","REMOVE_DATA","pop","setFreeze","reset","off","freeze","count","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Events = require('./events');\r\n\r\n/**\r\n * @callback DataEachCallback\r\n *\r\n * @param {*} parent - The parent object of the DataManager.\r\n * @param {string} key - The key of the value.\r\n * @param {*} value - The value.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Data Manager Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManager\r\n * @memberof Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} parent - The object that this DataManager belongs to.\r\n * @param {Phaser.Events.EventEmitter} eventEmitter - The DataManager's event emitter.\r\n */\r\nvar DataManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function DataManager (parent, eventEmitter)\r\n    {\r\n        /**\r\n         * The object that this DataManager belongs to.\r\n         *\r\n         * @name Phaser.Data.DataManager#parent\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * The DataManager's event emitter.\r\n         *\r\n         * @name Phaser.Data.DataManager#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = eventEmitter;\r\n\r\n        if (!eventEmitter)\r\n        {\r\n            this.events = (parent.events) ? parent.events : parent;\r\n        }\r\n\r\n        /**\r\n         * The data list.\r\n         *\r\n         * @name Phaser.Data.DataManager#list\r\n         * @type {Object.<string, *>}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.list = {};\r\n\r\n        /**\r\n         * The public values list. You can use this to access anything you have stored\r\n         * in this Data Manager. For example, if you set a value called `gold` you can\r\n         * access it via:\r\n         *\r\n         * ```javascript\r\n         * this.data.values.gold;\r\n         * ```\r\n         *\r\n         * You can also modify it directly:\r\n         * \r\n         * ```javascript\r\n         * this.data.values.gold += 1000;\r\n         * ```\r\n         *\r\n         * Doing so will emit a `setdata` event from the parent of this Data Manager.\r\n         * \r\n         * Do not modify this object directly. Adding properties directly to this object will not\r\n         * emit any events. Always use `DataManager.set` to create new items the first time around.\r\n         *\r\n         * @name Phaser.Data.DataManager#values\r\n         * @type {Object.<string, *>}\r\n         * @default {}\r\n         * @since 3.10.0\r\n         */\r\n        this.values = {};\r\n\r\n        /**\r\n         * Whether setting data is frozen for this DataManager.\r\n         *\r\n         * @name Phaser.Data.DataManager#_frozen\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._frozen = false;\r\n\r\n        if (!parent.hasOwnProperty('sys') && this.events)\r\n        {\r\n            this.events.once('destroy', this.destroy, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the value for the given key, or undefined if it doesn't exist.\r\n     *\r\n     * You can also access values via the `values` object. For example, if you had a key called `gold` you can do either:\r\n     * \r\n     * ```javascript\r\n     * this.data.get('gold');\r\n     * ```\r\n     *\r\n     * Or access the value directly:\r\n     * \r\n     * ```javascript\r\n     * this.data.values.gold;\r\n     * ```\r\n     *\r\n     * You can also pass in an array of keys, in which case an array of values will be returned:\r\n     * \r\n     * ```javascript\r\n     * this.data.get([ 'gold', 'armor', 'health' ]);\r\n     * ```\r\n     *\r\n     * This approach is useful for destructuring arrays in ES6.\r\n     *\r\n     * @method Phaser.Data.DataManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} key - The key of the value to retrieve, or an array of keys.\r\n     *\r\n     * @return {*} The value belonging to the given key, or an array of values, the order of which will match the input array.\r\n     */\r\n    get: function (key)\r\n    {\r\n        var list = this.list;\r\n\r\n        if (Array.isArray(key))\r\n        {\r\n            var output = [];\r\n\r\n            for (var i = 0; i < key.length; i++)\r\n            {\r\n                output.push(list[key[i]]);\r\n            }\r\n\r\n            return output;\r\n        }\r\n        else\r\n        {\r\n            return list[key];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves all data values in a new object.\r\n     *\r\n     * @method Phaser.Data.DataManager#getAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Object.<string, *>} All data values.\r\n     */\r\n    getAll: function ()\r\n    {\r\n        var results = {};\r\n\r\n        for (var key in this.list)\r\n        {\r\n            if (this.list.hasOwnProperty(key))\r\n            {\r\n                results[key] = this.list[key];\r\n            }\r\n        }\r\n\r\n        return results;\r\n    },\r\n\r\n    /**\r\n     * Queries the DataManager for the values of keys matching the given regular expression.\r\n     *\r\n     * @method Phaser.Data.DataManager#query\r\n     * @since 3.0.0\r\n     *\r\n     * @param {RegExp} search - A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).\r\n     *\r\n     * @return {Object.<string, *>} The values of the keys matching the search string.\r\n     */\r\n    query: function (search)\r\n    {\r\n        var results = {};\r\n\r\n        for (var key in this.list)\r\n        {\r\n            if (this.list.hasOwnProperty(key) && key.match(search))\r\n            {\r\n                results[key] = this.list[key];\r\n            }\r\n        }\r\n\r\n        return results;\r\n    },\r\n\r\n    /**\r\n     * Sets a value for the given key. If the key doesn't already exist in the Data Manager then it is created.\r\n     * \r\n     * ```javascript\r\n     * data.set('name', 'Red Gem Stone');\r\n     * ```\r\n     *\r\n     * You can also pass in an object of key value pairs as the first argument:\r\n     *\r\n     * ```javascript\r\n     * data.set({ name: 'Red Gem Stone', level: 2, owner: 'Link', gold: 50 });\r\n     * ```\r\n     *\r\n     * To get a value back again you can call `get`:\r\n     * \r\n     * ```javascript\r\n     * data.get('gold');\r\n     * ```\r\n     * \r\n     * Or you can access the value directly via the `values` property, where it works like any other variable:\r\n     * \r\n     * ```javascript\r\n     * data.values.gold += 50;\r\n     * ```\r\n     *\r\n     * When the value is first set, a `setdata` event is emitted.\r\n     *\r\n     * If the key already exists, a `changedata` event is emitted instead, along an event named after the key.\r\n     * For example, if you updated an existing key called `PlayerLives` then it would emit the event `changedata-PlayerLives`.\r\n     * These events will be emitted regardless if you use this method to set the value, or the direct `values` setter.\r\n     *\r\n     * Please note that the data keys are case-sensitive and must be valid JavaScript Object property strings.\r\n     * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#set\r\n     * @fires Phaser.Data.Events#SET_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|object)} key - The key to set the value for. Or an object or key value pairs. If an object the `data` argument is ignored.\r\n     * @param {*} data - The value to set for the given key. If an object is provided as the key this argument is ignored.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    set: function (key, data)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (typeof key === 'string')\r\n        {\r\n            return this.setValue(key, data);\r\n        }\r\n        else\r\n        {\r\n            for (var entry in key)\r\n            {\r\n                this.setValue(entry, key[entry]);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal value setter, called automatically by the `set` method.\r\n     *\r\n     * @method Phaser.Data.DataManager#setValue\r\n     * @fires Phaser.Data.Events#SET_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n     * @private\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} key - The key to set the value for.\r\n     * @param {*} data - The value to set.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    setValue: function (key, data)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (this.has(key))\r\n        {\r\n            //  Hit the key getter, which will in turn emit the events.\r\n            this.values[key] = data;\r\n        }\r\n        else\r\n        {\r\n            var _this = this;\r\n            var list = this.list;\r\n            var events = this.events;\r\n            var parent = this.parent;\r\n\r\n            Object.defineProperty(this.values, key, {\r\n\r\n                enumerable: true,\r\n                \r\n                configurable: true,\r\n\r\n                get: function ()\r\n                {\r\n                    return list[key];\r\n                },\r\n\r\n                set: function (value)\r\n                {\r\n                    if (!_this._frozen)\r\n                    {\r\n                        var previousValue = list[key];\r\n                        list[key] = value;\r\n\r\n                        events.emit(Events.CHANGE_DATA, parent, key, value, previousValue);\r\n                        events.emit(Events.CHANGE_DATA_KEY + key, parent, value, previousValue);\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n            list[key] = data;\r\n\r\n            events.emit(Events.SET_DATA, parent, key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes all data entries to the given callback.\r\n     *\r\n     * @method Phaser.Data.DataManager#each\r\n     * @since 3.0.0\r\n     *\r\n     * @param {DataEachCallback} callback - The function to call.\r\n     * @param {*} [context] - Value to use as `this` when executing callback.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the game object, key, and data.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    each: function (callback, context)\r\n    {\r\n        var args = [ this.parent, null, undefined ];\r\n\r\n        for (var i = 1; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (var key in this.list)\r\n        {\r\n            args[1] = key;\r\n            args[2] = this.list[key];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Merge the given object of key value pairs into this DataManager.\r\n     *\r\n     * Any newly created values will emit a `setdata` event. Any updated values (see the `overwrite` argument)\r\n     * will emit a `changedata` event.\r\n     *\r\n     * @method Phaser.Data.DataManager#merge\r\n     * @fires Phaser.Data.Events#SET_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA\r\n     * @fires Phaser.Data.Events#CHANGE_DATA_KEY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Object.<string, *>} data - The data to merge.\r\n     * @param {boolean} [overwrite=true] - Whether to overwrite existing data. Defaults to true.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    merge: function (data, overwrite)\r\n    {\r\n        if (overwrite === undefined) { overwrite = true; }\r\n\r\n        //  Merge data from another component into this one\r\n        for (var key in data)\r\n        {\r\n            if (data.hasOwnProperty(key) && (overwrite || (!overwrite && !this.has(key))))\r\n            {\r\n                this.setValue(key, data[key]);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Remove the value for the given key.\r\n     *\r\n     * If the key is found in this Data Manager it is removed from the internal lists and a\r\n     * `removedata` event is emitted.\r\n     * \r\n     * You can also pass in an array of keys, in which case all keys in the array will be removed:\r\n     * \r\n     * ```javascript\r\n     * this.data.remove([ 'gold', 'armor', 'health' ]);\r\n     * ```\r\n     *\r\n     * @method Phaser.Data.DataManager#remove\r\n     * @fires Phaser.Data.Events#REMOVE_DATA\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} key - The key to remove, or an array of keys to remove.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        if (this._frozen)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (Array.isArray(key))\r\n        {\r\n            for (var i = 0; i < key.length; i++)\r\n            {\r\n                this.removeValue(key[i]);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return this.removeValue(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal value remover, called automatically by the `remove` method.\r\n     *\r\n     * @method Phaser.Data.DataManager#removeValue\r\n     * @private\r\n     * @fires Phaser.Data.Events#REMOVE_DATA\r\n     * @since 3.10.0\r\n     *\r\n     * @param {string} key - The key to set the value for.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    removeValue: function (key)\r\n    {\r\n        if (this.has(key))\r\n        {\r\n            var data = this.list[key];\r\n\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n\r\n            this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves the data associated with the given 'key', deletes it from this Data Manager, then returns it.\r\n     *\r\n     * @method Phaser.Data.DataManager#pop\r\n     * @fires Phaser.Data.Events#REMOVE_DATA\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the value to retrieve and delete.\r\n     *\r\n     * @return {*} The value of the given key.\r\n     */\r\n    pop: function (key)\r\n    {\r\n        var data = undefined;\r\n\r\n        if (!this._frozen && this.has(key))\r\n        {\r\n            data = this.list[key];\r\n\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n\r\n            this.events.emit(Events.REMOVE_DATA, this.parent, key, data);\r\n        }\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Determines whether the given key is set in this Data Manager.\r\n     * \r\n     * Please note that the keys are case-sensitive and must be valid JavaScript Object property strings.\r\n     * This means the keys `gold` and `Gold` are treated as two unique values within the Data Manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key to check.\r\n     *\r\n     * @return {boolean} Returns `true` if the key exists, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return this.list.hasOwnProperty(key);\r\n    },\r\n\r\n    /**\r\n     * Freeze or unfreeze this Data Manager. A frozen Data Manager will block all attempts\r\n     * to create new values or update existing ones.\r\n     *\r\n     * @method Phaser.Data.DataManager#setFreeze\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - Whether to freeze or unfreeze the Data Manager.\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    setFreeze: function (value)\r\n    {\r\n        this._frozen = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Delete all data in this Data Manager and unfreeze it.\r\n     *\r\n     * @method Phaser.Data.DataManager#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Data.DataManager} This DataManager object.\r\n     */\r\n    reset: function ()\r\n    {\r\n        for (var key in this.list)\r\n        {\r\n            delete this.list[key];\r\n            delete this.values[key];\r\n        }\r\n\r\n        this._frozen = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroy this data manager.\r\n     *\r\n     * @method Phaser.Data.DataManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.events.off(Events.CHANGE_DATA);\r\n        this.events.off(Events.SET_DATA);\r\n        this.events.off(Events.REMOVE_DATA);\r\n\r\n        this.parent = null;\r\n    },\r\n\r\n    /**\r\n     * Gets or sets the frozen state of this Data Manager.\r\n     * A frozen Data Manager will block all attempts to create new values or update existing ones.\r\n     *\r\n     * @name Phaser.Data.DataManager#freeze\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    freeze: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._frozen;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._frozen = (value) ? true : false;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Return the total number of entries in this Data Manager.\r\n     *\r\n     * @name Phaser.Data.DataManager#count\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\r\n    count: {\r\n\r\n        get: function ()\r\n        {\r\n            var i = 0;\r\n\r\n            for (var key in this.list)\r\n            {\r\n                if (this.list[key] !== undefined)\r\n                {\r\n                    i++;\r\n                }\r\n            }\r\n\r\n            return i;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DataManager;\r\n"]},"metadata":{},"sourceType":"script"}