{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Curve = require('./Curve');\n\nvar QuadraticBezierInterpolation = require('../math/interpolation/QuadraticBezierInterpolation');\n\nvar Vector2 = require('../math/Vector2');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class QuadraticBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n */\n\n\nvar QuadraticBezier = new Class({\n  Extends: Curve,\n  initialize: function QuadraticBezier(p0, p1, p2) {\n    Curve.call(this, 'QuadraticBezier');\n\n    if (Array.isArray(p0)) {\n      p2 = new Vector2(p0[4], p0[5]);\n      p1 = new Vector2(p0[2], p0[3]);\n      p0 = new Vector2(p0[0], p0[1]);\n    }\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p0\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n\n    this.p0 = p0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p1\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n    this.p1 = p1;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Curves.QuadraticBezier#p2\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.2.0\r\n     */\n\n    this.p2 = p2;\n  },\n\n  /**\r\n   * Gets the starting point on the curve.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getStartPoint\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getStartPoint: function (out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    return out.copy(this.p0);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getResolution\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} divisions - [description]\r\n   *\r\n   * @return {number} [description]\r\n   */\n  getResolution: function (divisions) {\n    return divisions;\n  },\n\n  /**\r\n   * Get point at relative position in curve according to length.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#getPoint\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getPoint: function (t, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    var p0 = this.p0;\n    var p1 = this.p1;\n    var p2 = this.p2;\n    return out.set(QuadraticBezierInterpolation(t, p0.x, p1.x, p2.x), QuadraticBezierInterpolation(t, p0.y, p1.y, p2.y));\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#draw\r\n   * @since 3.2.0\r\n   *\r\n   * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - `Graphics` object to draw onto.\r\n   * @param {integer} [pointsTotal=32] - Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} `Graphics` object that was drawn to.\r\n   */\n  draw: function (graphics, pointsTotal) {\n    if (pointsTotal === undefined) {\n      pointsTotal = 32;\n    }\n\n    var points = this.getPoints(pointsTotal);\n    graphics.beginPath();\n    graphics.moveTo(this.p0.x, this.p0.y);\n\n    for (var i = 1; i < points.length; i++) {\n      graphics.lineTo(points[i].x, points[i].y);\n    }\n\n    graphics.strokePath(); //  So you can chain graphics calls\n\n    return graphics;\n  },\n\n  /**\r\n   * Converts the curve into a JSON compatible object.\r\n   *\r\n   * @method Phaser.Curves.QuadraticBezier#toJSON\r\n   * @since 3.2.0\r\n   *\r\n   * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n   */\n  toJSON: function () {\n    return {\n      type: this.type,\n      points: [this.p0.x, this.p0.y, this.p1.x, this.p1.y, this.p2.x, this.p2.y]\n    };\n  }\n});\n/**\r\n * Creates a curve from a JSON object, e. g. created by `toJSON`.\r\n *\r\n * @function Phaser.Curves.QuadraticBezier.fromJSON\r\n * @since 3.2.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.QuadraticBezier} The created curve instance.\r\n */\n\nQuadraticBezier.fromJSON = function (data) {\n  var points = data.points;\n  var p0 = new Vector2(points[0], points[1]);\n  var p1 = new Vector2(points[2], points[3]);\n  var p2 = new Vector2(points[4], points[5]);\n  return new QuadraticBezier(p0, p1, p2);\n};\n\nmodule.exports = QuadraticBezier;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/curves/QuadraticBezierCurve.js"],"names":["Class","require","Curve","QuadraticBezierInterpolation","Vector2","QuadraticBezier","Extends","initialize","p0","p1","p2","call","Array","isArray","getStartPoint","out","undefined","copy","getResolution","divisions","getPoint","t","set","x","y","draw","graphics","pointsTotal","points","getPoints","beginPath","moveTo","i","length","lineTo","strokePath","toJSON","type","fromJSON","data","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar QuadraticBezierInterpolation = require('../math/interpolation/QuadraticBezierInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class QuadraticBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.2.0\r\n *\r\n * @param {(Phaser.Math.Vector2|number[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n */\r\nvar QuadraticBezier = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function QuadraticBezier (p0, p1, p2)\r\n    {\r\n        Curve.call(this, 'QuadraticBezier');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p2 = new Vector2(p0[4], p0[5]);\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p1 = p1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Curves.QuadraticBezier#p2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.2.0\r\n         */\r\n        this.p2 = p2;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getStartPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getResolution\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#getPoint\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var p0 = this.p0;\r\n        var p1 = this.p1;\r\n        var p2 = this.p2;\r\n\r\n        return out.set(\r\n            QuadraticBezierInterpolation(t, p0.x, p1.x, p2.x),\r\n            QuadraticBezierInterpolation(t, p0.y, p1.y, p2.y)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#draw\r\n     * @since 3.2.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - `Graphics` object to draw onto.\r\n     * @param {integer} [pointsTotal=32] - Number of points to be used for drawing the curve. Higher numbers result in smoother curve but require more processing.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} `Graphics` object that was drawn to.\r\n     */\r\n    draw: function (graphics, pointsTotal)\r\n    {\r\n        if (pointsTotal === undefined) { pointsTotal = 32; }\r\n\r\n        var points = this.getPoints(pointsTotal);\r\n\r\n        graphics.beginPath();\r\n        graphics.moveTo(this.p0.x, this.p0.y);\r\n\r\n        for (var i = 1; i < points.length; i++)\r\n        {\r\n            graphics.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * Converts the curve into a JSON compatible object.\r\n     *\r\n     * @method Phaser.Curves.QuadraticBezier#toJSON\r\n     * @since 3.2.0\r\n     *\r\n     * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y,\r\n                this.p2.x, this.p2.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Creates a curve from a JSON object, e. g. created by `toJSON`.\r\n *\r\n * @function Phaser.Curves.QuadraticBezier.fromJSON\r\n * @since 3.2.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.QuadraticBezier} The created curve instance.\r\n */\r\nQuadraticBezier.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n    var p2 = new Vector2(points[4], points[5]);\r\n\r\n    return new QuadraticBezier(p0, p1, p2);\r\n};\r\n\r\nmodule.exports = QuadraticBezier;\r\n"]},"metadata":{},"sourceType":"script"}