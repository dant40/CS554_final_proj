{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar MATH_CONST = require('../../math/const');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Matrix used for display transformations for rendering.\r\n *\r\n * It is represented like so:\r\n *\r\n * ```\r\n * | a | c | tx |\r\n * | b | d | ty |\r\n * | 0 | 0 | 1  |\r\n * ```\r\n *\r\n * @class TransformMatrix\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [a=1] - The Scale X value.\r\n * @param {number} [b=0] - The Skew Y value.\r\n * @param {number} [c=0] - The Skew X value.\r\n * @param {number} [d=1] - The Scale Y value.\r\n * @param {number} [tx=0] - The Translate X value.\r\n * @param {number} [ty=0] - The Translate Y value.\r\n */\n\n\nvar TransformMatrix = new Class({\n  initialize: function TransformMatrix(a, b, c, d, tx, ty) {\n    if (a === undefined) {\n      a = 1;\n    }\n\n    if (b === undefined) {\n      b = 0;\n    }\n\n    if (c === undefined) {\n      c = 0;\n    }\n\n    if (d === undefined) {\n      d = 1;\n    }\n\n    if (tx === undefined) {\n      tx = 0;\n    }\n\n    if (ty === undefined) {\n      ty = 0;\n    }\n    /**\r\n     * The matrix values.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#matrix\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.matrix = new Float32Array([a, b, c, d, tx, ty, 0, 0, 1]);\n    /**\r\n     * The decomposed matrix.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#decomposedMatrix\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.decomposedMatrix = {\n      translateX: 0,\n      translateY: 0,\n      scaleX: 1,\n      scaleY: 1,\n      rotation: 0\n    };\n  },\n\n  /**\r\n   * The Scale X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#a\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  a: {\n    get: function () {\n      return this.matrix[0];\n    },\n    set: function (value) {\n      this.matrix[0] = value;\n    }\n  },\n\n  /**\r\n   * The Skew Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#b\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  b: {\n    get: function () {\n      return this.matrix[1];\n    },\n    set: function (value) {\n      this.matrix[1] = value;\n    }\n  },\n\n  /**\r\n   * The Skew X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#c\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  c: {\n    get: function () {\n      return this.matrix[2];\n    },\n    set: function (value) {\n      this.matrix[2] = value;\n    }\n  },\n\n  /**\r\n   * The Scale Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#d\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  d: {\n    get: function () {\n      return this.matrix[3];\n    },\n    set: function (value) {\n      this.matrix[3] = value;\n    }\n  },\n\n  /**\r\n   * The Translate X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#e\r\n   * @type {number}\r\n   * @since 3.11.0\r\n   */\n  e: {\n    get: function () {\n      return this.matrix[4];\n    },\n    set: function (value) {\n      this.matrix[4] = value;\n    }\n  },\n\n  /**\r\n   * The Translate Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#f\r\n   * @type {number}\r\n   * @since 3.11.0\r\n   */\n  f: {\n    get: function () {\n      return this.matrix[5];\n    },\n    set: function (value) {\n      this.matrix[5] = value;\n    }\n  },\n\n  /**\r\n   * The Translate X value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#tx\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  tx: {\n    get: function () {\n      return this.matrix[4];\n    },\n    set: function (value) {\n      this.matrix[4] = value;\n    }\n  },\n\n  /**\r\n   * The Translate Y value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#ty\r\n   * @type {number}\r\n   * @since 3.4.0\r\n   */\n  ty: {\n    get: function () {\n      return this.matrix[5];\n    },\n    set: function (value) {\n      this.matrix[5] = value;\n    }\n  },\n\n  /**\r\n   * The rotation of the Matrix. Value is in radians.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#rotation\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  rotation: {\n    get: function () {\n      return Math.acos(this.a / this.scaleX) * (Math.atan(-this.c / this.a) < 0 ? -1 : 1);\n    }\n  },\n\n  /**\r\n   * The rotation of the Matrix, normalized to be within the Phaser right-handed\r\n   * clockwise rotation space. Value is in radians.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#rotationNormalized\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.19.0\r\n   */\n  rotationNormalized: {\n    get: function () {\n      var matrix = this.matrix;\n      var a = matrix[0];\n      var b = matrix[1];\n      var c = matrix[2];\n      var d = matrix[3];\n\n      if (a || b) {\n        // var r = Math.sqrt(a * a + b * b);\n        return b > 0 ? Math.acos(a / this.scaleX) : -Math.acos(a / this.scaleX);\n      } else if (c || d) {\n        // var s = Math.sqrt(c * c + d * d);\n        return MATH_CONST.TAU - (d > 0 ? Math.acos(-c / this.scaleY) : -Math.acos(c / this.scaleY));\n      } else {\n        return 0;\n      }\n    }\n  },\n\n  /**\r\n   * The decomposed horizontal scale of the Matrix. This value is always positive.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#scaleX\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  scaleX: {\n    get: function () {\n      return Math.sqrt(this.a * this.a + this.b * this.b);\n    }\n  },\n\n  /**\r\n   * The decomposed vertical scale of the Matrix. This value is always positive.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TransformMatrix#scaleY\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.4.0\r\n   */\n  scaleY: {\n    get: function () {\n      return Math.sqrt(this.c * this.c + this.d * this.d);\n    }\n  },\n\n  /**\r\n   * Reset the Matrix to an identity matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#loadIdentity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  loadIdentity: function () {\n    var matrix = this.matrix;\n    matrix[0] = 1;\n    matrix[1] = 0;\n    matrix[2] = 0;\n    matrix[3] = 1;\n    matrix[4] = 0;\n    matrix[5] = 0;\n    return this;\n  },\n\n  /**\r\n   * Translate the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation value.\r\n   * @param {number} y - The vertical translation value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  translate: function (x, y) {\n    var matrix = this.matrix;\n    matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\n    matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\n    return this;\n  },\n\n  /**\r\n   * Scale the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal scale value.\r\n   * @param {number} y - The vertical scale value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  scale: function (x, y) {\n    var matrix = this.matrix;\n    matrix[0] *= x;\n    matrix[1] *= x;\n    matrix[2] *= y;\n    matrix[3] *= y;\n    return this;\n  },\n\n  /**\r\n   * Rotate the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} angle - The angle of rotation in radians.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  rotate: function (angle) {\n    var sin = Math.sin(angle);\n    var cos = Math.cos(angle);\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    matrix[0] = a * cos + c * sin;\n    matrix[1] = b * cos + d * sin;\n    matrix[2] = a * -sin + c * cos;\n    matrix[3] = b * -sin + d * cos;\n    return this;\n  },\n\n  /**\r\n   * Multiply this Matrix by the given Matrix.\r\n   * \r\n   * If an `out` Matrix is given then the results will be stored in it.\r\n   * If it is not given, this matrix will be updated in place instead.\r\n   * Use an `out` Matrix if you do not wish to mutate this matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} rhs - The Matrix to multiply by.\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} [out] - An optional Matrix to store the results in.\r\n   *\r\n   * @return {Phaser.GameObjects.Components.TransformMatrix} Either this TransformMatrix, or the `out` Matrix, if given in the arguments.\r\n   */\n  multiply: function (rhs, out) {\n    var matrix = this.matrix;\n    var source = rhs.matrix;\n    var localA = matrix[0];\n    var localB = matrix[1];\n    var localC = matrix[2];\n    var localD = matrix[3];\n    var localE = matrix[4];\n    var localF = matrix[5];\n    var sourceA = source[0];\n    var sourceB = source[1];\n    var sourceC = source[2];\n    var sourceD = source[3];\n    var sourceE = source[4];\n    var sourceF = source[5];\n    var destinationMatrix = out === undefined ? this : out;\n    destinationMatrix.a = sourceA * localA + sourceB * localC;\n    destinationMatrix.b = sourceA * localB + sourceB * localD;\n    destinationMatrix.c = sourceC * localA + sourceD * localC;\n    destinationMatrix.d = sourceC * localB + sourceD * localD;\n    destinationMatrix.e = sourceE * localA + sourceF * localC + localE;\n    destinationMatrix.f = sourceE * localB + sourceF * localD + localF;\n    return destinationMatrix;\n  },\n\n  /**\r\n   * Multiply this Matrix by the matrix given, including the offset.\r\n   * \r\n   * The offsetX is added to the tx value: `offsetX * a + offsetY * c + tx`.\r\n   * The offsetY is added to the ty value: `offsetY * b + offsetY * d + ty`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#multiplyWithOffset\r\n   * @since 3.11.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n   * @param {number} offsetX - Horizontal offset to factor in to the multiplication.\r\n   * @param {number} offsetY - Vertical offset to factor in to the multiplication.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  multiplyWithOffset: function (src, offsetX, offsetY) {\n    var matrix = this.matrix;\n    var otherMatrix = src.matrix;\n    var a0 = matrix[0];\n    var b0 = matrix[1];\n    var c0 = matrix[2];\n    var d0 = matrix[3];\n    var tx0 = matrix[4];\n    var ty0 = matrix[5];\n    var pse = offsetX * a0 + offsetY * c0 + tx0;\n    var psf = offsetX * b0 + offsetY * d0 + ty0;\n    var a1 = otherMatrix[0];\n    var b1 = otherMatrix[1];\n    var c1 = otherMatrix[2];\n    var d1 = otherMatrix[3];\n    var tx1 = otherMatrix[4];\n    var ty1 = otherMatrix[5];\n    matrix[0] = a1 * a0 + b1 * c0;\n    matrix[1] = a1 * b0 + b1 * d0;\n    matrix[2] = c1 * a0 + d1 * c0;\n    matrix[3] = c1 * b0 + d1 * d0;\n    matrix[4] = tx1 * a0 + ty1 * c0 + pse;\n    matrix[5] = tx1 * b0 + ty1 * d0 + psf;\n    return this;\n  },\n\n  /**\r\n   * Transform the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#transform\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} a - The Scale X value.\r\n   * @param {number} b - The Shear Y value.\r\n   * @param {number} c - The Shear X value.\r\n   * @param {number} d - The Scale Y value.\r\n   * @param {number} tx - The Translate X value.\r\n   * @param {number} ty - The Translate Y value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  transform: function (a, b, c, d, tx, ty) {\n    var matrix = this.matrix;\n    var a0 = matrix[0];\n    var b0 = matrix[1];\n    var c0 = matrix[2];\n    var d0 = matrix[3];\n    var tx0 = matrix[4];\n    var ty0 = matrix[5];\n    matrix[0] = a * a0 + b * c0;\n    matrix[1] = a * b0 + b * d0;\n    matrix[2] = c * a0 + d * c0;\n    matrix[3] = c * b0 + d * d0;\n    matrix[4] = tx * a0 + ty * c0 + tx0;\n    matrix[5] = tx * b0 + ty * d0 + ty0;\n    return this;\n  },\n\n  /**\r\n   * Transform a point using this Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#transformPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point to transform.\r\n   * @param {number} y - The y coordinate of the point to transform.\r\n   * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The Point object to store the transformed coordinates.\r\n   *\r\n   * @return {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} The Point containing the transformed coordinates.\r\n   */\n  transformPoint: function (x, y, point) {\n    if (point === undefined) {\n      point = {\n        x: 0,\n        y: 0\n      };\n    }\n\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    point.x = x * a + y * c + tx;\n    point.y = x * b + y * d + ty;\n    return point;\n  },\n\n  /**\r\n   * Invert the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#invert\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  invert: function () {\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    var n = a * d - b * c;\n    matrix[0] = d / n;\n    matrix[1] = -b / n;\n    matrix[2] = -c / n;\n    matrix[3] = a / n;\n    matrix[4] = (c * ty - d * tx) / n;\n    matrix[5] = -(a * ty - b * tx) / n;\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix to copy those of the matrix given.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyFrom\r\n   * @since 3.11.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  copyFrom: function (src) {\n    var matrix = this.matrix;\n    matrix[0] = src.a;\n    matrix[1] = src.b;\n    matrix[2] = src.c;\n    matrix[3] = src.d;\n    matrix[4] = src.e;\n    matrix[5] = src.f;\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix to copy those of the array given.\r\n   * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyFromArray\r\n   * @since 3.11.0\r\n   *\r\n   * @param {array} src - The array of values to set into this matrix.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  copyFromArray: function (src) {\n    var matrix = this.matrix;\n    matrix[0] = src[0];\n    matrix[1] = src[1];\n    matrix[2] = src[2];\n    matrix[3] = src[3];\n    matrix[4] = src[4];\n    matrix[5] = src[5];\n    return this;\n  },\n\n  /**\r\n   * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n   * This will use the Context.transform method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyToContext\r\n   * @since 3.12.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n   *\r\n   * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n   */\n  copyToContext: function (ctx) {\n    var matrix = this.matrix;\n    ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    return ctx;\n  },\n\n  /**\r\n   * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n   * This will use the Context.setTransform method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#setToContext\r\n   * @since 3.12.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n   *\r\n   * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n   */\n  setToContext: function (ctx) {\n    var matrix = this.matrix;\n    ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n    return ctx;\n  },\n\n  /**\r\n   * Copy the values in this Matrix to the array given.\r\n   * \r\n   * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#copyToArray\r\n   * @since 3.12.0\r\n   *\r\n   * @param {array} [out] - The array to copy the matrix values in to.\r\n   *\r\n   * @return {array} An array where elements 0 to 5 contain the values from this matrix.\r\n   */\n  copyToArray: function (out) {\n    var matrix = this.matrix;\n\n    if (out === undefined) {\n      out = [matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]];\n    } else {\n      out[0] = matrix[0];\n      out[1] = matrix[1];\n      out[2] = matrix[2];\n      out[3] = matrix[3];\n      out[4] = matrix[4];\n      out[5] = matrix[5];\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Set the values of this Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#setTransform\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} a - The Scale X value.\r\n   * @param {number} b - The Shear Y value.\r\n   * @param {number} c - The Shear X value.\r\n   * @param {number} d - The Scale Y value.\r\n   * @param {number} tx - The Translate X value.\r\n   * @param {number} ty - The Translate Y value.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  setTransform: function (a, b, c, d, tx, ty) {\n    var matrix = this.matrix;\n    matrix[0] = a;\n    matrix[1] = b;\n    matrix[2] = c;\n    matrix[3] = d;\n    matrix[4] = tx;\n    matrix[5] = ty;\n    return this;\n  },\n\n  /**\r\n   * Decompose this Matrix into its translation, scale and rotation values using QR decomposition.\r\n   * \r\n   * The result must be applied in the following order to reproduce the current matrix:\r\n   * \r\n   * translate -> rotate -> scale\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#decomposeMatrix\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} The decomposed Matrix.\r\n   */\n  decomposeMatrix: function () {\n    var decomposedMatrix = this.decomposedMatrix;\n    var matrix = this.matrix; //  a = scale X (1)\n    //  b = shear Y (0)\n    //  c = shear X (0)\n    //  d = scale Y (1)\n\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var determ = a * d - b * c;\n    decomposedMatrix.translateX = matrix[4];\n    decomposedMatrix.translateY = matrix[5];\n\n    if (a || b) {\n      var r = Math.sqrt(a * a + b * b);\n      decomposedMatrix.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);\n      decomposedMatrix.scaleX = r;\n      decomposedMatrix.scaleY = determ / r;\n    } else if (c || d) {\n      var s = Math.sqrt(c * c + d * d);\n      decomposedMatrix.rotation = Math.PI * 0.5 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\n      decomposedMatrix.scaleX = determ / s;\n      decomposedMatrix.scaleY = s;\n    } else {\n      decomposedMatrix.rotation = 0;\n      decomposedMatrix.scaleX = 0;\n      decomposedMatrix.scaleY = 0;\n    }\n\n    return decomposedMatrix;\n  },\n\n  /**\r\n   * Apply the identity, translate, rotate and scale operations on the Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#applyITRS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation.\r\n   * @param {number} y - The vertical translation.\r\n   * @param {number} rotation - The angle of rotation in radians.\r\n   * @param {number} scaleX - The horizontal scale.\r\n   * @param {number} scaleY - The vertical scale.\r\n   *\r\n   * @return {this} This TransformMatrix.\r\n   */\n  applyITRS: function (x, y, rotation, scaleX, scaleY) {\n    var matrix = this.matrix;\n    var radianSin = Math.sin(rotation);\n    var radianCos = Math.cos(rotation); // Translate\n\n    matrix[4] = x;\n    matrix[5] = y; // Rotate and Scale\n\n    matrix[0] = radianCos * scaleX;\n    matrix[1] = radianSin * scaleX;\n    matrix[2] = -radianSin * scaleY;\n    matrix[3] = radianCos * scaleY;\n    return this;\n  },\n\n  /**\r\n   * Takes the `x` and `y` values and returns a new position in the `output` vector that is the inverse of\r\n   * the current matrix with its transformation applied.\r\n   * \r\n   * Can be used to translate points from world to local space.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#applyInverse\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} x - The x position to translate.\r\n   * @param {number} y - The y position to translate.\r\n   * @param {Phaser.Math.Vector2} [output] - A Vector2, or point-like object, to store the results in.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates, inverse-transformed through this matrix.\r\n   */\n  applyInverse: function (x, y, output) {\n    if (output === undefined) {\n      output = new Vector2();\n    }\n\n    var matrix = this.matrix;\n    var a = matrix[0];\n    var b = matrix[1];\n    var c = matrix[2];\n    var d = matrix[3];\n    var tx = matrix[4];\n    var ty = matrix[5];\n    var id = 1 / (a * d + c * -b);\n    output.x = d * id * x + -c * id * y + (ty * c - tx * d) * id;\n    output.y = a * id * y + -b * id * x + (-ty * a + tx * b) * id;\n    return output;\n  },\n\n  /**\r\n   * Returns the X component of this matrix multiplied by the given values.\r\n   * This is the same as `x * a + y * c + e`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getX\r\n   * @since 3.12.0\r\n   * \r\n   * @param {number} x - The x value.\r\n   * @param {number} y - The y value.\r\n   *\r\n   * @return {number} The calculated x value.\r\n   */\n  getX: function (x, y) {\n    return x * this.a + y * this.c + this.e;\n  },\n\n  /**\r\n   * Returns the Y component of this matrix multiplied by the given values.\r\n   * This is the same as `x * b + y * d + f`.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getY\r\n   * @since 3.12.0\r\n   * \r\n   * @param {number} x - The x value.\r\n   * @param {number} y - The y value.\r\n   *\r\n   * @return {number} The calculated y value.\r\n   */\n  getY: function (x, y) {\n    return x * this.b + y * this.d + this.f;\n  },\n\n  /**\r\n   * Returns a string that can be used in a CSS Transform call as a `matrix` property.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#getCSSMatrix\r\n   * @since 3.12.0\r\n   *\r\n   * @return {string} A string containing the CSS Transform matrix values.\r\n   */\n  getCSSMatrix: function () {\n    var m = this.matrix;\n    return 'matrix(' + m[0] + ',' + m[1] + ',' + m[2] + ',' + m[3] + ',' + m[4] + ',' + m[5] + ')';\n  },\n\n  /**\r\n   * Destroys this Transform Matrix.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TransformMatrix#destroy\r\n   * @since 3.4.0\r\n   */\n  destroy: function () {\n    this.matrix = null;\n    this.decomposedMatrix = null;\n  }\n});\nmodule.exports = TransformMatrix;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/TransformMatrix.js"],"names":["Class","require","MATH_CONST","Vector2","TransformMatrix","initialize","a","b","c","d","tx","ty","undefined","matrix","Float32Array","decomposedMatrix","translateX","translateY","scaleX","scaleY","rotation","get","set","value","e","f","Math","acos","atan","rotationNormalized","TAU","sqrt","loadIdentity","translate","x","y","scale","rotate","angle","sin","cos","multiply","rhs","out","source","localA","localB","localC","localD","localE","localF","sourceA","sourceB","sourceC","sourceD","sourceE","sourceF","destinationMatrix","multiplyWithOffset","src","offsetX","offsetY","otherMatrix","a0","b0","c0","d0","tx0","ty0","pse","psf","a1","b1","c1","d1","tx1","ty1","transform","transformPoint","point","invert","n","copyFrom","copyFromArray","copyToContext","ctx","setToContext","setTransform","copyToArray","decomposeMatrix","determ","r","s","PI","applyITRS","radianSin","radianCos","applyInverse","output","id","getX","getY","getCSSMatrix","m","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar MATH_CONST = require('../../math/const');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Matrix used for display transformations for rendering.\r\n *\r\n * It is represented like so:\r\n *\r\n * ```\r\n * | a | c | tx |\r\n * | b | d | ty |\r\n * | 0 | 0 | 1  |\r\n * ```\r\n *\r\n * @class TransformMatrix\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [a=1] - The Scale X value.\r\n * @param {number} [b=0] - The Skew Y value.\r\n * @param {number} [c=0] - The Skew X value.\r\n * @param {number} [d=1] - The Scale Y value.\r\n * @param {number} [tx=0] - The Translate X value.\r\n * @param {number} [ty=0] - The Translate Y value.\r\n */\r\nvar TransformMatrix = new Class({\r\n\r\n    initialize:\r\n\r\n    function TransformMatrix (a, b, c, d, tx, ty)\r\n    {\r\n        if (a === undefined) { a = 1; }\r\n        if (b === undefined) { b = 0; }\r\n        if (c === undefined) { c = 0; }\r\n        if (d === undefined) { d = 1; }\r\n        if (tx === undefined) { tx = 0; }\r\n        if (ty === undefined) { ty = 0; }\r\n\r\n        /**\r\n         * The matrix values.\r\n         *\r\n         * @name Phaser.GameObjects.Components.TransformMatrix#matrix\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.matrix = new Float32Array([ a, b, c, d, tx, ty, 0, 0, 1 ]);\r\n\r\n        /**\r\n         * The decomposed matrix.\r\n         *\r\n         * @name Phaser.GameObjects.Components.TransformMatrix#decomposedMatrix\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.decomposedMatrix = {\r\n            translateX: 0,\r\n            translateY: 0,\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            rotation: 0\r\n        };\r\n    },\r\n\r\n    /**\r\n     * The Scale X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#a\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    a: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[0];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[0] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Skew Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#b\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    b: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[1];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[1] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Skew X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#c\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    c: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[2];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[2] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Scale Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#d\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    d: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[3];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[3] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#e\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\r\n    e: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[4];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[4] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#f\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\r\n    f: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[5];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[5] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate X value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#tx\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    tx: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[4];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[4] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The Translate Y value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#ty\r\n     * @type {number}\r\n     * @since 3.4.0\r\n     */\r\n    ty: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.matrix[5];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.matrix[5] = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the Matrix. Value is in radians.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#rotation\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.4.0\r\n     */\r\n    rotation: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.acos(this.a / this.scaleX) * ((Math.atan(-this.c / this.a) < 0) ? -1 : 1);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The rotation of the Matrix, normalized to be within the Phaser right-handed\r\n     * clockwise rotation space. Value is in radians.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#rotationNormalized\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\r\n    rotationNormalized: {\r\n\r\n        get: function ()\r\n        {\r\n            var matrix = this.matrix;\r\n\r\n            var a = matrix[0];\r\n            var b = matrix[1];\r\n            var c = matrix[2];\r\n            var d = matrix[3];\r\n\r\n            if (a || b)\r\n            {\r\n                // var r = Math.sqrt(a * a + b * b);\r\n    \r\n                return (b > 0) ? Math.acos(a / this.scaleX) : -Math.acos(a / this.scaleX);\r\n            }\r\n            else if (c || d)\r\n            {\r\n                // var s = Math.sqrt(c * c + d * d);\r\n    \r\n                return MATH_CONST.TAU - ((d > 0) ? Math.acos(-c / this.scaleY) : -Math.acos(c / this.scaleY));\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The decomposed horizontal scale of the Matrix. This value is always positive.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#scaleX\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.4.0\r\n     */\r\n    scaleX: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.sqrt((this.a * this.a) + (this.b * this.b));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The decomposed vertical scale of the Matrix. This value is always positive.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TransformMatrix#scaleY\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.4.0\r\n     */\r\n    scaleY: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.sqrt((this.c * this.c) + (this.d * this.d));\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Reset the Matrix to an identity matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#loadIdentity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    loadIdentity: function ()\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = 1;\r\n        matrix[1] = 0;\r\n        matrix[2] = 0;\r\n        matrix[3] = 1;\r\n        matrix[4] = 0;\r\n        matrix[5] = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation value.\r\n     * @param {number} y - The vertical translation value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    translate: function (x, y)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[4] = matrix[0] * x + matrix[2] * y + matrix[4];\r\n        matrix[5] = matrix[1] * x + matrix[3] * y + matrix[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal scale value.\r\n     * @param {number} y - The vertical scale value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    scale: function (x, y)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] *= x;\r\n        matrix[1] *= x;\r\n        matrix[2] *= y;\r\n        matrix[3] *= y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} angle - The angle of rotation in radians.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    rotate: function (angle)\r\n    {\r\n        var sin = Math.sin(angle);\r\n        var cos = Math.cos(angle);\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n\r\n        matrix[0] = a * cos + c * sin;\r\n        matrix[1] = b * cos + d * sin;\r\n        matrix[2] = a * -sin + c * cos;\r\n        matrix[3] = b * -sin + d * cos;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the given Matrix.\r\n     * \r\n     * If an `out` Matrix is given then the results will be stored in it.\r\n     * If it is not given, this matrix will be updated in place instead.\r\n     * Use an `out` Matrix if you do not wish to mutate this matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} rhs - The Matrix to multiply by.\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} [out] - An optional Matrix to store the results in.\r\n     *\r\n     * @return {Phaser.GameObjects.Components.TransformMatrix} Either this TransformMatrix, or the `out` Matrix, if given in the arguments.\r\n     */\r\n    multiply: function (rhs, out)\r\n    {\r\n        var matrix = this.matrix;\r\n        var source = rhs.matrix;\r\n\r\n        var localA = matrix[0];\r\n        var localB = matrix[1];\r\n        var localC = matrix[2];\r\n        var localD = matrix[3];\r\n        var localE = matrix[4];\r\n        var localF = matrix[5];\r\n\r\n        var sourceA = source[0];\r\n        var sourceB = source[1];\r\n        var sourceC = source[2];\r\n        var sourceD = source[3];\r\n        var sourceE = source[4];\r\n        var sourceF = source[5];\r\n\r\n        var destinationMatrix = (out === undefined) ? this : out;\r\n\r\n        destinationMatrix.a = (sourceA * localA) + (sourceB * localC);\r\n        destinationMatrix.b = (sourceA * localB) + (sourceB * localD);\r\n        destinationMatrix.c = (sourceC * localA) + (sourceD * localC);\r\n        destinationMatrix.d = (sourceC * localB) + (sourceD * localD);\r\n        destinationMatrix.e = (sourceE * localA) + (sourceF * localC) + localE;\r\n        destinationMatrix.f = (sourceE * localB) + (sourceF * localD) + localF;\r\n\r\n        return destinationMatrix;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the matrix given, including the offset.\r\n     * \r\n     * The offsetX is added to the tx value: `offsetX * a + offsetY * c + tx`.\r\n     * The offsetY is added to the ty value: `offsetY * b + offsetY * d + ty`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#multiplyWithOffset\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n     * @param {number} offsetX - Horizontal offset to factor in to the multiplication.\r\n     * @param {number} offsetY - Vertical offset to factor in to the multiplication.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    multiplyWithOffset: function (src, offsetX, offsetY)\r\n    {\r\n        var matrix = this.matrix;\r\n        var otherMatrix = src.matrix;\r\n\r\n        var a0 = matrix[0];\r\n        var b0 = matrix[1];\r\n        var c0 = matrix[2];\r\n        var d0 = matrix[3];\r\n        var tx0 = matrix[4];\r\n        var ty0 = matrix[5];\r\n\r\n        var pse = offsetX * a0 + offsetY * c0 + tx0;\r\n        var psf = offsetX * b0 + offsetY * d0 + ty0;\r\n\r\n        var a1 = otherMatrix[0];\r\n        var b1 = otherMatrix[1];\r\n        var c1 = otherMatrix[2];\r\n        var d1 = otherMatrix[3];\r\n        var tx1 = otherMatrix[4];\r\n        var ty1 = otherMatrix[5];\r\n\r\n        matrix[0] = a1 * a0 + b1 * c0;\r\n        matrix[1] = a1 * b0 + b1 * d0;\r\n        matrix[2] = c1 * a0 + d1 * c0;\r\n        matrix[3] = c1 * b0 + d1 * d0;\r\n        matrix[4] = tx1 * a0 + ty1 * c0 + pse;\r\n        matrix[5] = tx1 * b0 + ty1 * d0 + psf;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#transform\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} a - The Scale X value.\r\n     * @param {number} b - The Shear Y value.\r\n     * @param {number} c - The Shear X value.\r\n     * @param {number} d - The Scale Y value.\r\n     * @param {number} tx - The Translate X value.\r\n     * @param {number} ty - The Translate Y value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    transform: function (a, b, c, d, tx, ty)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var a0 = matrix[0];\r\n        var b0 = matrix[1];\r\n        var c0 = matrix[2];\r\n        var d0 = matrix[3];\r\n        var tx0 = matrix[4];\r\n        var ty0 = matrix[5];\r\n\r\n        matrix[0] = a * a0 + b * c0;\r\n        matrix[1] = a * b0 + b * d0;\r\n        matrix[2] = c * a0 + d * c0;\r\n        matrix[3] = c * b0 + d * d0;\r\n        matrix[4] = tx * a0 + ty * c0 + tx0;\r\n        matrix[5] = tx * b0 + ty * d0 + ty0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform a point using this Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#transformPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point to transform.\r\n     * @param {number} y - The y coordinate of the point to transform.\r\n     * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The Point object to store the transformed coordinates.\r\n     *\r\n     * @return {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} The Point containing the transformed coordinates.\r\n     */\r\n    transformPoint: function (x, y, point)\r\n    {\r\n        if (point === undefined) { point = { x: 0, y: 0 }; }\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        point.x = x * a + y * c + tx;\r\n        point.y = x * b + y * d + ty;\r\n\r\n        return point;\r\n    },\r\n\r\n    /**\r\n     * Invert the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        var n = a * d - b * c;\r\n\r\n        matrix[0] = d / n;\r\n        matrix[1] = -b / n;\r\n        matrix[2] = -c / n;\r\n        matrix[3] = a / n;\r\n        matrix[4] = (c * ty - d * tx) / n;\r\n        matrix[5] = -(a * ty - b * tx) / n;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix to copy those of the matrix given.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyFrom\r\n     * @since 3.11.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.TransformMatrix} src - The source Matrix to copy from.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    copyFrom: function (src)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = src.a;\r\n        matrix[1] = src.b;\r\n        matrix[2] = src.c;\r\n        matrix[3] = src.d;\r\n        matrix[4] = src.e;\r\n        matrix[5] = src.f;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix to copy those of the array given.\r\n     * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyFromArray\r\n     * @since 3.11.0\r\n     *\r\n     * @param {array} src - The array of values to set into this matrix.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    copyFromArray: function (src)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = src[0];\r\n        matrix[1] = src[1];\r\n        matrix[2] = src[2];\r\n        matrix[3] = src[3];\r\n        matrix[4] = src[4];\r\n        matrix[5] = src[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n     * This will use the Context.transform method.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyToContext\r\n     * @since 3.12.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n     *\r\n     * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n     */\r\n    copyToContext: function (ctx)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        ctx.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n\r\n        return ctx;\r\n    },\r\n\r\n    /**\r\n     * Copy the values from this Matrix to the given Canvas Rendering Context.\r\n     * This will use the Context.setTransform method.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#setToContext\r\n     * @since 3.12.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas Rendering Context to copy the matrix values to.\r\n     *\r\n     * @return {CanvasRenderingContext2D} The Canvas Rendering Context.\r\n     */\r\n    setToContext: function (ctx)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n\r\n        return ctx;\r\n    },\r\n\r\n    /**\r\n     * Copy the values in this Matrix to the array given.\r\n     * \r\n     * Where array indexes 0, 1, 2, 3, 4 and 5 are mapped to a, b, c, d, e and f.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#copyToArray\r\n     * @since 3.12.0\r\n     *\r\n     * @param {array} [out] - The array to copy the matrix values in to.\r\n     *\r\n     * @return {array} An array where elements 0 to 5 contain the values from this matrix.\r\n     */\r\n    copyToArray: function (out)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        if (out === undefined)\r\n        {\r\n            out = [ matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5] ];\r\n        }\r\n        else\r\n        {\r\n            out[0] = matrix[0];\r\n            out[1] = matrix[1];\r\n            out[2] = matrix[2];\r\n            out[3] = matrix[3];\r\n            out[4] = matrix[4];\r\n            out[5] = matrix[5];\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#setTransform\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} a - The Scale X value.\r\n     * @param {number} b - The Shear Y value.\r\n     * @param {number} c - The Shear X value.\r\n     * @param {number} d - The Scale Y value.\r\n     * @param {number} tx - The Translate X value.\r\n     * @param {number} ty - The Translate Y value.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    setTransform: function (a, b, c, d, tx, ty)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        matrix[0] = a;\r\n        matrix[1] = b;\r\n        matrix[2] = c;\r\n        matrix[3] = d;\r\n        matrix[4] = tx;\r\n        matrix[5] = ty;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decompose this Matrix into its translation, scale and rotation values using QR decomposition.\r\n     * \r\n     * The result must be applied in the following order to reproduce the current matrix:\r\n     * \r\n     * translate -> rotate -> scale\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#decomposeMatrix\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} The decomposed Matrix.\r\n     */\r\n    decomposeMatrix: function ()\r\n    {\r\n        var decomposedMatrix = this.decomposedMatrix;\r\n\r\n        var matrix = this.matrix;\r\n\r\n        //  a = scale X (1)\r\n        //  b = shear Y (0)\r\n        //  c = shear X (0)\r\n        //  d = scale Y (1)\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n\r\n        var determ = a * d - b * c;\r\n\r\n        decomposedMatrix.translateX = matrix[4];\r\n        decomposedMatrix.translateY = matrix[5];\r\n\r\n        if (a || b)\r\n        {\r\n            var r = Math.sqrt(a * a + b * b);\r\n\r\n            decomposedMatrix.rotation = (b > 0) ? Math.acos(a / r) : -Math.acos(a / r);\r\n            decomposedMatrix.scaleX = r;\r\n            decomposedMatrix.scaleY = determ / r;\r\n        }\r\n        else if (c || d)\r\n        {\r\n            var s = Math.sqrt(c * c + d * d);\r\n\r\n            decomposedMatrix.rotation = Math.PI * 0.5 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));\r\n            decomposedMatrix.scaleX = determ / s;\r\n            decomposedMatrix.scaleY = s;\r\n        }\r\n        else\r\n        {\r\n            decomposedMatrix.rotation = 0;\r\n            decomposedMatrix.scaleX = 0;\r\n            decomposedMatrix.scaleY = 0;\r\n        }\r\n\r\n        return decomposedMatrix;\r\n    },\r\n\r\n    /**\r\n     * Apply the identity, translate, rotate and scale operations on the Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#applyITRS\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation.\r\n     * @param {number} y - The vertical translation.\r\n     * @param {number} rotation - The angle of rotation in radians.\r\n     * @param {number} scaleX - The horizontal scale.\r\n     * @param {number} scaleY - The vertical scale.\r\n     *\r\n     * @return {this} This TransformMatrix.\r\n     */\r\n    applyITRS: function (x, y, rotation, scaleX, scaleY)\r\n    {\r\n        var matrix = this.matrix;\r\n\r\n        var radianSin = Math.sin(rotation);\r\n        var radianCos = Math.cos(rotation);\r\n\r\n        // Translate\r\n        matrix[4] = x;\r\n        matrix[5] = y;\r\n\r\n        // Rotate and Scale\r\n        matrix[0] = radianCos * scaleX;\r\n        matrix[1] = radianSin * scaleX;\r\n        matrix[2] = -radianSin * scaleY;\r\n        matrix[3] = radianCos * scaleY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes the `x` and `y` values and returns a new position in the `output` vector that is the inverse of\r\n     * the current matrix with its transformation applied.\r\n     * \r\n     * Can be used to translate points from world to local space.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#applyInverse\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} x - The x position to translate.\r\n     * @param {number} y - The y position to translate.\r\n     * @param {Phaser.Math.Vector2} [output] - A Vector2, or point-like object, to store the results in.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates, inverse-transformed through this matrix.\r\n     */\r\n    applyInverse: function (x, y, output)\r\n    {\r\n        if (output === undefined) { output = new Vector2(); }\r\n\r\n        var matrix = this.matrix;\r\n\r\n        var a = matrix[0];\r\n        var b = matrix[1];\r\n        var c = matrix[2];\r\n        var d = matrix[3];\r\n        var tx = matrix[4];\r\n        var ty = matrix[5];\r\n\r\n        var id = 1 / ((a * d) + (c * -b));\r\n\r\n        output.x = (d * id * x) + (-c * id * y) + (((ty * c) - (tx * d)) * id);\r\n        output.y = (a * id * y) + (-b * id * x) + (((-ty * a) + (tx * b)) * id);\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Returns the X component of this matrix multiplied by the given values.\r\n     * This is the same as `x * a + y * c + e`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getX\r\n     * @since 3.12.0\r\n     * \r\n     * @param {number} x - The x value.\r\n     * @param {number} y - The y value.\r\n     *\r\n     * @return {number} The calculated x value.\r\n     */\r\n    getX: function (x, y)\r\n    {\r\n        return x * this.a + y * this.c + this.e;\r\n    },\r\n\r\n    /**\r\n     * Returns the Y component of this matrix multiplied by the given values.\r\n     * This is the same as `x * b + y * d + f`.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getY\r\n     * @since 3.12.0\r\n     * \r\n     * @param {number} x - The x value.\r\n     * @param {number} y - The y value.\r\n     *\r\n     * @return {number} The calculated y value.\r\n     */\r\n    getY: function (x, y)\r\n    {\r\n        return x * this.b + y * this.d + this.f;\r\n    },\r\n\r\n    /**\r\n     * Returns a string that can be used in a CSS Transform call as a `matrix` property.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#getCSSMatrix\r\n     * @since 3.12.0\r\n     *\r\n     * @return {string} A string containing the CSS Transform matrix values.\r\n     */\r\n    getCSSMatrix: function ()\r\n    {\r\n        var m = this.matrix;\r\n\r\n        return 'matrix(' + m[0] + ',' + m[1] + ',' + m[2] + ',' + m[3] + ',' + m[4] + ',' + m[5] + ')';\r\n    },\r\n\r\n    /**\r\n     * Destroys this Transform Matrix.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TransformMatrix#destroy\r\n     * @since 3.4.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.matrix = null;\r\n        this.decomposedMatrix = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TransformMatrix;\r\n"]},"metadata":{},"sourceType":"script"}