{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n/**\r\n * Calculates the ascent, descent and fontSize of a given font style.\r\n *\r\n * @function Phaser.GameObjects.Text.MeasureText\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.TextStyle} textStyle - The TextStyle object to measure.\r\n *\r\n * @return {Phaser.Types.GameObjects.Text.TextMetrics} An object containing the ascent, descent and fontSize of the TextStyle.\r\n */\n\n\nvar MeasureText = function (textStyle) {\n  // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.\n  var canvas = CanvasPool.create(this); // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.\n\n  var context = canvas.getContext('2d');\n  textStyle.syncFont(canvas, context);\n  var width = Math.ceil(context.measureText(textStyle.testString).width * textStyle.baselineX);\n  var baseline = width;\n  var height = 2 * baseline;\n  baseline = baseline * textStyle.baselineY | 0;\n  canvas.width = width;\n  canvas.height = height;\n  context.fillStyle = '#f00';\n  context.fillRect(0, 0, width, height);\n  context.font = textStyle._font;\n  context.textBaseline = 'alphabetic';\n  context.fillStyle = '#000';\n  context.fillText(textStyle.testString, 0, baseline);\n  var output = {\n    ascent: 0,\n    descent: 0,\n    fontSize: 0\n  };\n\n  if (!context.getImageData(0, 0, width, height)) {\n    output.ascent = baseline;\n    output.descent = baseline + 6;\n    output.fontSize = output.ascent + output.descent;\n    CanvasPool.remove(canvas);\n    return output;\n  }\n\n  var imagedata = context.getImageData(0, 0, width, height).data;\n  var pixels = imagedata.length;\n  var line = width * 4;\n  var i;\n  var j;\n  var idx = 0;\n  var stop = false; // ascent. scan from top to bottom until we find a non red pixel\n\n  for (i = 0; i < baseline; i++) {\n    for (j = 0; j < line; j += 4) {\n      if (imagedata[idx + j] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx += line;\n    } else {\n      break;\n    }\n  }\n\n  output.ascent = baseline - i;\n  idx = pixels - line;\n  stop = false; // descent. scan from bottom to top until we find a non red pixel\n\n  for (i = height; i > baseline; i--) {\n    for (j = 0; j < line; j += 4) {\n      if (imagedata[idx + j] !== 255) {\n        stop = true;\n        break;\n      }\n    }\n\n    if (!stop) {\n      idx -= line;\n    } else {\n      break;\n    }\n  }\n\n  output.descent = i - baseline;\n  output.fontSize = output.ascent + output.descent;\n  CanvasPool.remove(canvas);\n  return output;\n};\n\nmodule.exports = MeasureText;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/text/MeasureText.js"],"names":["CanvasPool","require","MeasureText","textStyle","canvas","create","context","getContext","syncFont","width","Math","ceil","measureText","testString","baselineX","baseline","height","baselineY","fillStyle","fillRect","font","_font","textBaseline","fillText","output","ascent","descent","fontSize","getImageData","remove","imagedata","data","pixels","length","line","i","j","idx","stop","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\n\r\n/**\r\n * Calculates the ascent, descent and fontSize of a given font style.\r\n *\r\n * @function Phaser.GameObjects.Text.MeasureText\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.TextStyle} textStyle - The TextStyle object to measure.\r\n *\r\n * @return {Phaser.Types.GameObjects.Text.TextMetrics} An object containing the ascent, descent and fontSize of the TextStyle.\r\n */\r\nvar MeasureText = function (textStyle)\r\n{\r\n    // @property {HTMLCanvasElement} canvas - The canvas element that the text is rendered.\r\n    var canvas = CanvasPool.create(this);\r\n\r\n    // @property {HTMLCanvasElement} context - The context of the canvas element that the text is rendered to.\r\n    var context = canvas.getContext('2d');\r\n\r\n    textStyle.syncFont(canvas, context);\r\n\r\n    var width = Math.ceil(context.measureText(textStyle.testString).width * textStyle.baselineX);\r\n    var baseline = width;\r\n    var height = 2 * baseline;\r\n\r\n    baseline = baseline * textStyle.baselineY | 0;\r\n\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n\r\n    context.fillStyle = '#f00';\r\n    context.fillRect(0, 0, width, height);\r\n\r\n    context.font = textStyle._font;\r\n\r\n    context.textBaseline = 'alphabetic';\r\n    context.fillStyle = '#000';\r\n    context.fillText(textStyle.testString, 0, baseline);\r\n\r\n    var output = {\r\n        ascent: 0,\r\n        descent: 0,\r\n        fontSize: 0\r\n    };\r\n\r\n    if (!context.getImageData(0, 0, width, height))\r\n    {\r\n        output.ascent = baseline;\r\n        output.descent = baseline + 6;\r\n        output.fontSize = output.ascent + output.descent;\r\n\r\n        CanvasPool.remove(canvas);\r\n\r\n        return output;\r\n    }\r\n\r\n    var imagedata = context.getImageData(0, 0, width, height).data;\r\n    var pixels = imagedata.length;\r\n    var line = width * 4;\r\n    var i;\r\n    var j;\r\n    var idx = 0;\r\n    var stop = false;\r\n\r\n    // ascent. scan from top to bottom until we find a non red pixel\r\n    for (i = 0; i < baseline; i++)\r\n    {\r\n        for (j = 0; j < line; j += 4)\r\n        {\r\n            if (imagedata[idx + j] !== 255)\r\n            {\r\n                stop = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!stop)\r\n        {\r\n            idx += line;\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    output.ascent = baseline - i;\r\n\r\n    idx = pixels - line;\r\n    stop = false;\r\n\r\n    // descent. scan from bottom to top until we find a non red pixel\r\n    for (i = height; i > baseline; i--)\r\n    {\r\n        for (j = 0; j < line; j += 4)\r\n        {\r\n            if (imagedata[idx + j] !== 255)\r\n            {\r\n                stop = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!stop)\r\n        {\r\n            idx -= line;\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n\r\n    output.descent = (i - baseline);\r\n    output.fontSize = output.ascent + output.descent;\r\n\r\n    CanvasPool.remove(canvas);\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = MeasureText;\r\n"]},"metadata":{},"sourceType":"script"}