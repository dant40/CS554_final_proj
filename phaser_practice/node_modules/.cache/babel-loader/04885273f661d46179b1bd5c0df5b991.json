{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * An Image Collection is a special Tile Set containing multiple images, with no slicing into each image.\r\n *\r\n * Image Collections are normally created automatically when Tiled data is loaded.\r\n *\r\n * @class ImageCollection\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @param {string} name - The name of the image collection in the map data.\r\n * @param {integer} firstgid - The first image index this image collection contains.\r\n * @param {integer} [width=32] - Width of widest image (in pixels).\r\n * @param {integer} [height=32] - Height of tallest image (in pixels).\r\n * @param {integer} [margin=0] - The margin around all images in the collection (in pixels).\r\n * @param {integer} [spacing=0] - The spacing between each image in the collection (in pixels).\r\n * @param {object} [properties={}] - Custom Image Collection properties.\r\n */\n\n\nvar ImageCollection = new Class({\n  initialize: function ImageCollection(name, firstgid, width, height, margin, spacing, properties) {\n    if (width === undefined || width <= 0) {\n      width = 32;\n    }\n\n    if (height === undefined || height <= 0) {\n      height = 32;\n    }\n\n    if (margin === undefined) {\n      margin = 0;\n    }\n\n    if (spacing === undefined) {\n      spacing = 0;\n    }\n    /**\r\n     * The name of the Image Collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n    */\n\n\n    this.name = name;\n    /**\r\n     * The Tiled firstgid value.\r\n     * This is the starting index of the first image index this Image Collection contains.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#firstgid\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.firstgid = firstgid | 0;\n    /**\r\n     * The width of the widest image (in pixels).\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageWidth\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageWidth = width | 0;\n    /**\r\n     * The height of the tallest image (in pixels).\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageHeight\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageHeight = height | 0;\n    /**\r\n     * The margin around the images in the collection (in pixels).\r\n     * Use `setSpacing` to change.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageMarge\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageMargin = margin | 0;\n    /**\r\n     * The spacing between each image in the collection (in pixels).\r\n     * Use `setSpacing` to change.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#imageSpacing\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.imageSpacing = spacing | 0;\n    /**\r\n     * Image Collection-specific properties that are typically defined in the Tiled editor.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = properties || {};\n    /**\r\n     * The cached images that are a part of this collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#images\r\n     * @type {array}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.images = [];\n    /**\r\n     * The total number of images in the image collection.\r\n     * \r\n     * @name Phaser.Tilemaps.ImageCollection#total\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.total = 0;\n  },\n\n  /**\r\n   * Returns true if and only if this image collection contains the given image index.\r\n   *\r\n   * @method Phaser.Tilemaps.ImageCollection#containsImageIndex\r\n   * @since 3.0.0\r\n   * \r\n   * @param {integer} imageIndex - The image index to search for.\r\n   * \r\n   * @return {boolean} True if this Image Collection contains the given index.\r\n   */\n  containsImageIndex: function (imageIndex) {\n    return imageIndex >= this.firstgid && imageIndex < this.firstgid + this.total;\n  },\n\n  /**\r\n   * Add an image to this Image Collection.\r\n   *\r\n   * @method Phaser.Tilemaps.ImageCollection#addImage\r\n   * @since 3.0.0\r\n   * \r\n   * @param {integer} gid - The gid of the image in the Image Collection.\r\n   * @param {string} image - The the key of the image in the Image Collection and in the cache.\r\n   *\r\n   * @return {Phaser.Tilemaps.ImageCollection} This ImageCollection object.\r\n   */\n  addImage: function (gid, image) {\n    this.images.push({\n      gid: gid,\n      image: image\n    });\n    this.total++;\n    return this;\n  }\n});\nmodule.exports = ImageCollection;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/ImageCollection.js"],"names":["Class","require","ImageCollection","initialize","name","firstgid","width","height","margin","spacing","properties","undefined","imageWidth","imageHeight","imageMargin","imageSpacing","images","total","containsImageIndex","imageIndex","addImage","gid","image","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIC,eAAe,GAAG,IAAIF,KAAJ,CAAU;AAE5BG,EAAAA,UAAU,EAEV,SAASD,eAAT,CAA0BE,IAA1B,EAAgCC,QAAhC,EAA0CC,KAA1C,EAAiDC,MAAjD,EAAyDC,MAAzD,EAAiEC,OAAjE,EAA0EC,UAA1E,EACA;AACI,QAAIJ,KAAK,KAAKK,SAAV,IAAuBL,KAAK,IAAI,CAApC,EAAuC;AAAEA,MAAAA,KAAK,GAAG,EAAR;AAAa;;AACtD,QAAIC,MAAM,KAAKI,SAAX,IAAwBJ,MAAM,IAAI,CAAtC,EAAyC;AAAEA,MAAAA,MAAM,GAAG,EAAT;AAAc;;AACzD,QAAIC,MAAM,KAAKG,SAAf,EAA0B;AAAEH,MAAAA,MAAM,GAAG,CAAT;AAAa;;AACzC,QAAIC,OAAO,KAAKE,SAAhB,EAA2B;AAAEF,MAAAA,OAAO,GAAG,CAAV;AAAc;AAE3C;;;;;;;;;AAOA,SAAKL,IAAL,GAAYA,IAAZ;AAEA;;;;;;;;;AAQA,SAAKC,QAAL,GAAgBA,QAAQ,GAAG,CAA3B;AAEA;;;;;;;;;AAQA,SAAKO,UAAL,GAAkBN,KAAK,GAAG,CAA1B;AAEA;;;;;;;;;AAQA,SAAKO,WAAL,GAAmBN,MAAM,GAAG,CAA5B;AAEA;;;;;;;;;;AASA,SAAKO,WAAL,GAAmBN,MAAM,GAAG,CAA5B;AAEA;;;;;;;;;;AASA,SAAKO,YAAL,GAAoBN,OAAO,GAAG,CAA9B;AAEA;;;;;;;;AAOA,SAAKC,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AAEA;;;;;;;;;AAQA,SAAKM,MAAL,GAAc,EAAd;AAEA;;;;;;;;;AAQA,SAAKC,KAAL,GAAa,CAAb;AACH,GApG2B;;AAsG5B;;;;;;;;;;AAUAC,EAAAA,kBAAkB,EAAE,UAAUC,UAAV,EACpB;AACI,WAAQA,UAAU,IAAI,KAAKd,QAAnB,IAA+Bc,UAAU,GAAI,KAAKd,QAAL,GAAgB,KAAKY,KAA1E;AACH,GAnH2B;;AAqH5B;;;;;;;;;;;AAWAG,EAAAA,QAAQ,EAAE,UAAUC,GAAV,EAAeC,KAAf,EACV;AACI,SAAKN,MAAL,CAAYO,IAAZ,CAAiB;AAAEF,MAAAA,GAAG,EAAEA,GAAP;AAAYC,MAAAA,KAAK,EAAEA;AAAnB,KAAjB;AACA,SAAKL,KAAL;AAEA,WAAO,IAAP;AACH;AAtI2B,CAAV,CAAtB;AA0IAO,MAAM,CAACC,OAAP,GAAiBvB,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * An Image Collection is a special Tile Set containing multiple images, with no slicing into each image.\r\n *\r\n * Image Collections are normally created automatically when Tiled data is loaded.\r\n *\r\n * @class ImageCollection\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n * \r\n * @param {string} name - The name of the image collection in the map data.\r\n * @param {integer} firstgid - The first image index this image collection contains.\r\n * @param {integer} [width=32] - Width of widest image (in pixels).\r\n * @param {integer} [height=32] - Height of tallest image (in pixels).\r\n * @param {integer} [margin=0] - The margin around all images in the collection (in pixels).\r\n * @param {integer} [spacing=0] - The spacing between each image in the collection (in pixels).\r\n * @param {object} [properties={}] - Custom Image Collection properties.\r\n */\r\nvar ImageCollection = new Class({\r\n\r\n    initialize:\r\n\r\n    function ImageCollection (name, firstgid, width, height, margin, spacing, properties)\r\n    {\r\n        if (width === undefined || width <= 0) { width = 32; }\r\n        if (height === undefined || height <= 0) { height = 32; }\r\n        if (margin === undefined) { margin = 0; }\r\n        if (spacing === undefined) { spacing = 0; }\r\n\r\n        /**\r\n         * The name of the Image Collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n        */\r\n        this.name = name;\r\n\r\n        /**\r\n         * The Tiled firstgid value.\r\n         * This is the starting index of the first image index this Image Collection contains.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#firstgid\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstgid = firstgid | 0;\r\n\r\n        /**\r\n         * The width of the widest image (in pixels).\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageWidth\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageWidth = width | 0;\r\n\r\n        /**\r\n         * The height of the tallest image (in pixels).\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageHeight\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageHeight = height | 0;\r\n\r\n        /**\r\n         * The margin around the images in the collection (in pixels).\r\n         * Use `setSpacing` to change.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageMarge\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageMargin = margin | 0;\r\n\r\n        /**\r\n         * The spacing between each image in the collection (in pixels).\r\n         * Use `setSpacing` to change.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#imageSpacing\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.imageSpacing = spacing | 0;\r\n\r\n        /**\r\n         * Image Collection-specific properties that are typically defined in the Tiled editor.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = properties || {};\r\n\r\n        /**\r\n         * The cached images that are a part of this collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#images\r\n         * @type {array}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.images = [];\r\n\r\n        /**\r\n         * The total number of images in the image collection.\r\n         * \r\n         * @name Phaser.Tilemaps.ImageCollection#total\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.total = 0;\r\n    },\r\n\r\n    /**\r\n     * Returns true if and only if this image collection contains the given image index.\r\n     *\r\n     * @method Phaser.Tilemaps.ImageCollection#containsImageIndex\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} imageIndex - The image index to search for.\r\n     * \r\n     * @return {boolean} True if this Image Collection contains the given index.\r\n     */\r\n    containsImageIndex: function (imageIndex)\r\n    {\r\n        return (imageIndex >= this.firstgid && imageIndex < (this.firstgid + this.total));\r\n    },\r\n\r\n    /**\r\n     * Add an image to this Image Collection.\r\n     *\r\n     * @method Phaser.Tilemaps.ImageCollection#addImage\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} gid - The gid of the image in the Image Collection.\r\n     * @param {string} image - The the key of the image in the Image Collection and in the cache.\r\n     *\r\n     * @return {Phaser.Tilemaps.ImageCollection} This ImageCollection object.\r\n     */\r\n    addImage: function (gid, image)\r\n    {\r\n        this.images.push({ gid: gid, image: image });\r\n        this.total++;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ImageCollection;\r\n"]},"metadata":{},"sourceType":"script"}