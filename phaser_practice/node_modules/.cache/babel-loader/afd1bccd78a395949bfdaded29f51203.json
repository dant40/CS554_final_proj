{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Commands = require('./Commands');\n\nvar SetTransform = require('../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Graphics#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Graphics} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n * @param {CanvasRenderingContext2D} [renderTargetCtx] - The target rendering context.\r\n * @param {boolean} allowClip - If `true` then path operations will be used instead of fill operations.\r\n */\n\n\nvar GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip) {\n  var commandBuffer = src.commandBuffer;\n  var commandBufferLength = commandBuffer.length;\n  var ctx = renderTargetCtx || renderer.currentContext;\n\n  if (commandBufferLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    return;\n  }\n\n  var lineAlpha = 1;\n  var fillAlpha = 1;\n  var lineColor = 0;\n  var fillColor = 0;\n  var lineWidth = 1;\n  var red = 0;\n  var green = 0;\n  var blue = 0; //  Reset any currently active paths\n\n  ctx.beginPath();\n\n  for (var index = 0; index < commandBufferLength; ++index) {\n    var commandID = commandBuffer[index];\n\n    switch (commandID) {\n      case Commands.ARC:\n        ctx.arc(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4], commandBuffer[index + 5], commandBuffer[index + 6]); //  +7 because overshoot is the 7th value, not used in Canvas\n\n        index += 7;\n        break;\n\n      case Commands.LINE_STYLE:\n        lineWidth = commandBuffer[index + 1];\n        lineColor = commandBuffer[index + 2];\n        lineAlpha = commandBuffer[index + 3];\n        red = (lineColor & 0xFF0000) >>> 16;\n        green = (lineColor & 0xFF00) >>> 8;\n        blue = lineColor & 0xFF;\n        ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + lineAlpha + ')';\n        ctx.lineWidth = lineWidth;\n        index += 3;\n        break;\n\n      case Commands.FILL_STYLE:\n        fillColor = commandBuffer[index + 1];\n        fillAlpha = commandBuffer[index + 2];\n        red = (fillColor & 0xFF0000) >>> 16;\n        green = (fillColor & 0xFF00) >>> 8;\n        blue = fillColor & 0xFF;\n        ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';\n        index += 2;\n        break;\n\n      case Commands.BEGIN_PATH:\n        ctx.beginPath();\n        break;\n\n      case Commands.CLOSE_PATH:\n        ctx.closePath();\n        break;\n\n      case Commands.FILL_PATH:\n        if (!allowClip) {\n          ctx.fill();\n        }\n\n        break;\n\n      case Commands.STROKE_PATH:\n        if (!allowClip) {\n          ctx.stroke();\n        }\n\n        break;\n\n      case Commands.FILL_RECT:\n        if (!allowClip) {\n          ctx.fillRect(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4]);\n        } else {\n          ctx.rect(commandBuffer[index + 1], commandBuffer[index + 2], commandBuffer[index + 3], commandBuffer[index + 4]);\n        }\n\n        index += 4;\n        break;\n\n      case Commands.FILL_TRIANGLE:\n        ctx.beginPath();\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\n        ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\n        ctx.closePath();\n\n        if (!allowClip) {\n          ctx.fill();\n        }\n\n        index += 6;\n        break;\n\n      case Commands.STROKE_TRIANGLE:\n        ctx.beginPath();\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\n        ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\n        ctx.closePath();\n\n        if (!allowClip) {\n          ctx.stroke();\n        }\n\n        index += 6;\n        break;\n\n      case Commands.LINE_TO:\n        ctx.lineTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.MOVE_TO:\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.LINE_FX_TO:\n        ctx.lineTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 5;\n        break;\n\n      case Commands.MOVE_FX_TO:\n        ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 5;\n        break;\n\n      case Commands.SAVE:\n        ctx.save();\n        break;\n\n      case Commands.RESTORE:\n        ctx.restore();\n        break;\n\n      case Commands.TRANSLATE:\n        ctx.translate(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.SCALE:\n        ctx.scale(commandBuffer[index + 1], commandBuffer[index + 2]);\n        index += 2;\n        break;\n\n      case Commands.ROTATE:\n        ctx.rotate(commandBuffer[index + 1]);\n        index += 1;\n        break;\n\n      case Commands.GRADIENT_FILL_STYLE:\n        index += 5;\n        break;\n\n      case Commands.GRADIENT_LINE_STYLE:\n        index += 6;\n        break;\n\n      case Commands.SET_TEXTURE:\n        index += 2;\n        break;\n    }\n  } //  Restore the context saved in SetTransform\n\n\n  ctx.restore();\n};\n\nmodule.exports = GraphicsCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/graphics/GraphicsCanvasRenderer.js"],"names":["Commands","require","SetTransform","GraphicsCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","renderTargetCtx","allowClip","commandBuffer","commandBufferLength","length","ctx","currentContext","lineAlpha","fillAlpha","lineColor","fillColor","lineWidth","red","green","blue","beginPath","index","commandID","ARC","arc","LINE_STYLE","strokeStyle","FILL_STYLE","fillStyle","BEGIN_PATH","CLOSE_PATH","closePath","FILL_PATH","fill","STROKE_PATH","stroke","FILL_RECT","fillRect","rect","FILL_TRIANGLE","moveTo","lineTo","STROKE_TRIANGLE","LINE_TO","MOVE_TO","LINE_FX_TO","MOVE_FX_TO","SAVE","save","RESTORE","restore","TRANSLATE","translate","SCALE","scale","ROTATE","rotate","GRADIENT_FILL_STYLE","GRADIENT_LINE_STYLE","SET_TEXTURE","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,0CAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIE,sBAAsB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EAAwEC,eAAxE,EAAyFC,SAAzF,EAC7B;AACI,MAAIC,aAAa,GAAGN,GAAG,CAACM,aAAxB;AACA,MAAIC,mBAAmB,GAAGD,aAAa,CAACE,MAAxC;AAEA,MAAIC,GAAG,GAAGL,eAAe,IAAIL,QAAQ,CAACW,cAAtC;;AAEA,MAAIH,mBAAmB,KAAK,CAAxB,IAA6B,CAACV,YAAY,CAACE,QAAD,EAAWU,GAAX,EAAgBT,GAAhB,EAAqBE,MAArB,EAA6BC,YAA7B,CAA9C,EACA;AACI;AACH;;AAED,MAAIQ,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,IAAI,GAAG,CAAX,CAlBJ,CAoBI;;AACAT,EAAAA,GAAG,CAACU,SAAJ;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGb,mBAA5B,EAAiD,EAAEa,KAAnD,EACA;AACI,QAAIC,SAAS,GAAGf,aAAa,CAACc,KAAD,CAA7B;;AAEA,YAAQC,SAAR;AAEI,WAAK1B,QAAQ,CAAC2B,GAAd;AACIb,QAAAA,GAAG,CAACc,GAAJ,CACIjB,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB,EAGId,aAAa,CAACc,KAAK,GAAG,CAAT,CAHjB,EAIId,aAAa,CAACc,KAAK,GAAG,CAAT,CAJjB,EAKId,aAAa,CAACc,KAAK,GAAG,CAAT,CALjB,EAMId,aAAa,CAACc,KAAK,GAAG,CAAT,CANjB,EADJ,CAUI;;AACAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC6B,UAAd;AACIT,QAAAA,SAAS,GAAGT,aAAa,CAACc,KAAK,GAAG,CAAT,CAAzB;AACAP,QAAAA,SAAS,GAAGP,aAAa,CAACc,KAAK,GAAG,CAAT,CAAzB;AACAT,QAAAA,SAAS,GAAGL,aAAa,CAACc,KAAK,GAAG,CAAT,CAAzB;AACAJ,QAAAA,GAAG,GAAI,CAACH,SAAS,GAAG,QAAb,MAA2B,EAAlC;AACAI,QAAAA,KAAK,GAAI,CAACJ,SAAS,GAAG,MAAb,MAAyB,CAAlC;AACAK,QAAAA,IAAI,GAAIL,SAAS,GAAG,IAApB;AACAJ,QAAAA,GAAG,CAACgB,WAAJ,GAAkB,UAAUT,GAAV,GAAgB,GAAhB,GAAsBC,KAAtB,GAA8B,GAA9B,GAAoCC,IAApC,GAA2C,GAA3C,GAAiDP,SAAjD,GAA6D,GAA/E;AACAF,QAAAA,GAAG,CAACM,SAAJ,GAAgBA,SAAhB;AACAK,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC+B,UAAd;AACIZ,QAAAA,SAAS,GAAGR,aAAa,CAACc,KAAK,GAAG,CAAT,CAAzB;AACAR,QAAAA,SAAS,GAAGN,aAAa,CAACc,KAAK,GAAG,CAAT,CAAzB;AACAJ,QAAAA,GAAG,GAAI,CAACF,SAAS,GAAG,QAAb,MAA2B,EAAlC;AACAG,QAAAA,KAAK,GAAI,CAACH,SAAS,GAAG,MAAb,MAAyB,CAAlC;AACAI,QAAAA,IAAI,GAAIJ,SAAS,GAAG,IAApB;AACAL,QAAAA,GAAG,CAACkB,SAAJ,GAAgB,UAAUX,GAAV,GAAgB,GAAhB,GAAsBC,KAAtB,GAA8B,GAA9B,GAAoCC,IAApC,GAA2C,GAA3C,GAAiDN,SAAjD,GAA6D,GAA7E;AACAQ,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACiC,UAAd;AACInB,QAAAA,GAAG,CAACU,SAAJ;AACA;;AAEJ,WAAKxB,QAAQ,CAACkC,UAAd;AACIpB,QAAAA,GAAG,CAACqB,SAAJ;AACA;;AAEJ,WAAKnC,QAAQ,CAACoC,SAAd;AACI,YAAI,CAAC1B,SAAL,EACA;AACII,UAAAA,GAAG,CAACuB,IAAJ;AACH;;AACD;;AAEJ,WAAKrC,QAAQ,CAACsC,WAAd;AACI,YAAI,CAAC5B,SAAL,EACA;AACII,UAAAA,GAAG,CAACyB,MAAJ;AACH;;AACD;;AAEJ,WAAKvC,QAAQ,CAACwC,SAAd;AACI,YAAI,CAAC9B,SAAL,EACA;AACII,UAAAA,GAAG,CAAC2B,QAAJ,CACI9B,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB,EAGId,aAAa,CAACc,KAAK,GAAG,CAAT,CAHjB,EAIId,aAAa,CAACc,KAAK,GAAG,CAAT,CAJjB;AAMH,SARD,MAUA;AACIX,UAAAA,GAAG,CAAC4B,IAAJ,CACI/B,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB,EAGId,aAAa,CAACc,KAAK,GAAG,CAAT,CAHjB,EAIId,aAAa,CAACc,KAAK,GAAG,CAAT,CAJjB;AAMH;;AACDA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC2C,aAAd;AACI7B,QAAAA,GAAG,CAACU,SAAJ;AACAV,QAAAA,GAAG,CAAC8B,MAAJ,CAAWjC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAAC+B,MAAJ,CAAWlC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAAC+B,MAAJ,CAAWlC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAACqB,SAAJ;;AACA,YAAI,CAACzB,SAAL,EACA;AACII,UAAAA,GAAG,CAACuB,IAAJ;AACH;;AACDZ,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC8C,eAAd;AACIhC,QAAAA,GAAG,CAACU,SAAJ;AACAV,QAAAA,GAAG,CAAC8B,MAAJ,CAAWjC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAAC+B,MAAJ,CAAWlC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAAC+B,MAAJ,CAAWlC,aAAa,CAACc,KAAK,GAAG,CAAT,CAAxB,EAAqCd,aAAa,CAACc,KAAK,GAAG,CAAT,CAAlD;AACAX,QAAAA,GAAG,CAACqB,SAAJ;;AACA,YAAI,CAACzB,SAAL,EACA;AACII,UAAAA,GAAG,CAACyB,MAAJ;AACH;;AACDd,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC+C,OAAd;AACIjC,QAAAA,GAAG,CAAC+B,MAAJ,CACIlC,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACgD,OAAd;AACIlC,QAAAA,GAAG,CAAC8B,MAAJ,CACIjC,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACiD,UAAd;AACInC,QAAAA,GAAG,CAAC+B,MAAJ,CACIlC,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACkD,UAAd;AACIpC,QAAAA,GAAG,CAAC8B,MAAJ,CACIjC,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACmD,IAAd;AACIrC,QAAAA,GAAG,CAACsC,IAAJ;AACA;;AAEJ,WAAKpD,QAAQ,CAACqD,OAAd;AACIvC,QAAAA,GAAG,CAACwC,OAAJ;AACA;;AAEJ,WAAKtD,QAAQ,CAACuD,SAAd;AACIzC,QAAAA,GAAG,CAAC0C,SAAJ,CACI7C,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAACyD,KAAd;AACI3C,QAAAA,GAAG,CAAC4C,KAAJ,CACI/C,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB,EAEId,aAAa,CAACc,KAAK,GAAG,CAAT,CAFjB;AAIAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC2D,MAAd;AACI7C,QAAAA,GAAG,CAAC8C,MAAJ,CACIjD,aAAa,CAACc,KAAK,GAAG,CAAT,CADjB;AAGAA,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC6D,mBAAd;AACIpC,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC8D,mBAAd;AACIrC,QAAAA,KAAK,IAAI,CAAT;AACA;;AAEJ,WAAKzB,QAAQ,CAAC+D,WAAd;AACItC,QAAAA,KAAK,IAAI,CAAT;AACA;AArLR;AAuLH,GAlNL,CAoNI;;;AACAX,EAAAA,GAAG,CAACwC,OAAJ;AACH,CAvND;;AAyNAU,MAAM,CAACC,OAAP,GAAiB9D,sBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Commands = require('./Commands');\r\nvar SetTransform = require('../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Graphics#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Graphics} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n * @param {CanvasRenderingContext2D} [renderTargetCtx] - The target rendering context.\r\n * @param {boolean} allowClip - If `true` then path operations will be used instead of fill operations.\r\n */\r\nvar GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\r\n{\r\n    var commandBuffer = src.commandBuffer;\r\n    var commandBufferLength = commandBuffer.length;\r\n\r\n    var ctx = renderTargetCtx || renderer.currentContext;\r\n\r\n    if (commandBufferLength === 0 || !SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        return;\r\n    }\r\n\r\n    var lineAlpha = 1;\r\n    var fillAlpha = 1;\r\n    var lineColor = 0;\r\n    var fillColor = 0;\r\n    var lineWidth = 1;\r\n    var red = 0;\r\n    var green = 0;\r\n    var blue = 0;\r\n\r\n    //  Reset any currently active paths\r\n    ctx.beginPath();\r\n\r\n    for (var index = 0; index < commandBufferLength; ++index)\r\n    {\r\n        var commandID = commandBuffer[index];\r\n\r\n        switch (commandID)\r\n        {\r\n            case Commands.ARC:\r\n                ctx.arc(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2],\r\n                    commandBuffer[index + 3],\r\n                    commandBuffer[index + 4],\r\n                    commandBuffer[index + 5],\r\n                    commandBuffer[index + 6]\r\n                );\r\n\r\n                //  +7 because overshoot is the 7th value, not used in Canvas\r\n                index += 7;\r\n                break;\r\n\r\n            case Commands.LINE_STYLE:\r\n                lineWidth = commandBuffer[index + 1];\r\n                lineColor = commandBuffer[index + 2];\r\n                lineAlpha = commandBuffer[index + 3];\r\n                red = ((lineColor & 0xFF0000) >>> 16);\r\n                green = ((lineColor & 0xFF00) >>> 8);\r\n                blue = (lineColor & 0xFF);\r\n                ctx.strokeStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + lineAlpha + ')';\r\n                ctx.lineWidth = lineWidth;\r\n                index += 3;\r\n                break;\r\n\r\n            case Commands.FILL_STYLE:\r\n                fillColor = commandBuffer[index + 1];\r\n                fillAlpha = commandBuffer[index + 2];\r\n                red = ((fillColor & 0xFF0000) >>> 16);\r\n                green = ((fillColor & 0xFF00) >>> 8);\r\n                blue = (fillColor & 0xFF);\r\n                ctx.fillStyle = 'rgba(' + red + ',' + green + ',' + blue + ',' + fillAlpha + ')';\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.BEGIN_PATH:\r\n                ctx.beginPath();\r\n                break;\r\n\r\n            case Commands.CLOSE_PATH:\r\n                ctx.closePath();\r\n                break;\r\n\r\n            case Commands.FILL_PATH:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fill();\r\n                }\r\n                break;\r\n\r\n            case Commands.STROKE_PATH:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.stroke();\r\n                }\r\n                break;\r\n\r\n            case Commands.FILL_RECT:\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fillRect(\r\n                        commandBuffer[index + 1],\r\n                        commandBuffer[index + 2],\r\n                        commandBuffer[index + 3],\r\n                        commandBuffer[index + 4]\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    ctx.rect(\r\n                        commandBuffer[index + 1],\r\n                        commandBuffer[index + 2],\r\n                        commandBuffer[index + 3],\r\n                        commandBuffer[index + 4]\r\n                    );\r\n                }\r\n                index += 4;\r\n                break;\r\n\r\n            case Commands.FILL_TRIANGLE:\r\n                ctx.beginPath();\r\n                ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\r\n                ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\r\n                ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\r\n                ctx.closePath();\r\n                if (!allowClip)\r\n                {\r\n                    ctx.fill();\r\n                }\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.STROKE_TRIANGLE:\r\n                ctx.beginPath();\r\n                ctx.moveTo(commandBuffer[index + 1], commandBuffer[index + 2]);\r\n                ctx.lineTo(commandBuffer[index + 3], commandBuffer[index + 4]);\r\n                ctx.lineTo(commandBuffer[index + 5], commandBuffer[index + 6]);\r\n                ctx.closePath();\r\n                if (!allowClip)\r\n                {\r\n                    ctx.stroke();\r\n                }\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.LINE_TO:\r\n                ctx.lineTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.MOVE_TO:\r\n                ctx.moveTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.LINE_FX_TO:\r\n                ctx.lineTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.MOVE_FX_TO:\r\n                ctx.moveTo(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.SAVE:\r\n                ctx.save();\r\n                break;\r\n\r\n            case Commands.RESTORE:\r\n                ctx.restore();\r\n                break;\r\n\r\n            case Commands.TRANSLATE:\r\n                ctx.translate(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.SCALE:\r\n                ctx.scale(\r\n                    commandBuffer[index + 1],\r\n                    commandBuffer[index + 2]\r\n                );\r\n                index += 2;\r\n                break;\r\n\r\n            case Commands.ROTATE:\r\n                ctx.rotate(\r\n                    commandBuffer[index + 1]\r\n                );\r\n                index += 1;\r\n                break;\r\n\r\n            case Commands.GRADIENT_FILL_STYLE:\r\n                index += 5;\r\n                break;\r\n\r\n            case Commands.GRADIENT_LINE_STYLE:\r\n                index += 6;\r\n                break;\r\n\r\n            case Commands.SET_TEXTURE:\r\n                index += 2;\r\n                break;\r\n        }\r\n    }\r\n\r\n    //  Restore the context saved in SetTransform\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = GraphicsCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}