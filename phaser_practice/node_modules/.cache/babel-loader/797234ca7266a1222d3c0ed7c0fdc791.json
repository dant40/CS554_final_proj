{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BitmapMask = require('../../display/mask/BitmapMask');\n\nvar GeometryMask = require('../../display/mask/GeometryMask');\n/**\r\n * Provides methods used for getting and setting the mask of a Game Object.\r\n *\r\n * @namespace Phaser.GameObjects.Components.Mask\r\n * @since 3.0.0\r\n */\n\n\nvar Mask = {\n  /**\r\n   * The Mask this Game Object is using during render.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Mask#mask\r\n   * @type {Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask}\r\n   * @since 3.0.0\r\n   */\n  mask: null,\n\n  /**\r\n   * Sets the mask that this Game Object will use to render with.\r\n   *\r\n   * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\r\n   * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\r\n   *\r\n   * If a mask is already set on this Game Object it will be immediately replaced.\r\n   * \r\n   * Masks are positioned in global space and are not relative to the Game Object to which they\r\n   * are applied. The reason for this is that multiple Game Objects can all share the same mask.\r\n   * \r\n   * Masks have no impact on physics or input detection. They are purely a rendering component\r\n   * that allows you to limit what is visible during the render pass.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Mask#setMask\r\n   * @since 3.6.2\r\n   *\r\n   * @param {Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask} mask - The mask this Game Object will use when rendering.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setMask: function (mask) {\n    this.mask = mask;\n    return this;\n  },\n\n  /**\r\n   * Clears the mask that this Game Object was using.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Mask#clearMask\r\n   * @since 3.6.2\r\n   *\r\n   * @param {boolean} [destroyMask=false] - Destroy the mask before clearing it?\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  clearMask: function (destroyMask) {\n    if (destroyMask === undefined) {\n      destroyMask = false;\n    }\n\n    if (destroyMask && this.mask) {\n      this.mask.destroy();\n    }\n\n    this.mask = null;\n    return this;\n  },\n\n  /**\r\n   * Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\r\n   * including this one.\r\n   *\r\n   * To create the mask you need to pass in a reference to a renderable Game Object.\r\n   * A renderable Game Object is one that uses a texture to render with, such as an\r\n   * Image, Sprite, Render Texture or BitmapText.\r\n   *\r\n   * If you do not provide a renderable object, and this Game Object has a texture,\r\n   * it will use itself as the object. This means you can call this method to create\r\n   * a Bitmap Mask from any renderable Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Mask#createBitmapMask\r\n   * @since 3.6.2\r\n   * \r\n   * @param {Phaser.GameObjects.GameObject} [renderable] - A renderable Game Object that uses a texture, such as a Sprite.\r\n   *\r\n   * @return {Phaser.Display.Masks.BitmapMask} This Bitmap Mask that was created.\r\n   */\n  createBitmapMask: function (renderable) {\n    if (renderable === undefined && (this.texture || this.shader)) {\n      // eslint-disable-next-line consistent-this\n      renderable = this;\n    }\n\n    return new BitmapMask(this.scene, renderable);\n  },\n\n  /**\r\n   * Creates and returns a Geometry Mask. This mask can be used by any Game Object,\r\n   * including this one.\r\n   *\r\n   * To create the mask you need to pass in a reference to a Graphics Game Object.\r\n   *\r\n   * If you do not provide a graphics object, and this Game Object is an instance\r\n   * of a Graphics object, then it will use itself to create the mask.\r\n   * \r\n   * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Mask#createGeometryMask\r\n   * @since 3.6.2\r\n   * \r\n   * @param {Phaser.GameObjects.Graphics} [graphics] - A Graphics Game Object. The geometry within it will be used as the mask.\r\n   *\r\n   * @return {Phaser.Display.Masks.GeometryMask} This Geometry Mask that was created.\r\n   */\n  createGeometryMask: function (graphics) {\n    if (graphics === undefined && this.type === 'Graphics') {\n      // eslint-disable-next-line consistent-this\n      graphics = this;\n    }\n\n    return new GeometryMask(this.scene, graphics);\n  }\n};\nmodule.exports = Mask;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/Mask.js"],"names":["BitmapMask","require","GeometryMask","Mask","mask","setMask","clearMask","destroyMask","undefined","destroy","createBitmapMask","renderable","texture","shader","scene","createGeometryMask","graphics","type","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,+BAAD,CAAxB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iCAAD,CAA1B;AAEA;;;;;;;;AAOA,IAAIE,IAAI,GAAG;AAEP;;;;;;;AAOAC,EAAAA,IAAI,EAAE,IATC;;AAWP;;;;;;;;;;;;;;;;;;;;;AAqBAC,EAAAA,OAAO,EAAE,UAAUD,IAAV,EACT;AACI,SAAKA,IAAL,GAAYA,IAAZ;AAEA,WAAO,IAAP;AACH,GArCM;;AAuCP;;;;;;;;;;AAUAE,EAAAA,SAAS,EAAE,UAAUC,WAAV,EACX;AACI,QAAIA,WAAW,KAAKC,SAApB,EAA+B;AAAED,MAAAA,WAAW,GAAG,KAAd;AAAsB;;AAEvD,QAAIA,WAAW,IAAI,KAAKH,IAAxB,EACA;AACI,WAAKA,IAAL,CAAUK,OAAV;AACH;;AAED,SAAKL,IAAL,GAAY,IAAZ;AAEA,WAAO,IAAP;AACH,GA7DM;;AA+DP;;;;;;;;;;;;;;;;;;;AAmBAM,EAAAA,gBAAgB,EAAE,UAAUC,UAAV,EAClB;AACI,QAAIA,UAAU,KAAKH,SAAf,KAA6B,KAAKI,OAAL,IAAgB,KAAKC,MAAlD,CAAJ,EACA;AACI;AACAF,MAAAA,UAAU,GAAG,IAAb;AACH;;AAED,WAAO,IAAIX,UAAJ,CAAe,KAAKc,KAApB,EAA2BH,UAA3B,CAAP;AACH,GA3FM;;AA6FP;;;;;;;;;;;;;;;;;;AAkBAI,EAAAA,kBAAkB,EAAE,UAAUC,QAAV,EACpB;AACI,QAAIA,QAAQ,KAAKR,SAAb,IAA0B,KAAKS,IAAL,KAAc,UAA5C,EACA;AACI;AACAD,MAAAA,QAAQ,GAAG,IAAX;AACH;;AAED,WAAO,IAAId,YAAJ,CAAiB,KAAKY,KAAtB,EAA6BE,QAA7B,CAAP;AACH;AAxHM,CAAX;AA4HAE,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BitmapMask = require('../../display/mask/BitmapMask');\r\nvar GeometryMask = require('../../display/mask/GeometryMask');\r\n\r\n/**\r\n * Provides methods used for getting and setting the mask of a Game Object.\r\n *\r\n * @namespace Phaser.GameObjects.Components.Mask\r\n * @since 3.0.0\r\n */\r\n\r\nvar Mask = {\r\n\r\n    /**\r\n     * The Mask this Game Object is using during render.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Mask#mask\r\n     * @type {Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask}\r\n     * @since 3.0.0\r\n     */\r\n    mask: null,\r\n\r\n    /**\r\n     * Sets the mask that this Game Object will use to render with.\r\n     *\r\n     * The mask must have been previously created and can be either a GeometryMask or a BitmapMask.\r\n     * Note: Bitmap Masks only work on WebGL. Geometry Masks work on both WebGL and Canvas.\r\n     *\r\n     * If a mask is already set on this Game Object it will be immediately replaced.\r\n     * \r\n     * Masks are positioned in global space and are not relative to the Game Object to which they\r\n     * are applied. The reason for this is that multiple Game Objects can all share the same mask.\r\n     * \r\n     * Masks have no impact on physics or input detection. They are purely a rendering component\r\n     * that allows you to limit what is visible during the render pass.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Mask#setMask\r\n     * @since 3.6.2\r\n     *\r\n     * @param {Phaser.Display.Masks.BitmapMask|Phaser.Display.Masks.GeometryMask} mask - The mask this Game Object will use when rendering.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setMask: function (mask)\r\n    {\r\n        this.mask = mask;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears the mask that this Game Object was using.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Mask#clearMask\r\n     * @since 3.6.2\r\n     *\r\n     * @param {boolean} [destroyMask=false] - Destroy the mask before clearing it?\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    clearMask: function (destroyMask)\r\n    {\r\n        if (destroyMask === undefined) { destroyMask = false; }\r\n\r\n        if (destroyMask && this.mask)\r\n        {\r\n            this.mask.destroy();\r\n        }\r\n\r\n        this.mask = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates and returns a Bitmap Mask. This mask can be used by any Game Object,\r\n     * including this one.\r\n     *\r\n     * To create the mask you need to pass in a reference to a renderable Game Object.\r\n     * A renderable Game Object is one that uses a texture to render with, such as an\r\n     * Image, Sprite, Render Texture or BitmapText.\r\n     *\r\n     * If you do not provide a renderable object, and this Game Object has a texture,\r\n     * it will use itself as the object. This means you can call this method to create\r\n     * a Bitmap Mask from any renderable Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Mask#createBitmapMask\r\n     * @since 3.6.2\r\n     * \r\n     * @param {Phaser.GameObjects.GameObject} [renderable] - A renderable Game Object that uses a texture, such as a Sprite.\r\n     *\r\n     * @return {Phaser.Display.Masks.BitmapMask} This Bitmap Mask that was created.\r\n     */\r\n    createBitmapMask: function (renderable)\r\n    {\r\n        if (renderable === undefined && (this.texture || this.shader))\r\n        {\r\n            // eslint-disable-next-line consistent-this\r\n            renderable = this;\r\n        }\r\n\r\n        return new BitmapMask(this.scene, renderable);\r\n    },\r\n\r\n    /**\r\n     * Creates and returns a Geometry Mask. This mask can be used by any Game Object,\r\n     * including this one.\r\n     *\r\n     * To create the mask you need to pass in a reference to a Graphics Game Object.\r\n     *\r\n     * If you do not provide a graphics object, and this Game Object is an instance\r\n     * of a Graphics object, then it will use itself to create the mask.\r\n     * \r\n     * This means you can call this method to create a Geometry Mask from any Graphics Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Mask#createGeometryMask\r\n     * @since 3.6.2\r\n     * \r\n     * @param {Phaser.GameObjects.Graphics} [graphics] - A Graphics Game Object. The geometry within it will be used as the mask.\r\n     *\r\n     * @return {Phaser.Display.Masks.GeometryMask} This Geometry Mask that was created.\r\n     */\r\n    createGeometryMask: function (graphics)\r\n    {\r\n        if (graphics === undefined && this.type === 'Graphics')\r\n        {\r\n            // eslint-disable-next-line consistent-this\r\n            graphics = this;\r\n        }\r\n\r\n        return new GeometryMask(this.scene, graphics);\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Mask;\r\n"]},"metadata":{},"sourceType":"script"}