{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Checks for intersection between a circle and a rectangle.\r\n *\r\n * @function Phaser.Geom.Intersects.CircleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The circle to be checked.\r\n * @param {Phaser.Geom.Rectangle} rect - The rectangle to be checked.\r\n *\r\n * @return {boolean} `true` if the two objects intersect, otherwise `false`.\r\n */\nvar CircleToRectangle = function (circle, rect) {\n  var halfWidth = rect.width / 2;\n  var halfHeight = rect.height / 2;\n  var cx = Math.abs(circle.x - rect.x - halfWidth);\n  var cy = Math.abs(circle.y - rect.y - halfHeight);\n  var xDist = halfWidth + circle.radius;\n  var yDist = halfHeight + circle.radius;\n\n  if (cx > xDist || cy > yDist) {\n    return false;\n  } else if (cx <= halfWidth || cy <= halfHeight) {\n    return true;\n  } else {\n    var xCornerDist = cx - halfWidth;\n    var yCornerDist = cy - halfHeight;\n    var xCornerDistSq = xCornerDist * xCornerDist;\n    var yCornerDistSq = yCornerDist * yCornerDist;\n    var maxCornerDistSq = circle.radius * circle.radius;\n    return xCornerDistSq + yCornerDistSq <= maxCornerDistSq;\n  }\n};\n\nmodule.exports = CircleToRectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/CircleToRectangle.js"],"names":["CircleToRectangle","circle","rect","halfWidth","width","halfHeight","height","cx","Math","abs","x","cy","y","xDist","radius","yDist","xCornerDist","yCornerDist","xCornerDistSq","yCornerDistSq","maxCornerDistSq","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,iBAAiB,GAAG,UAAUC,MAAV,EAAkBC,IAAlB,EACxB;AACI,MAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,GAAa,CAA7B;AACA,MAAIC,UAAU,GAAGH,IAAI,CAACI,MAAL,GAAc,CAA/B;AAEA,MAAIC,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASR,MAAM,CAACS,CAAP,GAAWR,IAAI,CAACQ,CAAhB,GAAoBP,SAA7B,CAAT;AACA,MAAIQ,EAAE,GAAGH,IAAI,CAACC,GAAL,CAASR,MAAM,CAACW,CAAP,GAAWV,IAAI,CAACU,CAAhB,GAAoBP,UAA7B,CAAT;AACA,MAAIQ,KAAK,GAAGV,SAAS,GAAGF,MAAM,CAACa,MAA/B;AACA,MAAIC,KAAK,GAAGV,UAAU,GAAGJ,MAAM,CAACa,MAAhC;;AAEA,MAAIP,EAAE,GAAGM,KAAL,IAAcF,EAAE,GAAGI,KAAvB,EACA;AACI,WAAO,KAAP;AACH,GAHD,MAIK,IAAIR,EAAE,IAAIJ,SAAN,IAAmBQ,EAAE,IAAIN,UAA7B,EACL;AACI,WAAO,IAAP;AACH,GAHI,MAKL;AACI,QAAIW,WAAW,GAAGT,EAAE,GAAGJ,SAAvB;AACA,QAAIc,WAAW,GAAGN,EAAE,GAAGN,UAAvB;AACA,QAAIa,aAAa,GAAGF,WAAW,GAAGA,WAAlC;AACA,QAAIG,aAAa,GAAGF,WAAW,GAAGA,WAAlC;AACA,QAAIG,eAAe,GAAGnB,MAAM,CAACa,MAAP,GAAgBb,MAAM,CAACa,MAA7C;AAEA,WAAQI,aAAa,GAAGC,aAAhB,IAAiCC,eAAzC;AACH;AACJ,CA5BD;;AA8BAC,MAAM,CAACC,OAAP,GAAiBtB,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks for intersection between a circle and a rectangle.\r\n *\r\n * @function Phaser.Geom.Intersects.CircleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The circle to be checked.\r\n * @param {Phaser.Geom.Rectangle} rect - The rectangle to be checked.\r\n *\r\n * @return {boolean} `true` if the two objects intersect, otherwise `false`.\r\n */\r\nvar CircleToRectangle = function (circle, rect)\r\n{\r\n    var halfWidth = rect.width / 2;\r\n    var halfHeight = rect.height / 2;\r\n\r\n    var cx = Math.abs(circle.x - rect.x - halfWidth);\r\n    var cy = Math.abs(circle.y - rect.y - halfHeight);\r\n    var xDist = halfWidth + circle.radius;\r\n    var yDist = halfHeight + circle.radius;\r\n\r\n    if (cx > xDist || cy > yDist)\r\n    {\r\n        return false;\r\n    }\r\n    else if (cx <= halfWidth || cy <= halfHeight)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        var xCornerDist = cx - halfWidth;\r\n        var yCornerDist = cy - halfHeight;\r\n        var xCornerDistSq = xCornerDist * xCornerDist;\r\n        var yCornerDistSq = yCornerDist * yCornerDist;\r\n        var maxCornerDistSq = circle.radius * circle.radius;\r\n\r\n        return (xCornerDistSq + yCornerDistSq <= maxCornerDistSq);\r\n    }\r\n};\r\n\r\nmodule.exports = CircleToRectangle;\r\n"]},"metadata":{},"sourceType":"script"}