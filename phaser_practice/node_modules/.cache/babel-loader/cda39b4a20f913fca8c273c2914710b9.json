{"ast":null,"code":"/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\nvar Matter = {};\nmodule.exports = Matter;\n\nvar Plugin = require('./Plugin');\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * The library name.\r\n   * @property name\r\n   * @readOnly\r\n   * @type {String}\r\n   */\n  Matter.name = 'matter-js';\n  /**\r\n   * The library version.\r\n   * @property version\r\n   * @readOnly\r\n   * @type {String}\r\n   */\n\n  Matter.version = '0.14.2';\n  /**\r\n   * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n   * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n   * @property uses\r\n   * @type {Array}\r\n   */\n\n  Matter.uses = [];\n  /**\r\n   * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n   * @property used\r\n   * @readOnly\r\n   * @type {Array}\r\n   */\n\n  Matter.used = [];\n  /**\r\n   * Installs the given plugins on the `Matter` namespace.\r\n   * This is a short-hand for `Plugin.use`, see it for more information.\r\n   * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n   * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n   * @method use\r\n   * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n   */\n\n  Matter.use = function () {\n    Plugin.use(Matter, Array.prototype.slice.call(arguments));\n  };\n  /**\r\n   * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n   * See also docs for `Common.chain`.\r\n   * @method before\r\n   * @param {string} path The path relative to `Matter`\r\n   * @param {function} func The function to chain before the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Matter.before = function (path, func) {\n    path = path.replace(/^Matter./, '');\n    return Common.chainPathBefore(Matter, path, func);\n  };\n  /**\r\n   * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n   * See also docs for `Common.chain`.\r\n   * @method after\r\n   * @param {string} path The path relative to `Matter`\r\n   * @param {function} func The function to chain after the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Matter.after = function (path, func) {\n    path = path.replace(/^Matter./, '');\n    return Common.chainPathAfter(Matter, path, func);\n  };\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/core/Matter.js"],"names":["Matter","module","exports","Plugin","require","Common","name","version","uses","used","use","Array","prototype","slice","call","arguments","before","path","func","replace","chainPathBefore","after","chainPathAfter"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAG,EAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBF,MAAjB;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AAEA,CAAC,YAAW;AAER;;;;;;AAMAJ,EAAAA,MAAM,CAACM,IAAP,GAAc,WAAd;AAEA;;;;;;;AAMAN,EAAAA,MAAM,CAACO,OAAP,GAAiB,QAAjB;AAEA;;;;;;;AAMAP,EAAAA,MAAM,CAACQ,IAAP,GAAc,EAAd;AAEA;;;;;;;AAMAR,EAAAA,MAAM,CAACS,IAAP,GAAc,EAAd;AAEA;;;;;;;;;AAQAT,EAAAA,MAAM,CAACU,GAAP,GAAa,YAAW;AACpBP,IAAAA,MAAM,CAACO,GAAP,CAAWV,MAAX,EAAmBW,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,CAAnB;AACH,GAFD;AAIA;;;;;;;;;;AAQAf,EAAAA,MAAM,CAACgB,MAAP,GAAgB,UAASC,IAAT,EAAeC,IAAf,EAAqB;AACjCD,IAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAP;AACA,WAAOd,MAAM,CAACe,eAAP,CAAuBpB,MAAvB,EAA+BiB,IAA/B,EAAqCC,IAArC,CAAP;AACH,GAHD;AAKA;;;;;;;;;;AAQAlB,EAAAA,MAAM,CAACqB,KAAP,GAAe,UAASJ,IAAT,EAAeC,IAAf,EAAqB;AAChCD,IAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,CAAa,UAAb,EAAyB,EAAzB,CAAP;AACA,WAAOd,MAAM,CAACiB,cAAP,CAAsBtB,MAAtB,EAA8BiB,IAA9B,EAAoCC,IAApC,CAAP;AACH,GAHD;AAKH,CAxED","sourcesContent":["/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = require('./Plugin');\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version = '0.14.2';\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}