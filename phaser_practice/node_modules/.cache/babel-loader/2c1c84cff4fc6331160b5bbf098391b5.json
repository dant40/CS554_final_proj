{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Adds the given item, or array of items, to the array.\r\n *\r\n * Each item must be unique within the array.\r\n *\r\n * The array is modified in-place and returned.\r\n *\r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n *\r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.Add\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array. Each item must be unique within the array.\r\n * @param {integer} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\nvar Add = function (array, item, limit, callback, context) {\n  if (context === undefined) {\n    context = array;\n  }\n\n  if (limit > 0) {\n    var remaining = limit - array.length; //  There's nothing more we can do here, the array is full\n\n    if (remaining <= 0) {\n      return null;\n    }\n  } //  Fast path to avoid array mutation and iteration\n\n\n  if (!Array.isArray(item)) {\n    if (array.indexOf(item) === -1) {\n      array.push(item);\n\n      if (callback) {\n        callback.call(context, item);\n      }\n\n      return item;\n    } else {\n      return null;\n    }\n  } //  If we got this far, we have an array of items to insert\n  //  Ensure all the items are unique\n\n\n  var itemLength = item.length - 1;\n\n  while (itemLength >= 0) {\n    if (array.indexOf(item[itemLength]) !== -1) {\n      //  Already exists in array, so remove it\n      item.splice(itemLength, 1);\n    }\n\n    itemLength--;\n  } //  Anything left?\n\n\n  itemLength = item.length;\n\n  if (itemLength === 0) {\n    return null;\n  }\n\n  if (limit > 0 && itemLength > remaining) {\n    item.splice(remaining);\n    itemLength = remaining;\n  }\n\n  for (var i = 0; i < itemLength; i++) {\n    var entry = item[i];\n    array.push(entry);\n\n    if (callback) {\n      callback.call(context, entry);\n    }\n  }\n\n  return item;\n};\n\nmodule.exports = Add;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/Add.js"],"names":["Add","array","item","limit","callback","context","undefined","remaining","length","Array","isArray","indexOf","push","call","itemLength","splice","i","entry","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIA,GAAG,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,OAAxC,EACV;AACI,MAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAAED,IAAAA,OAAO,GAAGJ,KAAV;AAAkB;;AAE/C,MAAIE,KAAK,GAAG,CAAZ,EACA;AACI,QAAII,SAAS,GAAGJ,KAAK,GAAGF,KAAK,CAACO,MAA9B,CADJ,CAGI;;AACA,QAAID,SAAS,IAAI,CAAjB,EACA;AACI,aAAO,IAAP;AACH;AACJ,GAZL,CAcI;;;AACA,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcR,IAAd,CAAL,EACA;AACI,QAAID,KAAK,CAACU,OAAN,CAAcT,IAAd,MAAwB,CAAC,CAA7B,EACA;AACID,MAAAA,KAAK,CAACW,IAAN,CAAWV,IAAX;;AAEA,UAAIE,QAAJ,EACA;AACIA,QAAAA,QAAQ,CAACS,IAAT,CAAcR,OAAd,EAAuBH,IAAvB;AACH;;AAED,aAAOA,IAAP;AACH,KAVD,MAYA;AACI,aAAO,IAAP;AACH;AACJ,GAhCL,CAkCI;AAEA;;;AACA,MAAIY,UAAU,GAAGZ,IAAI,CAACM,MAAL,GAAc,CAA/B;;AAEA,SAAOM,UAAU,IAAI,CAArB,EACA;AACI,QAAIb,KAAK,CAACU,OAAN,CAAcT,IAAI,CAACY,UAAD,CAAlB,MAAoC,CAAC,CAAzC,EACA;AACI;AACAZ,MAAAA,IAAI,CAACa,MAAL,CAAYD,UAAZ,EAAwB,CAAxB;AACH;;AAEDA,IAAAA,UAAU;AACb,GAhDL,CAkDI;;;AACAA,EAAAA,UAAU,GAAGZ,IAAI,CAACM,MAAlB;;AAEA,MAAIM,UAAU,KAAK,CAAnB,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIX,KAAK,GAAG,CAAR,IAAaW,UAAU,GAAGP,SAA9B,EACA;AACIL,IAAAA,IAAI,CAACa,MAAL,CAAYR,SAAZ;AAEAO,IAAAA,UAAU,GAAGP,SAAb;AACH;;AAED,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,EAAjC,EACA;AACI,QAAIC,KAAK,GAAGf,IAAI,CAACc,CAAD,CAAhB;AAEAf,IAAAA,KAAK,CAACW,IAAN,CAAWK,KAAX;;AAEA,QAAIb,QAAJ,EACA;AACIA,MAAAA,QAAQ,CAACS,IAAT,CAAcR,OAAd,EAAuBY,KAAvB;AACH;AACJ;;AAED,SAAOf,IAAP;AACH,CA/ED;;AAiFAgB,MAAM,CAACC,OAAP,GAAiBnB,GAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Adds the given item, or array of items, to the array.\r\n *\r\n * Each item must be unique within the array.\r\n *\r\n * The array is modified in-place and returned.\r\n *\r\n * You can optionally specify a limit to the maximum size of the array. If the quantity of items being\r\n * added will take the array length over this limit, it will stop adding once the limit is reached.\r\n *\r\n * You can optionally specify a callback to be invoked for each item successfully added to the array.\r\n *\r\n * @function Phaser.Utils.Array.Add\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be added to.\r\n * @param {any|any[]} item - The item, or array of items, to add to the array. Each item must be unique within the array.\r\n * @param {integer} [limit] - Optional limit which caps the size of the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully added to the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar Add = function (array, item, limit, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (limit > 0)\r\n    {\r\n        var remaining = limit - array.length;\r\n\r\n        //  There's nothing more we can do here, the array is full\r\n        if (remaining <= 0)\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        if (array.indexOf(item) === -1)\r\n        {\r\n            array.push(item);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to insert\r\n\r\n    //  Ensure all the items are unique\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        if (array.indexOf(item[itemLength]) !== -1)\r\n        {\r\n            //  Already exists in array, so remove it\r\n            item.splice(itemLength, 1);\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    //  Anything left?\r\n    itemLength = item.length;\r\n\r\n    if (itemLength === 0)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    if (limit > 0 && itemLength > remaining)\r\n    {\r\n        item.splice(remaining);\r\n\r\n        itemLength = remaining;\r\n    }\r\n\r\n    for (var i = 0; i < itemLength; i++)\r\n    {\r\n        var entry = item[i];\r\n\r\n        array.push(entry);\r\n\r\n        if (callback)\r\n        {\r\n            callback.call(context, entry);\r\n        }\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = Add;\r\n"]},"metadata":{},"sourceType":"script"}