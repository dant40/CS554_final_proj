{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArrayUtils = require('../utils/array');\n\nvar Class = require('../utils/Class');\n\nvar NOOP = require('../utils/NOOP');\n\nvar StableSort = require('../utils/array/StableSort');\n/**\r\n * @callback EachListCallback<I>\r\n *\r\n * @param {I} item - The item which is currently being processed.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n */\n\n/**\r\n * @classdesc\r\n * List is a generic implementation of an ordered list which contains utility methods for retrieving, manipulating, and iterating items.\r\n *\r\n * @class List\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n *\r\n * @param {*} parent - The parent of this list.\r\n */\n\n\nvar List = new Class({\n  initialize: function List(parent) {\n    /**\r\n     * The parent of this list.\r\n     *\r\n     * @name Phaser.Structs.List#parent\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * The objects that belong to this collection.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.List#list\r\n     * @type {Array.<*>}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.list = [];\n    /**\r\n     * The index of the current element.\r\n     * \r\n     * This is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.\r\n     *\r\n     * @name Phaser.Structs.List#position\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.position = 0;\n    /**\r\n     * A callback that is invoked every time a child is added to this list.\r\n     *\r\n     * @name Phaser.Structs.List#addCallback\r\n     * @type {function}\r\n     * @since 3.4.0\r\n     */\n\n    this.addCallback = NOOP;\n    /**\r\n     * A callback that is invoked every time a child is removed from this list.\r\n     *\r\n     * @name Phaser.Structs.List#removeCallback\r\n     * @type {function}\r\n     * @since 3.4.0\r\n     */\n\n    this.removeCallback = NOOP;\n    /**\r\n     * The property key to sort by.\r\n     *\r\n     * @name Phaser.Structs.List#_sortKey\r\n     * @type {string}\r\n     * @since 3.4.0\r\n     */\n\n    this._sortKey = '';\n  },\n\n  /**\r\n   * Adds the given item to the end of the list. Each item must be unique.\r\n   *\r\n   * @method Phaser.Structs.List#add\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*|Array.<*>} child - The item, or array of items, to add to the list.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n   *\r\n   * @return {*} The list's underlying array.\r\n   */\n  add: function (child, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.Add(this.list, child);\n    } else {\n      return ArrayUtils.Add(this.list, child, 0, this.addCallback, this);\n    }\n  },\n\n  /**\r\n   * Adds an item to list, starting at a specified index. Each item must be unique within the list.\r\n   *\r\n   * @method Phaser.Structs.List#addAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item, or array of items, to add to the list.\r\n   * @param {integer} [index=0] - The index in the list at which the element(s) will be inserted.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n   *\r\n   * @return {*} The List's underlying array.\r\n   */\n  addAt: function (child, index, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.AddAt(this.list, child, index);\n    } else {\n      return ArrayUtils.AddAt(this.list, child, index, 0, this.addCallback, this);\n    }\n  },\n\n  /**\r\n   * Retrieves the item at a given position inside the List.\r\n   *\r\n   * @method Phaser.Structs.List#getAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {integer} index - The index of the item.\r\n   *\r\n   * @return {*} The retrieved item, or `undefined` if it's outside the List's bounds.\r\n   */\n  getAt: function (index) {\n    return this.list[index];\n  },\n\n  /**\r\n   * Locates an item within the List and returns its index.\r\n   *\r\n   * @method Phaser.Structs.List#getIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child]\r\n   *\r\n   * @param {*} child - The item to locate.\r\n   *\r\n   * @return {integer} The index of the item within the List, or -1 if it's not in the List.\r\n   */\n  getIndex: function (child) {\n    //  Return -1 if given child isn't a child of this display list\n    return this.list.indexOf(child);\n  },\n\n  /**\r\n   * Sort the contents of this List so the items are in order based on the given property.\r\n   * For example, `sort('alpha')` would sort the List contents based on the value of their `alpha` property.\r\n   *\r\n   * @method Phaser.Structs.List#sort\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [children,$return]\r\n   *\r\n   * @param {string} property - The property to lexically sort by.\r\n   * @param {function} [handler] - Provide your own custom handler function. Will receive 2 children which it should compare and return a boolean.\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  sort: function (property, handler) {\n    if (!property) {\n      return this;\n    }\n\n    if (handler === undefined) {\n      handler = function (childA, childB) {\n        return childA[property] - childB[property];\n      };\n    }\n\n    StableSort.inplace(this.list, handler);\n    return this;\n  },\n\n  /**\r\n   * Searches for the first instance of a child with its `name`\r\n   * property matching the given argument. Should more than one child have\r\n   * the same name only the first is returned.\r\n   *\r\n   * @method Phaser.Structs.List#getByName\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {string} name - The name to search for.\r\n   *\r\n   * @return {?*} The first child with a matching name, or null if none were found.\r\n   */\n  getByName: function (name) {\n    return ArrayUtils.GetFirst(this.list, 'name', name);\n  },\n\n  /**\r\n   * Returns a random child from the group.\r\n   *\r\n   * @method Phaser.Structs.List#getRandom\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {integer} [startIndex=0] - Offset from the front of the group (lowest child).\r\n   * @param {integer} [length=(to top)] - Restriction on the number of values you want to randomly select from.\r\n   *\r\n   * @return {?*} A random child of this Group.\r\n   */\n  getRandom: function (startIndex, length) {\n    return ArrayUtils.GetRandom(this.list, startIndex, length);\n  },\n\n  /**\r\n   * Returns the first element in a given part of the List which matches a specific criterion.\r\n   *\r\n   * @method Phaser.Structs.List#getFirst\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T | null} - [$return]\r\n   *\r\n   * @param {string} property - The name of the property to test or a falsey value to have no criterion.\r\n   * @param {*} value - The value to test the `property` against, or `undefined` to allow any value and only check for existence.\r\n   * @param {number} [startIndex=0] - The position in the List to start the search at.\r\n   * @param {number} [endIndex] - The position in the List to optionally stop the search at. It won't be checked.\r\n   *\r\n   * @return {?*} The first item which matches the given criterion, or `null` if no such item exists.\r\n   */\n  getFirst: function (property, value, startIndex, endIndex) {\n    return ArrayUtils.GetFirst(this.list, property, value, startIndex, endIndex);\n  },\n\n  /**\r\n   * Returns all children in this List.\r\n   *\r\n   * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n   *\r\n   * For example: `getAll('parent')` would return only children that have a property called `parent`.\r\n   *\r\n   * You can also specify a value to compare the property to:\r\n   * \r\n   * `getAll('visible', true)` would return only children that have their visible property set to `true`.\r\n   *\r\n   * Optionally you can specify a start and end index. For example if this List had 100 children,\r\n   * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n   * the first 50 children in the List.\r\n   *\r\n   * @method Phaser.Structs.List#getAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @param {string} [property] - An optional property to test against the value argument.\r\n   * @param {*} [value] - If property is set then Child.property must strictly equal this value to be included in the results.\r\n   * @param {integer} [startIndex] - The first child index to start the search from.\r\n   * @param {integer} [endIndex] - The last child index to search up until.\r\n   *\r\n   * @return {Array.<*>} All items of the List which match the given criterion, if any.\r\n   */\n  getAll: function (property, value, startIndex, endIndex) {\n    return ArrayUtils.GetAll(this.list, property, value, startIndex, endIndex);\n  },\n\n  /**\r\n   * Returns the total number of items in the List which have a property matching the given value.\r\n   *\r\n   * @method Phaser.Structs.List#count\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {string} property - The property to test on each item.\r\n   * @param {*} value - The value to test the property against.\r\n   *\r\n   * @return {integer} The total number of matching elements.\r\n   */\n  count: function (property, value) {\n    return ArrayUtils.CountAllMatching(this.list, property, value);\n  },\n\n  /**\r\n   * Swaps the positions of two items in the list.\r\n   *\r\n   * @method Phaser.Structs.List#swap\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child1,child2]\r\n   *\r\n   * @param {*} child1 - The first item to swap.\r\n   * @param {*} child2 - The second item to swap.\r\n   */\n  swap: function (child1, child2) {\n    ArrayUtils.Swap(this.list, child1, child2);\n  },\n\n  /**\r\n   * Moves an item in the List to a new position.\r\n   *\r\n   * @method Phaser.Structs.List#moveTo\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move.\r\n   * @param {integer} index - Moves an item in the List to a new position.\r\n   *\r\n   * @return {*} The item that was moved.\r\n   */\n  moveTo: function (child, index) {\n    return ArrayUtils.MoveTo(this.list, child, index);\n  },\n\n  /**\r\n   * Removes one or many items from the List.\r\n   *\r\n   * @method Phaser.Structs.List#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item, or array of items, to remove.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {*} The item, or array of items, which were successfully removed from the List.\r\n   */\n  remove: function (child, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.Remove(this.list, child);\n    } else {\n      return ArrayUtils.Remove(this.list, child, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes the item at the given position in the List.\r\n   *\r\n   * @method Phaser.Structs.List#removeAt\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {integer} index - The position to remove the item from.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {*} The item that was removed.\r\n   */\n  removeAt: function (index, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.RemoveAt(this.list, index);\n    } else {\n      return ArrayUtils.RemoveAt(this.list, index, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes the items within the given range in the List.\r\n   *\r\n   * @method Phaser.Structs.List#removeBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @param {integer} [startIndex=0] - The index to start removing from.\r\n   * @param {integer} [endIndex] - The position to stop removing at. The item at this position won't be removed.\r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {Array.<*>} An array of the items which were removed.\r\n   */\n  removeBetween: function (startIndex, endIndex, skipCallback) {\n    if (skipCallback) {\n      return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex);\n    } else {\n      return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex, this.removeCallback, this);\n    }\n  },\n\n  /**\r\n   * Removes all the items.\r\n   *\r\n   * @method Phaser.Structs.List#removeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   * \r\n   * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  removeAll: function (skipCallback) {\n    var i = this.list.length;\n\n    while (i--) {\n      this.remove(this.list[i], skipCallback);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Brings the given child to the top of this List.\r\n   *\r\n   * @method Phaser.Structs.List#bringToTop\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to bring to the top of the List.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  bringToTop: function (child) {\n    return ArrayUtils.BringToTop(this.list, child);\n  },\n\n  /**\r\n   * Sends the given child to the bottom of this List.\r\n   *\r\n   * @method Phaser.Structs.List#sendToBack\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to send to the back of the list.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  sendToBack: function (child) {\n    return ArrayUtils.SendToBack(this.list, child);\n  },\n\n  /**\r\n   * Moves the given child up one place in this group unless it's already at the top.\r\n   *\r\n   * @method Phaser.Structs.List#moveUp\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move up.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  moveUp: function (child) {\n    ArrayUtils.MoveUp(this.list, child);\n    return child;\n  },\n\n  /**\r\n   * Moves the given child down one place in this group unless it's already at the bottom.\r\n   *\r\n   * @method Phaser.Structs.List#moveDown\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child,$return]\r\n   *\r\n   * @param {*} child - The item to move down.\r\n   *\r\n   * @return {*} The item which was moved.\r\n   */\n  moveDown: function (child) {\n    ArrayUtils.MoveDown(this.list, child);\n    return child;\n  },\n\n  /**\r\n   * Reverses the order of all children in this List.\r\n   *\r\n   * @method Phaser.Structs.List#reverse\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  reverse: function () {\n    this.list.reverse();\n    return this;\n  },\n\n  /**\r\n   * Shuffles the items in the list.\r\n   *\r\n   * @method Phaser.Structs.List#shuffle\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.List} This List object.\r\n   */\n  shuffle: function () {\n    ArrayUtils.Shuffle(this.list);\n    return this;\n  },\n\n  /**\r\n   * Replaces a child of this List with the given newChild. The newChild cannot be a member of this List.\r\n   *\r\n   * @method Phaser.Structs.List#replace\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [oldChild,newChild,$return]\r\n   *\r\n   * @param {*} oldChild - The child in this List that will be replaced.\r\n   * @param {*} newChild - The child to be inserted into this List.\r\n   *\r\n   * @return {*} Returns the oldChild that was replaced within this group.\r\n   */\n  replace: function (oldChild, newChild) {\n    return ArrayUtils.Replace(this.list, oldChild, newChild);\n  },\n\n  /**\r\n   * Checks if an item exists within the List.\r\n   *\r\n   * @method Phaser.Structs.List#exists\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [child]\r\n   *\r\n   * @param {*} child - The item to check for the existence of.\r\n   *\r\n   * @return {boolean} `true` if the item is found in the list, otherwise `false`.\r\n   */\n  exists: function (child) {\n    return this.list.indexOf(child) > -1;\n  },\n\n  /**\r\n   * Sets the property `key` to the given value on all members of this List.\r\n   *\r\n   * @method Phaser.Structs.List#setAll\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {string} property - The name of the property to set.\r\n   * @param {*} value - The value to set the property to.\r\n   * @param {integer} [startIndex] - The first child index to start the search from.\r\n   * @param {integer} [endIndex] - The last child index to search up until.\r\n   */\n  setAll: function (property, value, startIndex, endIndex) {\n    ArrayUtils.SetAll(this.list, property, value, startIndex, endIndex);\n    return this;\n  },\n\n  /**\r\n   * Passes all children to the given callback.\r\n   *\r\n   * @method Phaser.Structs.List#each\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachListCallback.<T>} - [callback]\r\n   *\r\n   * @param {EachListCallback} callback - The function to call.\r\n   * @param {*} [context] - Value to use as `this` when executing callback.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n   */\n  each: function (callback, context) {\n    var args = [null];\n\n    for (var i = 2; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (i = 0; i < this.list.length; i++) {\n      args[0] = this.list[i];\n      callback.apply(context, args);\n    }\n  },\n\n  /**\r\n   * Clears the List and recreates its internal array.\r\n   *\r\n   * @method Phaser.Structs.List#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    this.removeAll();\n    this.list = [];\n  },\n\n  /**\r\n   * Destroys this List.\r\n   *\r\n   * @method Phaser.Structs.List#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.removeAll();\n    this.parent = null;\n    this.addCallback = null;\n    this.removeCallback = null;\n  },\n\n  /**\r\n   * The number of items inside the List.\r\n   *\r\n   * @name Phaser.Structs.List#length\r\n   * @type {integer}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  length: {\n    get: function () {\n      return this.list.length;\n    }\n  },\n\n  /**\r\n   * The first item in the List or `null` for an empty List.\r\n   *\r\n   * @name Phaser.Structs.List#first\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  first: {\n    get: function () {\n      this.position = 0;\n\n      if (this.list.length > 0) {\n        return this.list[0];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The last item in the List, or `null` for an empty List.\r\n   *\r\n   * @name Phaser.Structs.List#last\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  last: {\n    get: function () {\n      if (this.list.length > 0) {\n        this.position = this.list.length - 1;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The next item in the List, or `null` if the entire List has been traversed.\r\n   * \r\n   * This property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.\r\n   *\r\n   * @name Phaser.Structs.List#next\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  next: {\n    get: function () {\n      if (this.position < this.list.length) {\n        this.position++;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  },\n\n  /**\r\n   * The previous item in the List, or `null` if the entire List has been traversed.\r\n   * \r\n   * This property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.\r\n   *\r\n   * @name Phaser.Structs.List#previous\r\n   * @genericUse {T} - [$type]\r\n   * @type {*}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  previous: {\n    get: function () {\n      if (this.position > 0) {\n        this.position--;\n        return this.list[this.position];\n      } else {\n        return null;\n      }\n    }\n  }\n});\nmodule.exports = List;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/structs/List.js"],"names":["ArrayUtils","require","Class","NOOP","StableSort","List","initialize","parent","list","position","addCallback","removeCallback","_sortKey","add","child","skipCallback","Add","addAt","index","AddAt","getAt","getIndex","indexOf","sort","property","handler","undefined","childA","childB","inplace","getByName","name","GetFirst","getRandom","startIndex","length","GetRandom","getFirst","value","endIndex","getAll","GetAll","count","CountAllMatching","swap","child1","child2","Swap","moveTo","MoveTo","remove","Remove","removeAt","RemoveAt","removeBetween","RemoveBetween","removeAll","i","bringToTop","BringToTop","sendToBack","SendToBack","moveUp","MoveUp","moveDown","MoveDown","reverse","shuffle","Shuffle","replace","oldChild","newChild","Replace","exists","setAll","SetAll","each","callback","context","args","arguments","push","apply","shutdown","destroy","get","first","last","next","previous","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArrayUtils = require('../utils/array');\r\nvar Class = require('../utils/Class');\r\nvar NOOP = require('../utils/NOOP');\r\nvar StableSort = require('../utils/array/StableSort');\r\n\r\n/**\r\n * @callback EachListCallback<I>\r\n *\r\n * @param {I} item - The item which is currently being processed.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * List is a generic implementation of an ordered list which contains utility methods for retrieving, manipulating, and iterating items.\r\n *\r\n * @class List\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n *\r\n * @param {*} parent - The parent of this list.\r\n */\r\nvar List = new Class({\r\n\r\n    initialize:\r\n\r\n    function List (parent)\r\n    {\r\n        /**\r\n         * The parent of this list.\r\n         *\r\n         * @name Phaser.Structs.List#parent\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * The objects that belong to this collection.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.List#list\r\n         * @type {Array.<*>}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.list = [];\r\n\r\n        /**\r\n         * The index of the current element.\r\n         * \r\n         * This is used internally when iterating through the list with the {@link #first}, {@link #last}, {@link #get}, and {@link #previous} properties.\r\n         *\r\n         * @name Phaser.Structs.List#position\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.position = 0;\r\n\r\n        /**\r\n         * A callback that is invoked every time a child is added to this list.\r\n         *\r\n         * @name Phaser.Structs.List#addCallback\r\n         * @type {function}\r\n         * @since 3.4.0\r\n         */\r\n        this.addCallback = NOOP;\r\n\r\n        /**\r\n         * A callback that is invoked every time a child is removed from this list.\r\n         *\r\n         * @name Phaser.Structs.List#removeCallback\r\n         * @type {function}\r\n         * @since 3.4.0\r\n         */\r\n        this.removeCallback = NOOP;\r\n\r\n        /**\r\n         * The property key to sort by.\r\n         *\r\n         * @name Phaser.Structs.List#_sortKey\r\n         * @type {string}\r\n         * @since 3.4.0\r\n         */\r\n        this._sortKey = '';\r\n    },\r\n\r\n    /**\r\n     * Adds the given item to the end of the list. Each item must be unique.\r\n     *\r\n     * @method Phaser.Structs.List#add\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*|Array.<*>} child - The item, or array of items, to add to the list.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n     *\r\n     * @return {*} The list's underlying array.\r\n     */\r\n    add: function (child, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.Add(this.list, child);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.Add(this.list, child, 0, this.addCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds an item to list, starting at a specified index. Each item must be unique within the list.\r\n     *\r\n     * @method Phaser.Structs.List#addAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item, or array of items, to add to the list.\r\n     * @param {integer} [index=0] - The index in the list at which the element(s) will be inserted.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.addCallback if this child is added successfully.\r\n     *\r\n     * @return {*} The List's underlying array.\r\n     */\r\n    addAt: function (child, index, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.AddAt(this.list, child, index);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.AddAt(this.list, child, index, 0, this.addCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieves the item at a given position inside the List.\r\n     *\r\n     * @method Phaser.Structs.List#getAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {integer} index - The index of the item.\r\n     *\r\n     * @return {*} The retrieved item, or `undefined` if it's outside the List's bounds.\r\n     */\r\n    getAt: function (index)\r\n    {\r\n        return this.list[index];\r\n    },\r\n\r\n    /**\r\n     * Locates an item within the List and returns its index.\r\n     *\r\n     * @method Phaser.Structs.List#getIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child]\r\n     *\r\n     * @param {*} child - The item to locate.\r\n     *\r\n     * @return {integer} The index of the item within the List, or -1 if it's not in the List.\r\n     */\r\n    getIndex: function (child)\r\n    {\r\n        //  Return -1 if given child isn't a child of this display list\r\n        return this.list.indexOf(child);\r\n    },\r\n\r\n    /**\r\n     * Sort the contents of this List so the items are in order based on the given property.\r\n     * For example, `sort('alpha')` would sort the List contents based on the value of their `alpha` property.\r\n     *\r\n     * @method Phaser.Structs.List#sort\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [children,$return]\r\n     *\r\n     * @param {string} property - The property to lexically sort by.\r\n     * @param {function} [handler] - Provide your own custom handler function. Will receive 2 children which it should compare and return a boolean.\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    sort: function (property, handler)\r\n    {\r\n        if (!property)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        if (handler === undefined)\r\n        {\r\n            handler = function (childA, childB)\r\n            {\r\n                return childA[property] - childB[property];\r\n            };\r\n        }\r\n\r\n        StableSort.inplace(this.list, handler);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Searches for the first instance of a child with its `name`\r\n     * property matching the given argument. Should more than one child have\r\n     * the same name only the first is returned.\r\n     *\r\n     * @method Phaser.Structs.List#getByName\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {string} name - The name to search for.\r\n     *\r\n     * @return {?*} The first child with a matching name, or null if none were found.\r\n     */\r\n    getByName: function (name)\r\n    {\r\n        return ArrayUtils.GetFirst(this.list, 'name', name);\r\n    },\r\n\r\n    /**\r\n     * Returns a random child from the group.\r\n     *\r\n     * @method Phaser.Structs.List#getRandom\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {integer} [startIndex=0] - Offset from the front of the group (lowest child).\r\n     * @param {integer} [length=(to top)] - Restriction on the number of values you want to randomly select from.\r\n     *\r\n     * @return {?*} A random child of this Group.\r\n     */\r\n    getRandom: function (startIndex, length)\r\n    {\r\n        return ArrayUtils.GetRandom(this.list, startIndex, length);\r\n    },\r\n\r\n    /**\r\n     * Returns the first element in a given part of the List which matches a specific criterion.\r\n     *\r\n     * @method Phaser.Structs.List#getFirst\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T | null} - [$return]\r\n     *\r\n     * @param {string} property - The name of the property to test or a falsey value to have no criterion.\r\n     * @param {*} value - The value to test the `property` against, or `undefined` to allow any value and only check for existence.\r\n     * @param {number} [startIndex=0] - The position in the List to start the search at.\r\n     * @param {number} [endIndex] - The position in the List to optionally stop the search at. It won't be checked.\r\n     *\r\n     * @return {?*} The first item which matches the given criterion, or `null` if no such item exists.\r\n     */\r\n    getFirst: function (property, value, startIndex, endIndex)\r\n    {\r\n        return ArrayUtils.GetFirst(this.list, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    /**\r\n     * Returns all children in this List.\r\n     *\r\n     * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n     *\r\n     * For example: `getAll('parent')` would return only children that have a property called `parent`.\r\n     *\r\n     * You can also specify a value to compare the property to:\r\n     * \r\n     * `getAll('visible', true)` would return only children that have their visible property set to `true`.\r\n     *\r\n     * Optionally you can specify a start and end index. For example if this List had 100 children,\r\n     * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n     * the first 50 children in the List.\r\n     *\r\n     * @method Phaser.Structs.List#getAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @param {string} [property] - An optional property to test against the value argument.\r\n     * @param {*} [value] - If property is set then Child.property must strictly equal this value to be included in the results.\r\n     * @param {integer} [startIndex] - The first child index to start the search from.\r\n     * @param {integer} [endIndex] - The last child index to search up until.\r\n     *\r\n     * @return {Array.<*>} All items of the List which match the given criterion, if any.\r\n     */\r\n    getAll: function (property, value, startIndex, endIndex)\r\n    {\r\n        return ArrayUtils.GetAll(this.list, property, value, startIndex, endIndex);\r\n    },\r\n\r\n    /**\r\n     * Returns the total number of items in the List which have a property matching the given value.\r\n     *\r\n     * @method Phaser.Structs.List#count\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     *\r\n     * @param {string} property - The property to test on each item.\r\n     * @param {*} value - The value to test the property against.\r\n     *\r\n     * @return {integer} The total number of matching elements.\r\n     */\r\n    count: function (property, value)\r\n    {\r\n        return ArrayUtils.CountAllMatching(this.list, property, value);\r\n    },\r\n\r\n    /**\r\n     * Swaps the positions of two items in the list.\r\n     *\r\n     * @method Phaser.Structs.List#swap\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child1,child2]\r\n     *\r\n     * @param {*} child1 - The first item to swap.\r\n     * @param {*} child2 - The second item to swap.\r\n     */\r\n    swap: function (child1, child2)\r\n    {\r\n        ArrayUtils.Swap(this.list, child1, child2);\r\n    },\r\n\r\n    /**\r\n     * Moves an item in the List to a new position.\r\n     *\r\n     * @method Phaser.Structs.List#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move.\r\n     * @param {integer} index - Moves an item in the List to a new position.\r\n     *\r\n     * @return {*} The item that was moved.\r\n     */\r\n    moveTo: function (child, index)\r\n    {\r\n        return ArrayUtils.MoveTo(this.list, child, index);\r\n    },\r\n\r\n    /**\r\n     * Removes one or many items from the List.\r\n     *\r\n     * @method Phaser.Structs.List#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item, or array of items, to remove.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {*} The item, or array of items, which were successfully removed from the List.\r\n     */\r\n    remove: function (child, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.Remove(this.list, child);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.Remove(this.list, child, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes the item at the given position in the List.\r\n     *\r\n     * @method Phaser.Structs.List#removeAt\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {integer} index - The position to remove the item from.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {*} The item that was removed.\r\n     */\r\n    removeAt: function (index, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.RemoveAt(this.list, index);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.RemoveAt(this.list, index, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes the items within the given range in the List.\r\n     *\r\n     * @method Phaser.Structs.List#removeBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @param {integer} [startIndex=0] - The index to start removing from.\r\n     * @param {integer} [endIndex] - The position to stop removing at. The item at this position won't be removed.\r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {Array.<*>} An array of the items which were removed.\r\n     */\r\n    removeBetween: function (startIndex, endIndex, skipCallback)\r\n    {\r\n        if (skipCallback)\r\n        {\r\n            return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex);\r\n        }\r\n        else\r\n        {\r\n            return ArrayUtils.RemoveBetween(this.list, startIndex, endIndex, this.removeCallback, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes all the items.\r\n     *\r\n     * @method Phaser.Structs.List#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     * \r\n     * @param {boolean} [skipCallback=false] - Skip calling the List.removeCallback.\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    removeAll: function (skipCallback)\r\n    {\r\n        var i = this.list.length;\r\n\r\n        while (i--)\r\n        {\r\n            this.remove(this.list[i], skipCallback);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Brings the given child to the top of this List.\r\n     *\r\n     * @method Phaser.Structs.List#bringToTop\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to bring to the top of the List.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    bringToTop: function (child)\r\n    {\r\n        return ArrayUtils.BringToTop(this.list, child);\r\n    },\r\n\r\n    /**\r\n     * Sends the given child to the bottom of this List.\r\n     *\r\n     * @method Phaser.Structs.List#sendToBack\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to send to the back of the list.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    sendToBack: function (child)\r\n    {\r\n        return ArrayUtils.SendToBack(this.list, child);\r\n    },\r\n\r\n    /**\r\n     * Moves the given child up one place in this group unless it's already at the top.\r\n     *\r\n     * @method Phaser.Structs.List#moveUp\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move up.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    moveUp: function (child)\r\n    {\r\n        ArrayUtils.MoveUp(this.list, child);\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Moves the given child down one place in this group unless it's already at the bottom.\r\n     *\r\n     * @method Phaser.Structs.List#moveDown\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child,$return]\r\n     *\r\n     * @param {*} child - The item to move down.\r\n     *\r\n     * @return {*} The item which was moved.\r\n     */\r\n    moveDown: function (child)\r\n    {\r\n        ArrayUtils.MoveDown(this.list, child);\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Reverses the order of all children in this List.\r\n     *\r\n     * @method Phaser.Structs.List#reverse\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    reverse: function ()\r\n    {\r\n        this.list.reverse();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the items in the list.\r\n     *\r\n     * @method Phaser.Structs.List#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.List.<T>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.List} This List object.\r\n     */\r\n    shuffle: function ()\r\n    {\r\n        ArrayUtils.Shuffle(this.list);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Replaces a child of this List with the given newChild. The newChild cannot be a member of this List.\r\n     *\r\n     * @method Phaser.Structs.List#replace\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [oldChild,newChild,$return]\r\n     *\r\n     * @param {*} oldChild - The child in this List that will be replaced.\r\n     * @param {*} newChild - The child to be inserted into this List.\r\n     *\r\n     * @return {*} Returns the oldChild that was replaced within this group.\r\n     */\r\n    replace: function (oldChild, newChild)\r\n    {\r\n        return ArrayUtils.Replace(this.list, oldChild, newChild);\r\n    },\r\n\r\n    /**\r\n     * Checks if an item exists within the List.\r\n     *\r\n     * @method Phaser.Structs.List#exists\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [child]\r\n     *\r\n     * @param {*} child - The item to check for the existence of.\r\n     *\r\n     * @return {boolean} `true` if the item is found in the list, otherwise `false`.\r\n     */\r\n    exists: function (child)\r\n    {\r\n        return (this.list.indexOf(child) > -1);\r\n    },\r\n\r\n    /**\r\n     * Sets the property `key` to the given value on all members of this List.\r\n     *\r\n     * @method Phaser.Structs.List#setAll\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     *\r\n     * @param {string} property - The name of the property to set.\r\n     * @param {*} value - The value to set the property to.\r\n     * @param {integer} [startIndex] - The first child index to start the search from.\r\n     * @param {integer} [endIndex] - The last child index to search up until.\r\n     */\r\n    setAll: function (property, value, startIndex, endIndex)\r\n    {\r\n        ArrayUtils.SetAll(this.list, property, value, startIndex, endIndex);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes all children to the given callback.\r\n     *\r\n     * @method Phaser.Structs.List#each\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {EachListCallback.<T>} - [callback]\r\n     *\r\n     * @param {EachListCallback} callback - The function to call.\r\n     * @param {*} [context] - Value to use as `this` when executing callback.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n     */\r\n    each: function (callback, context)\r\n    {\r\n        var args = [ null ];\r\n\r\n        for (var i = 2; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (i = 0; i < this.list.length; i++)\r\n        {\r\n            args[0] = this.list[i];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Clears the List and recreates its internal array.\r\n     *\r\n     * @method Phaser.Structs.List#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.removeAll();\r\n\r\n        this.list = [];\r\n    },\r\n\r\n    /**\r\n     * Destroys this List.\r\n     *\r\n     * @method Phaser.Structs.List#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAll();\r\n\r\n        this.parent = null;\r\n        this.addCallback = null;\r\n        this.removeCallback = null;\r\n    },\r\n\r\n    /**\r\n     * The number of items inside the List.\r\n     *\r\n     * @name Phaser.Structs.List#length\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    length: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.list.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The first item in the List or `null` for an empty List.\r\n     *\r\n     * @name Phaser.Structs.List#first\r\n     * @genericUse {T} - [$type]\r\n     * @type {*}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    first: {\r\n\r\n        get: function ()\r\n        {\r\n            this.position = 0;\r\n\r\n            if (this.list.length > 0)\r\n            {\r\n                return this.list[0];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The last item in the List, or `null` for an empty List.\r\n     *\r\n     * @name Phaser.Structs.List#last\r\n     * @genericUse {T} - [$type]\r\n     * @type {*}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    last: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.list.length > 0)\r\n            {\r\n                this.position = this.list.length - 1;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The next item in the List, or `null` if the entire List has been traversed.\r\n     * \r\n     * This property can be read successively after reading {@link #first} or manually setting the {@link #position} to iterate the List.\r\n     *\r\n     * @name Phaser.Structs.List#next\r\n     * @genericUse {T} - [$type]\r\n     * @type {*}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    next: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.position < this.list.length)\r\n            {\r\n                this.position++;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The previous item in the List, or `null` if the entire List has been traversed.\r\n     * \r\n     * This property can be read successively after reading {@link #last} or manually setting the {@link #position} to iterate the List backwards.\r\n     *\r\n     * @name Phaser.Structs.List#previous\r\n     * @genericUse {T} - [$type]\r\n     * @type {*}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    previous: {\r\n\r\n        get: function ()\r\n        {\r\n            if (this.position > 0)\r\n            {\r\n                this.position--;\r\n\r\n                return this.list[this.position];\r\n            }\r\n            else\r\n            {\r\n                return null;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = List;\r\n"]},"metadata":{},"sourceType":"script"}