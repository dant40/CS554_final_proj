{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar LayerData = require('../../mapdata/LayerData');\n\nvar Tile = require('../../Tile');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseTileLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n * @param {boolean} insertNull - [description]\r\n *\r\n * @return {array} [description]\r\n */\n\n\nvar ParseTileLayers = function (json, insertNull) {\n  var tileLayers = [];\n\n  for (var i = 0; i < json.layer.length; i++) {\n    var layer = json.layer[i];\n    var layerData = new LayerData({\n      name: layer.name,\n      width: layer.width,\n      height: layer.height,\n      tileWidth: layer.tilesize,\n      tileHeight: layer.tilesize,\n      visible: layer.visible === 1\n    });\n    var row = [];\n    var tileGrid = []; //  Loop through the data field in the JSON. This is a 2D array containing the tile indexes,\n    //  one after the other. The indexes are relative to the tileset that contains the tile.\n\n    for (var y = 0; y < layer.data.length; y++) {\n      for (var x = 0; x < layer.data[y].length; x++) {\n        // In Weltmeister, 0 = no tile, but the Tilemap API expects -1 = no tile.\n        var index = layer.data[y][x] - 1;\n        var tile;\n\n        if (index > -1) {\n          tile = new Tile(layerData, index, x, y, layer.tilesize, layer.tilesize);\n        } else {\n          tile = insertNull ? null : new Tile(layerData, -1, x, y, layer.tilesize, layer.tilesize);\n        }\n\n        row.push(tile);\n      }\n\n      tileGrid.push(row);\n      row = [];\n    }\n\n    layerData.data = tileGrid;\n    tileLayers.push(layerData);\n  }\n\n  return tileLayers;\n};\n\nmodule.exports = ParseTileLayers;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/impact/ParseTileLayers.js"],"names":["LayerData","require","Tile","ParseTileLayers","json","insertNull","tileLayers","i","layer","length","layerData","name","width","height","tileWidth","tilesize","tileHeight","visible","row","tileGrid","y","data","x","index","tile","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,YAAD,CAAlB;AAEA;;;;;;;;;;;;;AAWA,IAAIE,eAAe,GAAG,UAAUC,IAAV,EAAgBC,UAAhB,EACtB;AACI,MAAIC,UAAU,GAAG,EAAjB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EACA;AACI,QAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWD,CAAX,CAAZ;AAEA,QAAIG,SAAS,GAAG,IAAIV,SAAJ,CAAc;AAC1BW,MAAAA,IAAI,EAAEH,KAAK,CAACG,IADc;AAE1BC,MAAAA,KAAK,EAAEJ,KAAK,CAACI,KAFa;AAG1BC,MAAAA,MAAM,EAAEL,KAAK,CAACK,MAHY;AAI1BC,MAAAA,SAAS,EAAEN,KAAK,CAACO,QAJS;AAK1BC,MAAAA,UAAU,EAAER,KAAK,CAACO,QALQ;AAM1BE,MAAAA,OAAO,EAAET,KAAK,CAACS,OAAN,KAAkB;AAND,KAAd,CAAhB;AASA,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,QAAQ,GAAG,EAAf,CAbJ,CAeI;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACa,IAAN,CAAWZ,MAA/B,EAAuCW,CAAC,EAAxC,EACA;AACI,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,KAAK,CAACa,IAAN,CAAWD,CAAX,EAAcX,MAAlC,EAA0Ca,CAAC,EAA3C,EACA;AACI;AACA,YAAIC,KAAK,GAAGf,KAAK,CAACa,IAAN,CAAWD,CAAX,EAAcE,CAAd,IAAmB,CAA/B;AAEA,YAAIE,IAAJ;;AAEA,YAAID,KAAK,GAAG,CAAC,CAAb,EACA;AACIC,UAAAA,IAAI,GAAG,IAAItB,IAAJ,CAASQ,SAAT,EAAoBa,KAApB,EAA2BD,CAA3B,EAA8BF,CAA9B,EAAiCZ,KAAK,CAACO,QAAvC,EAAiDP,KAAK,CAACO,QAAvD,CAAP;AACH,SAHD,MAKA;AACIS,UAAAA,IAAI,GAAGnB,UAAU,GACX,IADW,GAEX,IAAIH,IAAJ,CAASQ,SAAT,EAAoB,CAAC,CAArB,EAAwBY,CAAxB,EAA2BF,CAA3B,EAA8BZ,KAAK,CAACO,QAApC,EAA8CP,KAAK,CAACO,QAApD,CAFN;AAGH;;AAEDG,QAAAA,GAAG,CAACO,IAAJ,CAASD,IAAT;AACH;;AAEDL,MAAAA,QAAQ,CAACM,IAAT,CAAcP,GAAd;AACAA,MAAAA,GAAG,GAAG,EAAN;AACH;;AAEDR,IAAAA,SAAS,CAACW,IAAV,GAAiBF,QAAjB;AAEAb,IAAAA,UAAU,CAACmB,IAAX,CAAgBf,SAAhB;AACH;;AAED,SAAOJ,UAAP;AACH,CAvDD;;AAyDAoB,MAAM,CAACC,OAAP,GAAiBxB,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar LayerData = require('../../mapdata/LayerData');\r\nvar Tile = require('../../Tile');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseTileLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n * @param {boolean} insertNull - [description]\r\n *\r\n * @return {array} [description]\r\n */\r\nvar ParseTileLayers = function (json, insertNull)\r\n{\r\n    var tileLayers = [];\r\n\r\n    for (var i = 0; i < json.layer.length; i++)\r\n    {\r\n        var layer = json.layer[i];\r\n\r\n        var layerData = new LayerData({\r\n            name: layer.name,\r\n            width: layer.width,\r\n            height: layer.height,\r\n            tileWidth: layer.tilesize,\r\n            tileHeight: layer.tilesize,\r\n            visible: layer.visible === 1\r\n        });\r\n\r\n        var row = [];\r\n        var tileGrid = [];\r\n\r\n        //  Loop through the data field in the JSON. This is a 2D array containing the tile indexes,\r\n        //  one after the other. The indexes are relative to the tileset that contains the tile.\r\n        for (var y = 0; y < layer.data.length; y++)\r\n        {\r\n            for (var x = 0; x < layer.data[y].length; x++)\r\n            {\r\n                // In Weltmeister, 0 = no tile, but the Tilemap API expects -1 = no tile.\r\n                var index = layer.data[y][x] - 1;\r\n\r\n                var tile;\r\n\r\n                if (index > -1)\r\n                {\r\n                    tile = new Tile(layerData, index, x, y, layer.tilesize, layer.tilesize);\r\n                }\r\n                else\r\n                {\r\n                    tile = insertNull\r\n                        ? null\r\n                        : new Tile(layerData, -1, x, y, layer.tilesize, layer.tilesize);\r\n                }\r\n\r\n                row.push(tile);\r\n            }\r\n\r\n            tileGrid.push(row);\r\n            row = [];\r\n        }\r\n\r\n        layerData.data = tileGrid;\r\n\r\n        tileLayers.push(layerData);\r\n    }\r\n\r\n    return tileLayers;\r\n};\r\n\r\nmodule.exports = ParseTileLayers;\r\n"]},"metadata":{},"sourceType":"script"}