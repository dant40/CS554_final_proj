{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CONST = require('./const');\n\nvar CustomSet = require('../structs/Set');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar FileTypesManager = require('./FileTypesManager');\n\nvar GetFastValue = require('../utils/object/GetFastValue');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar XHRSettings = require('./XHRSettings');\n/**\r\n * @classdesc\r\n * The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\r\n * You typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\r\n * called before the Scenes `create` method, allowing you to preload assets that the Scene may need.\r\n *\r\n * If you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\r\n * yourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\r\n *\r\n * The Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\r\n * Files are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\r\n *\r\n * Once the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\r\n * event, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\r\n * simply adding a new file to it, while running, will ensure it's added into the current queue.\r\n *\r\n * Every Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\r\n * assets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\r\n * file inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\r\n * for loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\r\n * in your game.\r\n *\r\n * The Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\r\n * when it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\r\n * See those files for more details.\r\n *\r\n * @class LoaderPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Loader instance.\r\n */\n\n\nvar LoaderPlugin = new Class({\n  Extends: EventEmitter,\n  initialize: function LoaderPlugin(scene) {\n    EventEmitter.call(this);\n    var gameConfig = scene.sys.game.config;\n    var sceneConfig = scene.sys.settings.loader;\n    /**\r\n     * The Scene which owns this Loader instance.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene Systems.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * A reference to the global Cache Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#cacheManager\r\n     * @type {Phaser.Cache.CacheManager}\r\n     * @since 3.7.0\r\n     */\n\n    this.cacheManager = scene.sys.cache;\n    /**\r\n     * A reference to the global Texture Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#textureManager\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @since 3.7.0\r\n     */\n\n    this.textureManager = scene.sys.textures;\n    /**\r\n     * A reference to the global Scene Manager.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#sceneManager\r\n     * @type {Phaser.Scenes.SceneManager}\r\n     * @protected\r\n     * @since 3.16.0\r\n     */\n\n    this.sceneManager = scene.sys.game.scene; //  Inject the available filetypes into the Loader\n\n    FileTypesManager.install(this);\n    /**\r\n     * An optional prefix that is automatically prepended to the start of every file key.\r\n     * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n     * You can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\r\n     * from that point on. It does _not_ change any file already in the load queue.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#prefix\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.7.0\r\n     */\n\n    this.prefix = '';\n    /**\r\n     * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n     *\r\n     * ```javascript\r\n     * this.load.path = \"images/sprites/\";\r\n     * this.load.image(\"ball\", \"ball.png\");\r\n     * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n     * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n     * ```\r\n     *\r\n     * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n     * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n     * given as it's an absolute URL.\r\n     *\r\n     * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n     *\r\n     * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#path\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.path = '';\n    /**\r\n     * If you want to append a URL before the path of any asset you can set this here.\r\n     * \r\n     * Useful if allowing the asset base url to be configured outside of the game code.\r\n     * \r\n     * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#baseURL\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.baseURL = '';\n    this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\n    this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\n    this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\n    /**\r\n     * The number of concurrent / parallel resources to try and fetch at once.\r\n     *\r\n     * Old browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\r\n     *\r\n     * The default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#maxParallelDownloads\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.maxParallelDownloads = GetFastValue(sceneConfig, 'maxParallelDownloads', gameConfig.loaderMaxParallelDownloads);\n    /**\r\n     * xhr specific global settings (can be overridden on a per-file basis)\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#xhr\r\n     * @type {Phaser.Types.Loader.XHRSettingsObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.xhr = XHRSettings(GetFastValue(sceneConfig, 'responseType', gameConfig.loaderResponseType), GetFastValue(sceneConfig, 'async', gameConfig.loaderAsync), GetFastValue(sceneConfig, 'user', gameConfig.loaderUser), GetFastValue(sceneConfig, 'password', gameConfig.loaderPassword), GetFastValue(sceneConfig, 'timeout', gameConfig.loaderTimeout));\n    /**\r\n     * The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#crossOrigin\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.crossOrigin = GetFastValue(sceneConfig, 'crossOrigin', gameConfig.loaderCrossOrigin);\n    /**\r\n     * The total number of files to load. It may not always be accurate because you may add to the Loader during the process\r\n     * of loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalToLoad\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalToLoad = 0;\n    /**\r\n     * The progress of the current load queue, as a float value between 0 and 1.\r\n     * This is updated automatically as files complete loading.\r\n     * Note that it is possible for this value to go down again if you add content to the current load queue during a load.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#progress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Files are placed in this Set when they're added to the Loader via `addFile`.\r\n     * \r\n     * They are moved to the `inflight` Set when they start loading, and assuming a successful\r\n     * load, to the `queue` Set for further processing.\r\n     *\r\n     * By the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#list\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.list = new CustomSet();\n    /**\r\n     * Files are stored in this Set while they're in the process of being loaded.\r\n     * \r\n     * Upon a successful load they are moved to the `queue` Set.\r\n     * \r\n     * By the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#inflight\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.inflight = new CustomSet();\n    /**\r\n     * Files are stored in this Set while they're being processed.\r\n     * \r\n     * If the process is successful they are moved to their final destination, which could be\r\n     * a Cache or the Texture Manager.\r\n     * \r\n     * At the end of the load process this Set will be empty.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#queue\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @since 3.0.0\r\n     */\n\n    this.queue = new CustomSet();\n    /**\r\n     * A temporary Set in which files are stored after processing,\r\n     * awaiting destruction at the end of the load process.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#_deleteQueue\r\n     * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n     * @private\r\n     * @since 3.7.0\r\n     */\n\n    this._deleteQueue = new CustomSet();\n    /**\r\n     * The total number of files that failed to load during the most recent load.\r\n     * This value is reset when you call `Loader.start`.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalFailed\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.totalFailed = 0;\n    /**\r\n     * The total number of files that successfully loaded during the most recent load.\r\n     * This value is reset when you call `Loader.start`.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#totalComplete\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.totalComplete = 0;\n    /**\r\n     * The current state of the Loader.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#state\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.state = CONST.LOADER_IDLE;\n    /**\r\n     * The current index being used by multi-file loaders to avoid key clashes.\r\n     *\r\n     * @name Phaser.Loader.LoaderPlugin#multiKeyIndex\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.20.0\r\n     */\n\n    this.multiKeyIndex = 0;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.pluginStart, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#pluginStart\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  pluginStart: function () {\n    this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * If you want to append a URL before the path of any asset you can set this here.\r\n   * \r\n   * Useful if allowing the asset base url to be configured outside of the game code.\r\n   * \r\n   * Once a base URL is set it will affect every file loaded by the Loader from that point on. It does _not_ change any\r\n   * file _already_ being loaded. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setBaseURL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [url] - The URL to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setBaseURL: function (url) {\n    if (url === undefined) {\n      url = '';\n    }\n\n    if (url !== '' && url.substr(-1) !== '/') {\n      url = url.concat('/');\n    }\n\n    this.baseURL = url;\n    return this;\n  },\n\n  /**\r\n   * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n   *\r\n   * ```javascript\r\n   * this.load.setPath(\"images/sprites/\");\r\n   * this.load.image(\"ball\", \"ball.png\");\r\n   * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n   * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n   * ```\r\n   *\r\n   * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n   * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n   * given as it's an absolute URL.\r\n   *\r\n   * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n   * \r\n   * Once a path is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n   * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setPath\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [path] - The path to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setPath: function (path) {\n    if (path === undefined) {\n      path = '';\n    }\n\n    if (path !== '' && path.substr(-1) !== '/') {\n      path = path.concat('/');\n    }\n\n    this.path = path;\n    return this;\n  },\n\n  /**\r\n   * An optional prefix that is automatically prepended to the start of every file key.\r\n   * \r\n   * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n   * \r\n   * Once a prefix is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n   * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setPrefix\r\n   * @since 3.7.0\r\n   *\r\n   * @param {string} [prefix] - The prefix to use. Leave empty to reset.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setPrefix: function (prefix) {\n    if (prefix === undefined) {\n      prefix = '';\n    }\n\n    this.prefix = prefix;\n    return this;\n  },\n\n  /**\r\n   * Sets the Cross Origin Resource Sharing value used when loading files.\r\n   * \r\n   * Files can override this value on a per-file basis by specifying an alternative `crossOrigin` value in their file config.\r\n   * \r\n   * Once CORs is set it will then affect every file loaded by the Loader from that point on, as long as they don't have\r\n   * their own CORs setting. To reset it, call this method with no arguments.\r\n   *\r\n   * For more details about CORs see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#setCORS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [crossOrigin] - The value to use for the `crossOrigin` property in the load request.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n   */\n  setCORS: function (crossOrigin) {\n    this.crossOrigin = crossOrigin;\n    return this;\n  },\n\n  /**\r\n   * Adds a file, or array of files, into the load queue.\r\n   *\r\n   * The file must be an instance of `Phaser.Loader.File`, or a class that extends it. The Loader will check that the key\r\n   * used by the file won't conflict with any other key either in the loader, the inflight queue or the target cache.\r\n   * If allowed it will then add the file into the pending list, read for the load to start. Or, if the load has already\r\n   * started, ready for the next batch of files to be pulled from the list to the inflight queue.\r\n   *\r\n   * You should not normally call this method directly, but rather use one of the Loader methods like `image` or `atlas`,\r\n   * however you can call this as long as the file given to it is well formed.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#addFile\r\n   * @fires Phaser.Loader.Events#ADD\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Loader.File|Phaser.Loader.File[])} file - The file, or array of files, to be added to the load queue.\r\n   */\n  addFile: function (file) {\n    if (!Array.isArray(file)) {\n      file = [file];\n    }\n\n    for (var i = 0; i < file.length; i++) {\n      var item = file[i]; //  Does the file already exist in the cache or texture manager?\n      //  Or will it conflict with a file already in the queue or inflight?\n\n      if (!this.keyExists(item)) {\n        this.list.set(item);\n        this.emit(Events.ADD, item.key, item.type, this, item);\n\n        if (this.isLoading()) {\n          this.totalToLoad++;\n          this.updateProgress();\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Checks the key and type of the given file to see if it will conflict with anything already\r\n   * in a Cache, the Texture Manager, or the list or inflight queues.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#keyExists\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The file to check the key of.\r\n   *\r\n   * @return {boolean} `true` if adding this file will cause a cache or queue conflict, otherwise `false`.\r\n   */\n  keyExists: function (file) {\n    var keyConflict = file.hasCacheConflict();\n\n    if (!keyConflict) {\n      this.list.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n    }\n\n    if (!keyConflict && this.isLoading()) {\n      this.inflight.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n      this.queue.iterate(function (item) {\n        if (item.type === file.type && item.key === file.key) {\n          keyConflict = true;\n          return false;\n        }\n      });\n    }\n\n    return keyConflict;\n  },\n\n  /**\r\n   * Takes a well formed, fully parsed pack file object and adds its entries into the load queue. Usually you do not call\r\n   * this method directly, but instead use `Loader.pack` and supply a path to a JSON file that holds the\r\n   * pack data. However, if you've got the data prepared you can pass it to this method.\r\n   *\r\n   * You can also provide an optional key. If you do then it will only add the entries from that part of the pack into\r\n   * to the load queue. If not specified it will add all entries it finds. For more details about the pack file format\r\n   * see the `LoaderPlugin.pack` method.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#addPack\r\n   * @since 3.7.0\r\n   *\r\n   * @param {any} data - The Pack File data to be parsed and each entry of it to added to the load queue.\r\n   * @param {string} [packKey] - An optional key to use from the pack file data.\r\n   *\r\n   * @return {boolean} `true` if any files were added to the queue, otherwise `false`.\r\n   */\n  addPack: function (pack, packKey) {\n    //  if no packKey provided we'll add everything to the queue\n    if (packKey && pack.hasOwnProperty(packKey)) {\n      pack = {\n        packKey: pack[packKey]\n      };\n    }\n\n    var total = 0; //  Store the loader settings in case this pack replaces them\n\n    var currentBaseURL = this.baseURL;\n    var currentPath = this.path;\n    var currentPrefix = this.prefix; //  Here we go ...\n\n    for (var key in pack) {\n      var config = pack[key]; //  Any meta data to process?\n\n      var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\n      var path = GetFastValue(config, 'path', currentPath);\n      var prefix = GetFastValue(config, 'prefix', currentPrefix);\n      var files = GetFastValue(config, 'files', null);\n      var defaultType = GetFastValue(config, 'defaultType', 'void');\n\n      if (Array.isArray(files)) {\n        this.setBaseURL(baseURL);\n        this.setPath(path);\n        this.setPrefix(prefix);\n\n        for (var i = 0; i < files.length; i++) {\n          var file = files[i];\n          var type = file.hasOwnProperty('type') ? file.type : defaultType;\n\n          if (this[type]) {\n            this[type](file);\n            total++;\n          }\n        }\n      }\n    } //  Reset the loader settings\n\n\n    this.setBaseURL(currentBaseURL);\n    this.setPath(currentPath);\n    this.setPrefix(currentPrefix);\n    return total > 0;\n  },\n\n  /**\r\n   * Is the Loader actively loading, or processing loaded files?\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#isLoading\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Loader is busy loading or processing, otherwise `false`.\r\n   */\n  isLoading: function () {\n    return this.state === CONST.LOADER_LOADING || this.state === CONST.LOADER_PROCESSING;\n  },\n\n  /**\r\n   * Is the Loader ready to start a new load?\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#isReady\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Loader is ready to start a new load, otherwise `false`.\r\n   */\n  isReady: function () {\n    return this.state === CONST.LOADER_IDLE || this.state === CONST.LOADER_COMPLETE;\n  },\n\n  /**\r\n   * Starts the Loader running. This will reset the progress and totals and then emit a `start` event.\r\n   * If there is nothing in the queue the Loader will immediately complete, otherwise it will start\r\n   * loading the first batch of files.\r\n   *\r\n   * The Loader is started automatically if the queue is populated within your Scenes `preload` method.\r\n   *\r\n   * However, outside of this, you need to call this method to start it.\r\n   *\r\n   * If the Loader is already running this method will simply return.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#start\r\n   * @fires Phaser.Loader.Events#START\r\n   * @since 3.0.0\r\n   */\n  start: function () {\n    if (!this.isReady()) {\n      return;\n    }\n\n    this.progress = 0;\n    this.totalFailed = 0;\n    this.totalComplete = 0;\n    this.totalToLoad = this.list.size;\n    this.emit(Events.START, this);\n\n    if (this.list.size === 0) {\n      this.loadComplete();\n    } else {\n      this.state = CONST.LOADER_LOADING;\n      this.inflight.clear();\n      this.queue.clear();\n      this.updateProgress();\n      this.checkLoadQueue();\n      this.systems.events.on(SceneEvents.UPDATE, this.update, this);\n    }\n  },\n\n  /**\r\n   * Called automatically during the load process.\r\n   * It updates the `progress` value and then emits a progress event, which you can use to\r\n   * display a loading bar in your game.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#updateProgress\r\n   * @fires Phaser.Loader.Events#PROGRESS\r\n   * @since 3.0.0\r\n   */\n  updateProgress: function () {\n    this.progress = 1 - (this.list.size + this.inflight.size) / this.totalToLoad;\n    this.emit(Events.PROGRESS, this.progress);\n  },\n\n  /**\r\n   * Called automatically during the load process.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#update\r\n   * @since 3.10.0\r\n   */\n  update: function () {\n    if (this.state === CONST.LOADER_LOADING && this.list.size > 0 && this.inflight.size < this.maxParallelDownloads) {\n      this.checkLoadQueue();\n    }\n  },\n\n  /**\r\n   * An internal method called by the Loader.\r\n   * \r\n   * It will check to see if there are any more files in the pending list that need loading, and if so it will move\r\n   * them from the list Set into the inflight Set, set their CORs flag and start them loading.\r\n   * \r\n   * It will carrying on doing this for each file in the pending list until it runs out, or hits the max allowed parallel downloads.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#checkLoadQueue\r\n   * @private\r\n   * @since 3.7.0\r\n   */\n  checkLoadQueue: function () {\n    this.list.each(function (file) {\n      if (file.state === CONST.FILE_POPULATED || file.state === CONST.FILE_PENDING && this.inflight.size < this.maxParallelDownloads) {\n        this.inflight.set(file);\n        this.list.delete(file); //  If the file doesn't have its own crossOrigin set, we'll use the Loaders (which is undefined by default)\n\n        if (!file.crossOrigin) {\n          file.crossOrigin = this.crossOrigin;\n        }\n\n        file.load();\n      }\n\n      if (this.inflight.size === this.maxParallelDownloads) {\n        //  Tells the Set iterator to abort\n        return false;\n      }\n    }, this);\n  },\n\n  /**\r\n   * An internal method called automatically by the XHRLoader belong to a File.\r\n   * \r\n   * This method will remove the given file from the inflight Set and update the load progress.\r\n   * If the file was successful its `onProcess` method is called, otherwise it is added to the delete queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#nextFile\r\n   * @fires Phaser.Loader.Events#FILE_LOAD\r\n   * @fires Phaser.Loader.Events#FILE_LOAD_ERROR\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that just finished loading, or errored during load.\r\n   * @param {boolean} success - `true` if the file loaded successfully, otherwise `false`.\r\n   */\n  nextFile: function (file, success) {\n    //  Has the game been destroyed during load? If so, bail out now.\n    if (!this.inflight) {\n      return;\n    }\n\n    this.inflight.delete(file);\n    this.updateProgress();\n\n    if (success) {\n      this.totalComplete++;\n      this.queue.set(file);\n      this.emit(Events.FILE_LOAD, file);\n      file.onProcess();\n    } else {\n      this.totalFailed++;\n\n      this._deleteQueue.set(file);\n\n      this.emit(Events.FILE_LOAD_ERROR, file);\n      this.fileProcessComplete(file);\n    }\n  },\n\n  /**\r\n   * An internal method that is called automatically by the File when it has finished processing.\r\n   *\r\n   * If the process was successful, and the File isn't part of a MultiFile, its `addToCache` method is called.\r\n   *\r\n   * It this then removed from the queue. If there are no more files to load `loadComplete` is called.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#fileProcessComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The file that has finished processing.\r\n   */\n  fileProcessComplete: function (file) {\n    //  Has the game been destroyed during load? If so, bail out now.\n    if (!this.scene || !this.systems || !this.systems.game || this.systems.game.pendingDestroy) {\n      return;\n    } //  This file has failed, so move it to the failed Set\n\n\n    if (file.state === CONST.FILE_ERRORED) {\n      if (file.multiFile) {\n        file.multiFile.onFileFailed(file);\n      }\n    } else if (file.state === CONST.FILE_COMPLETE) {\n      if (file.multiFile) {\n        if (file.multiFile.isReadyToProcess()) {\n          //  If we got here then all files the link file needs are ready to add to the cache\n          file.multiFile.addToCache();\n        }\n      } else {\n        //  If we got here, then the file processed, so let it add itself to its cache\n        file.addToCache();\n      }\n    } //  Remove it from the queue\n\n\n    this.queue.delete(file); //  Nothing left to do?\n\n    if (this.list.size === 0 && this.inflight.size === 0 && this.queue.size === 0) {\n      this.loadComplete();\n    }\n  },\n\n  /**\r\n   * Called at the end when the load queue is exhausted and all files have either loaded or errored.\r\n   * By this point every loaded file will now be in its associated cache and ready for use.\r\n   *\r\n   * Also clears down the Sets, puts progress to 1 and clears the deletion queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#loadComplete\r\n   * @fires Phaser.Loader.Events#COMPLETE\r\n   * @fires Phaser.Loader.Events#POST_PROCESS\r\n   * @since 3.7.0\r\n   */\n  loadComplete: function () {\n    this.emit(Events.POST_PROCESS, this);\n    this.list.clear();\n    this.inflight.clear();\n    this.queue.clear();\n    this.progress = 1;\n    this.state = CONST.LOADER_COMPLETE;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this); //  Call 'destroy' on each file ready for deletion\n\n    this._deleteQueue.iterateLocal('destroy');\n\n    this._deleteQueue.clear();\n\n    this.emit(Events.COMPLETE, this, this.totalComplete, this.totalFailed);\n  },\n\n  /**\r\n   * Adds a File into the pending-deletion queue.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#flagForRemoval\r\n   * @since 3.7.0\r\n   * \r\n   * @param {Phaser.Loader.File} file - The File to be queued for deletion when the Loader completes.\r\n   */\n  flagForRemoval: function (file) {\n    this._deleteQueue.set(file);\n  },\n\n  /**\r\n   * Converts the given JSON data into a file that the browser then prompts you to download so you can save it locally.\r\n   *\r\n   * The data must be well formed JSON and ready-parsed, not a JavaScript object.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#saveJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} data - The JSON data, ready parsed.\r\n   * @param {string} [filename=file.json] - The name to save the JSON file as.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n   */\n  saveJSON: function (data, filename) {\n    return this.save(JSON.stringify(data), filename);\n  },\n\n  /**\r\n   * Causes the browser to save the given data as a file to its default Downloads folder.\r\n   * \r\n   * Creates a DOM level anchor link, assigns it as being a `download` anchor, sets the href\r\n   * to be an ObjectURL based on the given data, and then invokes a click event.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#save\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} data - The data to be saved. Will be passed through URL.createObjectURL.\r\n   * @param {string} [filename=file.json] - The filename to save the file as.\r\n   * @param {string} [filetype=application/json] - The file type to use when saving the file. Defaults to JSON.\r\n   *\r\n   * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n   */\n  save: function (data, filename, filetype) {\n    if (filename === undefined) {\n      filename = 'file.json';\n    }\n\n    if (filetype === undefined) {\n      filetype = 'application/json';\n    }\n\n    var blob = new Blob([data], {\n      type: filetype\n    });\n    var url = URL.createObjectURL(blob);\n    var a = document.createElement('a');\n    a.download = filename;\n    a.textContent = 'Download ' + filename;\n    a.href = url;\n    a.click();\n    return this;\n  },\n\n  /**\r\n   * Resets the Loader.\r\n   *\r\n   * This will clear all lists and reset the base URL, path and prefix.\r\n   *\r\n   * Warning: If the Loader is currently downloading files, or has files in its queue, they will be aborted.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#reset\r\n   * @since 3.0.0\r\n   */\n  reset: function () {\n    this.list.clear();\n    this.inflight.clear();\n    this.queue.clear();\n    var gameConfig = this.systems.game.config;\n    var sceneConfig = this.systems.settings.loader;\n    this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\n    this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\n    this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\n    this.state = CONST.LOADER_IDLE;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    this.reset();\n    this.state = CONST.LOADER_SHUTDOWN;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this);\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Loader.LoaderPlugin#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.state = CONST.LOADER_DESTROYED;\n    this.systems.events.off(SceneEvents.UPDATE, this.update, this);\n    this.systems.events.off(SceneEvents.START, this.pluginStart, this);\n    this.list = null;\n    this.inflight = null;\n    this.queue = null;\n    this.scene = null;\n    this.systems = null;\n    this.textureManager = null;\n    this.cacheManager = null;\n    this.sceneManager = null;\n  }\n});\nPluginCache.register('Loader', LoaderPlugin, 'load');\nmodule.exports = LoaderPlugin;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/LoaderPlugin.js"],"names":["Class","require","CONST","CustomSet","EventEmitter","Events","FileTypesManager","GetFastValue","PluginCache","SceneEvents","XHRSettings","LoaderPlugin","Extends","initialize","scene","call","gameConfig","sys","game","config","sceneConfig","settings","loader","systems","cacheManager","cache","textureManager","textures","sceneManager","install","prefix","path","baseURL","setBaseURL","loaderBaseURL","setPath","loaderPath","setPrefix","loaderPrefix","maxParallelDownloads","loaderMaxParallelDownloads","xhr","loaderResponseType","loaderAsync","loaderUser","loaderPassword","loaderTimeout","crossOrigin","loaderCrossOrigin","totalToLoad","progress","list","inflight","queue","_deleteQueue","totalFailed","totalComplete","state","LOADER_IDLE","multiKeyIndex","events","once","BOOT","boot","on","START","pluginStart","DESTROY","destroy","SHUTDOWN","shutdown","url","undefined","substr","concat","setCORS","addFile","file","Array","isArray","i","length","item","keyExists","set","emit","ADD","key","type","isLoading","updateProgress","keyConflict","hasCacheConflict","iterate","addPack","pack","packKey","hasOwnProperty","total","currentBaseURL","currentPath","currentPrefix","files","defaultType","LOADER_LOADING","LOADER_PROCESSING","isReady","LOADER_COMPLETE","start","size","loadComplete","clear","checkLoadQueue","UPDATE","update","PROGRESS","each","FILE_POPULATED","FILE_PENDING","delete","load","nextFile","success","FILE_LOAD","onProcess","FILE_LOAD_ERROR","fileProcessComplete","pendingDestroy","FILE_ERRORED","multiFile","onFileFailed","FILE_COMPLETE","isReadyToProcess","addToCache","POST_PROCESS","off","iterateLocal","COMPLETE","flagForRemoval","saveJSON","data","filename","save","JSON","stringify","filetype","blob","Blob","URL","createObjectURL","a","document","createElement","download","textContent","href","click","reset","LOADER_SHUTDOWN","LOADER_DESTROYED","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar CustomSet = require('../structs/Set');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar FileTypesManager = require('./FileTypesManager');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * @classdesc\r\n * The Loader handles loading all external content such as Images, Sounds, Texture Atlases and data files.\r\n * You typically interact with it via `this.load` in your Scene. Scenes can have a `preload` method, which is always\r\n * called before the Scenes `create` method, allowing you to preload assets that the Scene may need.\r\n *\r\n * If you call any `this.load` methods from outside of `Scene.preload` then you need to start the Loader going\r\n * yourself by calling `Loader.start()`. It's only automatically started during the Scene preload.\r\n *\r\n * The Loader uses a combination of tag loading (eg. Audio elements) and XHR and provides progress and completion events.\r\n * Files are loaded in parallel by default. The amount of concurrent connections can be controlled in your Game Configuration.\r\n *\r\n * Once the Loader has started loading you are still able to add files to it. These can be injected as a result of a loader\r\n * event, the type of file being loaded (such as a pack file) or other external events. As long as the Loader hasn't finished\r\n * simply adding a new file to it, while running, will ensure it's added into the current queue.\r\n *\r\n * Every Scene has its own instance of the Loader and they are bound to the Scene in which they are created. However,\r\n * assets loaded by the Loader are placed into global game-level caches. For example, loading an XML file will place that\r\n * file inside `Game.cache.xml`, which is accessible from every Scene in your game, no matter who was responsible\r\n * for loading it. The same is true of Textures. A texture loaded in one Scene is instantly available to all other Scenes\r\n * in your game.\r\n *\r\n * The Loader works by using custom File Types. These are stored in the FileTypesManager, which injects them into the Loader\r\n * when it's instantiated. You can create your own custom file types by extending either the File or MultiFile classes.\r\n * See those files for more details.\r\n *\r\n * @class LoaderPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Loader instance.\r\n */\r\nvar LoaderPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function LoaderPlugin (scene)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        var gameConfig = scene.sys.game.config;\r\n        var sceneConfig = scene.sys.settings.loader;\r\n\r\n        /**\r\n         * The Scene which owns this Loader instance.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A reference to the global Cache Manager.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#cacheManager\r\n         * @type {Phaser.Cache.CacheManager}\r\n         * @since 3.7.0\r\n         */\r\n        this.cacheManager = scene.sys.cache;\r\n\r\n        /**\r\n         * A reference to the global Texture Manager.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.7.0\r\n         */\r\n        this.textureManager = scene.sys.textures;\r\n\r\n        /**\r\n         * A reference to the global Scene Manager.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#sceneManager\r\n         * @type {Phaser.Scenes.SceneManager}\r\n         * @protected\r\n         * @since 3.16.0\r\n         */\r\n        this.sceneManager = scene.sys.game.scene;\r\n\r\n        //  Inject the available filetypes into the Loader\r\n        FileTypesManager.install(this);\r\n\r\n        /**\r\n         * An optional prefix that is automatically prepended to the start of every file key.\r\n         * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n         * You can set this directly, or call `Loader.setPrefix()`. It will then affect every file added to the Loader\r\n         * from that point on. It does _not_ change any file already in the load queue.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#prefix\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.7.0\r\n         */\r\n        this.prefix = '';\r\n\r\n        /**\r\n         * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n         *\r\n         * ```javascript\r\n         * this.load.path = \"images/sprites/\";\r\n         * this.load.image(\"ball\", \"ball.png\");\r\n         * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n         * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n         * ```\r\n         *\r\n         * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n         * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n         * given as it's an absolute URL.\r\n         *\r\n         * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n         *\r\n         * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setPath()` and it'll do it for you.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#path\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.path = '';\r\n\r\n        /**\r\n         * If you want to append a URL before the path of any asset you can set this here.\r\n         * \r\n         * Useful if allowing the asset base url to be configured outside of the game code.\r\n         * \r\n         * If you set this property directly then it _must_ end with a \"/\". Alternatively, call `setBaseURL()` and it'll do it for you.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#baseURL\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.baseURL = '';\r\n\r\n        this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\r\n\r\n        this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\r\n\r\n        this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\r\n\r\n        /**\r\n         * The number of concurrent / parallel resources to try and fetch at once.\r\n         *\r\n         * Old browsers limit 6 requests per domain; modern ones, especially those with HTTP/2 don't limit it at all.\r\n         *\r\n         * The default is 32 but you can change this in your Game Config, or by changing this property before the Loader starts.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#maxParallelDownloads\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.maxParallelDownloads = GetFastValue(sceneConfig, 'maxParallelDownloads', gameConfig.loaderMaxParallelDownloads);\r\n\r\n        /**\r\n         * xhr specific global settings (can be overridden on a per-file basis)\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#xhr\r\n         * @type {Phaser.Types.Loader.XHRSettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhr = XHRSettings(\r\n            GetFastValue(sceneConfig, 'responseType', gameConfig.loaderResponseType),\r\n            GetFastValue(sceneConfig, 'async', gameConfig.loaderAsync),\r\n            GetFastValue(sceneConfig, 'user', gameConfig.loaderUser),\r\n            GetFastValue(sceneConfig, 'password', gameConfig.loaderPassword),\r\n            GetFastValue(sceneConfig, 'timeout', gameConfig.loaderTimeout)\r\n        );\r\n\r\n        /**\r\n         * The crossOrigin value applied to loaded images. Very often this needs to be set to 'anonymous'.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#crossOrigin\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.crossOrigin = GetFastValue(sceneConfig, 'crossOrigin', gameConfig.loaderCrossOrigin);\r\n\r\n        /**\r\n         * The total number of files to load. It may not always be accurate because you may add to the Loader during the process\r\n         * of loading, especially if you load a Pack File. Therefore this value can change, but in most cases remains static.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalToLoad\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalToLoad = 0;\r\n\r\n        /**\r\n         * The progress of the current load queue, as a float value between 0 and 1.\r\n         * This is updated automatically as files complete loading.\r\n         * Note that it is possible for this value to go down again if you add content to the current load queue during a load.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#progress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Files are placed in this Set when they're added to the Loader via `addFile`.\r\n         * \r\n         * They are moved to the `inflight` Set when they start loading, and assuming a successful\r\n         * load, to the `queue` Set for further processing.\r\n         *\r\n         * By the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#list\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.list = new CustomSet();\r\n\r\n        /**\r\n         * Files are stored in this Set while they're in the process of being loaded.\r\n         * \r\n         * Upon a successful load they are moved to the `queue` Set.\r\n         * \r\n         * By the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#inflight\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.inflight = new CustomSet();\r\n\r\n        /**\r\n         * Files are stored in this Set while they're being processed.\r\n         * \r\n         * If the process is successful they are moved to their final destination, which could be\r\n         * a Cache or the Texture Manager.\r\n         * \r\n         * At the end of the load process this Set will be empty.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#queue\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @since 3.0.0\r\n         */\r\n        this.queue = new CustomSet();\r\n\r\n        /**\r\n         * A temporary Set in which files are stored after processing,\r\n         * awaiting destruction at the end of the load process.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#_deleteQueue\r\n         * @type {Phaser.Structs.Set.<Phaser.Loader.File>}\r\n         * @private\r\n         * @since 3.7.0\r\n         */\r\n        this._deleteQueue = new CustomSet();\r\n\r\n        /**\r\n         * The total number of files that failed to load during the most recent load.\r\n         * This value is reset when you call `Loader.start`.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalFailed\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.totalFailed = 0;\r\n\r\n        /**\r\n         * The total number of files that successfully loaded during the most recent load.\r\n         * This value is reset when you call `Loader.start`.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#totalComplete\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.totalComplete = 0;\r\n\r\n        /**\r\n         * The current state of the Loader.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#state\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.state = CONST.LOADER_IDLE;\r\n\r\n        /**\r\n         * The current index being used by multi-file loaders to avoid key clashes.\r\n         *\r\n         * @name Phaser.Loader.LoaderPlugin#multiKeyIndex\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.20.0\r\n         */\r\n        this.multiKeyIndex = 0;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.pluginStart, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#pluginStart\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    pluginStart: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * If you want to append a URL before the path of any asset you can set this here.\r\n     * \r\n     * Useful if allowing the asset base url to be configured outside of the game code.\r\n     * \r\n     * Once a base URL is set it will affect every file loaded by the Loader from that point on. It does _not_ change any\r\n     * file _already_ being loaded. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setBaseURL\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [url] - The URL to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setBaseURL: function (url)\r\n    {\r\n        if (url === undefined) { url = ''; }\r\n\r\n        if (url !== '' && url.substr(-1) !== '/')\r\n        {\r\n            url = url.concat('/');\r\n        }\r\n\r\n        this.baseURL = url;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The value of `path`, if set, is placed before any _relative_ file path given. For example:\r\n     *\r\n     * ```javascript\r\n     * this.load.setPath(\"images/sprites/\");\r\n     * this.load.image(\"ball\", \"ball.png\");\r\n     * this.load.image(\"tree\", \"level1/oaktree.png\");\r\n     * this.load.image(\"boom\", \"http://server.com/explode.png\");\r\n     * ```\r\n     *\r\n     * Would load the `ball` file from `images/sprites/ball.png` and the tree from\r\n     * `images/sprites/level1/oaktree.png` but the file `boom` would load from the URL\r\n     * given as it's an absolute URL.\r\n     *\r\n     * Please note that the path is added before the filename but *after* the baseURL (if set.)\r\n     * \r\n     * Once a path is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n     * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setPath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [path] - The path to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setPath: function (path)\r\n    {\r\n        if (path === undefined) { path = ''; }\r\n\r\n        if (path !== '' && path.substr(-1) !== '/')\r\n        {\r\n            path = path.concat('/');\r\n        }\r\n\r\n        this.path = path;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * An optional prefix that is automatically prepended to the start of every file key.\r\n     * \r\n     * If prefix was `MENU.` and you load an image with the key 'Background' the resulting key would be `MENU.Background`.\r\n     * \r\n     * Once a prefix is set it will then affect every file added to the Loader from that point on. It does _not_ change any\r\n     * file _already_ in the load queue. To reset it, call this method with no arguments.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setPrefix\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} [prefix] - The prefix to use. Leave empty to reset.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setPrefix: function (prefix)\r\n    {\r\n        if (prefix === undefined) { prefix = ''; }\r\n\r\n        this.prefix = prefix;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Cross Origin Resource Sharing value used when loading files.\r\n     * \r\n     * Files can override this value on a per-file basis by specifying an alternative `crossOrigin` value in their file config.\r\n     * \r\n     * Once CORs is set it will then affect every file loaded by the Loader from that point on, as long as they don't have\r\n     * their own CORs setting. To reset it, call this method with no arguments.\r\n     *\r\n     * For more details about CORs see https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#setCORS\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [crossOrigin] - The value to use for the `crossOrigin` property in the load request.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader object.\r\n     */\r\n    setCORS: function (crossOrigin)\r\n    {\r\n        this.crossOrigin = crossOrigin;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds a file, or array of files, into the load queue.\r\n     *\r\n     * The file must be an instance of `Phaser.Loader.File`, or a class that extends it. The Loader will check that the key\r\n     * used by the file won't conflict with any other key either in the loader, the inflight queue or the target cache.\r\n     * If allowed it will then add the file into the pending list, read for the load to start. Or, if the load has already\r\n     * started, ready for the next batch of files to be pulled from the list to the inflight queue.\r\n     *\r\n     * You should not normally call this method directly, but rather use one of the Loader methods like `image` or `atlas`,\r\n     * however you can call this as long as the file given to it is well formed.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#addFile\r\n     * @fires Phaser.Loader.Events#ADD\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Loader.File|Phaser.Loader.File[])} file - The file, or array of files, to be added to the load queue.\r\n     */\r\n    addFile: function (file)\r\n    {\r\n        if (!Array.isArray(file))\r\n        {\r\n            file = [ file ];\r\n        }\r\n\r\n        for (var i = 0; i < file.length; i++)\r\n        {\r\n            var item = file[i];\r\n\r\n            //  Does the file already exist in the cache or texture manager?\r\n            //  Or will it conflict with a file already in the queue or inflight?\r\n            if (!this.keyExists(item))\r\n            {\r\n                this.list.set(item);\r\n\r\n                this.emit(Events.ADD, item.key, item.type, this, item);\r\n\r\n                if (this.isLoading())\r\n                {\r\n                    this.totalToLoad++;\r\n                    this.updateProgress();\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks the key and type of the given file to see if it will conflict with anything already\r\n     * in a Cache, the Texture Manager, or the list or inflight queues.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#keyExists\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The file to check the key of.\r\n     *\r\n     * @return {boolean} `true` if adding this file will cause a cache or queue conflict, otherwise `false`.\r\n     */\r\n    keyExists: function (file)\r\n    {\r\n        var keyConflict = file.hasCacheConflict();\r\n\r\n        if (!keyConflict)\r\n        {\r\n            this.list.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        if (!keyConflict && this.isLoading())\r\n        {\r\n            this.inflight.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n\r\n            this.queue.iterate(function (item)\r\n            {\r\n                if (item.type === file.type && item.key === file.key)\r\n                {\r\n                    keyConflict = true;\r\n\r\n                    return false;\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        return keyConflict;\r\n    },\r\n\r\n    /**\r\n     * Takes a well formed, fully parsed pack file object and adds its entries into the load queue. Usually you do not call\r\n     * this method directly, but instead use `Loader.pack` and supply a path to a JSON file that holds the\r\n     * pack data. However, if you've got the data prepared you can pass it to this method.\r\n     *\r\n     * You can also provide an optional key. If you do then it will only add the entries from that part of the pack into\r\n     * to the load queue. If not specified it will add all entries it finds. For more details about the pack file format\r\n     * see the `LoaderPlugin.pack` method.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#addPack\r\n     * @since 3.7.0\r\n     *\r\n     * @param {any} data - The Pack File data to be parsed and each entry of it to added to the load queue.\r\n     * @param {string} [packKey] - An optional key to use from the pack file data.\r\n     *\r\n     * @return {boolean} `true` if any files were added to the queue, otherwise `false`.\r\n     */\r\n    addPack: function (pack, packKey)\r\n    {\r\n        //  if no packKey provided we'll add everything to the queue\r\n        if (packKey && pack.hasOwnProperty(packKey))\r\n        {\r\n            pack = { packKey: pack[packKey] };\r\n        }\r\n\r\n        var total = 0;\r\n\r\n        //  Store the loader settings in case this pack replaces them\r\n        var currentBaseURL = this.baseURL;\r\n        var currentPath = this.path;\r\n        var currentPrefix = this.prefix;\r\n\r\n        //  Here we go ...\r\n        for (var key in pack)\r\n        {\r\n            var config = pack[key];\r\n\r\n            //  Any meta data to process?\r\n            var baseURL = GetFastValue(config, 'baseURL', currentBaseURL);\r\n            var path = GetFastValue(config, 'path', currentPath);\r\n            var prefix = GetFastValue(config, 'prefix', currentPrefix);\r\n            var files = GetFastValue(config, 'files', null);\r\n            var defaultType = GetFastValue(config, 'defaultType', 'void');\r\n\r\n            if (Array.isArray(files))\r\n            {\r\n                this.setBaseURL(baseURL);\r\n                this.setPath(path);\r\n                this.setPrefix(prefix);\r\n\r\n                for (var i = 0; i < files.length; i++)\r\n                {\r\n                    var file = files[i];\r\n                    var type = (file.hasOwnProperty('type')) ? file.type : defaultType;\r\n\r\n                    if (this[type])\r\n                    {\r\n                        this[type](file);\r\n                        total++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //  Reset the loader settings\r\n        this.setBaseURL(currentBaseURL);\r\n        this.setPath(currentPath);\r\n        this.setPrefix(currentPrefix);\r\n\r\n        return (total > 0);\r\n    },\r\n\r\n    /**\r\n     * Is the Loader actively loading, or processing loaded files?\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#isLoading\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Loader is busy loading or processing, otherwise `false`.\r\n     */\r\n    isLoading: function ()\r\n    {\r\n        return (this.state === CONST.LOADER_LOADING || this.state === CONST.LOADER_PROCESSING);\r\n    },\r\n\r\n    /**\r\n     * Is the Loader ready to start a new load?\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#isReady\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Loader is ready to start a new load, otherwise `false`.\r\n     */\r\n    isReady: function ()\r\n    {\r\n        return (this.state === CONST.LOADER_IDLE || this.state === CONST.LOADER_COMPLETE);\r\n    },\r\n\r\n    /**\r\n     * Starts the Loader running. This will reset the progress and totals and then emit a `start` event.\r\n     * If there is nothing in the queue the Loader will immediately complete, otherwise it will start\r\n     * loading the first batch of files.\r\n     *\r\n     * The Loader is started automatically if the queue is populated within your Scenes `preload` method.\r\n     *\r\n     * However, outside of this, you need to call this method to start it.\r\n     *\r\n     * If the Loader is already running this method will simply return.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#start\r\n     * @fires Phaser.Loader.Events#START\r\n     * @since 3.0.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.isReady())\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.progress = 0;\r\n\r\n        this.totalFailed = 0;\r\n        this.totalComplete = 0;\r\n        this.totalToLoad = this.list.size;\r\n\r\n        this.emit(Events.START, this);\r\n\r\n        if (this.list.size === 0)\r\n        {\r\n            this.loadComplete();\r\n        }\r\n        else\r\n        {\r\n            this.state = CONST.LOADER_LOADING;\r\n\r\n            this.inflight.clear();\r\n            this.queue.clear();\r\n\r\n            this.updateProgress();\r\n\r\n            this.checkLoadQueue();\r\n\r\n            this.systems.events.on(SceneEvents.UPDATE, this.update, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically during the load process.\r\n     * It updates the `progress` value and then emits a progress event, which you can use to\r\n     * display a loading bar in your game.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#updateProgress\r\n     * @fires Phaser.Loader.Events#PROGRESS\r\n     * @since 3.0.0\r\n     */\r\n    updateProgress: function ()\r\n    {\r\n        this.progress = 1 - ((this.list.size + this.inflight.size) / this.totalToLoad);\r\n\r\n        this.emit(Events.PROGRESS, this.progress);\r\n    },\r\n\r\n    /**\r\n     * Called automatically during the load process.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#update\r\n     * @since 3.10.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this.state === CONST.LOADER_LOADING && this.list.size > 0 && this.inflight.size < this.maxParallelDownloads)\r\n        {\r\n            this.checkLoadQueue();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * An internal method called by the Loader.\r\n     * \r\n     * It will check to see if there are any more files in the pending list that need loading, and if so it will move\r\n     * them from the list Set into the inflight Set, set their CORs flag and start them loading.\r\n     * \r\n     * It will carrying on doing this for each file in the pending list until it runs out, or hits the max allowed parallel downloads.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#checkLoadQueue\r\n     * @private\r\n     * @since 3.7.0\r\n     */\r\n    checkLoadQueue: function ()\r\n    {\r\n        this.list.each(function (file)\r\n        {\r\n            if (file.state === CONST.FILE_POPULATED || (file.state === CONST.FILE_PENDING && this.inflight.size < this.maxParallelDownloads))\r\n            {\r\n                this.inflight.set(file);\r\n\r\n                this.list.delete(file);\r\n\r\n                //  If the file doesn't have its own crossOrigin set, we'll use the Loaders (which is undefined by default)\r\n                if (!file.crossOrigin)\r\n                {\r\n                    file.crossOrigin = this.crossOrigin;\r\n                }\r\n\r\n                file.load();\r\n            }\r\n\r\n            if (this.inflight.size === this.maxParallelDownloads)\r\n            {\r\n                //  Tells the Set iterator to abort\r\n                return false;\r\n            }\r\n\r\n        }, this);\r\n    },\r\n\r\n    /**\r\n     * An internal method called automatically by the XHRLoader belong to a File.\r\n     * \r\n     * This method will remove the given file from the inflight Set and update the load progress.\r\n     * If the file was successful its `onProcess` method is called, otherwise it is added to the delete queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#nextFile\r\n     * @fires Phaser.Loader.Events#FILE_LOAD\r\n     * @fires Phaser.Loader.Events#FILE_LOAD_ERROR\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that just finished loading, or errored during load.\r\n     * @param {boolean} success - `true` if the file loaded successfully, otherwise `false`.\r\n     */\r\n    nextFile: function (file, success)\r\n    {\r\n        //  Has the game been destroyed during load? If so, bail out now.\r\n        if (!this.inflight)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.inflight.delete(file);\r\n\r\n        this.updateProgress();\r\n\r\n        if (success)\r\n        {\r\n            this.totalComplete++;\r\n\r\n            this.queue.set(file);\r\n\r\n            this.emit(Events.FILE_LOAD, file);\r\n\r\n            file.onProcess();\r\n        }\r\n        else\r\n        {\r\n            this.totalFailed++;\r\n\r\n            this._deleteQueue.set(file);\r\n\r\n            this.emit(Events.FILE_LOAD_ERROR, file);\r\n\r\n            this.fileProcessComplete(file);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * An internal method that is called automatically by the File when it has finished processing.\r\n     *\r\n     * If the process was successful, and the File isn't part of a MultiFile, its `addToCache` method is called.\r\n     *\r\n     * It this then removed from the queue. If there are no more files to load `loadComplete` is called.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#fileProcessComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The file that has finished processing.\r\n     */\r\n    fileProcessComplete: function (file)\r\n    {\r\n        //  Has the game been destroyed during load? If so, bail out now.\r\n        if (!this.scene || !this.systems || !this.systems.game || this.systems.game.pendingDestroy)\r\n        {\r\n            return;\r\n        }\r\n\r\n        //  This file has failed, so move it to the failed Set\r\n        if (file.state === CONST.FILE_ERRORED)\r\n        {\r\n            if (file.multiFile)\r\n            {\r\n                file.multiFile.onFileFailed(file);\r\n            }\r\n        }\r\n        else if (file.state === CONST.FILE_COMPLETE)\r\n        {\r\n            if (file.multiFile)\r\n            {\r\n                if (file.multiFile.isReadyToProcess())\r\n                {\r\n                    //  If we got here then all files the link file needs are ready to add to the cache\r\n                    file.multiFile.addToCache();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  If we got here, then the file processed, so let it add itself to its cache\r\n                file.addToCache();\r\n            }\r\n        }\r\n\r\n        //  Remove it from the queue\r\n        this.queue.delete(file);\r\n\r\n        //  Nothing left to do?\r\n\r\n        if (this.list.size === 0 && this.inflight.size === 0 && this.queue.size === 0)\r\n        {\r\n            this.loadComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called at the end when the load queue is exhausted and all files have either loaded or errored.\r\n     * By this point every loaded file will now be in its associated cache and ready for use.\r\n     *\r\n     * Also clears down the Sets, puts progress to 1 and clears the deletion queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#loadComplete\r\n     * @fires Phaser.Loader.Events#COMPLETE\r\n     * @fires Phaser.Loader.Events#POST_PROCESS\r\n     * @since 3.7.0\r\n     */\r\n    loadComplete: function ()\r\n    {\r\n        this.emit(Events.POST_PROCESS, this);\r\n\r\n        this.list.clear();\r\n        this.inflight.clear();\r\n        this.queue.clear();\r\n\r\n        this.progress = 1;\r\n\r\n        this.state = CONST.LOADER_COMPLETE;\r\n\r\n        this.systems.events.off(SceneEvents.UPDATE, this.update, this);\r\n\r\n        //  Call 'destroy' on each file ready for deletion\r\n        this._deleteQueue.iterateLocal('destroy');\r\n\r\n        this._deleteQueue.clear();\r\n\r\n        this.emit(Events.COMPLETE, this, this.totalComplete, this.totalFailed);\r\n    },\r\n\r\n    /**\r\n     * Adds a File into the pending-deletion queue.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#flagForRemoval\r\n     * @since 3.7.0\r\n     * \r\n     * @param {Phaser.Loader.File} file - The File to be queued for deletion when the Loader completes.\r\n     */\r\n    flagForRemoval: function (file)\r\n    {\r\n        this._deleteQueue.set(file);\r\n    },\r\n\r\n    /**\r\n     * Converts the given JSON data into a file that the browser then prompts you to download so you can save it locally.\r\n     *\r\n     * The data must be well formed JSON and ready-parsed, not a JavaScript object.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#saveJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} data - The JSON data, ready parsed.\r\n     * @param {string} [filename=file.json] - The name to save the JSON file as.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n     */\r\n    saveJSON: function (data, filename)\r\n    {\r\n        return this.save(JSON.stringify(data), filename);\r\n    },\r\n\r\n    /**\r\n     * Causes the browser to save the given data as a file to its default Downloads folder.\r\n     * \r\n     * Creates a DOM level anchor link, assigns it as being a `download` anchor, sets the href\r\n     * to be an ObjectURL based on the given data, and then invokes a click event.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#save\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} data - The data to be saved. Will be passed through URL.createObjectURL.\r\n     * @param {string} [filename=file.json] - The filename to save the file as.\r\n     * @param {string} [filetype=application/json] - The file type to use when saving the file. Defaults to JSON.\r\n     *\r\n     * @return {Phaser.Loader.LoaderPlugin} This Loader plugin.\r\n     */\r\n    save: function (data, filename, filetype)\r\n    {\r\n        if (filename === undefined) { filename = 'file.json'; }\r\n        if (filetype === undefined) { filetype = 'application/json'; }\r\n\r\n        var blob = new Blob([ data ], { type: filetype });\r\n\r\n        var url = URL.createObjectURL(blob);\r\n\r\n        var a = document.createElement('a');\r\n\r\n        a.download = filename;\r\n        a.textContent = 'Download ' + filename;\r\n        a.href = url;\r\n        a.click();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the Loader.\r\n     *\r\n     * This will clear all lists and reset the base URL, path and prefix.\r\n     *\r\n     * Warning: If the Loader is currently downloading files, or has files in its queue, they will be aborted.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#reset\r\n     * @since 3.0.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.list.clear();\r\n        this.inflight.clear();\r\n        this.queue.clear();\r\n\r\n        var gameConfig = this.systems.game.config;\r\n        var sceneConfig = this.systems.settings.loader;\r\n\r\n        this.setBaseURL(GetFastValue(sceneConfig, 'baseURL', gameConfig.loaderBaseURL));\r\n        this.setPath(GetFastValue(sceneConfig, 'path', gameConfig.loaderPath));\r\n        this.setPrefix(GetFastValue(sceneConfig, 'prefix', gameConfig.loaderPrefix));\r\n\r\n        this.state = CONST.LOADER_IDLE;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.state = CONST.LOADER_SHUTDOWN;\r\n\r\n        this.systems.events.off(SceneEvents.UPDATE, this.update, this);\r\n        this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Loader.LoaderPlugin#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.state = CONST.LOADER_DESTROYED;\r\n\r\n        this.systems.events.off(SceneEvents.UPDATE, this.update, this);\r\n        this.systems.events.off(SceneEvents.START, this.pluginStart, this);\r\n\r\n        this.list = null;\r\n        this.inflight = null;\r\n        this.queue = null;\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n        this.textureManager = null;\r\n        this.cacheManager = null;\r\n        this.sceneManager = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('Loader', LoaderPlugin, 'load');\r\n\r\nmodule.exports = LoaderPlugin;\r\n"]},"metadata":{},"sourceType":"script"}