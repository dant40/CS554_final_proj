{"ast":null,"code":"/**\r\n * @author       Joachim Grill <joachim@codeandweb.com>\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 CodeAndWeb GmbH\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Bodies = require('./lib/factory/Bodies');\n\nvar Body = require('./lib/body/Body');\n\nvar Common = require('./lib/core/Common');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Vertices = require('./lib/geometry/Vertices');\n/**\r\n * Use PhysicsEditorParser.parseBody() to build a Matter body object, based on a physics data file\r\n * created and exported with PhysicsEditor (https://www.codeandweb.com/physicseditor).\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsEditorParser\r\n * @since 3.10.0\r\n */\n\n\nvar PhysicsEditorParser = {\n  /**\r\n   * Parses a body element exported by PhysicsEditor.\r\n   *\r\n   * @function Phaser.Physics.Matter.PhysicsEditorParser.parseBody\r\n   * @since 3.10.0\r\n   *\r\n   * @param {number} x - The horizontal world location of the body.\r\n   * @param {number} y - The vertical world location of the body.\r\n   * @param {object} config - The body configuration and fixture (child body) definitions, as exported by PhysicsEditor.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   * \r\n   * @return {MatterJS.BodyType} A compound Matter JS Body.\r\n   */\n  parseBody: function (x, y, config, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var fixtureConfigs = GetFastValue(config, 'fixtures', []);\n    var fixtures = [];\n\n    for (var fc = 0; fc < fixtureConfigs.length; fc++) {\n      var fixtureParts = this.parseFixture(fixtureConfigs[fc]);\n\n      for (var i = 0; i < fixtureParts.length; i++) {\n        fixtures.push(fixtureParts[i]);\n      }\n    }\n\n    var matterConfig = Common.clone(config, true);\n    Common.extend(matterConfig, options, true);\n    delete matterConfig.fixtures;\n    delete matterConfig.type;\n    var body = Body.create(matterConfig);\n    Body.setParts(body, fixtures);\n    Body.setPosition(body, {\n      x: x,\n      y: y\n    });\n    return body;\n  },\n\n  /**\r\n   * Parses an element of the \"fixtures\" list exported by PhysicsEditor\r\n   *\r\n   * @function Phaser.Physics.Matter.PhysicsEditorParser.parseFixture\r\n   * @since 3.10.0\r\n   *\r\n   * @param {object} fixtureConfig - The fixture object to parse.\r\n   * \r\n   * @return {MatterJS.BodyType[]} - An array of Matter JS Bodies.\r\n   */\n  parseFixture: function (fixtureConfig) {\n    var matterConfig = Common.extend({}, false, fixtureConfig);\n    delete matterConfig.circle;\n    delete matterConfig.vertices;\n    var fixtures;\n\n    if (fixtureConfig.circle) {\n      var x = GetFastValue(fixtureConfig.circle, 'x');\n      var y = GetFastValue(fixtureConfig.circle, 'y');\n      var r = GetFastValue(fixtureConfig.circle, 'radius');\n      fixtures = [Bodies.circle(x, y, r, matterConfig)];\n    } else if (fixtureConfig.vertices) {\n      fixtures = this.parseVertices(fixtureConfig.vertices, matterConfig);\n    }\n\n    return fixtures;\n  },\n\n  /**\r\n   * Parses the \"vertices\" lists exported by PhysicsEditor.\r\n   *\r\n   * @function Phaser.Physics.Matter.PhysicsEditorParser.parseVertices\r\n   * @since 3.10.0\r\n   *\r\n   * @param {array} vertexSets - The vertex lists to parse.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   * \r\n   * @return {MatterJS.BodyType[]} - An array of Matter JS Bodies.\r\n   */\n  parseVertices: function (vertexSets, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var parts = [];\n\n    for (var v = 0; v < vertexSets.length; v++) {\n      Vertices.clockwiseSort(vertexSets[v]);\n      parts.push(Body.create(Common.extend({\n        position: Vertices.centre(vertexSets[v]),\n        vertices: vertexSets[v]\n      }, options)));\n    } // flag coincident part edges\n\n\n    return Bodies.flagCoincidentParts(parts);\n  }\n};\nmodule.exports = PhysicsEditorParser;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/PhysicsEditorParser.js"],"names":["Bodies","require","Body","Common","GetFastValue","Vertices","PhysicsEditorParser","parseBody","x","y","config","options","undefined","fixtureConfigs","fixtures","fc","length","fixtureParts","parseFixture","i","push","matterConfig","clone","extend","type","body","create","setParts","setPosition","fixtureConfig","circle","vertices","r","parseVertices","vertexSets","parts","v","clockwiseSort","position","centre","flagCoincidentParts","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Joachim Grill <joachim@codeandweb.com>\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 CodeAndWeb GmbH\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Body = require('./lib/body/Body');\r\nvar Common = require('./lib/core/Common');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\n\r\n/**\r\n * Use PhysicsEditorParser.parseBody() to build a Matter body object, based on a physics data file\r\n * created and exported with PhysicsEditor (https://www.codeandweb.com/physicseditor).\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsEditorParser\r\n * @since 3.10.0\r\n */\r\nvar PhysicsEditorParser = {\r\n\r\n    /**\r\n     * Parses a body element exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseBody\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} x - The horizontal world location of the body.\r\n     * @param {number} y - The vertical world location of the body.\r\n     * @param {object} config - The body configuration and fixture (child body) definitions, as exported by PhysicsEditor.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     * \r\n     * @return {MatterJS.BodyType} A compound Matter JS Body.\r\n     */\r\n    parseBody: function (x, y, config, options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n\r\n        var fixtureConfigs = GetFastValue(config, 'fixtures', []);\r\n        var fixtures = [];\r\n\r\n        for (var fc = 0; fc < fixtureConfigs.length; fc++)\r\n        {\r\n            var fixtureParts = this.parseFixture(fixtureConfigs[fc]);\r\n\r\n            for (var i = 0; i < fixtureParts.length; i++)\r\n            {\r\n                fixtures.push(fixtureParts[i]);\r\n            }\r\n        }\r\n\r\n        var matterConfig = Common.clone(config, true);\r\n\r\n        Common.extend(matterConfig, options, true);\r\n\r\n        delete matterConfig.fixtures;\r\n        delete matterConfig.type;\r\n\r\n        var body = Body.create(matterConfig);\r\n\r\n        Body.setParts(body, fixtures);\r\n        \r\n        Body.setPosition(body, { x: x, y: y });\r\n\r\n        return body;\r\n    },\r\n\r\n    /**\r\n     * Parses an element of the \"fixtures\" list exported by PhysicsEditor\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseFixture\r\n     * @since 3.10.0\r\n     *\r\n     * @param {object} fixtureConfig - The fixture object to parse.\r\n     * \r\n     * @return {MatterJS.BodyType[]} - An array of Matter JS Bodies.\r\n     */\r\n    parseFixture: function (fixtureConfig)\r\n    {\r\n        var matterConfig = Common.extend({}, false, fixtureConfig);\r\n\r\n        delete matterConfig.circle;\r\n        delete matterConfig.vertices;\r\n\r\n        var fixtures;\r\n\r\n        if (fixtureConfig.circle)\r\n        {\r\n            var x = GetFastValue(fixtureConfig.circle, 'x');\r\n            var y = GetFastValue(fixtureConfig.circle, 'y');\r\n            var r = GetFastValue(fixtureConfig.circle, 'radius');\r\n            fixtures = [ Bodies.circle(x, y, r, matterConfig) ];\r\n        }\r\n        else if (fixtureConfig.vertices)\r\n        {\r\n            fixtures = this.parseVertices(fixtureConfig.vertices, matterConfig);\r\n        }\r\n\r\n        return fixtures;\r\n    },\r\n\r\n    /**\r\n     * Parses the \"vertices\" lists exported by PhysicsEditor.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsEditorParser.parseVertices\r\n     * @since 3.10.0\r\n     *\r\n     * @param {array} vertexSets - The vertex lists to parse.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     * \r\n     * @return {MatterJS.BodyType[]} - An array of Matter JS Bodies.\r\n     */\r\n    parseVertices: function (vertexSets, options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n\r\n        var parts = [];\r\n\r\n        for (var v = 0; v < vertexSets.length; v++)\r\n        {\r\n            Vertices.clockwiseSort(vertexSets[v]);\r\n\r\n            parts.push(Body.create(Common.extend({\r\n                position: Vertices.centre(vertexSets[v]),\r\n                vertices: vertexSets[v]\r\n            }, options)));\r\n        }\r\n\r\n        // flag coincident part edges\r\n        return Bodies.flagCoincidentParts(parts);\r\n    }\r\n};\r\n\r\nmodule.exports = PhysicsEditorParser;\r\n"]},"metadata":{},"sourceType":"script"}