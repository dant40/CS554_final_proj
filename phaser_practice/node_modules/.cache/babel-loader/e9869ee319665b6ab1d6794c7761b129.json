{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar Color = require('../../display/color/Color');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a WebGL canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.WebGL\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\n\n\nvar WebGLSnapshot = function (sourceCanvas, config) {\n  var gl = sourceCanvas.getContext('experimental-webgl');\n  var callback = GetFastValue(config, 'callback');\n  var type = GetFastValue(config, 'type', 'image/png');\n  var encoderOptions = GetFastValue(config, 'encoder', 0.92);\n  var x = GetFastValue(config, 'x', 0);\n  var y = GetFastValue(config, 'y', 0);\n  var getPixel = GetFastValue(config, 'getPixel', false);\n  var isFramebuffer = GetFastValue(config, 'isFramebuffer', false);\n  var bufferWidth = isFramebuffer ? GetFastValue(config, 'bufferWidth', 1) : gl.drawingBufferWidth;\n  var bufferHeight = isFramebuffer ? GetFastValue(config, 'bufferHeight', 1) : gl.drawingBufferHeight;\n\n  if (getPixel) {\n    var pixel = new Uint8Array(4);\n    var destY = isFramebuffer ? y : bufferHeight - y;\n    gl.readPixels(x, destY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n    callback.call(null, new Color(pixel[0], pixel[1], pixel[2], pixel[3] / 255));\n  } else {\n    var width = GetFastValue(config, 'width', bufferWidth);\n    var height = GetFastValue(config, 'height', bufferHeight);\n    var total = width * height * 4;\n    var pixels = new Uint8Array(total);\n    gl.readPixels(x, bufferHeight - y - height, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    var canvas = CanvasPool.createWebGL(this, width, height);\n    var ctx = canvas.getContext('2d');\n    var imageData = ctx.getImageData(0, 0, width, height);\n    var data = imageData.data;\n\n    for (var py = 0; py < height; py++) {\n      for (var px = 0; px < width; px++) {\n        var sourceIndex = ((height - py) * width + px) * 4;\n        var destIndex = isFramebuffer ? total - (py * width + (width - px)) * 4 : (py * width + px) * 4;\n        data[destIndex + 0] = pixels[sourceIndex + 0];\n        data[destIndex + 1] = pixels[sourceIndex + 1];\n        data[destIndex + 2] = pixels[sourceIndex + 2];\n        data[destIndex + 3] = pixels[sourceIndex + 3];\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    var image = new Image();\n\n    image.onerror = function () {\n      callback.call(null);\n      CanvasPool.remove(canvas);\n    };\n\n    image.onload = function () {\n      callback.call(null, image);\n      CanvasPool.remove(canvas);\n    };\n\n    image.src = canvas.toDataURL(type, encoderOptions);\n  }\n};\n\nmodule.exports = WebGLSnapshot;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/snapshot/WebGLSnapshot.js"],"names":["CanvasPool","require","Color","GetFastValue","WebGLSnapshot","sourceCanvas","config","gl","getContext","callback","type","encoderOptions","x","y","getPixel","isFramebuffer","bufferWidth","drawingBufferWidth","bufferHeight","drawingBufferHeight","pixel","Uint8Array","destY","readPixels","RGBA","UNSIGNED_BYTE","call","width","height","total","pixels","canvas","createWebGL","ctx","imageData","getImageData","data","py","px","sourceIndex","destIndex","putImageData","image","Image","onerror","remove","onload","src","toDataURL","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Color = require('../../display/color/Color');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a WebGL canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.WebGL\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\r\nvar WebGLSnapshot = function (sourceCanvas, config)\r\n{\r\n    var gl = sourceCanvas.getContext('experimental-webgl');\r\n\r\n    var callback = GetFastValue(config, 'callback');\r\n    var type = GetFastValue(config, 'type', 'image/png');\r\n    var encoderOptions = GetFastValue(config, 'encoder', 0.92);\r\n    var x = GetFastValue(config, 'x', 0);\r\n    var y = GetFastValue(config, 'y', 0);\r\n\r\n    var getPixel = GetFastValue(config, 'getPixel', false);\r\n\r\n    var isFramebuffer = GetFastValue(config, 'isFramebuffer', false);\r\n\r\n    var bufferWidth = (isFramebuffer) ? GetFastValue(config, 'bufferWidth', 1) : gl.drawingBufferWidth;\r\n    var bufferHeight = (isFramebuffer) ? GetFastValue(config, 'bufferHeight', 1) : gl.drawingBufferHeight;\r\n\r\n    if (getPixel)\r\n    {\r\n        var pixel = new Uint8Array(4);\r\n\r\n        var destY = (isFramebuffer) ? y : bufferHeight - y;\r\n\r\n        gl.readPixels(x, destY, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\r\n\r\n        callback.call(null, new Color(pixel[0], pixel[1], pixel[2], pixel[3] / 255));\r\n    }\r\n    else\r\n    {\r\n        var width = GetFastValue(config, 'width', bufferWidth);\r\n        var height = GetFastValue(config, 'height', bufferHeight);\r\n\r\n        var total = width * height * 4;\r\n\r\n        var pixels = new Uint8Array(total);\r\n\r\n        gl.readPixels(x, bufferHeight - y - height, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    \r\n        var canvas = CanvasPool.createWebGL(this, width, height);\r\n        var ctx = canvas.getContext('2d');\r\n\r\n        var imageData = ctx.getImageData(0, 0, width, height);\r\n    \r\n        var data = imageData.data;\r\n\r\n        for (var py = 0; py < height; py++)\r\n        {\r\n            for (var px = 0; px < width; px++)\r\n            {\r\n                var sourceIndex = ((height - py) * width + px) * 4;\r\n                var destIndex = (isFramebuffer) ? total - ((py * width + (width - px)) * 4) : (py * width + px) * 4;\r\n\r\n                data[destIndex + 0] = pixels[sourceIndex + 0];\r\n                data[destIndex + 1] = pixels[sourceIndex + 1];\r\n                data[destIndex + 2] = pixels[sourceIndex + 2];\r\n                data[destIndex + 3] = pixels[sourceIndex + 3];\r\n            }\r\n        }\r\n\r\n        ctx.putImageData(imageData, 0, 0);\r\n    \r\n        var image = new Image();\r\n\r\n        image.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n\r\n            CanvasPool.remove(canvas);\r\n        };\r\n\r\n        image.onload = function ()\r\n        {\r\n            callback.call(null, image);\r\n\r\n            CanvasPool.remove(canvas);\r\n        };\r\n\r\n        image.src = canvas.toDataURL(type, encoderOptions);\r\n    }\r\n};\r\n\r\nmodule.exports = WebGLSnapshot;\r\n"]},"metadata":{},"sourceType":"script"}