{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar NoAudioSound = require('./NoAudioSound');\n\nvar NOOP = require('../../utils/NOOP');\n/**\r\n * @classdesc\r\n * No audio implementation of the sound manager. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound manager logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar NoAudioSoundManager = new Class({\n  Extends: EventEmitter,\n  initialize: function NoAudioSoundManager(game) {\n    EventEmitter.call(this);\n    this.game = game;\n    this.sounds = [];\n    this.mute = false;\n    this.volume = 1;\n    this.rate = 1;\n    this.detune = 0;\n    this.pauseOnBlur = true;\n    this.locked = false;\n  },\n  add: function (key, config) {\n    var sound = new NoAudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n  addAudioSprite: function (key, config) {\n    var sound = this.add(key, config);\n    sound.spritemap = {};\n    return sound;\n  },\n  // eslint-disable-next-line no-unused-vars\n  play: function (key, extra) {\n    return false;\n  },\n  // eslint-disable-next-line no-unused-vars\n  playAudioSprite: function (key, spriteName, config) {\n    return false;\n  },\n  remove: function (sound) {\n    return BaseSoundManager.prototype.remove.call(this, sound);\n  },\n  removeByKey: function (key) {\n    return BaseSoundManager.prototype.removeByKey.call(this, key);\n  },\n  pauseAll: NOOP,\n  resumeAll: NOOP,\n  stopAll: NOOP,\n  update: NOOP,\n  setRate: NOOP,\n  setDetune: NOOP,\n  setMute: NOOP,\n  setVolume: NOOP,\n  forEachActiveSound: function (callbackfn, scope) {\n    BaseSoundManager.prototype.forEachActiveSound.call(this, callbackfn, scope);\n  },\n  destroy: function () {\n    BaseSoundManager.prototype.destroy.call(this);\n  }\n});\nmodule.exports = NoAudioSoundManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/sound/noaudio/NoAudioSoundManager.js"],"names":["BaseSoundManager","require","Class","EventEmitter","NoAudioSound","NOOP","NoAudioSoundManager","Extends","initialize","game","call","sounds","mute","volume","rate","detune","pauseOnBlur","locked","add","key","config","sound","push","addAudioSprite","spritemap","play","extra","playAudioSprite","spriteName","remove","prototype","removeByKey","pauseAll","resumeAll","stopAll","update","setRate","setDetune","setMute","setVolume","forEachActiveSound","callbackfn","scope","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar NoAudioSound = require('./NoAudioSound');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * No audio implementation of the sound manager. It is used if audio has been\r\n * disabled in the game config or the device doesn't support any audio.\r\n *\r\n * It represents a graceful degradation of sound manager logic that provides\r\n * minimal functionality and prevents Phaser projects that use audio from\r\n * breaking on devices that don't support any audio playback technologies.\r\n *\r\n * @class NoAudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar NoAudioSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function NoAudioSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        this.game = game;\r\n        this.sounds = [];\r\n        this.mute = false;\r\n        this.volume = 1;\r\n        this.rate = 1;\r\n        this.detune = 0;\r\n        this.pauseOnBlur = true;\r\n        this.locked = false;\r\n    },\r\n\r\n    add: function (key, config)\r\n    {\r\n        var sound = new NoAudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = {};\r\n\r\n        return sound;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    play: function (key, extra)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    // eslint-disable-next-line no-unused-vars\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        return false;\r\n    },\r\n\r\n    remove: function (sound)\r\n    {\r\n        return BaseSoundManager.prototype.remove.call(this, sound);\r\n    },\r\n\r\n    removeByKey: function (key)\r\n    {\r\n        return BaseSoundManager.prototype.removeByKey.call(this, key);\r\n    },\r\n\r\n    pauseAll: NOOP,\r\n    resumeAll: NOOP,\r\n    stopAll: NOOP,\r\n    update: NOOP,\r\n    setRate: NOOP,\r\n    setDetune: NOOP,\r\n    setMute: NOOP,\r\n    setVolume: NOOP,\r\n\r\n    forEachActiveSound: function (callbackfn, scope)\r\n    {\r\n        BaseSoundManager.prototype.forEachActiveSound.call(this, callbackfn, scope);\r\n    },\r\n\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = NoAudioSoundManager;\r\n"]},"metadata":{},"sourceType":"script"}