{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetURL = require('../GetURL');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Video File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#video method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#video.\r\n *\r\n * @class VideoFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.20.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.VideoFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {string} [loadEvent] - The load event to listen for when _not_ loading as a blob. Either 'loadeddata', 'canplay' or 'canplaythrough'.\r\n * @param {boolean} [asBlob] - Load the video as a data blob, or via the Video element?\r\n * @param {boolean} [noAudio] - Does the video have an audio track? If not you can enable auto-playing on it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar VideoFile = new Class({\n  Extends: File,\n  initialize: //  URL is an object created by VideoFile.getVideoURL\n  function VideoFile(loader, key, urlConfig, loadEvent, asBlob, noAudio, xhrSettings) {\n    if (loadEvent === undefined) {\n      loadEvent = 'loadeddata';\n    }\n\n    if (asBlob === undefined) {\n      asBlob = false;\n    }\n\n    if (noAudio === undefined) {\n      noAudio = false;\n    }\n\n    if (loadEvent !== 'loadeddata' && loadEvent !== 'canplay' && loadEvent !== 'canplaythrough') {\n      loadEvent = 'loadeddata';\n    }\n\n    var fileConfig = {\n      type: 'video',\n      cache: loader.cacheManager.video,\n      extension: urlConfig.type,\n      responseType: 'blob',\n      key: key,\n      url: urlConfig.url,\n      xhrSettings: xhrSettings,\n      config: {\n        loadEvent: loadEvent,\n        asBlob: asBlob,\n        noAudio: noAudio\n      }\n    };\n    this.onLoadCallback = this.onVideoLoadHandler.bind(this);\n    this.onErrorCallback = this.onVideoErrorHandler.bind(this);\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.VideoFile#onProcess\r\n   * @since 3.20.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n\n    if (!this.config.asBlob) {\n      this.onProcessComplete();\n      return;\n    } //  Load Video as blob\n\n\n    var video = this.createVideoElement();\n    this.data = video;\n\n    var _this = this;\n\n    this.data.onloadeddata = function () {\n      _this.onProcessComplete();\n    };\n\n    this.data.onerror = function () {\n      File.revokeObjectURL(_this.data);\n\n      _this.onProcessError();\n    };\n\n    File.createObjectURL(video, this.xhrLoader.response, '');\n    video.load();\n  },\n\n  /**\r\n   * Creates a Video Element within the DOM.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.VideoFile#createVideoElement\r\n   * @private\r\n   * @since 3.20.0\r\n   * \r\n   * @return {HTMLVideoElement} The newly created Video element.\r\n   */\n  createVideoElement: function () {\n    var video = document.createElement('video');\n    video.controls = false;\n    video.crossOrigin = this.loader.crossOrigin;\n\n    if (this.config.noAudio) {\n      video.muted = true;\n      video.defaultMuted = true;\n      video.setAttribute('autoplay', 'autoplay');\n    }\n\n    video.setAttribute('playsinline', 'playsinline');\n    video.setAttribute('preload', 'auto');\n    return video;\n  },\n\n  /**\r\n   * Internal load event callback.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.VideoFile#onVideoLoadHandler\r\n   * @private\r\n   * @since 3.20.0\r\n   *\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n   */\n  onVideoLoadHandler: function (event) {\n    var video = event.target;\n    video.removeEventListener(this.config.loadEvent, this.onLoadCallback, true);\n    video.removeEventListener('error', this.onErrorCallback, true);\n    this.data = video;\n    this.resetXHR();\n    this.loader.nextFile(this, true);\n  },\n\n  /**\r\n   * Internal load error event callback.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.VideoFile#onVideoErrorHandler\r\n   * @private\r\n   * @since 3.20.0\r\n   *\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n   */\n  onVideoErrorHandler: function (event) {\n    var video = event.target;\n\n    if (video) {\n      video.removeEventListener(this.config.loadEvent, this.onLoadCallback, true);\n      video.removeEventListener('error', this.onErrorCallback, true);\n    }\n\n    this.resetXHR();\n    this.loader.nextFile(this, false);\n  },\n\n  /**\r\n   * Called by the Loader, starts the actual file downloading.\r\n   * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n   * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.VideoFile#load\r\n   * @since 3.20.0\r\n   */\n  load: function () {\n    var loadEvent = this.config.loadEvent;\n\n    if (this.config.asBlob) {\n      File.prototype.load.call(this);\n    } else {\n      this.percentComplete = 0;\n      var video = this.createVideoElement();\n      video.addEventListener(loadEvent, this.onLoadCallback, true);\n      video.addEventListener('error', this.onErrorCallback, true);\n      video.src = GetURL(this, this.loader.baseURL);\n      video.load();\n    }\n  }\n});\n\nVideoFile.create = function (loader, key, urls, loadEvent, asBlob, noAudio, xhrSettings) {\n  var game = loader.systems.game; //  url may be inside key, which may be an object\n\n  if (IsPlainObject(key)) {\n    urls = GetFastValue(key, 'url', []);\n    loadEvent = GetFastValue(key, 'loadEvent', 'loadeddata');\n    asBlob = GetFastValue(key, 'asBlob', false);\n    noAudio = GetFastValue(key, 'noAudio', false);\n    xhrSettings = GetFastValue(key, 'xhrSettings');\n  }\n\n  var urlConfig = VideoFile.getVideoURL(game, urls);\n\n  if (urlConfig) {\n    return new VideoFile(loader, key, urlConfig, loadEvent, asBlob, noAudio, xhrSettings);\n  }\n};\n\nVideoFile.getVideoURL = function (game, urls) {\n  if (!Array.isArray(urls)) {\n    urls = [urls];\n  }\n\n  for (var i = 0; i < urls.length; i++) {\n    var url = GetFastValue(urls[i], 'url', urls[i]);\n\n    if (url.indexOf('blob:') === 0) {\n      return url;\n    }\n\n    var videoType;\n\n    if (url.indexOf('data:') === 0) {\n      videoType = url.split(',')[0].match(/\\/(.*?);/);\n    } else {\n      videoType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\n    }\n\n    videoType = GetFastValue(urls[i], 'type', videoType ? videoType[1] : '').toLowerCase();\n\n    if (game.device.video[videoType]) {\n      return {\n        url: url,\n        type: videoType\n      };\n    }\n  }\n\n  return null;\n};\n/**\r\n * Adds a Video file, or array of video files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.video('intro', [ 'video/level1.mp4', 'video/level1.webm', 'video/level1.mov' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Video Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Video Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Video Cache first, before loading a new one.\r\n  *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.video({\r\n *     key: 'intro',\r\n *     url: [ 'video/level1.mp4', 'video/level1.webm', 'video/level1.mov' ],\r\n *     asBlob: false,\r\n *     noAudio: true\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.VideoFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different video file types you should usually provide your video files in a variety of formats.\r\n * mp4, mov and webm are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support, starting with the first in the array and progressing to the end.\r\n * \r\n * Unlike most asset-types, videos do not _need_ to be preloaded. You can create a Video Game Object and then call its `loadURL` method,\r\n * to load a video at run-time, rather than in advance.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Video File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#video\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.20.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.VideoFileConfig|Phaser.Types.Loader.FileTypes.VideoFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the video files from.\r\n * @param {string} [loadEvent='loadeddata'] - The load event to listen for when _not_ loading as a blob. Either `loadeddata`, `canplay` or `canplaythrough`.\r\n * @param {boolean} [asBlob=false] - Load the video as a data blob, or stream it via the Video element?\r\n * @param {boolean} [noAudio=false] - Does the video have an audio track? If not you can enable auto-playing on it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\n\nFileTypesManager.register('video', function (key, urls, loadEvent, asBlob, noAudio, xhrSettings) {\n  var videoFile;\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      videoFile = VideoFile.create(this, key[i]);\n\n      if (videoFile) {\n        this.addFile(videoFile);\n      }\n    }\n  } else {\n    videoFile = VideoFile.create(this, key, urls, loadEvent, asBlob, noAudio, xhrSettings);\n\n    if (videoFile) {\n      this.addFile(videoFile);\n    }\n  }\n\n  return this;\n});\nmodule.exports = VideoFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/VideoFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetURL","GetFastValue","IsPlainObject","VideoFile","Extends","initialize","loader","key","urlConfig","loadEvent","asBlob","noAudio","xhrSettings","undefined","fileConfig","type","cache","cacheManager","video","extension","responseType","url","config","onLoadCallback","onVideoLoadHandler","bind","onErrorCallback","onVideoErrorHandler","call","onProcess","state","FILE_PROCESSING","onProcessComplete","createVideoElement","data","_this","onloadeddata","onerror","revokeObjectURL","onProcessError","createObjectURL","xhrLoader","response","load","document","createElement","controls","crossOrigin","muted","defaultMuted","setAttribute","event","target","removeEventListener","resetXHR","nextFile","prototype","percentComplete","addEventListener","src","baseURL","create","urls","game","systems","getVideoURL","Array","isArray","i","length","indexOf","videoType","split","match","toLowerCase","device","register","videoFile","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetURL = require('../GetURL');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Video File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#video method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#video.\r\n *\r\n * @class VideoFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.20.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.VideoFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {string} [loadEvent] - The load event to listen for when _not_ loading as a blob. Either 'loadeddata', 'canplay' or 'canplaythrough'.\r\n * @param {boolean} [asBlob] - Load the video as a data blob, or via the Video element?\r\n * @param {boolean} [noAudio] - Does the video have an audio track? If not you can enable auto-playing on it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar VideoFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    //  URL is an object created by VideoFile.getVideoURL\r\n    function VideoFile (loader, key, urlConfig, loadEvent, asBlob, noAudio, xhrSettings)\r\n    {\r\n        if (loadEvent === undefined) { loadEvent = 'loadeddata'; }\r\n        if (asBlob === undefined) { asBlob = false; }\r\n        if (noAudio === undefined) { noAudio = false; }\r\n\r\n        if (loadEvent !== 'loadeddata' && loadEvent !== 'canplay' && loadEvent !== 'canplaythrough')\r\n        {\r\n            loadEvent = 'loadeddata';\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'video',\r\n            cache: loader.cacheManager.video,\r\n            extension: urlConfig.type,\r\n            responseType: 'blob',\r\n            key: key,\r\n            url: urlConfig.url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                loadEvent: loadEvent,\r\n                asBlob: asBlob,\r\n                noAudio: noAudio\r\n            }\r\n        };\r\n\r\n        this.onLoadCallback = this.onVideoLoadHandler.bind(this);\r\n        this.onErrorCallback = this.onVideoErrorHandler.bind(this);\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.VideoFile#onProcess\r\n     * @since 3.20.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        if (!this.config.asBlob)\r\n        {\r\n            this.onProcessComplete();\r\n\r\n            return;\r\n        }\r\n\r\n        //  Load Video as blob\r\n\r\n        var video = this.createVideoElement();\r\n\r\n        this.data = video;\r\n\r\n        var _this = this;\r\n\r\n        this.data.onloadeddata = function ()\r\n        {\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessError();\r\n        };\r\n\r\n        File.createObjectURL(video, this.xhrLoader.response, '');\r\n\r\n        video.load();\r\n    },\r\n\r\n    /**\r\n     * Creates a Video Element within the DOM.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.VideoFile#createVideoElement\r\n     * @private\r\n     * @since 3.20.0\r\n     * \r\n     * @return {HTMLVideoElement} The newly created Video element.\r\n     */\r\n    createVideoElement: function ()\r\n    {\r\n        var video = document.createElement('video');\r\n    \r\n        video.controls = false;\r\n        video.crossOrigin = this.loader.crossOrigin;\r\n\r\n        if (this.config.noAudio)\r\n        {\r\n            video.muted = true;\r\n            video.defaultMuted = true;\r\n\r\n            video.setAttribute('autoplay', 'autoplay');\r\n        }\r\n\r\n        video.setAttribute('playsinline', 'playsinline');\r\n        video.setAttribute('preload', 'auto');\r\n\r\n        return video;\r\n    },\r\n\r\n    /**\r\n     * Internal load event callback.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.VideoFile#onVideoLoadHandler\r\n     * @private\r\n     * @since 3.20.0\r\n     *\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n     */\r\n    onVideoLoadHandler: function (event)\r\n    {\r\n        var video = event.target;\r\n\r\n        video.removeEventListener(this.config.loadEvent, this.onLoadCallback, true);\r\n        video.removeEventListener('error', this.onErrorCallback, true);\r\n\r\n        this.data = video;\r\n\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, true);\r\n    },\r\n\r\n    /**\r\n     * Internal load error event callback.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.VideoFile#onVideoErrorHandler\r\n     * @private\r\n     * @since 3.20.0\r\n     *\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n     */\r\n    onVideoErrorHandler: function (event)\r\n    {\r\n        var video = event.target;\r\n\r\n        if (video)\r\n        {\r\n            video.removeEventListener(this.config.loadEvent, this.onLoadCallback, true);\r\n            video.removeEventListener('error', this.onErrorCallback, true);\r\n        }\r\n\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.VideoFile#load\r\n     * @since 3.20.0\r\n     */\r\n    load: function ()\r\n    {\r\n        var loadEvent = this.config.loadEvent;\r\n\r\n        if (this.config.asBlob)\r\n        {\r\n            File.prototype.load.call(this);\r\n        }\r\n        else\r\n        {\r\n            this.percentComplete = 0;\r\n\r\n            var video = this.createVideoElement();\r\n\r\n            video.addEventListener(loadEvent, this.onLoadCallback, true);\r\n            video.addEventListener('error', this.onErrorCallback, true);\r\n\r\n            video.src = GetURL(this, this.loader.baseURL);\r\n\r\n            video.load();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nVideoFile.create = function (loader, key, urls, loadEvent, asBlob, noAudio, xhrSettings)\r\n{\r\n    var game = loader.systems.game;\r\n\r\n    //  url may be inside key, which may be an object\r\n    if (IsPlainObject(key))\r\n    {\r\n        urls = GetFastValue(key, 'url', []);\r\n        loadEvent = GetFastValue(key, 'loadEvent', 'loadeddata');\r\n        asBlob = GetFastValue(key, 'asBlob', false);\r\n        noAudio = GetFastValue(key, 'noAudio', false);\r\n        xhrSettings = GetFastValue(key, 'xhrSettings');\r\n    }\r\n\r\n    var urlConfig = VideoFile.getVideoURL(game, urls);\r\n\r\n    if (urlConfig)\r\n    {\r\n        return new VideoFile(loader, key, urlConfig, loadEvent, asBlob, noAudio, xhrSettings);\r\n    }\r\n};\r\n\r\nVideoFile.getVideoURL = function (game, urls)\r\n{\r\n    if (!Array.isArray(urls))\r\n    {\r\n        urls = [ urls ];\r\n    }\r\n\r\n    for (var i = 0; i < urls.length; i++)\r\n    {\r\n        var url = GetFastValue(urls[i], 'url', urls[i]);\r\n\r\n        if (url.indexOf('blob:') === 0)\r\n        {\r\n            return url;\r\n        }\r\n\r\n        var videoType;\r\n\r\n        if (url.indexOf('data:') === 0)\r\n        {\r\n            videoType = url.split(',')[0].match(/\\/(.*?);/);\r\n        }\r\n        else\r\n        {\r\n            videoType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\r\n        }\r\n\r\n        videoType = GetFastValue(urls[i], 'type', (videoType) ? videoType[1] : '').toLowerCase();\r\n\r\n        if (game.device.video[videoType])\r\n        {\r\n            return {\r\n                url: url,\r\n                type: videoType\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Adds a Video file, or array of video files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.video('intro', [ 'video/level1.mp4', 'video/level1.webm', 'video/level1.mov' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Video Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Video Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Video Cache first, before loading a new one.\r\n  *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.video({\r\n *     key: 'intro',\r\n *     url: [ 'video/level1.mp4', 'video/level1.webm', 'video/level1.mov' ],\r\n *     asBlob: false,\r\n *     noAudio: true\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.VideoFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different video file types you should usually provide your video files in a variety of formats.\r\n * mp4, mov and webm are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support, starting with the first in the array and progressing to the end.\r\n * \r\n * Unlike most asset-types, videos do not _need_ to be preloaded. You can create a Video Game Object and then call its `loadURL` method,\r\n * to load a video at run-time, rather than in advance.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Video File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#video\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.20.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.VideoFileConfig|Phaser.Types.Loader.FileTypes.VideoFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the video files from.\r\n * @param {string} [loadEvent='loadeddata'] - The load event to listen for when _not_ loading as a blob. Either `loadeddata`, `canplay` or `canplaythrough`.\r\n * @param {boolean} [asBlob=false] - Load the video as a data blob, or stream it via the Video element?\r\n * @param {boolean} [noAudio=false] - Does the video have an audio track? If not you can enable auto-playing on it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('video', function (key, urls, loadEvent, asBlob, noAudio, xhrSettings)\r\n{\r\n    var videoFile;\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            videoFile = VideoFile.create(this, key[i]);\r\n\r\n            if (videoFile)\r\n            {\r\n                this.addFile(videoFile);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        videoFile = VideoFile.create(this, key, urls, loadEvent, asBlob, noAudio, xhrSettings);\r\n\r\n        if (videoFile)\r\n        {\r\n            this.addFile(videoFile);\r\n        }\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = VideoFile;\r\n"]},"metadata":{},"sourceType":"script"}