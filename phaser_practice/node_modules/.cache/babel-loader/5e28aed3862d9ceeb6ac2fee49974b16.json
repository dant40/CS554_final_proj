{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse based on the given angle.\r\n *\r\n * @function Phaser.Geom.Ellipse.CircumferencePoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the circumference point on.\r\n * @param {number} angle - The angle from the center of the Ellipse to the circumference to return the point from. Given in radians.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point, or point-like object, to store the results in. If not given a Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object where the `x` and `y` properties are the point on the circumference.\r\n */\n\n\nvar CircumferencePoint = function (ellipse, angle, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var halfWidth = ellipse.width / 2;\n  var halfHeight = ellipse.height / 2;\n  out.x = ellipse.x + halfWidth * Math.cos(angle);\n  out.y = ellipse.y + halfHeight * Math.sin(angle);\n  return out;\n};\n\nmodule.exports = CircumferencePoint;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/ellipse/CircumferencePoint.js"],"names":["Point","require","CircumferencePoint","ellipse","angle","out","undefined","halfWidth","width","halfHeight","height","x","Math","cos","y","sin","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,kBAAkB,GAAG,UAAUC,OAAV,EAAmBC,KAAnB,EAA0BC,GAA1B,EACzB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIL,KAAJ,EAAN;AAAoB;;AAE7C,MAAIO,SAAS,GAAGJ,OAAO,CAACK,KAAR,GAAgB,CAAhC;AACA,MAAIC,UAAU,GAAGN,OAAO,CAACO,MAAR,GAAiB,CAAlC;AAEAL,EAAAA,GAAG,CAACM,CAAJ,GAAQR,OAAO,CAACQ,CAAR,GAAYJ,SAAS,GAAGK,IAAI,CAACC,GAAL,CAAST,KAAT,CAAhC;AACAC,EAAAA,GAAG,CAACS,CAAJ,GAAQX,OAAO,CAACW,CAAR,GAAYL,UAAU,GAAGG,IAAI,CAACG,GAAL,CAASX,KAAT,CAAjC;AAEA,SAAOC,GAAP;AACH,CAXD;;AAaAW,MAAM,CAACC,OAAP,GAAiBf,kBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse based on the given angle.\r\n *\r\n * @function Phaser.Geom.Ellipse.CircumferencePoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get the circumference point on.\r\n * @param {number} angle - The angle from the center of the Ellipse to the circumference to return the point from. Given in radians.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point, or point-like object, to store the results in. If not given a Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object where the `x` and `y` properties are the point on the circumference.\r\n */\r\nvar CircumferencePoint = function (ellipse, angle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var halfWidth = ellipse.width / 2;\r\n    var halfHeight = ellipse.height / 2;\r\n\r\n    out.x = ellipse.x + halfWidth * Math.cos(angle);\r\n    out.y = ellipse.y + halfHeight * Math.sin(angle);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumferencePoint;\r\n"]},"metadata":{},"sourceType":"script"}