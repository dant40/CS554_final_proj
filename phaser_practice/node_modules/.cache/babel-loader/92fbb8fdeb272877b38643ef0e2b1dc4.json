{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A representation of a vector in 3D space.\r\n *\r\n * A three-component vector.\r\n *\r\n * @class Vector3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n */\n\n\nvar Vector3 = new Class({\n  initialize: function Vector3(x, y, z) {\n    /**\r\n     * The x component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    this.x = 0;\n    /**\r\n     * The y component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The z component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector3#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.z = 0;\n\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n  },\n\n  /**\r\n   * Set this Vector to point up.\r\n   *\r\n   * Sets the y component of the vector to 1, and the others to 0.\r\n   *\r\n   * @method Phaser.Math.Vector3#up\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  up: function () {\n    this.x = 0;\n    this.y = 1;\n    this.z = 0;\n    return this;\n  },\n\n  /**\r\n   * Make a clone of this Vector3.\r\n   *\r\n   * @method Phaser.Math.Vector3#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} A new Vector3 object containing this Vectors values.\r\n   */\n  clone: function () {\n    return new Vector3(this.x, this.y, this.z);\n  },\n\n  /**\r\n   * Calculate the cross (vector) product of two given Vectors.\r\n   *\r\n   * @method Phaser.Math.Vector3#crossVectors\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} a - The first Vector to multiply.\r\n   * @param {Phaser.Math.Vector3} b - The second Vector to multiply.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  crossVectors: function (a, b) {\n    var ax = a.x;\n    var ay = a.y;\n    var az = a.z;\n    var bx = b.x;\n    var by = b.y;\n    var bz = b.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n\n  /**\r\n   * Check whether this Vector is equal to a given Vector.\r\n   *\r\n   * Performs a strict equality check against each Vector's components.\r\n   *\r\n   * @method Phaser.Math.Vector3#equals\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to compare against.\r\n   *\r\n   * @return {boolean} True if the two vectors strictly match, otherwise false.\r\n   */\n  equals: function (v) {\n    return this.x === v.x && this.y === v.y && this.z === v.z;\n  },\n\n  /**\r\n   * Copy the components of a given Vector into this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} src - The Vector to copy the components from.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  copy: function (src) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\r\n   *\r\n   * @method Phaser.Math.Vector3#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y and z components.\r\n   * @param {number} [y] - The y value to set for this Vector.\r\n   * @param {number} [z] - The z value to set for this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  set: function (x, y, z) {\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a given Vector to this Vector. Addition is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector3#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  add: function (v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector3#subtract\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to subtract from this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  subtract: function (v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z || 0;\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise multiplication between this Vector and the given Vector.\r\n   *\r\n   * Multiplies this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to multiply this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  multiply: function (v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z || 1;\n    return this;\n  },\n\n  /**\r\n   * Scale this Vector by the given value.\r\n   *\r\n   * @method Phaser.Math.Vector3#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} scale - The value to scale this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  scale: function (scale) {\n    if (isFinite(scale)) {\n      this.x *= scale;\n      this.y *= scale;\n      this.z *= scale;\n    } else {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise division between this Vector and the given Vector.\r\n   *\r\n   * Divides this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#divide\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to divide this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  divide: function (v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z || 1;\n    return this;\n  },\n\n  /**\r\n   * Negate the `x`, `y` and `z` components of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#negate\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  negate: function () {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#distance\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector.\r\n   */\n  distance: function (v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector, squared.\r\n   *\r\n   * @method Phaser.Math.Vector3#distanceSq\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector, squared.\r\n   */\n  distanceSq: function (v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    return dx * dx + dy * dy + dz * dz;\n  },\n\n  /**\r\n   * Calculate the length (or magnitude) of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#length\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector.\r\n   */\n  length: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  },\n\n  /**\r\n   * Calculate the length of this Vector squared.\r\n   *\r\n   * @method Phaser.Math.Vector3#lengthSq\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector, squared.\r\n   */\n  lengthSq: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    return x * x + y * y + z * z;\n  },\n\n  /**\r\n   * Normalize this Vector.\r\n   *\r\n   * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n   *\r\n   * @method Phaser.Math.Vector3#normalize\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  normalize: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var len = x * x + y * y + z * z;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      this.x = x * len;\n      this.y = y * len;\n      this.z = z * len;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the dot product of this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#dot\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to dot product with this Vector3.\r\n   *\r\n   * @return {number} The dot product of this Vector and `v`.\r\n   */\n  dot: function (v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n  },\n\n  /**\r\n   * Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#cross\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector to cross product with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  cross: function (v) {\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var bx = v.x;\n    var by = v.y;\n    var bz = v.z;\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n    return this;\n  },\n\n  /**\r\n   * Linearly interpolate between this Vector and the given Vector.\r\n   *\r\n   * Interpolates this Vector towards the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector3#lerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} v - The Vector3 to interpolate towards.\r\n   * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  lerp: function (v, t) {\n    if (t === undefined) {\n      t = 0;\n    }\n\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    this.x = ax + t * (v.x - ax);\n    this.y = ay + t * (v.y - ay);\n    this.z = az + t * (v.z - az);\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformMat3\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformMat3: function (mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    this.x = x * m[0] + y * m[3] + z * m[6];\n    this.y = x * m[1] + y * m[4] + z * m[7];\n    this.z = x * m[2] + y * m[5] + z * m[8];\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformMat4: function (mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    this.x = m[0] * x + m[4] * y + m[8] * z + m[12];\n    this.y = m[1] * x + m[5] * y + m[9] * z + m[13];\n    this.z = m[2] * x + m[6] * y + m[10] * z + m[14];\n    return this;\n  },\n\n  /**\r\n   * Transforms the coordinates of this Vector3 with the given Matrix4.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformCoordinates\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformCoordinates: function (mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    var tx = x * m[0] + y * m[4] + z * m[8] + m[12];\n    var ty = x * m[1] + y * m[5] + z * m[9] + m[13];\n    var tz = x * m[2] + y * m[6] + z * m[10] + m[14];\n    var tw = x * m[3] + y * m[7] + z * m[11] + m[15];\n    this.x = tx / tw;\n    this.y = ty / tw;\n    this.z = tz / tw;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Vector3#transformQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  transformQuat: function (q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w; // calculate quat * vec\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n\n  /**\r\n   * Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\r\n   * e.g. unprojecting a 2D point into 3D space.\r\n   *\r\n   * @method Phaser.Math.Vector3#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to multiply this Vector3 with.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  project: function (mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var m = mat.val;\n    var a00 = m[0];\n    var a01 = m[1];\n    var a02 = m[2];\n    var a03 = m[3];\n    var a10 = m[4];\n    var a11 = m[5];\n    var a12 = m[6];\n    var a13 = m[7];\n    var a20 = m[8];\n    var a21 = m[9];\n    var a22 = m[10];\n    var a23 = m[11];\n    var a30 = m[12];\n    var a31 = m[13];\n    var a32 = m[14];\n    var a33 = m[15];\n    var lw = 1 / (x * a03 + y * a13 + z * a23 + a33);\n    this.x = (x * a00 + y * a10 + z * a20 + a30) * lw;\n    this.y = (x * a01 + y * a11 + z * a21 + a31) * lw;\n    this.z = (x * a02 + y * a12 + z * a22 + a32) * lw;\n    return this;\n  },\n\n  /**\r\n   * Unproject this point from 2D space to 3D space.\r\n   * The point should have its x and y properties set to\r\n   * 2D screen space, and the z either at 0 (near plane)\r\n   * or 1 (far plane). The provided matrix is assumed to already\r\n   * be combined, i.e. projection * view * model.\r\n   *\r\n   * After this operation, this vector's (x, y, z) components will\r\n   * represent the unprojected 3D coordinate.\r\n   *\r\n   * @method Phaser.Math.Vector3#unproject\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} viewport - Screen x, y, width and height in pixels.\r\n   * @param {Phaser.Math.Matrix4} invProjectionView - Combined projection and view matrix.\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  unproject: function (viewport, invProjectionView) {\n    var viewX = viewport.x;\n    var viewY = viewport.y;\n    var viewWidth = viewport.z;\n    var viewHeight = viewport.w;\n    var x = this.x - viewX;\n    var y = viewHeight - this.y - 1 - viewY;\n    var z = this.z;\n    this.x = 2 * x / viewWidth - 1;\n    this.y = 2 * y / viewHeight - 1;\n    this.z = 2 * z - 1;\n    return this.project(invProjectionView);\n  },\n\n  /**\r\n   * Make this Vector the zero vector (0, 0, 0).\r\n   *\r\n   * @method Phaser.Math.Vector3#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector3} This Vector3.\r\n   */\n  reset: function () {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    return this;\n  }\n});\n/**\r\n * A static zero Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ZERO\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.ZERO = new Vector3();\n/**\r\n * A static right Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.RIGHT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.RIGHT = new Vector3(1, 0, 0);\n/**\r\n * A static left Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.LEFT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.LEFT = new Vector3(-1, 0, 0);\n/**\r\n * A static up Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.UP\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.UP = new Vector3(0, -1, 0);\n/**\r\n * A static down Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.DOWN\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.DOWN = new Vector3(0, 1, 0);\n/**\r\n * A static forward Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.FORWARD\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.FORWARD = new Vector3(0, 0, 1);\n/**\r\n * A static back Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.BACK\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.BACK = new Vector3(0, 0, -1);\n/**\r\n * A static one Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ONE\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\n\nVector3.ONE = new Vector3(1, 1, 1);\nmodule.exports = Vector3;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Vector3.js"],"names":["Class","require","Vector3","initialize","x","y","z","up","clone","crossVectors","a","b","ax","ay","az","bx","by","bz","equals","v","copy","src","set","add","subtract","multiply","scale","isFinite","divide","negate","distance","dx","dy","dz","Math","sqrt","distanceSq","length","lengthSq","normalize","len","dot","cross","lerp","t","undefined","transformMat3","mat","m","val","transformMat4","transformCoordinates","tx","ty","tz","tw","transformQuat","q","qx","qy","qz","qw","w","ix","iy","iz","iw","project","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","lw","unproject","viewport","invProjectionView","viewX","viewY","viewWidth","viewHeight","reset","ZERO","RIGHT","LEFT","UP","DOWN","FORWARD","BACK","ONE","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 3D space.\r\n *\r\n * A three-component vector.\r\n *\r\n * @class Vector3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n */\r\nvar Vector3 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector3 (x, y, z)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector3#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set this Vector to point up.\r\n     *\r\n     * Sets the y component of the vector to 1, and the others to 0.\r\n     *\r\n     * @method Phaser.Math.Vector3#up\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    up: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 1;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector3.\r\n     *\r\n     * @method Phaser.Math.Vector3#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} A new Vector3 object containing this Vectors values.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector3(this.x, this.y, this.z);\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of two given Vectors.\r\n     *\r\n     * @method Phaser.Math.Vector3#crossVectors\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - The first Vector to multiply.\r\n     * @param {Phaser.Math.Vector3} b - The second Vector to multiply.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    crossVectors: function (a, b)\r\n    {\r\n        var ax = a.x;\r\n        var ay = a.y;\r\n        var az = a.z;\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict equality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector3#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to compare against.\r\n     *\r\n     * @return {boolean} True if the two vectors strictly match, otherwise false.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z));\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, and `z` components of this Vector to the given `x`, `y`, and `z` values.\r\n     *\r\n     * @method Phaser.Math.Vector3#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y and z components.\r\n     * @param {number} [y] - The y value to set for this Vector.\r\n     * @param {number} [z] - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    set: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector3#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector3#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        if (isFinite(scale))\r\n        {\r\n            this.x *= scale;\r\n            this.y *= scale;\r\n            this.z *= scale;\r\n        }\r\n        else\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.z = 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y` and `z` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector3#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        return x * x + y * y + z * z;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector3#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var len = x * x + y * y + z * z;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to dot product with this Vector3.\r\n     *\r\n     * @return {number} The dot product of this Vector and `v`.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z;\r\n    },\r\n\r\n    /**\r\n     * Calculate the cross (vector) product of this Vector (which will be modified) and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#cross\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector to cross product with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    cross: function (v)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var bx = v.x;\r\n        var by = v.y;\r\n        var bz = v.z;\r\n\r\n        this.x = ay * bz - az * by;\r\n        this.y = az * bx - ax * bz;\r\n        this.z = ax * by - ay * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector3#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} v - The Vector3 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix3 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat3: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = x * m[0] + y * m[3] + z * m[6];\r\n        this.y = x * m[1] + y * m[4] + z * m[7];\r\n        this.z = x * m[2] + y * m[5] + z * m[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12];\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13];\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transforms the coordinates of this Vector3 with the given Matrix4.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformCoordinates\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformCoordinates: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var tx = (x * m[0]) + (y * m[4]) + (z * m[8]) + m[12];\r\n        var ty = (x * m[1]) + (y * m[5]) + (z * m[9]) + m[13];\r\n        var tz = (x * m[2]) + (y * m[6]) + (z * m[10]) + m[14];\r\n        var tw = (x * m[3]) + (y * m[7]) + (z * m[11]) + m[15];\r\n\r\n        this.x = tx / tw;\r\n        this.y = ty / tw;\r\n        this.z = tz / tw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector3#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiplies this Vector3 by the specified matrix, applying a W divide. This is useful for projection,\r\n     * e.g. unprojecting a 2D point into 3D space.\r\n     *\r\n     * @method Phaser.Math.Vector3#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to multiply this Vector3 with.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    project: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var m = mat.val;\r\n\r\n        var a00 = m[0];\r\n        var a01 = m[1];\r\n        var a02 = m[2];\r\n        var a03 = m[3];\r\n        var a10 = m[4];\r\n        var a11 = m[5];\r\n        var a12 = m[6];\r\n        var a13 = m[7];\r\n        var a20 = m[8];\r\n        var a21 = m[9];\r\n        var a22 = m[10];\r\n        var a23 = m[11];\r\n        var a30 = m[12];\r\n        var a31 = m[13];\r\n        var a32 = m[14];\r\n        var a33 = m[15];\r\n\r\n        var lw = 1 / (x * a03 + y * a13 + z * a23 + a33);\r\n\r\n        this.x = (x * a00 + y * a10 + z * a20 + a30) * lw;\r\n        this.y = (x * a01 + y * a11 + z * a21 + a31) * lw;\r\n        this.z = (x * a02 + y * a12 + z * a22 + a32) * lw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Unproject this point from 2D space to 3D space.\r\n     * The point should have its x and y properties set to\r\n     * 2D screen space, and the z either at 0 (near plane)\r\n     * or 1 (far plane). The provided matrix is assumed to already\r\n     * be combined, i.e. projection * view * model.\r\n     *\r\n     * After this operation, this vector's (x, y, z) components will\r\n     * represent the unprojected 3D coordinate.\r\n     *\r\n     * @method Phaser.Math.Vector3#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} viewport - Screen x, y, width and height in pixels.\r\n     * @param {Phaser.Math.Matrix4} invProjectionView - Combined projection and view matrix.\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    unproject: function (viewport, invProjectionView)\r\n    {\r\n        var viewX = viewport.x;\r\n        var viewY = viewport.y;\r\n        var viewWidth = viewport.z;\r\n        var viewHeight = viewport.w;\r\n\r\n        var x = this.x - viewX;\r\n        var y = (viewHeight - this.y - 1) - viewY;\r\n        var z = this.z;\r\n\r\n        this.x = (2 * x) / viewWidth - 1;\r\n        this.y = (2 * y) / viewHeight - 1;\r\n        this.z = 2 * z - 1;\r\n\r\n        return this.project(invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector3#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector3} This Vector3.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * A static zero Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ZERO\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.ZERO = new Vector3();\r\n\r\n/**\r\n * A static right Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.RIGHT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.RIGHT = new Vector3(1, 0, 0);\r\n\r\n/**\r\n * A static left Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.LEFT\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.LEFT = new Vector3(-1, 0, 0);\r\n\r\n/**\r\n * A static up Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.UP\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.UP = new Vector3(0, -1, 0);\r\n\r\n/**\r\n * A static down Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.DOWN\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.DOWN = new Vector3(0, 1, 0);\r\n\r\n/**\r\n * A static forward Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.FORWARD\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.FORWARD = new Vector3(0, 0, 1);\r\n\r\n/**\r\n * A static back Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.BACK\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.BACK = new Vector3(0, 0, -1);\r\n\r\n/**\r\n * A static one Vector3 for use by reference.\r\n * \r\n * This constant is meant for comparison operations and should not be modified directly.\r\n *\r\n * @constant\r\n * @name Phaser.Math.Vector3.ONE\r\n * @type {Phaser.Math.Vector3}\r\n * @since 3.16.0\r\n */\r\nVector3.ONE = new Vector3(1, 1, 1);\r\n\r\nmodule.exports = Vector3;\r\n"]},"metadata":{},"sourceType":"script"}