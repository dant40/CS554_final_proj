{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('./Point');\n/**\r\n * Inverts a Point's coordinates.\r\n *\r\n * @function Phaser.Geom.Point.Negative\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point} point - The Point to invert.\r\n * @param {Phaser.Geom.Point} [out] - The Point to return the inverted coordinates in.\r\n *\r\n * @return {Phaser.Geom.Point} The modified `out` Point, or a new Point if none was provided.\r\n */\n\n\nvar Negative = function (point, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  return out.setTo(-point.x, -point.y);\n};\n\nmodule.exports = Negative;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/point/Negative.js"],"names":["Point","require","Negative","point","out","undefined","setTo","x","y","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,QAAQ,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EACf;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7C,SAAOI,GAAG,CAACE,KAAJ,CAAU,CAACH,KAAK,CAACI,CAAjB,EAAoB,CAACJ,KAAK,CAACK,CAA3B,CAAP;AACH,CALD;;AAOAC,MAAM,CAACC,OAAP,GAAiBR,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('./Point');\r\n\r\n/**\r\n * Inverts a Point's coordinates.\r\n *\r\n * @function Phaser.Geom.Point.Negative\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point} point - The Point to invert.\r\n * @param {Phaser.Geom.Point} [out] - The Point to return the inverted coordinates in.\r\n *\r\n * @return {Phaser.Geom.Point} The modified `out` Point, or a new Point if none was provided.\r\n */\r\nvar Negative = function (point, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    return out.setTo(-point.x, -point.y);\r\n};\r\n\r\nmodule.exports = Negative;\r\n"]},"metadata":{},"sourceType":"script"}