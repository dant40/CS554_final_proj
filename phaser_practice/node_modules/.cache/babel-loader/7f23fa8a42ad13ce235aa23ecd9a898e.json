{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Tileset = require('../../Tileset');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {array} [description]\r\n */\n\n\nvar ParseTilesets = function (json) {\n  var tilesets = [];\n  var tilesetsNames = [];\n\n  for (var i = 0; i < json.layer.length; i++) {\n    var layer = json.layer[i]; // A relative filepath to the source image (within Weltmeister) is used for the name\n\n    var tilesetName = layer.tilesetName; // Only add unique tilesets that have a valid name. Collision layers will have a blank name.\n\n    if (tilesetName !== '' && tilesetsNames.indexOf(tilesetName) === -1) {\n      tilesetsNames.push(tilesetName); // Tiles are stored with an ID relative to the tileset, rather than a globally unique ID\n      // across all tilesets. Also, tilesets in Weltmeister have no margin or padding.\n\n      tilesets.push(new Tileset(tilesetName, 0, layer.tilesize, layer.tilesize, 0, 0));\n    }\n  }\n\n  return tilesets;\n};\n\nmodule.exports = ParseTilesets;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/impact/ParseTilesets.js"],"names":["Tileset","require","ParseTilesets","json","tilesets","tilesetsNames","i","layer","length","tilesetName","indexOf","push","tilesize","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;AAEA;;;;;;;;;;;;AAUA,IAAIC,aAAa,GAAG,UAAUC,IAAV,EACpB;AACI,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,aAAa,GAAG,EAApB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EACA;AACI,QAAIC,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWD,CAAX,CAAZ,CADJ,CAGI;;AACA,QAAIG,WAAW,GAAGF,KAAK,CAACE,WAAxB,CAJJ,CAMI;;AACA,QAAIA,WAAW,KAAK,EAAhB,IAAsBJ,aAAa,CAACK,OAAd,CAAsBD,WAAtB,MAAuC,CAAC,CAAlE,EACA;AACIJ,MAAAA,aAAa,CAACM,IAAd,CAAmBF,WAAnB,EADJ,CAGI;AACA;;AACAL,MAAAA,QAAQ,CAACO,IAAT,CAAc,IAAIX,OAAJ,CAAYS,WAAZ,EAAyB,CAAzB,EAA4BF,KAAK,CAACK,QAAlC,EAA4CL,KAAK,CAACK,QAAlD,EAA4D,CAA5D,EAA+D,CAA/D,CAAd;AACH;AACJ;;AAED,SAAOR,QAAP;AACH,CAxBD;;AA0BAS,MAAM,CAACC,OAAP,GAAiBZ,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Tileset = require('../../Tileset');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {array} [description]\r\n */\r\nvar ParseTilesets = function (json)\r\n{\r\n    var tilesets = [];\r\n    var tilesetsNames = [];\r\n\r\n    for (var i = 0; i < json.layer.length; i++)\r\n    {\r\n        var layer = json.layer[i];\r\n\r\n        // A relative filepath to the source image (within Weltmeister) is used for the name\r\n        var tilesetName = layer.tilesetName;\r\n\r\n        // Only add unique tilesets that have a valid name. Collision layers will have a blank name.\r\n        if (tilesetName !== '' && tilesetsNames.indexOf(tilesetName) === -1)\r\n        {\r\n            tilesetsNames.push(tilesetName);\r\n\r\n            // Tiles are stored with an ID relative to the tileset, rather than a globally unique ID\r\n            // across all tilesets. Also, tilesets in Weltmeister have no margin or padding.\r\n            tilesets.push(new Tileset(tilesetName, 0, layer.tilesize, layer.tilesize, 0, 0));\r\n        }\r\n    }\r\n\r\n    return tilesets;\r\n};\r\n\r\nmodule.exports = ParseTilesets;\r\n"]},"metadata":{},"sourceType":"script"}