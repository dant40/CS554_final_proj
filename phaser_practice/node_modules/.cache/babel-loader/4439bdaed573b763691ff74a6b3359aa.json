{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Body = require('../lib/body/Body');\n/**\r\n * A component to apply force to Matter.js bodies.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Force\r\n * @since 3.0.0\r\n */\n\n\nvar Force = {\n  //  force = vec2 / point\n\n  /**\r\n   * Applies a force to a body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#applyForce\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  applyForce: function (force) {\n    this._tempVec2.set(this.body.position.x, this.body.position.y);\n\n    Body.applyForce(this.body, this._tempVec2, force);\n    return this;\n  },\n\n  /**\r\n   * Applies a force to a body from a given position.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#applyForceFrom\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} position - The position in which the force comes from.\r\n   * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  applyForceFrom: function (position, force) {\n    Body.applyForce(this.body, position, force);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the forward position of the body.\r\n   * \r\n   * Use very small values, such as 0.1, depending on the mass and required speed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrust\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrust: function (speed) {\n    var angle = this.body.angle;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the left position of the body.\r\n   * \r\n   * Use very small values, such as 0.1, depending on the mass and required speed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustLeft\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustLeft: function (speed) {\n    var angle = this.body.angle - Math.PI / 2;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the right position of the body.\r\n   * \r\n   * Use very small values, such as 0.1, depending on the mass and required speed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustRight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustRight: function (speed) {\n    var angle = this.body.angle + Math.PI / 2;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Apply thrust to the back position of the body.\r\n   * \r\n   * Use very small values, such as 0.1, depending on the mass and required speed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Force#thrustBack\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  thrustBack: function (speed) {\n    var angle = this.body.angle - Math.PI;\n\n    this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\n\n    Body.applyForce(this.body, {\n      x: this.body.position.x,\n      y: this.body.position.y\n    }, this._tempVec2);\n    return this;\n  }\n};\nmodule.exports = Force;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/components/Force.js"],"names":["Body","require","Force","applyForce","force","_tempVec2","set","body","position","x","y","applyForceFrom","thrust","speed","angle","Math","cos","sin","thrustLeft","PI","thrustRight","thrustBack","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\n\r\n/**\r\n * A component to apply force to Matter.js bodies.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Force\r\n * @since 3.0.0\r\n */\r\nvar Force = {\r\n\r\n    //  force = vec2 / point\r\n\r\n    /**\r\n     * Applies a force to a body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForce\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForce: function (force)\r\n    {\r\n        this._tempVec2.set(this.body.position.x, this.body.position.y);\r\n\r\n        Body.applyForce(this.body, this._tempVec2, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies a force to a body from a given position.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#applyForceFrom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} position - The position in which the force comes from.\r\n     * @param {Phaser.Math.Vector2} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    applyForceFrom: function (position, force)\r\n    {\r\n        Body.applyForce(this.body, position, force);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the forward position of the body.\r\n     * \r\n     * Use very small values, such as 0.1, depending on the mass and required speed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrust\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrust: function (speed)\r\n    {\r\n        var angle = this.body.angle;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the left position of the body.\r\n     * \r\n     * Use very small values, such as 0.1, depending on the mass and required speed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustLeft\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustLeft: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the right position of the body.\r\n     * \r\n     * Use very small values, such as 0.1, depending on the mass and required speed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustRight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustRight: function (speed)\r\n    {\r\n        var angle = this.body.angle + Math.PI / 2;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply thrust to the back position of the body.\r\n     * \r\n     * Use very small values, such as 0.1, depending on the mass and required speed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Force#thrustBack\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    thrustBack: function (speed)\r\n    {\r\n        var angle = this.body.angle - Math.PI;\r\n\r\n        this._tempVec2.set(speed * Math.cos(angle), speed * Math.sin(angle));\r\n\r\n        Body.applyForce(this.body, { x: this.body.position.x, y: this.body.position.y }, this._tempVec2);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Force;\r\n"]},"metadata":{},"sourceType":"script"}