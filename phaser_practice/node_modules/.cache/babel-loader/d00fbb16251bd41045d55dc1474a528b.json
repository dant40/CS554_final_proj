{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Determines the full screen support of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.fullscreen` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Fullscreen\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} available - Does the browser support the Full Screen API?\r\n * @property {boolean} keyboard - Does the browser support access to the Keyboard during Full Screen mode?\r\n * @property {string} cancel - If the browser supports the Full Screen API this holds the call you need to use to cancel it.\r\n * @property {string} request - If the browser supports the Full Screen API this holds the call you need to use to activate it.\r\n */\nvar Fullscreen = {\n  available: false,\n  cancel: '',\n  keyboard: false,\n  request: ''\n};\n/**\r\n* Checks for support of the Full Screen API.\r\n* \r\n* @ignore\r\n*/\n\nfunction init() {\n  var i;\n  var suffix1 = 'Fullscreen';\n  var suffix2 = 'FullScreen';\n  var fs = ['request' + suffix1, 'request' + suffix2, 'webkitRequest' + suffix1, 'webkitRequest' + suffix2, 'msRequest' + suffix1, 'msRequest' + suffix2, 'mozRequest' + suffix2, 'mozRequest' + suffix1];\n\n  for (i = 0; i < fs.length; i++) {\n    if (document.documentElement[fs[i]]) {\n      Fullscreen.available = true;\n      Fullscreen.request = fs[i];\n      break;\n    }\n  }\n\n  var cfs = ['cancel' + suffix2, 'exit' + suffix1, 'webkitCancel' + suffix2, 'webkitExit' + suffix1, 'msCancel' + suffix2, 'msExit' + suffix1, 'mozCancel' + suffix2, 'mozExit' + suffix1];\n\n  if (Fullscreen.available) {\n    for (i = 0; i < cfs.length; i++) {\n      if (document[cfs[i]]) {\n        Fullscreen.cancel = cfs[i];\n        break;\n      }\n    }\n  } //  Keyboard Input?\n  //  Safari 5.1 says it supports fullscreen keyboard, but is lying.\n\n\n  if (window['Element'] && Element['ALLOW_KEYBOARD_INPUT'] && !/ Version\\/5\\.1(?:\\.\\d+)? Safari\\//.test(navigator.userAgent)) {\n    Fullscreen.keyboard = true;\n  }\n\n  Object.defineProperty(Fullscreen, 'active', {\n    get: function () {\n      return !!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement);\n    }\n  });\n  return Fullscreen;\n}\n\nmodule.exports = init();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/device/Fullscreen.js"],"names":["Fullscreen","available","cancel","keyboard","request","init","i","suffix1","suffix2","fs","length","document","documentElement","cfs","window","Element","test","navigator","userAgent","Object","defineProperty","get","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;AAcA,IAAIA,UAAU,GAAG;AAEbC,EAAAA,SAAS,EAAE,KAFE;AAGbC,EAAAA,MAAM,EAAE,EAHK;AAIbC,EAAAA,QAAQ,EAAE,KAJG;AAKbC,EAAAA,OAAO,EAAE;AALI,CAAjB;AASA;;;;;;AAKA,SAASC,IAAT,GACA;AACI,MAAIC,CAAJ;AAEA,MAAIC,OAAO,GAAG,YAAd;AACA,MAAIC,OAAO,GAAG,YAAd;AAEA,MAAIC,EAAE,GAAG,CACL,YAAYF,OADP,EAEL,YAAYC,OAFP,EAGL,kBAAkBD,OAHb,EAIL,kBAAkBC,OAJb,EAKL,cAAcD,OALT,EAML,cAAcC,OANT,EAOL,eAAeA,OAPV,EAQL,eAAeD,OARV,CAAT;;AAWA,OAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGG,EAAE,CAACC,MAAnB,EAA2BJ,CAAC,EAA5B,EACA;AACI,QAAIK,QAAQ,CAACC,eAAT,CAAyBH,EAAE,CAACH,CAAD,CAA3B,CAAJ,EACA;AACIN,MAAAA,UAAU,CAACC,SAAX,GAAuB,IAAvB;AACAD,MAAAA,UAAU,CAACI,OAAX,GAAqBK,EAAE,CAACH,CAAD,CAAvB;AACA;AACH;AACJ;;AAED,MAAIO,GAAG,GAAG,CACN,WAAWL,OADL,EAEN,SAASD,OAFH,EAGN,iBAAiBC,OAHX,EAIN,eAAeD,OAJT,EAKN,aAAaC,OALP,EAMN,WAAWD,OANL,EAON,cAAcC,OAPR,EAQN,YAAYD,OARN,CAAV;;AAWA,MAAIP,UAAU,CAACC,SAAf,EACA;AACI,SAAKK,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGO,GAAG,CAACH,MAApB,EAA4BJ,CAAC,EAA7B,EACA;AACI,UAAIK,QAAQ,CAACE,GAAG,CAACP,CAAD,CAAJ,CAAZ,EACA;AACIN,QAAAA,UAAU,CAACE,MAAX,GAAoBW,GAAG,CAACP,CAAD,CAAvB;AACA;AACH;AACJ;AACJ,GAhDL,CAkDI;AACA;;;AACA,MAAIQ,MAAM,CAAC,SAAD,CAAN,IAAqBC,OAAO,CAAC,sBAAD,CAA5B,IAAwD,CAAE,mCAAD,CAAsCC,IAAtC,CAA2CC,SAAS,CAACC,SAArD,CAA7D,EACA;AACIlB,IAAAA,UAAU,CAACG,QAAX,GAAsB,IAAtB;AACH;;AAEDgB,EAAAA,MAAM,CAACC,cAAP,CAAsBpB,UAAtB,EAAkC,QAAlC,EAA4C;AAAEqB,IAAAA,GAAG,EAAE,YAAY;AAAE,aAAO,CAAC,EAAEV,QAAQ,CAACW,iBAAT,IAA8BX,QAAQ,CAACY,uBAAvC,IAAkEZ,QAAQ,CAACa,oBAA3E,IAAmGb,QAAQ,CAACc,mBAA9G,CAAR;AAA6I;AAAlK,GAA5C;AAEA,SAAOzB,UAAP;AACH;;AAED0B,MAAM,CAACC,OAAP,GAAiBtB,IAAI,EAArB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the full screen support of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.fullscreen` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Fullscreen\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} available - Does the browser support the Full Screen API?\r\n * @property {boolean} keyboard - Does the browser support access to the Keyboard during Full Screen mode?\r\n * @property {string} cancel - If the browser supports the Full Screen API this holds the call you need to use to cancel it.\r\n * @property {string} request - If the browser supports the Full Screen API this holds the call you need to use to activate it.\r\n */\r\nvar Fullscreen = {\r\n\r\n    available: false,\r\n    cancel: '',\r\n    keyboard: false,\r\n    request: ''\r\n\r\n};\r\n\r\n/**\r\n* Checks for support of the Full Screen API.\r\n* \r\n* @ignore\r\n*/\r\nfunction init ()\r\n{\r\n    var i;\r\n\r\n    var suffix1 = 'Fullscreen';\r\n    var suffix2 = 'FullScreen';\r\n\r\n    var fs = [\r\n        'request' + suffix1,\r\n        'request' + suffix2,\r\n        'webkitRequest' + suffix1,\r\n        'webkitRequest' + suffix2,\r\n        'msRequest' + suffix1,\r\n        'msRequest' + suffix2,\r\n        'mozRequest' + suffix2,\r\n        'mozRequest' + suffix1\r\n    ];\r\n\r\n    for (i = 0; i < fs.length; i++)\r\n    {\r\n        if (document.documentElement[fs[i]])\r\n        {\r\n            Fullscreen.available = true;\r\n            Fullscreen.request = fs[i];\r\n            break;\r\n        }\r\n    }\r\n\r\n    var cfs = [\r\n        'cancel' + suffix2,\r\n        'exit' + suffix1,\r\n        'webkitCancel' + suffix2,\r\n        'webkitExit' + suffix1,\r\n        'msCancel' + suffix2,\r\n        'msExit' + suffix1,\r\n        'mozCancel' + suffix2,\r\n        'mozExit' + suffix1\r\n    ];\r\n\r\n    if (Fullscreen.available)\r\n    {\r\n        for (i = 0; i < cfs.length; i++)\r\n        {\r\n            if (document[cfs[i]])\r\n            {\r\n                Fullscreen.cancel = cfs[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    //  Keyboard Input?\r\n    //  Safari 5.1 says it supports fullscreen keyboard, but is lying.\r\n    if (window['Element'] && Element['ALLOW_KEYBOARD_INPUT'] && !(/ Version\\/5\\.1(?:\\.\\d+)? Safari\\//).test(navigator.userAgent))\r\n    {\r\n        Fullscreen.keyboard = true;\r\n    }\r\n\r\n    Object.defineProperty(Fullscreen, 'active', { get: function () { return !!(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement); } });\r\n\r\n    return Fullscreen;\r\n}\r\n\r\nmodule.exports = init();\r\n"]},"metadata":{},"sourceType":"script"}