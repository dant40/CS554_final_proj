{"ast":null,"code":"/**\r\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n* The stiffness of constraints can be modified to create springs or elastic.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Constraint\r\n*/\nvar Constraint = {};\nmodule.exports = Constraint;\n\nvar Vertices = require('../geometry/Vertices');\n\nvar Vector = require('../geometry/Vector');\n\nvar Sleeping = require('../core/Sleeping');\n\nvar Bounds = require('../geometry/Bounds');\n\nvar Axes = require('../geometry/Axes');\n\nvar Common = require('../core/Common');\n\n(function () {\n  Constraint._warming = 0.4;\n  Constraint._torqueDampen = 1;\n  Constraint._minLength = 0.000001;\n  /**\r\n   * Creates a new constraint.\r\n   * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n   * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\r\n   * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\r\n   * For compound bodies, constraints must be applied to the parent body (not one of its parts).\r\n   * See the properties section below for detailed information on what you can pass via the `options` object.\r\n   * @method create\r\n   * @param {} options\r\n   * @return {constraint} constraint\r\n   */\n\n  Constraint.create = function (options) {\n    var constraint = options; // if bodies defined but no points, use body centre\n\n    if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n      x: 0,\n      y: 0\n    };\n    if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n      x: 0,\n      y: 0\n    }; // calculate static length using initial world space points\n\n    var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n        initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n        length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length; // option defaults\n\n    constraint.id = constraint.id || Common.nextId();\n    constraint.label = constraint.label || 'Constraint';\n    constraint.type = 'constraint';\n    constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n    constraint.damping = constraint.damping || 0;\n    constraint.angularStiffness = constraint.angularStiffness || 0;\n    constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n    constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n    constraint.plugin = {}; // render\n\n    var render = {\n      visible: true,\n      type: 'line',\n      anchors: true,\n      lineColor: null,\n      // custom Phaser property\n      lineOpacity: null,\n      // custom Phaser property\n      lineThickness: null,\n      // custom Phaser property\n      pinSize: null,\n      // custom Phaser property\n      anchorColor: null,\n      // custom Phaser property\n      anchorSize: null // custom Phaser property\n\n    };\n\n    if (constraint.length === 0 && constraint.stiffness > 0.1) {\n      render.type = 'pin';\n      render.anchors = false;\n    } else if (constraint.stiffness < 0.9) {\n      render.type = 'spring';\n    }\n\n    constraint.render = Common.extend(render, constraint.render);\n    return constraint;\n  };\n  /**\r\n   * Prepares for solving by constraint warming.\r\n   * @private\r\n   * @method preSolveAll\r\n   * @param {body[]} bodies\r\n   */\n\n\n  Constraint.preSolveAll = function (bodies) {\n    for (var i = 0; i < bodies.length; i += 1) {\n      var body = bodies[i],\n          impulse = body.constraintImpulse;\n\n      if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n        continue;\n      }\n\n      body.position.x += impulse.x;\n      body.position.y += impulse.y;\n      body.angle += impulse.angle;\n    }\n  };\n  /**\r\n   * Solves all constraints in a list of collisions.\r\n   * @private\r\n   * @method solveAll\r\n   * @param {constraint[]} constraints\r\n   * @param {number} timeScale\r\n   */\n\n\n  Constraint.solveAll = function (constraints, timeScale) {\n    // Solve fixed constraints first.\n    for (var i = 0; i < constraints.length; i += 1) {\n      var constraint = constraints[i],\n          fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n          fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n      if (fixedA || fixedB) {\n        Constraint.solve(constraints[i], timeScale);\n      }\n    } // Solve free constraints last.\n\n\n    for (i = 0; i < constraints.length; i += 1) {\n      constraint = constraints[i];\n      fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n      fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n\n      if (!fixedA && !fixedB) {\n        Constraint.solve(constraints[i], timeScale);\n      }\n    }\n  };\n  /**\r\n   * Solves a distance constraint with Gauss-Siedel method.\r\n   * @private\r\n   * @method solve\r\n   * @param {constraint} constraint\r\n   * @param {number} timeScale\r\n   */\n\n\n  Constraint.solve = function (constraint, timeScale) {\n    var bodyA = constraint.bodyA,\n        bodyB = constraint.bodyB,\n        pointA = constraint.pointA,\n        pointB = constraint.pointB;\n    if (!bodyA && !bodyB) return; // update reference angle\n\n    if (bodyA && !bodyA.isStatic) {\n      Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n      constraint.angleA = bodyA.angle;\n    } // update reference angle\n\n\n    if (bodyB && !bodyB.isStatic) {\n      Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n      constraint.angleB = bodyB.angle;\n    }\n\n    var pointAWorld = pointA,\n        pointBWorld = pointB;\n    if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n    if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n    if (!pointAWorld || !pointBWorld) return;\n    var delta = Vector.sub(pointAWorld, pointBWorld),\n        currentLength = Vector.magnitude(delta); // prevent singularity\n\n    if (currentLength < Constraint._minLength) {\n      currentLength = Constraint._minLength;\n    } // solve distance constraint with Gauss-Siedel method\n\n\n    var difference = (currentLength - constraint.length) / currentLength,\n        stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\n        force = Vector.mult(delta, difference * stiffness),\n        massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n        inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n        resistanceTotal = massTotal + inertiaTotal,\n        torque,\n        share,\n        normal,\n        normalVelocity,\n        relativeVelocity;\n\n    if (constraint.damping) {\n      var zero = Vector.create();\n      normal = Vector.div(delta, currentLength);\n      relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n      normalVelocity = Vector.dot(normal, relativeVelocity);\n    }\n\n    if (bodyA && !bodyA.isStatic) {\n      share = bodyA.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n      bodyA.constraintImpulse.x -= force.x * share;\n      bodyA.constraintImpulse.y -= force.y * share; // apply forces\n\n      bodyA.position.x -= force.x * share;\n      bodyA.position.y -= force.y * share; // apply damping\n\n      if (constraint.damping) {\n        bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\n        bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\n      } // apply torque\n\n\n      torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n      bodyA.constraintImpulse.angle -= torque;\n      bodyA.angle -= torque;\n    }\n\n    if (bodyB && !bodyB.isStatic) {\n      share = bodyB.inverseMass / massTotal; // keep track of applied impulses for post solving\n\n      bodyB.constraintImpulse.x += force.x * share;\n      bodyB.constraintImpulse.y += force.y * share; // apply forces\n\n      bodyB.position.x += force.x * share;\n      bodyB.position.y += force.y * share; // apply damping\n\n      if (constraint.damping) {\n        bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\n        bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\n      } // apply torque\n\n\n      torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n      bodyB.constraintImpulse.angle += torque;\n      bodyB.angle += torque;\n    }\n  };\n  /**\r\n   * Performs body updates required after solving constraints.\r\n   * @private\r\n   * @method postSolveAll\r\n   * @param {body[]} bodies\r\n   */\n\n\n  Constraint.postSolveAll = function (bodies) {\n    for (var i = 0; i < bodies.length; i++) {\n      var body = bodies[i],\n          impulse = body.constraintImpulse;\n\n      if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n        continue;\n      }\n\n      Sleeping.set(body, false); // update geometry and reset\n\n      for (var j = 0; j < body.parts.length; j++) {\n        var part = body.parts[j];\n        Vertices.translate(part.vertices, impulse);\n\n        if (j > 0) {\n          part.position.x += impulse.x;\n          part.position.y += impulse.y;\n        }\n\n        if (impulse.angle !== 0) {\n          Vertices.rotate(part.vertices, impulse.angle, body.position);\n          Axes.rotate(part.axes, impulse.angle);\n\n          if (j > 0) {\n            Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n          }\n        }\n\n        Bounds.update(part.bounds, part.vertices, body.velocity);\n      } // dampen the cached impulse for warming next step\n\n\n      impulse.angle *= Constraint._warming;\n      impulse.x *= Constraint._warming;\n      impulse.y *= Constraint._warming;\n    }\n  };\n  /**\r\n   * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\r\n   * @method pointAWorld\r\n   * @param {constraint} constraint\r\n   * @returns {vector} the world-space position\r\n   */\n\n\n  Constraint.pointAWorld = function (constraint) {\n    return {\n      x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\n      y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\n    };\n  };\n  /**\r\n   * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\r\n   * @method pointBWorld\r\n   * @param {constraint} constraint\r\n   * @returns {vector} the world-space position\r\n   */\n\n\n  Constraint.pointBWorld = function (constraint) {\n    return {\n      x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\n      y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\n    };\n  };\n  /*\r\n  *\r\n  *  Properties Documentation\r\n  *\r\n  */\n\n  /**\r\n   * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n   *\r\n   * @property id\r\n   * @type number\r\n   */\n\n  /**\r\n   * A `String` denoting the type of object.\r\n   *\r\n   * @property type\r\n   * @type string\r\n   * @default \"constraint\"\r\n   * @readOnly\r\n   */\n\n  /**\r\n   * An arbitrary `String` name to help the user identify and manage bodies.\r\n   *\r\n   * @property label\r\n   * @type string\r\n   * @default \"Constraint\"\r\n   */\n\n  /**\r\n   * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n   *\r\n   * @property render\r\n   * @type object\r\n   */\n\n  /**\r\n   * A flag that indicates if the constraint should be rendered.\r\n   *\r\n   * @property render.visible\r\n   * @type boolean\r\n   * @default true\r\n   */\n\n  /**\r\n   * A `Number` that defines the line width to use when rendering the constraint outline.\r\n   * A value of `0` means no outline will be rendered.\r\n   *\r\n   * @property render.lineWidth\r\n   * @type number\r\n   * @default 2\r\n   */\n\n  /**\r\n   * A `String` that defines the stroke style to use when rendering the constraint outline.\r\n   * It is the same as when using a canvas, so it accepts CSS style property values.\r\n   *\r\n   * @property render.strokeStyle\r\n   * @type string\r\n   * @default a random colour\r\n   */\n\n  /**\r\n   * A `String` that defines the constraint rendering type. \r\n   * The possible values are 'line', 'pin', 'spring'.\r\n   * An appropriate render type will be automatically chosen unless one is given in options.\r\n   *\r\n   * @property render.type\r\n   * @type string\r\n   * @default 'line'\r\n   */\n\n  /**\r\n   * A `Boolean` that defines if the constraint's anchor points should be rendered.\r\n   *\r\n   * @property render.anchors\r\n   * @type boolean\r\n   * @default true\r\n   */\n\n  /**\r\n   * The first possible `Body` that this constraint is attached to.\r\n   *\r\n   * @property bodyA\r\n   * @type body\r\n   * @default null\r\n   */\n\n  /**\r\n   * The second possible `Body` that this constraint is attached to.\r\n   *\r\n   * @property bodyB\r\n   * @type body\r\n   * @default null\r\n   */\n\n  /**\r\n   * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\r\n   *\r\n   * @property pointA\r\n   * @type vector\r\n   * @default { x: 0, y: 0 }\r\n   */\n\n  /**\r\n   * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\r\n   *\r\n   * @property pointB\r\n   * @type vector\r\n   * @default { x: 0, y: 0 }\r\n   */\n\n  /**\r\n   * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\r\n   * A value of `1` means the constraint should be very stiff.\r\n   * A value of `0.2` means the constraint acts like a soft spring.\r\n   *\r\n   * @property stiffness\r\n   * @type number\r\n   * @default 1\r\n   */\n\n  /**\r\n   * A `Number` that specifies the damping of the constraint, \r\n   * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\r\n   * Damping will only be apparent when the constraint also has a very low `stiffness`.\r\n   * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\r\n   * A value of `0` means the constraint will apply no damping.\r\n   *\r\n   * @property damping\r\n   * @type number\r\n   * @default 0\r\n   */\n\n  /**\r\n   * A `Number` that specifies the target resting length of the constraint. \r\n   * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\r\n   *\r\n   * @property length\r\n   * @type number\r\n   */\n\n  /**\r\n   * An object reserved for storing plugin-specific properties.\r\n   *\r\n   * @property plugin\r\n   * @type {}\r\n   */\n\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/constraint/Constraint.js"],"names":["Constraint","module","exports","Vertices","require","Vector","Sleeping","Bounds","Axes","Common","_warming","_torqueDampen","_minLength","create","options","constraint","bodyA","pointA","x","y","bodyB","pointB","initialPointA","add","position","initialPointB","length","magnitude","sub","id","nextId","label","type","stiffness","damping","angularStiffness","angleA","angle","angleB","plugin","render","visible","anchors","lineColor","lineOpacity","lineThickness","pinSize","anchorColor","anchorSize","extend","preSolveAll","bodies","i","body","impulse","constraintImpulse","isStatic","solveAll","constraints","timeScale","fixedA","fixedB","solve","rotate","pointAWorld","pointBWorld","delta","currentLength","difference","force","mult","massTotal","inverseMass","inertiaTotal","inverseInertia","resistanceTotal","torque","share","normal","normalVelocity","relativeVelocity","zero","div","positionPrev","dot","cross","postSolveAll","set","j","parts","part","translate","vertices","axes","rotateAbout","update","bounds","velocity"],"mappings":"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","sourcesContent":["/**\r\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n* The stiffness of constraints can be modified to create springs or elastic.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Constraint\r\n*/\r\n\r\nvar Constraint = {};\r\n\r\nmodule.exports = Constraint;\r\n\r\nvar Vertices = require('../geometry/Vertices');\r\nvar Vector = require('../geometry/Vector');\r\nvar Sleeping = require('../core/Sleeping');\r\nvar Bounds = require('../geometry/Bounds');\r\nvar Axes = require('../geometry/Axes');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n\r\n    Constraint._warming = 0.4;\r\n    Constraint._torqueDampen = 1;\r\n    Constraint._minLength = 0.000001;\r\n\r\n    /**\r\n     * Creates a new constraint.\r\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\r\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\r\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\r\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\r\n     * See the properties section below for detailed information on what you can pass via the `options` object.\r\n     * @method create\r\n     * @param {} options\r\n     * @return {constraint} constraint\r\n     */\r\n    Constraint.create = function(options) {\r\n        var constraint = options;\r\n\r\n        // if bodies defined but no points, use body centre\r\n        if (constraint.bodyA && !constraint.pointA)\r\n            constraint.pointA = { x: 0, y: 0 };\r\n        if (constraint.bodyB && !constraint.pointB)\r\n            constraint.pointB = { x: 0, y: 0 };\r\n\r\n        // calculate static length using initial world space points\r\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\r\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\r\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\r\n    \r\n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\r\n\r\n        // option defaults\r\n        constraint.id = constraint.id || Common.nextId();\r\n        constraint.label = constraint.label || 'Constraint';\r\n        constraint.type = 'constraint';\r\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\r\n        constraint.damping = constraint.damping || 0;\r\n        constraint.angularStiffness = constraint.angularStiffness || 0;\r\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\r\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\r\n        constraint.plugin = {};\r\n\r\n        // render\r\n        var render = {\r\n            visible: true,\r\n            type: 'line',\r\n            anchors: true,\r\n            lineColor: null, // custom Phaser property\r\n            lineOpacity: null, // custom Phaser property\r\n            lineThickness: null, // custom Phaser property\r\n            pinSize: null, // custom Phaser property\r\n            anchorColor: null, // custom Phaser property\r\n            anchorSize: null // custom Phaser property\r\n        };\r\n\r\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\r\n            render.type = 'pin';\r\n            render.anchors = false;\r\n        } else if (constraint.stiffness < 0.9) {\r\n            render.type = 'spring';\r\n        }\r\n\r\n        constraint.render = Common.extend(render, constraint.render);\r\n\r\n        return constraint;\r\n    };\r\n\r\n    /**\r\n     * Prepares for solving by constraint warming.\r\n     * @private\r\n     * @method preSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.preSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i += 1) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            body.position.x += impulse.x;\r\n            body.position.y += impulse.y;\r\n            body.angle += impulse.angle;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves all constraints in a list of collisions.\r\n     * @private\r\n     * @method solveAll\r\n     * @param {constraint[]} constraints\r\n     * @param {number} timeScale\r\n     */\r\n    Constraint.solveAll = function(constraints, timeScale) {\r\n        // Solve fixed constraints first.\r\n        for (var i = 0; i < constraints.length; i += 1) {\r\n            var constraint = constraints[i],\r\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\r\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (fixedA || fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n\r\n        // Solve free constraints last.\r\n        for (i = 0; i < constraints.length; i += 1) {\r\n            constraint = constraints[i];\r\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\r\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\r\n\r\n            if (!fixedA && !fixedB) {\r\n                Constraint.solve(constraints[i], timeScale);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Solves a distance constraint with Gauss-Siedel method.\r\n     * @private\r\n     * @method solve\r\n     * @param {constraint} constraint\r\n     * @param {number} timeScale\r\n     */\r\n    Constraint.solve = function(constraint, timeScale) {\r\n        var bodyA = constraint.bodyA,\r\n            bodyB = constraint.bodyB,\r\n            pointA = constraint.pointA,\r\n            pointB = constraint.pointB;\r\n\r\n        if (!bodyA && !bodyB)\r\n            return;\r\n\r\n        // update reference angle\r\n        if (bodyA && !bodyA.isStatic) {\r\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\r\n            constraint.angleA = bodyA.angle;\r\n        }\r\n        \r\n        // update reference angle\r\n        if (bodyB && !bodyB.isStatic) {\r\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\r\n            constraint.angleB = bodyB.angle;\r\n        }\r\n\r\n        var pointAWorld = pointA,\r\n            pointBWorld = pointB;\r\n\r\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\r\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\r\n\r\n        if (!pointAWorld || !pointBWorld)\r\n            return;\r\n\r\n        var delta = Vector.sub(pointAWorld, pointBWorld),\r\n            currentLength = Vector.magnitude(delta);\r\n\r\n        // prevent singularity\r\n        if (currentLength < Constraint._minLength) {\r\n            currentLength = Constraint._minLength;\r\n        }\r\n\r\n        // solve distance constraint with Gauss-Siedel method\r\n        var difference = (currentLength - constraint.length) / currentLength,\r\n            stiffness = constraint.stiffness < 1 ? constraint.stiffness * timeScale : constraint.stiffness,\r\n            force = Vector.mult(delta, difference * stiffness),\r\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\r\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\r\n            resistanceTotal = massTotal + inertiaTotal,\r\n            torque,\r\n            share,\r\n            normal,\r\n            normalVelocity,\r\n            relativeVelocity;\r\n\r\n        if (constraint.damping) {\r\n            var zero = Vector.create();\r\n            normal = Vector.div(delta, currentLength);\r\n\r\n            relativeVelocity = Vector.sub(\r\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\r\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\r\n            );\r\n\r\n            normalVelocity = Vector.dot(normal, relativeVelocity);\r\n        }\r\n\r\n        if (bodyA && !bodyA.isStatic) {\r\n            share = bodyA.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyA.constraintImpulse.x -= force.x * share;\r\n            bodyA.constraintImpulse.y -= force.y * share;\r\n\r\n            // apply forces\r\n            bodyA.position.x -= force.x * share;\r\n            bodyA.position.y -= force.y * share;\r\n\r\n            // apply damping\r\n            if (constraint.damping) {\r\n                bodyA.positionPrev.x -= constraint.damping * normal.x * normalVelocity * share;\r\n                bodyA.positionPrev.y -= constraint.damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyA.constraintImpulse.angle -= torque;\r\n            bodyA.angle -= torque;\r\n        }\r\n\r\n        if (bodyB && !bodyB.isStatic) {\r\n            share = bodyB.inverseMass / massTotal;\r\n\r\n            // keep track of applied impulses for post solving\r\n            bodyB.constraintImpulse.x += force.x * share;\r\n            bodyB.constraintImpulse.y += force.y * share;\r\n            \r\n            // apply forces\r\n            bodyB.position.x += force.x * share;\r\n            bodyB.position.y += force.y * share;\r\n\r\n            // apply damping\r\n            if (constraint.damping) {\r\n                bodyB.positionPrev.x += constraint.damping * normal.x * normalVelocity * share;\r\n                bodyB.positionPrev.y += constraint.damping * normal.y * normalVelocity * share;\r\n            }\r\n\r\n            // apply torque\r\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\r\n            bodyB.constraintImpulse.angle += torque;\r\n            bodyB.angle += torque;\r\n        }\r\n\r\n    };\r\n\r\n    /**\r\n     * Performs body updates required after solving constraints.\r\n     * @private\r\n     * @method postSolveAll\r\n     * @param {body[]} bodies\r\n     */\r\n    Constraint.postSolveAll = function(bodies) {\r\n        for (var i = 0; i < bodies.length; i++) {\r\n            var body = bodies[i],\r\n                impulse = body.constraintImpulse;\r\n\r\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\r\n                continue;\r\n            }\r\n\r\n            Sleeping.set(body, false);\r\n\r\n            // update geometry and reset\r\n            for (var j = 0; j < body.parts.length; j++) {\r\n                var part = body.parts[j];\r\n                \r\n                Vertices.translate(part.vertices, impulse);\r\n\r\n                if (j > 0) {\r\n                    part.position.x += impulse.x;\r\n                    part.position.y += impulse.y;\r\n                }\r\n\r\n                if (impulse.angle !== 0) {\r\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\r\n                    Axes.rotate(part.axes, impulse.angle);\r\n                    if (j > 0) {\r\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\r\n                    }\r\n                }\r\n\r\n                Bounds.update(part.bounds, part.vertices, body.velocity);\r\n            }\r\n\r\n            // dampen the cached impulse for warming next step\r\n            impulse.angle *= Constraint._warming;\r\n            impulse.x *= Constraint._warming;\r\n            impulse.y *= Constraint._warming;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\r\n     * @method pointAWorld\r\n     * @param {constraint} constraint\r\n     * @returns {vector} the world-space position\r\n     */\r\n    Constraint.pointAWorld = function(constraint) {\r\n        return {\r\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + constraint.pointA.x,\r\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + constraint.pointA.y\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\r\n     * @method pointBWorld\r\n     * @param {constraint} constraint\r\n     * @returns {vector} the world-space position\r\n     */\r\n    Constraint.pointBWorld = function(constraint) {\r\n        return {\r\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + constraint.pointB.x,\r\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + constraint.pointB.y\r\n        };\r\n    };\r\n\r\n    /*\r\n    *\r\n    *  Properties Documentation\r\n    *\r\n    */\r\n\r\n    /**\r\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\r\n     *\r\n     * @property id\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * A `String` denoting the type of object.\r\n     *\r\n     * @property type\r\n     * @type string\r\n     * @default \"constraint\"\r\n     * @readOnly\r\n     */\r\n\r\n    /**\r\n     * An arbitrary `String` name to help the user identify and manage bodies.\r\n     *\r\n     * @property label\r\n     * @type string\r\n     * @default \"Constraint\"\r\n     */\r\n\r\n    /**\r\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\r\n     *\r\n     * @property render\r\n     * @type object\r\n     */\r\n\r\n    /**\r\n     * A flag that indicates if the constraint should be rendered.\r\n     *\r\n     * @property render.visible\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * A `Number` that defines the line width to use when rendering the constraint outline.\r\n     * A value of `0` means no outline will be rendered.\r\n     *\r\n     * @property render.lineWidth\r\n     * @type number\r\n     * @default 2\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\r\n     * It is the same as when using a canvas, so it accepts CSS style property values.\r\n     *\r\n     * @property render.strokeStyle\r\n     * @type string\r\n     * @default a random colour\r\n     */\r\n\r\n    /**\r\n     * A `String` that defines the constraint rendering type. \r\n     * The possible values are 'line', 'pin', 'spring'.\r\n     * An appropriate render type will be automatically chosen unless one is given in options.\r\n     *\r\n     * @property render.type\r\n     * @type string\r\n     * @default 'line'\r\n     */\r\n\r\n    /**\r\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\r\n     *\r\n     * @property render.anchors\r\n     * @type boolean\r\n     * @default true\r\n     */\r\n\r\n    /**\r\n     * The first possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyA\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * The second possible `Body` that this constraint is attached to.\r\n     *\r\n     * @property bodyB\r\n     * @type body\r\n     * @default null\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointA\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\r\n     *\r\n     * @property pointB\r\n     * @type vector\r\n     * @default { x: 0, y: 0 }\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\r\n     * A value of `1` means the constraint should be very stiff.\r\n     * A value of `0.2` means the constraint acts like a soft spring.\r\n     *\r\n     * @property stiffness\r\n     * @type number\r\n     * @default 1\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the damping of the constraint, \r\n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\r\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\r\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\r\n     * A value of `0` means the constraint will apply no damping.\r\n     *\r\n     * @property damping\r\n     * @type number\r\n     * @default 0\r\n     */\r\n\r\n    /**\r\n     * A `Number` that specifies the target resting length of the constraint. \r\n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\r\n     *\r\n     * @property length\r\n     * @type number\r\n     */\r\n\r\n    /**\r\n     * An object reserved for storing plugin-specific properties.\r\n     *\r\n     * @property plugin\r\n     * @type {}\r\n     */\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}