{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar SetTileCollision = require('./SetTileCollision');\n/**\r\n * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n * Collision information in the region will be recalculated.\r\n *\r\n * @function Phaser.Tilemaps.Components.Fill\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} index - The tile index to fill the area with.\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The tile layer to use. If not given the current layer is used.\r\n */\n\n\nvar Fill = function (index, tileX, tileY, width, height, recalculateFaces, layer) {\n  var doesIndexCollide = layer.collideIndexes.indexOf(index) !== -1;\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n  for (var i = 0; i < tiles.length; i++) {\n    tiles[i].index = index;\n    SetTileCollision(tiles[i], doesIndexCollide);\n  }\n\n  if (recalculateFaces) {\n    // Recalculate the faces within the area and neighboring tiles\n    CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n  }\n};\n\nmodule.exports = Fill;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/Fill.js"],"names":["GetTilesWithin","require","CalculateFacesWithin","SetTileCollision","Fill","index","tileX","tileY","width","height","recalculateFaces","layer","doesIndexCollide","collideIndexes","indexOf","tiles","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIG,IAAI,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsCC,MAAtC,EAA8CC,gBAA9C,EAAgEC,KAAhE,EACX;AACI,MAAIC,gBAAgB,GAAID,KAAK,CAACE,cAAN,CAAqBC,OAArB,CAA6BT,KAA7B,MAAwC,CAAC,CAAjE;AAEA,MAAIU,KAAK,GAAGf,cAAc,CAACM,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B,IAA9B,EAAoCE,KAApC,CAA1B;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACID,IAAAA,KAAK,CAACC,CAAD,CAAL,CAASX,KAAT,GAAiBA,KAAjB;AAEAF,IAAAA,gBAAgB,CAACY,KAAK,CAACC,CAAD,CAAN,EAAWJ,gBAAX,CAAhB;AACH;;AAED,MAAIF,gBAAJ,EACA;AACI;AACAR,IAAAA,oBAAoB,CAACI,KAAK,GAAG,CAAT,EAAYC,KAAK,GAAG,CAApB,EAAuBC,KAAK,GAAG,CAA/B,EAAkCC,MAAM,GAAG,CAA3C,EAA8CE,KAA9C,CAApB;AACH;AACJ,CAlBD;;AAoBAO,MAAM,CAACC,OAAP,GAAiBf,IAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetTileCollision = require('./SetTileCollision');\r\n\r\n/**\r\n * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n * Collision information in the region will be recalculated.\r\n *\r\n * @function Phaser.Tilemaps.Components.Fill\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} index - The tile index to fill the area with.\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {boolean} recalculateFaces - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The tile layer to use. If not given the current layer is used.\r\n */\r\nvar Fill = function (index, tileX, tileY, width, height, recalculateFaces, layer)\r\n{\r\n    var doesIndexCollide = (layer.collideIndexes.indexOf(index) !== -1);\r\n\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        tiles[i].index = index;\r\n\r\n        SetTileCollision(tiles[i], doesIndexCollide);\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the area and neighboring tiles\r\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = Fill;\r\n"]},"metadata":{},"sourceType":"script"}