{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Rotate a given point by a given angle around the origin (0, 0), in an anti-clockwise direction.\r\n *\r\n * @function Phaser.Math.Rotate\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} angle - The angle to be rotated by in an anticlockwise direction.\r\n *\r\n * @return {Phaser.Geom.Point} The given point, rotated by the given angle in an anticlockwise direction.\r\n */\nvar Rotate = function (point, angle) {\n  var x = point.x;\n  var y = point.y;\n  point.x = x * Math.cos(angle) - y * Math.sin(angle);\n  point.y = x * Math.sin(angle) + y * Math.cos(angle);\n  return point;\n};\n\nmodule.exports = Rotate;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Rotate.js"],"names":["Rotate","point","angle","x","y","Math","cos","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,MAAM,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EACb;AACI,MAAIC,CAAC,GAAGF,KAAK,CAACE,CAAd;AACA,MAAIC,CAAC,GAAGH,KAAK,CAACG,CAAd;AAEAH,EAAAA,KAAK,CAACE,CAAN,GAAWA,CAAC,GAAGE,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAL,GAAyBE,CAAC,GAAGC,IAAI,CAACE,GAAL,CAASL,KAAT,CAAvC;AACAD,EAAAA,KAAK,CAACG,CAAN,GAAWD,CAAC,GAAGE,IAAI,CAACE,GAAL,CAASL,KAAT,CAAL,GAAyBE,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAvC;AAEA,SAAOD,KAAP;AACH,CATD;;AAWAO,MAAM,CAACC,OAAP,GAAiBT,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Rotate a given point by a given angle around the origin (0, 0), in an anti-clockwise direction.\r\n *\r\n * @function Phaser.Math.Rotate\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} angle - The angle to be rotated by in an anticlockwise direction.\r\n *\r\n * @return {Phaser.Geom.Point} The given point, rotated by the given angle in an anticlockwise direction.\r\n */\r\nvar Rotate = function (point, angle)\r\n{\r\n    var x = point.x;\r\n    var y = point.y;\r\n\r\n    point.x = (x * Math.cos(angle)) - (y * Math.sin(angle));\r\n    point.y = (x * Math.sin(angle)) + (y * Math.cos(angle));\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = Rotate;\r\n"]},"metadata":{},"sourceType":"script"}