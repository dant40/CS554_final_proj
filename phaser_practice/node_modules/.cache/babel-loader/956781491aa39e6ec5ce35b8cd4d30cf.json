{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A Camera Fade effect.\r\n *\r\n * This effect will fade the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Fade\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Fade = new Class({\n  initialize: function Fade(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * Has this effect finished running?\r\n     *\r\n     * This is different from `isRunning` because it remains set to `true` when the effect is over,\r\n     * until the effect is either reset or started again.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#isComplete\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isComplete = false;\n    /**\r\n     * The direction of the fade.\r\n     * `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#direction\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n\n    this.direction = true;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.5.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The value of the red color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#red\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.red = 0;\n    /**\r\n     * The value of the green color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#green\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.green = 0;\n    /**\r\n     * The value of the blue color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#blue\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.blue = 0;\n    /**\r\n     * The value of the alpha channel used during the fade effect.\r\n     * A value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#alpha\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.alpha = 0;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#progress\r\n     * @type {number}\r\n     * @since 3.5.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdate\r\n     * @type {?Phaser.Types.Cameras.Scene2D.CameraFadeCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * Fades the Camera to or from the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @since 3.5.0\r\n   *\r\n   * @param {boolean} [direction=true] - The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraFadeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function (direction, duration, red, green, blue, force, callback, context) {\n    if (direction === undefined) {\n      direction = true;\n    }\n\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    if (red === undefined) {\n      red = 0;\n    }\n\n    if (green === undefined) {\n      green = 0;\n    }\n\n    if (blue === undefined) {\n      blue = 0;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    if (!force && this.isRunning) {\n      return this.camera;\n    }\n\n    this.isRunning = true;\n    this.isComplete = false;\n    this.duration = duration;\n    this.direction = direction;\n    this.progress = 0;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = direction ? Number.MIN_VALUE : 1;\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    var eventName = direction ? Events.FADE_OUT_START : Events.FADE_IN_START;\n    this.camera.emit(eventName, this.camera, this, duration, red, green, blue);\n    return this.camera;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#update\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._onUpdate) {\n      this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\n    }\n\n    if (this._elapsed < this.duration) {\n      this.alpha = this.direction ? this.progress : 1 - this.progress;\n    } else {\n      this.alpha = this.direction ? 1 : 0;\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally by the Canvas Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderCanvas\r\n   * @since 3.5.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderCanvas: function (ctx) {\n    if (!this.isRunning && !this.isComplete) {\n      return false;\n    }\n\n    var camera = this.camera;\n    ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\n    ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\n    return true;\n  },\n\n  /**\r\n   * Called internally by the WebGL Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderWebGL\r\n   * @since 3.5.0\r\n   *\r\n   * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n   * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderWebGL: function (pipeline, getTintFunction) {\n    if (!this.isRunning && !this.isComplete) {\n      return false;\n    }\n\n    var camera = this.camera;\n    var red = this.red / 255;\n    var blue = this.blue / 255;\n    var green = this.green / 255;\n    pipeline.drawFillRect(camera._cx, camera._cy, camera._cw, camera._ch, getTintFunction(red, green, blue, 1), this.alpha);\n    return true;\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.5.0\r\n   */\n  effectComplete: function () {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.isComplete = true;\n    var eventName = this.direction ? Events.FADE_OUT_COMPLETE : Events.FADE_IN_COMPLETE;\n    this.camera.emit(eventName, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#reset\r\n   * @since 3.5.0\r\n   */\n  reset: function () {\n    this.isRunning = false;\n    this.isComplete = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Fade#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.camera = null;\n  }\n});\nmodule.exports = Fade;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/effects/Fade.js"],"names":["Clamp","require","Class","Events","Fade","initialize","camera","isRunning","isComplete","direction","duration","red","green","blue","alpha","progress","_elapsed","_onUpdate","_onUpdateScope","start","force","callback","context","undefined","scene","Number","MIN_VALUE","eventName","FADE_OUT_START","FADE_IN_START","emit","update","time","delta","call","effectComplete","postRenderCanvas","ctx","fillStyle","fillRect","_cx","_cy","_cw","_ch","postRenderWebGL","pipeline","getTintFunction","drawFillRect","FADE_OUT_COMPLETE","FADE_IN_COMPLETE","reset","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,WAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIG,IAAI,GAAG,IAAIF,KAAJ,CAAU;AAEjBG,EAAAA,UAAU,EAEV,SAASD,IAAT,CAAeE,MAAf,EACA;AACI;;;;;;;;AAQA,SAAKA,MAAL,GAAcA,MAAd;AAEA;;;;;;;;;;AASA,SAAKC,SAAL,GAAiB,KAAjB;AAEA;;;;;;;;;;;;;AAYA,SAAKC,UAAL,GAAkB,KAAlB;AAEA;;;;;;;;;;AASA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;;;;;;;;;AASA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,GAAL,GAAW,CAAX;AAEA;;;;;;;;;;AASA,SAAKC,KAAL,GAAa,CAAb;AAEA;;;;;;;;;;AASA,SAAKC,IAAL,GAAY,CAAZ;AAEA;;;;;;;;;;AASA,SAAKC,KAAL,GAAa,CAAb;AAEA;;;;;;;;AAOA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;AAQA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,SAAL;AAEA;;;;;;;;;AAQA,SAAKC,cAAL;AACH,GAlJgB;;AAoJjB;;;;;;;;;;;;;;;;;;;;AAoBAC,EAAAA,KAAK,EAAE,UAAUV,SAAV,EAAqBC,QAArB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,IAA3C,EAAiDO,KAAjD,EAAwDC,QAAxD,EAAkEC,OAAlE,EACP;AACI,QAAIb,SAAS,KAAKc,SAAlB,EAA6B;AAAEd,MAAAA,SAAS,GAAG,IAAZ;AAAmB;;AAClD,QAAIC,QAAQ,KAAKa,SAAjB,EAA4B;AAAEb,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,QAAIC,GAAG,KAAKY,SAAZ,EAAuB;AAAEZ,MAAAA,GAAG,GAAG,CAAN;AAAU;;AACnC,QAAIC,KAAK,KAAKW,SAAd,EAAyB;AAAEX,MAAAA,KAAK,GAAG,CAAR;AAAY;;AACvC,QAAIC,IAAI,KAAKU,SAAb,EAAwB;AAAEV,MAAAA,IAAI,GAAG,CAAP;AAAW;;AACrC,QAAIO,KAAK,KAAKG,SAAd,EAAyB;AAAEH,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAC3C,QAAIC,QAAQ,KAAKE,SAAjB,EAA4B;AAAEF,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,QAAIC,OAAO,KAAKC,SAAhB,EAA2B;AAAED,MAAAA,OAAO,GAAG,KAAKhB,MAAL,CAAYkB,KAAtB;AAA8B;;AAE3D,QAAI,CAACJ,KAAD,IAAU,KAAKb,SAAnB,EACA;AACI,aAAO,KAAKD,MAAZ;AACH;;AAED,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKM,QAAL,GAAgB,CAAhB;AAEA,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAcL,SAAD,GAAcgB,MAAM,CAACC,SAArB,GAAiC,CAA9C;AAEA,SAAKV,QAAL,GAAgB,CAAhB;AAEA,SAAKC,SAAL,GAAiBI,QAAjB;AACA,SAAKH,cAAL,GAAsBI,OAAtB;AAEA,QAAIK,SAAS,GAAIlB,SAAD,GAAcN,MAAM,CAACyB,cAArB,GAAsCzB,MAAM,CAAC0B,aAA7D;AAEA,SAAKvB,MAAL,CAAYwB,IAAZ,CAAiBH,SAAjB,EAA4B,KAAKrB,MAAjC,EAAyC,IAAzC,EAA+CI,QAA/C,EAAyDC,GAAzD,EAA8DC,KAA9D,EAAqEC,IAArE;AAEA,WAAO,KAAKP,MAAZ;AACH,GA7MgB;;AA+MjB;;;;;;;;;AASAyB,EAAAA,MAAM,EAAE,UAAUC,IAAV,EAAgBC,KAAhB,EACR;AACI,QAAI,CAAC,KAAK1B,SAAV,EACA;AACI;AACH;;AAED,SAAKS,QAAL,IAAiBiB,KAAjB;AAEA,SAAKlB,QAAL,GAAgBf,KAAK,CAAC,KAAKgB,QAAL,GAAgB,KAAKN,QAAtB,EAAgC,CAAhC,EAAmC,CAAnC,CAArB;;AAEA,QAAI,KAAKO,SAAT,EACA;AACI,WAAKA,SAAL,CAAeiB,IAAf,CAAoB,KAAKhB,cAAzB,EAAyC,KAAKZ,MAA9C,EAAsD,KAAKS,QAA3D;AACH;;AAED,QAAI,KAAKC,QAAL,GAAgB,KAAKN,QAAzB,EACA;AACI,WAAKI,KAAL,GAAc,KAAKL,SAAN,GAAmB,KAAKM,QAAxB,GAAmC,IAAI,KAAKA,QAAzD;AACH,KAHD,MAKA;AACI,WAAKD,KAAL,GAAc,KAAKL,SAAN,GAAmB,CAAnB,GAAuB,CAApC;AACA,WAAK0B,cAAL;AACH;AACJ,GAjPgB;;AAmPjB;;;;;;;;;;AAUAC,EAAAA,gBAAgB,EAAE,UAAUC,GAAV,EAClB;AACI,QAAI,CAAC,KAAK9B,SAAN,IAAmB,CAAC,KAAKC,UAA7B,EACA;AACI,aAAO,KAAP;AACH;;AAED,QAAIF,MAAM,GAAG,KAAKA,MAAlB;AAEA+B,IAAAA,GAAG,CAACC,SAAJ,GAAgB,UAAU,KAAK3B,GAAf,GAAqB,GAArB,GAA2B,KAAKC,KAAhC,GAAwC,GAAxC,GAA8C,KAAKC,IAAnD,GAA0D,GAA1D,GAAgE,KAAKC,KAArE,GAA6E,GAA7F;AACAuB,IAAAA,GAAG,CAACE,QAAJ,CAAajC,MAAM,CAACkC,GAApB,EAAyBlC,MAAM,CAACmC,GAAhC,EAAqCnC,MAAM,CAACoC,GAA5C,EAAiDpC,MAAM,CAACqC,GAAxD;AAEA,WAAO,IAAP;AACH,GA1QgB;;AA4QjB;;;;;;;;;;;AAWAC,EAAAA,eAAe,EAAE,UAAUC,QAAV,EAAoBC,eAApB,EACjB;AACI,QAAI,CAAC,KAAKvC,SAAN,IAAmB,CAAC,KAAKC,UAA7B,EACA;AACI,aAAO,KAAP;AACH;;AAED,QAAIF,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIK,GAAG,GAAG,KAAKA,GAAL,GAAW,GAArB;AACA,QAAIE,IAAI,GAAG,KAAKA,IAAL,GAAY,GAAvB;AACA,QAAID,KAAK,GAAG,KAAKA,KAAL,GAAa,GAAzB;AAEAiC,IAAAA,QAAQ,CAACE,YAAT,CACIzC,MAAM,CAACkC,GADX,EACgBlC,MAAM,CAACmC,GADvB,EAC4BnC,MAAM,CAACoC,GADnC,EACwCpC,MAAM,CAACqC,GAD/C,EAEIG,eAAe,CAACnC,GAAD,EAAMC,KAAN,EAAaC,IAAb,EAAmB,CAAnB,CAFnB,EAGI,KAAKC,KAHT;AAMA,WAAO,IAAP;AACH,GA1SgB;;AA4SjB;;;;;;;;AAQAqB,EAAAA,cAAc,EAAE,YAChB;AACI,SAAKlB,SAAL,GAAiB,IAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AAEA,SAAKX,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AAEA,QAAImB,SAAS,GAAI,KAAKlB,SAAN,GAAmBN,MAAM,CAAC6C,iBAA1B,GAA8C7C,MAAM,CAAC8C,gBAArE;AAEA,SAAK3C,MAAL,CAAYwB,IAAZ,CAAiBH,SAAjB,EAA4B,KAAKrB,MAAjC,EAAyC,IAAzC;AACH,GA/TgB;;AAiUjB;;;;;;;AAOA4C,EAAAA,KAAK,EAAE,YACP;AACI,SAAK3C,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AAEA,SAAKS,SAAL,GAAiB,IAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACH,GA/UgB;;AAiVjB;;;;;;AAMAiC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKD,KAAL;AAEA,SAAK5C,MAAL,GAAc,IAAd;AACH;AA5VgB,CAAV,CAAX;AAgWA8C,MAAM,CAACC,OAAP,GAAiBjD,IAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar Events = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Fade effect.\r\n *\r\n * This effect will fade the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is faded. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Fade\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Fade = new Class({\r\n\r\n    initialize:\r\n\r\n    function Fade (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readonly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * Has this effect finished running?\r\n         *\r\n         * This is different from `isRunning` because it remains set to `true` when the effect is over,\r\n         * until the effect is either reset or started again.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#isComplete\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isComplete = false;\r\n\r\n        /**\r\n         * The direction of the fade.\r\n         * `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#direction\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.5.0\r\n         */\r\n        this.direction = true;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#duration\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The value of the red color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#red\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.red = 0;\r\n\r\n        /**\r\n         * The value of the green color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#green\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.green = 0;\r\n\r\n        /**\r\n         * The value of the blue color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#blue\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.blue = 0;\r\n\r\n        /**\r\n         * The value of the alpha channel used during the fade effect.\r\n         * A value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#alpha\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.alpha = 0;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdate\r\n         * @type {?Phaser.Types.Cameras.Scene2D.CameraFadeCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Fade#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera to or from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#start\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n     * @since 3.5.0\r\n     *\r\n     * @param {boolean} [direction=true] - The direction of the fade. `true` = fade out (transparent to color), `false` = fade in (color to transparent)\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraFadeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (direction, duration, red, green, blue, force, callback, context)\r\n    {\r\n        if (direction === undefined) { direction = true; }\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (red === undefined) { red = 0; }\r\n        if (green === undefined) { green = 0; }\r\n        if (blue === undefined) { blue = 0; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.isComplete = false;\r\n        this.duration = duration;\r\n        this.direction = direction;\r\n        this.progress = 0;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = (direction) ? Number.MIN_VALUE : 1;\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        var eventName = (direction) ? Events.FADE_OUT_START : Events.FADE_IN_START;\r\n\r\n        this.camera.emit(eventName, this.camera, this, duration, red, green, blue);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.alpha = (this.direction) ? this.progress : 1 - this.progress;\r\n        }\r\n        else\r\n        {\r\n            this.alpha = (this.direction) ? 1 : 0;\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally by the Canvas Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderCanvas\r\n     * @since 3.5.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderCanvas: function (ctx)\r\n    {\r\n        if (!this.isRunning && !this.isComplete)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n\r\n        ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\r\n        ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally by the WebGL Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#postRenderWebGL\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n     * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderWebGL: function (pipeline, getTintFunction)\r\n    {\r\n        if (!this.isRunning && !this.isComplete)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n        var red = this.red / 255;\r\n        var blue = this.blue / 255;\r\n        var green = this.green / 255;\r\n\r\n        pipeline.drawFillRect(\r\n            camera._cx, camera._cy, camera._cw, camera._ch,\r\n            getTintFunction(red, green, blue, 1),\r\n            this.alpha\r\n        );\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#effectComplete\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n        this.isComplete = true;\r\n\r\n        var eventName = (this.direction) ? Events.FADE_OUT_COMPLETE : Events.FADE_IN_COMPLETE;\r\n\r\n        this.camera.emit(eventName, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n        this.isComplete = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Fade#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Fade;\r\n"]},"metadata":{},"sourceType":"script"}