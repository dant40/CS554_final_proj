{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar TweenBuilder = require('./builders/TweenBuilder');\n\nvar TWEEN_CONST = require('./tween/const');\n/**\r\n * @classdesc\r\n * A Timeline combines multiple Tweens into one. Its overall behavior is otherwise similar to a single Tween.\r\n *\r\n * The Timeline updates all of its Tweens simultaneously. Its methods allow you to easily build a sequence\r\n * of Tweens (each one starting after the previous one) or run multiple Tweens at once during given parts of the Timeline.\r\n *\r\n * @class Timeline\r\n * @memberof Phaser.Tweens\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tweens.TweenManager} manager - The Tween Manager which owns this Timeline.\r\n */\n\n\nvar Timeline = new Class({\n  Extends: EventEmitter,\n  initialize: function Timeline(manager) {\n    EventEmitter.call(this);\n    /**\r\n     * The Tween Manager which owns this Timeline.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#manager\r\n     * @type {Phaser.Tweens.TweenManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.manager = manager;\n    /**\r\n     * A constant value which allows this Timeline to be easily identified as one.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#isTimeline\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.isTimeline = true;\n    /**\r\n     * An array of Tween objects, each containing a unique property and target being tweened.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#data\r\n     * @type {array}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.data = [];\n    /**\r\n     * The cached size of the data array.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#totalData\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalData = 0;\n    /**\r\n     * If true then duration, delay, etc values are all frame totals, rather than ms.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#useFrames\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.useFrames = false;\n    /**\r\n     * Scales the time applied to this Timeline. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n     * Value isn't used when calculating total duration of the Timeline, it's a run-time delta adjustment only.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * Loop this Timeline? Can be -1 for an infinite loop, or an integer.\r\n     * When enabled it will play through ALL Tweens again (use Tween.repeat to loop a single tween)\r\n     *\r\n     * @name Phaser.Tweens.Timeline#loop\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loop = 0;\n    /**\r\n     * Time in ms/frames before this Timeline loops.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#loopDelay\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loopDelay = 0;\n    /**\r\n     * How many loops are left to run?\r\n     *\r\n     * @name Phaser.Tweens.Timeline#loopCounter\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loopCounter = 0;\n    /**\r\n     * Time in ms/frames before the 'onComplete' event fires. This never fires if loop = true (as it never completes)\r\n     *\r\n     * @name Phaser.Tweens.Timeline#completeDelay\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.completeDelay = 0;\n    /**\r\n     * Countdown timer value, as used by `loopDelay` and `completeDelay`.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#countdown\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.countdown = 0;\n    /**\r\n     * The current state of the Timeline.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#state\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.state = TWEEN_CONST.PENDING_ADD;\n    /**\r\n     * The state of the Timeline when it was paused (used by Resume)\r\n     *\r\n     * @name Phaser.Tweens.Timeline#_pausedState\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._pausedState = TWEEN_CONST.PENDING_ADD;\n    /**\r\n     * Does the Timeline start off paused? (if so it needs to be started with Timeline.play)\r\n     *\r\n     * @name Phaser.Tweens.Timeline#paused\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.paused = false;\n    /**\r\n     * Elapsed time in ms/frames of this run through of the Timeline.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#elapsed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.elapsed = 0;\n    /**\r\n     * Total elapsed time in ms/frames of the entire Timeline, including looping.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#totalElapsed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalElapsed = 0;\n    /**\r\n     * Time in ms/frames for the whole Timeline to play through once, excluding loop amounts and loop delays.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * Value between 0 and 1. The amount of progress through the Timeline, _excluding loops_.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#progress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Time in ms/frames for all Tweens in this Timeline to complete (including looping)\r\n     *\r\n     * @name Phaser.Tweens.Timeline#totalDuration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalDuration = 0;\n    /**\r\n     * Value between 0 and 1. The amount through the entire Timeline, including looping.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#totalProgress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalProgress = 0;\n    /**\r\n     * An object containing the different Tween callback functions.\r\n     * \r\n     * You can either set these in the Tween config, or by calling the `Tween.setCallback` method.\r\n     * \r\n     * `onComplete` When the Timeline finishes playback fully or `Timeline.stop` is called. Never invoked if timeline is set to repeat infinitely.\r\n     * `onLoop` When a Timeline loops.\r\n     * `onStart` When the Timeline starts playing.\r\n     * `onUpdate` When a Timeline updates a child Tween.\r\n     * `onYoyo` When a Timeline starts a yoyo.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#callbacks\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.callbacks = {\n      onComplete: null,\n      onLoop: null,\n      onStart: null,\n      onUpdate: null,\n      onYoyo: null\n    };\n    /**\r\n     * The context in which all callbacks are invoked.\r\n     *\r\n     * @name Phaser.Tweens.Timeline#callbackScope\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.callbackScope;\n  },\n\n  /**\r\n   * Internal method that will emit a Timeline based Event and invoke the given callback.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#dispatchTimelineEvent\r\n   * @since 3.19.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n   * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n   */\n  dispatchTimelineEvent: function (event, callback) {\n    this.emit(event, this);\n\n    if (callback) {\n      callback.func.apply(callback.scope, callback.params);\n    }\n  },\n\n  /**\r\n   * Sets the value of the time scale applied to this Timeline. A value of 1 runs in real-time.\r\n   * A value of 0.5 runs 50% slower, and so on.\r\n   * \r\n   * The value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#setTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The time scale value to set.\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  setTimeScale: function (value) {\n    this.timeScale = value;\n    return this;\n  },\n\n  /**\r\n   * Gets the value of the time scale applied to this Timeline. A value of 1 runs in real-time.\r\n   * A value of 0.5 runs 50% slower, and so on.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#getTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The value of the time scale applied to this Timeline.\r\n   */\n  getTimeScale: function () {\n    return this.timeScale;\n  },\n\n  /**\r\n   * Check whether or not the Timeline is playing.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#isPlaying\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if this Timeline is active, otherwise `false`.\r\n   */\n  isPlaying: function () {\n    return this.state === TWEEN_CONST.ACTIVE;\n  },\n\n  /**\r\n   * Creates a new Tween, based on the given Tween Config, and adds it to this Timeline.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.Tweens.TweenBuilderConfig|object)} config - The configuration object for the Tween.\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  add: function (config) {\n    return this.queue(TweenBuilder(this, config));\n  },\n\n  /**\r\n   * Adds an existing Tween to this Timeline.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#queue\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to be added to this Timeline.\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  queue: function (tween) {\n    if (!this.isPlaying()) {\n      tween.parent = this;\n      tween.parentIsTimeline = true;\n      this.data.push(tween);\n      this.totalData = this.data.length;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Checks whether a Tween has an offset value.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#hasOffset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to check.\r\n   *\r\n   * @return {boolean} `true` if the tween has a non-null offset.\r\n   */\n  hasOffset: function (tween) {\n    return tween.offset !== null;\n  },\n\n  /**\r\n   * Checks whether the offset value is a number or a directive that is relative to previous tweens.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#isOffsetAbsolute\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The offset value to be evaluated.\r\n   *\r\n   * @return {boolean} `true` if the result is a number, `false` if it is a directive like \" -= 1000\".\r\n   */\n  isOffsetAbsolute: function (value) {\n    return typeof value === 'number';\n  },\n\n  /**\r\n   * Checks if the offset is a relative value rather than an absolute one.\r\n   * If the value is just a number, this returns false.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#isOffsetRelative\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} value - The offset value to be evaluated.\r\n   *\r\n   * @return {boolean} `true` if the value is relative, i.e \" -= 1000\". If `false`, the offset is absolute.\r\n   */\n  isOffsetRelative: function (value) {\n    var t = typeof value;\n\n    if (t === 'string') {\n      var op = value[0];\n\n      if (op === '-' || op === '+') {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Parses the relative offset value, returning a positive or negative number.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#getRelativeOffset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} value - The relative offset, in the format of '-=500', for example. The first character determines whether it will be a positive or negative number. Spacing matters here.\r\n   * @param {number} base - The value to use as the offset.\r\n   *\r\n   * @return {number} The parsed offset value.\r\n   */\n  getRelativeOffset: function (value, base) {\n    var op = value[0];\n    var num = parseFloat(value.substr(2));\n    var result = base;\n\n    switch (op) {\n      case '+':\n        result += num;\n        break;\n\n      case '-':\n        result -= num;\n        break;\n    } //  Cannot ever be < 0\n\n\n    return Math.max(0, result);\n  },\n\n  /**\r\n   * Calculates the total duration of the timeline.\r\n   * \r\n   * Computes all tween durations and returns the full duration of the timeline.\r\n   * \r\n   * The resulting number is stored in the timeline, not as a return value.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#calcDuration\r\n   * @since 3.0.0\r\n   */\n  calcDuration: function () {\n    var prevEnd = 0;\n    var totalDuration = 0;\n    var offsetDuration = 0;\n\n    for (var i = 0; i < this.totalData; i++) {\n      var tween = this.data[i];\n      tween.init();\n\n      if (this.hasOffset(tween)) {\n        if (this.isOffsetAbsolute(tween.offset)) {\n          //  An actual number, so it defines the start point from the beginning of the timeline\n          tween.calculatedOffset = tween.offset;\n\n          if (tween.offset === 0) {\n            offsetDuration = 0;\n          }\n        } else if (this.isOffsetRelative(tween.offset)) {\n          //  A relative offset (i.e. '-=1000', so starts at 'offset' ms relative to the PREVIOUS Tweens ending time)\n          tween.calculatedOffset = this.getRelativeOffset(tween.offset, prevEnd);\n        }\n      } else {\n        //  Sequential\n        tween.calculatedOffset = offsetDuration;\n      }\n\n      prevEnd = tween.totalDuration + tween.calculatedOffset;\n      totalDuration += tween.totalDuration;\n      offsetDuration += tween.totalDuration;\n    } //  Excludes loop values\n\n\n    this.duration = totalDuration;\n    this.loopCounter = this.loop === -1 ? 999999999999 : this.loop;\n\n    if (this.loopCounter > 0) {\n      this.totalDuration = this.duration + this.completeDelay + (this.duration + this.loopDelay) * this.loopCounter;\n    } else {\n      this.totalDuration = this.duration + this.completeDelay;\n    }\n  },\n\n  /**\r\n   * Initializes the timeline, which means all Tweens get their init() called, and the total duration will be computed.\r\n   * Returns a boolean indicating whether the timeline is auto-started or not.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#init\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Timeline is started. `false` if it is paused.\r\n   */\n  init: function () {\n    this.calcDuration();\n    this.progress = 0;\n    this.totalProgress = 0;\n\n    if (this.paused) {\n      this.state = TWEEN_CONST.PAUSED;\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  /**\r\n   * Resets all of the timeline's tweens back to their initial states.\r\n   * The boolean parameter indicates whether tweens that are looping should reset as well, or not.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#resetTweens\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} resetFromLoop - If `true`, resets all looping tweens to their initial values.\r\n   */\n  resetTweens: function (resetFromLoop) {\n    for (var i = 0; i < this.totalData; i++) {\n      var tween = this.data[i];\n      tween.play(resetFromLoop);\n    }\n  },\n\n  /**\r\n   * Sets a callback for the Timeline.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#setCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} type - The internal type of callback to set.\r\n   * @param {function} callback - Timeline allows multiple tweens to be linked together to create a streaming sequence.\r\n   * @param {array} [params] - The parameters to pass to the callback.\r\n   * @param {object} [scope] - The context scope of the callback.\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  setCallback: function (type, callback, params, scope) {\n    if (Timeline.TYPES.indexOf(type) !== -1) {\n      this.callbacks[type] = {\n        func: callback,\n        scope: scope,\n        params: params\n      };\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Passed a Tween to the Tween Manager and requests it be made active.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#makeActive\r\n   * @since 3.3.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The tween object to make active.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} The Timeline's Tween Manager reference.\r\n   */\n  makeActive: function (tween) {\n    return this.manager.makeActive(tween);\n  },\n\n  /**\r\n   * Starts playing the Timeline.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#play\r\n   * @fires Phaser.Tweens.Events#TIMELINE_START\r\n   * @since 3.0.0\r\n   */\n  play: function () {\n    if (this.state === TWEEN_CONST.ACTIVE) {\n      return;\n    }\n\n    if (this.paused) {\n      this.paused = false;\n      this.manager.makeActive(this);\n      return;\n    } else {\n      this.resetTweens(false);\n      this.state = TWEEN_CONST.ACTIVE;\n    }\n\n    this.dispatchTimelineEvent(Events.TIMELINE_START, this.callbacks.onStart);\n  },\n\n  /**\r\n   * Updates the Timeline's `state` and fires callbacks and events.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#nextState\r\n   * @fires Phaser.Tweens.Events#TIMELINE_COMPLETE\r\n   * @fires Phaser.Tweens.Events#TIMELINE_LOOP\r\n   * @since 3.0.0\r\n   *\r\n   * @see Phaser.Tweens.Timeline#update\r\n   */\n  nextState: function () {\n    if (this.loopCounter > 0) {\n      //  Reset the elapsed time\n      this.elapsed = 0;\n      this.progress = 0;\n      this.loopCounter--;\n      this.resetTweens(true);\n\n      if (this.loopDelay > 0) {\n        this.countdown = this.loopDelay;\n        this.state = TWEEN_CONST.LOOP_DELAY;\n      } else {\n        this.state = TWEEN_CONST.ACTIVE;\n        this.dispatchTimelineEvent(Events.TIMELINE_LOOP, this.callbacks.onLoop);\n      }\n    } else if (this.completeDelay > 0) {\n      this.state = TWEEN_CONST.COMPLETE_DELAY;\n      this.countdown = this.completeDelay;\n    } else {\n      this.state = TWEEN_CONST.PENDING_REMOVE;\n      this.dispatchTimelineEvent(Events.TIMELINE_COMPLETE, this.callbacks.onComplete);\n    }\n  },\n\n  /**\r\n   * Returns 'true' if this Timeline has finished and should be removed from the Tween Manager.\r\n   * Otherwise, returns false.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#update\r\n   * @fires Phaser.Tweens.Events#TIMELINE_COMPLETE\r\n   * @fires Phaser.Tweens.Events#TIMELINE_UPDATE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestamp - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   *\r\n   * @return {boolean} Returns `true` if this Timeline has finished and should be removed from the Tween Manager.\r\n   */\n  update: function (timestamp, delta) {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      return;\n    }\n\n    if (this.useFrames) {\n      delta = 1 * this.manager.timeScale;\n    }\n\n    delta *= this.timeScale;\n    this.elapsed += delta;\n    this.progress = Math.min(this.elapsed / this.duration, 1);\n    this.totalElapsed += delta;\n    this.totalProgress = Math.min(this.totalElapsed / this.totalDuration, 1);\n\n    switch (this.state) {\n      case TWEEN_CONST.ACTIVE:\n        var stillRunning = this.totalData;\n\n        for (var i = 0; i < this.totalData; i++) {\n          var tween = this.data[i];\n\n          if (tween.update(timestamp, delta)) {\n            stillRunning--;\n          }\n        }\n\n        this.dispatchTimelineEvent(Events.TIMELINE_UPDATE, this.callbacks.onUpdate); //  Anything still running? If not, we're done\n\n        if (stillRunning === 0) {\n          this.nextState();\n        }\n\n        break;\n\n      case TWEEN_CONST.LOOP_DELAY:\n        this.countdown -= delta;\n\n        if (this.countdown <= 0) {\n          this.state = TWEEN_CONST.ACTIVE;\n          this.dispatchTimelineEvent(Events.TIMELINE_LOOP, this.callbacks.onLoop);\n        }\n\n        break;\n\n      case TWEEN_CONST.COMPLETE_DELAY:\n        this.countdown -= delta;\n\n        if (this.countdown <= 0) {\n          this.state = TWEEN_CONST.PENDING_REMOVE;\n          this.dispatchTimelineEvent(Events.TIMELINE_COMPLETE, this.callbacks.onComplete);\n        }\n\n        break;\n    }\n\n    return this.state === TWEEN_CONST.PENDING_REMOVE;\n  },\n\n  /**\r\n   * Stops the Timeline immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#stop\r\n   * @since 3.0.0\r\n   */\n  stop: function () {\n    this.state = TWEEN_CONST.PENDING_REMOVE;\n  },\n\n  /**\r\n   * Pauses the Timeline, retaining its internal state.\r\n   * \r\n   * Calling this on a Timeline that is already paused has no effect and fires no event.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#pause\r\n   * @fires Phaser.Tweens.Events#TIMELINE_PAUSE\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  pause: function () {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      return;\n    }\n\n    this.paused = true;\n    this._pausedState = this.state;\n    this.state = TWEEN_CONST.PAUSED;\n    this.emit(Events.TIMELINE_PAUSE, this);\n    return this;\n  },\n\n  /**\r\n   * Resumes a paused Timeline from where it was when it was paused.\r\n   * \r\n   * Calling this on a Timeline that isn't paused has no effect and fires no event.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#resume\r\n   * @fires Phaser.Tweens.Events#TIMELINE_RESUME\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Timeline object.\r\n   */\n  resume: function () {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      this.paused = false;\n      this.state = this._pausedState;\n      this.emit(Events.TIMELINE_RESUME, this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Checks if any of the Tweens in this Timeline as operating on the target object.\r\n   * \r\n   * Returns `false` if no Tweens operate on the target object.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#hasTarget\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} target - The target to check all Tweens against.\r\n   *\r\n   * @return {boolean} `true` if there is at least a single Tween that operates on the target object, otherwise `false`.\r\n   */\n  hasTarget: function (target) {\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i].hasTarget(target)) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Stops all the Tweens in the Timeline immediately, whatever stage of progress they are at and flags\r\n   * them for removal by the TweenManager.\r\n   *\r\n   * @method Phaser.Tweens.Timeline#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    for (var i = 0; i < this.data.length; i++) {\n      this.data[i].stop();\n    }\n  }\n});\nTimeline.TYPES = ['onStart', 'onUpdate', 'onLoop', 'onComplete', 'onYoyo'];\nmodule.exports = Timeline;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/Timeline.js"],"names":["Class","require","EventEmitter","Events","TweenBuilder","TWEEN_CONST","Timeline","Extends","initialize","manager","call","isTimeline","data","totalData","useFrames","timeScale","loop","loopDelay","loopCounter","completeDelay","countdown","state","PENDING_ADD","_pausedState","paused","elapsed","totalElapsed","duration","progress","totalDuration","totalProgress","callbacks","onComplete","onLoop","onStart","onUpdate","onYoyo","callbackScope","dispatchTimelineEvent","event","callback","emit","func","apply","scope","params","setTimeScale","value","getTimeScale","isPlaying","ACTIVE","add","config","queue","tween","parent","parentIsTimeline","push","length","hasOffset","offset","isOffsetAbsolute","isOffsetRelative","t","op","getRelativeOffset","base","num","parseFloat","substr","result","Math","max","calcDuration","prevEnd","offsetDuration","i","init","calculatedOffset","PAUSED","resetTweens","resetFromLoop","play","setCallback","type","TYPES","indexOf","makeActive","TIMELINE_START","nextState","LOOP_DELAY","TIMELINE_LOOP","COMPLETE_DELAY","PENDING_REMOVE","TIMELINE_COMPLETE","update","timestamp","delta","min","stillRunning","TIMELINE_UPDATE","stop","pause","TIMELINE_PAUSE","resume","TIMELINE_RESUME","hasTarget","target","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar TweenBuilder = require('./builders/TweenBuilder');\r\nvar TWEEN_CONST = require('./tween/const');\r\n\r\n/**\r\n * @classdesc\r\n * A Timeline combines multiple Tweens into one. Its overall behavior is otherwise similar to a single Tween.\r\n *\r\n * The Timeline updates all of its Tweens simultaneously. Its methods allow you to easily build a sequence\r\n * of Tweens (each one starting after the previous one) or run multiple Tweens at once during given parts of the Timeline.\r\n *\r\n * @class Timeline\r\n * @memberof Phaser.Tweens\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tweens.TweenManager} manager - The Tween Manager which owns this Timeline.\r\n */\r\nvar Timeline = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Timeline (manager)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The Tween Manager which owns this Timeline.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#manager\r\n         * @type {Phaser.Tweens.TweenManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * A constant value which allows this Timeline to be easily identified as one.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#isTimeline\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.isTimeline = true;\r\n\r\n        /**\r\n         * An array of Tween objects, each containing a unique property and target being tweened.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#data\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.data = [];\r\n\r\n        /**\r\n         * The cached size of the data array.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#totalData\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalData = 0;\r\n\r\n        /**\r\n         * If true then duration, delay, etc values are all frame totals, rather than ms.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#useFrames\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.useFrames = false;\r\n\r\n        /**\r\n         * Scales the time applied to this Timeline. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n         * Value isn't used when calculating total duration of the Timeline, it's a run-time delta adjustment only.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * Loop this Timeline? Can be -1 for an infinite loop, or an integer.\r\n         * When enabled it will play through ALL Tweens again (use Tween.repeat to loop a single tween)\r\n         *\r\n         * @name Phaser.Tweens.Timeline#loop\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = 0;\r\n\r\n        /**\r\n         * Time in ms/frames before this Timeline loops.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#loopDelay\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loopDelay = 0;\r\n\r\n        /**\r\n         * How many loops are left to run?\r\n         *\r\n         * @name Phaser.Tweens.Timeline#loopCounter\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loopCounter = 0;\r\n\r\n        /**\r\n         * Time in ms/frames before the 'onComplete' event fires. This never fires if loop = true (as it never completes)\r\n         *\r\n         * @name Phaser.Tweens.Timeline#completeDelay\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.completeDelay = 0;\r\n\r\n        /**\r\n         * Countdown timer value, as used by `loopDelay` and `completeDelay`.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#countdown\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.countdown = 0;\r\n\r\n        /**\r\n         * The current state of the Timeline.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#state\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.state = TWEEN_CONST.PENDING_ADD;\r\n\r\n        /**\r\n         * The state of the Timeline when it was paused (used by Resume)\r\n         *\r\n         * @name Phaser.Tweens.Timeline#_pausedState\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._pausedState = TWEEN_CONST.PENDING_ADD;\r\n\r\n        /**\r\n         * Does the Timeline start off paused? (if so it needs to be started with Timeline.play)\r\n         *\r\n         * @name Phaser.Tweens.Timeline#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * Elapsed time in ms/frames of this run through of the Timeline.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#elapsed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.elapsed = 0;\r\n\r\n        /**\r\n         * Total elapsed time in ms/frames of the entire Timeline, including looping.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#totalElapsed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalElapsed = 0;\r\n\r\n        /**\r\n         * Time in ms/frames for the whole Timeline to play through once, excluding loop amounts and loop delays.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * Value between 0 and 1. The amount of progress through the Timeline, _excluding loops_.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#progress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Time in ms/frames for all Tweens in this Timeline to complete (including looping)\r\n         *\r\n         * @name Phaser.Tweens.Timeline#totalDuration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalDuration = 0;\r\n\r\n        /**\r\n         * Value between 0 and 1. The amount through the entire Timeline, including looping.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#totalProgress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalProgress = 0;\r\n\r\n        /**\r\n         * An object containing the different Tween callback functions.\r\n         * \r\n         * You can either set these in the Tween config, or by calling the `Tween.setCallback` method.\r\n         * \r\n         * `onComplete` When the Timeline finishes playback fully or `Timeline.stop` is called. Never invoked if timeline is set to repeat infinitely.\r\n         * `onLoop` When a Timeline loops.\r\n         * `onStart` When the Timeline starts playing.\r\n         * `onUpdate` When a Timeline updates a child Tween.\r\n         * `onYoyo` When a Timeline starts a yoyo.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#callbacks\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbacks = {\r\n            onComplete: null,\r\n            onLoop: null,\r\n            onStart: null,\r\n            onUpdate: null,\r\n            onYoyo: null\r\n        };\r\n\r\n        /**\r\n         * The context in which all callbacks are invoked.\r\n         *\r\n         * @name Phaser.Tweens.Timeline#callbackScope\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbackScope;\r\n    },\r\n\r\n    /**\r\n     * Internal method that will emit a Timeline based Event and invoke the given callback.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#dispatchTimelineEvent\r\n     * @since 3.19.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n     * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n     */\r\n    dispatchTimelineEvent: function (event, callback)\r\n    {\r\n        this.emit(event, this);\r\n\r\n        if (callback)\r\n        {\r\n            callback.func.apply(callback.scope, callback.params);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the value of the time scale applied to this Timeline. A value of 1 runs in real-time.\r\n     * A value of 0.5 runs 50% slower, and so on.\r\n     * \r\n     * The value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#setTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The time scale value to set.\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    setTimeScale: function (value)\r\n    {\r\n        this.timeScale = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the value of the time scale applied to this Timeline. A value of 1 runs in real-time.\r\n     * A value of 0.5 runs 50% slower, and so on.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#getTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The value of the time scale applied to this Timeline.\r\n     */\r\n    getTimeScale: function ()\r\n    {\r\n        return this.timeScale;\r\n    },\r\n\r\n    /**\r\n     * Check whether or not the Timeline is playing.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#isPlaying\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Timeline is active, otherwise `false`.\r\n     */\r\n    isPlaying: function ()\r\n    {\r\n        return (this.state === TWEEN_CONST.ACTIVE);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Tween, based on the given Tween Config, and adds it to this Timeline.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.Tweens.TweenBuilderConfig|object)} config - The configuration object for the Tween.\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    add: function (config)\r\n    {\r\n        return this.queue(TweenBuilder(this, config));\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Tween to this Timeline.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#queue\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to be added to this Timeline.\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    queue: function (tween)\r\n    {\r\n        if (!this.isPlaying())\r\n        {\r\n            tween.parent = this;\r\n            tween.parentIsTimeline = true;\r\n\r\n            this.data.push(tween);\r\n\r\n            this.totalData = this.data.length;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks whether a Tween has an offset value.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#hasOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to check.\r\n     *\r\n     * @return {boolean} `true` if the tween has a non-null offset.\r\n     */\r\n    hasOffset: function (tween)\r\n    {\r\n        return (tween.offset !== null);\r\n    },\r\n\r\n    /**\r\n     * Checks whether the offset value is a number or a directive that is relative to previous tweens.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#isOffsetAbsolute\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The offset value to be evaluated.\r\n     *\r\n     * @return {boolean} `true` if the result is a number, `false` if it is a directive like \" -= 1000\".\r\n     */\r\n    isOffsetAbsolute: function (value)\r\n    {\r\n        return (typeof(value) === 'number');\r\n    },\r\n\r\n    /**\r\n     * Checks if the offset is a relative value rather than an absolute one.\r\n     * If the value is just a number, this returns false.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#isOffsetRelative\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} value - The offset value to be evaluated.\r\n     *\r\n     * @return {boolean} `true` if the value is relative, i.e \" -= 1000\". If `false`, the offset is absolute.\r\n     */\r\n    isOffsetRelative: function (value)\r\n    {\r\n        var t = typeof(value);\r\n\r\n        if (t === 'string')\r\n        {\r\n            var op = value[0];\r\n\r\n            if (op === '-' || op === '+')\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Parses the relative offset value, returning a positive or negative number.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#getRelativeOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} value - The relative offset, in the format of '-=500', for example. The first character determines whether it will be a positive or negative number. Spacing matters here.\r\n     * @param {number} base - The value to use as the offset.\r\n     *\r\n     * @return {number} The parsed offset value.\r\n     */\r\n    getRelativeOffset: function (value, base)\r\n    {\r\n        var op = value[0];\r\n        var num = parseFloat(value.substr(2));\r\n        var result = base;\r\n\r\n        switch (op)\r\n        {\r\n            case '+':\r\n                result += num;\r\n                break;\r\n\r\n            case '-':\r\n                result -= num;\r\n                break;\r\n        }\r\n\r\n        //  Cannot ever be < 0\r\n        return Math.max(0, result);\r\n    },\r\n\r\n    /**\r\n     * Calculates the total duration of the timeline.\r\n     * \r\n     * Computes all tween durations and returns the full duration of the timeline.\r\n     * \r\n     * The resulting number is stored in the timeline, not as a return value.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#calcDuration\r\n     * @since 3.0.0\r\n     */\r\n    calcDuration: function ()\r\n    {\r\n        var prevEnd = 0;\r\n        var totalDuration = 0;\r\n        var offsetDuration = 0;\r\n\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tween = this.data[i];\r\n\r\n            tween.init();\r\n\r\n            if (this.hasOffset(tween))\r\n            {\r\n                if (this.isOffsetAbsolute(tween.offset))\r\n                {\r\n                    //  An actual number, so it defines the start point from the beginning of the timeline\r\n                    tween.calculatedOffset = tween.offset;\r\n\r\n                    if (tween.offset === 0)\r\n                    {\r\n                        offsetDuration = 0;\r\n                    }\r\n                }\r\n                else if (this.isOffsetRelative(tween.offset))\r\n                {\r\n                    //  A relative offset (i.e. '-=1000', so starts at 'offset' ms relative to the PREVIOUS Tweens ending time)\r\n                    tween.calculatedOffset = this.getRelativeOffset(tween.offset, prevEnd);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Sequential\r\n                tween.calculatedOffset = offsetDuration;\r\n            }\r\n\r\n            prevEnd = tween.totalDuration + tween.calculatedOffset;\r\n\r\n            totalDuration += tween.totalDuration;\r\n            offsetDuration += tween.totalDuration;\r\n        }\r\n\r\n        //  Excludes loop values\r\n        this.duration = totalDuration;\r\n\r\n        this.loopCounter = (this.loop === -1) ? 999999999999 : this.loop;\r\n\r\n        if (this.loopCounter > 0)\r\n        {\r\n            this.totalDuration = this.duration + this.completeDelay + ((this.duration + this.loopDelay) * this.loopCounter);\r\n        }\r\n        else\r\n        {\r\n            this.totalDuration = this.duration + this.completeDelay;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Initializes the timeline, which means all Tweens get their init() called, and the total duration will be computed.\r\n     * Returns a boolean indicating whether the timeline is auto-started or not.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#init\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Timeline is started. `false` if it is paused.\r\n     */\r\n    init: function ()\r\n    {\r\n        this.calcDuration();\r\n\r\n        this.progress = 0;\r\n        this.totalProgress = 0;\r\n\r\n        if (this.paused)\r\n        {\r\n            this.state = TWEEN_CONST.PAUSED;\r\n\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resets all of the timeline's tweens back to their initial states.\r\n     * The boolean parameter indicates whether tweens that are looping should reset as well, or not.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#resetTweens\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} resetFromLoop - If `true`, resets all looping tweens to their initial values.\r\n     */\r\n    resetTweens: function (resetFromLoop)\r\n    {\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tween = this.data[i];\r\n\r\n            tween.play(resetFromLoop);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets a callback for the Timeline.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#setCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} type - The internal type of callback to set.\r\n     * @param {function} callback - Timeline allows multiple tweens to be linked together to create a streaming sequence.\r\n     * @param {array} [params] - The parameters to pass to the callback.\r\n     * @param {object} [scope] - The context scope of the callback.\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    setCallback: function (type, callback, params, scope)\r\n    {\r\n        if (Timeline.TYPES.indexOf(type) !== -1)\r\n        {\r\n            this.callbacks[type] = { func: callback, scope: scope, params: params };\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passed a Tween to the Tween Manager and requests it be made active.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#makeActive\r\n     * @since 3.3.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The tween object to make active.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} The Timeline's Tween Manager reference.\r\n     */\r\n    makeActive: function (tween)\r\n    {\r\n        return this.manager.makeActive(tween);\r\n    },\r\n\r\n    /**\r\n     * Starts playing the Timeline.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#play\r\n     * @fires Phaser.Tweens.Events#TIMELINE_START\r\n     * @since 3.0.0\r\n     */\r\n    play: function ()\r\n    {\r\n        if (this.state === TWEEN_CONST.ACTIVE)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.paused)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.manager.makeActive(this);\r\n\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            this.resetTweens(false);\r\n\r\n            this.state = TWEEN_CONST.ACTIVE;\r\n        }\r\n\r\n        this.dispatchTimelineEvent(Events.TIMELINE_START, this.callbacks.onStart);\r\n    },\r\n\r\n    /**\r\n     * Updates the Timeline's `state` and fires callbacks and events.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#nextState\r\n     * @fires Phaser.Tweens.Events#TIMELINE_COMPLETE\r\n     * @fires Phaser.Tweens.Events#TIMELINE_LOOP\r\n     * @since 3.0.0\r\n     *\r\n     * @see Phaser.Tweens.Timeline#update\r\n     */\r\n    nextState: function ()\r\n    {\r\n        if (this.loopCounter > 0)\r\n        {\r\n            //  Reset the elapsed time\r\n            this.elapsed = 0;\r\n            this.progress = 0;\r\n\r\n            this.loopCounter--;\r\n\r\n            this.resetTweens(true);\r\n\r\n            if (this.loopDelay > 0)\r\n            {\r\n                this.countdown = this.loopDelay;\r\n\r\n                this.state = TWEEN_CONST.LOOP_DELAY;\r\n            }\r\n            else\r\n            {\r\n                this.state = TWEEN_CONST.ACTIVE;\r\n\r\n                this.dispatchTimelineEvent(Events.TIMELINE_LOOP, this.callbacks.onLoop);\r\n            }\r\n        }\r\n        else if (this.completeDelay > 0)\r\n        {\r\n            this.state = TWEEN_CONST.COMPLETE_DELAY;\r\n\r\n            this.countdown = this.completeDelay;\r\n        }\r\n        else\r\n        {\r\n            this.state = TWEEN_CONST.PENDING_REMOVE;\r\n\r\n            this.dispatchTimelineEvent(Events.TIMELINE_COMPLETE, this.callbacks.onComplete);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns 'true' if this Timeline has finished and should be removed from the Tween Manager.\r\n     * Otherwise, returns false.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#update\r\n     * @fires Phaser.Tweens.Events#TIMELINE_COMPLETE\r\n     * @fires Phaser.Tweens.Events#TIMELINE_UPDATE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestamp - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     *\r\n     * @return {boolean} Returns `true` if this Timeline has finished and should be removed from the Tween Manager.\r\n     */\r\n    update: function (timestamp, delta)\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.useFrames)\r\n        {\r\n            delta = 1 * this.manager.timeScale;\r\n        }\r\n\r\n        delta *= this.timeScale;\r\n\r\n        this.elapsed += delta;\r\n        this.progress = Math.min(this.elapsed / this.duration, 1);\r\n\r\n        this.totalElapsed += delta;\r\n        this.totalProgress = Math.min(this.totalElapsed / this.totalDuration, 1);\r\n\r\n        switch (this.state)\r\n        {\r\n            case TWEEN_CONST.ACTIVE:\r\n\r\n                var stillRunning = this.totalData;\r\n\r\n                for (var i = 0; i < this.totalData; i++)\r\n                {\r\n                    var tween = this.data[i];\r\n\r\n                    if (tween.update(timestamp, delta))\r\n                    {\r\n                        stillRunning--;\r\n                    }\r\n                }\r\n\r\n                this.dispatchTimelineEvent(Events.TIMELINE_UPDATE, this.callbacks.onUpdate);\r\n\r\n                //  Anything still running? If not, we're done\r\n                if (stillRunning === 0)\r\n                {\r\n                    this.nextState();\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.LOOP_DELAY:\r\n\r\n                this.countdown -= delta;\r\n\r\n                if (this.countdown <= 0)\r\n                {\r\n                    this.state = TWEEN_CONST.ACTIVE;\r\n\r\n                    this.dispatchTimelineEvent(Events.TIMELINE_LOOP, this.callbacks.onLoop);\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.COMPLETE_DELAY:\r\n\r\n                this.countdown -= delta;\r\n\r\n                if (this.countdown <= 0)\r\n                {\r\n                    this.state = TWEEN_CONST.PENDING_REMOVE;\r\n\r\n                    this.dispatchTimelineEvent(Events.TIMELINE_COMPLETE, this.callbacks.onComplete);\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        return (this.state === TWEEN_CONST.PENDING_REMOVE);\r\n    },\r\n\r\n    /**\r\n     * Stops the Timeline immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#stop\r\n     * @since 3.0.0\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.state = TWEEN_CONST.PENDING_REMOVE;\r\n    },\r\n\r\n    /**\r\n     * Pauses the Timeline, retaining its internal state.\r\n     * \r\n     * Calling this on a Timeline that is already paused has no effect and fires no event.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#pause\r\n     * @fires Phaser.Tweens.Events#TIMELINE_PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.paused = true;\r\n\r\n        this._pausedState = this.state;\r\n\r\n        this.state = TWEEN_CONST.PAUSED;\r\n\r\n        this.emit(Events.TIMELINE_PAUSE, this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes a paused Timeline from where it was when it was paused.\r\n     * \r\n     * Calling this on a Timeline that isn't paused has no effect and fires no event.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#resume\r\n     * @fires Phaser.Tweens.Events#TIMELINE_RESUME\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Timeline object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.state = this._pausedState;\r\n\r\n            this.emit(Events.TIMELINE_RESUME, this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if any of the Tweens in this Timeline as operating on the target object.\r\n     * \r\n     * Returns `false` if no Tweens operate on the target object.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#hasTarget\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} target - The target to check all Tweens against.\r\n     *\r\n     * @return {boolean} `true` if there is at least a single Tween that operates on the target object, otherwise `false`.\r\n     */\r\n    hasTarget: function (target)\r\n    {\r\n        for (var i = 0; i < this.data.length; i++)\r\n        {\r\n            if (this.data[i].hasTarget(target))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Stops all the Tweens in the Timeline immediately, whatever stage of progress they are at and flags\r\n     * them for removal by the TweenManager.\r\n     *\r\n     * @method Phaser.Tweens.Timeline#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        for (var i = 0; i < this.data.length; i++)\r\n        {\r\n            this.data[i].stop();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nTimeline.TYPES = [ 'onStart', 'onUpdate', 'onLoop', 'onComplete', 'onYoyo' ];\r\n\r\nmodule.exports = Timeline;\r\n"]},"metadata":{},"sourceType":"script"}