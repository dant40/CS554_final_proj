{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar EaseMap = require('../../math/easing/EaseMap');\n\nvar UppercaseFirst = require('../../utils/string/UppercaseFirst');\n/**\r\n * This internal function is used to return the correct ease function for a Tween.\r\n * \r\n * It can take a variety of input, including an EaseMap based string, or a custom function.\r\n *\r\n * @function Phaser.Tweens.Builders.GetEaseFunction\r\n * @since 3.0.0\r\n *\r\n * @param {(string|function)} ease - The ease to find. This can be either a string from the EaseMap, or a custom function.\r\n * @param {number[]} [easeParams] - An optional array of ease parameters to go with the ease.\r\n *\r\n * @return {function} The ease function.\r\n */\n\n\nvar GetEaseFunction = function (ease, easeParams) {\n  //  Default ease function\n  var easeFunction = EaseMap.Power0; //  Prepare ease function\n\n  if (typeof ease === 'string') {\n    //  String based look-up\n    //  1) They specified it correctly\n    if (EaseMap.hasOwnProperty(ease)) {\n      easeFunction = EaseMap[ease];\n    } else {\n      //  Do some string manipulation to try and find it\n      var direction = '';\n\n      if (ease.indexOf('.')) {\n        //  quad.in = Quad.easeIn\n        //  quad.out = Quad.easeOut\n        //  quad.inout =Quad.easeInOut\n        direction = ease.substr(ease.indexOf('.') + 1);\n\n        if (direction.toLowerCase() === 'in') {\n          direction = 'easeIn';\n        } else if (direction.toLowerCase() === 'out') {\n          direction = 'easeOut';\n        } else if (direction.toLowerCase() === 'inout') {\n          direction = 'easeInOut';\n        }\n      }\n\n      ease = UppercaseFirst(ease.substr(0, ease.indexOf('.') + 1) + direction);\n\n      if (EaseMap.hasOwnProperty(ease)) {\n        easeFunction = EaseMap[ease];\n      }\n    }\n  } else if (typeof ease === 'function') {\n    //  Custom function\n    easeFunction = ease;\n  } else if (Array.isArray(ease) && ease.length === 4) {} //  Bezier function (TODO)\n  //  No custom ease parameters?\n\n\n  if (!easeParams) {\n    //  Return ease function\n    return easeFunction;\n  }\n\n  var cloneParams = easeParams.slice(0);\n  cloneParams.unshift(0); //  Return ease function with custom ease parameters\n\n  return function (v) {\n    cloneParams[0] = v;\n    return easeFunction.apply(this, cloneParams);\n  };\n};\n\nmodule.exports = GetEaseFunction;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/builders/GetEaseFunction.js"],"names":["EaseMap","require","UppercaseFirst","GetEaseFunction","ease","easeParams","easeFunction","Power0","hasOwnProperty","direction","indexOf","substr","toLowerCase","Array","isArray","length","cloneParams","slice","unshift","v","apply","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,2BAAD,CAArB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,mCAAD,CAA5B;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,eAAe,GAAG,UAAUC,IAAV,EAAgBC,UAAhB,EACtB;AACI;AACA,MAAIC,YAAY,GAAGN,OAAO,CAACO,MAA3B,CAFJ,CAII;;AACA,MAAI,OAAOH,IAAP,KAAgB,QAApB,EACA;AACI;AAEA;AACA,QAAIJ,OAAO,CAACQ,cAAR,CAAuBJ,IAAvB,CAAJ,EACA;AACIE,MAAAA,YAAY,GAAGN,OAAO,CAACI,IAAD,CAAtB;AACH,KAHD,MAKA;AACI;AACA,UAAIK,SAAS,GAAG,EAAhB;;AAEA,UAAIL,IAAI,CAACM,OAAL,CAAa,GAAb,CAAJ,EACA;AACI;AACA;AACA;AAEAD,QAAAA,SAAS,GAAGL,IAAI,CAACO,MAAL,CAAYP,IAAI,CAACM,OAAL,CAAa,GAAb,IAAoB,CAAhC,CAAZ;;AAEA,YAAID,SAAS,CAACG,WAAV,OAA4B,IAAhC,EACA;AACIH,UAAAA,SAAS,GAAG,QAAZ;AACH,SAHD,MAIK,IAAIA,SAAS,CAACG,WAAV,OAA4B,KAAhC,EACL;AACIH,UAAAA,SAAS,GAAG,SAAZ;AACH,SAHI,MAIA,IAAIA,SAAS,CAACG,WAAV,OAA4B,OAAhC,EACL;AACIH,UAAAA,SAAS,GAAG,WAAZ;AACH;AACJ;;AAEDL,MAAAA,IAAI,GAAGF,cAAc,CAACE,IAAI,CAACO,MAAL,CAAY,CAAZ,EAAeP,IAAI,CAACM,OAAL,CAAa,GAAb,IAAoB,CAAnC,IAAwCD,SAAzC,CAArB;;AAEA,UAAIT,OAAO,CAACQ,cAAR,CAAuBJ,IAAvB,CAAJ,EACA;AACIE,QAAAA,YAAY,GAAGN,OAAO,CAACI,IAAD,CAAtB;AACH;AACJ;AACJ,GA3CD,MA4CK,IAAI,OAAOA,IAAP,KAAgB,UAApB,EACL;AACI;AACAE,IAAAA,YAAY,GAAGF,IAAf;AACH,GAJI,MAKA,IAAIS,KAAK,CAACC,OAAN,CAAcV,IAAd,KAAuBA,IAAI,CAACW,MAAL,KAAgB,CAA3C,EACL,CAEC,CAHI,CAED;AAGJ;;;AACA,MAAI,CAACV,UAAL,EACA;AACI;AACA,WAAOC,YAAP;AACH;;AAED,MAAIU,WAAW,GAAGX,UAAU,CAACY,KAAX,CAAiB,CAAjB,CAAlB;AAEAD,EAAAA,WAAW,CAACE,OAAZ,CAAoB,CAApB,EApEJ,CAsEI;;AACA,SAAO,UAAUC,CAAV,EACP;AACIH,IAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBG,CAAjB;AAEA,WAAOb,YAAY,CAACc,KAAb,CAAmB,IAAnB,EAAyBJ,WAAzB,CAAP;AACH,GALD;AAMH,CA9ED;;AAgFAK,MAAM,CAACC,OAAP,GAAiBnB,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar EaseMap = require('../../math/easing/EaseMap');\r\nvar UppercaseFirst = require('../../utils/string/UppercaseFirst');\r\n\r\n/**\r\n * This internal function is used to return the correct ease function for a Tween.\r\n * \r\n * It can take a variety of input, including an EaseMap based string, or a custom function.\r\n *\r\n * @function Phaser.Tweens.Builders.GetEaseFunction\r\n * @since 3.0.0\r\n *\r\n * @param {(string|function)} ease - The ease to find. This can be either a string from the EaseMap, or a custom function.\r\n * @param {number[]} [easeParams] - An optional array of ease parameters to go with the ease.\r\n *\r\n * @return {function} The ease function.\r\n */\r\nvar GetEaseFunction = function (ease, easeParams)\r\n{\r\n    //  Default ease function\r\n    var easeFunction = EaseMap.Power0;\r\n\r\n    //  Prepare ease function\r\n    if (typeof ease === 'string')\r\n    {\r\n        //  String based look-up\r\n\r\n        //  1) They specified it correctly\r\n        if (EaseMap.hasOwnProperty(ease))\r\n        {\r\n            easeFunction = EaseMap[ease];\r\n        }\r\n        else\r\n        {\r\n            //  Do some string manipulation to try and find it\r\n            var direction = '';\r\n\r\n            if (ease.indexOf('.'))\r\n            {\r\n                //  quad.in = Quad.easeIn\r\n                //  quad.out = Quad.easeOut\r\n                //  quad.inout =Quad.easeInOut\r\n\r\n                direction = ease.substr(ease.indexOf('.') + 1);\r\n\r\n                if (direction.toLowerCase() === 'in')\r\n                {\r\n                    direction = 'easeIn';\r\n                }\r\n                else if (direction.toLowerCase() === 'out')\r\n                {\r\n                    direction = 'easeOut';\r\n                }\r\n                else if (direction.toLowerCase() === 'inout')\r\n                {\r\n                    direction = 'easeInOut';\r\n                }\r\n            }\r\n\r\n            ease = UppercaseFirst(ease.substr(0, ease.indexOf('.') + 1) + direction);\r\n\r\n            if (EaseMap.hasOwnProperty(ease))\r\n            {\r\n                easeFunction = EaseMap[ease];\r\n            }\r\n        }\r\n    }\r\n    else if (typeof ease === 'function')\r\n    {\r\n        //  Custom function\r\n        easeFunction = ease;\r\n    }\r\n    else if (Array.isArray(ease) && ease.length === 4)\r\n    {\r\n        //  Bezier function (TODO)\r\n    }\r\n\r\n    //  No custom ease parameters?\r\n    if (!easeParams)\r\n    {\r\n        //  Return ease function\r\n        return easeFunction;\r\n    }\r\n\r\n    var cloneParams = easeParams.slice(0);\r\n\r\n    cloneParams.unshift(0);\r\n\r\n    //  Return ease function with custom ease parameters\r\n    return function (v)\r\n    {\r\n        cloneParams[0] = v;\r\n\r\n        return easeFunction.apply(this, cloneParams);\r\n    };\r\n};\r\n\r\nmodule.exports = GetEaseFunction;\r\n"]},"metadata":{},"sourceType":"script"}