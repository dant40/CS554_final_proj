{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * @classdesc\r\n * The GravityWell action applies a force on the particle to draw it towards, or repel it from, a single point.\r\n * \r\n * The force applied is inversely proportional to the square of the distance from the particle to the point, in accordance with Newton's law of gravity.\r\n * \r\n * This simulates the effect of gravity over large distances (as between planets, for example).\r\n *\r\n * @class GravityWell\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(number|Phaser.Types.GameObjects.Particles.GravityWellConfig)} [x=0] - The x coordinate of the Gravity Well, in world space.\r\n * @param {number} [y=0] - The y coordinate of the Gravity Well, in world space.\r\n * @param {number} [power=0] - The strength of the gravity force - larger numbers produce a stronger force.\r\n * @param {number} [epsilon=100] - The minimum distance for which the gravity force is calculated.\r\n * @param {number} [gravity=50] - The gravitational force of this Gravity Well.\r\n */\n\n\nvar GravityWell = new Class({\n  initialize: function GravityWell(x, y, power, epsilon, gravity) {\n    if (typeof x === 'object') {\n      var config = x;\n      x = GetFastValue(config, 'x', 0);\n      y = GetFastValue(config, 'y', 0);\n      power = GetFastValue(config, 'power', 0);\n      epsilon = GetFastValue(config, 'epsilon', 100);\n      gravity = GetFastValue(config, 'gravity', 50);\n    } else {\n      if (x === undefined) {\n        x = 0;\n      }\n\n      if (y === undefined) {\n        y = 0;\n      }\n\n      if (power === undefined) {\n        power = 0;\n      }\n\n      if (epsilon === undefined) {\n        epsilon = 100;\n      }\n\n      if (gravity === undefined) {\n        gravity = 50;\n      }\n    }\n    /**\r\n     * The x coordinate of the Gravity Well, in world space.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.x = x;\n    /**\r\n     * The y coordinate of the Gravity Well, in world space.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The active state of the Gravity Well. An inactive Gravity Well will not influence any particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#active\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.active = true;\n    /**\r\n     * Internal gravity value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_gravity\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._gravity = gravity;\n    /**\r\n     * Internal power value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_power\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._power = 0;\n    /**\r\n     * Internal epsilon value.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#_epsilon\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._epsilon = 0;\n    /**\r\n     * The strength of the gravity force - larger numbers produce a stronger force.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#power\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.power = power;\n    /**\r\n     * The minimum distance for which the gravity force is calculated.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.GravityWell#epsilon\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.epsilon = epsilon;\n  },\n\n  /**\r\n   * Takes a Particle and updates it based on the properties of this Gravity Well.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.GravityWell#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to update.\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   */\n  update: function (particle, delta) {\n    var x = this.x - particle.x;\n    var y = this.y - particle.y;\n    var dSq = x * x + y * y;\n\n    if (dSq === 0) {\n      return;\n    }\n\n    var d = Math.sqrt(dSq);\n\n    if (dSq < this._epsilon) {\n      dSq = this._epsilon;\n    }\n\n    var factor = this._power * delta / (dSq * d) * 100;\n    particle.velocityX += x * factor;\n    particle.velocityY += y * factor;\n  },\n  epsilon: {\n    get: function () {\n      return Math.sqrt(this._epsilon);\n    },\n    set: function (value) {\n      this._epsilon = value * value;\n    }\n  },\n  power: {\n    get: function () {\n      return this._power / this._gravity;\n    },\n    set: function (value) {\n      this._power = value * this._gravity;\n    }\n  },\n  gravity: {\n    get: function () {\n      return this._gravity;\n    },\n    set: function (value) {\n      var pwr = this.power;\n      this._gravity = value;\n      this.power = pwr;\n    }\n  }\n});\nmodule.exports = GravityWell;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/GravityWell.js"],"names":["Class","require","GetFastValue","GravityWell","initialize","x","y","power","epsilon","gravity","config","undefined","active","_gravity","_power","_epsilon","update","particle","delta","dSq","d","Math","sqrt","factor","velocityX","velocityY","get","set","value","pwr","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * @classdesc\r\n * The GravityWell action applies a force on the particle to draw it towards, or repel it from, a single point.\r\n * \r\n * The force applied is inversely proportional to the square of the distance from the particle to the point, in accordance with Newton's law of gravity.\r\n * \r\n * This simulates the effect of gravity over large distances (as between planets, for example).\r\n *\r\n * @class GravityWell\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(number|Phaser.Types.GameObjects.Particles.GravityWellConfig)} [x=0] - The x coordinate of the Gravity Well, in world space.\r\n * @param {number} [y=0] - The y coordinate of the Gravity Well, in world space.\r\n * @param {number} [power=0] - The strength of the gravity force - larger numbers produce a stronger force.\r\n * @param {number} [epsilon=100] - The minimum distance for which the gravity force is calculated.\r\n * @param {number} [gravity=50] - The gravitational force of this Gravity Well.\r\n */\r\nvar GravityWell = new Class({\r\n\r\n    initialize:\r\n\r\n    function GravityWell (x, y, power, epsilon, gravity)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            var config = x;\r\n\r\n            x = GetFastValue(config, 'x', 0);\r\n            y = GetFastValue(config, 'y', 0);\r\n            power = GetFastValue(config, 'power', 0);\r\n            epsilon = GetFastValue(config, 'epsilon', 100);\r\n            gravity = GetFastValue(config, 'gravity', 50);\r\n        }\r\n        else\r\n        {\r\n            if (x === undefined) { x = 0; }\r\n            if (y === undefined) { y = 0; }\r\n            if (power === undefined) { power = 0; }\r\n            if (epsilon === undefined) { epsilon = 100; }\r\n            if (gravity === undefined) { gravity = 50; }\r\n        }\r\n\r\n        /**\r\n         * The x coordinate of the Gravity Well, in world space.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#x\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y coordinate of the Gravity Well, in world space.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#y\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The active state of the Gravity Well. An inactive Gravity Well will not influence any particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#active\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.active = true;\r\n\r\n        /**\r\n         * Internal gravity value.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#_gravity\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._gravity = gravity;\r\n\r\n        /**\r\n         * Internal power value.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#_power\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._power = 0;\r\n\r\n        /**\r\n         * Internal epsilon value.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#_epsilon\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._epsilon = 0;\r\n\r\n        /**\r\n         * The strength of the gravity force - larger numbers produce a stronger force.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#power\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.power = power;\r\n\r\n        /**\r\n         * The minimum distance for which the gravity force is calculated.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.GravityWell#epsilon\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.epsilon = epsilon;\r\n    },\r\n\r\n    /**\r\n     * Takes a Particle and updates it based on the properties of this Gravity Well.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.GravityWell#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to update.\r\n     * @param {number} delta - The delta time in ms.\r\n     * @param {number} step - The delta value divided by 1000.\r\n     */\r\n    update: function (particle, delta)\r\n    {\r\n        var x = this.x - particle.x;\r\n        var y = this.y - particle.y;\r\n        var dSq = x * x + y * y;\r\n\r\n        if (dSq === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var d = Math.sqrt(dSq);\r\n\r\n        if (dSq < this._epsilon)\r\n        {\r\n            dSq = this._epsilon;\r\n        }\r\n\r\n        var factor = ((this._power * delta) / (dSq * d)) * 100;\r\n\r\n        particle.velocityX += x * factor;\r\n        particle.velocityY += y * factor;\r\n    },\r\n\r\n    epsilon: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.sqrt(this._epsilon);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._epsilon = value * value;\r\n        }\r\n\r\n    },\r\n\r\n    power: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._power / this._gravity;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._power = value * this._gravity;\r\n        }\r\n\r\n    },\r\n\r\n    gravity: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._gravity;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var pwr = this.power;\r\n            this._gravity = value;\r\n            this.power = pwr;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = GravityWell;\r\n"]},"metadata":{},"sourceType":"script"}