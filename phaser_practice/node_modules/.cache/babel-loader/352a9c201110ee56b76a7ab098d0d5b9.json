{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetValue = require('../../utils/object/GetValue');\n/**\r\n * @classdesc\r\n * A Smoothed Key Camera Control.\r\n *\r\n * This allows you to control the movement and zoom of a camera using the defined keys.\r\n * Unlike the Fixed Camera Control you can also provide physics values for acceleration, drag and maxSpeed for smoothing effects.\r\n *\r\n * ```javascript\r\n * var controlConfig = {\r\n *     camera: this.cameras.main,\r\n *     left: cursors.left,\r\n *     right: cursors.right,\r\n *     up: cursors.up,\r\n *     down: cursors.down,\r\n *     zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),\r\n *     zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),\r\n *     zoomSpeed: 0.02,\r\n *     acceleration: 0.06,\r\n *     drag: 0.0005,\r\n *     maxSpeed: 1.0\r\n * };\r\n * ```\r\n * \r\n * You must call the `update` method of this controller every frame.\r\n *\r\n * @class SmoothedKeyControl\r\n * @memberof Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Cameras.Controls.SmoothedKeyControlConfig} config - The Smoothed Key Control configuration object.\r\n */\n\n\nvar SmoothedKeyControl = new Class({\n  initialize: function SmoothedKeyControl(config) {\n    /**\r\n     * The Camera that this Control will update.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#camera\r\n     * @type {?Phaser.Cameras.Scene2D.Camera}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n    this.camera = GetValue(config, 'camera', null);\n    /**\r\n     * The Key to be pressed that will move the Camera left.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#left\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.left = GetValue(config, 'left', null);\n    /**\r\n     * The Key to be pressed that will move the Camera right.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#right\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.right = GetValue(config, 'right', null);\n    /**\r\n     * The Key to be pressed that will move the Camera up.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#up\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.up = GetValue(config, 'up', null);\n    /**\r\n     * The Key to be pressed that will move the Camera down.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#down\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.down = GetValue(config, 'down', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera in.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomIn\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomIn = GetValue(config, 'zoomIn', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera out.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomOut\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomOut = GetValue(config, 'zoomOut', null);\n    /**\r\n     * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomSpeed\r\n     * @type {number}\r\n     * @default 0.01\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\n    /**\r\n     * The horizontal acceleration the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelX = 0;\n    /**\r\n     * The vertical acceleration the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelY = 0;\n    var accel = GetValue(config, 'acceleration', null);\n\n    if (typeof accel === 'number') {\n      this.accelX = accel;\n      this.accelY = accel;\n    } else {\n      this.accelX = GetValue(config, 'acceleration.x', 0);\n      this.accelY = GetValue(config, 'acceleration.y', 0);\n    }\n    /**\r\n     * The horizontal drag applied to the camera when it is moving.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.dragX = 0;\n    /**\r\n     * The vertical drag applied to the camera when it is moving.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.dragY = 0;\n    var drag = GetValue(config, 'drag', null);\n\n    if (typeof drag === 'number') {\n      this.dragX = drag;\n      this.dragY = drag;\n    } else {\n      this.dragX = GetValue(config, 'drag.x', 0);\n      this.dragY = GetValue(config, 'drag.y', 0);\n    }\n    /**\r\n     * The maximum horizontal speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.maxSpeedX = 0;\n    /**\r\n     * The maximum vertical speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxSpeedY = 0;\n    var maxSpeed = GetValue(config, 'maxSpeed', null);\n\n    if (typeof maxSpeed === 'number') {\n      this.maxSpeedX = maxSpeed;\n      this.maxSpeedY = maxSpeed;\n    } else {\n      this.maxSpeedX = GetValue(config, 'maxSpeed.x', 0);\n      this.maxSpeedY = GetValue(config, 'maxSpeed.y', 0);\n    }\n    /**\r\n     * Internal property to track the speed of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedX\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this._speedX = 0;\n    /**\r\n     * Internal property to track the speed of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedY\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._speedY = 0;\n    /**\r\n     * Internal property to track the zoom of the control.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#_zoom\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._zoom = 0;\n    /**\r\n     * A flag controlling if the Controls will update the Camera or not.\r\n     *\r\n     * @name Phaser.Cameras.Controls.SmoothedKeyControl#active\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.active = this.camera !== null;\n  },\n\n  /**\r\n   * Starts the Key Control running, providing it has been linked to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#start\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  start: function () {\n    this.active = this.camera !== null;\n    return this;\n  },\n\n  /**\r\n   * Stops this Key Control from running. Call `start` to start it again.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  stop: function () {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Binds this Key Control to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#setCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n   *\r\n   * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n   */\n  setCamera: function (camera) {\n    this.camera = camera;\n    return this;\n  },\n\n  /**\r\n   * Applies the results of pressing the control keys to the Camera.\r\n   *\r\n   * You must call this every step, it is not called automatically.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function (delta) {\n    if (!this.active) {\n      return;\n    }\n\n    if (delta === undefined) {\n      delta = 1;\n    }\n\n    var cam = this.camera; //  Apply Deceleration\n\n    if (this._speedX > 0) {\n      this._speedX -= this.dragX * delta;\n\n      if (this._speedX < 0) {\n        this._speedX = 0;\n      }\n    } else if (this._speedX < 0) {\n      this._speedX += this.dragX * delta;\n\n      if (this._speedX > 0) {\n        this._speedX = 0;\n      }\n    }\n\n    if (this._speedY > 0) {\n      this._speedY -= this.dragY * delta;\n\n      if (this._speedY < 0) {\n        this._speedY = 0;\n      }\n    } else if (this._speedY < 0) {\n      this._speedY += this.dragY * delta;\n\n      if (this._speedY > 0) {\n        this._speedY = 0;\n      }\n    } //  Check for keys\n\n\n    if (this.up && this.up.isDown) {\n      this._speedY += this.accelY;\n\n      if (this._speedY > this.maxSpeedY) {\n        this._speedY = this.maxSpeedY;\n      }\n    } else if (this.down && this.down.isDown) {\n      this._speedY -= this.accelY;\n\n      if (this._speedY < -this.maxSpeedY) {\n        this._speedY = -this.maxSpeedY;\n      }\n    }\n\n    if (this.left && this.left.isDown) {\n      this._speedX += this.accelX;\n\n      if (this._speedX > this.maxSpeedX) {\n        this._speedX = this.maxSpeedX;\n      }\n    } else if (this.right && this.right.isDown) {\n      this._speedX -= this.accelX;\n\n      if (this._speedX < -this.maxSpeedX) {\n        this._speedX = -this.maxSpeedX;\n      }\n    } //  Camera zoom\n\n\n    if (this.zoomIn && this.zoomIn.isDown) {\n      this._zoom = -this.zoomSpeed;\n    } else if (this.zoomOut && this.zoomOut.isDown) {\n      this._zoom = this.zoomSpeed;\n    } else {\n      this._zoom = 0;\n    } //  Apply to Camera\n\n\n    if (this._speedX !== 0) {\n      cam.scrollX -= this._speedX * delta | 0;\n    }\n\n    if (this._speedY !== 0) {\n      cam.scrollY -= this._speedY * delta | 0;\n    }\n\n    if (this._zoom !== 0) {\n      cam.zoom += this._zoom;\n\n      if (cam.zoom < 0.001) {\n        cam.zoom = 0.001;\n      }\n    }\n  },\n\n  /**\r\n   * Destroys this Key Control.\r\n   *\r\n   * @method Phaser.Cameras.Controls.SmoothedKeyControl#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.camera = null;\n    this.left = null;\n    this.right = null;\n    this.up = null;\n    this.down = null;\n    this.zoomIn = null;\n    this.zoomOut = null;\n  }\n});\nmodule.exports = SmoothedKeyControl;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/controls/SmoothedKeyControl.js"],"names":["Class","require","GetValue","SmoothedKeyControl","initialize","config","camera","left","right","up","down","zoomIn","zoomOut","zoomSpeed","accelX","accelY","accel","dragX","dragY","drag","maxSpeedX","maxSpeedY","maxSpeed","_speedX","_speedY","_zoom","active","start","stop","setCamera","update","delta","undefined","cam","isDown","scrollX","scrollY","zoom","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n/**\r\n * @classdesc\r\n * A Smoothed Key Camera Control.\r\n *\r\n * This allows you to control the movement and zoom of a camera using the defined keys.\r\n * Unlike the Fixed Camera Control you can also provide physics values for acceleration, drag and maxSpeed for smoothing effects.\r\n *\r\n * ```javascript\r\n * var controlConfig = {\r\n *     camera: this.cameras.main,\r\n *     left: cursors.left,\r\n *     right: cursors.right,\r\n *     up: cursors.up,\r\n *     down: cursors.down,\r\n *     zoomIn: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.Q),\r\n *     zoomOut: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.E),\r\n *     zoomSpeed: 0.02,\r\n *     acceleration: 0.06,\r\n *     drag: 0.0005,\r\n *     maxSpeed: 1.0\r\n * };\r\n * ```\r\n * \r\n * You must call the `update` method of this controller every frame.\r\n *\r\n * @class SmoothedKeyControl\r\n * @memberof Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Cameras.Controls.SmoothedKeyControlConfig} config - The Smoothed Key Control configuration object.\r\n */\r\nvar SmoothedKeyControl = new Class({\r\n\r\n    initialize:\r\n\r\n    function SmoothedKeyControl (config)\r\n    {\r\n        /**\r\n         * The Camera that this Control will update.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#camera\r\n         * @type {?Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = GetValue(config, 'camera', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera left.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#left\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.left = GetValue(config, 'left', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera right.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#right\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.right = GetValue(config, 'right', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera up.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#up\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.up = GetValue(config, 'up', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera down.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#down\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.down = GetValue(config, 'down', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera in.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomIn\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomIn = GetValue(config, 'zoomIn', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera out.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomOut\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomOut = GetValue(config, 'zoomOut', null);\r\n\r\n        /**\r\n         * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#zoomSpeed\r\n         * @type {number}\r\n         * @default 0.01\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\r\n\r\n        /**\r\n         * The horizontal acceleration the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelX = 0;\r\n\r\n        /**\r\n         * The vertical acceleration the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#accelY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelY = 0;\r\n\r\n        var accel = GetValue(config, 'acceleration', null);\r\n\r\n        if (typeof accel === 'number')\r\n        {\r\n            this.accelX = accel;\r\n            this.accelY = accel;\r\n        }\r\n        else\r\n        {\r\n            this.accelX = GetValue(config, 'acceleration.x', 0);\r\n            this.accelY = GetValue(config, 'acceleration.y', 0);\r\n        }\r\n\r\n        /**\r\n         * The horizontal drag applied to the camera when it is moving.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.dragX = 0;\r\n\r\n        /**\r\n         * The vertical drag applied to the camera when it is moving.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#dragY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.dragY = 0;\r\n\r\n        var drag = GetValue(config, 'drag', null);\r\n\r\n        if (typeof drag === 'number')\r\n        {\r\n            this.dragX = drag;\r\n            this.dragY = drag;\r\n        }\r\n        else\r\n        {\r\n            this.dragX = GetValue(config, 'drag.x', 0);\r\n            this.dragY = GetValue(config, 'drag.y', 0);\r\n        }\r\n\r\n        /**\r\n         * The maximum horizontal speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxSpeedX = 0;\r\n\r\n        /**\r\n         * The maximum vertical speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#maxSpeedY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxSpeedY = 0;\r\n\r\n        var maxSpeed = GetValue(config, 'maxSpeed', null);\r\n\r\n        if (typeof maxSpeed === 'number')\r\n        {\r\n            this.maxSpeedX = maxSpeed;\r\n            this.maxSpeedY = maxSpeed;\r\n        }\r\n        else\r\n        {\r\n            this.maxSpeedX = GetValue(config, 'maxSpeed.x', 0);\r\n            this.maxSpeedY = GetValue(config, 'maxSpeed.y', 0);\r\n        }\r\n\r\n        /**\r\n         * Internal property to track the speed of the control.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._speedX = 0;\r\n\r\n        /**\r\n         * Internal property to track the speed of the control.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_speedY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._speedY = 0;\r\n\r\n        /**\r\n         * Internal property to track the zoom of the control.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 0;\r\n\r\n        /**\r\n         * A flag controlling if the Controls will update the Camera or not.\r\n         *\r\n         * @name Phaser.Cameras.Controls.SmoothedKeyControl#active\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.active = (this.camera !== null);\r\n    },\r\n\r\n    /**\r\n     * Starts the Key Control running, providing it has been linked to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.active = (this.camera !== null);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops this Key Control from running. Call `start` to start it again.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds this Key Control to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#setCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n     *\r\n     * @return {Phaser.Cameras.Controls.SmoothedKeyControl} This Key Control instance.\r\n     */\r\n    setCamera: function (camera)\r\n    {\r\n        this.camera = camera;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies the results of pressing the control keys to the Camera.\r\n     *\r\n     * You must call this every step, it is not called automatically.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (delta === undefined) { delta = 1; }\r\n\r\n        var cam = this.camera;\r\n\r\n        //  Apply Deceleration\r\n\r\n        if (this._speedX > 0)\r\n        {\r\n            this._speedX -= this.dragX * delta;\r\n\r\n            if (this._speedX < 0)\r\n            {\r\n                this._speedX = 0;\r\n            }\r\n        }\r\n        else if (this._speedX < 0)\r\n        {\r\n            this._speedX += this.dragX * delta;\r\n\r\n            if (this._speedX > 0)\r\n            {\r\n                this._speedX = 0;\r\n            }\r\n        }\r\n\r\n        if (this._speedY > 0)\r\n        {\r\n            this._speedY -= this.dragY * delta;\r\n\r\n            if (this._speedY < 0)\r\n            {\r\n                this._speedY = 0;\r\n            }\r\n        }\r\n        else if (this._speedY < 0)\r\n        {\r\n            this._speedY += this.dragY * delta;\r\n\r\n            if (this._speedY > 0)\r\n            {\r\n                this._speedY = 0;\r\n            }\r\n        }\r\n\r\n        //  Check for keys\r\n\r\n        if (this.up && this.up.isDown)\r\n        {\r\n            this._speedY += this.accelY;\r\n\r\n            if (this._speedY > this.maxSpeedY)\r\n            {\r\n                this._speedY = this.maxSpeedY;\r\n            }\r\n        }\r\n        else if (this.down && this.down.isDown)\r\n        {\r\n            this._speedY -= this.accelY;\r\n\r\n            if (this._speedY < -this.maxSpeedY)\r\n            {\r\n                this._speedY = -this.maxSpeedY;\r\n            }\r\n        }\r\n\r\n        if (this.left && this.left.isDown)\r\n        {\r\n            this._speedX += this.accelX;\r\n\r\n            if (this._speedX > this.maxSpeedX)\r\n            {\r\n                this._speedX = this.maxSpeedX;\r\n            }\r\n        }\r\n        else if (this.right && this.right.isDown)\r\n        {\r\n            this._speedX -= this.accelX;\r\n\r\n            if (this._speedX < -this.maxSpeedX)\r\n            {\r\n                this._speedX = -this.maxSpeedX;\r\n            }\r\n        }\r\n\r\n        //  Camera zoom\r\n\r\n        if (this.zoomIn && this.zoomIn.isDown)\r\n        {\r\n            this._zoom = -this.zoomSpeed;\r\n        }\r\n        else if (this.zoomOut && this.zoomOut.isDown)\r\n        {\r\n            this._zoom = this.zoomSpeed;\r\n        }\r\n        else\r\n        {\r\n            this._zoom = 0;\r\n        }\r\n\r\n        //  Apply to Camera\r\n\r\n        if (this._speedX !== 0)\r\n        {\r\n            cam.scrollX -= ((this._speedX * delta) | 0);\r\n        }\r\n\r\n        if (this._speedY !== 0)\r\n        {\r\n            cam.scrollY -= ((this._speedY * delta) | 0);\r\n        }\r\n\r\n        if (this._zoom !== 0)\r\n        {\r\n            cam.zoom += this._zoom;\r\n\r\n            if (cam.zoom < 0.001)\r\n            {\r\n                cam.zoom = 0.001;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Key Control.\r\n     *\r\n     * @method Phaser.Cameras.Controls.SmoothedKeyControl#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n\r\n        this.left = null;\r\n        this.right = null;\r\n        this.up = null;\r\n        this.down = null;\r\n\r\n        this.zoomIn = null;\r\n        this.zoomOut = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = SmoothedKeyControl;\r\n"]},"metadata":{},"sourceType":"script"}