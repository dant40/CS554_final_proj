{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Line#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Line} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar LineWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  var camMatrix = pipeline._tempMatrix1;\n  var shapeMatrix = pipeline._tempMatrix2;\n  renderer.setPipeline(pipeline);\n  shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    shapeMatrix.e = src.x;\n    shapeMatrix.f = src.y;\n  } else {\n    shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\n    shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\n  }\n\n  var dx = src._displayOriginX;\n  var dy = src._displayOriginY;\n  var alpha = camera.alpha * src.alpha;\n\n  if (src.isStroked) {\n    var strokeTint = pipeline.strokeTint;\n    var color = Utils.getTintAppendFloatAlphaAndSwap(src.strokeColor, src.strokeAlpha * alpha);\n    strokeTint.TL = color;\n    strokeTint.TR = color;\n    strokeTint.BL = color;\n    strokeTint.BR = color;\n    var startWidth = src._startWidth;\n    var endWidth = src._endWidth;\n    pipeline.setTexture2D();\n    pipeline.batchLine(src.geom.x1 - dx, src.geom.y1 - dy, src.geom.x2 - dx, src.geom.y2 - dy, startWidth, endWidth, 1, 0, false, shapeMatrix, camMatrix);\n  }\n};\n\nmodule.exports = LineWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/line/LineWebGLRenderer.js"],"names":["Utils","require","LineWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","dx","_displayOriginX","dy","_displayOriginY","alpha","isStroked","strokeTint","color","getTintAppendFloatAlphaAndSwap","strokeColor","strokeAlpha","TL","TR","BL","BR","startWidth","_startWidth","endWidth","_endWidth","setTexture2D","batchLine","geom","x1","y1","x2","y2","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,+BAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,iBAAiB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EACxB;AACI,MAAIC,QAAQ,GAAG,KAAKA,QAApB;AAEA,MAAIC,SAAS,GAAGD,QAAQ,CAACE,YAAzB;AACA,MAAIC,WAAW,GAAGH,QAAQ,CAACI,YAA3B;AAEAT,EAAAA,QAAQ,CAACU,WAAT,CAAqBL,QAArB;AAEAG,EAAAA,WAAW,CAACG,SAAZ,CAAsBV,GAAG,CAACW,CAA1B,EAA6BX,GAAG,CAACY,CAAjC,EAAoCZ,GAAG,CAACa,QAAxC,EAAkDb,GAAG,CAACc,MAAtD,EAA8Dd,GAAG,CAACe,MAAlE;AAEAV,EAAAA,SAAS,CAACW,QAAV,CAAmBd,MAAM,CAACe,MAA1B;;AAEA,MAAId,YAAJ,EACA;AACI;AACAE,IAAAA,SAAS,CAACa,kBAAV,CAA6Bf,YAA7B,EAA2C,CAACD,MAAM,CAACiB,OAAR,GAAkBnB,GAAG,CAACoB,aAAjE,EAAgF,CAAClB,MAAM,CAACmB,OAAR,GAAkBrB,GAAG,CAACsB,aAAtG,EAFJ,CAII;;AACAf,IAAAA,WAAW,CAACgB,CAAZ,GAAgBvB,GAAG,CAACW,CAApB;AACAJ,IAAAA,WAAW,CAACiB,CAAZ,GAAgBxB,GAAG,CAACY,CAApB;AACH,GARD,MAUA;AACIL,IAAAA,WAAW,CAACgB,CAAZ,IAAiBrB,MAAM,CAACiB,OAAP,GAAiBnB,GAAG,CAACoB,aAAtC;AACAb,IAAAA,WAAW,CAACiB,CAAZ,IAAiBtB,MAAM,CAACmB,OAAP,GAAiBrB,GAAG,CAACsB,aAAtC;AACH;;AAED,MAAIG,EAAE,GAAGzB,GAAG,CAAC0B,eAAb;AACA,MAAIC,EAAE,GAAG3B,GAAG,CAAC4B,eAAb;AACA,MAAIC,KAAK,GAAG3B,MAAM,CAAC2B,KAAP,GAAe7B,GAAG,CAAC6B,KAA/B;;AAEA,MAAI7B,GAAG,CAAC8B,SAAR,EACA;AACI,QAAIC,UAAU,GAAG3B,QAAQ,CAAC2B,UAA1B;AACA,QAAIC,KAAK,GAAGpC,KAAK,CAACqC,8BAAN,CAAqCjC,GAAG,CAACkC,WAAzC,EAAsDlC,GAAG,CAACmC,WAAJ,GAAkBN,KAAxE,CAAZ;AAEAE,IAAAA,UAAU,CAACK,EAAX,GAAgBJ,KAAhB;AACAD,IAAAA,UAAU,CAACM,EAAX,GAAgBL,KAAhB;AACAD,IAAAA,UAAU,CAACO,EAAX,GAAgBN,KAAhB;AACAD,IAAAA,UAAU,CAACQ,EAAX,GAAgBP,KAAhB;AAEA,QAAIQ,UAAU,GAAGxC,GAAG,CAACyC,WAArB;AACA,QAAIC,QAAQ,GAAG1C,GAAG,CAAC2C,SAAnB;AAEAvC,IAAAA,QAAQ,CAACwC,YAAT;AAEAxC,IAAAA,QAAQ,CAACyC,SAAT,CACI7C,GAAG,CAAC8C,IAAJ,CAASC,EAAT,GAActB,EADlB,EAEIzB,GAAG,CAAC8C,IAAJ,CAASE,EAAT,GAAcrB,EAFlB,EAGI3B,GAAG,CAAC8C,IAAJ,CAASG,EAAT,GAAcxB,EAHlB,EAIIzB,GAAG,CAAC8C,IAAJ,CAASI,EAAT,GAAcvB,EAJlB,EAKIa,UALJ,EAMIE,QANJ,EAOI,CAPJ,EAQI,CARJ,EASI,KATJ,EAUInC,WAVJ,EAWIF,SAXJ;AAaH;AACJ,CA7DD;;AA+DA8C,MAAM,CAACC,OAAP,GAAiBtD,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Line#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Line} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar LineWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    var dx = src._displayOriginX;\r\n    var dy = src._displayOriginY;\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (src.isStroked)\r\n    {\r\n        var strokeTint = pipeline.strokeTint;\r\n        var color = Utils.getTintAppendFloatAlphaAndSwap(src.strokeColor, src.strokeAlpha * alpha);\r\n\r\n        strokeTint.TL = color;\r\n        strokeTint.TR = color;\r\n        strokeTint.BL = color;\r\n        strokeTint.BR = color;\r\n\r\n        var startWidth = src._startWidth;\r\n        var endWidth = src._endWidth;\r\n\r\n        pipeline.setTexture2D();\r\n\r\n        pipeline.batchLine(\r\n            src.geom.x1 - dx,\r\n            src.geom.y1 - dy,\r\n            src.geom.x2 - dx,\r\n            src.geom.y2 - dy,\r\n            startWidth,\r\n            endWidth,\r\n            1,\r\n            0,\r\n            false,\r\n            shapeMatrix,\r\n            camMatrix\r\n        );\r\n    }\r\n};\r\n\r\nmodule.exports = LineWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}