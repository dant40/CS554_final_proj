{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CONST = require('../../const');\n\nvar Smoothing = require('./Smoothing'); // The pool into which the canvas elements are placed.\n\n\nvar pool = []; //  Automatically apply smoothing(false) to created Canvas elements\n\nvar _disableContextSmoothing = false;\n/**\r\n * The CanvasPool is a global static object, that allows Phaser to recycle and pool 2D Context Canvas DOM elements.\r\n * It does not pool WebGL Contexts, because once the context options are set they cannot be modified again, \r\n * which is useless for some of the Phaser pipelines / renderer.\r\n *\r\n * This singleton is instantiated as soon as Phaser loads, before a Phaser.Game instance has even been created.\r\n * Which means all instances of Phaser Games on the same page can share the one single pool.\r\n *\r\n * @namespace Phaser.Display.Canvas.CanvasPool\r\n * @since 3.0.0\r\n */\n\nvar CanvasPool = function () {\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n   * @param {boolean} [selfParent=false] - Use the generated Canvas element as the parent?\r\n   *\r\n   * @return {HTMLCanvasElement} The canvas element that was created or pulled from the pool\r\n   */\n  var create = function (parent, width, height, canvasType, selfParent) {\n    if (width === undefined) {\n      width = 1;\n    }\n\n    if (height === undefined) {\n      height = 1;\n    }\n\n    if (canvasType === undefined) {\n      canvasType = CONST.CANVAS;\n    }\n\n    if (selfParent === undefined) {\n      selfParent = false;\n    }\n\n    var canvas;\n    var container = first(canvasType);\n\n    if (container === null) {\n      container = {\n        parent: parent,\n        canvas: document.createElement('canvas'),\n        type: canvasType\n      };\n\n      if (canvasType === CONST.CANVAS) {\n        pool.push(container);\n      }\n\n      canvas = container.canvas;\n    } else {\n      container.parent = parent;\n      canvas = container.canvas;\n    }\n\n    if (selfParent) {\n      container.parent = canvas;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    if (_disableContextSmoothing && canvasType === CONST.CANVAS) {\n      Smoothing.disable(canvas.getContext('2d'));\n    }\n\n    return canvas;\n  };\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.create2D\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   *\r\n   * @return {HTMLCanvasElement} The created canvas.\r\n   */\n\n\n  var create2D = function (parent, width, height) {\n    return create(parent, width, height, CONST.CANVAS);\n  };\n  /**\r\n   * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.createWebGL\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The parent of the Canvas object.\r\n   * @param {integer} [width=1] - The width of the Canvas.\r\n   * @param {integer} [height=1] - The height of the Canvas.\r\n   *\r\n   * @return {HTMLCanvasElement} The created WebGL canvas.\r\n   */\n\n\n  var createWebGL = function (parent, width, height) {\n    return create(parent, width, height, CONST.WEBGL);\n  };\n  /**\r\n   * Gets the first free canvas index from the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.first\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n   *\r\n   * @return {HTMLCanvasElement} The first free canvas, or `null` if a WebGL canvas was requested or if the pool doesn't have free canvases.\r\n   */\n\n\n  var first = function (canvasType) {\n    if (canvasType === undefined) {\n      canvasType = CONST.CANVAS;\n    }\n\n    if (canvasType === CONST.WEBGL) {\n      return null;\n    }\n\n    for (var i = 0; i < pool.length; i++) {\n      var container = pool[i];\n\n      if (!container.parent && container.type === canvasType) {\n        return container;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Looks up a canvas based on its parent, and if found puts it back in the pool, freeing it up for re-use.\r\n   * The canvas has its width and height set to 1, and its parent attribute nulled.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {*} parent - The canvas or the parent of the canvas to free.\r\n   */\n\n\n  var remove = function (parent) {\n    //  Check to see if the parent is a canvas object\n    var isCanvas = parent instanceof HTMLCanvasElement;\n    pool.forEach(function (container) {\n      if (isCanvas && container.canvas === parent || !isCanvas && container.parent === parent) {\n        container.parent = null;\n        container.canvas.width = 1;\n        container.canvas.height = 1;\n      }\n    });\n  };\n  /**\r\n   * Gets the total number of used canvas elements in the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.total\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of used canvases.\r\n   */\n\n\n  var total = function () {\n    var c = 0;\n    pool.forEach(function (container) {\n      if (container.parent) {\n        c++;\n      }\n    });\n    return c;\n  };\n  /**\r\n   * Gets the total number of free canvas elements in the pool.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.free\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of free canvases.\r\n   */\n\n\n  var free = function () {\n    return pool.length - total();\n  };\n  /**\r\n   * Disable context smoothing on any new Canvas element created.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.disableSmoothing\r\n   * @since 3.0.0\r\n   */\n\n\n  var disableSmoothing = function () {\n    _disableContextSmoothing = true;\n  };\n  /**\r\n   * Enable context smoothing on any new Canvas element created.\r\n   *\r\n   * @function Phaser.Display.Canvas.CanvasPool.enableSmoothing\r\n   * @since 3.0.0\r\n   */\n\n\n  var enableSmoothing = function () {\n    _disableContextSmoothing = false;\n  };\n\n  return {\n    create2D: create2D,\n    create: create,\n    createWebGL: createWebGL,\n    disableSmoothing: disableSmoothing,\n    enableSmoothing: enableSmoothing,\n    first: first,\n    free: free,\n    pool: pool,\n    remove: remove,\n    total: total\n  };\n}; //  If we export the called function here, it'll only be invoked once (not every time it's required).\n\n\nmodule.exports = CanvasPool();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/canvas/CanvasPool.js"],"names":["CONST","require","Smoothing","pool","_disableContextSmoothing","CanvasPool","create","parent","width","height","canvasType","selfParent","undefined","CANVAS","canvas","container","first","document","createElement","type","push","disable","getContext","create2D","createWebGL","WEBGL","i","length","remove","isCanvas","HTMLCanvasElement","forEach","total","c","free","disableSmoothing","enableSmoothing","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('../../const');\r\nvar Smoothing = require('./Smoothing');\r\n\r\n// The pool into which the canvas elements are placed.\r\nvar pool = [];\r\n\r\n//  Automatically apply smoothing(false) to created Canvas elements\r\nvar _disableContextSmoothing = false;\r\n\r\n/**\r\n * The CanvasPool is a global static object, that allows Phaser to recycle and pool 2D Context Canvas DOM elements.\r\n * It does not pool WebGL Contexts, because once the context options are set they cannot be modified again, \r\n * which is useless for some of the Phaser pipelines / renderer.\r\n *\r\n * This singleton is instantiated as soon as Phaser loads, before a Phaser.Game instance has even been created.\r\n * Which means all instances of Phaser Games on the same page can share the one single pool.\r\n *\r\n * @namespace Phaser.Display.Canvas.CanvasPool\r\n * @since 3.0.0\r\n */\r\nvar CanvasPool = function ()\r\n{\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n     * @param {boolean} [selfParent=false] - Use the generated Canvas element as the parent?\r\n     *\r\n     * @return {HTMLCanvasElement} The canvas element that was created or pulled from the pool\r\n     */\r\n    var create = function (parent, width, height, canvasType, selfParent)\r\n    {\r\n        if (width === undefined) { width = 1; }\r\n        if (height === undefined) { height = 1; }\r\n        if (canvasType === undefined) { canvasType = CONST.CANVAS; }\r\n        if (selfParent === undefined) { selfParent = false; }\r\n\r\n        var canvas;\r\n        var container = first(canvasType);\r\n\r\n        if (container === null)\r\n        {\r\n            container = {\r\n                parent: parent,\r\n                canvas: document.createElement('canvas'),\r\n                type: canvasType\r\n            };\r\n\r\n            if (canvasType === CONST.CANVAS)\r\n            {\r\n                pool.push(container);\r\n            }\r\n\r\n            canvas = container.canvas;\r\n        }\r\n        else\r\n        {\r\n            container.parent = parent;\r\n\r\n            canvas = container.canvas;\r\n        }\r\n\r\n        if (selfParent)\r\n        {\r\n            container.parent = canvas;\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n\r\n        if (_disableContextSmoothing && canvasType === CONST.CANVAS)\r\n        {\r\n            Smoothing.disable(canvas.getContext('2d'));\r\n        }\r\n\r\n        return canvas;\r\n    };\r\n\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.create2D\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     *\r\n     * @return {HTMLCanvasElement} The created canvas.\r\n     */\r\n    var create2D = function (parent, width, height)\r\n    {\r\n        return create(parent, width, height, CONST.CANVAS);\r\n    };\r\n\r\n    /**\r\n     * Creates a new Canvas DOM element, or pulls one from the pool if free.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.createWebGL\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The parent of the Canvas object.\r\n     * @param {integer} [width=1] - The width of the Canvas.\r\n     * @param {integer} [height=1] - The height of the Canvas.\r\n     *\r\n     * @return {HTMLCanvasElement} The created WebGL canvas.\r\n     */\r\n    var createWebGL = function (parent, width, height)\r\n    {\r\n        return create(parent, width, height, CONST.WEBGL);\r\n    };\r\n\r\n    /**\r\n     * Gets the first free canvas index from the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.first\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [canvasType=Phaser.CANVAS] - The type of the Canvas. Either `Phaser.CANVAS` or `Phaser.WEBGL`.\r\n     *\r\n     * @return {HTMLCanvasElement} The first free canvas, or `null` if a WebGL canvas was requested or if the pool doesn't have free canvases.\r\n     */\r\n    var first = function (canvasType)\r\n    {\r\n        if (canvasType === undefined) { canvasType = CONST.CANVAS; }\r\n\r\n        if (canvasType === CONST.WEBGL)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        for (var i = 0; i < pool.length; i++)\r\n        {\r\n            var container = pool[i];\r\n\r\n            if (!container.parent && container.type === canvasType)\r\n            {\r\n                return container;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Looks up a canvas based on its parent, and if found puts it back in the pool, freeing it up for re-use.\r\n     * The canvas has its width and height set to 1, and its parent attribute nulled.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {*} parent - The canvas or the parent of the canvas to free.\r\n     */\r\n    var remove = function (parent)\r\n    {\r\n        //  Check to see if the parent is a canvas object\r\n        var isCanvas = parent instanceof HTMLCanvasElement;\r\n\r\n        pool.forEach(function (container)\r\n        {\r\n            if ((isCanvas && container.canvas === parent) || (!isCanvas && container.parent === parent))\r\n            {\r\n                container.parent = null;\r\n                container.canvas.width = 1;\r\n                container.canvas.height = 1;\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Gets the total number of used canvas elements in the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.total\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of used canvases.\r\n     */\r\n    var total = function ()\r\n    {\r\n        var c = 0;\r\n\r\n        pool.forEach(function (container)\r\n        {\r\n            if (container.parent)\r\n            {\r\n                c++;\r\n            }\r\n        });\r\n\r\n        return c;\r\n    };\r\n\r\n    /**\r\n     * Gets the total number of free canvas elements in the pool.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.free\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of free canvases.\r\n     */\r\n    var free = function ()\r\n    {\r\n        return pool.length - total();\r\n    };\r\n\r\n    /**\r\n     * Disable context smoothing on any new Canvas element created.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.disableSmoothing\r\n     * @since 3.0.0\r\n     */\r\n    var disableSmoothing = function ()\r\n    {\r\n        _disableContextSmoothing = true;\r\n    };\r\n\r\n    /**\r\n     * Enable context smoothing on any new Canvas element created.\r\n     *\r\n     * @function Phaser.Display.Canvas.CanvasPool.enableSmoothing\r\n     * @since 3.0.0\r\n     */\r\n    var enableSmoothing = function ()\r\n    {\r\n        _disableContextSmoothing = false;\r\n    };\r\n\r\n    return {\r\n        create2D: create2D,\r\n        create: create,\r\n        createWebGL: createWebGL,\r\n        disableSmoothing: disableSmoothing,\r\n        enableSmoothing: enableSmoothing,\r\n        first: first,\r\n        free: free,\r\n        pool: pool,\r\n        remove: remove,\r\n        total: total\r\n    };\r\n};\r\n\r\n//  If we export the called function here, it'll only be invoked once (not every time it's required).\r\nmodule.exports = CanvasPool();\r\n"]},"metadata":{},"sourceType":"script"}