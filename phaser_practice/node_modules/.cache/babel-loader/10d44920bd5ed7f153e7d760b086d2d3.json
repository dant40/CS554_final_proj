{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar MergeXHRSettings = require('./MergeXHRSettings');\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\n\n\nvar XHRLoader = function (file, globalXHRSettings) {\n  var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', file.src, config.async, config.user, config.password);\n  xhr.responseType = file.xhrSettings.responseType;\n  xhr.timeout = config.timeout;\n\n  if (config.header && config.headerValue) {\n    xhr.setRequestHeader(config.header, config.headerValue);\n  }\n\n  if (config.requestedWith) {\n    xhr.setRequestHeader('X-Requested-With', config.requestedWith);\n  }\n\n  if (config.overrideMimeType) {\n    xhr.overrideMimeType(config.overrideMimeType);\n  } // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\n\n\n  xhr.onload = file.onLoad.bind(file, xhr);\n  xhr.onerror = file.onError.bind(file, xhr);\n  xhr.onprogress = file.onProgress.bind(file); //  This is the only standard method, the ones above are browser additions (maybe not universal?)\n  // xhr.onreadystatechange\n\n  xhr.send();\n  return xhr;\n};\n\nmodule.exports = XHRLoader;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/XHRLoader.js"],"names":["MergeXHRSettings","require","XHRLoader","file","globalXHRSettings","config","xhrSettings","xhr","XMLHttpRequest","open","src","async","user","password","responseType","timeout","header","headerValue","setRequestHeader","requestedWith","overrideMimeType","onload","onLoad","bind","onerror","onError","onprogress","onProgress","send","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,SAAS,GAAG,UAAUC,IAAV,EAAgBC,iBAAhB,EAChB;AACI,MAAIC,MAAM,GAAGL,gBAAgB,CAACI,iBAAD,EAAoBD,IAAI,CAACG,WAAzB,CAA7B;AAEA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AAEAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBN,IAAI,CAACO,GAArB,EAA0BL,MAAM,CAACM,KAAjC,EAAwCN,MAAM,CAACO,IAA/C,EAAqDP,MAAM,CAACQ,QAA5D;AAEAN,EAAAA,GAAG,CAACO,YAAJ,GAAmBX,IAAI,CAACG,WAAL,CAAiBQ,YAApC;AACAP,EAAAA,GAAG,CAACQ,OAAJ,GAAcV,MAAM,CAACU,OAArB;;AAEA,MAAIV,MAAM,CAACW,MAAP,IAAiBX,MAAM,CAACY,WAA5B,EACA;AACIV,IAAAA,GAAG,CAACW,gBAAJ,CAAqBb,MAAM,CAACW,MAA5B,EAAoCX,MAAM,CAACY,WAA3C;AACH;;AAED,MAAIZ,MAAM,CAACc,aAAX,EACA;AACIZ,IAAAA,GAAG,CAACW,gBAAJ,CAAqB,kBAArB,EAAyCb,MAAM,CAACc,aAAhD;AACH;;AAED,MAAId,MAAM,CAACe,gBAAX,EACA;AACIb,IAAAA,GAAG,CAACa,gBAAJ,CAAqBf,MAAM,CAACe,gBAA5B;AACH,GAvBL,CAyBI;;;AAEAb,EAAAA,GAAG,CAACc,MAAJ,GAAalB,IAAI,CAACmB,MAAL,CAAYC,IAAZ,CAAiBpB,IAAjB,EAAuBI,GAAvB,CAAb;AACAA,EAAAA,GAAG,CAACiB,OAAJ,GAAcrB,IAAI,CAACsB,OAAL,CAAaF,IAAb,CAAkBpB,IAAlB,EAAwBI,GAAxB,CAAd;AACAA,EAAAA,GAAG,CAACmB,UAAJ,GAAiBvB,IAAI,CAACwB,UAAL,CAAgBJ,IAAhB,CAAqBpB,IAArB,CAAjB,CA7BJ,CA+BI;AACA;;AAEAI,EAAAA,GAAG,CAACqB,IAAJ;AAEA,SAAOrB,GAAP;AACH,CAtCD;;AAwCAsB,MAAM,CAACC,OAAP,GAAiB5B,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\n\r\n/**\r\n * Creates a new XMLHttpRequest (xhr) object based on the given File and XHRSettings\r\n * and starts the download of it. It uses the Files own XHRSettings and merges them\r\n * with the global XHRSettings object to set the xhr values before download.\r\n *\r\n * @function Phaser.Loader.XHRLoader\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File to download.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} globalXHRSettings - The global XHRSettings object.\r\n *\r\n * @return {XMLHttpRequest} The XHR object.\r\n */\r\nvar XHRLoader = function (file, globalXHRSettings)\r\n{\r\n    var config = MergeXHRSettings(globalXHRSettings, file.xhrSettings);\r\n\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    xhr.open('GET', file.src, config.async, config.user, config.password);\r\n\r\n    xhr.responseType = file.xhrSettings.responseType;\r\n    xhr.timeout = config.timeout;\r\n\r\n    if (config.header && config.headerValue)\r\n    {\r\n        xhr.setRequestHeader(config.header, config.headerValue);\r\n    }\r\n\r\n    if (config.requestedWith)\r\n    {\r\n        xhr.setRequestHeader('X-Requested-With', config.requestedWith);\r\n    }\r\n\r\n    if (config.overrideMimeType)\r\n    {\r\n        xhr.overrideMimeType(config.overrideMimeType);\r\n    }\r\n\r\n    // After a successful request, the xhr.response property will contain the requested data as a DOMString, ArrayBuffer, Blob, or Document (depending on what was set for responseType.)\r\n\r\n    xhr.onload = file.onLoad.bind(file, xhr);\r\n    xhr.onerror = file.onError.bind(file, xhr);\r\n    xhr.onprogress = file.onProgress.bind(file);\r\n\r\n    //  This is the only standard method, the ones above are browser additions (maybe not universal?)\r\n    // xhr.onreadystatechange\r\n\r\n    xhr.send();\r\n\r\n    return xhr;\r\n};\r\n\r\nmodule.exports = XHRLoader;\r\n"]},"metadata":{},"sourceType":"script"}