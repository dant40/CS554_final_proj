{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CanvasInterpolation = require('../display/canvas/CanvasInterpolation');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar CONST = require('../const');\n\nvar Features = require('../device/Features');\n/**\r\n * Called automatically by Phaser.Game and responsible for creating the renderer it will use.\r\n *\r\n * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\r\n *\r\n * @function Phaser.Core.CreateRenderer\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance on which the renderer will be set.\r\n */\n\n\nvar CreateRenderer = function (game) {\n  var config = game.config;\n\n  if ((config.customEnvironment || config.canvas) && config.renderType === CONST.AUTO) {\n    throw new Error('Must set explicit renderType in custom environment');\n  } //  Not a custom environment, didn't provide their own canvas and not headless, so determine the renderer:\n\n\n  if (!config.customEnvironment && !config.canvas && config.renderType !== CONST.HEADLESS) {\n    if (config.renderType === CONST.CANVAS || config.renderType !== CONST.CANVAS && !Features.webGL) {\n      if (Features.canvas) {\n        //  They requested Canvas and their browser supports it\n        config.renderType = CONST.CANVAS;\n      } else {\n        throw new Error('Cannot create Canvas or WebGL context, aborting.');\n      }\n    } else {\n      //  Game requested WebGL and browser says it supports it\n      config.renderType = CONST.WEBGL;\n    }\n  } //  Pixel Art mode?\n\n\n  if (!config.antialias) {\n    CanvasPool.disableSmoothing();\n  }\n\n  var baseSize = game.scale.baseSize;\n  var width = baseSize.width;\n  var height = baseSize.height; //  Does the game config provide its own canvas element to use?\n\n  if (config.canvas) {\n    game.canvas = config.canvas;\n    game.canvas.width = width;\n    game.canvas.height = height;\n  } else {\n    game.canvas = CanvasPool.create(game, width, height, config.renderType);\n  } //  Does the game config provide some canvas css styles to use?\n\n\n  if (config.canvasStyle) {\n    game.canvas.style = config.canvasStyle;\n  } //  Pixel Art mode?\n\n\n  if (!config.antialias) {\n    CanvasInterpolation.setCrisp(game.canvas);\n  }\n\n  if (config.renderType === CONST.HEADLESS) {\n    //  Nothing more to do here\n    return;\n  }\n\n  var CanvasRenderer;\n  var WebGLRenderer;\n\n  if (typeof WEBGL_RENDERER && typeof CANVAS_RENDERER) {\n    CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\n    WebGLRenderer = require('../renderer/webgl/WebGLRenderer'); //  Let the config pick the renderer type, as both are included\n\n    if (config.renderType === CONST.WEBGL) {\n      game.renderer = new WebGLRenderer(game);\n    } else {\n      game.renderer = new CanvasRenderer(game);\n      game.context = game.renderer.gameContext;\n    }\n  }\n\n  if (typeof WEBGL_RENDERER && !typeof CANVAS_RENDERER) {\n    WebGLRenderer = require('../renderer/webgl/WebGLRenderer'); //  Force the type to WebGL, regardless what was requested\n\n    config.renderType = CONST.WEBGL;\n    game.renderer = new WebGLRenderer(game);\n  }\n\n  if (!typeof WEBGL_RENDERER && typeof CANVAS_RENDERER) {\n    CanvasRenderer = require('../renderer/canvas/CanvasRenderer'); //  Force the type to Canvas, regardless what was requested\n\n    config.renderType = CONST.CANVAS;\n    game.renderer = new CanvasRenderer(game);\n    game.context = game.renderer.gameContext;\n  }\n};\n\nmodule.exports = CreateRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/core/CreateRenderer.js"],"names":["CanvasInterpolation","require","CanvasPool","CONST","Features","CreateRenderer","game","config","customEnvironment","canvas","renderType","AUTO","Error","HEADLESS","CANVAS","webGL","WEBGL","antialias","disableSmoothing","baseSize","scale","width","height","create","canvasStyle","style","setCrisp","CanvasRenderer","WebGLRenderer","WEBGL_RENDERER","CANVAS_RENDERER","renderer","context","gameContext","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasInterpolation = require('../display/canvas/CanvasInterpolation');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar CONST = require('../const');\r\nvar Features = require('../device/Features');\r\n\r\n/**\r\n * Called automatically by Phaser.Game and responsible for creating the renderer it will use.\r\n *\r\n * Relies upon two webpack global flags to be defined: `WEBGL_RENDERER` and `CANVAS_RENDERER` during build time, but not at run-time.\r\n *\r\n * @function Phaser.Core.CreateRenderer\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - The Phaser.Game instance on which the renderer will be set.\r\n */\r\nvar CreateRenderer = function (game)\r\n{\r\n    var config = game.config;\r\n\r\n    if ((config.customEnvironment || config.canvas) && config.renderType === CONST.AUTO)\r\n    {\r\n        throw new Error('Must set explicit renderType in custom environment');\r\n    }\r\n\r\n    //  Not a custom environment, didn't provide their own canvas and not headless, so determine the renderer:\r\n    if (!config.customEnvironment && !config.canvas && config.renderType !== CONST.HEADLESS)\r\n    {\r\n        if (config.renderType === CONST.CANVAS || (config.renderType !== CONST.CANVAS && !Features.webGL))\r\n        {\r\n            if (Features.canvas)\r\n            {\r\n                //  They requested Canvas and their browser supports it\r\n                config.renderType = CONST.CANVAS;\r\n            }\r\n            else\r\n            {\r\n                throw new Error('Cannot create Canvas or WebGL context, aborting.');\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Game requested WebGL and browser says it supports it\r\n            config.renderType = CONST.WEBGL;\r\n        }\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasPool.disableSmoothing();\r\n    }\r\n\r\n    var baseSize = game.scale.baseSize;\r\n\r\n    var width = baseSize.width;\r\n    var height = baseSize.height;\r\n\r\n    //  Does the game config provide its own canvas element to use?\r\n    if (config.canvas)\r\n    {\r\n        game.canvas = config.canvas;\r\n\r\n        game.canvas.width = width;\r\n        game.canvas.height = height;\r\n    }\r\n    else\r\n    {\r\n        game.canvas = CanvasPool.create(game, width, height, config.renderType);\r\n    }\r\n\r\n    //  Does the game config provide some canvas css styles to use?\r\n    if (config.canvasStyle)\r\n    {\r\n        game.canvas.style = config.canvasStyle;\r\n    }\r\n\r\n    //  Pixel Art mode?\r\n    if (!config.antialias)\r\n    {\r\n        CanvasInterpolation.setCrisp(game.canvas);\r\n    }\r\n\r\n    if (config.renderType === CONST.HEADLESS)\r\n    {\r\n        //  Nothing more to do here\r\n        return;\r\n    }\r\n\r\n    var CanvasRenderer;\r\n    var WebGLRenderer;\r\n\r\n    if (typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Let the config pick the renderer type, as both are included\r\n        if (config.renderType === CONST.WEBGL)\r\n        {\r\n            game.renderer = new WebGLRenderer(game);\r\n        }\r\n        else\r\n        {\r\n            game.renderer = new CanvasRenderer(game);\r\n            game.context = game.renderer.gameContext;\r\n        }\r\n    }\r\n\r\n    if (typeof WEBGL_RENDERER && !typeof CANVAS_RENDERER)\r\n    {\r\n        WebGLRenderer = require('../renderer/webgl/WebGLRenderer');\r\n\r\n        //  Force the type to WebGL, regardless what was requested\r\n        config.renderType = CONST.WEBGL;\r\n\r\n        game.renderer = new WebGLRenderer(game);\r\n    }\r\n\r\n    if (!typeof WEBGL_RENDERER && typeof CANVAS_RENDERER)\r\n    {\r\n        CanvasRenderer = require('../renderer/canvas/CanvasRenderer');\r\n\r\n        //  Force the type to Canvas, regardless what was requested\r\n        config.renderType = CONST.CANVAS;\r\n\r\n        game.renderer = new CanvasRenderer(game);\r\n\r\n        game.context = game.renderer.gameContext;\r\n    }\r\n};\r\n\r\nmodule.exports = CreateRenderer;\r\n"]},"metadata":{},"sourceType":"script"}