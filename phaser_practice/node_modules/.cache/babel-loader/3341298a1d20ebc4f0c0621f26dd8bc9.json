{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * @ignore\r\n */\nfunction hasGetActive(def) {\n  return !!def.getActive && typeof def.getActive === 'function';\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction hasGetStart(def) {\n  return !!def.getStart && typeof def.getStart === 'function';\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction hasGetEnd(def) {\n  return !!def.getEnd && typeof def.getEnd === 'function';\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction hasGetters(def) {\n  return hasGetStart(def) || hasGetEnd(def) || hasGetActive(def);\n}\n/**\r\n * Returns `getActive`, `getStart` and `getEnd` functions for a TweenData based on a target property and end value.\r\n * \r\n * `getActive` if not null, is invoked _immediately_ as soon as the TweenData is running, and is set on the target property.\r\n * `getEnd` is invoked once any start delays have expired and returns what the value should tween to.\r\n * `getStart` is invoked when the tween reaches the end and needs to either repeat or yoyo, it returns the value to go back to.\r\n *\r\n * If the end value is a number, it will be treated as an absolute value and the property will be tweened to it.\r\n * A string can be provided to specify a relative end value which consists of an operation\r\n * (`+=` to add to the current value, `-=` to subtract from the current value, `*=` to multiply the current\r\n * value, or `/=` to divide the current value) followed by its operand.\r\n * \r\n * A function can be provided to allow greater control over the end value; it will receive the target\r\n * object being tweened, the name of the property being tweened, and the current value of the property\r\n * as its arguments.\r\n * \r\n * If both the starting and the ending values need to be controlled, an object with `getStart` and `getEnd`\r\n * callbacks, which will receive the same arguments, can be provided instead. If an object with a `value`\r\n * property is provided, the property will be used as the effective value under the same rules described here.\r\n *\r\n * @function Phaser.Tweens.Builders.GetValueOp\r\n * @since 3.0.0\r\n *\r\n * @param {string} key - The name of the property to modify.\r\n * @param {*} propertyValue - The ending value of the property, as described above.\r\n *\r\n * @return {function} An array of functions, `getActive`, `getStart` and `getEnd`, which return the starting and the ending value of the property based on the provided value.\r\n */\n\n\nvar GetValueOp = function (key, propertyValue) {\n  var callbacks; //  The returned value sets what the property will be at the END of the Tween (usually called at the start of the Tween)\n\n  var getEnd = function (target, key, value) {\n    return value;\n  }; //  The returned value sets what the property will be at the START of the Tween (usually called at the end of the Tween)\n\n\n  var getStart = function (target, key, value) {\n    return value;\n  }; //  What to set the property to the moment the TweenData is invoked\n\n\n  var getActive = null;\n  var t = typeof propertyValue;\n\n  if (t === 'number') {\n    // props: {\n    //     x: 400,\n    //     y: 300\n    // }\n    getEnd = function () {\n      return propertyValue;\n    };\n  } else if (t === 'string') {\n    // props: {\n    //     x: '+=400',\n    //     y: '-=300',\n    //     z: '*=2',\n    //     w: '/=2'\n    // }\n    var op = propertyValue[0];\n    var num = parseFloat(propertyValue.substr(2));\n\n    switch (op) {\n      case '+':\n        getEnd = function (target, key, value) {\n          return value + num;\n        };\n\n        break;\n\n      case '-':\n        getEnd = function (target, key, value) {\n          return value - num;\n        };\n\n        break;\n\n      case '*':\n        getEnd = function (target, key, value) {\n          return value * num;\n        };\n\n        break;\n\n      case '/':\n        getEnd = function (target, key, value) {\n          return value / num;\n        };\n\n        break;\n\n      default:\n        getEnd = function () {\n          return parseFloat(propertyValue);\n        };\n\n    }\n  } else if (t === 'function') {\n    //  The same as setting just the getEnd function and no getStart\n    // props: {\n    //     x: function (target, key, value, targetIndex, totalTargets, tween) { return value + 50); },\n    // }\n    getEnd = propertyValue;\n  } else if (t === 'object') {\n    if (hasGetters(propertyValue)) {\n      /*\r\n      x: {\r\n          //  Called the moment Tween is active. The returned value sets the property on the target immediately.\r\n          getActive: function (target, key, value, targetIndex, totalTargets, tween)\r\n          {\r\n              return value;\r\n          },\r\n            //  Called at the start of the Tween. The returned value sets what the property will be at the END of the Tween.\r\n          getEnd: function (target, key, value, targetIndex, totalTargets, tween)\r\n          {\r\n              return value;\r\n          },\r\n            //  Called at the end of the Tween. The returned value sets what the property will be at the START of the Tween.\r\n          getStart: function (target, key, value, targetIndex, totalTargets, tween)\r\n          {\r\n              return value;\r\n          }\r\n      }\r\n      */\n      if (hasGetActive(propertyValue)) {\n        getActive = propertyValue.getActive;\n      }\n\n      if (hasGetEnd(propertyValue)) {\n        getEnd = propertyValue.getEnd;\n      }\n\n      if (hasGetStart(propertyValue)) {\n        getStart = propertyValue.getStart;\n      }\n    } else if (propertyValue.hasOwnProperty('value')) {\n      //  'value' may still be a string, function or a number\n      // props: {\n      //     x: { value: 400, ... },\n      //     y: { value: 300, ... }\n      // }\n      callbacks = GetValueOp(key, propertyValue.value);\n    } else {\n      //  'from' and 'to' may still be a string, function or a number\n      // props: {\n      //     x: { from: 400, to: 600 },\n      //     y: { from: 300, to: 500 }\n      // }\n      //  Same as above, but the 'start' value is set immediately on the target\n      // props: {\n      //     x: { start: 400, to: 600 },\n      //     y: { start: 300, to: 500 }\n      // }\n      //  'start' value is set immediately, then it goes 'from' to 'to' during the tween\n      // props: {\n      //     x: { start: 200, from: 400, to: 600 },\n      //     y: { start: 300, from: 300, to: 500 }\n      // }\n      var hasTo = propertyValue.hasOwnProperty('to');\n      var hasFrom = propertyValue.hasOwnProperty('from');\n      var hasStart = propertyValue.hasOwnProperty('start');\n\n      if (hasTo && (hasFrom || hasStart)) {\n        callbacks = GetValueOp(key, propertyValue.to);\n\n        if (hasStart) {\n          var startCallbacks = GetValueOp(key, propertyValue.start);\n          callbacks.getActive = startCallbacks.getEnd;\n        }\n\n        if (hasFrom) {\n          var fromCallbacks = GetValueOp(key, propertyValue.from);\n          callbacks.getStart = fromCallbacks.getEnd;\n        }\n      }\n    }\n  } //  If callback not set by the else if block above then set it here and return it\n\n\n  if (!callbacks) {\n    callbacks = {\n      getActive: getActive,\n      getEnd: getEnd,\n      getStart: getStart\n    };\n  }\n\n  return callbacks;\n};\n\nmodule.exports = GetValueOp;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/builders/GetValueOp.js"],"names":["hasGetActive","def","getActive","hasGetStart","getStart","hasGetEnd","getEnd","hasGetters","GetValueOp","key","propertyValue","callbacks","target","value","t","op","num","parseFloat","substr","hasOwnProperty","hasTo","hasFrom","hasStart","to","startCallbacks","start","fromCallbacks","from","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction hasGetActive (def)\r\n{\r\n    return (!!def.getActive && typeof def.getActive === 'function');\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction hasGetStart (def)\r\n{\r\n    return (!!def.getStart && typeof def.getStart === 'function');\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction hasGetEnd (def)\r\n{\r\n    return (!!def.getEnd && typeof def.getEnd === 'function');\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction hasGetters (def)\r\n{\r\n    return hasGetStart(def) || hasGetEnd(def) || hasGetActive(def);\r\n}\r\n\r\n/**\r\n * Returns `getActive`, `getStart` and `getEnd` functions for a TweenData based on a target property and end value.\r\n * \r\n * `getActive` if not null, is invoked _immediately_ as soon as the TweenData is running, and is set on the target property.\r\n * `getEnd` is invoked once any start delays have expired and returns what the value should tween to.\r\n * `getStart` is invoked when the tween reaches the end and needs to either repeat or yoyo, it returns the value to go back to.\r\n *\r\n * If the end value is a number, it will be treated as an absolute value and the property will be tweened to it.\r\n * A string can be provided to specify a relative end value which consists of an operation\r\n * (`+=` to add to the current value, `-=` to subtract from the current value, `*=` to multiply the current\r\n * value, or `/=` to divide the current value) followed by its operand.\r\n * \r\n * A function can be provided to allow greater control over the end value; it will receive the target\r\n * object being tweened, the name of the property being tweened, and the current value of the property\r\n * as its arguments.\r\n * \r\n * If both the starting and the ending values need to be controlled, an object with `getStart` and `getEnd`\r\n * callbacks, which will receive the same arguments, can be provided instead. If an object with a `value`\r\n * property is provided, the property will be used as the effective value under the same rules described here.\r\n *\r\n * @function Phaser.Tweens.Builders.GetValueOp\r\n * @since 3.0.0\r\n *\r\n * @param {string} key - The name of the property to modify.\r\n * @param {*} propertyValue - The ending value of the property, as described above.\r\n *\r\n * @return {function} An array of functions, `getActive`, `getStart` and `getEnd`, which return the starting and the ending value of the property based on the provided value.\r\n */\r\nvar GetValueOp = function (key, propertyValue)\r\n{\r\n    var callbacks;\r\n\r\n    //  The returned value sets what the property will be at the END of the Tween (usually called at the start of the Tween)\r\n    var getEnd = function (target, key, value) { return value; };\r\n\r\n    //  The returned value sets what the property will be at the START of the Tween (usually called at the end of the Tween)\r\n    var getStart = function (target, key, value) { return value; };\r\n\r\n    //  What to set the property to the moment the TweenData is invoked\r\n    var getActive = null;\r\n\r\n    var t = typeof(propertyValue);\r\n\r\n    if (t === 'number')\r\n    {\r\n        // props: {\r\n        //     x: 400,\r\n        //     y: 300\r\n        // }\r\n\r\n        getEnd = function ()\r\n        {\r\n            return propertyValue;\r\n        };\r\n    }\r\n    else if (t === 'string')\r\n    {\r\n        // props: {\r\n        //     x: '+=400',\r\n        //     y: '-=300',\r\n        //     z: '*=2',\r\n        //     w: '/=2'\r\n        // }\r\n\r\n        var op = propertyValue[0];\r\n        var num = parseFloat(propertyValue.substr(2));\r\n\r\n        switch (op)\r\n        {\r\n            case '+':\r\n                getEnd = function (target, key, value)\r\n                {\r\n                    return value + num;\r\n                };\r\n                break;\r\n\r\n            case '-':\r\n                getEnd = function (target, key, value)\r\n                {\r\n                    return value - num;\r\n                };\r\n                break;\r\n\r\n            case '*':\r\n                getEnd = function (target, key, value)\r\n                {\r\n                    return value * num;\r\n                };\r\n                break;\r\n\r\n            case '/':\r\n                getEnd = function (target, key, value)\r\n                {\r\n                    return value / num;\r\n                };\r\n                break;\r\n\r\n            default:\r\n                getEnd = function ()\r\n                {\r\n                    return parseFloat(propertyValue);\r\n                };\r\n        }\r\n    }\r\n    else if (t === 'function')\r\n    {\r\n        //  The same as setting just the getEnd function and no getStart\r\n\r\n        // props: {\r\n        //     x: function (target, key, value, targetIndex, totalTargets, tween) { return value + 50); },\r\n        // }\r\n\r\n        getEnd = propertyValue;\r\n    }\r\n    else if (t === 'object')\r\n    {\r\n        if (hasGetters(propertyValue))\r\n        {\r\n            /*\r\n            x: {\r\n                //  Called the moment Tween is active. The returned value sets the property on the target immediately.\r\n                getActive: function (target, key, value, targetIndex, totalTargets, tween)\r\n                {\r\n                    return value;\r\n                },\r\n\r\n                //  Called at the start of the Tween. The returned value sets what the property will be at the END of the Tween.\r\n                getEnd: function (target, key, value, targetIndex, totalTargets, tween)\r\n                {\r\n                    return value;\r\n                },\r\n\r\n                //  Called at the end of the Tween. The returned value sets what the property will be at the START of the Tween.\r\n                getStart: function (target, key, value, targetIndex, totalTargets, tween)\r\n                {\r\n                    return value;\r\n                }\r\n            }\r\n            */\r\n\r\n            if (hasGetActive(propertyValue))\r\n            {\r\n                getActive = propertyValue.getActive;\r\n            }\r\n\r\n            if (hasGetEnd(propertyValue))\r\n            {\r\n                getEnd = propertyValue.getEnd;\r\n            }\r\n\r\n            if (hasGetStart(propertyValue))\r\n            {\r\n                getStart = propertyValue.getStart;\r\n            }\r\n        }\r\n        else if (propertyValue.hasOwnProperty('value'))\r\n        {\r\n            //  'value' may still be a string, function or a number\r\n            // props: {\r\n            //     x: { value: 400, ... },\r\n            //     y: { value: 300, ... }\r\n            // }\r\n\r\n            callbacks = GetValueOp(key, propertyValue.value);\r\n        }\r\n        else\r\n        {\r\n            //  'from' and 'to' may still be a string, function or a number\r\n            // props: {\r\n            //     x: { from: 400, to: 600 },\r\n            //     y: { from: 300, to: 500 }\r\n            // }\r\n\r\n            //  Same as above, but the 'start' value is set immediately on the target\r\n            // props: {\r\n            //     x: { start: 400, to: 600 },\r\n            //     y: { start: 300, to: 500 }\r\n            // }\r\n\r\n            //  'start' value is set immediately, then it goes 'from' to 'to' during the tween\r\n            // props: {\r\n            //     x: { start: 200, from: 400, to: 600 },\r\n            //     y: { start: 300, from: 300, to: 500 }\r\n            // }\r\n\r\n            var hasTo = propertyValue.hasOwnProperty('to');\r\n            var hasFrom = propertyValue.hasOwnProperty('from');\r\n            var hasStart = propertyValue.hasOwnProperty('start');\r\n\r\n            if (hasTo && (hasFrom || hasStart))\r\n            {\r\n                callbacks = GetValueOp(key, propertyValue.to);\r\n\r\n                if (hasStart)\r\n                {\r\n                    var startCallbacks = GetValueOp(key, propertyValue.start);\r\n        \r\n                    callbacks.getActive = startCallbacks.getEnd;\r\n                }\r\n        \r\n                if (hasFrom)\r\n                {\r\n                    var fromCallbacks = GetValueOp(key, propertyValue.from);\r\n        \r\n                    callbacks.getStart = fromCallbacks.getEnd;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //  If callback not set by the else if block above then set it here and return it\r\n    if (!callbacks)\r\n    {\r\n        callbacks = {\r\n            getActive: getActive,\r\n            getEnd: getEnd,\r\n            getStart: getStart\r\n        };\r\n    }\r\n\r\n    return callbacks;\r\n};\r\n\r\nmodule.exports = GetValueOp;\r\n"]},"metadata":{},"sourceType":"script"}