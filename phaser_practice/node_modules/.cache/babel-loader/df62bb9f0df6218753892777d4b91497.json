{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArcadeImage = require('./ArcadeImage');\n\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar PhysicsGroup = require('./PhysicsGroup');\n\nvar StaticPhysicsGroup = require('./StaticPhysicsGroup');\n/**\r\n * @classdesc\r\n * The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics World instance.\r\n */\n\n\nvar Factory = new Class({\n  initialize: function Factory(world) {\n    /**\r\n     * A reference to the Arcade Physics World.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n    this.world = world;\n    /**\r\n     * A reference to the Scene this Arcade Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = world.scene;\n    /**\r\n     * A reference to the Scene.Systems this Arcade Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Factory#sys\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.sys = world.scene.sys;\n  },\n\n  /**\r\n   * Creates a new Arcade Physics Collider object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#collider\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for collision.\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for collision.\r\n   * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n   * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n   * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n   */\n  collider: function (object1, object2, collideCallback, processCallback, callbackContext) {\n    return this.world.addCollider(object1, object2, collideCallback, processCallback, callbackContext);\n  },\n\n  /**\r\n   * Creates a new Arcade Physics Collider Overlap object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#overlap\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for overlap.\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for overlap.\r\n   * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n   * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n   * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n   */\n  overlap: function (object1, object2, collideCallback, processCallback, callbackContext) {\n    return this.world.addOverlap(object1, object2, collideCallback, processCallback, callbackContext);\n  },\n\n  /**\r\n   * Adds an Arcade Physics Body to the given Game Object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - A Game Object.\r\n   * @param {boolean} [isStatic=false] - Create a Static body (true) or Dynamic body (false).\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n   */\n  existing: function (gameObject, isStatic) {\n    var type = isStatic ? CONST.STATIC_BODY : CONST.DYNAMIC_BODY;\n    this.world.enableBody(gameObject, type);\n    return gameObject;\n  },\n\n  /**\r\n   * Creates a new Arcade Image object with a Static body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n   */\n  staticImage: function (x, y, key, frame) {\n    var image = new ArcadeImage(this.scene, x, y, key, frame);\n    this.sys.displayList.add(image);\n    this.world.enableBody(image, CONST.STATIC_BODY);\n    return image;\n  },\n\n  /**\r\n   * Creates a new Arcade Image object with a Dynamic body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#image\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n   */\n  image: function (x, y, key, frame) {\n    var image = new ArcadeImage(this.scene, x, y, key, frame);\n    this.sys.displayList.add(image);\n    this.world.enableBody(image, CONST.DYNAMIC_BODY);\n    return image;\n  },\n\n  /**\r\n   * Creates a new Arcade Sprite object with a Static body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticSprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n   */\n  staticSprite: function (x, y, key, frame) {\n    var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    this.world.enableBody(sprite, CONST.STATIC_BODY);\n    return sprite;\n  },\n\n  /**\r\n   * Creates a new Arcade Sprite object with a Dynamic body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#sprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n   */\n  sprite: function (x, y, key, frame) {\n    var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    this.world.enableBody(sprite, CONST.DYNAMIC_BODY);\n    return sprite;\n  },\n\n  /**\r\n   * Creates a Static Physics Group object.\r\n   * All Game Objects created by this Group will automatically be static Arcade Physics objects.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#staticGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n   * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticGroup} The Static Group object that was created.\r\n   */\n  staticGroup: function (children, config) {\n    return this.sys.updateList.add(new StaticPhysicsGroup(this.world, this.world.scene, children, config));\n  },\n\n  /**\r\n   * Creates a Physics Group object.\r\n   * All Game Objects created by this Group will automatically be dynamic Arcade Physics objects.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#group\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n   * @param {Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} The Group object that was created.\r\n   */\n  group: function (children, config) {\n    return this.sys.updateList.add(new PhysicsGroup(this.world, this.world.scene, children, config));\n  },\n\n  /**\r\n   * Destroys this Factory.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Factory#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    this.world = null;\n    this.scene = null;\n    this.sys = null;\n  }\n});\nmodule.exports = Factory;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/Factory.js"],"names":["ArcadeImage","require","ArcadeSprite","Class","CONST","PhysicsGroup","StaticPhysicsGroup","Factory","initialize","world","scene","sys","collider","object1","object2","collideCallback","processCallback","callbackContext","addCollider","overlap","addOverlap","existing","gameObject","isStatic","type","STATIC_BODY","DYNAMIC_BODY","enableBody","staticImage","x","y","key","frame","image","displayList","add","staticSprite","sprite","updateList","staticGroup","children","config","group","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,sBAAD,CAAhC;AAEA;;;;;;;;;;;;;;AAYA,IAAIM,OAAO,GAAG,IAAIJ,KAAJ,CAAU;AAEpBK,EAAAA,UAAU,EAEV,SAASD,OAAT,CAAkBE,KAAlB,EACA;AACI;;;;;;;AAOA,SAAKA,KAAL,GAAaA,KAAb;AAEA;;;;;;;;AAOA,SAAKC,KAAL,GAAaD,KAAK,CAACC,KAAnB;AAEA;;;;;;;;AAOA,SAAKC,GAAL,GAAWF,KAAK,CAACC,KAAN,CAAYC,GAAvB;AACH,GAhCmB;;AAkCpB;;;;;;;;;;;;;;AAcAC,EAAAA,QAAQ,EAAE,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,eAA5B,EAA6CC,eAA7C,EAA8DC,eAA9D,EACV;AACI,WAAO,KAAKR,KAAL,CAAWS,WAAX,CAAuBL,OAAvB,EAAgCC,OAAhC,EAAyCC,eAAzC,EAA0DC,eAA1D,EAA2EC,eAA3E,CAAP;AACH,GAnDmB;;AAqDpB;;;;;;;;;;;;;;AAcAE,EAAAA,OAAO,EAAE,UAAUN,OAAV,EAAmBC,OAAnB,EAA4BC,eAA5B,EAA6CC,eAA7C,EAA8DC,eAA9D,EACT;AACI,WAAO,KAAKR,KAAL,CAAWW,UAAX,CAAsBP,OAAtB,EAA+BC,OAA/B,EAAwCC,eAAxC,EAAyDC,eAAzD,EAA0EC,eAA1E,CAAP;AACH,GAtEmB;;AAwEpB;;;;;;;;;;;AAWAI,EAAAA,QAAQ,EAAE,UAAUC,UAAV,EAAsBC,QAAtB,EACV;AACI,QAAIC,IAAI,GAAID,QAAD,GAAanB,KAAK,CAACqB,WAAnB,GAAiCrB,KAAK,CAACsB,YAAlD;AAEA,SAAKjB,KAAL,CAAWkB,UAAX,CAAsBL,UAAtB,EAAkCE,IAAlC;AAEA,WAAOF,UAAP;AACH,GA1FmB;;AA4FpB;;;;;;;;;;;;;AAaAM,EAAAA,WAAW,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqBC,KAArB,EACb;AACI,QAAIC,KAAK,GAAG,IAAIjC,WAAJ,CAAgB,KAAKU,KAArB,EAA4BmB,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAuCC,KAAvC,CAAZ;AAEA,SAAKrB,GAAL,CAASuB,WAAT,CAAqBC,GAArB,CAAyBF,KAAzB;AAEA,SAAKxB,KAAL,CAAWkB,UAAX,CAAsBM,KAAtB,EAA6B7B,KAAK,CAACqB,WAAnC;AAEA,WAAOQ,KAAP;AACH,GAlHmB;;AAoHpB;;;;;;;;;;;;;AAaAA,EAAAA,KAAK,EAAE,UAAUJ,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqBC,KAArB,EACP;AACI,QAAIC,KAAK,GAAG,IAAIjC,WAAJ,CAAgB,KAAKU,KAArB,EAA4BmB,CAA5B,EAA+BC,CAA/B,EAAkCC,GAAlC,EAAuCC,KAAvC,CAAZ;AAEA,SAAKrB,GAAL,CAASuB,WAAT,CAAqBC,GAArB,CAAyBF,KAAzB;AAEA,SAAKxB,KAAL,CAAWkB,UAAX,CAAsBM,KAAtB,EAA6B7B,KAAK,CAACsB,YAAnC;AAEA,WAAOO,KAAP;AACH,GA1ImB;;AA4IpB;;;;;;;;;;;;;AAaAG,EAAAA,YAAY,EAAE,UAAUP,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqBC,KAArB,EACd;AACI,QAAIK,MAAM,GAAG,IAAInC,YAAJ,CAAiB,KAAKQ,KAAtB,EAA6BmB,CAA7B,EAAgCC,CAAhC,EAAmCC,GAAnC,EAAwCC,KAAxC,CAAb;AAEA,SAAKrB,GAAL,CAASuB,WAAT,CAAqBC,GAArB,CAAyBE,MAAzB;AACA,SAAK1B,GAAL,CAAS2B,UAAT,CAAoBH,GAApB,CAAwBE,MAAxB;AAEA,SAAK5B,KAAL,CAAWkB,UAAX,CAAsBU,MAAtB,EAA8BjC,KAAK,CAACqB,WAApC;AAEA,WAAOY,MAAP;AACH,GAnKmB;;AAqKpB;;;;;;;;;;;;;AAaAA,EAAAA,MAAM,EAAE,UAAUR,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqBC,KAArB,EACR;AACI,QAAIK,MAAM,GAAG,IAAInC,YAAJ,CAAiB,KAAKQ,KAAtB,EAA6BmB,CAA7B,EAAgCC,CAAhC,EAAmCC,GAAnC,EAAwCC,KAAxC,CAAb;AAEA,SAAKrB,GAAL,CAASuB,WAAT,CAAqBC,GAArB,CAAyBE,MAAzB;AACA,SAAK1B,GAAL,CAAS2B,UAAT,CAAoBH,GAApB,CAAwBE,MAAxB;AAEA,SAAK5B,KAAL,CAAWkB,UAAX,CAAsBU,MAAtB,EAA8BjC,KAAK,CAACsB,YAApC;AAEA,WAAOW,MAAP;AACH,GA5LmB;;AA8LpB;;;;;;;;;;;;AAYAE,EAAAA,WAAW,EAAE,UAAUC,QAAV,EAAoBC,MAApB,EACb;AACI,WAAO,KAAK9B,GAAL,CAAS2B,UAAT,CAAoBH,GAApB,CAAwB,IAAI7B,kBAAJ,CAAuB,KAAKG,KAA5B,EAAmC,KAAKA,KAAL,CAAWC,KAA9C,EAAqD8B,QAArD,EAA+DC,MAA/D,CAAxB,CAAP;AACH,GA7MmB;;AA+MpB;;;;;;;;;;;;AAYAC,EAAAA,KAAK,EAAE,UAAUF,QAAV,EAAoBC,MAApB,EACP;AACI,WAAO,KAAK9B,GAAL,CAAS2B,UAAT,CAAoBH,GAApB,CAAwB,IAAI9B,YAAJ,CAAiB,KAAKI,KAAtB,EAA6B,KAAKA,KAAL,CAAWC,KAAxC,EAA+C8B,QAA/C,EAAyDC,MAAzD,CAAxB,CAAP;AACH,GA9NmB;;AAgOpB;;;;;;AAMAE,EAAAA,OAAO,EAAE,YACT;AACI,SAAKlC,KAAL,GAAa,IAAb;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,GAAL,GAAW,IAAX;AACH;AA3OmB,CAAV,CAAd;AA+OAiC,MAAM,CAACC,OAAP,GAAiBtC,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArcadeImage = require('./ArcadeImage');\r\nvar ArcadeSprite = require('./ArcadeSprite');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar PhysicsGroup = require('./PhysicsGroup');\r\nvar StaticPhysicsGroup = require('./StaticPhysicsGroup');\r\n\r\n/**\r\n * @classdesc\r\n * The Arcade Physics Factory allows you to easily create Arcade Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics World instance.\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * A reference to the Arcade Physics World.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * A reference to the Scene this Arcade Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = world.scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Arcade Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Physics Collider object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#collider\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for collision.\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for collision.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    collider: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.addCollider(object1, object2, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Physics Collider Overlap object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#overlap\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object1 - The first object to check for overlap.\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]|Phaser.GameObjects.Group|Phaser.GameObjects.Group[])} object2 - The second object to check for overlap.\r\n     * @param {ArcadePhysicsCallback} [collideCallback] - The callback to invoke when the two objects collide.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - The callback to invoke when the two objects collide. Must return a boolean.\r\n     * @param {*} [callbackContext] - The scope in which to call the callbacks.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Collider} The Collider that was created.\r\n     */\r\n    overlap: function (object1, object2, collideCallback, processCallback, callbackContext)\r\n    {\r\n        return this.world.addOverlap(object1, object2, collideCallback, processCallback, callbackContext);\r\n    },\r\n\r\n    /**\r\n     * Adds an Arcade Physics Body to the given Game Object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - A Game Object.\r\n     * @param {boolean} [isStatic=false] - Create a Static body (true) or Dynamic body (false).\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n     */\r\n    existing: function (gameObject, isStatic)\r\n    {\r\n        var type = (isStatic) ? CONST.STATIC_BODY : CONST.DYNAMIC_BODY;\r\n\r\n        this.world.enableBody(gameObject, type);\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Image object with a Static body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n     */\r\n    staticImage: function (x, y, key, frame)\r\n    {\r\n        var image = new ArcadeImage(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        this.world.enableBody(image, CONST.STATIC_BODY);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Image object with a Dynamic body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Image} The Image object that was created.\r\n     */\r\n    image: function (x, y, key, frame)\r\n    {\r\n        var image = new ArcadeImage(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        this.world.enableBody(image, CONST.DYNAMIC_BODY);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Sprite object with a Static body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n     */\r\n    staticSprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        this.world.enableBody(sprite, CONST.STATIC_BODY);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Arcade Sprite object with a Dynamic body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Sprite} The Sprite object that was created.\r\n     */\r\n    sprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ArcadeSprite(this.scene, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        this.world.enableBody(sprite, CONST.DYNAMIC_BODY);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Creates a Static Physics Group object.\r\n     * All Game Objects created by this Group will automatically be static Arcade Physics objects.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#staticGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n     * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticGroup} The Static Group object that was created.\r\n     */\r\n    staticGroup: function (children, config)\r\n    {\r\n        return this.sys.updateList.add(new StaticPhysicsGroup(this.world, this.world.scene, children, config));\r\n    },\r\n\r\n    /**\r\n     * Creates a Physics Group object.\r\n     * All Game Objects created by this Group will automatically be dynamic Arcade Physics objects.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#group\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n     * @param {Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} The Group object that was created.\r\n     */\r\n    group: function (children, config)\r\n    {\r\n        return this.sys.updateList.add(new PhysicsGroup(this.world, this.world.scene, children, config));\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.scene = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n"]},"metadata":{},"sourceType":"script"}