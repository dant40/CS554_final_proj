{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Determines the video support of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.video` from within any Scene.\r\n * \r\n * In Phaser 3.20 the properties were renamed to drop the 'Video' suffix.\r\n * \r\n * @typedef {object} Phaser.Device.Video\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} h264 - Can this device play h264 mp4 video files?\r\n * @property {boolean} hls - Can this device play hls video files?\r\n * @property {boolean} mp4 - Can this device play h264 mp4 video files?\r\n * @property {boolean} ogg - Can this device play ogg video files?\r\n * @property {boolean} vp9 - Can this device play vp9 video files?\r\n * @property {boolean} webm - Can this device play webm video files?\r\n */\nvar Video = {\n  h264: false,\n  hls: false,\n  mp4: false,\n  ogg: false,\n  vp9: false,\n  webm: false\n};\n\nfunction init() {\n  var videoElement = document.createElement('video');\n  var result = !!videoElement.canPlayType;\n\n  try {\n    if (result) {\n      if (videoElement.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, '')) {\n        Video.ogg = true;\n      }\n\n      if (videoElement.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, '')) {\n        // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n        Video.h264 = true;\n        Video.mp4 = true;\n      }\n\n      if (videoElement.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, '')) {\n        Video.webm = true;\n      }\n\n      if (videoElement.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/, '')) {\n        Video.vp9 = true;\n      }\n\n      if (videoElement.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/, '')) {\n        Video.hls = true;\n      }\n    }\n  } catch (e) {//  Nothing to do\n  }\n\n  return Video;\n}\n\nmodule.exports = init();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/device/Video.js"],"names":["Video","h264","hls","mp4","ogg","vp9","webm","init","videoElement","document","createElement","result","canPlayType","replace","e","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;AAkBA,IAAIA,KAAK,GAAG;AAERC,EAAAA,IAAI,EAAE,KAFE;AAGRC,EAAAA,GAAG,EAAE,KAHG;AAIRC,EAAAA,GAAG,EAAE,KAJG;AAKRC,EAAAA,GAAG,EAAE,KALG;AAMRC,EAAAA,GAAG,EAAE,KANG;AAORC,EAAAA,IAAI,EAAE;AAPE,CAAZ;;AAWA,SAASC,IAAT,GACA;AACI,MAAIC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAnB;AACA,MAAIC,MAAM,GAAG,CAAC,CAACH,YAAY,CAACI,WAA5B;;AAEA,MACA;AACI,QAAID,MAAJ,EACA;AACI,UAAIH,YAAY,CAACI,WAAb,CAAyB,4BAAzB,EAAuDC,OAAvD,CAA+D,MAA/D,EAAuE,EAAvE,CAAJ,EACA;AACIb,QAAAA,KAAK,CAACI,GAAN,GAAY,IAAZ;AACH;;AAED,UAAII,YAAY,CAACI,WAAb,CAAyB,iCAAzB,EAA4DC,OAA5D,CAAoE,MAApE,EAA4E,EAA5E,CAAJ,EACA;AACI;AACAb,QAAAA,KAAK,CAACC,IAAN,GAAa,IAAb;AACAD,QAAAA,KAAK,CAACG,GAAN,GAAY,IAAZ;AACH;;AAED,UAAIK,YAAY,CAACI,WAAb,CAAyB,kCAAzB,EAA6DC,OAA7D,CAAqE,MAArE,EAA6E,EAA7E,CAAJ,EACA;AACIb,QAAAA,KAAK,CAACM,IAAN,GAAa,IAAb;AACH;;AAED,UAAIE,YAAY,CAACI,WAAb,CAAyB,0BAAzB,EAAqDC,OAArD,CAA6D,MAA7D,EAAqE,EAArE,CAAJ,EACA;AACIb,QAAAA,KAAK,CAACK,GAAN,GAAY,IAAZ;AACH;;AAED,UAAIG,YAAY,CAACI,WAAb,CAAyB,6CAAzB,EAAwEC,OAAxE,CAAgF,MAAhF,EAAwF,EAAxF,CAAJ,EACA;AACIb,QAAAA,KAAK,CAACE,GAAN,GAAY,IAAZ;AACH;AACJ;AACJ,GA/BD,CAgCA,OAAOY,CAAP,EACA,CACI;AACH;;AAED,SAAOd,KAAP;AACH;;AAEDe,MAAM,CAACC,OAAP,GAAiBT,IAAI,EAArB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the video support of the browser running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.video` from within any Scene.\r\n * \r\n * In Phaser 3.20 the properties were renamed to drop the 'Video' suffix.\r\n * \r\n * @typedef {object} Phaser.Device.Video\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} h264 - Can this device play h264 mp4 video files?\r\n * @property {boolean} hls - Can this device play hls video files?\r\n * @property {boolean} mp4 - Can this device play h264 mp4 video files?\r\n * @property {boolean} ogg - Can this device play ogg video files?\r\n * @property {boolean} vp9 - Can this device play vp9 video files?\r\n * @property {boolean} webm - Can this device play webm video files?\r\n */\r\nvar Video = {\r\n\r\n    h264: false,\r\n    hls: false,\r\n    mp4: false,\r\n    ogg: false,\r\n    vp9: false,\r\n    webm: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    var videoElement = document.createElement('video');\r\n    var result = !!videoElement.canPlayType;\r\n\r\n    try\r\n    {\r\n        if (result)\r\n        {\r\n            if (videoElement.canPlayType('video/ogg; codecs=\"theora\"').replace(/^no$/, ''))\r\n            {\r\n                Video.ogg = true;\r\n            }\r\n\r\n            if (videoElement.canPlayType('video/mp4; codecs=\"avc1.42E01E\"').replace(/^no$/, ''))\r\n            {\r\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\r\n                Video.h264 = true;\r\n                Video.mp4 = true;\r\n            }\r\n\r\n            if (videoElement.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Video.webm = true;\r\n            }\r\n\r\n            if (videoElement.canPlayType('video/webm; codecs=\"vp9\"').replace(/^no$/, ''))\r\n            {\r\n                Video.vp9 = true;\r\n            }\r\n\r\n            if (videoElement.canPlayType('application/x-mpegURL; codecs=\"avc1.42E01E\"').replace(/^no$/, ''))\r\n            {\r\n                Video.hls = true;\r\n            }\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        //  Nothing to do\r\n    }\r\n\r\n    return Video;\r\n}\r\n\r\nmodule.exports = init();\r\n"]},"metadata":{},"sourceType":"script"}