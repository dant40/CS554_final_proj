{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Checks if the a Point falls between the two end-points of a Line, based on the given line thickness.\r\n * \r\n * Assumes that the line end points are circular, not square.\r\n *\r\n * @function Phaser.Geom.Intersects.PointToLine\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|any)} point - The point, or point-like object to check.\r\n * @param {Phaser.Geom.Line} line - The line segment to test for intersection on.\r\n * @param {number} [lineThickness=1] - The line thickness. Assumes that the line end points are circular.\r\n *\r\n * @return {boolean} `true` if the Point falls on the Line, otherwise `false`.\r\n */\nvar PointToLine = function (point, line, lineThickness) {\n  if (lineThickness === undefined) {\n    lineThickness = 1;\n  }\n\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var px = point.x;\n  var py = point.y;\n  var L2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n  if (L2 === 0) {\n    return false;\n  }\n\n  var r = ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / L2; //  Assume line thickness is circular\n\n  if (r < 0) {\n    //  Outside line1\n    return Math.sqrt((x1 - px) * (x1 - px) + (y1 - py) * (y1 - py)) <= lineThickness;\n  } else if (r >= 0 && r <= 1) {\n    //  On the line segment\n    var s = ((y1 - py) * (x2 - x1) - (x1 - px) * (y2 - y1)) / L2;\n    return Math.abs(s) * Math.sqrt(L2) <= lineThickness;\n  } else {\n    //  Outside line2\n    return Math.sqrt((x2 - px) * (x2 - px) + (y2 - py) * (y2 - py)) <= lineThickness;\n  }\n};\n\nmodule.exports = PointToLine;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/PointToLine.js"],"names":["PointToLine","point","line","lineThickness","undefined","x1","y1","x2","y2","px","x","py","y","L2","r","Math","sqrt","s","abs","module","exports"],"mappings":"AAAA;;;;;;;AAOA;;;;;;;;;;;;;;AAcA,IAAIA,WAAW,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,aAAvB,EAClB;AACI,MAAIA,aAAa,KAAKC,SAAtB,EAAiC;AAAED,IAAAA,aAAa,GAAG,CAAhB;AAAoB;;AAEvD,MAAIE,EAAE,GAAGH,IAAI,CAACG,EAAd;AACA,MAAIC,EAAE,GAAGJ,IAAI,CAACI,EAAd;AAEA,MAAIC,EAAE,GAAGL,IAAI,CAACK,EAAd;AACA,MAAIC,EAAE,GAAGN,IAAI,CAACM,EAAd;AAEA,MAAIC,EAAE,GAAGR,KAAK,CAACS,CAAf;AACA,MAAIC,EAAE,GAAGV,KAAK,CAACW,CAAf;AAEA,MAAIC,EAAE,GAAK,CAACN,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACG,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAArC;;AAEA,MAAIO,EAAE,KAAK,CAAX,EACA;AACI,WAAO,KAAP;AACH;;AAED,MAAIC,CAAC,GAAG,CAAE,CAACL,EAAE,GAAGJ,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACM,EAAE,GAAGL,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAA5B,IAAsDO,EAA9D,CAnBJ,CAqBI;;AACA,MAAIC,CAAC,GAAG,CAAR,EACA;AACI;AACA,WAAQC,IAAI,CAACC,IAAL,CAAW,CAACX,EAAE,GAAGI,EAAN,KAAaJ,EAAE,GAAGI,EAAlB,CAAD,GAA2B,CAACH,EAAE,GAAGK,EAAN,KAAaL,EAAE,GAAGK,EAAlB,CAArC,KAAgER,aAAxE;AACH,GAJD,MAKK,IAAKW,CAAC,IAAI,CAAN,IAAaA,CAAC,IAAI,CAAtB,EACL;AACI;AACA,QAAIG,CAAC,GAAG,CAAE,CAACX,EAAE,GAAGK,EAAN,KAAaJ,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACA,EAAE,GAAGI,EAAN,KAAaD,EAAE,GAAGF,EAAlB,CAA5B,IAAsDO,EAA9D;AAEA,WAAQE,IAAI,CAACG,GAAL,CAASD,CAAT,IAAcF,IAAI,CAACC,IAAL,CAAUH,EAAV,CAAd,IAA+BV,aAAvC;AACH,GANI,MAQL;AACI;AACA,WAAQY,IAAI,CAACC,IAAL,CAAW,CAACT,EAAE,GAAGE,EAAN,KAAaF,EAAE,GAAGE,EAAlB,CAAD,GAA2B,CAACD,EAAE,GAAGG,EAAN,KAAaH,EAAE,GAAGG,EAAlB,CAArC,KAAgER,aAAxE;AACH;AACJ,CAxCD;;AA0CAgB,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks if the a Point falls between the two end-points of a Line, based on the given line thickness.\r\n * \r\n * Assumes that the line end points are circular, not square.\r\n *\r\n * @function Phaser.Geom.Intersects.PointToLine\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|any)} point - The point, or point-like object to check.\r\n * @param {Phaser.Geom.Line} line - The line segment to test for intersection on.\r\n * @param {number} [lineThickness=1] - The line thickness. Assumes that the line end points are circular.\r\n *\r\n * @return {boolean} `true` if the Point falls on the Line, otherwise `false`.\r\n */\r\nvar PointToLine = function (point, line, lineThickness)\r\n{\r\n    if (lineThickness === undefined) { lineThickness = 1; }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    var px = point.x;\r\n    var py = point.y;\r\n\r\n    var L2 = (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n    if (L2 === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var r = (((px - x1) * (x2 - x1)) + ((py - y1) * (y2 - y1))) / L2;\r\n\r\n    //  Assume line thickness is circular\r\n    if (r < 0)\r\n    {\r\n        //  Outside line1\r\n        return (Math.sqrt(((x1 - px) * (x1 - px)) + ((y1 - py) * (y1 - py))) <= lineThickness);\r\n    }\r\n    else if ((r >= 0) && (r <= 1))\r\n    {\r\n        //  On the line segment\r\n        var s = (((y1 - py) * (x2 - x1)) - ((x1 - px) * (y2 - y1))) / L2;\r\n\r\n        return (Math.abs(s) * Math.sqrt(L2) <= lineThickness);\r\n    }\r\n    else\r\n    {\r\n        //  Outside line2\r\n        return (Math.sqrt(((x2 - px) * (x2 - px)) + ((y2 - py) * (y2 - py))) <= lineThickness);\r\n    }\r\n};\r\n\r\nmodule.exports = PointToLine;\r\n"]},"metadata":{},"sourceType":"script"}