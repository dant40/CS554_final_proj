{"ast":null,"code":"module.exports = ['#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS', '', 'precision mediump float;', '', 'struct Light', '{', '    vec2 position;', '    vec3 color;', '    float intensity;', '    float radius;', '};', '', 'const int kMaxLights = %LIGHT_COUNT%;', '', 'uniform vec4 uCamera; /* x, y, rotation, zoom */', 'uniform vec2 uResolution;', 'uniform sampler2D uMainSampler;', 'uniform sampler2D uNormSampler;', 'uniform vec3 uAmbientLightColor;', 'uniform Light uLights[kMaxLights];', 'uniform mat3 uInverseRotationMatrix;', '', 'varying vec2 outTexCoord;', 'varying vec4 outTint;', '', 'void main()', '{', '    vec3 finalColor = vec3(0.0, 0.0, 0.0);', '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);', '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;', '    vec3 normal = normalize(uInverseRotationMatrix * vec3(normalMap * 2.0 - 1.0));', '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;', '', '    for (int index = 0; index < kMaxLights; ++index)', '    {', '        Light light = uLights[index];', '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.1);', '        vec3 lightNormal = normalize(lightDir);', '        float distToSurf = length(lightDir) * uCamera.w;', '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);', '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;', '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);', '        vec3 diffuse = light.color * diffuseFactor;', '        finalColor += (attenuation * diffuse) * light.intensity;', '    }', '', '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);', '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);', '', '}', ''].join('\\n');","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/webgl/shaders/ForwardDiffuse-frag.js"],"names":["module","exports","join"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,CACb,+CADa,EAEb,EAFa,EAGb,0BAHa,EAIb,EAJa,EAKb,cALa,EAMb,GANa,EAOb,oBAPa,EAQb,iBARa,EASb,sBATa,EAUb,mBAVa,EAWb,IAXa,EAYb,EAZa,EAab,uCAba,EAcb,EAda,EAeb,kDAfa,EAgBb,2BAhBa,EAiBb,iCAjBa,EAkBb,iCAlBa,EAmBb,kCAnBa,EAoBb,oCApBa,EAqBb,sCArBa,EAsBb,EAtBa,EAuBb,2BAvBa,EAwBb,uBAxBa,EAyBb,EAzBa,EA0Bb,aA1Ba,EA2Bb,GA3Ba,EA4Bb,4CA5Ba,EA6Bb,mGA7Ba,EA8Bb,gEA9Ba,EA+Bb,oFA/Ba,EAgCb,qEAhCa,EAiCb,EAjCa,EAkCb,sDAlCa,EAmCb,OAnCa,EAoCb,uCApCa,EAqCb,yFArCa,EAsCb,iDAtCa,EAuCb,0DAvCa,EAwCb,mEAxCa,EAyCb,wEAzCa,EA0Cb,iGA1Ca,EA2Cb,qDA3Ca,EA4Cb,kEA5Ca,EA6Cb,OA7Ca,EA8Cb,EA9Ca,EA+Cb,oEA/Ca,EAgDb,kFAhDa,EAiDb,EAjDa,EAkDb,GAlDa,EAmDb,EAnDa,EAoDfC,IApDe,CAoDV,IApDU,CAAjB","sourcesContent":["module.exports = [\r\n    '#define SHADER_NAME PHASER_FORWARD_DIFFUSE_FS',\r\n    '',\r\n    'precision mediump float;',\r\n    '',\r\n    'struct Light',\r\n    '{',\r\n    '    vec2 position;',\r\n    '    vec3 color;',\r\n    '    float intensity;',\r\n    '    float radius;',\r\n    '};',\r\n    '',\r\n    'const int kMaxLights = %LIGHT_COUNT%;',\r\n    '',\r\n    'uniform vec4 uCamera; /* x, y, rotation, zoom */',\r\n    'uniform vec2 uResolution;',\r\n    'uniform sampler2D uMainSampler;',\r\n    'uniform sampler2D uNormSampler;',\r\n    'uniform vec3 uAmbientLightColor;',\r\n    'uniform Light uLights[kMaxLights];',\r\n    'uniform mat3 uInverseRotationMatrix;',\r\n    '',\r\n    'varying vec2 outTexCoord;',\r\n    'varying vec4 outTint;',\r\n    '',\r\n    'void main()',\r\n    '{',\r\n    '    vec3 finalColor = vec3(0.0, 0.0, 0.0);',\r\n    '    vec4 color = texture2D(uMainSampler, outTexCoord) * vec4(outTint.rgb * outTint.a, outTint.a);',\r\n    '    vec3 normalMap = texture2D(uNormSampler, outTexCoord).rgb;',\r\n    '    vec3 normal = normalize(uInverseRotationMatrix * vec3(normalMap * 2.0 - 1.0));',\r\n    '    vec2 res = vec2(min(uResolution.x, uResolution.y)) * uCamera.w;',\r\n    '',\r\n    '    for (int index = 0; index < kMaxLights; ++index)',\r\n    '    {',\r\n    '        Light light = uLights[index];',\r\n    '        vec3 lightDir = vec3((light.position.xy / res) - (gl_FragCoord.xy / res), 0.1);',\r\n    '        vec3 lightNormal = normalize(lightDir);',\r\n    '        float distToSurf = length(lightDir) * uCamera.w;',\r\n    '        float diffuseFactor = max(dot(normal, lightNormal), 0.0);',\r\n    '        float radius = (light.radius / res.x * uCamera.w) * uCamera.w;',\r\n    '        float attenuation = clamp(1.0 - distToSurf * distToSurf / (radius * radius), 0.0, 1.0);',\r\n    '        vec3 diffuse = light.color * diffuseFactor;',\r\n    '        finalColor += (attenuation * diffuse) * light.intensity;',\r\n    '    }',\r\n    '',\r\n    '    vec4 colorOutput = vec4(uAmbientLightColor + finalColor, 1.0);',\r\n    '    gl_FragColor = color * vec4(colorOutput.rgb * colorOutput.a, colorOutput.a);',\r\n    '',\r\n    '}',\r\n    ''\r\n].join('\\n');\r\n"]},"metadata":{},"sourceType":"script"}