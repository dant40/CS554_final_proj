{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar types = {};\n/**\r\n * @namespace Phaser.Loader.FileTypesManager\r\n */\n\nvar FileTypesManager = {\n  /**\r\n   * Static method called when a LoaderPlugin is created.\r\n   * \r\n   * Loops through the local types object and injects all of them as\r\n   * properties into the LoaderPlugin instance.\r\n   *\r\n   * @method Phaser.Loader.FileTypesManager.install\r\n   * @since 3.0.0\r\n   * \r\n   * @param {Phaser.Loader.LoaderPlugin} loader - The LoaderPlugin to install the types into.\r\n   */\n  install: function (loader) {\n    for (var key in types) {\n      loader[key] = types[key];\n    }\n  },\n\n  /**\r\n   * Static method called directly by the File Types.\r\n   * \r\n   * The key is a reference to the function used to load the files via the Loader, i.e. `image`.\r\n   *\r\n   * @method Phaser.Loader.FileTypesManager.register\r\n   * @since 3.0.0\r\n   * \r\n   * @param {string} key - The key that will be used as the method name in the LoaderPlugin.\r\n   * @param {function} factoryFunction - The function that will be called when LoaderPlugin.key is invoked.\r\n   */\n  register: function (key, factoryFunction) {\n    types[key] = factoryFunction;\n  },\n\n  /**\r\n   * Removed all associated file types.\r\n   *\r\n   * @method Phaser.Loader.FileTypesManager.destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    types = {};\n  }\n};\nmodule.exports = FileTypesManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/FileTypesManager.js"],"names":["types","FileTypesManager","install","loader","key","register","factoryFunction","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAG,EAAZ;AAEA;;;;AAIA,IAAIC,gBAAgB,GAAG;AAEnB;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,UAAUC,MAAV,EACT;AACI,SAAK,IAAIC,GAAT,IAAgBJ,KAAhB,EACA;AACIG,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcJ,KAAK,CAACI,GAAD,CAAnB;AACH;AACJ,GAnBkB;;AAqBnB;;;;;;;;;;;AAWAC,EAAAA,QAAQ,EAAE,UAAUD,GAAV,EAAeE,eAAf,EACV;AACIN,IAAAA,KAAK,CAACI,GAAD,CAAL,GAAaE,eAAb;AACH,GAnCkB;;AAqCnB;;;;;;AAMAC,EAAAA,OAAO,EAAE,YACT;AACIP,IAAAA,KAAK,GAAG,EAAR;AACH;AA9CkB,CAAvB;AAkDAQ,MAAM,CAACC,OAAP,GAAiBR,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar types = {};\r\n\r\n/**\r\n * @namespace Phaser.Loader.FileTypesManager\r\n */\r\n\r\nvar FileTypesManager = {\r\n\r\n    /**\r\n     * Static method called when a LoaderPlugin is created.\r\n     * \r\n     * Loops through the local types object and injects all of them as\r\n     * properties into the LoaderPlugin instance.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.install\r\n     * @since 3.0.0\r\n     * \r\n     * @param {Phaser.Loader.LoaderPlugin} loader - The LoaderPlugin to install the types into.\r\n     */\r\n    install: function (loader)\r\n    {\r\n        for (var key in types)\r\n        {\r\n            loader[key] = types[key];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Static method called directly by the File Types.\r\n     * \r\n     * The key is a reference to the function used to load the files via the Loader, i.e. `image`.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.register\r\n     * @since 3.0.0\r\n     * \r\n     * @param {string} key - The key that will be used as the method name in the LoaderPlugin.\r\n     * @param {function} factoryFunction - The function that will be called when LoaderPlugin.key is invoked.\r\n     */\r\n    register: function (key, factoryFunction)\r\n    {\r\n        types[key] = factoryFunction;\r\n    },\r\n\r\n    /**\r\n     * Removed all associated file types.\r\n     *\r\n     * @method Phaser.Loader.FileTypesManager.destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        types = {};\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = FileTypesManager;\r\n"]},"metadata":{},"sourceType":"script"}