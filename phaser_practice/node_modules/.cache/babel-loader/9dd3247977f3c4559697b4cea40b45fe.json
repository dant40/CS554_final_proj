{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * A function to process the collision callbacks between a single tile and an Arcade Physics enabled Game Object.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.ProcessTileCallbacks\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.Tile} tile - The Tile to process.\r\n * @param {Phaser.GameObjects.Sprite} sprite - The Game Object to process with the Tile.\r\n *\r\n * @return {boolean} The result of the callback, `true` for further processing, or `false` to skip this pair.\r\n */\nvar ProcessTileCallbacks = function (tile, sprite) {\n  //  Tile callbacks take priority over layer level callbacks\n  if (tile.collisionCallback) {\n    return !tile.collisionCallback.call(tile.collisionCallbackContext, sprite, tile);\n  } else if (tile.layer.callbacks[tile.index]) {\n    return !tile.layer.callbacks[tile.index].callback.call(tile.layer.callbacks[tile.index].callbackContext, sprite, tile);\n  }\n\n  return true;\n};\n\nmodule.exports = ProcessTileCallbacks;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/tilemap/ProcessTileCallbacks.js"],"names":["ProcessTileCallbacks","tile","sprite","collisionCallback","call","collisionCallbackContext","layer","callbacks","index","callback","callbackContext","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,oBAAoB,GAAG,UAAUC,IAAV,EAAgBC,MAAhB,EAC3B;AACI;AACA,MAAID,IAAI,CAACE,iBAAT,EACA;AACI,WAAO,CAACF,IAAI,CAACE,iBAAL,CAAuBC,IAAvB,CAA4BH,IAAI,CAACI,wBAAjC,EAA2DH,MAA3D,EAAmED,IAAnE,CAAR;AACH,GAHD,MAIK,IAAIA,IAAI,CAACK,KAAL,CAAWC,SAAX,CAAqBN,IAAI,CAACO,KAA1B,CAAJ,EACL;AACI,WAAO,CAACP,IAAI,CAACK,KAAL,CAAWC,SAAX,CAAqBN,IAAI,CAACO,KAA1B,EAAiCC,QAAjC,CAA0CL,IAA1C,CACJH,IAAI,CAACK,KAAL,CAAWC,SAAX,CAAqBN,IAAI,CAACO,KAA1B,EAAiCE,eAD7B,EAC8CR,MAD9C,EACsDD,IADtD,CAAR;AAGH;;AAED,SAAO,IAAP;AACH,CAfD;;AAiBAU,MAAM,CAACC,OAAP,GAAiBZ,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * A function to process the collision callbacks between a single tile and an Arcade Physics enabled Game Object.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.ProcessTileCallbacks\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.Tile} tile - The Tile to process.\r\n * @param {Phaser.GameObjects.Sprite} sprite - The Game Object to process with the Tile.\r\n *\r\n * @return {boolean} The result of the callback, `true` for further processing, or `false` to skip this pair.\r\n */\r\nvar ProcessTileCallbacks = function (tile, sprite)\r\n{\r\n    //  Tile callbacks take priority over layer level callbacks\r\n    if (tile.collisionCallback)\r\n    {\r\n        return !tile.collisionCallback.call(tile.collisionCallbackContext, sprite, tile);\r\n    }\r\n    else if (tile.layer.callbacks[tile.index])\r\n    {\r\n        return !tile.layer.callbacks[tile.index].callback.call(\r\n            tile.layer.callbacks[tile.index].callbackContext, sprite, tile\r\n        );\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nmodule.exports = ProcessTileCallbacks;\r\n"]},"metadata":{},"sourceType":"script"}