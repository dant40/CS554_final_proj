{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CustomMap = require('../structs/Map');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n/**\r\n * @classdesc\r\n * The BaseCache is a base Cache class that can be used for storing references to any kind of data.\r\n *\r\n * Data can be added, retrieved and removed based on the given keys.\r\n *\r\n * Keys are string-based.\r\n *\r\n * @class BaseCache\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar BaseCache = new Class({\n  initialize: function BaseCache() {\n    /**\r\n     * The Map in which the cache objects are stored.\r\n     *\r\n     * You can query the Map directly or use the BaseCache methods.\r\n     *\r\n     * @name Phaser.Cache.BaseCache#entries\r\n     * @type {Phaser.Structs.Map.<String, *>}\r\n     * @since 3.0.0\r\n     */\n    this.entries = new CustomMap();\n    /**\r\n     * An instance of EventEmitter used by the cache to emit related events.\r\n     *\r\n     * @name Phaser.Cache.BaseCache#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = new EventEmitter();\n  },\n\n  /**\r\n   * Adds an item to this cache. The item is referenced by a unique string, which you are responsible\r\n   * for setting and keeping track of. The item can only be retrieved by using this string.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#add\r\n   * @fires Phaser.Cache.Events#ADD\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key by which the data added to the cache will be referenced.\r\n   * @param {*} data - The data to be stored in the cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n   */\n  add: function (key, data) {\n    this.entries.set(key, data);\n    this.events.emit(Events.ADD, this, key, data);\n    return this;\n  },\n\n  /**\r\n   * Checks if this cache contains an item matching the given key.\r\n   * This performs the same action as `BaseCache.exists`.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#has\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be checked in this cache.\r\n   *\r\n   * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n   */\n  has: function (key) {\n    return this.entries.has(key);\n  },\n\n  /**\r\n   * Checks if this cache contains an item matching the given key.\r\n   * This performs the same action as `BaseCache.has` and is called directly by the Loader.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#exists\r\n   * @since 3.7.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be checked in this cache.\r\n   *\r\n   * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n   */\n  exists: function (key) {\n    return this.entries.has(key);\n  },\n\n  /**\r\n   * Gets an item from this cache based on the given key.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to be retrieved from this cache.\r\n   *\r\n   * @return {*} The item in the cache, or `null` if no item matching the given key was found.\r\n   */\n  get: function (key) {\n    return this.entries.get(key);\n  },\n\n  /**\r\n   * Removes and item from this cache based on the given key.\r\n   *\r\n   * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\r\n   * No additional checks are done on the item removed. If other systems or parts of your game code\r\n   * are relying on this item, it is up to you to sever those relationships prior to removing the item.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#remove\r\n   * @fires Phaser.Cache.Events#REMOVE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of the item to remove from the cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n   */\n  remove: function (key) {\n    var entry = this.get(key);\n\n    if (entry) {\n      this.entries.delete(key);\n      this.events.emit(Events.REMOVE, this, key, entry.data);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Returns all keys in use in this cache.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#getKeys\r\n   * @since 3.17.0\r\n   *\r\n   * @return {string[]} Array containing all the keys.\r\n   */\n  getKeys: function () {\n    return this.entries.keys();\n  },\n\n  /**\r\n   * Destroys this cache and all items within it.\r\n   *\r\n   * @method Phaser.Cache.BaseCache#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.entries.clear();\n    this.events.removeAllListeners();\n    this.entries = null;\n    this.events = null;\n  }\n});\nmodule.exports = BaseCache;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cache/BaseCache.js"],"names":["Class","require","CustomMap","EventEmitter","Events","BaseCache","initialize","entries","events","add","key","data","set","emit","ADD","has","exists","get","remove","entry","delete","REMOVE","getKeys","keys","destroy","clear","removeAllListeners","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;AAaA,IAAII,SAAS,GAAG,IAAIL,KAAJ,CAAU;AAEtBM,EAAAA,UAAU,EAEV,SAASD,SAAT,GACA;AACI;;;;;;;;;AASA,SAAKE,OAAL,GAAe,IAAIL,SAAJ,EAAf;AAEA;;;;;;;;AAOA,SAAKM,MAAL,GAAc,IAAIL,YAAJ,EAAd;AACH,GAzBqB;;AA2BtB;;;;;;;;;;;;;AAaAM,EAAAA,GAAG,EAAE,UAAUC,GAAV,EAAeC,IAAf,EACL;AACI,SAAKJ,OAAL,CAAaK,GAAb,CAAiBF,GAAjB,EAAsBC,IAAtB;AAEA,SAAKH,MAAL,CAAYK,IAAZ,CAAiBT,MAAM,CAACU,GAAxB,EAA6B,IAA7B,EAAmCJ,GAAnC,EAAwCC,IAAxC;AAEA,WAAO,IAAP;AACH,GA/CqB;;AAiDtB;;;;;;;;;;;AAWAI,EAAAA,GAAG,EAAE,UAAUL,GAAV,EACL;AACI,WAAO,KAAKH,OAAL,CAAaQ,GAAb,CAAiBL,GAAjB,CAAP;AACH,GA/DqB;;AAiEtB;;;;;;;;;;;AAWAM,EAAAA,MAAM,EAAE,UAAUN,GAAV,EACR;AACI,WAAO,KAAKH,OAAL,CAAaQ,GAAb,CAAiBL,GAAjB,CAAP;AACH,GA/EqB;;AAiFtB;;;;;;;;;;AAUAO,EAAAA,GAAG,EAAE,UAAUP,GAAV,EACL;AACI,WAAO,KAAKH,OAAL,CAAaU,GAAb,CAAiBP,GAAjB,CAAP;AACH,GA9FqB;;AAgGtB;;;;;;;;;;;;;;;AAeAQ,EAAAA,MAAM,EAAE,UAAUR,GAAV,EACR;AACI,QAAIS,KAAK,GAAG,KAAKF,GAAL,CAASP,GAAT,CAAZ;;AAEA,QAAIS,KAAJ,EACA;AACI,WAAKZ,OAAL,CAAaa,MAAb,CAAoBV,GAApB;AAEA,WAAKF,MAAL,CAAYK,IAAZ,CAAiBT,MAAM,CAACiB,MAAxB,EAAgC,IAAhC,EAAsCX,GAAtC,EAA2CS,KAAK,CAACR,IAAjD;AACH;;AAED,WAAO,IAAP;AACH,GA3HqB;;AA6HtB;;;;;;;;AAQAW,EAAAA,OAAO,EAAE,YACT;AACI,WAAO,KAAKf,OAAL,CAAagB,IAAb,EAAP;AACH,GAxIqB;;AA0ItB;;;;;;AAMAC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKjB,OAAL,CAAakB,KAAb;AACA,SAAKjB,MAAL,CAAYkB,kBAAZ;AAEA,SAAKnB,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACH;AAvJqB,CAAV,CAAhB;AA2JAmB,MAAM,CAACC,OAAP,GAAiBvB,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\n\r\n/**\r\n * @classdesc\r\n * The BaseCache is a base Cache class that can be used for storing references to any kind of data.\r\n *\r\n * Data can be added, retrieved and removed based on the given keys.\r\n *\r\n * Keys are string-based.\r\n *\r\n * @class BaseCache\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar BaseCache = new Class({\r\n\r\n    initialize:\r\n\r\n    function BaseCache ()\r\n    {\r\n        /**\r\n         * The Map in which the cache objects are stored.\r\n         *\r\n         * You can query the Map directly or use the BaseCache methods.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#entries\r\n         * @type {Phaser.Structs.Map.<String, *>}\r\n         * @since 3.0.0\r\n         */\r\n        this.entries = new CustomMap();\r\n\r\n        /**\r\n         * An instance of EventEmitter used by the cache to emit related events.\r\n         *\r\n         * @name Phaser.Cache.BaseCache#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = new EventEmitter();\r\n    },\r\n\r\n    /**\r\n     * Adds an item to this cache. The item is referenced by a unique string, which you are responsible\r\n     * for setting and keeping track of. The item can only be retrieved by using this string.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#add\r\n     * @fires Phaser.Cache.Events#ADD\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key by which the data added to the cache will be referenced.\r\n     * @param {*} data - The data to be stored in the cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n     */\r\n    add: function (key, data)\r\n    {\r\n        this.entries.set(key, data);\r\n\r\n        this.events.emit(Events.ADD, this, key, data);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.exists`.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    has: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Checks if this cache contains an item matching the given key.\r\n     * This performs the same action as `BaseCache.has` and is called directly by the Loader.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#exists\r\n     * @since 3.7.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be checked in this cache.\r\n     *\r\n     * @return {boolean} Returns `true` if the cache contains an item matching the given key, otherwise `false`.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return this.entries.has(key);\r\n    },\r\n\r\n    /**\r\n     * Gets an item from this cache based on the given key.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to be retrieved from this cache.\r\n     *\r\n     * @return {*} The item in the cache, or `null` if no item matching the given key was found.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.entries.get(key);\r\n    },\r\n\r\n    /**\r\n     * Removes and item from this cache based on the given key.\r\n     *\r\n     * If an entry matching the key is found it is removed from the cache and a `remove` event emitted.\r\n     * No additional checks are done on the item removed. If other systems or parts of your game code\r\n     * are relying on this item, it is up to you to sever those relationships prior to removing the item.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#remove\r\n     * @fires Phaser.Cache.Events#REMOVE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of the item to remove from the cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} This BaseCache object.\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var entry = this.get(key);\r\n\r\n        if (entry)\r\n        {\r\n            this.entries.delete(key);\r\n\r\n            this.events.emit(Events.REMOVE, this, key, entry.data);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns all keys in use in this cache.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#getKeys\r\n     * @since 3.17.0\r\n     *\r\n     * @return {string[]} Array containing all the keys.\r\n     */\r\n    getKeys: function ()\r\n    {\r\n        return this.entries.keys();\r\n    },\r\n\r\n    /**\r\n     * Destroys this cache and all items within it.\r\n     *\r\n     * @method Phaser.Cache.BaseCache#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.entries.clear();\r\n        this.events.removeAllListeners();\r\n\r\n        this.entries = null;\r\n        this.events = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseCache;\r\n"]},"metadata":{},"sourceType":"script"}