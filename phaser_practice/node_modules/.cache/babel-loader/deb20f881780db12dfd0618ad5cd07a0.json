{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture.\r\n * \r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheet\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {integer} x - [description]\r\n * @param {integer} y - [description]\r\n * @param {integer} width - [description]\r\n * @param {integer} height - [description]\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - [description]\r\n * @param {number} [config.endFrame=-1] - [description]\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\n\n\nvar SpriteSheet = function (texture, sourceIndex, x, y, width, height, config) {\n  var frameWidth = GetFastValue(config, 'frameWidth', null);\n  var frameHeight = GetFastValue(config, 'frameHeight', frameWidth); //  If missing we can't proceed\n\n  if (frameWidth === null) {\n    throw new Error('TextureManager.SpriteSheet: Invalid frameWidth given.');\n  } //  Add in a __BASE entry (for the entire atlas)\n\n\n  var source = texture.source[sourceIndex];\n  texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\n  var startFrame = GetFastValue(config, 'startFrame', 0);\n  var endFrame = GetFastValue(config, 'endFrame', -1);\n  var margin = GetFastValue(config, 'margin', 0);\n  var spacing = GetFastValue(config, 'spacing', 0);\n  var row = Math.floor((width - margin + spacing) / (frameWidth + spacing));\n  var column = Math.floor((height - margin + spacing) / (frameHeight + spacing));\n  var total = row * column;\n\n  if (total === 0) {\n    console.warn('SpriteSheet frame dimensions will result in zero frames.');\n  }\n\n  if (startFrame > total || startFrame < -total) {\n    startFrame = 0;\n  }\n\n  if (startFrame < 0) {\n    //  Allow negative skipframes.\n    startFrame = total + startFrame;\n  }\n\n  if (endFrame !== -1) {\n    total = startFrame + (endFrame + 1);\n  }\n\n  var fx = margin;\n  var fy = margin;\n  var ax = 0;\n  var ay = 0;\n\n  for (var i = 0; i < total; i++) {\n    ax = 0;\n    ay = 0;\n    var w = fx + frameWidth;\n    var h = fy + frameHeight;\n\n    if (w > width) {\n      ax = w - width;\n    }\n\n    if (h > height) {\n      ay = h - height;\n    }\n\n    texture.add(i, sourceIndex, x + fx, y + fy, frameWidth - ax, frameHeight - ay);\n    fx += frameWidth + spacing;\n\n    if (fx + frameWidth > width) {\n      fx = margin;\n      fy += frameHeight + spacing;\n    }\n  }\n\n  return texture;\n};\n\nmodule.exports = SpriteSheet;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/parsers/SpriteSheet.js"],"names":["GetFastValue","require","SpriteSheet","texture","sourceIndex","x","y","width","height","config","frameWidth","frameHeight","Error","source","add","startFrame","endFrame","margin","spacing","row","Math","floor","column","total","console","warn","fx","fy","ax","ay","i","w","h","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture.\r\n * \r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheet\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {integer} x - [description]\r\n * @param {integer} y - [description]\r\n * @param {integer} width - [description]\r\n * @param {integer} height - [description]\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - [description]\r\n * @param {number} [config.endFrame=-1] - [description]\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar SpriteSheet = function (texture, sourceIndex, x, y, width, height, config)\r\n{\r\n    var frameWidth = GetFastValue(config, 'frameWidth', null);\r\n    var frameHeight = GetFastValue(config, 'frameHeight', frameWidth);\r\n\r\n    //  If missing we can't proceed\r\n    if (frameWidth === null)\r\n    {\r\n        throw new Error('TextureManager.SpriteSheet: Invalid frameWidth given.');\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    var startFrame = GetFastValue(config, 'startFrame', 0);\r\n    var endFrame = GetFastValue(config, 'endFrame', -1);\r\n    var margin = GetFastValue(config, 'margin', 0);\r\n    var spacing = GetFastValue(config, 'spacing', 0);\r\n\r\n    var row = Math.floor((width - margin + spacing) / (frameWidth + spacing));\r\n    var column = Math.floor((height - margin + spacing) / (frameHeight + spacing));\r\n    var total = row * column;\r\n\r\n    if (total === 0)\r\n    {\r\n        console.warn('SpriteSheet frame dimensions will result in zero frames.');\r\n    }\r\n\r\n    if (startFrame > total || startFrame < -total)\r\n    {\r\n        startFrame = 0;\r\n    }\r\n\r\n    if (startFrame < 0)\r\n    {\r\n        //  Allow negative skipframes.\r\n        startFrame = total + startFrame;\r\n    }\r\n\r\n    if (endFrame !== -1)\r\n    {\r\n        total = startFrame + (endFrame + 1);\r\n    }\r\n\r\n    var fx = margin;\r\n    var fy = margin;\r\n    var ax = 0;\r\n    var ay = 0;\r\n\r\n    for (var i = 0; i < total; i++)\r\n    {\r\n        ax = 0;\r\n        ay = 0;\r\n\r\n        var w = fx + frameWidth;\r\n        var h = fy + frameHeight;\r\n\r\n        if (w > width)\r\n        {\r\n            ax = w - width;\r\n        }\r\n\r\n        if (h > height)\r\n        {\r\n            ay = h - height;\r\n        }\r\n\r\n        texture.add(i, sourceIndex, x + fx, y + fy, frameWidth - ax, frameHeight - ay);\r\n\r\n        fx += frameWidth + spacing;\r\n\r\n        if (fx + frameWidth > width)\r\n        {\r\n            fx = margin;\r\n            fy += frameHeight + spacing;\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = SpriteSheet;\r\n"]},"metadata":{},"sourceType":"script"}