{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clone = require('./Clone');\n/**\r\n * Creates a new Object using all values from obj1 and obj2.\r\n * If a value exists in both obj1 and obj2, the value in obj1 is used.\r\n * \r\n * This is only a shallow copy. Deeply nested objects are not cloned, so be sure to only use this\r\n * function on shallow objects.\r\n *\r\n * @function Phaser.Utils.Objects.Merge\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - The first object.\r\n * @param {object} obj2 - The second object.\r\n *\r\n * @return {object} A new object containing the union of obj1's and obj2's properties.\r\n */\n\n\nvar Merge = function (obj1, obj2) {\n  var clone = Clone(obj1);\n\n  for (var key in obj2) {\n    if (!clone.hasOwnProperty(key)) {\n      clone[key] = obj2[key];\n    }\n  }\n\n  return clone;\n};\n\nmodule.exports = Merge;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/object/Merge.js"],"names":["Clone","require","Merge","obj1","obj2","clone","key","hasOwnProperty","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,KAAK,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EACZ;AACI,MAAIC,KAAK,GAAGL,KAAK,CAACG,IAAD,CAAjB;;AAEA,OAAK,IAAIG,GAAT,IAAgBF,IAAhB,EACA;AACI,QAAI,CAACC,KAAK,CAACE,cAAN,CAAqBD,GAArB,CAAL,EACA;AACID,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaF,IAAI,CAACE,GAAD,CAAjB;AACH;AACJ;;AAED,SAAOD,KAAP;AACH,CAbD;;AAeAG,MAAM,CAACC,OAAP,GAAiBP,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clone = require('./Clone');\r\n\r\n/**\r\n * Creates a new Object using all values from obj1 and obj2.\r\n * If a value exists in both obj1 and obj2, the value in obj1 is used.\r\n * \r\n * This is only a shallow copy. Deeply nested objects are not cloned, so be sure to only use this\r\n * function on shallow objects.\r\n *\r\n * @function Phaser.Utils.Objects.Merge\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - The first object.\r\n * @param {object} obj2 - The second object.\r\n *\r\n * @return {object} A new object containing the union of obj1's and obj2's properties.\r\n */\r\nvar Merge = function (obj1, obj2)\r\n{\r\n    var clone = Clone(obj1);\r\n\r\n    for (var key in obj2)\r\n    {\r\n        if (!clone.hasOwnProperty(key))\r\n        {\r\n            clone[key] = obj2[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = Merge;\r\n"]},"metadata":{},"sourceType":"script"}