{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar LineStyleCanvas = require('../LineStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Line#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Line} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar LineCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    var dx = src._displayOriginX;\n    var dy = src._displayOriginY;\n\n    if (src.isStroked) {\n      LineStyleCanvas(ctx, src);\n      ctx.beginPath();\n      ctx.moveTo(src.geom.x1 - dx, src.geom.y1 - dy);\n      ctx.lineTo(src.geom.x2 - dx, src.geom.y2 - dy);\n      ctx.stroke();\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = LineCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/line/LineCanvasRenderer.js"],"names":["LineStyleCanvas","require","SetTransform","LineCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","ctx","currentContext","dx","_displayOriginX","dy","_displayOriginY","isStroked","beginPath","moveTo","geom","x1","y1","lineTo","x2","y2","stroke","restore","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,6CAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIE,kBAAkB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EACzB;AACI,MAAIC,GAAG,GAAGL,QAAQ,CAACM,cAAnB;;AAEA,MAAIR,YAAY,CAACE,QAAD,EAAWK,GAAX,EAAgBJ,GAAhB,EAAqBE,MAArB,EAA6BC,YAA7B,CAAhB,EACA;AACI,QAAIG,EAAE,GAAGN,GAAG,CAACO,eAAb;AACA,QAAIC,EAAE,GAAGR,GAAG,CAACS,eAAb;;AAEA,QAAIT,GAAG,CAACU,SAAR,EACA;AACIf,MAAAA,eAAe,CAACS,GAAD,EAAMJ,GAAN,CAAf;AAEAI,MAAAA,GAAG,CAACO,SAAJ;AAEAP,MAAAA,GAAG,CAACQ,MAAJ,CAAWZ,GAAG,CAACa,IAAJ,CAASC,EAAT,GAAcR,EAAzB,EAA6BN,GAAG,CAACa,IAAJ,CAASE,EAAT,GAAcP,EAA3C;AACAJ,MAAAA,GAAG,CAACY,MAAJ,CAAWhB,GAAG,CAACa,IAAJ,CAASI,EAAT,GAAcX,EAAzB,EAA6BN,GAAG,CAACa,IAAJ,CAASK,EAAT,GAAcV,EAA3C;AAEAJ,MAAAA,GAAG,CAACe,MAAJ;AACH,KAdL,CAgBI;;;AACAf,IAAAA,GAAG,CAACgB,OAAJ;AACH;AACJ,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,GAAiBxB,kBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar LineStyleCanvas = require('../LineStyleCanvas');\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Line#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Line} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar LineCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        var dx = src._displayOriginX;\r\n        var dy = src._displayOriginY;\r\n\r\n        if (src.isStroked)\r\n        {\r\n            LineStyleCanvas(ctx, src);\r\n\r\n            ctx.beginPath();\r\n\r\n            ctx.moveTo(src.geom.x1 - dx, src.geom.y1 - dy);\r\n            ctx.lineTo(src.geom.x2 - dx, src.geom.y2 - dy);\r\n    \r\n            ctx.stroke();\r\n        }\r\n\r\n        //  Restore the context saved in SetTransform\r\n        ctx.restore();\r\n    }\r\n};\r\n\r\nmodule.exports = LineCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}