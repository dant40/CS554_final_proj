{"ast":null,"code":"/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'; //  Use a lookup table to find the index.\n\nvar lookup = new Uint8Array(256);\n\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n * \r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n * \r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\n\n\nvar Base64ToArrayBuffer = function (base64) {\n  //  Is it a data uri? if so, strip the header away\n  base64 = base64.substr(base64.indexOf(',') + 1);\n  var len = base64.length;\n  var bufferLength = len * 0.75;\n  var p = 0;\n  var encoded1;\n  var encoded2;\n  var encoded3;\n  var encoded4;\n\n  if (base64[len - 1] === '=') {\n    bufferLength--;\n\n    if (base64[len - 2] === '=') {\n      bufferLength--;\n    }\n  }\n\n  var arrayBuffer = new ArrayBuffer(bufferLength);\n  var bytes = new Uint8Array(arrayBuffer);\n\n  for (var i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return arrayBuffer;\n};\n\nmodule.exports = Base64ToArrayBuffer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/base64/Base64ToArrayBuffer.js"],"names":["chars","lookup","Uint8Array","i","length","charCodeAt","Base64ToArrayBuffer","base64","substr","indexOf","len","bufferLength","p","encoded1","encoded2","encoded3","encoded4","arrayBuffer","ArrayBuffer","bytes","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,KAAK,GAAG,kEAAZ,C,CAEA;;AACA,IAAIC,MAAM,GAAG,IAAIC,UAAJ,CAAe,GAAf,CAAb;;AAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACIF,EAAAA,MAAM,CAACD,KAAK,CAACK,UAAN,CAAiBF,CAAjB,CAAD,CAAN,GAA8BA,CAA9B;AACH;AAED;;;;;;;;;;;;AAUA,IAAIG,mBAAmB,GAAG,UAAUC,MAAV,EAC1B;AACI;AACAA,EAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,OAAP,CAAe,GAAf,IAAsB,CAApC,CAAT;AAEA,MAAIC,GAAG,GAAGH,MAAM,CAACH,MAAjB;AACA,MAAIO,YAAY,GAAGD,GAAG,GAAG,IAAzB;AACA,MAAIE,CAAC,GAAG,CAAR;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;;AAEA,MAAIT,MAAM,CAACG,GAAG,GAAG,CAAP,CAAN,KAAoB,GAAxB,EACA;AACIC,IAAAA,YAAY;;AAEZ,QAAIJ,MAAM,CAACG,GAAG,GAAG,CAAP,CAAN,KAAoB,GAAxB,EACA;AACIC,MAAAA,YAAY;AACf;AACJ;;AAED,MAAIM,WAAW,GAAG,IAAIC,WAAJ,CAAgBP,YAAhB,CAAlB;AACA,MAAIQ,KAAK,GAAG,IAAIjB,UAAJ,CAAee,WAAf,CAAZ;;AAEA,OAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,GAApB,EAAyBP,CAAC,IAAI,CAA9B,EACA;AACIU,IAAAA,QAAQ,GAAGZ,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAlB,CAAD,CAAjB;AACAW,IAAAA,QAAQ,GAAGb,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AACAY,IAAAA,QAAQ,GAAGd,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AACAa,IAAAA,QAAQ,GAAGf,MAAM,CAACM,MAAM,CAACF,UAAP,CAAkBF,CAAC,GAAG,CAAtB,CAAD,CAAjB;AAEAgB,IAAAA,KAAK,CAACP,CAAC,EAAF,CAAL,GAAcC,QAAQ,IAAI,CAAb,GAAmBC,QAAQ,IAAI,CAA5C;AACAK,IAAAA,KAAK,CAACP,CAAC,EAAF,CAAL,GAAc,CAACE,QAAQ,GAAG,EAAZ,KAAmB,CAApB,GAA0BC,QAAQ,IAAI,CAAnD;AACAI,IAAAA,KAAK,CAACP,CAAC,EAAF,CAAL,GAAc,CAACG,QAAQ,GAAG,CAAZ,KAAkB,CAAnB,GAAyBC,QAAQ,GAAG,EAAjD;AACH;;AAED,SAAOC,WAAP;AACH,CAvCD;;AAyCAG,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n//  Use a lookup table to find the index.\r\nvar lookup = new Uint8Array(256);\r\n\r\nfor (var i = 0; i < chars.length; i++)\r\n{\r\n    lookup[chars.charCodeAt(i)] = i;\r\n}\r\n\r\n/**\r\n * Converts a base64 string, either with or without a data uri, into an Array Buffer.\r\n *\r\n * @function Phaser.Utils.Base64.Base64ToArrayBuffer\r\n * @since 3.18.0\r\n * \r\n * @param {string} base64 - The base64 string to be decoded. Can optionally contain a data URI header, which will be stripped out prior to decoding.\r\n * \r\n * @return {ArrayBuffer} An ArrayBuffer decoded from the base64 data.\r\n */\r\nvar Base64ToArrayBuffer = function (base64)\r\n{\r\n    //  Is it a data uri? if so, strip the header away\r\n    base64 = base64.substr(base64.indexOf(',') + 1);\r\n\r\n    var len = base64.length;\r\n    var bufferLength = len * 0.75;\r\n    var p = 0;\r\n    var encoded1;\r\n    var encoded2;\r\n    var encoded3;\r\n    var encoded4;\r\n\r\n    if (base64[len - 1] === '=')\r\n    {\r\n        bufferLength--;\r\n\r\n        if (base64[len - 2] === '=')\r\n        {\r\n            bufferLength--;\r\n        }\r\n    }\r\n\r\n    var arrayBuffer = new ArrayBuffer(bufferLength);\r\n    var bytes = new Uint8Array(arrayBuffer);\r\n\r\n    for (var i = 0; i < len; i += 4)\r\n    {\r\n        encoded1 = lookup[base64.charCodeAt(i)];\r\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\r\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\r\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\r\n\r\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\r\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\r\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\r\n    }\r\n\r\n    return arrayBuffer;\r\n};\r\n\r\nmodule.exports = Base64ToArrayBuffer;\r\n"]},"metadata":{},"sourceType":"script"}