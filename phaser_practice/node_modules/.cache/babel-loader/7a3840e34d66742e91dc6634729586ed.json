{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar HTML5AudioFile = require('./HTML5AudioFile');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\n\n\nvar AudioFile = new Class({\n  Extends: File,\n  initialize: //  URL is an object created by AudioFile.findAudioURL\n  function AudioFile(loader, key, urlConfig, xhrSettings, audioContext) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      audioContext = GetFastValue(config, 'context', audioContext);\n    }\n\n    var fileConfig = {\n      type: 'audio',\n      cache: loader.cacheManager.audio,\n      extension: urlConfig.type,\n      responseType: 'arraybuffer',\n      key: key,\n      url: urlConfig.url,\n      xhrSettings: xhrSettings,\n      config: {\n        context: audioContext\n      }\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.AudioFile#onProcess\r\n   * @since 3.0.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n\n    var _this = this; // interesting read https://github.com/WebAudio/web-audio-api/issues/1305\n\n\n    this.config.context.decodeAudioData(this.xhrLoader.response, function (audioBuffer) {\n      _this.data = audioBuffer;\n\n      _this.onProcessComplete();\n    }, function (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error decoding audio: ' + this.key + ' - ', e ? e.message : null);\n\n      _this.onProcessError();\n    });\n    this.config.context = null;\n  }\n});\n\nAudioFile.create = function (loader, key, urls, config, xhrSettings) {\n  var game = loader.systems.game;\n  var audioConfig = game.config.audio;\n  var deviceAudio = game.device.audio; //  url may be inside key, which may be an object\n\n  if (IsPlainObject(key)) {\n    urls = GetFastValue(key, 'url', []);\n    config = GetFastValue(key, 'config', {});\n  }\n\n  var urlConfig = AudioFile.getAudioURL(game, urls);\n\n  if (!urlConfig) {\n    return null;\n  } // https://developers.google.com/web/updates/2012/02/HTML5-audio-and-the-Web-Audio-API-are-BFFs\n  // var stream = GetFastValue(config, 'stream', false);\n\n\n  if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio)) {\n    return new AudioFile(loader, key, urlConfig, xhrSettings, game.sound.context);\n  } else {\n    return new HTML5AudioFile(loader, key, urlConfig, config);\n  }\n};\n\nAudioFile.getAudioURL = function (game, urls) {\n  if (!Array.isArray(urls)) {\n    urls = [urls];\n  }\n\n  for (var i = 0; i < urls.length; i++) {\n    var url = GetFastValue(urls[i], 'url', urls[i]);\n\n    if (url.indexOf('blob:') === 0 || url.indexOf('data:') === 0) {\n      return url;\n    }\n\n    var audioType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\n    audioType = GetFastValue(urls[i], 'type', audioType ? audioType[1] : '').toLowerCase();\n\n    if (game.device.audio[audioType]) {\n      return {\n        url: url,\n        type: audioType\n      };\n    }\n  }\n\n  return null;\n};\n/**\r\n * Adds an Audio or HTML5Audio file, or array of audio files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audio('title', [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audio({\r\n *     key: 'title',\r\n *     url: [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.AudioFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Audio File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audio\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig|Phaser.Types.Loader.FileTypes.AudioFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the audio files from.\r\n * @param {any} [config] - An object containing an `instances` property for HTML5Audio. Defaults to 1.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\n\nFileTypesManager.register('audio', function (key, urls, config, xhrSettings) {\n  var game = this.systems.game;\n  var audioConfig = game.config.audio;\n  var deviceAudio = game.device.audio;\n\n  if (audioConfig && audioConfig.noAudio || !deviceAudio.webAudio && !deviceAudio.audioData) {\n    //  Sounds are disabled, so skip loading audio\n    return this;\n  }\n\n  var audioFile;\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      audioFile = AudioFile.create(this, key[i]);\n\n      if (audioFile) {\n        this.addFile(audioFile);\n      }\n    }\n  } else {\n    audioFile = AudioFile.create(this, key, urls, config, xhrSettings);\n\n    if (audioFile) {\n      this.addFile(audioFile);\n    }\n  }\n\n  return this;\n});\nmodule.exports = AudioFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/AudioFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","HTML5AudioFile","IsPlainObject","AudioFile","Extends","initialize","loader","key","urlConfig","xhrSettings","audioContext","config","fileConfig","type","cache","cacheManager","audio","extension","responseType","url","context","call","onProcess","state","FILE_PROCESSING","_this","decodeAudioData","xhrLoader","response","audioBuffer","data","onProcessComplete","e","console","error","message","onProcessError","create","urls","game","systems","audioConfig","deviceAudio","device","getAudioURL","webAudio","disableWebAudio","sound","Array","isArray","i","length","indexOf","audioType","match","toLowerCase","register","noAudio","audioData","audioFile","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar HTML5AudioFile = require('./HTML5AudioFile');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {any} [urlConfig] - The absolute or relative URL to load this file from in a config object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {AudioContext} [audioContext] - The AudioContext this file will use to process itself.\r\n */\r\nvar AudioFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    //  URL is an object created by AudioFile.findAudioURL\r\n    function AudioFile (loader, key, urlConfig, xhrSettings, audioContext)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            audioContext = GetFastValue(config, 'context', audioContext);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'audio',\r\n            cache: loader.cacheManager.audio,\r\n            extension: urlConfig.type,\r\n            responseType: 'arraybuffer',\r\n            key: key,\r\n            url: urlConfig.url,\r\n            xhrSettings: xhrSettings,\r\n            config: { context: audioContext }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.AudioFile#onProcess\r\n     * @since 3.0.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        var _this = this;\r\n\r\n        // interesting read https://github.com/WebAudio/web-audio-api/issues/1305\r\n        this.config.context.decodeAudioData(this.xhrLoader.response,\r\n            function (audioBuffer)\r\n            {\r\n                _this.data = audioBuffer;\r\n\r\n                _this.onProcessComplete();\r\n            },\r\n            function (e)\r\n            {\r\n                // eslint-disable-next-line no-console\r\n                console.error('Error decoding audio: ' + this.key + ' - ', e ? e.message : null);\r\n\r\n                _this.onProcessError();\r\n            }\r\n        );\r\n\r\n        this.config.context = null;\r\n    }\r\n\r\n});\r\n\r\nAudioFile.create = function (loader, key, urls, config, xhrSettings)\r\n{\r\n    var game = loader.systems.game;\r\n    var audioConfig = game.config.audio;\r\n    var deviceAudio = game.device.audio;\r\n\r\n    //  url may be inside key, which may be an object\r\n    if (IsPlainObject(key))\r\n    {\r\n        urls = GetFastValue(key, 'url', []);\r\n        config = GetFastValue(key, 'config', {});\r\n    }\r\n\r\n    var urlConfig = AudioFile.getAudioURL(game, urls);\r\n\r\n    if (!urlConfig)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    // https://developers.google.com/web/updates/2012/02/HTML5-audio-and-the-Web-Audio-API-are-BFFs\r\n    // var stream = GetFastValue(config, 'stream', false);\r\n\r\n    if (deviceAudio.webAudio && !(audioConfig && audioConfig.disableWebAudio))\r\n    {\r\n        return new AudioFile(loader, key, urlConfig, xhrSettings, game.sound.context);\r\n    }\r\n    else\r\n    {\r\n        return new HTML5AudioFile(loader, key, urlConfig, config);\r\n    }\r\n};\r\n\r\nAudioFile.getAudioURL = function (game, urls)\r\n{\r\n    if (!Array.isArray(urls))\r\n    {\r\n        urls = [ urls ];\r\n    }\r\n\r\n    for (var i = 0; i < urls.length; i++)\r\n    {\r\n        var url = GetFastValue(urls[i], 'url', urls[i]);\r\n\r\n        if (url.indexOf('blob:') === 0 || url.indexOf('data:') === 0)\r\n        {\r\n            return url;\r\n        }\r\n\r\n        var audioType = url.match(/\\.([a-zA-Z0-9]+)($|\\?)/);\r\n\r\n        audioType = GetFastValue(urls[i], 'type', (audioType) ? audioType[1] : '').toLowerCase();\r\n\r\n        if (game.device.audio[audioType])\r\n        {\r\n            return {\r\n                url: url,\r\n                type: audioType\r\n            };\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Adds an Audio or HTML5Audio file, or array of audio files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.audio('title', [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]);\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Audio Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Audio Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Audio Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.audio({\r\n *     key: 'title',\r\n *     url: [ 'music/Title.ogg', 'music/Title.mp3', 'music/Title.m4a' ]\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.AudioFileConfig` for more details.\r\n *\r\n * The URLs can be relative or absolute. If the URLs are relative the `Loader.baseURL` and `Loader.path` values will be prepended to them.\r\n *\r\n * Due to different browsers supporting different audio file types you should usually provide your audio files in a variety of formats.\r\n * ogg, mp3 and m4a are the most common. If you provide an array of URLs then the Loader will determine which _one_ file to load based on\r\n * browser support.\r\n *\r\n * If audio has been disabled in your game, either via the game config, or lack of support from the device, then no audio will be loaded.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Audio File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#audio\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig|Phaser.Types.Loader.FileTypes.AudioFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|string[])} [urls] - The absolute or relative URL to load the audio files from.\r\n * @param {any} [config] - An object containing an `instances` property for HTML5Audio. Defaults to 1.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('audio', function (key, urls, config, xhrSettings)\r\n{\r\n    var game = this.systems.game;\r\n    var audioConfig = game.config.audio;\r\n    var deviceAudio = game.device.audio;\r\n\r\n    if ((audioConfig && audioConfig.noAudio) || (!deviceAudio.webAudio && !deviceAudio.audioData))\r\n    {\r\n        //  Sounds are disabled, so skip loading audio\r\n        return this;\r\n    }\r\n\r\n    var audioFile;\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            audioFile = AudioFile.create(this, key[i]);\r\n\r\n            if (audioFile)\r\n            {\r\n                this.addFile(audioFile);\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        audioFile = AudioFile.create(this, key, urls, config, xhrSettings);\r\n\r\n        if (audioFile)\r\n        {\r\n            this.addFile(audioFile);\r\n        }\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = AudioFile;\r\n"]},"metadata":{},"sourceType":"script"}