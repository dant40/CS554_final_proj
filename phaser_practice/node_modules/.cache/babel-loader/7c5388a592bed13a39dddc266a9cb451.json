{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../math/Clamp'); //  bitmask flag for GameObject.renderMask\n\n\nvar _FLAG = 2; // 0010\n\n/**\r\n * Provides methods used for setting the alpha properties of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.Alpha\r\n * @since 3.0.0\r\n */\n\nvar Alpha = {\n  /**\r\n   * Private internal value. Holds the global alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#_alpha\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alpha: 1,\n\n  /**\r\n   * Private internal value. Holds the top-left alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#_alphaTL\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alphaTL: 1,\n\n  /**\r\n   * Private internal value. Holds the top-right alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#_alphaTR\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alphaTR: 1,\n\n  /**\r\n   * Private internal value. Holds the bottom-left alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#_alphaBL\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alphaBL: 1,\n\n  /**\r\n   * Private internal value. Holds the bottom-right alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#_alphaBR\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alphaBR: 1,\n\n  /**\r\n   * Clears all alpha values associated with this Game Object.\r\n   *\r\n   * Immediately sets the alpha levels back to 1 (fully opaque).\r\n   *\r\n   * @method Phaser.GameObjects.Components.Alpha#clearAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  clearAlpha: function () {\n    return this.setAlpha(1);\n  },\n\n  /**\r\n   * Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\r\n   * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n   *\r\n   * If your game is running under WebGL you can optionally specify four different alpha values, each of which\r\n   * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Alpha#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [topLeft=1] - The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object.\r\n   * @param {number} [topRight] - The alpha value used for the top-right of the Game Object. WebGL only.\r\n   * @param {number} [bottomLeft] - The alpha value used for the bottom-left of the Game Object. WebGL only.\r\n   * @param {number} [bottomRight] - The alpha value used for the bottom-right of the Game Object. WebGL only.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setAlpha: function (topLeft, topRight, bottomLeft, bottomRight) {\n    if (topLeft === undefined) {\n      topLeft = 1;\n    } //  Treat as if there is only one alpha value for the whole Game Object\n\n\n    if (topRight === undefined) {\n      this.alpha = topLeft;\n    } else {\n      this._alphaTL = Clamp(topLeft, 0, 1);\n      this._alphaTR = Clamp(topRight, 0, 1);\n      this._alphaBL = Clamp(bottomLeft, 0, 1);\n      this._alphaBR = Clamp(bottomRight, 0, 1);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * The alpha value of the Game Object.\r\n   *\r\n   * This is a global value, impacting the entire Game Object, not just a region of it.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function () {\n      return this._alpha;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alpha = v;\n      this._alphaTL = v;\n      this._alphaTR = v;\n      this._alphaBL = v;\n      this._alphaBR = v;\n\n      if (v === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The alpha value starting from the top-left of the Game Object.\r\n   * This value is interpolated from the corner to the center of the Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#alphaTopLeft\r\n   * @type {number}\r\n   * @webglOnly\r\n   * @since 3.0.0\r\n   */\n  alphaTopLeft: {\n    get: function () {\n      return this._alphaTL;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alphaTL = v;\n\n      if (v !== 0) {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The alpha value starting from the top-right of the Game Object.\r\n   * This value is interpolated from the corner to the center of the Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#alphaTopRight\r\n   * @type {number}\r\n   * @webglOnly\r\n   * @since 3.0.0\r\n   */\n  alphaTopRight: {\n    get: function () {\n      return this._alphaTR;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alphaTR = v;\n\n      if (v !== 0) {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The alpha value starting from the bottom-left of the Game Object.\r\n   * This value is interpolated from the corner to the center of the Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#alphaBottomLeft\r\n   * @type {number}\r\n   * @webglOnly\r\n   * @since 3.0.0\r\n   */\n  alphaBottomLeft: {\n    get: function () {\n      return this._alphaBL;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alphaBL = v;\n\n      if (v !== 0) {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  },\n\n  /**\r\n   * The alpha value starting from the bottom-right of the Game Object.\r\n   * This value is interpolated from the corner to the center of the Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Alpha#alphaBottomRight\r\n   * @type {number}\r\n   * @webglOnly\r\n   * @since 3.0.0\r\n   */\n  alphaBottomRight: {\n    get: function () {\n      return this._alphaBR;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alphaBR = v;\n\n      if (v !== 0) {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  }\n};\nmodule.exports = Alpha;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/Alpha.js"],"names":["Clamp","require","_FLAG","Alpha","_alpha","_alphaTL","_alphaTR","_alphaBL","_alphaBR","clearAlpha","setAlpha","topLeft","topRight","bottomLeft","bottomRight","undefined","alpha","get","set","value","v","renderFlags","alphaTopLeft","alphaTopRight","alphaBottomLeft","alphaBottomRight","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../math/Clamp');\r\n\r\n//  bitmask flag for GameObject.renderMask\r\nvar _FLAG = 2; // 0010\r\n\r\n/**\r\n * Provides methods used for setting the alpha properties of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.Alpha\r\n * @since 3.0.0\r\n */\r\n\r\nvar Alpha = {\r\n\r\n    /**\r\n     * Private internal value. Holds the global alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#_alpha\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alpha: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the top-left alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#_alphaTL\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alphaTL: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the top-right alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#_alphaTR\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alphaTR: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the bottom-left alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#_alphaBL\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alphaBL: 1,\r\n\r\n    /**\r\n     * Private internal value. Holds the bottom-right alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#_alphaBR\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alphaBR: 1,\r\n\r\n    /**\r\n     * Clears all alpha values associated with this Game Object.\r\n     *\r\n     * Immediately sets the alpha levels back to 1 (fully opaque).\r\n     *\r\n     * @method Phaser.GameObjects.Components.Alpha#clearAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    clearAlpha: function ()\r\n    {\r\n        return this.setAlpha(1);\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     *\r\n     * If your game is running under WebGL you can optionally specify four different alpha values, each of which\r\n     * correspond to the four corners of the Game Object. Under Canvas only the `topLeft` value given is used.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Alpha#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [topLeft=1] - The alpha value used for the top-left of the Game Object. If this is the only value given it's applied across the whole Game Object.\r\n     * @param {number} [topRight] - The alpha value used for the top-right of the Game Object. WebGL only.\r\n     * @param {number} [bottomLeft] - The alpha value used for the bottom-left of the Game Object. WebGL only.\r\n     * @param {number} [bottomRight] - The alpha value used for the bottom-right of the Game Object. WebGL only.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setAlpha: function (topLeft, topRight, bottomLeft, bottomRight)\r\n    {\r\n        if (topLeft === undefined) { topLeft = 1; }\r\n\r\n        //  Treat as if there is only one alpha value for the whole Game Object\r\n        if (topRight === undefined)\r\n        {\r\n            this.alpha = topLeft;\r\n        }\r\n        else\r\n        {\r\n            this._alphaTL = Clamp(topLeft, 0, 1);\r\n            this._alphaTR = Clamp(topRight, 0, 1);\r\n            this._alphaBL = Clamp(bottomLeft, 0, 1);\r\n            this._alphaBR = Clamp(bottomRight, 0, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The alpha value of the Game Object.\r\n     *\r\n     * This is a global value, impacting the entire Game Object, not just a region of it.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alpha;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alpha = v;\r\n            this._alphaTL = v;\r\n            this._alphaTR = v;\r\n            this._alphaBL = v;\r\n            this._alphaBR = v;\r\n\r\n            if (v === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value starting from the top-left of the Game Object.\r\n     * This value is interpolated from the corner to the center of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#alphaTopLeft\r\n     * @type {number}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\r\n    alphaTopLeft: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alphaTL;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alphaTL = v;\r\n\r\n            if (v !== 0)\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value starting from the top-right of the Game Object.\r\n     * This value is interpolated from the corner to the center of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#alphaTopRight\r\n     * @type {number}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\r\n    alphaTopRight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alphaTR;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alphaTR = v;\r\n\r\n            if (v !== 0)\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value starting from the bottom-left of the Game Object.\r\n     * This value is interpolated from the corner to the center of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#alphaBottomLeft\r\n     * @type {number}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\r\n    alphaBottomLeft: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alphaBL;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alphaBL = v;\r\n\r\n            if (v !== 0)\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value starting from the bottom-right of the Game Object.\r\n     * This value is interpolated from the corner to the center of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Alpha#alphaBottomRight\r\n     * @type {number}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\r\n    alphaBottomRight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alphaBR;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alphaBR = v;\r\n\r\n            if (v !== 0)\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Alpha;\r\n"]},"metadata":{},"sourceType":"script"}