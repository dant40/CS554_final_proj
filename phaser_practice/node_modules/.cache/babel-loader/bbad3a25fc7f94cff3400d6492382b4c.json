{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n * layer's position, scale and scroll.\r\n *\r\n * @function Phaser.Tilemaps.Components.WorldToTileX\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {number} The X location in tile units.\r\n */\nvar WorldToTileX = function (worldX, snapToFloor, camera, layer) {\n  if (snapToFloor === undefined) {\n    snapToFloor = true;\n  }\n\n  var tileWidth = layer.baseTileWidth;\n  var tilemapLayer = layer.tilemapLayer;\n\n  if (tilemapLayer) {\n    if (camera === undefined) {\n      camera = tilemapLayer.scene.cameras.main;\n    } // Find the world position relative to the static or dynamic layer's top left origin,\n    // factoring in the camera's horizontal scroll\n\n\n    worldX = worldX - (tilemapLayer.x + camera.scrollX * (1 - tilemapLayer.scrollFactorX));\n    tileWidth *= tilemapLayer.scaleX;\n  }\n\n  return snapToFloor ? Math.floor(worldX / tileWidth) : worldX / tileWidth;\n};\n\nmodule.exports = WorldToTileX;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/WorldToTileX.js"],"names":["WorldToTileX","worldX","snapToFloor","camera","layer","undefined","tileWidth","baseTileWidth","tilemapLayer","scene","cameras","main","x","scrollX","scrollFactorX","scaleX","Math","floor","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;AAeA,IAAIA,YAAY,GAAG,UAAUC,MAAV,EAAkBC,WAAlB,EAA+BC,MAA/B,EAAuCC,KAAvC,EACnB;AACI,MAAIF,WAAW,KAAKG,SAApB,EAA+B;AAAEH,IAAAA,WAAW,GAAG,IAAd;AAAqB;;AAEtD,MAAII,SAAS,GAAGF,KAAK,CAACG,aAAtB;AACA,MAAIC,YAAY,GAAGJ,KAAK,CAACI,YAAzB;;AAEA,MAAIA,YAAJ,EACA;AACI,QAAIL,MAAM,KAAKE,SAAf,EAA0B;AAAEF,MAAAA,MAAM,GAAGK,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2BC,IAApC;AAA2C,KAD3E,CAGI;AACA;;;AACAV,IAAAA,MAAM,GAAGA,MAAM,IAAIO,YAAY,CAACI,CAAb,GAAiBT,MAAM,CAACU,OAAP,IAAkB,IAAIL,YAAY,CAACM,aAAnC,CAArB,CAAf;AAEAR,IAAAA,SAAS,IAAIE,YAAY,CAACO,MAA1B;AACH;;AAED,SAAOb,WAAW,GACZc,IAAI,CAACC,KAAL,CAAWhB,MAAM,GAAGK,SAApB,CADY,GAEZL,MAAM,GAAGK,SAFf;AAGH,CArBD;;AAuBAY,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n * layer's position, scale and scroll.\r\n *\r\n * @function Phaser.Tilemaps.Components.WorldToTileX\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {number} The X location in tile units.\r\n */\r\nvar WorldToTileX = function (worldX, snapToFloor, camera, layer)\r\n{\r\n    if (snapToFloor === undefined) { snapToFloor = true; }\r\n\r\n    var tileWidth = layer.baseTileWidth;\r\n    var tilemapLayer = layer.tilemapLayer;\r\n\r\n    if (tilemapLayer)\r\n    {\r\n        if (camera === undefined) { camera = tilemapLayer.scene.cameras.main; }\r\n\r\n        // Find the world position relative to the static or dynamic layer's top left origin,\r\n        // factoring in the camera's horizontal scroll\r\n        worldX = worldX - (tilemapLayer.x + camera.scrollX * (1 - tilemapLayer.scrollFactorX));\r\n\r\n        tileWidth *= tilemapLayer.scaleX;\r\n    }\r\n\r\n    return snapToFloor\r\n        ? Math.floor(worldX / tileWidth)\r\n        : worldX / tileWidth;\r\n};\r\n\r\nmodule.exports = WorldToTileX;\r\n"]},"metadata":{},"sourceType":"script"}