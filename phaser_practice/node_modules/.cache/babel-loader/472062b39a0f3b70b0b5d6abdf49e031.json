{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar Shader = require('../../display/shader/BaseShader');\n/**\r\n * @classdesc\r\n * A single GLSL File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#glsl method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#glsl.\r\n *\r\n * @class GLSLFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar GLSLFile = new Class({\n  Extends: File,\n  initialize: function GLSLFile(loader, key, url, shaderType, xhrSettings) {\n    var extension = 'glsl';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      shaderType = GetFastValue(config, 'shaderType', 'fragment');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n    } else if (shaderType === undefined) {\n      shaderType = 'fragment';\n    }\n\n    var fileConfig = {\n      type: 'glsl',\n      cache: loader.cacheManager.shader,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      config: {\n        shaderType: shaderType\n      },\n      xhrSettings: xhrSettings\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n    this.data = this.xhrLoader.responseText;\n    this.onProcessComplete();\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#addToCache\r\n   * @since 3.17.0\r\n   */\n  addToCache: function () {\n    var data = this.data.split('\\n'); //  Check to see if this is a shader bundle, or raw glsl file.\n\n    var block = this.extractBlock(data, 0);\n\n    if (block) {\n      while (block) {\n        var key = this.getShaderName(block.header);\n        var shaderType = this.getShaderType(block.header);\n        var uniforms = this.getShaderUniforms(block.header);\n        var shaderSrc = block.shader;\n\n        if (this.cache.has(key)) {\n          var shader = this.cache.get(key);\n\n          if (shaderType === 'fragment') {\n            shader.fragmentSrc = shaderSrc;\n          } else {\n            shader.vertexSrc = shaderSrc;\n          }\n\n          if (!shader.uniforms) {\n            shader.uniforms = uniforms;\n          }\n        } else if (shaderType === 'fragment') {\n          this.cache.add(key, new Shader(key, shaderSrc, '', uniforms));\n        } else {\n          this.cache.add(key, new Shader(key, '', shaderSrc, uniforms));\n        }\n\n        block = this.extractBlock(data, block.offset);\n      }\n    } else if (this.config.shaderType === 'fragment') {\n      //  Single shader\n      this.cache.add(this.key, new Shader(this.key, this.data));\n    } else {\n      this.cache.add(this.key, new Shader(this.key, '', this.data));\n    }\n\n    this.pendingDestroy();\n  },\n\n  /**\r\n   * Returns the name of the shader from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderName\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {string} The shader name.\r\n   */\n  getShaderName: function (headerSource) {\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 5) === 'name:') {\n        return line.substring(5).trim();\n      }\n    }\n\n    return this.key;\n  },\n\n  /**\r\n   * Returns the type of the shader from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderType\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {string} The shader type. Either 'fragment' or 'vertex'.\r\n   */\n  getShaderType: function (headerSource) {\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 5) === 'type:') {\n        return line.substring(5).trim();\n      }\n    }\n\n    return this.config.shaderType;\n  },\n\n  /**\r\n   * Returns the shader uniforms from the header block.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#getShaderUniforms\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} headerSource - The header data.\r\n   * \r\n   * @return {any} The shader uniforms object.\r\n   */\n  getShaderUniforms: function (headerSource) {\n    var uniforms = {};\n\n    for (var i = 0; i < headerSource.length; i++) {\n      var line = headerSource[i].trim();\n\n      if (line.substring(0, 8) === 'uniform.') {\n        var pos = line.indexOf(':');\n\n        if (pos) {\n          var key = line.substring(8, pos);\n\n          try {\n            uniforms[key] = JSON.parse(line.substring(pos + 1));\n          } catch (e) {\n            console.warn('Invalid uniform JSON: ' + key);\n          }\n        }\n      }\n    }\n\n    return uniforms;\n  },\n\n  /**\r\n   * Processes the shader file and extracts the relevant data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.GLSLFile#extractBlock\r\n   * @private\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string[]} data - The array of shader data to process.\r\n   * @param {integer} offset - The offset to start processing from.\r\n   * \r\n   * @return {any} The processed shader block, or null.\r\n   */\n  extractBlock: function (data, offset) {\n    var headerStart = -1;\n    var headerEnd = -1;\n    var blockEnd = -1;\n    var headerOpen = false;\n    var captureSource = false;\n    var headerSource = [];\n    var shaderSource = [];\n\n    for (var i = offset; i < data.length; i++) {\n      var line = data[i].trim();\n\n      if (line === '---') {\n        if (headerStart === -1) {\n          headerStart = i;\n          headerOpen = true;\n        } else if (headerOpen) {\n          headerEnd = i;\n          headerOpen = false;\n          captureSource = true;\n        } else {\n          //  We've hit another --- delimiter, break out\n          captureSource = false;\n          break;\n        }\n      } else if (headerOpen) {\n        headerSource.push(line);\n      } else if (captureSource) {\n        shaderSource.push(line);\n        blockEnd = i;\n      }\n    }\n\n    if (!headerOpen && headerEnd !== -1) {\n      return {\n        header: headerSource,\n        shader: shaderSource.join('\\n'),\n        offset: blockEnd\n      };\n    } else {\n      return null;\n    }\n  }\n});\n/**\r\n * Adds a GLSL file, or array of GLSL files, to the current load queue.\r\n * In Phaser 3 GLSL files are just plain Text files at the current moment in time.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Shader Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Shader Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Shader Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.glsl({\r\n *     key: 'plasma',\r\n *     shaderType: 'fragment',\r\n *     url: 'shaders/Plasma.glsl'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.GLSLFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n * \r\n * ```javascript\r\n * this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * // and later in your game ...\r\n * var data = this.cache.shader.get('plasma');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `FX.` and the key was `Plasma` the final key will be `FX.Plasma` and\r\n * this is what you would use to retrieve the text from the Shader Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"plasma\"\r\n * and no URL is given then the Loader will set the URL to be \"plasma.glsl\". It will always add `.glsl` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the GLSL File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#glsl\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig|Phaser.Types.Loader.FileTypes.GLSLFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.glsl`, i.e. if `key` was \"alien\" then the URL will be \"alien.glsl\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('glsl', function (key, url, shaderType, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new GLSLFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new GLSLFile(this, key, url, shaderType, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = GLSLFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/GLSLFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","Shader","GLSLFile","Extends","initialize","loader","key","url","shaderType","xhrSettings","extension","config","undefined","fileConfig","type","cache","cacheManager","shader","responseType","call","onProcess","state","FILE_PROCESSING","data","xhrLoader","responseText","onProcessComplete","addToCache","split","block","extractBlock","getShaderName","header","getShaderType","uniforms","getShaderUniforms","shaderSrc","has","get","fragmentSrc","vertexSrc","add","offset","pendingDestroy","headerSource","i","length","line","trim","substring","pos","indexOf","JSON","parse","e","console","warn","headerStart","headerEnd","blockEnd","headerOpen","captureSource","shaderSource","push","join","register","Array","isArray","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar Shader = require('../../display/shader/BaseShader');\r\n\r\n/**\r\n * @classdesc\r\n * A single GLSL File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#glsl method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#glsl.\r\n *\r\n * @class GLSLFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.txt`, i.e. if `key` was \"alien\" then the URL will be \"alien.txt\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar GLSLFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function GLSLFile (loader, key, url, shaderType, xhrSettings)\r\n    {\r\n        var extension = 'glsl';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            shaderType = GetFastValue(config, 'shaderType', 'fragment');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n        else if (shaderType === undefined)\r\n        {\r\n            shaderType = 'fragment';\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'glsl',\r\n            cache: loader.cacheManager.shader,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            config: {\r\n                shaderType: shaderType\r\n            },\r\n            xhrSettings: xhrSettings\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = this.xhrLoader.responseText;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#addToCache\r\n     * @since 3.17.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var data = this.data.split('\\n');\r\n\r\n        //  Check to see if this is a shader bundle, or raw glsl file.\r\n        var block = this.extractBlock(data, 0);\r\n\r\n        if (block)\r\n        {\r\n            while (block)\r\n            {\r\n                var key = this.getShaderName(block.header);\r\n                var shaderType = this.getShaderType(block.header);\r\n                var uniforms = this.getShaderUniforms(block.header);\r\n                var shaderSrc = block.shader;\r\n\r\n                if (this.cache.has(key))\r\n                {\r\n                    var shader = this.cache.get(key);\r\n\r\n                    if (shaderType === 'fragment')\r\n                    {\r\n                        shader.fragmentSrc = shaderSrc;\r\n                    }\r\n                    else\r\n                    {\r\n                        shader.vertexSrc = shaderSrc;\r\n                    }\r\n\r\n                    if (!shader.uniforms)\r\n                    {\r\n                        shader.uniforms = uniforms;\r\n                    }\r\n                }\r\n                else if (shaderType === 'fragment')\r\n                {\r\n                    this.cache.add(key, new Shader(key, shaderSrc, '', uniforms));\r\n                }\r\n                else\r\n                {\r\n                    this.cache.add(key, new Shader(key, '', shaderSrc, uniforms));\r\n                }\r\n\r\n                block = this.extractBlock(data, block.offset);\r\n            }\r\n        }\r\n        else if (this.config.shaderType === 'fragment')\r\n        {\r\n            //  Single shader\r\n            this.cache.add(this.key, new Shader(this.key, this.data));\r\n        }\r\n        else\r\n        {\r\n            this.cache.add(this.key, new Shader(this.key, '', this.data));\r\n        }\r\n\r\n        this.pendingDestroy();\r\n    },\r\n\r\n    /**\r\n     * Returns the name of the shader from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderName\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {string} The shader name.\r\n     */\r\n    getShaderName: function (headerSource)\r\n    {\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 5) === 'name:')\r\n            {\r\n                return line.substring(5).trim();\r\n            }\r\n        }\r\n\r\n        return this.key;\r\n    },\r\n\r\n    /**\r\n     * Returns the type of the shader from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderType\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {string} The shader type. Either 'fragment' or 'vertex'.\r\n     */\r\n    getShaderType: function (headerSource)\r\n    {\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 5) === 'type:')\r\n            {\r\n                return line.substring(5).trim();\r\n            }\r\n        }\r\n\r\n        return this.config.shaderType;\r\n    },\r\n\r\n    /**\r\n     * Returns the shader uniforms from the header block.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#getShaderUniforms\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} headerSource - The header data.\r\n     * \r\n     * @return {any} The shader uniforms object.\r\n     */\r\n    getShaderUniforms: function (headerSource)\r\n    {\r\n        var uniforms = {};\r\n\r\n        for (var i = 0; i < headerSource.length; i++)\r\n        {\r\n            var line = headerSource[i].trim();\r\n\r\n            if (line.substring(0, 8) === 'uniform.')\r\n            {\r\n                var pos = line.indexOf(':');\r\n\r\n                if (pos)\r\n                {\r\n                    var key = line.substring(8, pos);\r\n\r\n                    try\r\n                    {\r\n                        uniforms[key] = JSON.parse(line.substring(pos + 1));\r\n                    }\r\n                    catch (e)\r\n                    {\r\n                        console.warn('Invalid uniform JSON: ' + key);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return uniforms;\r\n    },\r\n\r\n    /**\r\n     * Processes the shader file and extracts the relevant data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.GLSLFile#extractBlock\r\n     * @private\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string[]} data - The array of shader data to process.\r\n     * @param {integer} offset - The offset to start processing from.\r\n     * \r\n     * @return {any} The processed shader block, or null.\r\n     */\r\n    extractBlock: function (data, offset)\r\n    {\r\n        var headerStart = -1;\r\n        var headerEnd = -1;\r\n        var blockEnd = -1;\r\n        var headerOpen = false;\r\n        var captureSource = false;\r\n        var headerSource = [];\r\n        var shaderSource = [];\r\n\r\n        for (var i = offset; i < data.length; i++)\r\n        {\r\n            var line = data[i].trim();\r\n\r\n            if (line === '---')\r\n            {\r\n                if (headerStart === -1)\r\n                {\r\n                    headerStart = i;\r\n                    headerOpen = true;\r\n                }\r\n                else if (headerOpen)\r\n                {\r\n                    headerEnd = i;\r\n                    headerOpen = false;\r\n                    captureSource = true;\r\n                }\r\n                else\r\n                {\r\n                    //  We've hit another --- delimiter, break out\r\n                    captureSource = false;\r\n                    break;\r\n                }\r\n            }\r\n            else if (headerOpen)\r\n            {\r\n                headerSource.push(line);\r\n            }\r\n            else if (captureSource)\r\n            {\r\n                shaderSource.push(line);\r\n                blockEnd = i;\r\n            }\r\n        }\r\n\r\n        if (!headerOpen && headerEnd !== -1)\r\n        {\r\n            return { header: headerSource, shader: shaderSource.join('\\n'), offset: blockEnd };\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a GLSL file, or array of GLSL files, to the current load queue.\r\n * In Phaser 3 GLSL files are just plain Text files at the current moment in time.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Shader Cache upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Shader Cache.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Shader Cache first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.glsl({\r\n *     key: 'plasma',\r\n *     shaderType: 'fragment',\r\n *     url: 'shaders/Plasma.glsl'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.GLSLFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can access it from its Cache using its key:\r\n * \r\n * ```javascript\r\n * this.load.glsl('plasma', 'shaders/Plasma.glsl');\r\n * // and later in your game ...\r\n * var data = this.cache.shader.get('plasma');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `FX.` and the key was `Plasma` the final key will be `FX.Plasma` and\r\n * this is what you would use to retrieve the text from the Shader Cache.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"plasma\"\r\n * and no URL is given then the Loader will set the URL to be \"plasma.glsl\". It will always add `.glsl` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the GLSL File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#glsl\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.GLSLFileConfig|Phaser.Types.Loader.FileTypes.GLSLFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.glsl`, i.e. if `key` was \"alien\" then the URL will be \"alien.glsl\".\r\n * @param {string} [shaderType='fragment'] - The type of shader. Either `fragment` for a fragment shader, or `vertex` for a vertex shader. This is ignored if you load a shader bundle.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('glsl', function (key, url, shaderType, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new GLSLFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new GLSLFile(this, key, url, shaderType, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = GLSLFile;\r\n"]},"metadata":{},"sourceType":"script"}