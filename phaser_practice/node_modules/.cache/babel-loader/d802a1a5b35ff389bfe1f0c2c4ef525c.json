{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A BaseShader is a small resource class that contains the data required for a WebGL Shader to be created.\r\n * \r\n * It contains the raw source code to the fragment and vertex shader, as well as an object that defines\r\n * the uniforms the shader requires, if any.\r\n * \r\n * BaseShaders are stored in the Shader Cache, available in a Scene via `this.cache.shaders` and are referenced\r\n * by a unique key-based string. Retrieve them via `this.cache.shaders.get(key)`.\r\n * \r\n * BaseShaders are created automatically by the GLSL File Loader when loading an external shader resource.\r\n * They can also be created at runtime, allowing you to use dynamically generated shader source code.\r\n * \r\n * Default fragment and vertex source is used if not provided in the constructor, setting-up a basic shader,\r\n * suitable for debug rendering.\r\n *\r\n * @class BaseShader\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @param {string} key - The key of this shader. Must be unique within the shader cache.\r\n * @param {string} [fragmentSrc] - The fragment source for the shader.\r\n * @param {string} [vertexSrc] - The vertex source for the shader.\r\n * @param {any} [uniforms] - Optional object defining the uniforms the shader uses.\r\n */\n\n\nvar BaseShader = new Class({\n  initialize: function BaseShader(key, fragmentSrc, vertexSrc, uniforms) {\n    if (!fragmentSrc || fragmentSrc === '') {\n      fragmentSrc = ['precision mediump float;', 'uniform vec2 resolution;', 'varying vec2 fragCoord;', 'void main () {', '    vec2 uv = fragCoord / resolution.xy;', '    gl_FragColor = vec4(uv.xyx, 1.0);', '}'].join('\\n');\n    }\n\n    if (!vertexSrc || vertexSrc === '') {\n      vertexSrc = ['precision mediump float;', 'uniform mat4 uProjectionMatrix;', 'uniform mat4 uViewMatrix;', 'uniform vec2 uResolution;', 'attribute vec2 inPosition;', 'varying vec2 fragCoord;', 'void main () {', 'gl_Position = uProjectionMatrix * uViewMatrix * vec4(inPosition, 1.0, 1.0);', 'fragCoord = vec2(inPosition.x, uResolution.y - inPosition.y);', '}'].join('\\n');\n    }\n\n    if (uniforms === undefined) {\n      uniforms = null;\n    }\n    /**\r\n     * The key of this shader, unique within the shader cache of this Phaser game instance.\r\n     *\r\n     * @name Phaser.Display.BaseShader#key\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n\n    this.key = key;\n    /**\r\n     * The source code, as a string, of the fragment shader being used.\r\n     *\r\n     * @name Phaser.Display.BaseShader#fragmentSrc\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n    this.fragmentSrc = fragmentSrc;\n    /**\r\n     * The source code, as a string, of the vertex shader being used.\r\n     *\r\n     * @name Phaser.Display.BaseShader#vertexSrc\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n    this.vertexSrc = vertexSrc;\n    /**\r\n     * The default uniforms for this shader.\r\n     *\r\n     * @name Phaser.Display.BaseShader#uniforms\r\n     * @type {?any}\r\n     * @since 3.17.0\r\n     */\n\n    this.uniforms = uniforms;\n  }\n});\nmodule.exports = BaseShader;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/shader/BaseShader.js"],"names":["Class","require","BaseShader","initialize","key","fragmentSrc","vertexSrc","uniforms","join","undefined","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAIC,UAAU,GAAG,IAAIF,KAAJ,CAAU;AAEvBG,EAAAA,UAAU,EAEV,SAASD,UAAT,CAAqBE,GAArB,EAA0BC,WAA1B,EAAuCC,SAAvC,EAAkDC,QAAlD,EACA;AACI,QAAI,CAACF,WAAD,IAAgBA,WAAW,KAAK,EAApC,EACA;AACIA,MAAAA,WAAW,GAAG,CACV,0BADU,EAGV,0BAHU,EAKV,yBALU,EAOV,gBAPU,EAQV,0CARU,EASV,uCATU,EAUV,GAVU,EAWZG,IAXY,CAWP,IAXO,CAAd;AAYH;;AAED,QAAI,CAACF,SAAD,IAAcA,SAAS,KAAK,EAAhC,EACA;AACIA,MAAAA,SAAS,GAAG,CACR,0BADQ,EAGR,iCAHQ,EAIR,2BAJQ,EAKR,2BALQ,EAOR,4BAPQ,EASR,yBATQ,EAWR,gBAXQ,EAYR,6EAZQ,EAaR,+DAbQ,EAcR,GAdQ,EAeVE,IAfU,CAeL,IAfK,CAAZ;AAgBH;;AAED,QAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAAEF,MAAAA,QAAQ,GAAG,IAAX;AAAkB;AAEhD;;;;;;;;;AAOA,SAAKH,GAAL,GAAWA,GAAX;AAEA;;;;;;;;AAOA,SAAKC,WAAL,GAAmBA,WAAnB;AAEA;;;;;;;;AAOA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA;;;;;;;;AAOA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;AA/EsB,CAAV,CAAjB;AAmFAG,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A BaseShader is a small resource class that contains the data required for a WebGL Shader to be created.\r\n * \r\n * It contains the raw source code to the fragment and vertex shader, as well as an object that defines\r\n * the uniforms the shader requires, if any.\r\n * \r\n * BaseShaders are stored in the Shader Cache, available in a Scene via `this.cache.shaders` and are referenced\r\n * by a unique key-based string. Retrieve them via `this.cache.shaders.get(key)`.\r\n * \r\n * BaseShaders are created automatically by the GLSL File Loader when loading an external shader resource.\r\n * They can also be created at runtime, allowing you to use dynamically generated shader source code.\r\n * \r\n * Default fragment and vertex source is used if not provided in the constructor, setting-up a basic shader,\r\n * suitable for debug rendering.\r\n *\r\n * @class BaseShader\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @param {string} key - The key of this shader. Must be unique within the shader cache.\r\n * @param {string} [fragmentSrc] - The fragment source for the shader.\r\n * @param {string} [vertexSrc] - The vertex source for the shader.\r\n * @param {any} [uniforms] - Optional object defining the uniforms the shader uses.\r\n */\r\nvar BaseShader = new Class({\r\n\r\n    initialize:\r\n\r\n    function BaseShader (key, fragmentSrc, vertexSrc, uniforms)\r\n    {\r\n        if (!fragmentSrc || fragmentSrc === '')\r\n        {\r\n            fragmentSrc = [\r\n                'precision mediump float;',\r\n\r\n                'uniform vec2 resolution;',\r\n\r\n                'varying vec2 fragCoord;',\r\n\r\n                'void main () {',\r\n                '    vec2 uv = fragCoord / resolution.xy;',\r\n                '    gl_FragColor = vec4(uv.xyx, 1.0);',\r\n                '}'\r\n            ].join('\\n');\r\n        }\r\n\r\n        if (!vertexSrc || vertexSrc === '')\r\n        {\r\n            vertexSrc = [\r\n                'precision mediump float;',\r\n\r\n                'uniform mat4 uProjectionMatrix;',\r\n                'uniform mat4 uViewMatrix;',\r\n                'uniform vec2 uResolution;',\r\n\r\n                'attribute vec2 inPosition;',\r\n\r\n                'varying vec2 fragCoord;',\r\n\r\n                'void main () {',\r\n                'gl_Position = uProjectionMatrix * uViewMatrix * vec4(inPosition, 1.0, 1.0);',\r\n                'fragCoord = vec2(inPosition.x, uResolution.y - inPosition.y);',\r\n                '}'\r\n            ].join('\\n');\r\n        }\r\n\r\n        if (uniforms === undefined) { uniforms = null; }\r\n\r\n        /**\r\n         * The key of this shader, unique within the shader cache of this Phaser game instance.\r\n         *\r\n         * @name Phaser.Display.BaseShader#key\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * The source code, as a string, of the fragment shader being used.\r\n         *\r\n         * @name Phaser.Display.BaseShader#fragmentSrc\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.fragmentSrc = fragmentSrc;\r\n\r\n        /**\r\n         * The source code, as a string, of the vertex shader being used.\r\n         *\r\n         * @name Phaser.Display.BaseShader#vertexSrc\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.vertexSrc = vertexSrc;\r\n\r\n        /**\r\n         * The default uniforms for this shader.\r\n         *\r\n         * @name Phaser.Display.BaseShader#uniforms\r\n         * @type {?any}\r\n         * @since 3.17.0\r\n         */\r\n        this.uniforms = uniforms;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseShader;\r\n"]},"metadata":{},"sourceType":"script"}