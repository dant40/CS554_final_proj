{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Group = require('../../gameobjects/group/Group');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * An Arcade Physics Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\r\n *\r\n * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.\r\n *\r\n * @class Group\r\n * @extends Phaser.GameObjects.Group\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n */\n\n\nvar PhysicsGroup = new Class({\n  Extends: Group,\n  initialize: function PhysicsGroup(world, scene, children, config) {\n    if (!children && !config) {\n      config = {\n        internalCreateCallback: this.createCallbackHandler,\n        internalRemoveCallback: this.removeCallbackHandler\n      };\n    } else if (IsPlainObject(children)) {\n      //  children is a plain object, so swizzle them:\n      config = children;\n      children = null;\n      config.internalCreateCallback = this.createCallbackHandler;\n      config.internalRemoveCallback = this.removeCallbackHandler;\n    } else if (Array.isArray(children) && IsPlainObject(children[0])) {\n      //  children is an array of plain objects\n      config = children[0];\n\n      var _this = this;\n\n      children.forEach(function (singleConfig) {\n        singleConfig.internalCreateCallback = _this.createCallbackHandler;\n        singleConfig.internalRemoveCallback = _this.removeCallbackHandler;\n      });\n    } else {\n      // config is not defined and children is not a plain object nor an array of plain objects\n      config = {\n        internalCreateCallback: this.createCallbackHandler,\n        internalRemoveCallback: this.removeCallbackHandler\n      };\n    }\n    /**\r\n     * The physics simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.world = world;\n    /**\r\n     * The class to create new Group members from.\r\n     *\r\n     * This should be either `Phaser.Physics.Arcade.Image`, `Phaser.Physics.Arcade.Sprite`, or a class extending one of those.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#classType\r\n     * @type {Function}\r\n     * @default ArcadeSprite\r\n     * @since 3.0.0\r\n     */\n\n    config.classType = GetFastValue(config, 'classType', ArcadeSprite);\n    /**\r\n     * The physics type of the Group's members.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#physicsType\r\n     * @type {integer}\r\n     * @default Phaser.Physics.Arcade.DYNAMIC_BODY\r\n     * @since 3.0.0\r\n     */\n\n    this.physicsType = CONST.DYNAMIC_BODY;\n    /**\r\n     * Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#defaults\r\n     * @type {Phaser.Types.Physics.Arcade.PhysicsGroupDefaults}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaults = {\n      setCollideWorldBounds: GetFastValue(config, 'collideWorldBounds', false),\n      setBoundsRectangle: GetFastValue(config, 'customBoundsRectangle', null),\n      setAccelerationX: GetFastValue(config, 'accelerationX', 0),\n      setAccelerationY: GetFastValue(config, 'accelerationY', 0),\n      setAllowDrag: GetFastValue(config, 'allowDrag', true),\n      setAllowGravity: GetFastValue(config, 'allowGravity', true),\n      setAllowRotation: GetFastValue(config, 'allowRotation', true),\n      setBounceX: GetFastValue(config, 'bounceX', 0),\n      setBounceY: GetFastValue(config, 'bounceY', 0),\n      setDragX: GetFastValue(config, 'dragX', 0),\n      setDragY: GetFastValue(config, 'dragY', 0),\n      setEnable: GetFastValue(config, 'enable', true),\n      setGravityX: GetFastValue(config, 'gravityX', 0),\n      setGravityY: GetFastValue(config, 'gravityY', 0),\n      setFrictionX: GetFastValue(config, 'frictionX', 0),\n      setFrictionY: GetFastValue(config, 'frictionY', 0),\n      setVelocityX: GetFastValue(config, 'velocityX', 0),\n      setVelocityY: GetFastValue(config, 'velocityY', 0),\n      setAngularVelocity: GetFastValue(config, 'angularVelocity', 0),\n      setAngularAcceleration: GetFastValue(config, 'angularAcceleration', 0),\n      setAngularDrag: GetFastValue(config, 'angularDrag', 0),\n      setMass: GetFastValue(config, 'mass', 1),\n      setImmovable: GetFastValue(config, 'immovable', false)\n    };\n\n    if (Array.isArray(children)) {\n      config = null;\n    }\n\n    Group.call(this, scene, children, config);\n    /**\r\n     * A textual representation of this Game Object.\r\n     * Used internally by Phaser but is available for your own custom classes to populate.\r\n     *\r\n     * @name Phaser.Physics.Arcade.Group#type\r\n     * @type {string}\r\n     * @default 'PhysicsGroup'\r\n     * @since 3.21.0\r\n     */\n\n    this.type = 'PhysicsGroup';\n  },\n\n  /**\r\n   * Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#createCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object being added.\r\n   */\n  createCallbackHandler: function (child) {\n    if (!child.body) {\n      this.world.enableBody(child, CONST.DYNAMIC_BODY);\n    }\n\n    var body = child.body;\n\n    for (var key in this.defaults) {\n      body[key](this.defaults[key]);\n    }\n  },\n\n  /**\r\n   * Disables a Game Object's Body. Called when a Group member is removed.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#removeCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object being removed.\r\n   */\n  removeCallbackHandler: function (child) {\n    if (child.body) {\n      this.world.disableBody(child);\n    }\n  },\n\n  /**\r\n   * Sets the velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity.\r\n   * @param {number} y - The vertical velocity.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocity: function (x, y, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.set(x + i * step, y + i * step);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The velocity value.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocityX: function (value, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.x = value + i * step;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical velocity of each Group member.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Group#setVelocityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The velocity value.\r\n   * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n   */\n  setVelocityY: function (value, step) {\n    if (step === undefined) {\n      step = 0;\n    }\n\n    var items = this.getChildren();\n\n    for (var i = 0; i < items.length; i++) {\n      items[i].body.velocity.y = value + i * step;\n    }\n\n    return this;\n  }\n});\nmodule.exports = PhysicsGroup;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/PhysicsGroup.js"],"names":["ArcadeSprite","require","Class","CONST","GetFastValue","Group","IsPlainObject","PhysicsGroup","Extends","initialize","world","scene","children","config","internalCreateCallback","createCallbackHandler","internalRemoveCallback","removeCallbackHandler","Array","isArray","_this","forEach","singleConfig","classType","physicsType","DYNAMIC_BODY","defaults","setCollideWorldBounds","setBoundsRectangle","setAccelerationX","setAccelerationY","setAllowDrag","setAllowGravity","setAllowRotation","setBounceX","setBounceY","setDragX","setDragY","setEnable","setGravityX","setGravityY","setFrictionX","setFrictionY","setVelocityX","setVelocityY","setAngularVelocity","setAngularAcceleration","setAngularDrag","setMass","setImmovable","call","type","child","body","enableBody","key","disableBody","setVelocity","x","y","step","undefined","items","getChildren","i","length","velocity","set","value","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,iCAAD,CAA1B;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,+BAAD,CAAnB;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,kCAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIM,YAAY,GAAG,IAAIL,KAAJ,CAAU;AAEzBM,EAAAA,OAAO,EAAEH,KAFgB;AAIzBI,EAAAA,UAAU,EAEV,SAASF,YAAT,CAAuBG,KAAvB,EAA8BC,KAA9B,EAAqCC,QAArC,EAA+CC,MAA/C,EACA;AACI,QAAI,CAACD,QAAD,IAAa,CAACC,MAAlB,EACA;AACIA,MAAAA,MAAM,GAAG;AACLC,QAAAA,sBAAsB,EAAE,KAAKC,qBADxB;AAELC,QAAAA,sBAAsB,EAAE,KAAKC;AAFxB,OAAT;AAIH,KAND,MAOK,IAAIX,aAAa,CAACM,QAAD,CAAjB,EACL;AACI;AACAC,MAAAA,MAAM,GAAGD,QAAT;AACAA,MAAAA,QAAQ,GAAG,IAAX;AAEAC,MAAAA,MAAM,CAACC,sBAAP,GAAgC,KAAKC,qBAArC;AACAF,MAAAA,MAAM,CAACG,sBAAP,GAAgC,KAAKC,qBAArC;AACH,KARI,MASA,IAAIC,KAAK,CAACC,OAAN,CAAcP,QAAd,KAA2BN,aAAa,CAACM,QAAQ,CAAC,CAAD,CAAT,CAA5C,EACL;AACI;AACAC,MAAAA,MAAM,GAAGD,QAAQ,CAAC,CAAD,CAAjB;;AAEA,UAAIQ,KAAK,GAAG,IAAZ;;AAEAR,MAAAA,QAAQ,CAACS,OAAT,CAAiB,UAAUC,YAAV,EACjB;AACIA,QAAAA,YAAY,CAACR,sBAAb,GAAsCM,KAAK,CAACL,qBAA5C;AACAO,QAAAA,YAAY,CAACN,sBAAb,GAAsCI,KAAK,CAACH,qBAA5C;AACH,OAJD;AAKH,KAZI,MAcL;AACI;AACAJ,MAAAA,MAAM,GAAG;AACLC,QAAAA,sBAAsB,EAAE,KAAKC,qBADxB;AAELC,QAAAA,sBAAsB,EAAE,KAAKC;AAFxB,OAAT;AAIH;AAED;;;;;;;;;AAOA,SAAKP,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;;;AAUAG,IAAAA,MAAM,CAACU,SAAP,GAAmBnB,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsBb,YAAtB,CAA/B;AAEA;;;;;;;;;AAQA,SAAKwB,WAAL,GAAmBrB,KAAK,CAACsB,YAAzB;AAEA;;;;;;;;AAOA,SAAKC,QAAL,GAAgB;AACZC,MAAAA,qBAAqB,EAAEvB,YAAY,CAACS,MAAD,EAAS,oBAAT,EAA+B,KAA/B,CADvB;AAEZe,MAAAA,kBAAkB,EAAExB,YAAY,CAACS,MAAD,EAAS,uBAAT,EAAkC,IAAlC,CAFpB;AAGZgB,MAAAA,gBAAgB,EAAEzB,YAAY,CAACS,MAAD,EAAS,eAAT,EAA0B,CAA1B,CAHlB;AAIZiB,MAAAA,gBAAgB,EAAE1B,YAAY,CAACS,MAAD,EAAS,eAAT,EAA0B,CAA1B,CAJlB;AAKZkB,MAAAA,YAAY,EAAE3B,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,IAAtB,CALd;AAMZmB,MAAAA,eAAe,EAAE5B,YAAY,CAACS,MAAD,EAAS,cAAT,EAAyB,IAAzB,CANjB;AAOZoB,MAAAA,gBAAgB,EAAE7B,YAAY,CAACS,MAAD,EAAS,eAAT,EAA0B,IAA1B,CAPlB;AAQZqB,MAAAA,UAAU,EAAE9B,YAAY,CAACS,MAAD,EAAS,SAAT,EAAoB,CAApB,CARZ;AASZsB,MAAAA,UAAU,EAAE/B,YAAY,CAACS,MAAD,EAAS,SAAT,EAAoB,CAApB,CATZ;AAUZuB,MAAAA,QAAQ,EAAEhC,YAAY,CAACS,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAVV;AAWZwB,MAAAA,QAAQ,EAAEjC,YAAY,CAACS,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAXV;AAYZyB,MAAAA,SAAS,EAAElC,YAAY,CAACS,MAAD,EAAS,QAAT,EAAmB,IAAnB,CAZX;AAaZ0B,MAAAA,WAAW,EAAEnC,YAAY,CAACS,MAAD,EAAS,UAAT,EAAqB,CAArB,CAbb;AAcZ2B,MAAAA,WAAW,EAAEpC,YAAY,CAACS,MAAD,EAAS,UAAT,EAAqB,CAArB,CAdb;AAeZ4B,MAAAA,YAAY,EAAErC,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAfd;AAgBZ6B,MAAAA,YAAY,EAAEtC,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAhBd;AAiBZ8B,MAAAA,YAAY,EAAEvC,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAjBd;AAkBZ+B,MAAAA,YAAY,EAAExC,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAlBd;AAmBZgC,MAAAA,kBAAkB,EAAEzC,YAAY,CAACS,MAAD,EAAS,iBAAT,EAA4B,CAA5B,CAnBpB;AAoBZiC,MAAAA,sBAAsB,EAAE1C,YAAY,CAACS,MAAD,EAAS,qBAAT,EAAgC,CAAhC,CApBxB;AAqBZkC,MAAAA,cAAc,EAAE3C,YAAY,CAACS,MAAD,EAAS,aAAT,EAAwB,CAAxB,CArBhB;AAsBZmC,MAAAA,OAAO,EAAE5C,YAAY,CAACS,MAAD,EAAS,MAAT,EAAiB,CAAjB,CAtBT;AAuBZoC,MAAAA,YAAY,EAAE7C,YAAY,CAACS,MAAD,EAAS,WAAT,EAAsB,KAAtB;AAvBd,KAAhB;;AA0BA,QAAIK,KAAK,CAACC,OAAN,CAAcP,QAAd,CAAJ,EACA;AACIC,MAAAA,MAAM,GAAG,IAAT;AACH;;AAEDR,IAAAA,KAAK,CAAC6C,IAAN,CAAW,IAAX,EAAiBvC,KAAjB,EAAwBC,QAAxB,EAAkCC,MAAlC;AAEA;;;;;;;;;;AASA,SAAKsC,IAAL,GAAY,cAAZ;AACH,GA/HwB;;AAiIzB;;;;;;;;AAQApC,EAAAA,qBAAqB,EAAE,UAAUqC,KAAV,EACvB;AACI,QAAI,CAACA,KAAK,CAACC,IAAX,EACA;AACI,WAAK3C,KAAL,CAAW4C,UAAX,CAAsBF,KAAtB,EAA6BjD,KAAK,CAACsB,YAAnC;AACH;;AAED,QAAI4B,IAAI,GAAGD,KAAK,CAACC,IAAjB;;AAEA,SAAK,IAAIE,GAAT,IAAgB,KAAK7B,QAArB,EACA;AACI2B,MAAAA,IAAI,CAACE,GAAD,CAAJ,CAAU,KAAK7B,QAAL,CAAc6B,GAAd,CAAV;AACH;AACJ,GAtJwB;;AAwJzB;;;;;;;;AAQAtC,EAAAA,qBAAqB,EAAE,UAAUmC,KAAV,EACvB;AACI,QAAIA,KAAK,CAACC,IAAV,EACA;AACI,WAAK3C,KAAL,CAAW8C,WAAX,CAAuBJ,KAAvB;AACH;AACJ,GAtKwB;;AAwKzB;;;;;;;;;;;;AAYAK,EAAAA,WAAW,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,IAAhB,EACb;AACI,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AAAED,MAAAA,IAAI,GAAG,CAAP;AAAW;;AAErC,QAAIE,KAAK,GAAG,KAAKC,WAAL,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACIF,MAAAA,KAAK,CAACE,CAAD,CAAL,CAASX,IAAT,CAAca,QAAd,CAAuBC,GAAvB,CAA2BT,CAAC,GAAIM,CAAC,GAAGJ,IAApC,EAA2CD,CAAC,GAAIK,CAAC,GAAGJ,IAApD;AACH;;AAED,WAAO,IAAP;AACH,GAhMwB;;AAkMzB;;;;;;;;;;;AAWAjB,EAAAA,YAAY,EAAE,UAAUyB,KAAV,EAAiBR,IAAjB,EACd;AACI,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AAAED,MAAAA,IAAI,GAAG,CAAP;AAAW;;AAErC,QAAIE,KAAK,GAAG,KAAKC,WAAL,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACIF,MAAAA,KAAK,CAACE,CAAD,CAAL,CAASX,IAAT,CAAca,QAAd,CAAuBR,CAAvB,GAA2BU,KAAK,GAAIJ,CAAC,GAAGJ,IAAxC;AACH;;AAED,WAAO,IAAP;AACH,GAzNwB;;AA2NzB;;;;;;;;;;;AAWAhB,EAAAA,YAAY,EAAE,UAAUwB,KAAV,EAAiBR,IAAjB,EACd;AACI,QAAIA,IAAI,KAAKC,SAAb,EAAwB;AAAED,MAAAA,IAAI,GAAG,CAAP;AAAW;;AAErC,QAAIE,KAAK,GAAG,KAAKC,WAAL,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACIF,MAAAA,KAAK,CAACE,CAAD,CAAL,CAASX,IAAT,CAAca,QAAd,CAAuBP,CAAvB,GAA2BS,KAAK,GAAIJ,CAAC,GAAGJ,IAAxC;AACH;;AAED,WAAO,IAAP;AACH;AAlPwB,CAAV,CAAnB;AAsPAS,MAAM,CAACC,OAAP,GAAiB/D,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArcadeSprite = require('./ArcadeSprite');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Group = require('../../gameobjects/group/Group');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * An Arcade Physics Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given dynamic Arcade Physics bodies.\r\n *\r\n * Its static counterpart is {@link Phaser.Physics.Arcade.StaticGroup}.\r\n *\r\n * @class Group\r\n * @extends Phaser.GameObjects.Group\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {Phaser.Types.Physics.Arcade.PhysicsGroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n */\r\nvar PhysicsGroup = new Class({\r\n\r\n    Extends: Group,\r\n\r\n    initialize:\r\n\r\n    function PhysicsGroup (world, scene, children, config)\r\n    {\r\n        if (!children && !config)\r\n        {\r\n            config = {\r\n                internalCreateCallback: this.createCallbackHandler,\r\n                internalRemoveCallback: this.removeCallbackHandler\r\n            };\r\n        }\r\n        else if (IsPlainObject(children))\r\n        {\r\n            //  children is a plain object, so swizzle them:\r\n            config = children;\r\n            children = null;\r\n\r\n            config.internalCreateCallback = this.createCallbackHandler;\r\n            config.internalRemoveCallback = this.removeCallbackHandler;\r\n        }\r\n        else if (Array.isArray(children) && IsPlainObject(children[0]))\r\n        {\r\n            //  children is an array of plain objects\r\n            config = children[0];\r\n\r\n            var _this = this;\r\n\r\n            children.forEach(function (singleConfig)\r\n            {\r\n                singleConfig.internalCreateCallback = _this.createCallbackHandler;\r\n                singleConfig.internalRemoveCallback = _this.removeCallbackHandler;\r\n            });\r\n        }\r\n        else\r\n        {\r\n            // config is not defined and children is not a plain object nor an array of plain objects\r\n            config = {\r\n                internalCreateCallback: this.createCallbackHandler,\r\n                internalRemoveCallback: this.removeCallbackHandler\r\n            };\r\n        }\r\n\r\n        /**\r\n         * The physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * The class to create new Group members from.\r\n         *\r\n         * This should be either `Phaser.Physics.Arcade.Image`, `Phaser.Physics.Arcade.Sprite`, or a class extending one of those.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#classType\r\n         * @type {Function}\r\n         * @default ArcadeSprite\r\n         * @since 3.0.0\r\n         */\r\n        config.classType = GetFastValue(config, 'classType', ArcadeSprite);\r\n\r\n        /**\r\n         * The physics type of the Group's members.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#physicsType\r\n         * @type {integer}\r\n         * @default Phaser.Physics.Arcade.DYNAMIC_BODY\r\n         * @since 3.0.0\r\n         */\r\n        this.physicsType = CONST.DYNAMIC_BODY;\r\n\r\n        /**\r\n         * Default physics properties applied to Game Objects added to the Group or created by the Group. Derived from the `config` argument.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#defaults\r\n         * @type {Phaser.Types.Physics.Arcade.PhysicsGroupDefaults}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaults = {\r\n            setCollideWorldBounds: GetFastValue(config, 'collideWorldBounds', false),\r\n            setBoundsRectangle: GetFastValue(config, 'customBoundsRectangle', null),\r\n            setAccelerationX: GetFastValue(config, 'accelerationX', 0),\r\n            setAccelerationY: GetFastValue(config, 'accelerationY', 0),\r\n            setAllowDrag: GetFastValue(config, 'allowDrag', true),\r\n            setAllowGravity: GetFastValue(config, 'allowGravity', true),\r\n            setAllowRotation: GetFastValue(config, 'allowRotation', true),\r\n            setBounceX: GetFastValue(config, 'bounceX', 0),\r\n            setBounceY: GetFastValue(config, 'bounceY', 0),\r\n            setDragX: GetFastValue(config, 'dragX', 0),\r\n            setDragY: GetFastValue(config, 'dragY', 0),\r\n            setEnable: GetFastValue(config, 'enable', true),\r\n            setGravityX: GetFastValue(config, 'gravityX', 0),\r\n            setGravityY: GetFastValue(config, 'gravityY', 0),\r\n            setFrictionX: GetFastValue(config, 'frictionX', 0),\r\n            setFrictionY: GetFastValue(config, 'frictionY', 0),\r\n            setVelocityX: GetFastValue(config, 'velocityX', 0),\r\n            setVelocityY: GetFastValue(config, 'velocityY', 0),\r\n            setAngularVelocity: GetFastValue(config, 'angularVelocity', 0),\r\n            setAngularAcceleration: GetFastValue(config, 'angularAcceleration', 0),\r\n            setAngularDrag: GetFastValue(config, 'angularDrag', 0),\r\n            setMass: GetFastValue(config, 'mass', 1),\r\n            setImmovable: GetFastValue(config, 'immovable', false)\r\n        };\r\n\r\n        if (Array.isArray(children))\r\n        {\r\n            config = null;\r\n        }\r\n\r\n        Group.call(this, scene, children, config);\r\n\r\n        /**\r\n         * A textual representation of this Game Object.\r\n         * Used internally by Phaser but is available for your own custom classes to populate.\r\n         *\r\n         * @name Phaser.Physics.Arcade.Group#type\r\n         * @type {string}\r\n         * @default 'PhysicsGroup'\r\n         * @since 3.21.0\r\n         */\r\n        this.type = 'PhysicsGroup';\r\n    },\r\n\r\n    /**\r\n     * Enables a Game Object's Body and assigns `defaults`. Called when a Group member is added or created.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#createCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being added.\r\n     */\r\n    createCallbackHandler: function (child)\r\n    {\r\n        if (!child.body)\r\n        {\r\n            this.world.enableBody(child, CONST.DYNAMIC_BODY);\r\n        }\r\n\r\n        var body = child.body;\r\n\r\n        for (var key in this.defaults)\r\n        {\r\n            body[key](this.defaults[key]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Disables a Game Object's Body. Called when a Group member is removed.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#removeCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object being removed.\r\n     */\r\n    removeCallbackHandler: function (child)\r\n    {\r\n        if (child.body)\r\n        {\r\n            this.world.disableBody(child);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity.\r\n     * @param {number} y - The vertical velocity.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x, y), the second (x + step, y + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocity: function (x, y, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.set(x + (i * step), y + (i * step));\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The velocity value.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (x), the second (x + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocityX: function (value, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.x = value + (i * step);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical velocity of each Group member.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Group#setVelocityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The velocity value.\r\n     * @param {number} [step=0] - The velocity increment. When set, the first member receives velocity (y), the second (y + step), and so on.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.Group} This Physics Group object.\r\n     */\r\n    setVelocityY: function (value, step)\r\n    {\r\n        if (step === undefined) { step = 0; }\r\n\r\n        var items = this.getChildren();\r\n\r\n        for (var i = 0; i < items.length; i++)\r\n        {\r\n            items[i].body.velocity.y = value + (i * step);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PhysicsGroup;\r\n"]},"metadata":{},"sourceType":"script"}