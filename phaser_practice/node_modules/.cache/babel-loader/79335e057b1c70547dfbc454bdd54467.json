{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar DataManager = require('./DataManager');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n/**\r\n * @classdesc\r\n * The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManagerPlugin\r\n * @extends Phaser.Data.DataManager\r\n * @memberof Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that this DataManager belongs to.\r\n */\n\n\nvar DataManagerPlugin = new Class({\n  Extends: DataManager,\n  initialize: function DataManagerPlugin(scene) {\n    DataManager.call(this, scene, scene.sys.events);\n    /**\r\n     * A reference to the Scene that this DataManager belongs to.\r\n     *\r\n     * @name Phaser.Data.DataManagerPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene's Systems.\r\n     *\r\n     * @name Phaser.Data.DataManagerPlugin#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Data.DataManagerPlugin#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.events = this.systems.events;\n    this.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Data.DataManagerPlugin#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    this.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Data.DataManagerPlugin#shutdown\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  shutdown: function () {\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Data.DataManagerPlugin#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    DataManager.prototype.destroy.call(this);\n    this.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('DataManagerPlugin', DataManagerPlugin, 'data');\nmodule.exports = DataManagerPlugin;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/data/DataManagerPlugin.js"],"names":["Class","require","DataManager","PluginCache","SceneEvents","DataManagerPlugin","Extends","initialize","scene","call","sys","events","systems","once","BOOT","boot","on","START","start","DESTROY","destroy","SHUTDOWN","shutdown","off","prototype","register","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,iBAAD,CAAzB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAII,iBAAiB,GAAG,IAAIL,KAAJ,CAAU;AAE9BM,EAAAA,OAAO,EAAEJ,WAFqB;AAI9BK,EAAAA,UAAU,EAEV,SAASF,iBAAT,CAA4BG,KAA5B,EACA;AACIN,IAAAA,WAAW,CAACO,IAAZ,CAAiB,IAAjB,EAAuBD,KAAvB,EAA8BA,KAAK,CAACE,GAAN,CAAUC,MAAxC;AAEA;;;;;;;;AAOA,SAAKH,KAAL,GAAaA,KAAb;AAEA;;;;;;;;AAOA,SAAKI,OAAL,GAAeJ,KAAK,CAACE,GAArB;AAEAF,IAAAA,KAAK,CAACE,GAAN,CAAUC,MAAV,CAAiBE,IAAjB,CAAsBT,WAAW,CAACU,IAAlC,EAAwC,KAAKC,IAA7C,EAAmD,IAAnD;AACAP,IAAAA,KAAK,CAACE,GAAN,CAAUC,MAAV,CAAiBK,EAAjB,CAAoBZ,WAAW,CAACa,KAAhC,EAAuC,KAAKC,KAA5C,EAAmD,IAAnD;AACH,GA9B6B;;AAgC9B;;;;;;;;AAQAH,EAAAA,IAAI,EAAE,YACN;AACI,SAAKJ,MAAL,GAAc,KAAKC,OAAL,CAAaD,MAA3B;AAEA,SAAKA,MAAL,CAAYE,IAAZ,CAAiBT,WAAW,CAACe,OAA7B,EAAsC,KAAKC,OAA3C,EAAoD,IAApD;AACH,GA7C6B;;AA+C9B;;;;;;;;;AASAF,EAAAA,KAAK,EAAE,YACP;AACI,SAAKP,MAAL,CAAYE,IAAZ,CAAiBT,WAAW,CAACiB,QAA7B,EAAuC,KAAKC,QAA5C,EAAsD,IAAtD;AACH,GA3D6B;;AA6D9B;;;;;;;;AAQAA,EAAAA,QAAQ,EAAE,YACV;AACI,SAAKV,OAAL,CAAaD,MAAb,CAAoBY,GAApB,CAAwBnB,WAAW,CAACiB,QAApC,EAA8C,KAAKC,QAAnD,EAA6D,IAA7D;AACH,GAxE6B;;AA0E9B;;;;;;;AAOAF,EAAAA,OAAO,EAAE,YACT;AACIlB,IAAAA,WAAW,CAACsB,SAAZ,CAAsBJ,OAAtB,CAA8BX,IAA9B,CAAmC,IAAnC;AAEA,SAAKE,MAAL,CAAYY,GAAZ,CAAgBnB,WAAW,CAACa,KAA5B,EAAmC,KAAKC,KAAxC,EAA+C,IAA/C;AAEA,SAAKV,KAAL,GAAa,IAAb;AACA,SAAKI,OAAL,GAAe,IAAf;AACH;AAzF6B,CAAV,CAAxB;AA6FAT,WAAW,CAACsB,QAAZ,CAAqB,mBAArB,EAA0CpB,iBAA1C,EAA6D,MAA7D;AAEAqB,MAAM,CAACC,OAAP,GAAiBtB,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar DataManager = require('./DataManager');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Data Component features a means to store pieces of data specific to a Game Object, System or Plugin.\r\n * You can then search, query it, and retrieve the data. The parent must either extend EventEmitter,\r\n * or have a property called `events` that is an instance of it.\r\n *\r\n * @class DataManagerPlugin\r\n * @extends Phaser.Data.DataManager\r\n * @memberof Phaser.Data\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that this DataManager belongs to.\r\n */\r\nvar DataManagerPlugin = new Class({\r\n\r\n    Extends: DataManager,\r\n\r\n    initialize:\r\n\r\n    function DataManagerPlugin (scene)\r\n    {\r\n        DataManager.call(this, scene, scene.sys.events);\r\n\r\n        /**\r\n         * A reference to the Scene that this DataManager belongs to.\r\n         *\r\n         * @name Phaser.Data.DataManagerPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene's Systems.\r\n         *\r\n         * @name Phaser.Data.DataManagerPlugin#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.events = this.systems.events;\r\n\r\n        this.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#shutdown\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Data.DataManagerPlugin#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        DataManager.prototype.destroy.call(this);\r\n\r\n        this.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('DataManagerPlugin', DataManagerPlugin, 'data');\r\n\r\nmodule.exports = DataManagerPlugin;\r\n"]},"metadata":{},"sourceType":"script"}