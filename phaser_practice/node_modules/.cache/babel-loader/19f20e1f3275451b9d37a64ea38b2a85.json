{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTileAt = require('./GetTileAt');\n\nvar GetTilesWithin = require('./GetTilesWithin');\n/**\r\n * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n * is mostly used internally.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesWithin\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar CalculateFacesWithin = function (tileX, tileY, width, height, layer) {\n  var above = null;\n  var below = null;\n  var left = null;\n  var right = null;\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n  for (var i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n\n    if (tile) {\n      if (tile.collides) {\n        above = GetTileAt(tile.x, tile.y - 1, true, layer);\n        below = GetTileAt(tile.x, tile.y + 1, true, layer);\n        left = GetTileAt(tile.x - 1, tile.y, true, layer);\n        right = GetTileAt(tile.x + 1, tile.y, true, layer);\n        tile.faceTop = above && above.collides ? false : true;\n        tile.faceBottom = below && below.collides ? false : true;\n        tile.faceLeft = left && left.collides ? false : true;\n        tile.faceRight = right && right.collides ? false : true;\n      } else {\n        tile.resetFaces();\n      }\n    }\n  }\n};\n\nmodule.exports = CalculateFacesWithin;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/CalculateFacesWithin.js"],"names":["GetTileAt","require","GetTilesWithin","CalculateFacesWithin","tileX","tileY","width","height","layer","above","below","left","right","tiles","i","length","tile","collides","x","y","faceTop","faceBottom","faceLeft","faceRight","resetFaces","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIE,oBAAoB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,KAAvC,EAC3B;AACI,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,IAAI,GAAG,IAAX;AACA,MAAIC,KAAK,GAAG,IAAZ;AAEA,MAAIC,KAAK,GAAGX,cAAc,CAACE,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B,IAA9B,EAAoCC,KAApC,CAA1B;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI,QAAIE,IAAI,GAAGH,KAAK,CAACC,CAAD,CAAhB;;AAEA,QAAIE,IAAJ,EACA;AACI,UAAIA,IAAI,CAACC,QAAT,EACA;AACIR,QAAAA,KAAK,GAAGT,SAAS,CAACgB,IAAI,CAACE,CAAN,EAASF,IAAI,CAACG,CAAL,GAAS,CAAlB,EAAqB,IAArB,EAA2BX,KAA3B,CAAjB;AACAE,QAAAA,KAAK,GAAGV,SAAS,CAACgB,IAAI,CAACE,CAAN,EAASF,IAAI,CAACG,CAAL,GAAS,CAAlB,EAAqB,IAArB,EAA2BX,KAA3B,CAAjB;AACAG,QAAAA,IAAI,GAAGX,SAAS,CAACgB,IAAI,CAACE,CAAL,GAAS,CAAV,EAAaF,IAAI,CAACG,CAAlB,EAAqB,IAArB,EAA2BX,KAA3B,CAAhB;AACAI,QAAAA,KAAK,GAAGZ,SAAS,CAACgB,IAAI,CAACE,CAAL,GAAS,CAAV,EAAaF,IAAI,CAACG,CAAlB,EAAqB,IAArB,EAA2BX,KAA3B,CAAjB;AAEAQ,QAAAA,IAAI,CAACI,OAAL,GAAgBX,KAAK,IAAIA,KAAK,CAACQ,QAAhB,GAA4B,KAA5B,GAAoC,IAAnD;AACAD,QAAAA,IAAI,CAACK,UAAL,GAAmBX,KAAK,IAAIA,KAAK,CAACO,QAAhB,GAA4B,KAA5B,GAAoC,IAAtD;AACAD,QAAAA,IAAI,CAACM,QAAL,GAAiBX,IAAI,IAAIA,IAAI,CAACM,QAAd,GAA0B,KAA1B,GAAkC,IAAlD;AACAD,QAAAA,IAAI,CAACO,SAAL,GAAkBX,KAAK,IAAIA,KAAK,CAACK,QAAhB,GAA4B,KAA5B,GAAoC,IAArD;AACH,OAXD,MAaA;AACID,QAAAA,IAAI,CAACQ,UAAL;AACH;AACJ;AACJ;AACJ,CAjCD;;AAmCAC,MAAM,CAACC,OAAP,GAAiBvB,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTileAt = require('./GetTileAt');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n * is mostly used internally.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesWithin\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} tileY - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} width - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} height - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar CalculateFacesWithin = function (tileX, tileY, width, height, layer)\r\n{\r\n    var above = null;\r\n    var below = null;\r\n    var left = null;\r\n    var right = null;\r\n\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n\r\n        if (tile)\r\n        {\r\n            if (tile.collides)\r\n            {\r\n                above = GetTileAt(tile.x, tile.y - 1, true, layer);\r\n                below = GetTileAt(tile.x, tile.y + 1, true, layer);\r\n                left = GetTileAt(tile.x - 1, tile.y, true, layer);\r\n                right = GetTileAt(tile.x + 1, tile.y, true, layer);\r\n\r\n                tile.faceTop = (above && above.collides) ? false : true;\r\n                tile.faceBottom = (below && below.collides) ? false : true;\r\n                tile.faceLeft = (left && left.collides) ? false : true;\r\n                tile.faceRight = (right && right.collides) ? false : true;\r\n            }\r\n            else\r\n            {\r\n                tile.resetFaces();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = CalculateFacesWithin;\r\n"]},"metadata":{},"sourceType":"script"}