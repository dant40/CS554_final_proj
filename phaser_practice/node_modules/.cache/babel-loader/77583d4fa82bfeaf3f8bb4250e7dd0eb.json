{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Bodies = require('../lib/factory/Bodies');\n\nvar Body = require('../lib/body/Body');\n\nvar FuzzyEquals = require('../../../math/fuzzy/Equal');\n\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar PhysicsEditorParser = require('../PhysicsEditorParser');\n\nvar PhysicsJSONParser = require('../PhysicsJSONParser');\n\nvar Vertices = require('../lib/geometry/Vertices');\n/**\r\n * Enables a Matter-enabled Game Object to set its Body. Should be used as a mixin and not directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.SetBody\r\n * @since 3.0.0\r\n */\n\n\nvar SetBody = {\n  /**\r\n   * Set the body on a Game Object to a rectangle.\r\n   * \r\n   * Calling this methods resets previous properties you may have set on the body, including\r\n   * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setRectangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - Width of the rectangle.\r\n   * @param {number} height - Height of the rectangle.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setRectangle: function (width, height, options) {\n    return this.setBody({\n      type: 'rectangle',\n      width: width,\n      height: height\n    }, options);\n  },\n\n  /**\r\n   * Set the body on a Game Object to a circle.\r\n   * \r\n   * Calling this methods resets previous properties you may have set on the body, including\r\n   * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - The radius of the circle.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setCircle: function (radius, options) {\n    return this.setBody({\n      type: 'circle',\n      radius: radius\n    }, options);\n  },\n\n  /**\r\n   * Set the body on the Game Object to a polygon shape.\r\n   * \r\n   * Calling this methods resets previous properties you may have set on the body, including\r\n   * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setPolygon\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} sides - The number of sides the polygon will have.\r\n   * @param {number} radius - The \"radius\" of the polygon, i.e. the distance from its center to any vertex. This is also the radius of its circumcircle.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setPolygon: function (radius, sides, options) {\n    return this.setBody({\n      type: 'polygon',\n      sides: sides,\n      radius: radius\n    }, options);\n  },\n\n  /**\r\n   * Set the body on the Game Object to a trapezoid shape.\r\n   * \r\n   * Calling this methods resets previous properties you may have set on the body, including\r\n   * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setTrapezoid\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the trapezoid Body.\r\n   * @param {number} height - The height of the trapezoid Body.\r\n   * @param {number} slope - The slope of the trapezoid. 0 creates a rectangle, while 1 creates a triangle. Positive values make the top side shorter, while negative values make the bottom side shorter.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setTrapezoid: function (width, height, slope, options) {\n    return this.setBody({\n      type: 'trapezoid',\n      width: width,\n      height: height,\n      slope: slope\n    }, options);\n  },\n\n  /**\r\n   * Set this Game Object to use the given existing Matter Body.\r\n   * \r\n   * The body is first removed from the world before being added to this Game Object.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setExistingBody\r\n   * @since 3.0.0\r\n   *\r\n   * @param {MatterJS.BodyType} body - The Body this Game Object should use.\r\n   * @param {boolean} [addToWorld=true] - Should the body be immediately added to the World?\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setExistingBody: function (body, addToWorld) {\n    if (addToWorld === undefined) {\n      addToWorld = true;\n    }\n\n    if (this.body) {\n      this.world.remove(this.body, true);\n    }\n\n    this.body = body;\n\n    for (var i = 0; i < body.parts.length; i++) {\n      body.parts[i].gameObject = this;\n    }\n\n    var _this = this;\n\n    body.destroy = function destroy() {\n      _this.world.remove(_this.body, true);\n\n      _this.body.gameObject = null;\n    };\n\n    if (addToWorld) {\n      if (this.world.has(body)) {\n        //  Because it could be part of another Composite\n        this.world.remove(body, true);\n      }\n\n      this.world.add(body);\n    }\n\n    if (this._originComponent) {\n      var rx = body.render.sprite.xOffset;\n      var ry = body.render.sprite.yOffset;\n      var comx = body.centerOfMass.x;\n      var comy = body.centerOfMass.y;\n\n      if (FuzzyEquals(comx, 0.5) && FuzzyEquals(comy, 0.5)) {\n        this.setOrigin(rx + 0.5, ry + 0.5);\n      } else {\n        var cx = body.centerOffset.x;\n        var cy = body.centerOffset.y;\n        this.setOrigin(rx + cx / this.displayWidth, ry + cy / this.displayHeight);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set this Game Object to create and use a new Body based on the configuration object given.\r\n   * \r\n   * Calling this method resets previous properties you may have set on the body, including\r\n   * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.SetBody#setBody\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Types.Physics.Matter.MatterSetBodyConfig)} config - Either a string, such as `circle`, or a Matter Set Body Configuration object.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setBody: function (config, options) {\n    if (!config) {\n      return this;\n    }\n\n    var body; //  Allow them to do: shape: 'circle' instead of shape: { type: 'circle' }\n\n    if (typeof config === 'string') {\n      //  Using defaults\n      config = {\n        type: config\n      };\n    }\n\n    var shapeType = GetFastValue(config, 'type', 'rectangle');\n    var bodyX = GetFastValue(config, 'x', this._tempVec2.x);\n    var bodyY = GetFastValue(config, 'y', this._tempVec2.y);\n    var bodyWidth = GetFastValue(config, 'width', this.width);\n    var bodyHeight = GetFastValue(config, 'height', this.height);\n\n    switch (shapeType) {\n      case 'rectangle':\n        body = Bodies.rectangle(bodyX, bodyY, bodyWidth, bodyHeight, options);\n        break;\n\n      case 'circle':\n        var radius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\n        var maxSides = GetFastValue(config, 'maxSides', 25);\n        body = Bodies.circle(bodyX, bodyY, radius, options, maxSides);\n        break;\n\n      case 'trapezoid':\n        var slope = GetFastValue(config, 'slope', 0.5);\n        body = Bodies.trapezoid(bodyX, bodyY, bodyWidth, bodyHeight, slope, options);\n        break;\n\n      case 'polygon':\n        var sides = GetFastValue(config, 'sides', 5);\n        var pRadius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\n        body = Bodies.polygon(bodyX, bodyY, sides, pRadius, options);\n        break;\n\n      case 'fromVertices':\n      case 'fromVerts':\n        var verts = GetFastValue(config, 'verts', null);\n\n        if (verts) {\n          //  Has the verts array come from Vertices.fromPath, or is it raw?\n          if (typeof verts === 'string') {\n            verts = Vertices.fromPath(verts);\n          }\n\n          if (this.body && !this.body.hasOwnProperty('temp')) {\n            Body.setVertices(this.body, verts);\n            body = this.body;\n          } else {\n            var flagInternal = GetFastValue(config, 'flagInternal', false);\n            var removeCollinear = GetFastValue(config, 'removeCollinear', 0.01);\n            var minimumArea = GetFastValue(config, 'minimumArea', 10);\n            body = Bodies.fromVertices(bodyX, bodyY, verts, options, flagInternal, removeCollinear, minimumArea);\n          }\n        }\n\n        break;\n\n      case 'fromPhysicsEditor':\n        body = PhysicsEditorParser.parseBody(bodyX, bodyY, config, options);\n        break;\n\n      case 'fromPhysicsTracer':\n        body = PhysicsJSONParser.parseBody(bodyX, bodyY, config, options);\n        break;\n    }\n\n    if (body) {\n      this.setExistingBody(body, config.addToWorld);\n    }\n\n    return this;\n  }\n};\nmodule.exports = SetBody;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/components/SetBody.js"],"names":["Bodies","require","Body","FuzzyEquals","GetFastValue","PhysicsEditorParser","PhysicsJSONParser","Vertices","SetBody","setRectangle","width","height","options","setBody","type","setCircle","radius","setPolygon","sides","setTrapezoid","slope","setExistingBody","body","addToWorld","undefined","world","remove","i","parts","length","gameObject","_this","destroy","has","add","_originComponent","rx","render","sprite","xOffset","ry","yOffset","comx","centerOfMass","x","comy","y","setOrigin","cx","centerOffset","cy","displayWidth","displayHeight","config","shapeType","bodyX","_tempVec2","bodyY","bodyWidth","bodyHeight","rectangle","Math","max","maxSides","circle","trapezoid","pRadius","polygon","verts","fromPath","hasOwnProperty","setVertices","flagInternal","removeCollinear","minimumArea","fromVertices","parseBody","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Bodies = require('../lib/factory/Bodies');\r\nvar Body = require('../lib/body/Body');\r\nvar FuzzyEquals = require('../../../math/fuzzy/Equal');\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar PhysicsEditorParser = require('../PhysicsEditorParser');\r\nvar PhysicsJSONParser = require('../PhysicsJSONParser');\r\nvar Vertices = require('../lib/geometry/Vertices');\r\n\r\n/**\r\n * Enables a Matter-enabled Game Object to set its Body. Should be used as a mixin and not directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.SetBody\r\n * @since 3.0.0\r\n */\r\nvar SetBody = {\r\n\r\n    /**\r\n     * Set the body on a Game Object to a rectangle.\r\n     * \r\n     * Calling this methods resets previous properties you may have set on the body, including\r\n     * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setRectangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - Width of the rectangle.\r\n     * @param {number} height - Height of the rectangle.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setRectangle: function (width, height, options)\r\n    {\r\n        return this.setBody({ type: 'rectangle', width: width, height: height }, options);\r\n    },\r\n\r\n    /**\r\n     * Set the body on a Game Object to a circle.\r\n     * \r\n     * Calling this methods resets previous properties you may have set on the body, including\r\n     * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - The radius of the circle.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setCircle: function (radius, options)\r\n    {\r\n        return this.setBody({ type: 'circle', radius: radius }, options);\r\n    },\r\n\r\n    /**\r\n     * Set the body on the Game Object to a polygon shape.\r\n     * \r\n     * Calling this methods resets previous properties you may have set on the body, including\r\n     * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setPolygon\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} sides - The number of sides the polygon will have.\r\n     * @param {number} radius - The \"radius\" of the polygon, i.e. the distance from its center to any vertex. This is also the radius of its circumcircle.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setPolygon: function (radius, sides, options)\r\n    {\r\n        return this.setBody({ type: 'polygon', sides: sides, radius: radius }, options);\r\n    },\r\n\r\n    /**\r\n     * Set the body on the Game Object to a trapezoid shape.\r\n     * \r\n     * Calling this methods resets previous properties you may have set on the body, including\r\n     * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setTrapezoid\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the trapezoid Body.\r\n     * @param {number} height - The height of the trapezoid Body.\r\n     * @param {number} slope - The slope of the trapezoid. 0 creates a rectangle, while 1 creates a triangle. Positive values make the top side shorter, while negative values make the bottom side shorter.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setTrapezoid: function (width, height, slope, options)\r\n    {\r\n        return this.setBody({ type: 'trapezoid', width: width, height: height, slope: slope }, options);\r\n    },\r\n\r\n    /**\r\n     * Set this Game Object to use the given existing Matter Body.\r\n     * \r\n     * The body is first removed from the world before being added to this Game Object.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setExistingBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MatterJS.BodyType} body - The Body this Game Object should use.\r\n     * @param {boolean} [addToWorld=true] - Should the body be immediately added to the World?\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setExistingBody: function (body, addToWorld)\r\n    {\r\n        if (addToWorld === undefined) { addToWorld = true; }\r\n\r\n        if (this.body)\r\n        {\r\n            this.world.remove(this.body, true);\r\n        }\r\n\r\n        this.body = body;\r\n\r\n        for (var i = 0; i < body.parts.length; i++)\r\n        {\r\n            body.parts[i].gameObject = this;\r\n        }\r\n\r\n        var _this = this;\r\n\r\n        body.destroy = function destroy ()\r\n        {\r\n            _this.world.remove(_this.body, true);\r\n            _this.body.gameObject = null;\r\n        };\r\n\r\n        if (addToWorld)\r\n        {\r\n            if (this.world.has(body))\r\n            {\r\n                //  Because it could be part of another Composite\r\n                this.world.remove(body, true);\r\n            }\r\n\r\n            this.world.add(body);\r\n        }\r\n\r\n        if (this._originComponent)\r\n        {\r\n            var rx = body.render.sprite.xOffset;\r\n            var ry = body.render.sprite.yOffset;\r\n\r\n            var comx = body.centerOfMass.x;\r\n            var comy = body.centerOfMass.y;\r\n\r\n            if (FuzzyEquals(comx, 0.5) && FuzzyEquals(comy, 0.5))\r\n            {\r\n                this.setOrigin(rx + 0.5, ry + 0.5);\r\n            }\r\n            else\r\n            {\r\n                var cx = body.centerOffset.x;\r\n                var cy = body.centerOffset.y;\r\n\r\n                this.setOrigin(rx + (cx / this.displayWidth), ry + (cy / this.displayHeight));\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set this Game Object to create and use a new Body based on the configuration object given.\r\n     * \r\n     * Calling this method resets previous properties you may have set on the body, including\r\n     * plugins, mass, friction, etc. So be sure to re-apply these in the options object if needed.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.SetBody#setBody\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Physics.Matter.MatterSetBodyConfig)} config - Either a string, such as `circle`, or a Matter Set Body Configuration object.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setBody: function (config, options)\r\n    {\r\n        if (!config)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var body;\r\n\r\n        //  Allow them to do: shape: 'circle' instead of shape: { type: 'circle' }\r\n        if (typeof config === 'string')\r\n        {\r\n            //  Using defaults\r\n            config = { type: config };\r\n        }\r\n\r\n        var shapeType = GetFastValue(config, 'type', 'rectangle');\r\n        var bodyX = GetFastValue(config, 'x', this._tempVec2.x);\r\n        var bodyY = GetFastValue(config, 'y', this._tempVec2.y);\r\n        var bodyWidth = GetFastValue(config, 'width', this.width);\r\n        var bodyHeight = GetFastValue(config, 'height', this.height);\r\n\r\n        switch (shapeType)\r\n        {\r\n            case 'rectangle':\r\n                body = Bodies.rectangle(bodyX, bodyY, bodyWidth, bodyHeight, options);\r\n                break;\r\n\r\n            case 'circle':\r\n                var radius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\r\n                var maxSides = GetFastValue(config, 'maxSides', 25);\r\n                body = Bodies.circle(bodyX, bodyY, radius, options, maxSides);\r\n                break;\r\n\r\n            case 'trapezoid':\r\n                var slope = GetFastValue(config, 'slope', 0.5);\r\n                body = Bodies.trapezoid(bodyX, bodyY, bodyWidth, bodyHeight, slope, options);\r\n                break;\r\n\r\n            case 'polygon':\r\n                var sides = GetFastValue(config, 'sides', 5);\r\n                var pRadius = GetFastValue(config, 'radius', Math.max(bodyWidth, bodyHeight) / 2);\r\n                body = Bodies.polygon(bodyX, bodyY, sides, pRadius, options);\r\n                break;\r\n\r\n            case 'fromVertices':\r\n            case 'fromVerts':\r\n\r\n                var verts = GetFastValue(config, 'verts', null);\r\n\r\n                if (verts)\r\n                {\r\n                    //  Has the verts array come from Vertices.fromPath, or is it raw?\r\n                    if (typeof verts === 'string')\r\n                    {\r\n                        verts = Vertices.fromPath(verts);\r\n                    }\r\n\r\n                    if (this.body && !this.body.hasOwnProperty('temp'))\r\n                    {\r\n                        Body.setVertices(this.body, verts);\r\n\r\n                        body = this.body;\r\n                    }\r\n                    else\r\n                    {\r\n                        var flagInternal = GetFastValue(config, 'flagInternal', false);\r\n                        var removeCollinear = GetFastValue(config, 'removeCollinear', 0.01);\r\n                        var minimumArea = GetFastValue(config, 'minimumArea', 10);\r\n    \r\n                        body = Bodies.fromVertices(bodyX, bodyY, verts, options, flagInternal, removeCollinear, minimumArea);\r\n                    }\r\n                }\r\n\r\n                break;\r\n\r\n            case 'fromPhysicsEditor':\r\n                body = PhysicsEditorParser.parseBody(bodyX, bodyY, config, options);\r\n                break;\r\n\r\n            case 'fromPhysicsTracer':\r\n                body = PhysicsJSONParser.parseBody(bodyX, bodyY, config, options);\r\n                break;\r\n        }\r\n\r\n        if (body)\r\n        {\r\n            this.setExistingBody(body, config.addToWorld);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = SetBody;\r\n"]},"metadata":{},"sourceType":"script"}