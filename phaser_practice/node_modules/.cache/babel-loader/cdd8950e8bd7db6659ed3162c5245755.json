{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BitmapText = require('../static/BitmapText');\n\nvar Class = require('../../../utils/Class');\n\nvar Render = require('./DynamicBitmapTextRender');\n/**\r\n * @classdesc\r\n * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\r\n * \r\n * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\r\n * match the font structure.\r\n * \r\n * Dynamic Bitmap Text objects are different from Static Bitmap Text in that they invoke a callback for each\r\n * letter being rendered during the render pass. This callback allows you to manipulate the properties of\r\n * each letter being rendered, such as its position, scale or tint, allowing you to create interesting effects\r\n * like jiggling text, which can't be done with Static text. This means that Dynamic Text takes more processing\r\n * time, so only use them if you require the callback ability they have.\r\n *\r\n * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\r\n * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\r\n * processing the font texture in an image editor, applying fills and any other effects required.\r\n *\r\n * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\r\n *\r\n * To create a BitmapText data files you need a 3rd party app such as:\r\n *\r\n * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\r\n * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\r\n * Littera (Web-based, free): http://kvazars.com/littera/\r\n *\r\n * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\r\n * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\r\n *\r\n * @class DynamicBitmapText\r\n * @extends Phaser.GameObjects.BitmapText\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} x - The x coordinate of this Game Object in world space.\r\n * @param {number} y - The y coordinate of this Game Object in world space.\r\n * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n * @param {(string|string[])} [text] - The string, or array of strings, to be set as the content of this Bitmap Text.\r\n * @param {number} [size] - The font size of this Bitmap Text.\r\n * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object.\r\n */\n\n\nvar DynamicBitmapText = new Class({\n  Extends: BitmapText,\n  Mixins: [Render],\n  initialize: function DynamicBitmapText(scene, x, y, font, text, size, align) {\n    BitmapText.call(this, scene, x, y, font, text, size, align);\n    this.type = 'DynamicBitmapText';\n    /**\r\n     * The horizontal scroll position of the Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#scrollX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.scrollX = 0;\n    /**\r\n     * The vertical scroll position of the Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#scrollY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.scrollY = 0;\n    /**\r\n     * The crop width of the Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#cropWidth\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.cropWidth = 0;\n    /**\r\n     * The crop height of the Bitmap Text.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#cropHeight\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.cropHeight = 0;\n    /**\r\n     * A callback that alters how each character of the Bitmap Text is rendered.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#displayCallback\r\n     * @type {Phaser.Types.GameObjects.BitmapText.DisplayCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.displayCallback;\n    /**\r\n     * The data object that is populated during rendering, then passed to the displayCallback.\r\n     * You should modify this object then return it back from the callback. It's updated values\r\n     * will be used to render the specific glyph.\r\n     * \r\n     * Please note that if you need a reference to this object locally in your game code then you\r\n     * should shallow copy it, as it's updated and re-used for every glyph in the text.\r\n     *\r\n     * @name Phaser.GameObjects.DynamicBitmapText#callbackData\r\n     * @type {Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig}\r\n     * @since 3.11.0\r\n     */\n\n    this.callbackData = {\n      parent: this,\n      color: 0,\n      tint: {\n        topLeft: 0,\n        topRight: 0,\n        bottomLeft: 0,\n        bottomRight: 0\n      },\n      index: 0,\n      charCode: 0,\n      x: 0,\n      y: 0,\n      scale: 0,\n      rotation: 0,\n      data: 0\n    };\n  },\n\n  /**\r\n   * Set the crop size of this Bitmap Text.\r\n   *\r\n   * @method Phaser.GameObjects.DynamicBitmapText#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the crop.\r\n   * @param {number} height - The height of the crop.\r\n   *\r\n   * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n   */\n  setSize: function (width, height) {\n    this.cropWidth = width;\n    this.cropHeight = height;\n    return this;\n  },\n\n  /**\r\n   * Set a callback that alters how each character of the Bitmap Text is rendered.\r\n   *\r\n   * The callback receives a {@link Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig} object that contains information about the character that's\r\n   * about to be rendered.\r\n   *\r\n   * It should return an object with `x`, `y`, `scale` and `rotation` properties that will be used instead of the\r\n   * usual values when rendering.\r\n   *\r\n   * @method Phaser.GameObjects.DynamicBitmapText#setDisplayCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.BitmapText.DisplayCallback} callback - The display callback to set.\r\n   *\r\n   * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n   */\n  setDisplayCallback: function (callback) {\n    this.displayCallback = callback;\n    return this;\n  },\n\n  /**\r\n   * Set the horizontal scroll position of this Bitmap Text.\r\n   *\r\n   * @method Phaser.GameObjects.DynamicBitmapText#setScrollX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The horizontal scroll position to set.\r\n   *\r\n   * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n   */\n  setScrollX: function (value) {\n    this.scrollX = value;\n    return this;\n  },\n\n  /**\r\n   * Set the vertical scroll position of this Bitmap Text.\r\n   *\r\n   * @method Phaser.GameObjects.DynamicBitmapText#setScrollY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The vertical scroll position to set.\r\n   *\r\n   * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n   */\n  setScrollY: function (value) {\n    this.scrollY = value;\n    return this;\n  }\n});\nmodule.exports = DynamicBitmapText;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapText.js"],"names":["BitmapText","require","Class","Render","DynamicBitmapText","Extends","Mixins","initialize","scene","x","y","font","text","size","align","call","type","scrollX","scrollY","cropWidth","cropHeight","displayCallback","callbackData","parent","color","tint","topLeft","topRight","bottomLeft","bottomRight","index","charCode","scale","rotation","data","setSize","width","height","setDisplayCallback","callback","setScrollX","value","setScrollY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,2BAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,IAAIG,iBAAiB,GAAG,IAAIF,KAAJ,CAAU;AAE9BG,EAAAA,OAAO,EAAEL,UAFqB;AAI9BM,EAAAA,MAAM,EAAE,CACJH,MADI,CAJsB;AAQ9BI,EAAAA,UAAU,EAEV,SAASH,iBAAT,CAA4BI,KAA5B,EAAmCC,CAAnC,EAAsCC,CAAtC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,IAArD,EAA2DC,KAA3D,EACA;AACId,IAAAA,UAAU,CAACe,IAAX,CAAgB,IAAhB,EAAsBP,KAAtB,EAA6BC,CAA7B,EAAgCC,CAAhC,EAAmCC,IAAnC,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,KAArD;AAEA,SAAKE,IAAL,GAAY,mBAAZ;AAEA;;;;;;;;;AAQA,SAAKC,OAAL,GAAe,CAAf;AAEA;;;;;;;;;AAQA,SAAKC,OAAL,GAAe,CAAf;AAEA;;;;;;;;;AAQA,SAAKC,SAAL,GAAiB,CAAjB;AAEA;;;;;;;;;AAQA,SAAKC,UAAL,GAAkB,CAAlB;AAEA;;;;;;;;AAOA,SAAKC,eAAL;AAEA;;;;;;;;;;;;;AAYA,SAAKC,YAAL,GAAoB;AAChBC,MAAAA,MAAM,EAAE,IADQ;AAEhBC,MAAAA,KAAK,EAAE,CAFS;AAGhBC,MAAAA,IAAI,EAAE;AACFC,QAAAA,OAAO,EAAE,CADP;AAEFC,QAAAA,QAAQ,EAAE,CAFR;AAGFC,QAAAA,UAAU,EAAE,CAHV;AAIFC,QAAAA,WAAW,EAAE;AAJX,OAHU;AAShBC,MAAAA,KAAK,EAAE,CATS;AAUhBC,MAAAA,QAAQ,EAAE,CAVM;AAWhBtB,MAAAA,CAAC,EAAE,CAXa;AAYhBC,MAAAA,CAAC,EAAE,CAZa;AAahBsB,MAAAA,KAAK,EAAE,CAbS;AAchBC,MAAAA,QAAQ,EAAE,CAdM;AAehBC,MAAAA,IAAI,EAAE;AAfU,KAApB;AAiBH,GA9F6B;;AAgG9B;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,UAAUC,KAAV,EAAiBC,MAAjB,EACT;AACI,SAAKlB,SAAL,GAAiBiB,KAAjB;AACA,SAAKhB,UAAL,GAAkBiB,MAAlB;AAEA,WAAO,IAAP;AACH,GAjH6B;;AAmH9B;;;;;;;;;;;;;;;;AAgBAC,EAAAA,kBAAkB,EAAE,UAAUC,QAAV,EACpB;AACI,SAAKlB,eAAL,GAAuBkB,QAAvB;AAEA,WAAO,IAAP;AACH,GAxI6B;;AA0I9B;;;;;;;;;;AAUAC,EAAAA,UAAU,EAAE,UAAUC,KAAV,EACZ;AACI,SAAKxB,OAAL,GAAewB,KAAf;AAEA,WAAO,IAAP;AACH,GAzJ6B;;AA2J9B;;;;;;;;;;AAUAC,EAAAA,UAAU,EAAE,UAAUD,KAAV,EACZ;AACI,SAAKvB,OAAL,GAAeuB,KAAf;AAEA,WAAO,IAAP;AACH;AA1K6B,CAAV,CAAxB;AA8KAE,MAAM,CAACC,OAAP,GAAiBxC,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BitmapText = require('../static/BitmapText');\r\nvar Class = require('../../../utils/Class');\r\nvar Render = require('./DynamicBitmapTextRender');\r\n\r\n/**\r\n * @classdesc\r\n * BitmapText objects work by taking a texture file and an XML or JSON file that describes the font structure.\r\n * \r\n * During rendering for each letter of the text is rendered to the display, proportionally spaced out and aligned to\r\n * match the font structure.\r\n * \r\n * Dynamic Bitmap Text objects are different from Static Bitmap Text in that they invoke a callback for each\r\n * letter being rendered during the render pass. This callback allows you to manipulate the properties of\r\n * each letter being rendered, such as its position, scale or tint, allowing you to create interesting effects\r\n * like jiggling text, which can't be done with Static text. This means that Dynamic Text takes more processing\r\n * time, so only use them if you require the callback ability they have.\r\n *\r\n * BitmapText objects are less flexible than Text objects, in that they have less features such as shadows, fills and the ability\r\n * to use Web Fonts, however you trade this flexibility for rendering speed. You can also create visually compelling BitmapTexts by\r\n * processing the font texture in an image editor, applying fills and any other effects required.\r\n *\r\n * To create multi-line text insert \\r, \\n or \\r\\n escape codes into the text string.\r\n *\r\n * To create a BitmapText data files you need a 3rd party app such as:\r\n *\r\n * BMFont (Windows, free): http://www.angelcode.com/products/bmfont/\r\n * Glyph Designer (OS X, commercial): http://www.71squared.com/en/glyphdesigner\r\n * Littera (Web-based, free): http://kvazars.com/littera/\r\n *\r\n * For most use cases it is recommended to use XML. If you wish to use JSON, the formatting should be equal to the result of\r\n * converting a valid XML file through the popular X2JS library. An online tool for conversion can be found here: http://codebeautify.org/xmltojson\r\n *\r\n * @class DynamicBitmapText\r\n * @extends Phaser.GameObjects.BitmapText\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} x - The x coordinate of this Game Object in world space.\r\n * @param {number} y - The y coordinate of this Game Object in world space.\r\n * @param {string} font - The key of the font to use from the Bitmap Font cache.\r\n * @param {(string|string[])} [text] - The string, or array of strings, to be set as the content of this Bitmap Text.\r\n * @param {number} [size] - The font size of this Bitmap Text.\r\n * @param {integer} [align=0] - The alignment of the text in a multi-line BitmapText object.\r\n */\r\nvar DynamicBitmapText = new Class({\r\n\r\n    Extends: BitmapText,\r\n\r\n    Mixins: [\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicBitmapText (scene, x, y, font, text, size, align)\r\n    {\r\n        BitmapText.call(this, scene, x, y, font, text, size, align);\r\n\r\n        this.type = 'DynamicBitmapText';\r\n\r\n        /**\r\n         * The horizontal scroll position of the Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#scrollX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.scrollX = 0;\r\n\r\n        /**\r\n         * The vertical scroll position of the Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#scrollY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.scrollY = 0;\r\n\r\n        /**\r\n         * The crop width of the Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#cropWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.cropWidth = 0;\r\n\r\n        /**\r\n         * The crop height of the Bitmap Text.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#cropHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.cropHeight = 0;\r\n\r\n        /**\r\n         * A callback that alters how each character of the Bitmap Text is rendered.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#displayCallback\r\n         * @type {Phaser.Types.GameObjects.BitmapText.DisplayCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.displayCallback;\r\n\r\n        /**\r\n         * The data object that is populated during rendering, then passed to the displayCallback.\r\n         * You should modify this object then return it back from the callback. It's updated values\r\n         * will be used to render the specific glyph.\r\n         * \r\n         * Please note that if you need a reference to this object locally in your game code then you\r\n         * should shallow copy it, as it's updated and re-used for every glyph in the text.\r\n         *\r\n         * @name Phaser.GameObjects.DynamicBitmapText#callbackData\r\n         * @type {Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig}\r\n         * @since 3.11.0\r\n         */\r\n        this.callbackData = {\r\n            parent: this,\r\n            color: 0,\r\n            tint: {\r\n                topLeft: 0,\r\n                topRight: 0,\r\n                bottomLeft: 0,\r\n                bottomRight: 0\r\n            },\r\n            index: 0,\r\n            charCode: 0,\r\n            x: 0,\r\n            y: 0,\r\n            scale: 0,\r\n            rotation: 0,\r\n            data: 0\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Set the crop size of this Bitmap Text.\r\n     *\r\n     * @method Phaser.GameObjects.DynamicBitmapText#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the crop.\r\n     * @param {number} height - The height of the crop.\r\n     *\r\n     * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        this.cropWidth = width;\r\n        this.cropHeight = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a callback that alters how each character of the Bitmap Text is rendered.\r\n     *\r\n     * The callback receives a {@link Phaser.Types.GameObjects.BitmapText.DisplayCallbackConfig} object that contains information about the character that's\r\n     * about to be rendered.\r\n     *\r\n     * It should return an object with `x`, `y`, `scale` and `rotation` properties that will be used instead of the\r\n     * usual values when rendering.\r\n     *\r\n     * @method Phaser.GameObjects.DynamicBitmapText#setDisplayCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.BitmapText.DisplayCallback} callback - The display callback to set.\r\n     *\r\n     * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n     */\r\n    setDisplayCallback: function (callback)\r\n    {\r\n        this.displayCallback = callback;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the horizontal scroll position of this Bitmap Text.\r\n     *\r\n     * @method Phaser.GameObjects.DynamicBitmapText#setScrollX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The horizontal scroll position to set.\r\n     *\r\n     * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n     */\r\n    setScrollX: function (value)\r\n    {\r\n        this.scrollX = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the vertical scroll position of this Bitmap Text.\r\n     *\r\n     * @method Phaser.GameObjects.DynamicBitmapText#setScrollY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The vertical scroll position to set.\r\n     *\r\n     * @return {Phaser.GameObjects.DynamicBitmapText} This Game Object.\r\n     */\r\n    setScrollY: function (value)\r\n    {\r\n        this.scrollY = value;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicBitmapText;\r\n"]},"metadata":{},"sourceType":"script"}