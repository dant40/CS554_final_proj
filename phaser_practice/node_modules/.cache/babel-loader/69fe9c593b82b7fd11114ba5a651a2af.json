{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar Class = require('../utils/Class');\n\nvar IsSizePowerOfTwo = require('../math/pow2/IsSizePowerOfTwo');\n\nvar ScaleModes = require('../renderer/ScaleModes');\n/**\r\n * @classdesc\r\n * A Texture Source is the encapsulation of the actual source data for a Texture.\r\n * \r\n * This is typically an Image Element, loaded from the file system or network, a Canvas Element or a Video Element.\r\n *\r\n * A Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.\r\n *\r\n * @class TextureSource\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture this TextureSource belongs to.\r\n * @param {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|Phaser.GameObjects.RenderTexture|WebGLTexture)} source - The source image data.\r\n * @param {integer} [width] - Optional width of the source image. If not given it's derived from the source itself.\r\n * @param {integer} [height] - Optional height of the source image. If not given it's derived from the source itself.\r\n * @param {boolean} [flipY=false] - Sets the `UNPACK_FLIP_Y_WEBGL` flag the WebGL Texture uses during upload.\r\n */\n\n\nvar TextureSource = new Class({\n  initialize: function TextureSource(texture, source, width, height, flipY) {\n    if (flipY === undefined) {\n      flipY = false;\n    }\n\n    var game = texture.manager.game;\n    /**\r\n     * The Texture this TextureSource belongs to.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#renderer\r\n     * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n     * @since 3.7.0\r\n     */\n\n    this.renderer = game.renderer;\n    /**\r\n     * The Texture this TextureSource belongs to.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = texture;\n    /**\r\n     * The source of the image data.\r\n     * \r\n     * This is either an Image Element, a Canvas Element, a Video Element, a RenderTexture or a WebGLTexture.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#source\r\n     * @type {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|Phaser.GameObjects.RenderTexture|WebGLTexture)}\r\n     * @since 3.12.0\r\n     */\n\n    this.source = source;\n    /**\r\n     * The image data.\r\n     * \r\n     * This is either an Image element, Canvas element or a Video Element.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#image\r\n     * @type {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)}\r\n     * @since 3.0.0\r\n     */\n\n    this.image = source;\n    /**\r\n     * Currently un-used.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#compressionAlgorithm\r\n     * @type {integer}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.compressionAlgorithm = null;\n    /**\r\n     * The resolution of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#resolution\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.resolution = 1;\n    /**\r\n     * The width of the source image. If not specified in the constructor it will check\r\n     * the `naturalWidth` and then `width` properties of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#width\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width || source.naturalWidth || source.videoWidth || source.width || 0;\n    /**\r\n     * The height of the source image. If not specified in the constructor it will check\r\n     * the `naturalHeight` and then `height` properties of the source image.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#height\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height || source.naturalHeight || source.videoHeight || source.height || 0;\n    /**\r\n     * The Scale Mode the image will use when rendering.\r\n     * Either Linear or Nearest.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#scaleMode\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleMode = ScaleModes.DEFAULT;\n    /**\r\n     * Is the source image a Canvas Element?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isCanvas\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.isCanvas = source instanceof HTMLCanvasElement;\n    /**\r\n     * Is the source image a Video Element?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isVideo\r\n     * @type {boolean}\r\n     * @since 3.20.0\r\n     */\n\n    this.isVideo = window.hasOwnProperty('HTMLVideoElement') && source instanceof HTMLVideoElement;\n    /**\r\n     * Is the source image a Render Texture?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isRenderTexture\r\n     * @type {boolean}\r\n     * @since 3.12.0\r\n     */\n\n    this.isRenderTexture = source.type === 'RenderTexture';\n    /**\r\n     * Is the source image a WebGLTexture?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isGLTexture\r\n     * @type {boolean}\r\n     * @since 3.19.0\r\n     */\n\n    this.isGLTexture = window.hasOwnProperty('WebGLTexture') && source instanceof WebGLTexture;\n    /**\r\n     * Are the source image dimensions a power of two?\r\n     *\r\n     * @name Phaser.Textures.TextureSource#isPowerOf2\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.isPowerOf2 = IsSizePowerOfTwo(this.width, this.height);\n    /**\r\n     * The WebGL Texture of the source image. If this TextureSource is driven from a WebGLTexture\r\n     * already, then this is a reference to that WebGLTexture.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.glTexture = null;\n    /**\r\n     * Sets the `UNPACK_FLIP_Y_WEBGL` flag the WebGL Texture uses during upload.\r\n     *\r\n     * @name Phaser.Textures.TextureSource#flipY\r\n     * @type {boolean}\r\n     * @since 3.20.0\r\n     */\n\n    this.flipY = flipY;\n    this.init(game);\n  },\n\n  /**\r\n   * Creates a WebGL Texture, if required, and sets the Texture filter mode.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#init\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Game} game - A reference to the Phaser Game instance.\r\n   */\n  init: function (game) {\n    if (this.renderer) {\n      if (this.renderer.gl) {\n        if (this.isCanvas) {\n          this.glTexture = this.renderer.createCanvasTexture(this.image, false, this.flipY);\n        } else if (this.isVideo) {\n          this.glTexture = this.renderer.createVideoTexture(this.image, false, this.flipY);\n        } else if (this.isRenderTexture) {\n          this.image = this.source.canvas;\n          this.glTexture = this.renderer.createTextureFromSource(null, this.width, this.height, this.scaleMode);\n        } else if (this.isGLTexture) {\n          this.glTexture = this.source;\n        } else {\n          this.glTexture = this.renderer.createTextureFromSource(this.image, this.width, this.height, this.scaleMode);\n        }\n      } else if (this.isRenderTexture) {\n        this.image = this.source.canvas;\n      }\n    }\n\n    if (!game.config.antialias) {\n      this.setFilter(1);\n    }\n  },\n\n  /**\r\n   * Sets the Filter Mode for this Texture.\r\n   *\r\n   * The mode can be either Linear, the default, or Nearest.\r\n   *\r\n   * For pixel-art you should use Nearest.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#setFilter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n   */\n  setFilter: function (filterMode) {\n    if (this.renderer.gl) {\n      this.renderer.setTextureFilter(this.glTexture, filterMode);\n    }\n\n    this.scaleMode = filterMode;\n  },\n\n  /**\r\n   * Sets the `UNPACK_FLIP_Y_WEBGL` flag for the WebGL Texture during texture upload.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#setFlipY\r\n   * @since 3.20.0\r\n   *\r\n   * @param {boolean} [value=true] - Should the WebGL Texture be flipped on the Y axis on texture upload or not?\r\n   */\n  setFlipY: function (value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.flipY = value;\n    return this;\n  },\n\n  /**\r\n   * If this TextureSource is backed by a Canvas and is running under WebGL,\r\n   * it updates the WebGLTexture using the canvas data.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#update\r\n   * @since 3.7.0\r\n   */\n  update: function () {\n    var gl = this.renderer.gl;\n\n    if (gl && this.isCanvas) {\n      this.glTexture = this.renderer.updateCanvasTexture(this.image, this.glTexture, this.flipY);\n    } else if (gl && this.isVideo) {\n      this.glTexture = this.renderer.updateVideoTexture(this.image, this.glTexture, this.flipY);\n    }\n  },\n\n  /**\r\n   * Destroys this Texture Source and nulls the references.\r\n   *\r\n   * @method Phaser.Textures.TextureSource#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    if (this.glTexture) {\n      this.renderer.deleteTexture(this.glTexture);\n    }\n\n    if (this.isCanvas) {\n      CanvasPool.remove(this.image);\n    }\n\n    this.renderer = null;\n    this.texture = null;\n    this.source = null;\n    this.image = null;\n    this.glTexture = null;\n  }\n});\nmodule.exports = TextureSource;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/TextureSource.js"],"names":["CanvasPool","require","Class","IsSizePowerOfTwo","ScaleModes","TextureSource","initialize","texture","source","width","height","flipY","undefined","game","manager","renderer","image","compressionAlgorithm","resolution","naturalWidth","videoWidth","naturalHeight","videoHeight","scaleMode","DEFAULT","isCanvas","HTMLCanvasElement","isVideo","window","hasOwnProperty","HTMLVideoElement","isRenderTexture","type","isGLTexture","WebGLTexture","isPowerOf2","glTexture","init","gl","createCanvasTexture","createVideoTexture","canvas","createTextureFromSource","config","antialias","setFilter","filterMode","setTextureFilter","setFlipY","value","update","updateCanvasTexture","updateVideoTexture","destroy","deleteTexture","remove","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar Class = require('../utils/Class');\r\nvar IsSizePowerOfTwo = require('../math/pow2/IsSizePowerOfTwo');\r\nvar ScaleModes = require('../renderer/ScaleModes');\r\n\r\n/**\r\n * @classdesc\r\n * A Texture Source is the encapsulation of the actual source data for a Texture.\r\n * \r\n * This is typically an Image Element, loaded from the file system or network, a Canvas Element or a Video Element.\r\n *\r\n * A Texture can contain multiple Texture Sources, which only happens when a multi-atlas is loaded.\r\n *\r\n * @class TextureSource\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture this TextureSource belongs to.\r\n * @param {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|Phaser.GameObjects.RenderTexture|WebGLTexture)} source - The source image data.\r\n * @param {integer} [width] - Optional width of the source image. If not given it's derived from the source itself.\r\n * @param {integer} [height] - Optional height of the source image. If not given it's derived from the source itself.\r\n * @param {boolean} [flipY=false] - Sets the `UNPACK_FLIP_Y_WEBGL` flag the WebGL Texture uses during upload.\r\n */\r\nvar TextureSource = new Class({\r\n\r\n    initialize:\r\n\r\n    function TextureSource (texture, source, width, height, flipY)\r\n    {\r\n        if (flipY === undefined) { flipY = false; }\r\n\r\n        var game = texture.manager.game;\r\n\r\n        /**\r\n         * The Texture this TextureSource belongs to.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#renderer\r\n         * @type {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)}\r\n         * @since 3.7.0\r\n         */\r\n        this.renderer = game.renderer;\r\n\r\n        /**\r\n         * The Texture this TextureSource belongs to.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = texture;\r\n\r\n        /**\r\n         * The source of the image data.\r\n         * \r\n         * This is either an Image Element, a Canvas Element, a Video Element, a RenderTexture or a WebGLTexture.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#source\r\n         * @type {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|Phaser.GameObjects.RenderTexture|WebGLTexture)}\r\n         * @since 3.12.0\r\n         */\r\n        this.source = source;\r\n\r\n        /**\r\n         * The image data.\r\n         * \r\n         * This is either an Image element, Canvas element or a Video Element.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#image\r\n         * @type {(HTMLImageElement|HTMLCanvasElement|HTMLVideoElement)}\r\n         * @since 3.0.0\r\n         */\r\n        this.image = source;\r\n\r\n        /**\r\n         * Currently un-used.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#compressionAlgorithm\r\n         * @type {integer}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.compressionAlgorithm = null;\r\n\r\n        /**\r\n         * The resolution of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#resolution\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.resolution = 1;\r\n\r\n        /**\r\n         * The width of the source image. If not specified in the constructor it will check\r\n         * the `naturalWidth` and then `width` properties of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#width\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width || source.naturalWidth || source.videoWidth || source.width || 0;\r\n\r\n        /**\r\n         * The height of the source image. If not specified in the constructor it will check\r\n         * the `naturalHeight` and then `height` properties of the source image.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#height\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height || source.naturalHeight || source.videoHeight || source.height || 0;\r\n\r\n        /**\r\n         * The Scale Mode the image will use when rendering.\r\n         * Either Linear or Nearest.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#scaleMode\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleMode = ScaleModes.DEFAULT;\r\n\r\n        /**\r\n         * Is the source image a Canvas Element?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isCanvas\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.isCanvas = (source instanceof HTMLCanvasElement);\r\n\r\n        /**\r\n         * Is the source image a Video Element?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isVideo\r\n         * @type {boolean}\r\n         * @since 3.20.0\r\n         */\r\n        this.isVideo = (window.hasOwnProperty('HTMLVideoElement') && source instanceof HTMLVideoElement);\r\n\r\n        /**\r\n         * Is the source image a Render Texture?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isRenderTexture\r\n         * @type {boolean}\r\n         * @since 3.12.0\r\n         */\r\n        this.isRenderTexture = (source.type === 'RenderTexture');\r\n\r\n        /**\r\n         * Is the source image a WebGLTexture?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isGLTexture\r\n         * @type {boolean}\r\n         * @since 3.19.0\r\n         */\r\n        this.isGLTexture = (window.hasOwnProperty('WebGLTexture') && source instanceof WebGLTexture);\r\n\r\n        /**\r\n         * Are the source image dimensions a power of two?\r\n         *\r\n         * @name Phaser.Textures.TextureSource#isPowerOf2\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.isPowerOf2 = IsSizePowerOfTwo(this.width, this.height);\r\n\r\n        /**\r\n         * The WebGL Texture of the source image. If this TextureSource is driven from a WebGLTexture\r\n         * already, then this is a reference to that WebGLTexture.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#glTexture\r\n         * @type {?WebGLTexture}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        /**\r\n         * Sets the `UNPACK_FLIP_Y_WEBGL` flag the WebGL Texture uses during upload.\r\n         *\r\n         * @name Phaser.Textures.TextureSource#flipY\r\n         * @type {boolean}\r\n         * @since 3.20.0\r\n         */\r\n        this.flipY = flipY;\r\n\r\n        this.init(game);\r\n    },\r\n\r\n    /**\r\n     * Creates a WebGL Texture, if required, and sets the Texture filter mode.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#init\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Game} game - A reference to the Phaser Game instance.\r\n     */\r\n    init: function (game)\r\n    {\r\n        if (this.renderer)\r\n        {\r\n            if (this.renderer.gl)\r\n            {\r\n                if (this.isCanvas)\r\n                {\r\n                    this.glTexture = this.renderer.createCanvasTexture(this.image, false, this.flipY);\r\n                }\r\n                else if (this.isVideo)\r\n                {\r\n                    this.glTexture = this.renderer.createVideoTexture(this.image, false, this.flipY);\r\n                }\r\n                else if (this.isRenderTexture)\r\n                {\r\n                    this.image = this.source.canvas;\r\n                 \r\n                    this.glTexture = this.renderer.createTextureFromSource(null, this.width, this.height, this.scaleMode);\r\n                }\r\n                else if (this.isGLTexture)\r\n                {\r\n                    this.glTexture = this.source;\r\n                }\r\n                else\r\n                {\r\n                    this.glTexture = this.renderer.createTextureFromSource(this.image, this.width, this.height, this.scaleMode);\r\n                }\r\n            }\r\n            else if (this.isRenderTexture)\r\n            {\r\n                this.image = this.source.canvas;\r\n            }\r\n        }\r\n\r\n        if (!game.config.antialias)\r\n        {\r\n            this.setFilter(1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the Filter Mode for this Texture.\r\n     *\r\n     * The mode can be either Linear, the default, or Nearest.\r\n     *\r\n     * For pixel-art you should use Nearest.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#setFilter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n     */\r\n    setFilter: function (filterMode)\r\n    {\r\n        if (this.renderer.gl)\r\n        {\r\n            this.renderer.setTextureFilter(this.glTexture, filterMode);\r\n        }\r\n\r\n        this.scaleMode = filterMode;\r\n    },\r\n\r\n    /**\r\n     * Sets the `UNPACK_FLIP_Y_WEBGL` flag for the WebGL Texture during texture upload.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#setFlipY\r\n     * @since 3.20.0\r\n     *\r\n     * @param {boolean} [value=true] - Should the WebGL Texture be flipped on the Y axis on texture upload or not?\r\n     */\r\n    setFlipY: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.flipY = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If this TextureSource is backed by a Canvas and is running under WebGL,\r\n     * it updates the WebGLTexture using the canvas data.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#update\r\n     * @since 3.7.0\r\n     */\r\n    update: function ()\r\n    {\r\n        var gl = this.renderer.gl;\r\n\r\n        if (gl && this.isCanvas)\r\n        {\r\n            this.glTexture = this.renderer.updateCanvasTexture(this.image, this.glTexture, this.flipY);\r\n        }\r\n        else if (gl && this.isVideo)\r\n        {\r\n            this.glTexture = this.renderer.updateVideoTexture(this.image, this.glTexture, this.flipY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Texture Source and nulls the references.\r\n     *\r\n     * @method Phaser.Textures.TextureSource#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        if (this.glTexture)\r\n        {\r\n            this.renderer.deleteTexture(this.glTexture);\r\n        }\r\n\r\n        if (this.isCanvas)\r\n        {\r\n            CanvasPool.remove(this.image);\r\n        }\r\n\r\n        this.renderer = null;\r\n        this.texture = null;\r\n        this.source = null;\r\n        this.image = null;\r\n        this.glTexture = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextureSource;\r\n"]},"metadata":{},"sourceType":"script"}