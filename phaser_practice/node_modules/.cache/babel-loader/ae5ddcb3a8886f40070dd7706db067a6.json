{"ast":null,"code":"/**\r\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\r\n*\r\n* @class Plugin\r\n*/\nvar Plugin = {};\nmodule.exports = Plugin;\n\nvar Common = require('./Common');\n\n(function () {\n  Plugin._registry = {};\n  /**\r\n   * Registers a plugin object so it can be resolved later by name.\r\n   * @method register\r\n   * @param plugin {} The plugin to register.\r\n   * @return {object} The plugin.\r\n   */\n\n  Plugin.register = function (plugin) {\n    if (!Plugin.isPlugin(plugin)) {\n      Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n    }\n\n    if (plugin.name in Plugin._registry) {\n      var registered = Plugin._registry[plugin.name],\n          pluginVersion = Plugin.versionParse(plugin.version).number,\n          registeredVersion = Plugin.versionParse(registered.version).number;\n\n      if (pluginVersion > registeredVersion) {\n        Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n        Plugin._registry[plugin.name] = plugin;\n      } else if (pluginVersion < registeredVersion) {\n        Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n      } else if (plugin !== registered) {\n        Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n      }\n    } else {\n      Plugin._registry[plugin.name] = plugin;\n    }\n\n    return plugin;\n  };\n  /**\r\n   * Resolves a dependency to a plugin object from the registry if it exists. \r\n   * The `dependency` may contain a version, but only the name matters when resolving.\r\n   * @method resolve\r\n   * @param dependency {string} The dependency.\r\n   * @return {object} The plugin if resolved, otherwise `undefined`.\r\n   */\n\n\n  Plugin.resolve = function (dependency) {\n    return Plugin._registry[Plugin.dependencyParse(dependency).name];\n  };\n  /**\r\n   * Returns a pretty printed plugin name and version.\r\n   * @method toString\r\n   * @param plugin {} The plugin.\r\n   * @return {string} Pretty printed plugin name and version.\r\n   */\n\n\n  Plugin.toString = function (plugin) {\n    return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n  };\n  /**\r\n   * Returns `true` if the object meets the minimum standard to be considered a plugin.\r\n   * This means it must define the following properties:\r\n   * - `name`\r\n   * - `version`\r\n   * - `install`\r\n   * @method isPlugin\r\n   * @param obj {} The obj to test.\r\n   * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\r\n   */\n\n\n  Plugin.isPlugin = function (obj) {\n    return obj && obj.name && obj.version && obj.install;\n  };\n  /**\r\n   * Returns `true` if a plugin with the given `name` been installed on `module`.\r\n   * @method isUsed\r\n   * @param module {} The module.\r\n   * @param name {string} The plugin name.\r\n   * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\r\n   */\n\n\n  Plugin.isUsed = function (module, name) {\n    return module.used.indexOf(name) > -1;\n  };\n  /**\r\n   * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\r\n   * If `plugin.for` is not specified then it is assumed to be applicable.\r\n   * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\r\n   * @method isFor\r\n   * @param plugin {} The plugin.\r\n   * @param module {} The module.\r\n   * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\r\n   */\n\n\n  Plugin.isFor = function (plugin, module) {\n    var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n    return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n  };\n  /**\r\n   * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\r\n   * For installing plugins on `Matter` see the convenience function `Matter.use`.\r\n   * Plugins may be specified either by their name or a reference to the plugin object.\r\n   * Plugins themselves may specify further dependencies, but each plugin is installed only once.\r\n   * Order is important, a topological sort is performed to find the best resulting order of installation.\r\n   * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\r\n   * This function logs the resulting status of each dependency in the console, along with any warnings.\r\n   * - A green tick ‚úÖ indicates a dependency was resolved and installed.\r\n   * - An orange diamond üî∂ indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\r\n   * - A red cross ‚ùå indicates a dependency could not be resolved.\r\n   * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\r\n   * @method use\r\n   * @param module {} The module install plugins on.\r\n   * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\r\n   */\n\n\n  Plugin.use = function (module, plugins) {\n    module.uses = (module.uses || []).concat(plugins || []);\n\n    if (module.uses.length === 0) {\n      Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n      return;\n    }\n\n    var dependencies = Plugin.dependencies(module),\n        sortedDependencies = Common.topologicalSort(dependencies),\n        status = [];\n\n    for (var i = 0; i < sortedDependencies.length; i += 1) {\n      if (sortedDependencies[i] === module.name) {\n        continue;\n      }\n\n      var plugin = Plugin.resolve(sortedDependencies[i]);\n\n      if (!plugin) {\n        status.push('‚ùå ' + sortedDependencies[i]);\n        continue;\n      }\n\n      if (Plugin.isUsed(module, plugin.name)) {\n        continue;\n      }\n\n      if (!Plugin.isFor(plugin, module)) {\n        Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n        plugin._warned = true;\n      }\n\n      if (plugin.install) {\n        plugin.install(module);\n      } else {\n        Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n        plugin._warned = true;\n      }\n\n      if (plugin._warned) {\n        status.push('üî∂ ' + Plugin.toString(plugin));\n        delete plugin._warned;\n      } else {\n        status.push('‚úÖ ' + Plugin.toString(plugin));\n      }\n\n      module.used.push(plugin.name);\n    }\n\n    if (status.length > 0 && !plugin.silent) {\n      Common.info(status.join('  '));\n    }\n  };\n  /**\r\n   * Recursively finds all of a module's dependencies and returns a flat dependency graph.\r\n   * @method dependencies\r\n   * @param module {} The module.\r\n   * @return {object} A dependency graph.\r\n   */\n\n\n  Plugin.dependencies = function (module, tracked) {\n    var parsedBase = Plugin.dependencyParse(module),\n        name = parsedBase.name;\n    tracked = tracked || {};\n\n    if (name in tracked) {\n      return;\n    }\n\n    module = Plugin.resolve(module) || module;\n    tracked[name] = Common.map(module.uses || [], function (dependency) {\n      if (Plugin.isPlugin(dependency)) {\n        Plugin.register(dependency);\n      }\n\n      var parsed = Plugin.dependencyParse(dependency),\n          resolved = Plugin.resolve(dependency);\n\n      if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n        Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n        resolved._warned = true;\n        module._warned = true;\n      } else if (!resolved) {\n        Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n        module._warned = true;\n      }\n\n      return parsed.name;\n    });\n\n    for (var i = 0; i < tracked[name].length; i += 1) {\n      Plugin.dependencies(tracked[name][i], tracked);\n    }\n\n    return tracked;\n  };\n  /**\r\n   * Parses a dependency string into its components.\r\n   * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\r\n   * See documentation for `Plugin.versionParse` for a description of the format.\r\n   * This function can also handle dependencies that are already resolved (e.g. a module object).\r\n   * @method dependencyParse\r\n   * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\r\n   * @return {object} The dependency parsed into its components.\r\n   */\n\n\n  Plugin.dependencyParse = function (dependency) {\n    if (Common.isString(dependency)) {\n      var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\n\n      if (!pattern.test(dependency)) {\n        Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n      }\n\n      return {\n        name: dependency.split('@')[0],\n        range: dependency.split('@')[1] || '*'\n      };\n    }\n\n    return {\n      name: dependency.name,\n      range: dependency.range || dependency.version\n    };\n  };\n  /**\r\n   * Parses a version string into its components.  \r\n   * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\r\n   * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\r\n   * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\r\n   * Only the following range types are supported:\r\n   * - Tilde ranges e.g. `~1.2.3`\r\n   * - Caret ranges e.g. `^1.2.3`\r\n   * - Exact version e.g. `1.2.3`\r\n   * - Any version `*`\r\n   * @method versionParse\r\n   * @param range {string} The version string.\r\n   * @return {object} The version range parsed into its components.\r\n   */\n\n\n  Plugin.versionParse = function (range) {\n    var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\n\n    if (!pattern.test(range)) {\n      Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n    }\n\n    var identifiers = range.split('-');\n    range = identifiers[0];\n    var isRange = isNaN(Number(range[0])),\n        version = isRange ? range.substr(1) : range,\n        parts = Common.map(version.split('.'), function (part) {\n      return Number(part);\n    });\n    return {\n      isRange: isRange,\n      version: version,\n      range: range,\n      operator: isRange ? range[0] : '',\n      parts: parts,\n      prerelease: identifiers[1],\n      number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\n    };\n  };\n  /**\r\n   * Returns `true` if `version` satisfies the given `range`.\r\n   * See documentation for `Plugin.versionParse` for a description of the format.\r\n   * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\r\n   * @method versionSatisfies\r\n   * @param version {string} The version string.\r\n   * @param range {string} The range string.\r\n   * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\r\n   */\n\n\n  Plugin.versionSatisfies = function (version, range) {\n    range = range || '*';\n    var rangeParsed = Plugin.versionParse(range),\n        rangeParts = rangeParsed.parts,\n        versionParsed = Plugin.versionParse(version),\n        versionParts = versionParsed.parts;\n\n    if (rangeParsed.isRange) {\n      if (rangeParsed.operator === '*' || version === '*') {\n        return true;\n      }\n\n      if (rangeParsed.operator === '~') {\n        return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n      }\n\n      if (rangeParsed.operator === '^') {\n        if (rangeParts[0] > 0) {\n          return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\n        }\n\n        if (rangeParts[1] > 0) {\n          return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\n        }\n\n        return versionParts[2] === rangeParts[2];\n      }\n    }\n\n    return version === range || version === '*';\n  };\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/core/Plugin.js"],"names":["Plugin","module","exports","Common","require","_registry","register","plugin","isPlugin","warn","toString","name","registered","pluginVersion","versionParse","version","number","registeredVersion","resolve","dependency","dependencyParse","range","obj","install","isUsed","used","indexOf","isFor","parsed","for","versionSatisfies","use","plugins","uses","concat","length","dependencies","sortedDependencies","topologicalSort","status","i","push","_warned","silent","info","join","tracked","parsedBase","map","resolved","isString","pattern","test","split","identifiers","isRange","isNaN","Number","substr","parts","part","operator","prerelease","rangeParsed","rangeParts","versionParsed","versionParts"],"mappings":"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","sourcesContent":["/**\r\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\r\n*\r\n* @class Plugin\r\n*/\r\n\r\nvar Plugin = {};\r\n\r\nmodule.exports = Plugin;\r\n\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    Plugin._registry = {};\r\n\r\n    /**\r\n     * Registers a plugin object so it can be resolved later by name.\r\n     * @method register\r\n     * @param plugin {} The plugin to register.\r\n     * @return {object} The plugin.\r\n     */\r\n    Plugin.register = function(plugin) {\r\n        if (!Plugin.isPlugin(plugin)) {\r\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\r\n        }\r\n\r\n        if (plugin.name in Plugin._registry) {\r\n            var registered = Plugin._registry[plugin.name],\r\n                pluginVersion = Plugin.versionParse(plugin.version).number,\r\n                registeredVersion = Plugin.versionParse(registered.version).number;\r\n\r\n            if (pluginVersion > registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\r\n                Plugin._registry[plugin.name] = plugin;\r\n            } else if (pluginVersion < registeredVersion) {\r\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\r\n            } else if (plugin !== registered) {\r\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\r\n            }\r\n        } else {\r\n            Plugin._registry[plugin.name] = plugin;\r\n        }\r\n\r\n        return plugin;\r\n    };\r\n\r\n    /**\r\n     * Resolves a dependency to a plugin object from the registry if it exists. \r\n     * The `dependency` may contain a version, but only the name matters when resolving.\r\n     * @method resolve\r\n     * @param dependency {string} The dependency.\r\n     * @return {object} The plugin if resolved, otherwise `undefined`.\r\n     */\r\n    Plugin.resolve = function(dependency) {\r\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\r\n    };\r\n\r\n    /**\r\n     * Returns a pretty printed plugin name and version.\r\n     * @method toString\r\n     * @param plugin {} The plugin.\r\n     * @return {string} Pretty printed plugin name and version.\r\n     */\r\n    Plugin.toString = function(plugin) {\r\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\r\n     * This means it must define the following properties:\r\n     * - `name`\r\n     * - `version`\r\n     * - `install`\r\n     * @method isPlugin\r\n     * @param obj {} The obj to test.\r\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\r\n     */\r\n    Plugin.isPlugin = function(obj) {\r\n        return obj && obj.name && obj.version && obj.install;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\r\n     * @method isUsed\r\n     * @param module {} The module.\r\n     * @param name {string} The plugin name.\r\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\r\n     */\r\n    Plugin.isUsed = function(module, name) {\r\n        return module.used.indexOf(name) > -1;\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\r\n     * If `plugin.for` is not specified then it is assumed to be applicable.\r\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * @method isFor\r\n     * @param plugin {} The plugin.\r\n     * @param module {} The module.\r\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\r\n     */\r\n    Plugin.isFor = function(plugin, module) {\r\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\r\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\r\n    };\r\n\r\n    /**\r\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\r\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\r\n     * Plugins may be specified either by their name or a reference to the plugin object.\r\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\r\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\r\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\r\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\r\n     * - A green tick ‚úÖ indicates a dependency was resolved and installed.\r\n     * - An orange diamond üî∂ indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\r\n     * - A red cross ‚ùå indicates a dependency could not be resolved.\r\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param module {} The module install plugins on.\r\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\r\n     */\r\n    Plugin.use = function(module, plugins) {\r\n        module.uses = (module.uses || []).concat(plugins || []);\r\n\r\n        if (module.uses.length === 0) {\r\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\r\n            return;\r\n        }\r\n\r\n        var dependencies = Plugin.dependencies(module),\r\n            sortedDependencies = Common.topologicalSort(dependencies),\r\n            status = [];\r\n\r\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\r\n            if (sortedDependencies[i] === module.name) {\r\n                continue;\r\n            }\r\n\r\n            var plugin = Plugin.resolve(sortedDependencies[i]);\r\n\r\n            if (!plugin) {\r\n                status.push('‚ùå ' + sortedDependencies[i]);\r\n                continue;\r\n            }\r\n\r\n            if (Plugin.isUsed(module, plugin.name)) {\r\n                continue;\r\n            }\r\n\r\n            if (!Plugin.isFor(plugin, module)) {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin.install) {\r\n                plugin.install(module);\r\n            } else {\r\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\r\n                plugin._warned = true;\r\n            }\r\n\r\n            if (plugin._warned) {\r\n                status.push('üî∂ ' + Plugin.toString(plugin));\r\n                delete plugin._warned;\r\n            } else {\r\n                status.push('‚úÖ ' + Plugin.toString(plugin));\r\n            }\r\n\r\n            module.used.push(plugin.name);\r\n        }\r\n\r\n        if (status.length > 0 && !plugin.silent) {\r\n            Common.info(status.join('  '));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\r\n     * @method dependencies\r\n     * @param module {} The module.\r\n     * @return {object} A dependency graph.\r\n     */\r\n    Plugin.dependencies = function(module, tracked) {\r\n        var parsedBase = Plugin.dependencyParse(module),\r\n            name = parsedBase.name;\r\n\r\n        tracked = tracked || {};\r\n\r\n        if (name in tracked) {\r\n            return;\r\n        }\r\n\r\n        module = Plugin.resolve(module) || module;\r\n\r\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\r\n            if (Plugin.isPlugin(dependency)) {\r\n                Plugin.register(dependency);\r\n            }\r\n\r\n            var parsed = Plugin.dependencyParse(dependency),\r\n                resolved = Plugin.resolve(dependency);\r\n\r\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\r\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\r\n                );\r\n\r\n                resolved._warned = true;\r\n                module._warned = true;\r\n            } else if (!resolved) {\r\n                Common.warn(\r\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\r\n                    Plugin.toString(parsedBase), 'could not be resolved.'\r\n                );\r\n\r\n                module._warned = true;\r\n            }\r\n\r\n            return parsed.name;\r\n        });\r\n\r\n        for (var i = 0; i < tracked[name].length; i += 1) {\r\n            Plugin.dependencies(tracked[name][i], tracked);\r\n        }\r\n\r\n        return tracked;\r\n    };\r\n\r\n    /**\r\n     * Parses a dependency string into its components.\r\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\r\n     * @method dependencyParse\r\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\r\n     * @return {object} The dependency parsed into its components.\r\n     */\r\n    Plugin.dependencyParse = function(dependency) {\r\n        if (Common.isString(dependency)) {\r\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?))?$/;\r\n\r\n            if (!pattern.test(dependency)) {\r\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\r\n            }\r\n\r\n            return {\r\n                name: dependency.split('@')[0],\r\n                range: dependency.split('@')[1] || '*'\r\n            };\r\n        }\r\n\r\n        return {\r\n            name: dependency.name,\r\n            range: dependency.range || dependency.version\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Parses a version string into its components.  \r\n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\r\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\r\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\r\n     * Only the following range types are supported:\r\n     * - Tilde ranges e.g. `~1.2.3`\r\n     * - Caret ranges e.g. `^1.2.3`\r\n     * - Exact version e.g. `1.2.3`\r\n     * - Any version `*`\r\n     * @method versionParse\r\n     * @param range {string} The version string.\r\n     * @return {object} The version range parsed into its components.\r\n     */\r\n    Plugin.versionParse = function(range) {\r\n        var pattern = /^\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-]+)?$/;\r\n\r\n        if (!pattern.test(range)) {\r\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\r\n        }\r\n\r\n        var identifiers = range.split('-');\r\n        range = identifiers[0];\r\n\r\n        var isRange = isNaN(Number(range[0])),\r\n            version = isRange ? range.substr(1) : range,\r\n            parts = Common.map(version.split('.'), function(part) {\r\n                return Number(part);\r\n            });\r\n\r\n        return {\r\n            isRange: isRange,\r\n            version: version,\r\n            range: range,\r\n            operator: isRange ? range[0] : '',\r\n            parts: parts,\r\n            prerelease: identifiers[1],\r\n            number: parts[0] * 1e8 + parts[1] * 1e4 + parts[2]\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Returns `true` if `version` satisfies the given `range`.\r\n     * See documentation for `Plugin.versionParse` for a description of the format.\r\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\r\n     * @method versionSatisfies\r\n     * @param version {string} The version string.\r\n     * @param range {string} The range string.\r\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\r\n     */\r\n    Plugin.versionSatisfies = function(version, range) {\r\n        range = range || '*';\r\n\r\n        var rangeParsed = Plugin.versionParse(range),\r\n            rangeParts = rangeParsed.parts,\r\n            versionParsed = Plugin.versionParse(version),\r\n            versionParts = versionParsed.parts;\r\n\r\n        if (rangeParsed.isRange) {\r\n            if (rangeParsed.operator === '*' || version === '*') {\r\n                return true;\r\n            }\r\n\r\n            if (rangeParsed.operator === '~') {\r\n                return versionParts[0] === rangeParts[0] && versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\r\n            }\r\n\r\n            if (rangeParsed.operator === '^') {\r\n                if (rangeParts[0] > 0) {\r\n                    return versionParts[0] === rangeParts[0] && versionParsed.number >= rangeParsed.number;\r\n                }\r\n\r\n                if (rangeParts[1] > 0) {\r\n                    return versionParts[1] === rangeParts[1] && versionParts[2] >= rangeParts[2];\r\n                }\r\n\r\n                return versionParts[2] === rangeParts[2];\r\n            }\r\n        }\r\n\r\n        return version === range || version === '*';\r\n    };\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}