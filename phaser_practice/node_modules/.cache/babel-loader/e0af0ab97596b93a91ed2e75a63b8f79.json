{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n\nvar Random = require('./Random');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * Defines a Line segment, a part of a line between two endpoints.\r\n *\r\n * @class Line\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n */\n\n\nvar Line = new Class({\n  initialize: function Line(x1, y1, x2, y2) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.LINE`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Line#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n\n    this.type = GEOM_CONST.LINE;\n    /**\r\n     * The x coordinate of the lines starting point.\r\n     *\r\n     * @name Phaser.Geom.Line#x1\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.x1 = x1;\n    /**\r\n     * The y coordinate of the lines starting point.\r\n     *\r\n     * @name Phaser.Geom.Line#y1\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y1 = y1;\n    /**\r\n     * The x coordinate of the lines ending point.\r\n     *\r\n     * @name Phaser.Geom.Line#x2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.x2 = x2;\n    /**\r\n     * The y coordinate of the lines ending point.\r\n     *\r\n     * @name Phaser.Geom.Line#y2\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y2 = y2;\n  },\n\n  /**\r\n   * Get a point on a line that's a given percentage along its length.\r\n   *\r\n   * @method Phaser.Geom.Line#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - An optional point, or point-like object, to store the coordinates of the point on the line.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point on the line.\r\n   */\n  getPoint: function (position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Get a number of points along a line's length.\r\n   *\r\n   * Provide a `quantity` to get an exact number of points along the line.\r\n   *\r\n   * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n   * providing a `stepRate`.\r\n   *\r\n   * @method Phaser.Geom.Line#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n   * @param {integer} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n   */\n  getPoints: function (quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Get a random Point on the Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {(Phaser.Geom.Point|object)} [point] - An instance of a Point to be modified.\r\n   *\r\n   * @return {Phaser.Geom.Point} A random Point on the Line.\r\n   */\n  getRandomPoint: function (point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Set new coordinates for the line endpoints.\r\n   *\r\n   * @method Phaser.Geom.Line#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n   * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n   * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n   * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n   *\r\n   * @return {Phaser.Geom.Line} This Line object.\r\n   */\n  setTo: function (x1, y1, x2, y2) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    return this;\n  },\n\n  /**\r\n   * Returns a Vector2 object that corresponds to the start of this Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getPointA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the start of this Line.\r\n   */\n  getPointA: function (vec2) {\n    if (vec2 === undefined) {\n      vec2 = new Vector2();\n    }\n\n    vec2.set(this.x1, this.y1);\n    return vec2;\n  },\n\n  /**\r\n   * Returns a Vector2 object that corresponds to the end of this Line.\r\n   *\r\n   * @method Phaser.Geom.Line#getPointB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the end of this Line.\r\n   */\n  getPointB: function (vec2) {\n    if (vec2 === undefined) {\n      vec2 = new Vector2();\n    }\n\n    vec2.set(this.x2, this.y2);\n    return vec2;\n  },\n\n  /**\r\n   * The left position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return Math.min(this.x1, this.x2);\n    },\n    set: function (value) {\n      if (this.x1 <= this.x2) {\n        this.x1 = value;\n      } else {\n        this.x2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The right position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return Math.max(this.x1, this.x2);\n    },\n    set: function (value) {\n      if (this.x1 > this.x2) {\n        this.x1 = value;\n      } else {\n        this.x2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The top position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return Math.min(this.y1, this.y2);\n    },\n    set: function (value) {\n      if (this.y1 <= this.y2) {\n        this.y1 = value;\n      } else {\n        this.y2 = value;\n      }\n    }\n  },\n\n  /**\r\n   * The bottom position of the Line.\r\n   *\r\n   * @name Phaser.Geom.Line#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return Math.max(this.y1, this.y2);\n    },\n    set: function (value) {\n      if (this.y1 > this.y2) {\n        this.y1 = value;\n      } else {\n        this.y2 = value;\n      }\n    }\n  }\n});\nmodule.exports = Line;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/line/Line.js"],"names":["Class","require","GetPoint","GetPoints","GEOM_CONST","Random","Vector2","Line","initialize","x1","y1","x2","y2","undefined","type","LINE","getPoint","position","output","getPoints","quantity","stepRate","getRandomPoint","point","setTo","getPointA","vec2","set","getPointB","left","get","Math","min","value","right","max","top","bottom","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Random = require('./Random');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * Defines a Line segment, a part of a line between two endpoints.\r\n *\r\n * @class Line\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n */\r\nvar Line = new Class({\r\n\r\n    initialize:\r\n\r\n    function Line (x1, y1, x2, y2)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.LINE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Line#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.LINE;\r\n\r\n        /**\r\n         * The x coordinate of the lines starting point.\r\n         *\r\n         * @name Phaser.Geom.Line#x1\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x1 = x1;\r\n\r\n        /**\r\n         * The y coordinate of the lines starting point.\r\n         *\r\n         * @name Phaser.Geom.Line#y1\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y1 = y1;\r\n\r\n        /**\r\n         * The x coordinate of the lines ending point.\r\n         *\r\n         * @name Phaser.Geom.Line#x2\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x2 = x2;\r\n\r\n        /**\r\n         * The y coordinate of the lines ending point.\r\n         *\r\n         * @name Phaser.Geom.Line#y2\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y2 = y2;\r\n    },\r\n\r\n    /**\r\n     * Get a point on a line that's a given percentage along its length.\r\n     *\r\n     * @method Phaser.Geom.Line#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 is the start, 0.5 is the middle and 1 is the end of the line.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - An optional point, or point-like object, to store the coordinates of the point on the line.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point on the line.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Get a number of points along a line's length.\r\n     *\r\n     * Provide a `quantity` to get an exact number of points along the line.\r\n     *\r\n     * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n     * providing a `stepRate`.\r\n     *\r\n     * @method Phaser.Geom.Line#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n     * @param {integer} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Get a random Point on the Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - An instance of a Point to be modified.\r\n     *\r\n     * @return {Phaser.Geom.Point} A random Point on the Line.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Set new coordinates for the line endpoints.\r\n     *\r\n     * @method Phaser.Geom.Line#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x1=0] - The x coordinate of the lines starting point.\r\n     * @param {number} [y1=0] - The y coordinate of the lines starting point.\r\n     * @param {number} [x2=0] - The x coordinate of the lines ending point.\r\n     * @param {number} [y2=0] - The y coordinate of the lines ending point.\r\n     *\r\n     * @return {Phaser.Geom.Line} This Line object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a Vector2 object that corresponds to the start of this Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getPointA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the start of this Line.\r\n     */\r\n    getPointA: function (vec2)\r\n    {\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        vec2.set(this.x1, this.y1);\r\n\r\n        return vec2;\r\n    },\r\n\r\n    /**\r\n     * Returns a Vector2 object that corresponds to the end of this Line.\r\n     *\r\n     * @method Phaser.Geom.Line#getPointB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [vec2,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [vec2] - A Vector2 object to set the results in. If `undefined` a new Vector2 will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} A Vector2 object that corresponds to the end of this Line.\r\n     */\r\n    getPointB: function (vec2)\r\n    {\r\n        if (vec2 === undefined) { vec2 = new Vector2(); }\r\n\r\n        vec2.set(this.x2, this.y2);\r\n\r\n        return vec2;\r\n    },\r\n\r\n    /**\r\n     * The left position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.x1, this.x2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.x1 <= this.x2)\r\n            {\r\n                this.x1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.x2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.x1, this.x2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.x1 > this.x2)\r\n            {\r\n                this.x1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.x2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.y1, this.y2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.y1 <= this.y2)\r\n            {\r\n                this.y1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.y2 = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Line.\r\n     *\r\n     * @name Phaser.Geom.Line#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.y1, this.y2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (this.y1 > this.y2)\r\n            {\r\n                this.y1 = value;\r\n            }\r\n            else\r\n            {\r\n                this.y2 = value;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Line;\r\n"]},"metadata":{},"sourceType":"script"}