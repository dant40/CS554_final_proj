{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SafeRange = require('./SafeRange');\n/**\r\n * Removes the item within the given range in the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for the item/s successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.RemoveBetween\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {integer} startIndex - The start index to remove from.\r\n * @param {integer} endIndex - The end index to remove to.\r\n * @param {function} [callback] - A callback to be invoked for the item removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {Array.<*>} An array of items that were removed.\r\n */\n\n\nvar RemoveBetween = function (array, startIndex, endIndex, callback, context) {\n  if (startIndex === undefined) {\n    startIndex = 0;\n  }\n\n  if (endIndex === undefined) {\n    endIndex = array.length;\n  }\n\n  if (context === undefined) {\n    context = array;\n  }\n\n  if (SafeRange(array, startIndex, endIndex)) {\n    var size = endIndex - startIndex;\n    var removed = array.splice(startIndex, size);\n\n    if (callback) {\n      for (var i = 0; i < removed.length; i++) {\n        var entry = removed[i];\n        callback.call(context, entry);\n      }\n    }\n\n    return removed;\n  } else {\n    return [];\n  }\n};\n\nmodule.exports = RemoveBetween;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/RemoveBetween.js"],"names":["SafeRange","require","RemoveBetween","array","startIndex","endIndex","callback","context","undefined","length","size","removed","splice","i","entry","call","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiBC,UAAjB,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiDC,OAAjD,EACpB;AACI,MAAIH,UAAU,KAAKI,SAAnB,EAA8B;AAAEJ,IAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,MAAIC,QAAQ,KAAKG,SAAjB,EAA4B;AAAEH,IAAAA,QAAQ,GAAGF,KAAK,CAACM,MAAjB;AAA0B;;AACxD,MAAIF,OAAO,KAAKC,SAAhB,EAA2B;AAAED,IAAAA,OAAO,GAAGJ,KAAV;AAAkB;;AAE/C,MAAIH,SAAS,CAACG,KAAD,EAAQC,UAAR,EAAoBC,QAApB,CAAb,EACA;AACI,QAAIK,IAAI,GAAGL,QAAQ,GAAGD,UAAtB;AAEA,QAAIO,OAAO,GAAGR,KAAK,CAACS,MAAN,CAAaR,UAAb,EAAyBM,IAAzB,CAAd;;AAEA,QAAIJ,QAAJ,EACA;AACI,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACF,MAA5B,EAAoCI,CAAC,EAArC,EACA;AACI,YAAIC,KAAK,GAAGH,OAAO,CAACE,CAAD,CAAnB;AAEAP,QAAAA,QAAQ,CAACS,IAAT,CAAcR,OAAd,EAAuBO,KAAvB;AACH;AACJ;;AAED,WAAOH,OAAP;AACH,GAjBD,MAmBA;AACI,WAAO,EAAP;AACH;AACJ,CA5BD;;AA8BAK,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Removes the item within the given range in the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for the item/s successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.RemoveBetween\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {integer} startIndex - The start index to remove from.\r\n * @param {integer} endIndex - The end index to remove to.\r\n * @param {function} [callback] - A callback to be invoked for the item removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {Array.<*>} An array of items that were removed.\r\n */\r\nvar RemoveBetween = function (array, startIndex, endIndex, callback, context)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n    if (context === undefined) { context = array; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        var size = endIndex - startIndex;\r\n\r\n        var removed = array.splice(startIndex, size);\r\n\r\n        if (callback)\r\n        {\r\n            for (var i = 0; i < removed.length; i++)\r\n            {\r\n                var entry = removed[i];\r\n\r\n                callback.call(context, entry);\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    }\r\n    else\r\n    {\r\n        return [];\r\n    }\r\n};\r\n\r\nmodule.exports = RemoveBetween;\r\n"]},"metadata":{},"sourceType":"script"}