{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Provides methods used for setting the bounce properties of an Arcade Physics Body.\r\n *\r\n * @namespace Phaser.Physics.Arcade.Components.Bounce\r\n * @since 3.0.0\r\n */\nvar Bounce = {\n  /**\r\n   * Sets the bounce values of this body.\r\n   * \r\n   * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\r\n   * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounce\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\r\n   * @param {number} [y=x] - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setBounce: function (x, y) {\n    this.body.bounce.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal bounce value for this body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounceX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setBounceX: function (value) {\n    this.body.bounce.x = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical bounce value for this body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Bounce#setBounceY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setBounceY: function (value) {\n    this.body.bounce.y = value;\n    return this;\n  },\n\n  /**\r\n   * Sets whether this Body collides with the world boundary.\r\n   * \r\n   * Optionally also sets the World Bounce values. If the `Body.worldBounce` is null, it's set to a new Phaser.Math.Vector2 first.\r\n   *\r\n   * @method Phaser.Physics.Arcade.Components.Bounce#setCollideWorldBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [value=true] - `true` if this body should collide with the world bounds, otherwise `false`.\r\n   * @param {number} [bounceX] - If given this will be replace the `worldBounce.x` value.\r\n   * @param {number} [bounceY] - If given this will be replace the `worldBounce.y` value.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setCollideWorldBounds: function (value, bounceX, bounceY) {\n    this.body.setCollideWorldBounds(value, bounceX, bounceY);\n    return this;\n  }\n};\nmodule.exports = Bounce;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/components/Bounce.js"],"names":["Bounce","setBounce","x","y","body","bounce","set","setBounceX","value","setBounceY","setCollideWorldBounds","bounceX","bounceY","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;AAMA,IAAIA,MAAM,GAAG;AAET;;;;;;;;;;;;;;AAcAC,EAAAA,SAAS,EAAE,UAAUC,CAAV,EAAaC,CAAb,EACX;AACI,SAAKC,IAAL,CAAUC,MAAV,CAAiBC,GAAjB,CAAqBJ,CAArB,EAAwBC,CAAxB;AAEA,WAAO,IAAP;AACH,GArBQ;;AAuBT;;;;;;;;;;AAUAI,EAAAA,UAAU,EAAE,UAAUC,KAAV,EACZ;AACI,SAAKJ,IAAL,CAAUC,MAAV,CAAiBH,CAAjB,GAAqBM,KAArB;AAEA,WAAO,IAAP;AACH,GAtCQ;;AAwCT;;;;;;;;;;AAUAC,EAAAA,UAAU,EAAE,UAAUD,KAAV,EACZ;AACI,SAAKJ,IAAL,CAAUC,MAAV,CAAiBF,CAAjB,GAAqBK,KAArB;AAEA,WAAO,IAAP;AACH,GAvDQ;;AAyDT;;;;;;;;;;;;;;AAcAE,EAAAA,qBAAqB,EAAE,UAAUF,KAAV,EAAiBG,OAAjB,EAA0BC,OAA1B,EACvB;AACI,SAAKR,IAAL,CAAUM,qBAAV,CAAgCF,KAAhC,EAAuCG,OAAvC,EAAgDC,OAAhD;AAEA,WAAO,IAAP;AACH;AA5EQ,CAAb;AAgFAC,MAAM,CAACC,OAAP,GAAiBd,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Provides methods used for setting the bounce properties of an Arcade Physics Body.\r\n *\r\n * @namespace Phaser.Physics.Arcade.Components.Bounce\r\n * @since 3.0.0\r\n */\r\nvar Bounce = {\r\n\r\n    /**\r\n     * Sets the bounce values of this body.\r\n     * \r\n     * Bounce is the amount of restitution, or elasticity, the body has when it collides with another object.\r\n     * A value of 1 means that it will retain its full velocity after the rebound. A value of 0 means it will not rebound at all.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Bounce#setBounce\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\r\n     * @param {number} [y=x] - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setBounce: function (x, y)\r\n    {\r\n        this.body.bounce.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal bounce value for this body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Bounce#setBounceX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The amount of horizontal bounce to apply on collision. A float, typically between 0 and 1.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setBounceX: function (value)\r\n    {\r\n        this.body.bounce.x = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical bounce value for this body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Bounce#setBounceY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The amount of vertical bounce to apply on collision. A float, typically between 0 and 1.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setBounceY: function (value)\r\n    {\r\n        this.body.bounce.y = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets whether this Body collides with the world boundary.\r\n     * \r\n     * Optionally also sets the World Bounce values. If the `Body.worldBounce` is null, it's set to a new Phaser.Math.Vector2 first.\r\n     *\r\n     * @method Phaser.Physics.Arcade.Components.Bounce#setCollideWorldBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [value=true] - `true` if this body should collide with the world bounds, otherwise `false`.\r\n     * @param {number} [bounceX] - If given this will be replace the `worldBounce.x` value.\r\n     * @param {number} [bounceY] - If given this will be replace the `worldBounce.y` value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setCollideWorldBounds: function (value, bounceX, bounceY)\r\n    {\r\n        this.body.setCollideWorldBounds(value, bounceX, bounceY);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Bounce;\r\n"]},"metadata":{},"sourceType":"script"}