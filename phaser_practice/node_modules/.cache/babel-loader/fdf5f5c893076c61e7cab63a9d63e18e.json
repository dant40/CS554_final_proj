{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../math/Clamp');\n\nvar Class = require('../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar FindClosestInSorted = require('../utils/array/FindClosestInSorted');\n\nvar Frame = require('./AnimationFrame');\n\nvar GetValue = require('../utils/object/GetValue');\n/**\r\n * @classdesc\r\n * A Frame based Animation.\r\n *\r\n * This consists of a key, some default values (like the frame rate) and a bunch of Frame objects.\r\n *\r\n * The Animation Manager creates these. Game Objects don't own an instance of these directly.\r\n * Game Objects have the Animation Component, which are like playheads to global Animations (these objects)\r\n * So multiple Game Objects can have playheads all pointing to this one Animation instance.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.Animations\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Animations.AnimationManager} manager - A reference to the global Animation Manager\r\n * @param {string} key - The unique identifying string for this animation.\r\n * @param {Phaser.Types.Animations.Animation} config - The Animation configuration.\r\n */\n\n\nvar Animation = new Class({\n  Extends: EventEmitter,\n  initialize: function Animation(manager, key, config) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the global Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.Animation#manager\r\n     * @type {Phaser.Animations.AnimationManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.manager = manager;\n    /**\r\n     * The unique identifying string for this animation.\r\n     *\r\n     * @name Phaser.Animations.Animation#key\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.key = key;\n    /**\r\n     * A frame based animation (as opposed to a bone based animation)\r\n     *\r\n     * @name Phaser.Animations.Animation#type\r\n     * @type {string}\r\n     * @default frame\r\n     * @since 3.0.0\r\n     */\n\n    this.type = 'frame';\n    /**\r\n     * Extract all the frame data into the frames array.\r\n     *\r\n     * @name Phaser.Animations.Animation#frames\r\n     * @type {Phaser.Animations.AnimationFrame[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.frames = this.getFrames(manager.textureManager, GetValue(config, 'frames', []), GetValue(config, 'defaultTextureKey', null));\n    /**\r\n     * The frame rate of playback in frames per second (default 24 if duration is null)\r\n     *\r\n     * @name Phaser.Animations.Animation#frameRate\r\n     * @type {integer}\r\n     * @default 24\r\n     * @since 3.0.0\r\n     */\n\n    this.frameRate = GetValue(config, 'frameRate', null);\n    /**\r\n     * How long the animation should play for, in milliseconds.\r\n     * If the `frameRate` property has been set then it overrides this value,\r\n     * otherwise the `frameRate` is derived from `duration`.\r\n     *\r\n     * @name Phaser.Animations.Animation#duration\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = GetValue(config, 'duration', null);\n\n    if (this.duration === null && this.frameRate === null) {\n      //  No duration or frameRate given, use default frameRate of 24fps\n      this.frameRate = 24;\n      this.duration = this.frameRate / this.frames.length * 1000;\n    } else if (this.duration && this.frameRate === null) {\n      //  Duration given but no frameRate, so set the frameRate based on duration\n      //  I.e. 12 frames in the animation, duration = 4000 ms\n      //  So frameRate is 12 / (4000 / 1000) = 3 fps\n      this.frameRate = this.frames.length / (this.duration / 1000);\n    } else {\n      //  frameRate given, derive duration from it (even if duration also specified)\n      //  I.e. 15 frames in the animation, frameRate = 30 fps\n      //  So duration is 15 / 30 = 0.5 * 1000 (half a second, or 500ms)\n      this.duration = this.frames.length / this.frameRate * 1000;\n    }\n    /**\r\n     * How many ms per frame, not including frame specific modifiers.\r\n     *\r\n     * @name Phaser.Animations.Animation#msPerFrame\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.msPerFrame = 1000 / this.frameRate;\n    /**\r\n     * Skip frames if the time lags, or always advanced anyway?\r\n     *\r\n     * @name Phaser.Animations.Animation#skipMissedFrames\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.skipMissedFrames = GetValue(config, 'skipMissedFrames', true);\n    /**\r\n     * The delay in ms before the playback will begin.\r\n     *\r\n     * @name Phaser.Animations.Animation#delay\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delay = GetValue(config, 'delay', 0);\n    /**\r\n     * Number of times to repeat the animation. Set to -1 to repeat forever.\r\n     *\r\n     * @name Phaser.Animations.Animation#repeat\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeat = GetValue(config, 'repeat', 0);\n    /**\r\n     * The delay in ms before the a repeat play starts.\r\n     *\r\n     * @name Phaser.Animations.Animation#repeatDelay\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeatDelay = GetValue(config, 'repeatDelay', 0);\n    /**\r\n     * Should the animation yoyo (reverse back down to the start) before repeating?\r\n     *\r\n     * @name Phaser.Animations.Animation#yoyo\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.yoyo = GetValue(config, 'yoyo', false);\n    /**\r\n     * Should the GameObject's `visible` property be set to `true` when the animation starts to play?\r\n     *\r\n     * @name Phaser.Animations.Animation#showOnStart\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.showOnStart = GetValue(config, 'showOnStart', false);\n    /**\r\n     * Should the GameObject's `visible` property be set to `false` when the animation finishes?\r\n     *\r\n     * @name Phaser.Animations.Animation#hideOnComplete\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.hideOnComplete = GetValue(config, 'hideOnComplete', false);\n    /**\r\n     * Global pause. All Game Objects using this Animation instance are impacted by this property.\r\n     *\r\n     * @name Phaser.Animations.Animation#paused\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.paused = false;\n    this.manager.on(Events.PAUSE_ALL, this.pause, this);\n    this.manager.on(Events.RESUME_ALL, this.resume, this);\n  },\n\n  /**\r\n   * Add frames to the end of the animation.\r\n   *\r\n   * @method Phaser.Animations.Animation#addFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  addFrame: function (config) {\n    return this.addFrameAt(this.frames.length, config);\n  },\n\n  /**\r\n   * Add frame/s into the animation.\r\n   *\r\n   * @method Phaser.Animations.Animation#addFrameAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The index to insert the frame at within the animation.\r\n   * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  addFrameAt: function (index, config) {\n    var newFrames = this.getFrames(this.manager.textureManager, config);\n\n    if (newFrames.length > 0) {\n      if (index === 0) {\n        this.frames = newFrames.concat(this.frames);\n      } else if (index === this.frames.length) {\n        this.frames = this.frames.concat(newFrames);\n      } else {\n        var pre = this.frames.slice(0, index);\n        var post = this.frames.slice(index);\n        this.frames = pre.concat(newFrames, post);\n      }\n\n      this.updateFrameSequence();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Check if the given frame index is valid.\r\n   *\r\n   * @method Phaser.Animations.Animation#checkFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The index to be checked.\r\n   *\r\n   * @return {boolean} `true` if the index is valid, otherwise `false`.\r\n   */\n  checkFrame: function (index) {\n    return index >= 0 && index < this.frames.length;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#completeAnimation\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   */\n  completeAnimation: function (component) {\n    if (this.hideOnComplete) {\n      component.parent.visible = false;\n    }\n\n    component.stop();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#getFirstTick\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   * @param {boolean} [includeDelay=true] - [description]\r\n   */\n  getFirstTick: function (component, includeDelay) {\n    if (includeDelay === undefined) {\n      includeDelay = true;\n    } //  When is the first update due?\n\n\n    component.accumulator = 0;\n    component.nextTick = component.msPerFrame + component.currentFrame.duration;\n\n    if (includeDelay) {\n      component.nextTick += component._delay;\n    }\n  },\n\n  /**\r\n   * Returns the AnimationFrame at the provided index\r\n   *\r\n   * @method Phaser.Animations.Animation#getFrameAt\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The index in the AnimationFrame array\r\n   *\r\n   * @return {Phaser.Animations.AnimationFrame} The frame at the index provided from the animation sequence\r\n   */\n  getFrameAt: function (index) {\n    return this.frames[index];\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#getFrames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.TextureManager} textureManager - [description]\r\n   * @param {(string|Phaser.Types.Animations.AnimationFrame[])} frames - [description]\r\n   * @param {string} [defaultTextureKey] - [description]\r\n   *\r\n   * @return {Phaser.Animations.AnimationFrame[]} [description]\r\n   */\n  getFrames: function (textureManager, frames, defaultTextureKey) {\n    var out = [];\n    var prev;\n    var animationFrame;\n    var index = 1;\n    var i;\n    var textureKey; //  if frames is a string, we'll get all the frames from the texture manager as if it's a sprite sheet\n\n    if (typeof frames === 'string') {\n      textureKey = frames;\n      var texture = textureManager.get(textureKey);\n      var frameKeys = texture.getFrameNames();\n      frames = [];\n      frameKeys.forEach(function (idx, value) {\n        frames.push({\n          key: textureKey,\n          frame: value\n        });\n      });\n    }\n\n    if (!Array.isArray(frames) || frames.length === 0) {\n      return out;\n    }\n\n    for (i = 0; i < frames.length; i++) {\n      var item = frames[i];\n      var key = GetValue(item, 'key', defaultTextureKey);\n\n      if (!key) {\n        continue;\n      } //  Could be an integer or a string\n\n\n      var frame = GetValue(item, 'frame', 0); //  The actual texture frame\n\n      var textureFrame = textureManager.getFrame(key, frame);\n      animationFrame = new Frame(key, frame, index, textureFrame);\n      animationFrame.duration = GetValue(item, 'duration', 0);\n      animationFrame.isFirst = !prev; //  The previously created animationFrame\n\n      if (prev) {\n        prev.nextFrame = animationFrame;\n        animationFrame.prevFrame = prev;\n      }\n\n      out.push(animationFrame);\n      prev = animationFrame;\n      index++;\n    }\n\n    if (out.length > 0) {\n      animationFrame.isLast = true; //  Link them end-to-end, so they loop\n\n      animationFrame.nextFrame = out[0];\n      out[0].prevFrame = animationFrame; //  Generate the progress data\n\n      var slice = 1 / (out.length - 1);\n\n      for (i = 0; i < out.length; i++) {\n        out[i].progress = i * slice;\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#getNextTick\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   */\n  getNextTick: function (component) {\n    // accumulator += delta * _timeScale\n    // after a large delta surge (perf issue for example) we need to adjust for it here\n    //  When is the next update due?\n    component.accumulator -= component.nextTick;\n    component.nextTick = component.msPerFrame + component.currentFrame.duration;\n  },\n\n  /**\r\n   * Loads the Animation values into the Animation Component.\r\n   *\r\n   * @method Phaser.Animations.Animation#load\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to load values into.\r\n   * @param {integer} startFrame - The start frame of the animation to load.\r\n   */\n  load: function (component, startFrame) {\n    if (startFrame >= this.frames.length) {\n      startFrame = 0;\n    }\n\n    if (component.currentAnim !== this) {\n      component.currentAnim = this;\n      component.frameRate = this.frameRate;\n      component.duration = this.duration;\n      component.msPerFrame = this.msPerFrame;\n      component.skipMissedFrames = this.skipMissedFrames;\n      component._delay = this.delay;\n      component._repeat = this.repeat;\n      component._repeatDelay = this.repeatDelay;\n      component._yoyo = this.yoyo;\n    }\n\n    var frame = this.frames[startFrame];\n\n    if (startFrame === 0 && !component.forward) {\n      frame = this.getLastFrame();\n    }\n\n    component.updateFrame(frame);\n  },\n\n  /**\r\n   * Returns the frame closest to the given progress value between 0 and 1.\r\n   *\r\n   * @method Phaser.Animations.Animation#getFrameByProgress\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} value - A value between 0 and 1.\r\n   *\r\n   * @return {Phaser.Animations.AnimationFrame} The frame closest to the given progress value.\r\n   */\n  getFrameByProgress: function (value) {\n    value = Clamp(value, 0, 1);\n    return FindClosestInSorted(value, this.frames, 'progress');\n  },\n\n  /**\r\n   * Advance the animation frame.\r\n   *\r\n   * @method Phaser.Animations.Animation#nextFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n   */\n  nextFrame: function (component) {\n    var frame = component.currentFrame; //  TODO: Add frame skip support\n\n    if (frame.isLast) {\n      //  We're at the end of the animation\n      //  Yoyo? (happens before repeat)\n      if (component._yoyo) {\n        this.handleYoyoFrame(component, false);\n      } else if (component.repeatCounter > 0) {\n        //  Repeat (happens before complete)\n        if (component._reverse && component.forward) {\n          component.forward = false;\n        } else {\n          this.repeatAnimation(component);\n        }\n      } else {\n        this.completeAnimation(component);\n      }\n    } else {\n      this.updateAndGetNextTick(component, frame.nextFrame);\n    }\n  },\n\n  /**\r\n   * Handle the yoyo functionality in nextFrame and previousFrame methods.\r\n   *\r\n   * @method Phaser.Animations.Animation#handleYoyoFrame\r\n   * @private\r\n   * @since 3.12.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n   * @param {boolean} isReverse - Is animation in reverse mode? (Default: false)\r\n   */\n  handleYoyoFrame: function (component, isReverse) {\n    if (!isReverse) {\n      isReverse = false;\n    }\n\n    if (component._reverse === !isReverse && component.repeatCounter > 0) {\n      component.forward = isReverse;\n      this.repeatAnimation(component);\n      return;\n    }\n\n    if (component._reverse !== isReverse && component.repeatCounter === 0) {\n      this.completeAnimation(component);\n      return;\n    }\n\n    component.forward = isReverse;\n    var frame = isReverse ? component.currentFrame.nextFrame : component.currentFrame.prevFrame;\n    this.updateAndGetNextTick(component, frame);\n  },\n\n  /**\r\n   * Returns the animation last frame.\r\n   *\r\n   * @method Phaser.Animations.Animation#getLastFrame\r\n   * @since 3.12.0\r\n   *\r\n   * @return {Phaser.Animations.AnimationFrame} component - The Animation Last Frame.\r\n   */\n  getLastFrame: function () {\n    return this.frames[this.frames.length - 1];\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#previousFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   */\n  previousFrame: function (component) {\n    var frame = component.currentFrame; //  TODO: Add frame skip support\n\n    if (frame.isFirst) {\n      //  We're at the start of the animation\n      if (component._yoyo) {\n        this.handleYoyoFrame(component, true);\n      } else if (component.repeatCounter > 0) {\n        if (component._reverse && !component.forward) {\n          component.currentFrame = this.getLastFrame();\n          this.repeatAnimation(component);\n        } else {\n          //  Repeat (happens before complete)\n          component.forward = true;\n          this.repeatAnimation(component);\n        }\n      } else {\n        this.completeAnimation(component);\n      }\n    } else {\n      this.updateAndGetNextTick(component, frame.prevFrame);\n    }\n  },\n\n  /**\r\n   * Update Frame and Wait next tick.\r\n   *\r\n   * @method Phaser.Animations.Animation#updateAndGetNextTick\r\n   * @private\r\n   * @since 3.12.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} frame - An Animation frame.\r\n   */\n  updateAndGetNextTick: function (component, frame) {\n    component.updateFrame(frame);\n    this.getNextTick(component);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#removeFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} frame - [description]\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  removeFrame: function (frame) {\n    var index = this.frames.indexOf(frame);\n\n    if (index !== -1) {\n      this.removeFrameAt(index);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Removes a frame from the AnimationFrame array at the provided index\r\n   * and updates the animation accordingly.\r\n   *\r\n   * @method Phaser.Animations.Animation#removeFrameAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The index in the AnimationFrame array\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  removeFrameAt: function (index) {\n    this.frames.splice(index, 1);\n    this.updateFrameSequence();\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#repeatAnimation\r\n   * @fires Phaser.Animations.Events#ANIMATION_REPEAT\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_REPEAT\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_REPEAT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   */\n  repeatAnimation: function (component) {\n    if (component._pendingStop === 2) {\n      return this.completeAnimation(component);\n    }\n\n    if (component._repeatDelay > 0 && component.pendingRepeat === false) {\n      component.pendingRepeat = true;\n      component.accumulator -= component.nextTick;\n      component.nextTick += component._repeatDelay;\n    } else {\n      component.repeatCounter--;\n      component.updateFrame(component.currentFrame[component.forward ? 'nextFrame' : 'prevFrame']);\n\n      if (component.isPlaying) {\n        this.getNextTick(component);\n        component.pendingRepeat = false;\n        var frame = component.currentFrame;\n        var parent = component.parent;\n        this.emit(Events.ANIMATION_REPEAT, this, frame);\n        parent.emit(Events.SPRITE_ANIMATION_KEY_REPEAT + this.key, this, frame, component.repeatCounter, parent);\n        parent.emit(Events.SPRITE_ANIMATION_REPEAT, this, frame, component.repeatCounter, parent);\n      }\n    }\n  },\n\n  /**\r\n   * Sets the texture frame the animation uses for rendering.\r\n   *\r\n   * @method Phaser.Animations.Animation#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n   */\n  setFrame: function (component) {\n    //  Work out which frame should be set next on the child, and set it\n    if (component.forward) {\n      this.nextFrame(component);\n    } else {\n      this.previousFrame(component);\n    }\n  },\n\n  /**\r\n   * Converts the animation data to JSON.\r\n   *\r\n   * @method Phaser.Animations.Animation#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.Animations.JSONAnimation} [description]\r\n   */\n  toJSON: function () {\n    var output = {\n      key: this.key,\n      type: this.type,\n      frames: [],\n      frameRate: this.frameRate,\n      duration: this.duration,\n      skipMissedFrames: this.skipMissedFrames,\n      delay: this.delay,\n      repeat: this.repeat,\n      repeatDelay: this.repeatDelay,\n      yoyo: this.yoyo,\n      showOnStart: this.showOnStart,\n      hideOnComplete: this.hideOnComplete\n    };\n    this.frames.forEach(function (frame) {\n      output.frames.push(frame.toJSON());\n    });\n    return output;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#updateFrameSequence\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  updateFrameSequence: function () {\n    var len = this.frames.length;\n    var slice = 1 / (len - 1);\n    var frame;\n\n    for (var i = 0; i < len; i++) {\n      frame = this.frames[i];\n      frame.index = i + 1;\n      frame.isFirst = false;\n      frame.isLast = false;\n      frame.progress = i * slice;\n\n      if (i === 0) {\n        frame.isFirst = true;\n\n        if (len === 1) {\n          frame.isLast = true;\n          frame.nextFrame = frame;\n          frame.prevFrame = frame;\n        } else {\n          frame.isLast = false;\n          frame.prevFrame = this.frames[len - 1];\n          frame.nextFrame = this.frames[i + 1];\n        }\n      } else if (i === len - 1 && len > 1) {\n        frame.isLast = true;\n        frame.prevFrame = this.frames[len - 2];\n        frame.nextFrame = this.frames[0];\n      } else if (len > 1) {\n        frame.prevFrame = this.frames[i - 1];\n        frame.nextFrame = this.frames[i + 1];\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  pause: function () {\n    this.paused = true;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.Animation} This Animation object.\r\n   */\n  resume: function () {\n    this.paused = false;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.Animation#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.removeAllListeners();\n    this.manager.off(Events.PAUSE_ALL, this.pause, this);\n    this.manager.off(Events.RESUME_ALL, this.resume, this);\n    this.manager.remove(this.key);\n\n    for (var i = 0; i < this.frames.length; i++) {\n      this.frames[i].destroy();\n    }\n\n    this.frames = [];\n    this.manager = null;\n  }\n});\nmodule.exports = Animation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/animations/Animation.js"],"names":["Clamp","require","Class","EventEmitter","Events","FindClosestInSorted","Frame","GetValue","Animation","Extends","initialize","manager","key","config","call","type","frames","getFrames","textureManager","frameRate","duration","length","msPerFrame","skipMissedFrames","delay","repeat","repeatDelay","yoyo","showOnStart","hideOnComplete","paused","on","PAUSE_ALL","pause","RESUME_ALL","resume","addFrame","addFrameAt","index","newFrames","concat","pre","slice","post","updateFrameSequence","checkFrame","completeAnimation","component","parent","visible","stop","getFirstTick","includeDelay","undefined","accumulator","nextTick","currentFrame","_delay","getFrameAt","defaultTextureKey","out","prev","animationFrame","i","textureKey","texture","get","frameKeys","getFrameNames","forEach","idx","value","push","frame","Array","isArray","item","textureFrame","getFrame","isFirst","nextFrame","prevFrame","isLast","progress","getNextTick","load","startFrame","currentAnim","_repeat","_repeatDelay","_yoyo","forward","getLastFrame","updateFrame","getFrameByProgress","handleYoyoFrame","repeatCounter","_reverse","repeatAnimation","updateAndGetNextTick","isReverse","previousFrame","removeFrame","indexOf","removeFrameAt","splice","_pendingStop","pendingRepeat","isPlaying","emit","ANIMATION_REPEAT","SPRITE_ANIMATION_KEY_REPEAT","SPRITE_ANIMATION_REPEAT","setFrame","toJSON","output","len","destroy","removeAllListeners","off","remove","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../math/Clamp');\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar FindClosestInSorted = require('../utils/array/FindClosestInSorted');\r\nvar Frame = require('./AnimationFrame');\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n/**\r\n * @classdesc\r\n * A Frame based Animation.\r\n *\r\n * This consists of a key, some default values (like the frame rate) and a bunch of Frame objects.\r\n *\r\n * The Animation Manager creates these. Game Objects don't own an instance of these directly.\r\n * Game Objects have the Animation Component, which are like playheads to global Animations (these objects)\r\n * So multiple Game Objects can have playheads all pointing to this one Animation instance.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.Animations\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Animations.AnimationManager} manager - A reference to the global Animation Manager\r\n * @param {string} key - The unique identifying string for this animation.\r\n * @param {Phaser.Types.Animations.Animation} config - The Animation configuration.\r\n */\r\nvar Animation = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Animation (manager, key, config)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the global Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.Animation#manager\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The unique identifying string for this animation.\r\n         *\r\n         * @name Phaser.Animations.Animation#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * A frame based animation (as opposed to a bone based animation)\r\n         *\r\n         * @name Phaser.Animations.Animation#type\r\n         * @type {string}\r\n         * @default frame\r\n         * @since 3.0.0\r\n         */\r\n        this.type = 'frame';\r\n\r\n        /**\r\n         * Extract all the frame data into the frames array.\r\n         *\r\n         * @name Phaser.Animations.Animation#frames\r\n         * @type {Phaser.Animations.AnimationFrame[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = this.getFrames(\r\n            manager.textureManager,\r\n            GetValue(config, 'frames', []),\r\n            GetValue(config, 'defaultTextureKey', null)\r\n        );\r\n\r\n        /**\r\n         * The frame rate of playback in frames per second (default 24 if duration is null)\r\n         *\r\n         * @name Phaser.Animations.Animation#frameRate\r\n         * @type {integer}\r\n         * @default 24\r\n         * @since 3.0.0\r\n         */\r\n        this.frameRate = GetValue(config, 'frameRate', null);\r\n\r\n        /**\r\n         * How long the animation should play for, in milliseconds.\r\n         * If the `frameRate` property has been set then it overrides this value,\r\n         * otherwise the `frameRate` is derived from `duration`.\r\n         *\r\n         * @name Phaser.Animations.Animation#duration\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = GetValue(config, 'duration', null);\r\n\r\n        if (this.duration === null && this.frameRate === null)\r\n        {\r\n            //  No duration or frameRate given, use default frameRate of 24fps\r\n            this.frameRate = 24;\r\n            this.duration = (this.frameRate / this.frames.length) * 1000;\r\n        }\r\n        else if (this.duration && this.frameRate === null)\r\n        {\r\n            //  Duration given but no frameRate, so set the frameRate based on duration\r\n            //  I.e. 12 frames in the animation, duration = 4000 ms\r\n            //  So frameRate is 12 / (4000 / 1000) = 3 fps\r\n            this.frameRate = this.frames.length / (this.duration / 1000);\r\n        }\r\n        else\r\n        {\r\n            //  frameRate given, derive duration from it (even if duration also specified)\r\n            //  I.e. 15 frames in the animation, frameRate = 30 fps\r\n            //  So duration is 15 / 30 = 0.5 * 1000 (half a second, or 500ms)\r\n            this.duration = (this.frames.length / this.frameRate) * 1000;\r\n        }\r\n\r\n        /**\r\n         * How many ms per frame, not including frame specific modifiers.\r\n         *\r\n         * @name Phaser.Animations.Animation#msPerFrame\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.msPerFrame = 1000 / this.frameRate;\r\n\r\n        /**\r\n         * Skip frames if the time lags, or always advanced anyway?\r\n         *\r\n         * @name Phaser.Animations.Animation#skipMissedFrames\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.skipMissedFrames = GetValue(config, 'skipMissedFrames', true);\r\n\r\n        /**\r\n         * The delay in ms before the playback will begin.\r\n         *\r\n         * @name Phaser.Animations.Animation#delay\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delay = GetValue(config, 'delay', 0);\r\n\r\n        /**\r\n         * Number of times to repeat the animation. Set to -1 to repeat forever.\r\n         *\r\n         * @name Phaser.Animations.Animation#repeat\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeat = GetValue(config, 'repeat', 0);\r\n\r\n        /**\r\n         * The delay in ms before the a repeat play starts.\r\n         *\r\n         * @name Phaser.Animations.Animation#repeatDelay\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeatDelay = GetValue(config, 'repeatDelay', 0);\r\n\r\n        /**\r\n         * Should the animation yoyo (reverse back down to the start) before repeating?\r\n         *\r\n         * @name Phaser.Animations.Animation#yoyo\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.yoyo = GetValue(config, 'yoyo', false);\r\n\r\n        /**\r\n         * Should the GameObject's `visible` property be set to `true` when the animation starts to play?\r\n         *\r\n         * @name Phaser.Animations.Animation#showOnStart\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.showOnStart = GetValue(config, 'showOnStart', false);\r\n\r\n        /**\r\n         * Should the GameObject's `visible` property be set to `false` when the animation finishes?\r\n         *\r\n         * @name Phaser.Animations.Animation#hideOnComplete\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.hideOnComplete = GetValue(config, 'hideOnComplete', false);\r\n\r\n        /**\r\n         * Global pause. All Game Objects using this Animation instance are impacted by this property.\r\n         *\r\n         * @name Phaser.Animations.Animation#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        this.manager.on(Events.PAUSE_ALL, this.pause, this);\r\n        this.manager.on(Events.RESUME_ALL, this.resume, this);\r\n    },\r\n\r\n    /**\r\n     * Add frames to the end of the animation.\r\n     *\r\n     * @method Phaser.Animations.Animation#addFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    addFrame: function (config)\r\n    {\r\n        return this.addFrameAt(this.frames.length, config);\r\n    },\r\n\r\n    /**\r\n     * Add frame/s into the animation.\r\n     *\r\n     * @method Phaser.Animations.Animation#addFrameAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index to insert the frame at within the animation.\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} config - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    addFrameAt: function (index, config)\r\n    {\r\n        var newFrames = this.getFrames(this.manager.textureManager, config);\r\n\r\n        if (newFrames.length > 0)\r\n        {\r\n            if (index === 0)\r\n            {\r\n                this.frames = newFrames.concat(this.frames);\r\n            }\r\n            else if (index === this.frames.length)\r\n            {\r\n                this.frames = this.frames.concat(newFrames);\r\n            }\r\n            else\r\n            {\r\n                var pre = this.frames.slice(0, index);\r\n                var post = this.frames.slice(index);\r\n\r\n                this.frames = pre.concat(newFrames, post);\r\n            }\r\n\r\n            this.updateFrameSequence();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check if the given frame index is valid.\r\n     *\r\n     * @method Phaser.Animations.Animation#checkFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index to be checked.\r\n     *\r\n     * @return {boolean} `true` if the index is valid, otherwise `false`.\r\n     */\r\n    checkFrame: function (index)\r\n    {\r\n        return (index >= 0 && index < this.frames.length);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#completeAnimation\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    completeAnimation: function (component)\r\n    {\r\n        if (this.hideOnComplete)\r\n        {\r\n            component.parent.visible = false;\r\n        }\r\n\r\n        component.stop();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getFirstTick\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     * @param {boolean} [includeDelay=true] - [description]\r\n     */\r\n    getFirstTick: function (component, includeDelay)\r\n    {\r\n        if (includeDelay === undefined) { includeDelay = true; }\r\n\r\n        //  When is the first update due?\r\n        component.accumulator = 0;\r\n        component.nextTick = component.msPerFrame + component.currentFrame.duration;\r\n\r\n        if (includeDelay)\r\n        {\r\n            component.nextTick += component._delay;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns the AnimationFrame at the provided index\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrameAt\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index in the AnimationFrame array\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} The frame at the index provided from the animation sequence\r\n     */\r\n    getFrameAt: function (index)\r\n    {\r\n        return this.frames[index];\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.TextureManager} textureManager - [description]\r\n     * @param {(string|Phaser.Types.Animations.AnimationFrame[])} frames - [description]\r\n     * @param {string} [defaultTextureKey] - [description]\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame[]} [description]\r\n     */\r\n    getFrames: function (textureManager, frames, defaultTextureKey)\r\n    {\r\n        var out = [];\r\n        var prev;\r\n        var animationFrame;\r\n        var index = 1;\r\n        var i;\r\n        var textureKey;\r\n\r\n        //  if frames is a string, we'll get all the frames from the texture manager as if it's a sprite sheet\r\n        if (typeof frames === 'string')\r\n        {\r\n            textureKey = frames;\r\n\r\n            var texture = textureManager.get(textureKey);\r\n            var frameKeys = texture.getFrameNames();\r\n\r\n            frames = [];\r\n\r\n            frameKeys.forEach(function (idx, value)\r\n            {\r\n                frames.push({ key: textureKey, frame: value });\r\n            });\r\n        }\r\n\r\n        if (!Array.isArray(frames) || frames.length === 0)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        for (i = 0; i < frames.length; i++)\r\n        {\r\n            var item = frames[i];\r\n\r\n            var key = GetValue(item, 'key', defaultTextureKey);\r\n\r\n            if (!key)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            //  Could be an integer or a string\r\n            var frame = GetValue(item, 'frame', 0);\r\n\r\n            //  The actual texture frame\r\n            var textureFrame = textureManager.getFrame(key, frame);\r\n\r\n            animationFrame = new Frame(key, frame, index, textureFrame);\r\n\r\n            animationFrame.duration = GetValue(item, 'duration', 0);\r\n\r\n            animationFrame.isFirst = (!prev);\r\n\r\n            //  The previously created animationFrame\r\n            if (prev)\r\n            {\r\n                prev.nextFrame = animationFrame;\r\n\r\n                animationFrame.prevFrame = prev;\r\n            }\r\n\r\n            out.push(animationFrame);\r\n\r\n            prev = animationFrame;\r\n\r\n            index++;\r\n        }\r\n\r\n        if (out.length > 0)\r\n        {\r\n            animationFrame.isLast = true;\r\n\r\n            //  Link them end-to-end, so they loop\r\n            animationFrame.nextFrame = out[0];\r\n\r\n            out[0].prevFrame = animationFrame;\r\n\r\n            //  Generate the progress data\r\n\r\n            var slice = 1 / (out.length - 1);\r\n\r\n            for (i = 0; i < out.length; i++)\r\n            {\r\n                out[i].progress = i * slice;\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#getNextTick\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    getNextTick: function (component)\r\n    {\r\n        // accumulator += delta * _timeScale\r\n        // after a large delta surge (perf issue for example) we need to adjust for it here\r\n\r\n        //  When is the next update due?\r\n        component.accumulator -= component.nextTick;\r\n\r\n        component.nextTick = component.msPerFrame + component.currentFrame.duration;\r\n    },\r\n\r\n    /**\r\n     * Loads the Animation values into the Animation Component.\r\n     *\r\n     * @method Phaser.Animations.Animation#load\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to load values into.\r\n     * @param {integer} startFrame - The start frame of the animation to load.\r\n     */\r\n    load: function (component, startFrame)\r\n    {\r\n        if (startFrame >= this.frames.length)\r\n        {\r\n            startFrame = 0;\r\n        }\r\n\r\n        if (component.currentAnim !== this)\r\n        {\r\n            component.currentAnim = this;\r\n\r\n            component.frameRate = this.frameRate;\r\n            component.duration = this.duration;\r\n            component.msPerFrame = this.msPerFrame;\r\n            component.skipMissedFrames = this.skipMissedFrames;\r\n\r\n            component._delay = this.delay;\r\n            component._repeat = this.repeat;\r\n            component._repeatDelay = this.repeatDelay;\r\n            component._yoyo = this.yoyo;\r\n        }\r\n\r\n        var frame = this.frames[startFrame];\r\n\r\n        if (startFrame === 0 && !component.forward)\r\n        {\r\n            frame = this.getLastFrame();\r\n        }\r\n\r\n        component.updateFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Returns the frame closest to the given progress value between 0 and 1.\r\n     *\r\n     * @method Phaser.Animations.Animation#getFrameByProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - A value between 0 and 1.\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} The frame closest to the given progress value.\r\n     */\r\n    getFrameByProgress: function (value)\r\n    {\r\n        value = Clamp(value, 0, 1);\r\n\r\n        return FindClosestInSorted(value, this.frames, 'progress');\r\n    },\r\n\r\n    /**\r\n     * Advance the animation frame.\r\n     *\r\n     * @method Phaser.Animations.Animation#nextFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n     */\r\n    nextFrame: function (component)\r\n    {\r\n        var frame = component.currentFrame;\r\n\r\n        //  TODO: Add frame skip support\r\n\r\n        if (frame.isLast)\r\n        {\r\n            //  We're at the end of the animation\r\n\r\n            //  Yoyo? (happens before repeat)\r\n            if (component._yoyo)\r\n            {\r\n                this.handleYoyoFrame(component, false);\r\n            }\r\n            else if (component.repeatCounter > 0)\r\n            {\r\n                //  Repeat (happens before complete)\r\n\r\n                if (component._reverse && component.forward)\r\n                {\r\n                    component.forward = false;\r\n                }\r\n                else\r\n                {\r\n                    this.repeatAnimation(component);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.completeAnimation(component);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.updateAndGetNextTick(component, frame.nextFrame);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Handle the yoyo functionality in nextFrame and previousFrame methods.\r\n     *\r\n     * @method Phaser.Animations.Animation#handleYoyoFrame\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - The Animation Component to advance.\r\n     * @param {boolean} isReverse - Is animation in reverse mode? (Default: false)\r\n     */\r\n    handleYoyoFrame: function (component, isReverse)\r\n    {\r\n        if (!isReverse) { isReverse = false; }\r\n\r\n        if (component._reverse === !isReverse && component.repeatCounter > 0)\r\n        {\r\n            component.forward = isReverse;\r\n\r\n            this.repeatAnimation(component);\r\n\r\n            return;\r\n        }\r\n\r\n        if (component._reverse !== isReverse && component.repeatCounter === 0)\r\n        {\r\n            this.completeAnimation(component);\r\n\r\n            return;\r\n        }\r\n        \r\n        component.forward = isReverse;\r\n\r\n        var frame = (isReverse) ? component.currentFrame.nextFrame : component.currentFrame.prevFrame;\r\n\r\n        this.updateAndGetNextTick(component, frame);\r\n    },\r\n\r\n    /**\r\n     * Returns the animation last frame.\r\n     *\r\n     * @method Phaser.Animations.Animation#getLastFrame\r\n     * @since 3.12.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationFrame} component - The Animation Last Frame.\r\n     */\r\n    getLastFrame: function ()\r\n    {\r\n        return this.frames[this.frames.length - 1];\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#previousFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    previousFrame: function (component)\r\n    {\r\n        var frame = component.currentFrame;\r\n\r\n        //  TODO: Add frame skip support\r\n\r\n        if (frame.isFirst)\r\n        {\r\n            //  We're at the start of the animation\r\n\r\n            if (component._yoyo)\r\n            {\r\n                this.handleYoyoFrame(component, true);\r\n            }\r\n            else if (component.repeatCounter > 0)\r\n            {\r\n                if (component._reverse && !component.forward)\r\n                {\r\n                    component.currentFrame = this.getLastFrame();\r\n                    this.repeatAnimation(component);\r\n                }\r\n                else\r\n                {\r\n                    //  Repeat (happens before complete)\r\n                    component.forward = true;\r\n                    this.repeatAnimation(component);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                this.completeAnimation(component);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.updateAndGetNextTick(component, frame.prevFrame);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update Frame and Wait next tick.\r\n     *\r\n     * @method Phaser.Animations.Animation#updateAndGetNextTick\r\n     * @private\r\n     * @since 3.12.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} frame - An Animation frame.\r\n     */\r\n    updateAndGetNextTick: function (component, frame)\r\n    {\r\n        component.updateFrame(frame);\r\n\r\n        this.getNextTick(component);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#removeFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} frame - [description]\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    removeFrame: function (frame)\r\n    {\r\n        var index = this.frames.indexOf(frame);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.removeFrameAt(index);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes a frame from the AnimationFrame array at the provided index\r\n     * and updates the animation accordingly.\r\n     *\r\n     * @method Phaser.Animations.Animation#removeFrameAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The index in the AnimationFrame array\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    removeFrameAt: function (index)\r\n    {\r\n        this.frames.splice(index, 1);\r\n\r\n        this.updateFrameSequence();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#repeatAnimation\r\n     * @fires Phaser.Animations.Events#ANIMATION_REPEAT\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_REPEAT\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_REPEAT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    repeatAnimation: function (component)\r\n    {\r\n        if (component._pendingStop === 2)\r\n        {\r\n            return this.completeAnimation(component);\r\n        }\r\n\r\n        if (component._repeatDelay > 0 && component.pendingRepeat === false)\r\n        {\r\n            component.pendingRepeat = true;\r\n            component.accumulator -= component.nextTick;\r\n            component.nextTick += component._repeatDelay;\r\n        }\r\n        else\r\n        {\r\n            component.repeatCounter--;\r\n\r\n            component.updateFrame(component.currentFrame[(component.forward) ? 'nextFrame' : 'prevFrame']);\r\n\r\n            if (component.isPlaying)\r\n            {\r\n                this.getNextTick(component);\r\n\r\n                component.pendingRepeat = false;\r\n\r\n                var frame = component.currentFrame;\r\n                var parent = component.parent;\r\n\r\n                this.emit(Events.ANIMATION_REPEAT, this, frame);\r\n\r\n                parent.emit(Events.SPRITE_ANIMATION_KEY_REPEAT + this.key, this, frame, component.repeatCounter, parent);\r\n\r\n                parent.emit(Events.SPRITE_ANIMATION_REPEAT, this, frame, component.repeatCounter, parent);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the texture frame the animation uses for rendering.\r\n     *\r\n     * @method Phaser.Animations.Animation#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Components.Animation} component - [description]\r\n     */\r\n    setFrame: function (component)\r\n    {\r\n        //  Work out which frame should be set next on the child, and set it\r\n        if (component.forward)\r\n        {\r\n            this.nextFrame(component);\r\n        }\r\n        else\r\n        {\r\n            this.previousFrame(component);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Converts the animation data to JSON.\r\n     *\r\n     * @method Phaser.Animations.Animation#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Animations.JSONAnimation} [description]\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            key: this.key,\r\n            type: this.type,\r\n            frames: [],\r\n            frameRate: this.frameRate,\r\n            duration: this.duration,\r\n            skipMissedFrames: this.skipMissedFrames,\r\n            delay: this.delay,\r\n            repeat: this.repeat,\r\n            repeatDelay: this.repeatDelay,\r\n            yoyo: this.yoyo,\r\n            showOnStart: this.showOnStart,\r\n            hideOnComplete: this.hideOnComplete\r\n        };\r\n\r\n        this.frames.forEach(function (frame)\r\n        {\r\n            output.frames.push(frame.toJSON());\r\n        });\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#updateFrameSequence\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    updateFrameSequence: function ()\r\n    {\r\n        var len = this.frames.length;\r\n        var slice = 1 / (len - 1);\r\n\r\n        var frame;\r\n\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            frame = this.frames[i];\r\n\r\n            frame.index = i + 1;\r\n            frame.isFirst = false;\r\n            frame.isLast = false;\r\n            frame.progress = i * slice;\r\n\r\n            if (i === 0)\r\n            {\r\n                frame.isFirst = true;\r\n\r\n                if (len === 1)\r\n                {\r\n                    frame.isLast = true;\r\n                    frame.nextFrame = frame;\r\n                    frame.prevFrame = frame;\r\n                }\r\n                else\r\n                {\r\n                    frame.isLast = false;\r\n                    frame.prevFrame = this.frames[len - 1];\r\n                    frame.nextFrame = this.frames[i + 1];\r\n                }\r\n            }\r\n            else if (i === len - 1 && len > 1)\r\n            {\r\n                frame.isLast = true;\r\n                frame.prevFrame = this.frames[len - 2];\r\n                frame.nextFrame = this.frames[0];\r\n            }\r\n            else if (len > 1)\r\n            {\r\n                frame.prevFrame = this.frames[i - 1];\r\n                frame.nextFrame = this.frames[i + 1];\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.paused = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.Animation} This Animation object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.paused = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.Animation#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.manager.off(Events.PAUSE_ALL, this.pause, this);\r\n        this.manager.off(Events.RESUME_ALL, this.resume, this);\r\n\r\n        this.manager.remove(this.key);\r\n\r\n        for (var i = 0; i < this.frames.length; i++)\r\n        {\r\n            this.frames[i].destroy();\r\n        }\r\n\r\n        this.frames = [];\r\n\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Animation;\r\n"]},"metadata":{},"sourceType":"script"}