{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Bodies = require('./lib/factory/Bodies');\n\nvar Body = require('./lib/body/Body');\n/**\r\n * Creates a body using the supplied physics data, as provided by a JSON file.\r\n * \r\n * The data file should be loaded as JSON:\r\n * \r\n * ```javascript\r\n * preload ()\r\n * {\r\n *   this.load.json('ninjas', 'assets/ninjas.json);\r\n * }\r\n * \r\n * create ()\r\n * {\r\n *   const ninjaShapes = this.cache.json.get('ninjas');\r\n * \r\n *   this.matter.add.fromJSON(400, 300, ninjaShapes.shinobi);\r\n * }\r\n * ```\r\n * \r\n * Do not pass the entire JSON file to this method, but instead pass one of the shapes contained within it.\r\n * \r\n * If you pas in an `options` object, any settings in there will override those in the config object.\r\n * \r\n * The structure of the JSON file is as follows:\r\n * \r\n * ```text\r\n * {\r\n *   'generator_info': // The name of the application that created the JSON data\r\n *   'shapeName': {\r\n *     'type': // The type of body\r\n *     'label': // Optional body label\r\n *     'vertices': // An array, or an array of arrays, containing the vertex data in x/y object pairs\r\n *   }\r\n * }\r\n * ```\r\n * \r\n * At the time of writing, only the Phaser Physics Tracer App exports in this format.\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsJSONParser\r\n * @since 3.22.0\r\n */\n\n\nvar PhysicsJSONParser = {\n  /**\r\n   * Parses a body element from the given JSON data.\r\n   *\r\n   * @function Phaser.Physics.Matter.PhysicsJSONParser.parseBody\r\n   * @since 3.22.0\r\n   *\r\n   * @param {number} x - The horizontal world location of the body.\r\n   * @param {number} y - The vertical world location of the body.\r\n   * @param {object} config - The body configuration data.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n   * \r\n   * @return {MatterJS.BodyType} A Matter JS Body.\r\n   */\n  parseBody: function (x, y, config, options) {\n    if (options === undefined) {\n      options = {};\n    }\n\n    var body;\n    var vertexSets = config.vertices;\n\n    if (vertexSets.length === 1) {\n      //  Just a single Body\n      options.vertices = vertexSets[0];\n      body = Body.create(options);\n      Bodies.flagCoincidentParts(body.parts);\n    } else {\n      var parts = [];\n\n      for (var i = 0; i < vertexSets.length; i++) {\n        var part = Body.create({\n          vertices: vertexSets[i]\n        });\n        parts.push(part);\n      }\n\n      Bodies.flagCoincidentParts(parts);\n      options.parts = parts;\n      body = Body.create(options);\n    }\n\n    body.label = config.label;\n    Body.setPosition(body, {\n      x: x,\n      y: y\n    });\n    return body;\n  }\n};\nmodule.exports = PhysicsJSONParser;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/PhysicsJSONParser.js"],"names":["Bodies","require","Body","PhysicsJSONParser","parseBody","x","y","config","options","undefined","body","vertexSets","vertices","length","create","flagCoincidentParts","parts","i","part","push","label","setPosition","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,sBAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,iBAAD,CAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,IAAIE,iBAAiB,GAAG;AAEpB;;;;;;;;;;;;;AAaAC,EAAAA,SAAS,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,MAAhB,EAAwBC,OAAxB,EACX;AACI,QAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAAED,MAAAA,OAAO,GAAG,EAAV;AAAe;;AAE5C,QAAIE,IAAJ;AACA,QAAIC,UAAU,GAAGJ,MAAM,CAACK,QAAxB;;AAEA,QAAID,UAAU,CAACE,MAAX,KAAsB,CAA1B,EACA;AACI;AACAL,MAAAA,OAAO,CAACI,QAAR,GAAmBD,UAAU,CAAC,CAAD,CAA7B;AAEAD,MAAAA,IAAI,GAAGR,IAAI,CAACY,MAAL,CAAYN,OAAZ,CAAP;AAEAR,MAAAA,MAAM,CAACe,mBAAP,CAA2BL,IAAI,CAACM,KAAhC;AACH,KARD,MAUA;AACI,UAAIA,KAAK,GAAG,EAAZ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACE,MAA/B,EAAuCI,CAAC,EAAxC,EACA;AACI,YAAIC,IAAI,GAAGhB,IAAI,CAACY,MAAL,CAAY;AACnBF,UAAAA,QAAQ,EAAED,UAAU,CAACM,CAAD;AADD,SAAZ,CAAX;AAIAD,QAAAA,KAAK,CAACG,IAAN,CAAWD,IAAX;AACH;;AAEDlB,MAAAA,MAAM,CAACe,mBAAP,CAA2BC,KAA3B;AAEAR,MAAAA,OAAO,CAACQ,KAAR,GAAgBA,KAAhB;AAEAN,MAAAA,IAAI,GAAGR,IAAI,CAACY,MAAL,CAAYN,OAAZ,CAAP;AACH;;AAEDE,IAAAA,IAAI,CAACU,KAAL,GAAab,MAAM,CAACa,KAApB;AAEAlB,IAAAA,IAAI,CAACmB,WAAL,CAAiBX,IAAjB,EAAuB;AAAEL,MAAAA,CAAC,EAAEA,CAAL;AAAQC,MAAAA,CAAC,EAAEA;AAAX,KAAvB;AAEA,WAAOI,IAAP;AACH;AAxDmB,CAAxB;AA4DAY,MAAM,CAACC,OAAP,GAAiBpB,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Body = require('./lib/body/Body');\r\n\r\n/**\r\n * Creates a body using the supplied physics data, as provided by a JSON file.\r\n * \r\n * The data file should be loaded as JSON:\r\n * \r\n * ```javascript\r\n * preload ()\r\n * {\r\n *   this.load.json('ninjas', 'assets/ninjas.json);\r\n * }\r\n * \r\n * create ()\r\n * {\r\n *   const ninjaShapes = this.cache.json.get('ninjas');\r\n * \r\n *   this.matter.add.fromJSON(400, 300, ninjaShapes.shinobi);\r\n * }\r\n * ```\r\n * \r\n * Do not pass the entire JSON file to this method, but instead pass one of the shapes contained within it.\r\n * \r\n * If you pas in an `options` object, any settings in there will override those in the config object.\r\n * \r\n * The structure of the JSON file is as follows:\r\n * \r\n * ```text\r\n * {\r\n *   'generator_info': // The name of the application that created the JSON data\r\n *   'shapeName': {\r\n *     'type': // The type of body\r\n *     'label': // Optional body label\r\n *     'vertices': // An array, or an array of arrays, containing the vertex data in x/y object pairs\r\n *   }\r\n * }\r\n * ```\r\n * \r\n * At the time of writing, only the Phaser Physics Tracer App exports in this format.\r\n *\r\n * @namespace Phaser.Physics.Matter.PhysicsJSONParser\r\n * @since 3.22.0\r\n */\r\nvar PhysicsJSONParser = {\r\n\r\n    /**\r\n     * Parses a body element from the given JSON data.\r\n     *\r\n     * @function Phaser.Physics.Matter.PhysicsJSONParser.parseBody\r\n     * @since 3.22.0\r\n     *\r\n     * @param {number} x - The horizontal world location of the body.\r\n     * @param {number} y - The vertical world location of the body.\r\n     * @param {object} config - The body configuration data.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n     * \r\n     * @return {MatterJS.BodyType} A Matter JS Body.\r\n     */\r\n    parseBody: function (x, y, config, options)\r\n    {\r\n        if (options === undefined) { options = {}; }\r\n\r\n        var body;\r\n        var vertexSets = config.vertices;\r\n\r\n        if (vertexSets.length === 1)\r\n        {\r\n            //  Just a single Body\r\n            options.vertices = vertexSets[0];\r\n\r\n            body = Body.create(options);\r\n\r\n            Bodies.flagCoincidentParts(body.parts);\r\n        }\r\n        else\r\n        {\r\n            var parts = [];\r\n\r\n            for (var i = 0; i < vertexSets.length; i++)\r\n            {\r\n                var part = Body.create({\r\n                    vertices: vertexSets[i]\r\n                });\r\n\r\n                parts.push(part);\r\n            }\r\n\r\n            Bodies.flagCoincidentParts(parts);\r\n\r\n            options.parts = parts;\r\n\r\n            body = Body.create(options);\r\n        }\r\n\r\n        body.label = config.label;\r\n\r\n        Body.setPosition(body, { x: x, y: y });\r\n\r\n        return body;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = PhysicsJSONParser;\r\n"]},"metadata":{},"sourceType":"script"}