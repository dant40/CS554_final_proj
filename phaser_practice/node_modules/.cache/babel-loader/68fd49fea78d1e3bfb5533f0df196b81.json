{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar Line = require('../../geom/line/Line');\n/**\r\n * @classdesc\r\n * The Shape Game Object is a base class for the various different shapes, such as the Arc, Star or Polygon.\r\n * You cannot add a Shape directly to your Scene, it is meant as a base for your own custom Shape classes.\r\n *\r\n * @class Shape\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {string} [type] - The internal type of the Shape.\r\n * @param {any} [data] - The data of the source shape geometry, if any.\r\n */\n\n\nvar Shape = new Class({\n  Extends: GameObject,\n  Mixins: [Components.AlphaSingle, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.GetBounds, Components.Mask, Components.Origin, Components.Pipeline, Components.ScrollFactor, Components.Transform, Components.Visible],\n  initialize: function Shape(scene, type, data) {\n    if (type === undefined) {\n      type = 'Shape';\n    }\n\n    GameObject.call(this, scene, type);\n    /**\r\n     * The source Shape data. Typically a geometry object.\r\n     * You should not manipulate this directly.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#data\r\n     * @type {any}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.geom = data;\n    /**\r\n     * Holds the polygon path data for filled rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#pathData\r\n     * @type {number[]}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.pathData = [];\n    /**\r\n     * Holds the earcut polygon path index data for filled rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#pathIndexes\r\n     * @type {integer[]}\r\n     * @readonly\r\n     * @since 3.13.0\r\n     */\n\n    this.pathIndexes = [];\n    /**\r\n     * The fill color used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#fillColor\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillColor = 0xffffff;\n    /**\r\n     * The fill alpha value used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#fillAlpha\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillAlpha = 1;\n    /**\r\n     * The stroke color used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#strokeColor\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.strokeColor = 0xffffff;\n    /**\r\n     * The stroke alpha value used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#strokeAlpha\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.strokeAlpha = 1;\n    /**\r\n     * The stroke line width used by this Shape.\r\n     *\r\n     * @name Phaser.GameObjects.Shape#lineWidth\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.lineWidth = 1;\n    /**\r\n     * Controls if this Shape is filled or not.\r\n     * Note that some Shapes do not support being filled (such as Line shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#isFilled\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.isFilled = false;\n    /**\r\n     * Controls if this Shape is stroked or not.\r\n     * Note that some Shapes do not support being stroked (such as Iso Box shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#isStroked\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.isStroked = false;\n    /**\r\n     * Controls if this Shape path is closed during rendering when stroked.\r\n     * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n     *\r\n     * @name Phaser.GameObjects.Shape#closePath\r\n     * @type {boolean}\r\n     * @since 3.13.0\r\n     */\n\n    this.closePath = true;\n    /**\r\n     * Private internal value.\r\n     * A Line used when parsing internal path data to avoid constant object re-creation.\r\n     *\r\n     * @name Phaser.GameObjects.Curve#_tempLine\r\n     * @type {Phaser.Geom.Line}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._tempLine = new Line();\n    this.initPipeline();\n  },\n\n  /**\r\n   * Sets the fill color and alpha for this Shape.\r\n   * \r\n   * If you wish for the Shape to not be filled then call this method with no arguments, or just set `isFilled` to `false`.\r\n   * \r\n   * Note that some Shapes do not support fill colors, such as the Line shape.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setFillStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [color] - The color used to fill this shape. If not provided the Shape will not be filled.\r\n   * @param {number} [alpha=1] - The alpha value used when filling this shape, if a fill color is given.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFillStyle: function (color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    if (color === undefined) {\n      this.isFilled = false;\n    } else {\n      this.fillColor = color;\n      this.fillAlpha = alpha;\n      this.isFilled = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the stroke color and alpha for this Shape.\r\n   * \r\n   * If you wish for the Shape to not be stroked then call this method with no arguments, or just set `isStroked` to `false`.\r\n   * \r\n   * Note that some Shapes do not support being stroked, such as the Iso Box shape.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setStrokeStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [lineWidth] - The width of line to stroke with. If not provided or undefined the Shape will not be stroked.\r\n   * @param {number} [color] - The color used to stroke this shape. If not provided the Shape will not be stroked.\r\n   * @param {number} [alpha=1] - The alpha value used when stroking this shape, if a stroke color is given.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setStrokeStyle: function (lineWidth, color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    if (lineWidth === undefined) {\n      this.isStroked = false;\n    } else {\n      this.lineWidth = lineWidth;\n      this.strokeColor = color;\n      this.strokeAlpha = alpha;\n      this.isStroked = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets if this Shape path is closed during rendering when stroked.\r\n   * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#setClosePath\r\n   * @since 3.13.0\r\n   * \r\n   * @param {boolean} value - Set to `true` if the Shape should be closed when stroked, otherwise `false`.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setClosePath: function (value) {\n    this.closePath = value;\n    return this;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Shape#preDestroy\r\n   * @protected\r\n   * @since 3.13.0\r\n   */\n  preDestroy: function () {\n    this.geom = null;\n    this._tempLine = null;\n    this.pathData = [];\n    this.pathIndexes = [];\n  }\n});\nmodule.exports = Shape;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/Shape.js"],"names":["Class","require","Components","GameObject","Line","Shape","Extends","Mixins","AlphaSingle","BlendMode","ComputedSize","Depth","GetBounds","Mask","Origin","Pipeline","ScrollFactor","Transform","Visible","initialize","scene","type","data","undefined","call","geom","pathData","pathIndexes","fillColor","fillAlpha","strokeColor","strokeAlpha","lineWidth","isFilled","isStroked","closePath","_tempLine","initPipeline","setFillStyle","color","alpha","setStrokeStyle","setClosePath","value","preDestroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar Line = require('../../geom/line/Line');\r\n\r\n/**\r\n * @classdesc\r\n * The Shape Game Object is a base class for the various different shapes, such as the Arc, Star or Polygon.\r\n * You cannot add a Shape directly to your Scene, it is meant as a base for your own custom Shape classes.\r\n *\r\n * @class Shape\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {string} [type] - The internal type of the Shape.\r\n * @param {any} [data] - The data of the source shape geometry, if any.\r\n */\r\nvar Shape = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.AlphaSingle,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.GetBounds,\r\n        Components.Mask,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.ScrollFactor,\r\n        Components.Transform,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Shape (scene, type, data)\r\n    {\r\n        if (type === undefined) { type = 'Shape'; }\r\n\r\n        GameObject.call(this, scene, type);\r\n\r\n        /**\r\n         * The source Shape data. Typically a geometry object.\r\n         * You should not manipulate this directly.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#data\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.geom = data;\r\n\r\n        /**\r\n         * Holds the polygon path data for filled rendering.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#pathData\r\n         * @type {number[]}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.pathData = [];\r\n\r\n        /**\r\n         * Holds the earcut polygon path index data for filled rendering.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#pathIndexes\r\n         * @type {integer[]}\r\n         * @readonly\r\n         * @since 3.13.0\r\n         */\r\n        this.pathIndexes = [];\r\n\r\n        /**\r\n         * The fill color used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#fillColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillColor = 0xffffff;\r\n\r\n        /**\r\n         * The fill alpha value used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#fillAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillAlpha = 1;\r\n\r\n        /**\r\n         * The stroke color used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#strokeColor\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.strokeColor = 0xffffff;\r\n\r\n        /**\r\n         * The stroke alpha value used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#strokeAlpha\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.strokeAlpha = 1;\r\n\r\n        /**\r\n         * The stroke line width used by this Shape.\r\n         *\r\n         * @name Phaser.GameObjects.Shape#lineWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.lineWidth = 1;\r\n\r\n        /**\r\n         * Controls if this Shape is filled or not.\r\n         * Note that some Shapes do not support being filled (such as Line shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#isFilled\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.isFilled = false;\r\n\r\n        /**\r\n         * Controls if this Shape is stroked or not.\r\n         * Note that some Shapes do not support being stroked (such as Iso Box shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#isStroked\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.isStroked = false;\r\n\r\n        /**\r\n         * Controls if this Shape path is closed during rendering when stroked.\r\n         * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n         *\r\n         * @name Phaser.GameObjects.Shape#closePath\r\n         * @type {boolean}\r\n         * @since 3.13.0\r\n         */\r\n        this.closePath = true;\r\n\r\n        /**\r\n         * Private internal value.\r\n         * A Line used when parsing internal path data to avoid constant object re-creation.\r\n         *\r\n         * @name Phaser.GameObjects.Curve#_tempLine\r\n         * @type {Phaser.Geom.Line}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._tempLine = new Line();\r\n\r\n        this.initPipeline();\r\n    },\r\n\r\n    /**\r\n     * Sets the fill color and alpha for this Shape.\r\n     * \r\n     * If you wish for the Shape to not be filled then call this method with no arguments, or just set `isFilled` to `false`.\r\n     * \r\n     * Note that some Shapes do not support fill colors, such as the Line shape.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [color] - The color used to fill this shape. If not provided the Shape will not be filled.\r\n     * @param {number} [alpha=1] - The alpha value used when filling this shape, if a fill color is given.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        if (color === undefined)\r\n        {\r\n            this.isFilled = false;\r\n        }\r\n        else\r\n        {\r\n            this.fillColor = color;\r\n            this.fillAlpha = alpha;\r\n            this.isFilled = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the stroke color and alpha for this Shape.\r\n     * \r\n     * If you wish for the Shape to not be stroked then call this method with no arguments, or just set `isStroked` to `false`.\r\n     * \r\n     * Note that some Shapes do not support being stroked, such as the Iso Box shape.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setStrokeStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [lineWidth] - The width of line to stroke with. If not provided or undefined the Shape will not be stroked.\r\n     * @param {number} [color] - The color used to stroke this shape. If not provided the Shape will not be stroked.\r\n     * @param {number} [alpha=1] - The alpha value used when stroking this shape, if a stroke color is given.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setStrokeStyle: function (lineWidth, color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        if (lineWidth === undefined)\r\n        {\r\n            this.isStroked = false;\r\n        }\r\n        else\r\n        {\r\n            this.lineWidth = lineWidth;\r\n            this.strokeColor = color;\r\n            this.strokeAlpha = alpha;\r\n            this.isStroked = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets if this Shape path is closed during rendering when stroked.\r\n     * Note that some Shapes are always closed when stroked (such as Ellipse shapes)\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#setClosePath\r\n     * @since 3.13.0\r\n     * \r\n     * @param {boolean} value - Set to `true` if the Shape should be closed when stroked, otherwise `false`.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setClosePath: function (value)\r\n    {\r\n        this.closePath = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Shape#preDestroy\r\n     * @protected\r\n     * @since 3.13.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.geom = null;\r\n        this._tempLine = null;\r\n        this.pathData = [];\r\n        this.pathIndexes = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Shape;\r\n"]},"metadata":{},"sourceType":"script"}