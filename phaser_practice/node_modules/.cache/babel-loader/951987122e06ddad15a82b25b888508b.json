{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArrayRemove = require('../../utils/array/Remove');\n\nvar Class = require('../../utils/Class');\n\nvar GameEvents = require('../../core/events');\n\nvar InputEvents = require('../events');\n\nvar KeyCodes = require('../../input/keyboard/keys/KeyCodes');\n\nvar NOOP = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * The Keyboard Manager is a helper class that belongs to the global Input Manager.\r\n * \r\n * Its role is to listen for native DOM Keyboard Events and then store them for further processing by the Keyboard Plugin.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically if keyboard\r\n * input has been enabled in the Game Config.\r\n *\r\n * @class KeyboardManager\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar KeyboardManager = new Class({\n  initialize: function KeyboardManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.16.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * An internal event queue.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#queue\r\n     * @type {KeyboardEvent[]}\r\n     * @private\r\n     * @since 3.16.0\r\n     */\n\n    this.queue = [];\n    /**\r\n     * A flag that controls if the non-modified keys, matching those stored in the `captures` array,\r\n     * have `preventDefault` called on them or not.\r\n     * \r\n     * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n     * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n     * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n     * However, if the user presses just the r key on its own, it will have its event prevented.\r\n     * \r\n     * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n     * you can toggle this property at run-time.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#preventDefault\r\n     * @type {boolean}\r\n     * @since 3.16.0\r\n     */\n\n    this.preventDefault = true;\n    /**\r\n     * An array of Key Code values that will automatically have `preventDefault` called on them,\r\n     * as long as the `KeyboardManager.preventDefault` boolean is set to `true`.\r\n     * \r\n     * By default the array is empty.\r\n     * \r\n     * The key must be non-modified when pressed in order to be captured.\r\n     * \r\n     * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n     * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n     * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n     * However, if the user presses just the r key on its own, it will have its event prevented.\r\n     * \r\n     * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n     * you can toggle the `KeyboardManager.preventDefault` boolean at run-time.\r\n     * \r\n     * If you need more specific control, you can create Key objects and set the flag on each of those instead.\r\n     * \r\n     * This array can be populated via the Game Config by setting the `input.keyboard.capture` array, or you\r\n     * can call the `addCapture` method. See also `removeCapture` and `clearCaptures`.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#captures\r\n     * @type {integer[]}\r\n     * @since 3.16.0\r\n     */\n\n    this.captures = [];\n    /**\r\n     * A boolean that controls if the Keyboard Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.16.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Keyboard Event target, as defined in the Game Config.\r\n     * Typically the window in which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#target\r\n     * @type {any}\r\n     * @since 3.16.0\r\n     */\n\n    this.target;\n    /**\r\n     * The Key Down Event handler.\r\n     * This function is sent the native DOM KeyEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#onKeyDown\r\n     * @type {function}\r\n     * @since 3.16.00\r\n     */\n\n    this.onKeyDown = NOOP;\n    /**\r\n     * The Key Up Event handler.\r\n     * This function is sent the native DOM KeyEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Keyboard.KeyboardManager#onKeyUp\r\n     * @type {function}\r\n     * @since 3.16.00\r\n     */\n\n    this.onKeyUp = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Keyboard Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#boot\r\n   * @private\r\n   * @since 3.16.0\r\n   */\n  boot: function () {\n    var config = this.manager.config;\n    this.enabled = config.inputKeyboard;\n    this.target = config.inputKeyboardEventTarget;\n    this.addCapture(config.inputKeyboardCapture);\n\n    if (!this.target && window) {\n      this.target = window;\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n\n    this.manager.game.events.on(GameEvents.POST_STEP, this.postUpdate, this);\n  },\n\n  /**\r\n   * Starts the Keyboard Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#startListeners\r\n   * @since 3.16.0\r\n   */\n  startListeners: function () {\n    var _this = this;\n\n    this.onKeyDown = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.queue.push(event);\n\n      if (!_this.manager.useQueue) {\n        _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\n      }\n\n      var modified = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;\n\n      if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n      }\n    };\n\n    this.onKeyUp = function (event) {\n      if (event.defaultPrevented || !_this.enabled || !_this.manager) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.queue.push(event);\n\n      if (!_this.manager.useQueue) {\n        _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\n      }\n\n      var modified = event.altKey || event.ctrlKey || event.shiftKey || event.metaKey;\n\n      if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1) {\n        event.preventDefault();\n      }\n    };\n\n    var target = this.target;\n\n    if (target) {\n      target.addEventListener('keydown', this.onKeyDown, false);\n      target.addEventListener('keyup', this.onKeyUp, false);\n      this.enabled = true;\n    }\n  },\n\n  /**\r\n   * Stops the Key Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#stopListeners\r\n   * @since 3.16.0\r\n   */\n  stopListeners: function () {\n    var target = this.target;\n    target.removeEventListener('keydown', this.onKeyDown, false);\n    target.removeEventListener('keyup', this.onKeyUp, false);\n    this.enabled = false;\n  },\n\n  /**\r\n   * Clears the event queue.\r\n   * Called automatically by the Input Manager.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#postUpdate\r\n   * @private\r\n   * @since 3.16.0\r\n   */\n  postUpdate: function () {\n    this.queue = [];\n  },\n\n  /**\r\n   * By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\r\n   * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\r\n   *\r\n   * This `addCapture` method enables consuming keyboard event for specific keys so it doesn't bubble up to the the browser\r\n   * and cause the default browser behavior.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\r\n   * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass in a single key code value, or an array of key codes, or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.addCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   * \r\n   * If there are active captures after calling this method, the `preventDefault` property is set to `true`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#addCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to enable capture for, preventing them reaching the browser.\r\n   */\n  addCapture: function (keycode) {\n    if (typeof keycode === 'string') {\n      keycode = keycode.split(',');\n    }\n\n    if (!Array.isArray(keycode)) {\n      keycode = [keycode];\n    }\n\n    var captures = this.captures;\n\n    for (var i = 0; i < keycode.length; i++) {\n      var code = keycode[i];\n\n      if (typeof code === 'string') {\n        code = KeyCodes[code.trim().toUpperCase()];\n      }\n\n      if (captures.indexOf(code) === -1) {\n        captures.push(code);\n      }\n    }\n\n    this.preventDefault = captures.length > 0;\n  },\n\n  /**\r\n   * Removes an existing key capture.\r\n   * \r\n   * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\r\n   * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\r\n   * \r\n   * You can pass in a single key code value, or an array of key codes, or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture(62);\r\n   * ```\r\n   * \r\n   * An array of key codes:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\r\n   * ```\r\n   * \r\n   * Or a string:\r\n   * \r\n   * ```javascript\r\n   * this.input.keyboard.removeCapture('W,S,A,D');\r\n   * ```\r\n   * \r\n   * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n   * \r\n   * You can also provide an array mixing both strings and key code integers.\r\n   * \r\n   * If there are no captures left after calling this method, the `preventDefault` property is set to `false`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#removeCapture\r\n   * @since 3.16.0\r\n   * \r\n   * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to disable capture for, allowing them reaching the browser again.\r\n   */\n  removeCapture: function (keycode) {\n    if (typeof keycode === 'string') {\n      keycode = keycode.split(',');\n    }\n\n    if (!Array.isArray(keycode)) {\n      keycode = [keycode];\n    }\n\n    var captures = this.captures;\n\n    for (var i = 0; i < keycode.length; i++) {\n      var code = keycode[i];\n\n      if (typeof code === 'string') {\n        code = KeyCodes[code.toUpperCase()];\n      }\n\n      ArrayRemove(captures, code);\n    }\n\n    this.preventDefault = captures.length > 0;\n  },\n\n  /**\r\n   * Removes all keyboard captures and sets the `preventDefault` property to `false`.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#clearCaptures\r\n   * @since 3.16.0\r\n   */\n  clearCaptures: function () {\n    this.captures = [];\n    this.preventDefault = false;\n  },\n\n  /**\r\n   * Destroys this Keyboard Manager instance.\r\n   *\r\n   * @method Phaser.Input.Keyboard.KeyboardManager#destroy\r\n   * @since 3.16.0\r\n   */\n  destroy: function () {\n    this.stopListeners();\n    this.clearCaptures();\n    this.queue = [];\n    this.manager.game.events.off(GameEvents.POST_RENDER, this.postUpdate, this);\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = KeyboardManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/keyboard/KeyboardManager.js"],"names":["ArrayRemove","require","Class","GameEvents","InputEvents","KeyCodes","NOOP","KeyboardManager","initialize","inputManager","manager","queue","preventDefault","captures","enabled","target","onKeyDown","onKeyUp","events","once","MANAGER_BOOT","boot","config","inputKeyboard","inputKeyboardEventTarget","addCapture","inputKeyboardCapture","window","startListeners","game","on","POST_STEP","postUpdate","_this","event","defaultPrevented","push","useQueue","emit","MANAGER_PROCESS","modified","altKey","ctrlKey","shiftKey","metaKey","indexOf","keyCode","addEventListener","stopListeners","removeEventListener","keycode","split","Array","isArray","i","length","code","trim","toUpperCase","removeCapture","clearCaptures","destroy","off","POST_RENDER","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArrayRemove = require('../../utils/array/Remove');\r\nvar Class = require('../../utils/Class');\r\nvar GameEvents = require('../../core/events');\r\nvar InputEvents = require('../events');\r\nvar KeyCodes = require('../../input/keyboard/keys/KeyCodes');\r\nvar NOOP = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * The Keyboard Manager is a helper class that belongs to the global Input Manager.\r\n * \r\n * Its role is to listen for native DOM Keyboard Events and then store them for further processing by the Keyboard Plugin.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically if keyboard\r\n * input has been enabled in the Game Config.\r\n *\r\n * @class KeyboardManager\r\n * @memberof Phaser.Input.Keyboard\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar KeyboardManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function KeyboardManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.16.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#queue\r\n         * @type {KeyboardEvent[]}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * A flag that controls if the non-modified keys, matching those stored in the `captures` array,\r\n         * have `preventDefault` called on them or not.\r\n         * \r\n         * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n         * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n         * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n         * However, if the user presses just the r key on its own, it will have its event prevented.\r\n         * \r\n         * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n         * you can toggle this property at run-time.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#preventDefault\r\n         * @type {boolean}\r\n         * @since 3.16.0\r\n         */\r\n        this.preventDefault = true;\r\n\r\n        /**\r\n         * An array of Key Code values that will automatically have `preventDefault` called on them,\r\n         * as long as the `KeyboardManager.preventDefault` boolean is set to `true`.\r\n         * \r\n         * By default the array is empty.\r\n         * \r\n         * The key must be non-modified when pressed in order to be captured.\r\n         * \r\n         * A non-modified key is one that doesn't have a modifier key held down with it. The modifier keys are\r\n         * shift, control, alt and the meta key (Command on a Mac, the Windows Key on Windows).\r\n         * Therefore, if the user presses shift + r, it won't prevent this combination, because of the modifier.\r\n         * However, if the user presses just the r key on its own, it will have its event prevented.\r\n         * \r\n         * If you wish to stop capturing the keys, for example switching out to a DOM based element, then\r\n         * you can toggle the `KeyboardManager.preventDefault` boolean at run-time.\r\n         * \r\n         * If you need more specific control, you can create Key objects and set the flag on each of those instead.\r\n         * \r\n         * This array can be populated via the Game Config by setting the `input.keyboard.capture` array, or you\r\n         * can call the `addCapture` method. See also `removeCapture` and `clearCaptures`.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#captures\r\n         * @type {integer[]}\r\n         * @since 3.16.0\r\n         */\r\n        this.captures = [];\r\n\r\n        /**\r\n         * A boolean that controls if the Keyboard Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.16.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Keyboard Event target, as defined in the Game Config.\r\n         * Typically the window in which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#target\r\n         * @type {any}\r\n         * @since 3.16.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * The Key Down Event handler.\r\n         * This function is sent the native DOM KeyEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#onKeyDown\r\n         * @type {function}\r\n         * @since 3.16.00\r\n         */\r\n        this.onKeyDown = NOOP;\r\n\r\n        /**\r\n         * The Key Up Event handler.\r\n         * This function is sent the native DOM KeyEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Keyboard.KeyboardManager#onKeyUp\r\n         * @type {function}\r\n         * @since 3.16.00\r\n         */\r\n        this.onKeyUp = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Keyboard Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#boot\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputKeyboard;\r\n        this.target = config.inputKeyboardEventTarget;\r\n\r\n        this.addCapture(config.inputKeyboardCapture);\r\n\r\n        if (!this.target && window)\r\n        {\r\n            this.target = window;\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.manager.game.events.on(GameEvents.POST_STEP, this.postUpdate, this);\r\n    },\r\n\r\n    /**\r\n     * Starts the Keyboard Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#startListeners\r\n     * @since 3.16.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.onKeyDown = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.queue.push(event);\r\n\r\n            if (!_this.manager.useQueue)\r\n            {\r\n                _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\r\n            }\r\n    \r\n            var modified = (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey);\r\n\r\n            if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        this.onKeyUp = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.enabled || !_this.manager)\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.queue.push(event);\r\n\r\n            if (!_this.manager.useQueue)\r\n            {\r\n                _this.manager.events.emit(InputEvents.MANAGER_PROCESS);\r\n            }\r\n    \r\n            var modified = (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey);\r\n\r\n            if (_this.preventDefault && !modified && _this.captures.indexOf(event.keyCode) > -1)\r\n            {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (target)\r\n        {\r\n            target.addEventListener('keydown', this.onKeyDown, false);\r\n            target.addEventListener('keyup', this.onKeyUp, false);\r\n\r\n            this.enabled = true;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops the Key Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#stopListeners\r\n     * @since 3.16.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('keydown', this.onKeyDown, false);\r\n        target.removeEventListener('keyup', this.onKeyUp, false);\r\n\r\n        this.enabled = false;\r\n    },\r\n\r\n    /**\r\n     * Clears the event queue.\r\n     * Called automatically by the Input Manager.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#postUpdate\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n        this.queue = [];\r\n    },\r\n\r\n    /**\r\n     * By default when a key is pressed Phaser will not stop the event from propagating up to the browser.\r\n     * There are some keys this can be annoying for, like the arrow keys or space bar, which make the browser window scroll.\r\n     *\r\n     * This `addCapture` method enables consuming keyboard event for specific keys so it doesn't bubble up to the the browser\r\n     * and cause the default browser behavior.\r\n     * \r\n     * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to say prevent\r\n     * the SPACE BAR from triggering a page scroll, then it will prevent it for any Scene in your game, not just the calling one.\r\n     * \r\n     * You can pass in a single key code value, or an array of key codes, or a string:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.addCapture(62);\r\n     * ```\r\n     * \r\n     * An array of key codes:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.addCapture([ 62, 63, 64 ]);\r\n     * ```\r\n     * \r\n     * Or a string:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.addCapture('W,S,A,D');\r\n     * ```\r\n     * \r\n     * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n     * \r\n     * You can also provide an array mixing both strings and key code integers.\r\n     * \r\n     * If there are active captures after calling this method, the `preventDefault` property is set to `true`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#addCapture\r\n     * @since 3.16.0\r\n     * \r\n     * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to enable capture for, preventing them reaching the browser.\r\n     */\r\n    addCapture: function (keycode)\r\n    {\r\n        if (typeof keycode === 'string')\r\n        {\r\n            keycode = keycode.split(',');\r\n        }\r\n\r\n        if (!Array.isArray(keycode))\r\n        {\r\n            keycode = [ keycode ];\r\n        }\r\n\r\n        var captures = this.captures;\r\n\r\n        for (var i = 0; i < keycode.length; i++)\r\n        {\r\n            var code = keycode[i];\r\n\r\n            if (typeof code === 'string')\r\n            {\r\n                code = KeyCodes[code.trim().toUpperCase()];\r\n            }\r\n\r\n            if (captures.indexOf(code) === -1)\r\n            {\r\n                captures.push(code);\r\n            }\r\n        }\r\n\r\n        this.preventDefault = captures.length > 0;\r\n    },\r\n\r\n    /**\r\n     * Removes an existing key capture.\r\n     * \r\n     * Please note that keyboard captures are global. This means that if you call this method from within a Scene, to remove\r\n     * the capture of a key, then it will remove it for any Scene in your game, not just the calling one.\r\n     * \r\n     * You can pass in a single key code value, or an array of key codes, or a string:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture(62);\r\n     * ```\r\n     * \r\n     * An array of key codes:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture([ 62, 63, 64 ]);\r\n     * ```\r\n     * \r\n     * Or a string:\r\n     * \r\n     * ```javascript\r\n     * this.input.keyboard.removeCapture('W,S,A,D');\r\n     * ```\r\n     * \r\n     * To use non-alpha numeric keys, use a string, such as 'UP', 'SPACE' or 'LEFT'.\r\n     * \r\n     * You can also provide an array mixing both strings and key code integers.\r\n     * \r\n     * If there are no captures left after calling this method, the `preventDefault` property is set to `false`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#removeCapture\r\n     * @since 3.16.0\r\n     * \r\n     * @param {(string|integer|integer[]|any[])} keycode - The Key Codes to disable capture for, allowing them reaching the browser again.\r\n     */\r\n    removeCapture: function (keycode)\r\n    {\r\n        if (typeof keycode === 'string')\r\n        {\r\n            keycode = keycode.split(',');\r\n        }\r\n\r\n        if (!Array.isArray(keycode))\r\n        {\r\n            keycode = [ keycode ];\r\n        }\r\n\r\n        var captures = this.captures;\r\n\r\n        for (var i = 0; i < keycode.length; i++)\r\n        {\r\n            var code = keycode[i];\r\n\r\n            if (typeof code === 'string')\r\n            {\r\n                code = KeyCodes[code.toUpperCase()];\r\n            }\r\n\r\n            ArrayRemove(captures, code);\r\n        }\r\n\r\n        this.preventDefault = captures.length > 0;\r\n    },\r\n\r\n    /**\r\n     * Removes all keyboard captures and sets the `preventDefault` property to `false`.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#clearCaptures\r\n     * @since 3.16.0\r\n     */\r\n    clearCaptures: function ()\r\n    {\r\n        this.captures = [];\r\n\r\n        this.preventDefault = false;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Keyboard Manager instance.\r\n     *\r\n     * @method Phaser.Input.Keyboard.KeyboardManager#destroy\r\n     * @since 3.16.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.clearCaptures();\r\n\r\n        this.queue = [];\r\n\r\n        this.manager.game.events.off(GameEvents.POST_RENDER, this.postUpdate, this);\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = KeyboardManager;\r\n"]},"metadata":{},"sourceType":"script"}