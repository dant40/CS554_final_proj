{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ProcessTileSeparationY = require('./ProcessTileSeparationY');\n/**\r\n * Check the body against the given tile on the Y axis.\r\n * Used internally by the SeparateTile function.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.TileCheckY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body - The Body object to separate.\r\n * @param {Phaser.Tilemaps.Tile} tile - The tile to check.\r\n * @param {number} tileTop - The top position of the tile within the tile world.\r\n * @param {number} tileBottom - The bottom position of the tile within the tile world.\r\n * @param {number} tileBias - The tile bias value. Populated by the `World.TILE_BIAS` constant.\r\n * @param {boolean} isLayer - Is this check coming from a TilemapLayer or an array of tiles?\r\n *\r\n * @return {number} The amount of separation that occurred.\r\n */\n\n\nvar TileCheckY = function (body, tile, tileTop, tileBottom, tileBias, isLayer) {\n  var oy = 0;\n  var faceTop = tile.faceTop;\n  var faceBottom = tile.faceBottom;\n  var collideUp = tile.collideUp;\n  var collideDown = tile.collideDown;\n\n  if (!isLayer) {\n    faceTop = true;\n    faceBottom = true;\n    collideUp = true;\n    collideDown = true;\n  }\n\n  if (body.deltaY() < 0 && collideDown && body.checkCollision.up) {\n    //  Body is moving UP\n    if (faceBottom && body.y < tileBottom) {\n      oy = body.y - tileBottom;\n\n      if (oy < -tileBias) {\n        oy = 0;\n      }\n    }\n  } else if (body.deltaY() > 0 && collideUp && body.checkCollision.down) {\n    //  Body is moving DOWN\n    if (faceTop && body.bottom > tileTop) {\n      oy = body.bottom - tileTop;\n\n      if (oy > tileBias) {\n        oy = 0;\n      }\n    }\n  }\n\n  if (oy !== 0) {\n    if (body.customSeparateY) {\n      body.overlapY = oy;\n    } else {\n      ProcessTileSeparationY(body, oy);\n    }\n  }\n\n  return oy;\n};\n\nmodule.exports = TileCheckY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/tilemap/TileCheckY.js"],"names":["ProcessTileSeparationY","require","TileCheckY","body","tile","tileTop","tileBottom","tileBias","isLayer","oy","faceTop","faceBottom","collideUp","collideDown","deltaY","checkCollision","up","y","down","bottom","customSeparateY","overlapY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIC,UAAU,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,OAArD,EACjB;AACI,MAAIC,EAAE,GAAG,CAAT;AAEA,MAAIC,OAAO,GAAGN,IAAI,CAACM,OAAnB;AACA,MAAIC,UAAU,GAAGP,IAAI,CAACO,UAAtB;AACA,MAAIC,SAAS,GAAGR,IAAI,CAACQ,SAArB;AACA,MAAIC,WAAW,GAAGT,IAAI,CAACS,WAAvB;;AAEA,MAAI,CAACL,OAAL,EACA;AACIE,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,UAAU,GAAG,IAAb;AACAC,IAAAA,SAAS,GAAG,IAAZ;AACAC,IAAAA,WAAW,GAAG,IAAd;AACH;;AAED,MAAIV,IAAI,CAACW,MAAL,KAAgB,CAAhB,IAAqBD,WAArB,IAAoCV,IAAI,CAACY,cAAL,CAAoBC,EAA5D,EACA;AACI;AACA,QAAIL,UAAU,IAAIR,IAAI,CAACc,CAAL,GAASX,UAA3B,EACA;AACIG,MAAAA,EAAE,GAAGN,IAAI,CAACc,CAAL,GAASX,UAAd;;AAEA,UAAIG,EAAE,GAAG,CAACF,QAAV,EACA;AACIE,QAAAA,EAAE,GAAG,CAAL;AACH;AACJ;AACJ,GAZD,MAaK,IAAIN,IAAI,CAACW,MAAL,KAAgB,CAAhB,IAAqBF,SAArB,IAAkCT,IAAI,CAACY,cAAL,CAAoBG,IAA1D,EACL;AACI;AACA,QAAIR,OAAO,IAAIP,IAAI,CAACgB,MAAL,GAAcd,OAA7B,EACA;AACII,MAAAA,EAAE,GAAGN,IAAI,CAACgB,MAAL,GAAcd,OAAnB;;AAEA,UAAII,EAAE,GAAGF,QAAT,EACA;AACIE,QAAAA,EAAE,GAAG,CAAL;AACH;AACJ;AACJ;;AAED,MAAIA,EAAE,KAAK,CAAX,EACA;AACI,QAAIN,IAAI,CAACiB,eAAT,EACA;AACIjB,MAAAA,IAAI,CAACkB,QAAL,GAAgBZ,EAAhB;AACH,KAHD,MAKA;AACIT,MAAAA,sBAAsB,CAACG,IAAD,EAAOM,EAAP,CAAtB;AACH;AACJ;;AAED,SAAOA,EAAP;AACH,CAzDD;;AA2DAa,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ProcessTileSeparationY = require('./ProcessTileSeparationY');\r\n\r\n/**\r\n * Check the body against the given tile on the Y axis.\r\n * Used internally by the SeparateTile function.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.TileCheckY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body - The Body object to separate.\r\n * @param {Phaser.Tilemaps.Tile} tile - The tile to check.\r\n * @param {number} tileTop - The top position of the tile within the tile world.\r\n * @param {number} tileBottom - The bottom position of the tile within the tile world.\r\n * @param {number} tileBias - The tile bias value. Populated by the `World.TILE_BIAS` constant.\r\n * @param {boolean} isLayer - Is this check coming from a TilemapLayer or an array of tiles?\r\n *\r\n * @return {number} The amount of separation that occurred.\r\n */\r\nvar TileCheckY = function (body, tile, tileTop, tileBottom, tileBias, isLayer)\r\n{\r\n    var oy = 0;\r\n\r\n    var faceTop = tile.faceTop;\r\n    var faceBottom = tile.faceBottom;\r\n    var collideUp = tile.collideUp;\r\n    var collideDown = tile.collideDown;\r\n\r\n    if (!isLayer)\r\n    {\r\n        faceTop = true;\r\n        faceBottom = true;\r\n        collideUp = true;\r\n        collideDown = true;\r\n    }\r\n\r\n    if (body.deltaY() < 0 && collideDown && body.checkCollision.up)\r\n    {\r\n        //  Body is moving UP\r\n        if (faceBottom && body.y < tileBottom)\r\n        {\r\n            oy = body.y - tileBottom;\r\n\r\n            if (oy < -tileBias)\r\n            {\r\n                oy = 0;\r\n            }\r\n        }\r\n    }\r\n    else if (body.deltaY() > 0 && collideUp && body.checkCollision.down)\r\n    {\r\n        //  Body is moving DOWN\r\n        if (faceTop && body.bottom > tileTop)\r\n        {\r\n            oy = body.bottom - tileTop;\r\n\r\n            if (oy > tileBias)\r\n            {\r\n                oy = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (oy !== 0)\r\n    {\r\n        if (body.customSeparateY)\r\n        {\r\n            body.overlapY = oy;\r\n        }\r\n        else\r\n        {\r\n            ProcessTileSeparationY(body, oy);\r\n        }\r\n    }\r\n\r\n    return oy;\r\n};\r\n\r\nmodule.exports = TileCheckY;\r\n"]},"metadata":{},"sourceType":"script"}