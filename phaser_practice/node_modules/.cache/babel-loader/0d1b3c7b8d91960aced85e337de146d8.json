{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseCache = require('./BaseCache');\n\nvar Class = require('../utils/Class');\n\nvar GameEvents = require('../core/events');\n/**\r\n * @classdesc\r\n * The Cache Manager is the global cache owned and maintained by the Game instance.\r\n *\r\n * Various systems, such as the file Loader, rely on this cache in order to store the files\r\n * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\r\n * instances, one per type of file. You can also add your own custom caches.\r\n *\r\n * @class CacheManager\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this CacheManager.\r\n */\n\n\nvar CacheManager = new Class({\n  initialize: function CacheManager(game) {\n    /**\r\n     * A reference to the Phaser.Game instance that owns this CacheManager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#game\r\n     * @type {Phaser.Game}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n    this.game = game;\n    /**\r\n     * A Cache storing all binary files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#binary\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.binary = new BaseCache();\n    /**\r\n     * A Cache storing all bitmap font data files, typically added via the Loader.\r\n     * Only the font data is stored in this cache, the textures are part of the Texture Manager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#bitmapFont\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.bitmapFont = new BaseCache();\n    /**\r\n     * A Cache storing all JSON data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#json\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.json = new BaseCache();\n    /**\r\n     * A Cache storing all physics data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#physics\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.physics = new BaseCache();\n    /**\r\n     * A Cache storing all shader source files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#shader\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.shader = new BaseCache();\n    /**\r\n     * A Cache storing all non-streaming audio files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#audio\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.audio = new BaseCache();\n    /**\r\n     * A Cache storing all non-streaming video files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#video\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.20.0\r\n     */\n\n    this.video = new BaseCache();\n    /**\r\n     * A Cache storing all text files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#text\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.text = new BaseCache();\n    /**\r\n     * A Cache storing all html files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#html\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.12.0\r\n     */\n\n    this.html = new BaseCache();\n    /**\r\n     * A Cache storing all WaveFront OBJ files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#obj\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.obj = new BaseCache();\n    /**\r\n     * A Cache storing all tilemap data files, typically added via the Loader.\r\n     * Only the data is stored in this cache, the textures are part of the Texture Manager.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#tilemap\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilemap = new BaseCache();\n    /**\r\n     * A Cache storing all xml data files, typically added via the Loader.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#xml\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.0.0\r\n     */\n\n    this.xml = new BaseCache();\n    /**\r\n     * An object that contains your own custom BaseCache entries.\r\n     * Add to this via the `addCustom` method.\r\n     *\r\n     * @name Phaser.Cache.CacheManager#custom\r\n     * @type {Object.<Phaser.Cache.BaseCache>}\r\n     * @since 3.0.0\r\n     */\n\n    this.custom = {};\n    this.game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Add your own custom Cache for storing your own files.\r\n   * The cache will be available under `Cache.custom.key`.\r\n   * The cache will only be created if the key is not already in use.\r\n   *\r\n   * @method Phaser.Cache.CacheManager#addCustom\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The unique key of your custom cache.\r\n   *\r\n   * @return {Phaser.Cache.BaseCache} A reference to the BaseCache that was created. If the key was already in use, a reference to the existing cache is returned instead.\r\n   */\n  addCustom: function (key) {\n    if (!this.custom.hasOwnProperty(key)) {\n      this.custom[key] = new BaseCache();\n    }\n\n    return this.custom[key];\n  },\n\n  /**\r\n   * Removes all entries from all BaseCaches and destroys all custom caches.\r\n   *\r\n   * @method Phaser.Cache.CacheManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    var keys = ['binary', 'bitmapFont', 'json', 'physics', 'shader', 'audio', 'video', 'text', 'html', 'obj', 'tilemap', 'xml'];\n\n    for (var i = 0; i < keys.length; i++) {\n      this[keys[i]].destroy();\n      this[keys[i]] = null;\n    }\n\n    for (var key in this.custom) {\n      this.custom[key].destroy();\n    }\n\n    this.custom = null;\n    this.game = null;\n  }\n});\nmodule.exports = CacheManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cache/CacheManager.js"],"names":["BaseCache","require","Class","GameEvents","CacheManager","initialize","game","binary","bitmapFont","json","physics","shader","audio","video","text","html","obj","tilemap","xml","custom","events","once","DESTROY","destroy","addCustom","key","hasOwnProperty","keys","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,gBAAD,CAAxB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIG,YAAY,GAAG,IAAIF,KAAJ,CAAU;AAEzBG,EAAAA,UAAU,EAEV,SAASD,YAAT,CAAuBE,IAAvB,EACA;AACI;;;;;;;;AAQA,SAAKA,IAAL,GAAYA,IAAZ;AAEA;;;;;;;;AAOA,SAAKC,MAAL,GAAc,IAAIP,SAAJ,EAAd;AAEA;;;;;;;;;AAQA,SAAKQ,UAAL,GAAkB,IAAIR,SAAJ,EAAlB;AAEA;;;;;;;;AAOA,SAAKS,IAAL,GAAY,IAAIT,SAAJ,EAAZ;AAEA;;;;;;;;AAOA,SAAKU,OAAL,GAAe,IAAIV,SAAJ,EAAf;AAEA;;;;;;;;AAOA,SAAKW,MAAL,GAAc,IAAIX,SAAJ,EAAd;AAEA;;;;;;;;AAOA,SAAKY,KAAL,GAAa,IAAIZ,SAAJ,EAAb;AAEA;;;;;;;;AAOA,SAAKa,KAAL,GAAa,IAAIb,SAAJ,EAAb;AAEA;;;;;;;;AAOA,SAAKc,IAAL,GAAY,IAAId,SAAJ,EAAZ;AAEA;;;;;;;;AAOA,SAAKe,IAAL,GAAY,IAAIf,SAAJ,EAAZ;AAEA;;;;;;;;AAOA,SAAKgB,GAAL,GAAW,IAAIhB,SAAJ,EAAX;AAEA;;;;;;;;;AAQA,SAAKiB,OAAL,GAAe,IAAIjB,SAAJ,EAAf;AAEA;;;;;;;;AAOA,SAAKkB,GAAL,GAAW,IAAIlB,SAAJ,EAAX;AAEA;;;;;;;;;AAQA,SAAKmB,MAAL,GAAc,EAAd;AAEA,SAAKb,IAAL,CAAUc,MAAV,CAAiBC,IAAjB,CAAsBlB,UAAU,CAACmB,OAAjC,EAA0C,KAAKC,OAA/C,EAAwD,IAAxD;AACH,GAzIwB;;AA2IzB;;;;;;;;;;;;AAYAC,EAAAA,SAAS,EAAE,UAAUC,GAAV,EACX;AACI,QAAI,CAAC,KAAKN,MAAL,CAAYO,cAAZ,CAA2BD,GAA3B,CAAL,EACA;AACI,WAAKN,MAAL,CAAYM,GAAZ,IAAmB,IAAIzB,SAAJ,EAAnB;AACH;;AAED,WAAO,KAAKmB,MAAL,CAAYM,GAAZ,CAAP;AACH,GA/JwB;;AAiKzB;;;;;;AAMAF,EAAAA,OAAO,EAAE,YACT;AACI,QAAII,IAAI,GAAG,CACP,QADO,EAEP,YAFO,EAGP,MAHO,EAIP,SAJO,EAKP,QALO,EAMP,OANO,EAOP,OAPO,EAQP,MARO,EASP,MATO,EAUP,KAVO,EAWP,SAXO,EAYP,KAZO,CAAX;;AAeA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACI,WAAKD,IAAI,CAACC,CAAD,CAAT,EAAcL,OAAd;AACA,WAAKI,IAAI,CAACC,CAAD,CAAT,IAAgB,IAAhB;AACH;;AAED,SAAK,IAAIH,GAAT,IAAgB,KAAKN,MAArB,EACA;AACI,WAAKA,MAAL,CAAYM,GAAZ,EAAiBF,OAAjB;AACH;;AAED,SAAKJ,MAAL,GAAc,IAAd;AAEA,SAAKb,IAAL,GAAY,IAAZ;AACH;AAtMwB,CAAV,CAAnB;AA0MAwB,MAAM,CAACC,OAAP,GAAiB3B,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseCache = require('./BaseCache');\r\nvar Class = require('../utils/Class');\r\nvar GameEvents = require('../core/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Cache Manager is the global cache owned and maintained by the Game instance.\r\n *\r\n * Various systems, such as the file Loader, rely on this cache in order to store the files\r\n * it has loaded. The manager itself doesn't store any files, but instead owns multiple BaseCache\r\n * instances, one per type of file. You can also add your own custom caches.\r\n *\r\n * @class CacheManager\r\n * @memberof Phaser.Cache\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this CacheManager.\r\n */\r\nvar CacheManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CacheManager (game)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance that owns this CacheManager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A Cache storing all binary files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#binary\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.binary = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all bitmap font data files, typically added via the Loader.\r\n         * Only the font data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#bitmapFont\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.bitmapFont = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all JSON data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#json\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.json = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all physics data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#physics\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.physics = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all shader source files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#shader\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.shader = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all non-streaming audio files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#audio\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.audio = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all non-streaming video files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#video\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.20.0\r\n         */\r\n        this.video = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all text files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#text\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.text = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all html files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#html\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.12.0\r\n         */\r\n        this.html = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all WaveFront OBJ files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#obj\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.obj = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all tilemap data files, typically added via the Loader.\r\n         * Only the data is stored in this cache, the textures are part of the Texture Manager.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#tilemap\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = new BaseCache();\r\n\r\n        /**\r\n         * A Cache storing all xml data files, typically added via the Loader.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#xml\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.0.0\r\n         */\r\n        this.xml = new BaseCache();\r\n\r\n        /**\r\n         * An object that contains your own custom BaseCache entries.\r\n         * Add to this via the `addCustom` method.\r\n         *\r\n         * @name Phaser.Cache.CacheManager#custom\r\n         * @type {Object.<Phaser.Cache.BaseCache>}\r\n         * @since 3.0.0\r\n         */\r\n        this.custom = {};\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Add your own custom Cache for storing your own files.\r\n     * The cache will be available under `Cache.custom.key`.\r\n     * The cache will only be created if the key is not already in use.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#addCustom\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The unique key of your custom cache.\r\n     *\r\n     * @return {Phaser.Cache.BaseCache} A reference to the BaseCache that was created. If the key was already in use, a reference to the existing cache is returned instead.\r\n     */\r\n    addCustom: function (key)\r\n    {\r\n        if (!this.custom.hasOwnProperty(key))\r\n        {\r\n            this.custom[key] = new BaseCache();\r\n        }\r\n\r\n        return this.custom[key];\r\n    },\r\n\r\n    /**\r\n     * Removes all entries from all BaseCaches and destroys all custom caches.\r\n     *\r\n     * @method Phaser.Cache.CacheManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var keys = [\r\n            'binary',\r\n            'bitmapFont',\r\n            'json',\r\n            'physics',\r\n            'shader',\r\n            'audio',\r\n            'video',\r\n            'text',\r\n            'html',\r\n            'obj',\r\n            'tilemap',\r\n            'xml'\r\n        ];\r\n\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            this[keys[i]].destroy();\r\n            this[keys[i]] = null;\r\n        }\r\n\r\n        for (var key in this.custom)\r\n        {\r\n            this.custom[key].destroy();\r\n        }\r\n\r\n        this.custom = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = CacheManager;\r\n"]},"metadata":{},"sourceType":"script"}