{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BlitterRender = require('./BlitterRender');\n\nvar Bob = require('./Bob');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar Frame = require('../../textures/Frame');\n\nvar GameObject = require('../GameObject');\n\nvar List = require('../../structs/List');\n/**\r\n * @callback CreateCallback\r\n *\r\n * @param {Phaser.GameObjects.Bob} bob - The Bob that was created by the Blitter.\r\n * @param {integer} index - The position of the Bob within the Blitter display list.\r\n */\n\n/**\r\n * @classdesc\r\n * A Blitter Game Object.\r\n *\r\n * The Blitter Game Object is a special kind of container that creates, updates and manages Bob objects.\r\n * Bobs are designed for rendering speed rather than flexibility. They consist of a texture, or frame from a texture,\r\n * a position and an alpha value. You cannot scale or rotate them. They use a batched drawing method for speed\r\n * during rendering.\r\n *\r\n * A Blitter Game Object has one texture bound to it. Bobs created by the Blitter can use any Frame from this\r\n * Texture to render with, but they cannot use any other Texture. It is this single texture-bind that allows\r\n * them their speed.\r\n *\r\n * If you have a need to blast a large volume of frames around the screen then Blitter objects are well worth\r\n * investigating. They are especially useful for using as a base for your own special effects systems.\r\n *\r\n * @class Blitter\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} [x=0] - The x coordinate of this Game Object in world space.\r\n * @param {number} [y=0] - The y coordinate of this Game Object in world space.\r\n * @param {string} [texture='__DEFAULT'] - The key of the texture this Game Object will use for rendering. The Texture must already exist in the Texture Manager.\r\n * @param {(string|integer)} [frame=0] - The Frame of the Texture that this Game Object will use. Only set if the Texture has multiple frames, such as a Texture Atlas or Sprite Sheet.\r\n */\n\n\nvar Blitter = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.Depth, Components.Mask, Components.Pipeline, Components.ScrollFactor, Components.Size, Components.Texture, Components.Transform, Components.Visible, BlitterRender],\n  initialize: function Blitter(scene, x, y, texture, frame) {\n    GameObject.call(this, scene, 'Blitter');\n    this.setTexture(texture, frame);\n    this.setPosition(x, y);\n    this.initPipeline();\n    /**\r\n     * The children of this Blitter.\r\n     * This List contains all of the Bob objects created by the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#children\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Bob>}\r\n     * @since 3.0.0\r\n     */\n\n    this.children = new List();\n    /**\r\n     * A transient array that holds all of the Bobs that will be rendered this frame.\r\n     * The array is re-populated whenever the dirty flag is set.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#renderList\r\n     * @type {Phaser.GameObjects.Bob[]}\r\n     * @default []\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.renderList = [];\n    /**\r\n     * Is the Blitter considered dirty?\r\n     * A 'dirty' Blitter has had its child count changed since the last frame.\r\n     *\r\n     * @name Phaser.GameObjects.Blitter#dirty\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.dirty = false;\n  },\n\n  /**\r\n   * Creates a new Bob in this Blitter.\r\n   *\r\n   * The Bob is created at the given coordinates, relative to the Blitter and uses the given frame.\r\n   * A Bob can use any frame belonging to the texture bound to the Blitter.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   * @param {integer} [index] - The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} The newly created Bob object.\r\n   */\n  create: function (x, y, frame, visible, index) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    if (index === undefined) {\n      index = this.children.length;\n    }\n\n    if (frame === undefined) {\n      frame = this.frame;\n    } else if (!(frame instanceof Frame)) {\n      frame = this.texture.get(frame);\n    }\n\n    var bob = new Bob(this, x, y, frame, visible);\n    this.children.addAt(bob, index, false);\n    this.dirty = true;\n    return bob;\n  },\n\n  /**\r\n   * Creates multiple Bob objects within this Blitter and then passes each of them to the specified callback.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#createFromCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {CreateCallback} callback - The callback to invoke after creating a bob. It will be sent two arguments: The Bob and the index of the Bob.\r\n   * @param {integer} quantity - The quantity of Bob objects to create.\r\n   * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n   */\n  createFromCallback: function (callback, quantity, frame, visible) {\n    var bobs = this.createMultiple(quantity, frame, visible);\n\n    for (var i = 0; i < bobs.length; i++) {\n      var bob = bobs[i];\n      callback.call(this, bob, i);\n    }\n\n    return bobs;\n  },\n\n  /**\r\n   * Creates multiple Bobs in one call.\r\n   *\r\n   * The amount created is controlled by a combination of the `quantity` argument and the number of frames provided.\r\n   *\r\n   * If the quantity is set to 10 and you provide 2 frames, then 20 Bobs will be created. 10 with the first\r\n   * frame and 10 with the second.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#createMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} quantity - The quantity of Bob objects to create.\r\n   * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n   * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n   */\n  createMultiple: function (quantity, frame, visible) {\n    if (frame === undefined) {\n      frame = this.frame.name;\n    }\n\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    if (!Array.isArray(frame)) {\n      frame = [frame];\n    }\n\n    var bobs = [];\n\n    var _this = this;\n\n    frame.forEach(function (singleFrame) {\n      for (var i = 0; i < quantity; i++) {\n        bobs.push(_this.create(0, 0, singleFrame, visible));\n      }\n    });\n    return bobs;\n  },\n\n  /**\r\n   * Checks if the given child can render or not, by checking its `visible` and `alpha` values.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#childCanRender\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Bob} child - The Bob to check for rendering.\r\n   *\r\n   * @return {boolean} Returns `true` if the given child can render, otherwise `false`.\r\n   */\n  childCanRender: function (child) {\n    return child.visible && child.alpha > 0;\n  },\n\n  /**\r\n   * Returns an array of Bobs to be rendered.\r\n   * If the Blitter is dirty then a new list is generated and stored in `renderList`.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#getRenderList\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that will be rendered this frame.\r\n   */\n  getRenderList: function () {\n    if (this.dirty) {\n      this.renderList = this.children.list.filter(this.childCanRender, this);\n      this.dirty = false;\n    }\n\n    return this.renderList;\n  },\n\n  /**\r\n   * Removes all Bobs from the children List and clears the dirty flag.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#clear\r\n   * @since 3.0.0\r\n   */\n  clear: function () {\n    this.children.removeAll();\n    this.dirty = true;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Blitter#preDestroy\r\n   * @protected\r\n   * @since 3.9.0\r\n   */\n  preDestroy: function () {\n    this.children.destroy();\n    this.renderList = [];\n  }\n});\nmodule.exports = Blitter;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/blitter/Blitter.js"],"names":["BlitterRender","require","Bob","Class","Components","Frame","GameObject","List","Blitter","Extends","Mixins","Alpha","BlendMode","Depth","Mask","Pipeline","ScrollFactor","Size","Texture","Transform","Visible","initialize","scene","x","y","texture","frame","call","setTexture","setPosition","initPipeline","children","renderList","dirty","create","visible","index","undefined","length","get","bob","addAt","createFromCallback","callback","quantity","bobs","createMultiple","i","name","Array","isArray","_this","forEach","singleFrame","push","childCanRender","child","alpha","getRenderList","list","filter","clear","removeAll","preDestroy","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BlitterRender = require('./BlitterRender');\r\nvar Bob = require('./Bob');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar Frame = require('../../textures/Frame');\r\nvar GameObject = require('../GameObject');\r\nvar List = require('../../structs/List');\r\n\r\n/**\r\n * @callback CreateCallback\r\n *\r\n * @param {Phaser.GameObjects.Bob} bob - The Bob that was created by the Blitter.\r\n * @param {integer} index - The position of the Bob within the Blitter display list.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Blitter Game Object.\r\n *\r\n * The Blitter Game Object is a special kind of container that creates, updates and manages Bob objects.\r\n * Bobs are designed for rendering speed rather than flexibility. They consist of a texture, or frame from a texture,\r\n * a position and an alpha value. You cannot scale or rotate them. They use a batched drawing method for speed\r\n * during rendering.\r\n *\r\n * A Blitter Game Object has one texture bound to it. Bobs created by the Blitter can use any Frame from this\r\n * Texture to render with, but they cannot use any other Texture. It is this single texture-bind that allows\r\n * them their speed.\r\n *\r\n * If you have a need to blast a large volume of frames around the screen then Blitter objects are well worth\r\n * investigating. They are especially useful for using as a base for your own special effects systems.\r\n *\r\n * @class Blitter\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. It can only belong to one Scene at any given time.\r\n * @param {number} [x=0] - The x coordinate of this Game Object in world space.\r\n * @param {number} [y=0] - The y coordinate of this Game Object in world space.\r\n * @param {string} [texture='__DEFAULT'] - The key of the texture this Game Object will use for rendering. The Texture must already exist in the Texture Manager.\r\n * @param {(string|integer)} [frame=0] - The Frame of the Texture that this Game Object will use. Only set if the Texture has multiple frames, such as a Texture Atlas or Sprite Sheet.\r\n */\r\nvar Blitter = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.ScrollFactor,\r\n        Components.Size,\r\n        Components.Texture,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        BlitterRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Blitter (scene, x, y, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Blitter');\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setPosition(x, y);\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * The children of this Blitter.\r\n         * This List contains all of the Bob objects created by the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#children\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Bob>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new List();\r\n\r\n        /**\r\n         * A transient array that holds all of the Bobs that will be rendered this frame.\r\n         * The array is re-populated whenever the dirty flag is set.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#renderList\r\n         * @type {Phaser.GameObjects.Bob[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.renderList = [];\r\n\r\n        /**\r\n         * Is the Blitter considered dirty?\r\n         * A 'dirty' Blitter has had its child count changed since the last frame.\r\n         *\r\n         * @name Phaser.GameObjects.Blitter#dirty\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.dirty = false;\r\n    },\r\n\r\n    /**\r\n     * Creates a new Bob in this Blitter.\r\n     *\r\n     * The Bob is created at the given coordinates, relative to the Blitter and uses the given frame.\r\n     * A Bob can use any frame belonging to the texture bound to the Blitter.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     * @param {integer} [index] - The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} The newly created Bob object.\r\n     */\r\n    create: function (x, y, frame, visible, index)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n        if (index === undefined) { index = this.children.length; }\r\n\r\n        if (frame === undefined)\r\n        {\r\n            frame = this.frame;\r\n        }\r\n        else if (!(frame instanceof Frame))\r\n        {\r\n            frame = this.texture.get(frame);\r\n        }\r\n\r\n        var bob = new Bob(this, x, y, frame, visible);\r\n\r\n        this.children.addAt(bob, index, false);\r\n\r\n        this.dirty = true;\r\n\r\n        return bob;\r\n    },\r\n\r\n    /**\r\n     * Creates multiple Bob objects within this Blitter and then passes each of them to the specified callback.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#createFromCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {CreateCallback} callback - The callback to invoke after creating a bob. It will be sent two arguments: The Bob and the index of the Bob.\r\n     * @param {integer} quantity - The quantity of Bob objects to create.\r\n     * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     *\r\n     * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n     */\r\n    createFromCallback: function (callback, quantity, frame, visible)\r\n    {\r\n        var bobs = this.createMultiple(quantity, frame, visible);\r\n\r\n        for (var i = 0; i < bobs.length; i++)\r\n        {\r\n            var bob = bobs[i];\r\n\r\n            callback.call(this, bob, i);\r\n        }\r\n\r\n        return bobs;\r\n    },\r\n\r\n    /**\r\n     * Creates multiple Bobs in one call.\r\n     *\r\n     * The amount created is controlled by a combination of the `quantity` argument and the number of frames provided.\r\n     *\r\n     * If the quantity is set to 10 and you provide 2 frames, then 20 Bobs will be created. 10 with the first\r\n     * frame and 10 with the second.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} quantity - The quantity of Bob objects to create.\r\n     * @param {(string|integer|Phaser.Textures.Frame|string[]|integer[]|Phaser.Textures.Frame[])} [frame] - The Frame the Bobs will use. It must be part of the Blitter Texture.\r\n     * @param {boolean} [visible=true] - Should the created Bob render or not?\r\n     *\r\n     * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that were created.\r\n     */\r\n    createMultiple: function (quantity, frame, visible)\r\n    {\r\n        if (frame === undefined) { frame = this.frame.name; }\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        if (!Array.isArray(frame))\r\n        {\r\n            frame = [ frame ];\r\n        }\r\n\r\n        var bobs = [];\r\n        var _this = this;\r\n\r\n        frame.forEach(function (singleFrame)\r\n        {\r\n            for (var i = 0; i < quantity; i++)\r\n            {\r\n                bobs.push(_this.create(0, 0, singleFrame, visible));\r\n            }\r\n        });\r\n\r\n        return bobs;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given child can render or not, by checking its `visible` and `alpha` values.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#childCanRender\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Bob} child - The Bob to check for rendering.\r\n     *\r\n     * @return {boolean} Returns `true` if the given child can render, otherwise `false`.\r\n     */\r\n    childCanRender: function (child)\r\n    {\r\n        return (child.visible && child.alpha > 0);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Bobs to be rendered.\r\n     * If the Blitter is dirty then a new list is generated and stored in `renderList`.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#getRenderList\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Bob[]} An array of Bob objects that will be rendered this frame.\r\n     */\r\n    getRenderList: function ()\r\n    {\r\n        if (this.dirty)\r\n        {\r\n            this.renderList = this.children.list.filter(this.childCanRender, this);\r\n            this.dirty = false;\r\n        }\r\n\r\n        return this.renderList;\r\n    },\r\n\r\n    /**\r\n     * Removes all Bobs from the children List and clears the dirty flag.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#clear\r\n     * @since 3.0.0\r\n     */\r\n    clear: function ()\r\n    {\r\n        this.children.removeAll();\r\n        this.dirty = true;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Blitter#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.children.destroy();\r\n\r\n        this.renderList = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Blitter;\r\n"]},"metadata":{},"sourceType":"script"}