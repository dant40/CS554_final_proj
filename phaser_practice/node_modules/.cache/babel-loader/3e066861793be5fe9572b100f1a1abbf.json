{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clone = require('./Clone');\n/**\r\n * Creates a new Object using all values from obj1.\r\n * \r\n * Then scans obj2. If a property is found in obj2 that *also* exists in obj1, the value from obj2 is used, otherwise the property is skipped.\r\n *\r\n * @function Phaser.Utils.Objects.MergeRight\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - The first object to merge.\r\n * @param {object} obj2 - The second object to merge. Keys from this object which also exist in `obj1` will be copied to `obj1`.\r\n *\r\n * @return {object} The merged object. `obj1` and `obj2` are not modified.\r\n */\n\n\nvar MergeRight = function (obj1, obj2) {\n  var clone = Clone(obj1);\n\n  for (var key in obj2) {\n    if (clone.hasOwnProperty(key)) {\n      clone[key] = obj2[key];\n    }\n  }\n\n  return clone;\n};\n\nmodule.exports = MergeRight;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/object/MergeRight.js"],"names":["Clone","require","MergeRight","obj1","obj2","clone","key","hasOwnProperty","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,UAAU,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EACjB;AACI,MAAIC,KAAK,GAAGL,KAAK,CAACG,IAAD,CAAjB;;AAEA,OAAK,IAAIG,GAAT,IAAgBF,IAAhB,EACA;AACI,QAAIC,KAAK,CAACE,cAAN,CAAqBD,GAArB,CAAJ,EACA;AACID,MAAAA,KAAK,CAACC,GAAD,CAAL,GAAaF,IAAI,CAACE,GAAD,CAAjB;AACH;AACJ;;AAED,SAAOD,KAAP;AACH,CAbD;;AAeAG,MAAM,CAACC,OAAP,GAAiBP,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clone = require('./Clone');\r\n\r\n/**\r\n * Creates a new Object using all values from obj1.\r\n * \r\n * Then scans obj2. If a property is found in obj2 that *also* exists in obj1, the value from obj2 is used, otherwise the property is skipped.\r\n *\r\n * @function Phaser.Utils.Objects.MergeRight\r\n * @since 3.0.0\r\n *\r\n * @param {object} obj1 - The first object to merge.\r\n * @param {object} obj2 - The second object to merge. Keys from this object which also exist in `obj1` will be copied to `obj1`.\r\n *\r\n * @return {object} The merged object. `obj1` and `obj2` are not modified.\r\n */\r\nvar MergeRight = function (obj1, obj2)\r\n{\r\n    var clone = Clone(obj1);\r\n\r\n    for (var key in obj2)\r\n    {\r\n        if (clone.hasOwnProperty(key))\r\n        {\r\n            clone[key] = obj2[key];\r\n        }\r\n    }\r\n\r\n    return clone;\r\n};\r\n\r\nmodule.exports = MergeRight;\r\n"]},"metadata":{},"sourceType":"script"}