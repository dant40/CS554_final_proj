{"ast":null,"code":"/**\r\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n*\r\n* @class Axes\r\n*/\nvar Axes = {};\nmodule.exports = Axes;\n\nvar Vector = require('../geometry/Vector');\n\nvar Common = require('../core/Common');\n\n(function () {\n  /**\r\n   * Creates a new set of axes from the given vertices.\r\n   * @method fromVertices\r\n   * @param {vertices} vertices\r\n   * @return {axes} A new axes from the given vertices\r\n   */\n  Axes.fromVertices = function (vertices) {\n    var axes = {}; // find the unique axes, using edge normal gradients\n\n    for (var i = 0; i < vertices.length; i++) {\n      var j = (i + 1) % vertices.length,\n          normal = Vector.normalise({\n        x: vertices[j].y - vertices[i].y,\n        y: vertices[i].x - vertices[j].x\n      }),\n          gradient = normal.y === 0 ? Infinity : normal.x / normal.y; // limit precision\n\n      gradient = gradient.toFixed(3).toString();\n      axes[gradient] = normal;\n    }\n\n    return Common.values(axes);\n  };\n  /**\r\n   * Rotates a set of axes by the given angle.\r\n   * @method rotate\r\n   * @param {axes} axes\r\n   * @param {number} angle\r\n   */\n\n\n  Axes.rotate = function (axes, angle) {\n    if (angle === 0) return;\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n\n    for (var i = 0; i < axes.length; i++) {\n      var axis = axes[i],\n          xx;\n      xx = axis.x * cos - axis.y * sin;\n      axis.y = axis.x * sin + axis.y * cos;\n      axis.x = xx;\n    }\n  };\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/geometry/Axes.js"],"names":["Axes","module","exports","Vector","require","Common","fromVertices","vertices","axes","i","length","j","normal","normalise","x","y","gradient","Infinity","toFixed","toString","values","rotate","angle","cos","Math","sin","axis","xx"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAG,EAAX;AAEAC,MAAM,CAACC,OAAP,GAAiBF,IAAjB;;AAEA,IAAIG,MAAM,GAAGC,OAAO,CAAC,oBAAD,CAApB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;;AAEA,CAAC,YAAW;AAER;;;;;;AAMAJ,EAAAA,IAAI,CAACM,YAAL,GAAoB,UAASC,QAAT,EAAmB;AACnC,QAAIC,IAAI,GAAG,EAAX,CADmC,CAGnC;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACtC,UAAIE,CAAC,GAAG,CAACF,CAAC,GAAG,CAAL,IAAUF,QAAQ,CAACG,MAA3B;AAAA,UACIE,MAAM,GAAGT,MAAM,CAACU,SAAP,CAAiB;AACtBC,QAAAA,CAAC,EAAEP,QAAQ,CAACI,CAAD,CAAR,CAAYI,CAAZ,GAAgBR,QAAQ,CAACE,CAAD,CAAR,CAAYM,CADT;AAEtBA,QAAAA,CAAC,EAAER,QAAQ,CAACE,CAAD,CAAR,CAAYK,CAAZ,GAAgBP,QAAQ,CAACI,CAAD,CAAR,CAAYG;AAFT,OAAjB,CADb;AAAA,UAKIE,QAAQ,GAAIJ,MAAM,CAACG,CAAP,KAAa,CAAd,GAAmBE,QAAnB,GAA+BL,MAAM,CAACE,CAAP,GAAWF,MAAM,CAACG,CALhE,CADsC,CAQtC;;AACAC,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,OAAT,CAAiB,CAAjB,EAAoBC,QAApB,EAAX;AACAX,MAAAA,IAAI,CAACQ,QAAD,CAAJ,GAAiBJ,MAAjB;AACH;;AAED,WAAOP,MAAM,CAACe,MAAP,CAAcZ,IAAd,CAAP;AACH,GAlBD;AAoBA;;;;;;;;AAMAR,EAAAA,IAAI,CAACqB,MAAL,GAAc,UAASb,IAAT,EAAec,KAAf,EAAsB;AAChC,QAAIA,KAAK,KAAK,CAAd,EACI;AAEJ,QAAIC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASD,KAAT,CAAV;AAAA,QACIG,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASH,KAAT,CADV;;AAGA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAIiB,IAAI,GAAGlB,IAAI,CAACC,CAAD,CAAf;AAAA,UACIkB,EADJ;AAEAA,MAAAA,EAAE,GAAGD,IAAI,CAACZ,CAAL,GAASS,GAAT,GAAeG,IAAI,CAACX,CAAL,GAASU,GAA7B;AACAC,MAAAA,IAAI,CAACX,CAAL,GAASW,IAAI,CAACZ,CAAL,GAASW,GAAT,GAAeC,IAAI,CAACX,CAAL,GAASQ,GAAjC;AACAG,MAAAA,IAAI,CAACZ,CAAL,GAASa,EAAT;AACH;AACJ,GAdD;AAgBH,CAlDD","sourcesContent":["/**\r\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n*\r\n* @class Axes\r\n*/\r\n\r\nvar Axes = {};\r\n\r\nmodule.exports = Axes;\r\n\r\nvar Vector = require('../geometry/Vector');\r\nvar Common = require('../core/Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new set of axes from the given vertices.\r\n     * @method fromVertices\r\n     * @param {vertices} vertices\r\n     * @return {axes} A new axes from the given vertices\r\n     */\r\n    Axes.fromVertices = function(vertices) {\r\n        var axes = {};\r\n\r\n        // find the unique axes, using edge normal gradients\r\n        for (var i = 0; i < vertices.length; i++) {\r\n            var j = (i + 1) % vertices.length, \r\n                normal = Vector.normalise({ \r\n                    x: vertices[j].y - vertices[i].y, \r\n                    y: vertices[i].x - vertices[j].x\r\n                }),\r\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\r\n            \r\n            // limit precision\r\n            gradient = gradient.toFixed(3).toString();\r\n            axes[gradient] = normal;\r\n        }\r\n\r\n        return Common.values(axes);\r\n    };\r\n\r\n    /**\r\n     * Rotates a set of axes by the given angle.\r\n     * @method rotate\r\n     * @param {axes} axes\r\n     * @param {number} angle\r\n     */\r\n    Axes.rotate = function(axes, angle) {\r\n        if (angle === 0)\r\n            return;\r\n        \r\n        var cos = Math.cos(angle),\r\n            sin = Math.sin(angle);\r\n\r\n        for (var i = 0; i < axes.length; i++) {\r\n            var axis = axes[i],\r\n                xx;\r\n            xx = axis.x * cos - axis.y * sin;\r\n            axis.y = axis.x * sin + axis.y * cos;\r\n            axis.x = xx;\r\n        }\r\n    };\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}