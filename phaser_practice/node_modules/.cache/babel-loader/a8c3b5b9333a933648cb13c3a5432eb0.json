{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\nvar CatmullRom = require('../math/CatmullRom');\n\nvar Class = require('../utils/Class');\n\nvar Curve = require('./Curve');\n\nvar Vector2 = require('../math/Vector2');\n/**\r\n * @classdesc\r\n * Create a smooth 2d spline curve from a series of points.\r\n *\r\n * @class Spline\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2[]|number[]|number[][])} [points] - The points that configure the curve.\r\n */\n\n\nvar SplineCurve = new Class({\n  Extends: Curve,\n  initialize: function SplineCurve(points) {\n    if (points === undefined) {\n      points = [];\n    }\n\n    Curve.call(this, 'SplineCurve');\n    /**\r\n     * The Vector2 points that configure the curve.\r\n     *\r\n     * @name Phaser.Curves.Spline#points\r\n     * @type {Phaser.Math.Vector2[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.points = [];\n    this.addPoints(points);\n  },\n\n  /**\r\n   * Add a list of points to the current list of Vector2 points of the curve.\r\n   *\r\n   * @method Phaser.Curves.Spline#addPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2[]|number[]|number[][])} points - The points that configure the curve.\r\n   *\r\n   * @return {Phaser.Curves.Spline} This curve object.\r\n   */\n  addPoints: function (points) {\n    for (var i = 0; i < points.length; i++) {\n      var p = new Vector2();\n\n      if (typeof points[i] === 'number') {\n        p.x = points[i];\n        p.y = points[i + 1];\n        i++;\n      } else if (Array.isArray(points[i])) {\n        //  An array of arrays?\n        p.x = points[i][0];\n        p.y = points[i][1];\n      } else {\n        p.x = points[i].x;\n        p.y = points[i].y;\n      }\n\n      this.points.push(p);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a point to the current list of Vector2 points of the curve.\r\n   *\r\n   * @method Phaser.Curves.Spline#addPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of this curve\r\n   * @param {number} y - The y coordinate of this curve\r\n   *\r\n   * @return {Phaser.Math.Vector2} The new Vector2 added to the curve\r\n   */\n  addPoint: function (x, y) {\n    var vec = new Vector2(x, y);\n    this.points.push(vec);\n    return vec;\n  },\n\n  /**\r\n   * Gets the starting point on the curve.\r\n   *\r\n   * @method Phaser.Curves.Spline#getStartPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getStartPoint: function (out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    return out.copy(this.points[0]);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Curves.Spline#getResolution\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} divisions - [description]\r\n   *\r\n   * @return {number} [description]\r\n   */\n  getResolution: function (divisions) {\n    return divisions * this.points.length;\n  },\n\n  /**\r\n   * Get point at relative position in curve according to length.\r\n   *\r\n   * @method Phaser.Curves.Spline#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getPoint: function (t, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    var points = this.points;\n    var point = (points.length - 1) * t;\n    var intPoint = Math.floor(point);\n    var weight = point - intPoint;\n    var p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var p1 = points[intPoint];\n    var p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    return out.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n  },\n\n  /**\r\n   * Exports a JSON object containing this curve data.\r\n   *\r\n   * @method Phaser.Curves.Spline#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n   */\n  toJSON: function () {\n    var points = [];\n\n    for (var i = 0; i < this.points.length; i++) {\n      points.push(this.points[i].x);\n      points.push(this.points[i].y);\n    }\n\n    return {\n      type: this.type,\n      points: points\n    };\n  }\n});\n/**\r\n * Imports a JSON object containing this curve data.\r\n *\r\n * @function Phaser.Curves.Spline.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Spline} The spline curve created.\r\n */\n\nSplineCurve.fromJSON = function (data) {\n  return new SplineCurve(data.points);\n};\n\nmodule.exports = SplineCurve;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/curves/SplineCurve.js"],"names":["CatmullRom","require","Class","Curve","Vector2","SplineCurve","Extends","initialize","points","undefined","call","addPoints","i","length","p","x","y","Array","isArray","push","addPoint","vec","getStartPoint","out","copy","getResolution","divisions","getPoint","t","point","intPoint","Math","floor","weight","p0","p1","p2","p3","set","toJSON","type","fromJSON","data","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar CatmullRom = require('../math/CatmullRom');\r\nvar Class = require('../utils/Class');\r\nvar Curve = require('./Curve');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * Create a smooth 2d spline curve from a series of points.\r\n *\r\n * @class Spline\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2[]|number[]|number[][])} [points] - The points that configure the curve.\r\n */\r\nvar SplineCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function SplineCurve (points)\r\n    {\r\n        if (points === undefined) { points = []; }\r\n\r\n        Curve.call(this, 'SplineCurve');\r\n\r\n        /**\r\n         * The Vector2 points that configure the curve.\r\n         *\r\n         * @name Phaser.Curves.Spline#points\r\n         * @type {Phaser.Math.Vector2[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        this.addPoints(points);\r\n    },\r\n\r\n    /**\r\n     * Add a list of points to the current list of Vector2 points of the curve.\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2[]|number[]|number[][])} points - The points that configure the curve.\r\n     *\r\n     * @return {Phaser.Curves.Spline} This curve object.\r\n     */\r\n    addPoints: function (points)\r\n    {\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            var p = new Vector2();\r\n\r\n            if (typeof points[i] === 'number')\r\n            {\r\n                p.x = points[i];\r\n                p.y = points[i + 1];\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a point to the current list of Vector2 points of the curve.\r\n     *\r\n     * @method Phaser.Curves.Spline#addPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of this curve\r\n     * @param {number} y - The y coordinate of this curve\r\n     *\r\n     * @return {Phaser.Math.Vector2} The new Vector2 added to the curve\r\n     */\r\n    addPoint: function (x, y)\r\n    {\r\n        var vec = new Vector2(x, y);\r\n\r\n        this.points.push(vec);\r\n\r\n        return vec;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.Spline#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.points[0]);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Curves.Spline#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - [description]\r\n     *\r\n     * @return {number} [description]\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions * this.points.length;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.Spline#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var points = this.points;\r\n\r\n        var point = (points.length - 1) * t;\r\n\r\n        var intPoint = Math.floor(point);\r\n\r\n        var weight = point - intPoint;\r\n\r\n        var p0 = points[(intPoint === 0) ? intPoint : intPoint - 1];\r\n        var p1 = points[intPoint];\r\n        var p2 = points[(intPoint > points.length - 2) ? points.length - 1 : intPoint + 1];\r\n        var p3 = points[(intPoint > points.length - 3) ? points.length - 1 : intPoint + 2];\r\n\r\n        return out.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\r\n    },\r\n\r\n    /**\r\n     * Exports a JSON object containing this curve data.\r\n     *\r\n     * @method Phaser.Curves.Spline#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var points = [];\r\n\r\n        for (var i = 0; i < this.points.length; i++)\r\n        {\r\n            points.push(this.points[i].x);\r\n            points.push(this.points[i].y);\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            points: points\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Imports a JSON object containing this curve data.\r\n *\r\n * @function Phaser.Curves.Spline.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.Spline} The spline curve created.\r\n */\r\nSplineCurve.fromJSON = function (data)\r\n{\r\n    return new SplineCurve(data.points);\r\n};\r\n\r\nmodule.exports = SplineCurve;\r\n"]},"metadata":{},"sourceType":"script"}