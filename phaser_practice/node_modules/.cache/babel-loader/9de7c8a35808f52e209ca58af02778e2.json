{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GameObjectFactory = require('../GameObjectFactory');\n\nvar PathFollower = require('./PathFollower');\n/**\r\n * Creates a new PathFollower Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the PathFollower Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#follower\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Curves.Path} path - The Path this PathFollower is connected to.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.PathFollower} The Game Object that was created.\r\n */\n\n\nGameObjectFactory.register('follower', function (path, x, y, key, frame) {\n  var sprite = new PathFollower(this.scene, path, x, y, key, frame);\n  this.displayList.add(sprite);\n  this.updateList.add(sprite);\n  return sprite;\n}); //  When registering a factory function 'this' refers to the GameObjectFactory context.\n//\n//  There are several properties available to use:\n//\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\n//  this.displayList - a reference to the Display List the Scene owns\n//  this.updateList - a reference to the Update List the Scene owns","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/pathfollower/PathFollowerFactory.js"],"names":["GameObjectFactory","require","PathFollower","register","path","x","y","key","frame","sprite","scene","displayList","add","updateList"],"mappings":"AAAA;;;;;AAMA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;AAgBAD,iBAAiB,CAACG,QAAlB,CAA2B,UAA3B,EAAuC,UAAUC,IAAV,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,GAAtB,EAA2BC,KAA3B,EACvC;AACI,MAAIC,MAAM,GAAG,IAAIP,YAAJ,CAAiB,KAAKQ,KAAtB,EAA6BN,IAA7B,EAAmCC,CAAnC,EAAsCC,CAAtC,EAAyCC,GAAzC,EAA8CC,KAA9C,CAAb;AAEA,OAAKG,WAAL,CAAiBC,GAAjB,CAAqBH,MAArB;AACA,OAAKI,UAAL,CAAgBD,GAAhB,CAAoBH,MAApB;AAEA,SAAOA,MAAP;AACH,CARD,E,CAUA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\nvar PathFollower = require('./PathFollower');\r\n\r\n/**\r\n * Creates a new PathFollower Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the PathFollower Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#follower\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Curves.Path} path - The Path this PathFollower is connected to.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.PathFollower} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('follower', function (path, x, y, key, frame)\r\n{\r\n    var sprite = new PathFollower(this.scene, path, x, y, key, frame);\r\n\r\n    this.displayList.add(sprite);\r\n    this.updateList.add(sprite);\r\n\r\n    return sprite;\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n"]},"metadata":{},"sourceType":"script"}