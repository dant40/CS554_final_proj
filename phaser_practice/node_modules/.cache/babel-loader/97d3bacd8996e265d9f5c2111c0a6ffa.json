{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar List = require('../structs/List');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar StableSort = require('../utils/array/StableSort');\n/**\r\n * @classdesc\r\n * The Display List plugin.\r\n *\r\n * Display Lists belong to a Scene and maintain the list of Game Objects to render every frame.\r\n *\r\n * Some of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.\r\n *\r\n * @class DisplayList\r\n * @extends Phaser.Structs.List.<Phaser.GameObjects.GameObject>\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this Display List belongs to.\r\n */\n\n\nvar DisplayList = new Class({\n  Extends: List,\n  initialize: function DisplayList(scene) {\n    List.call(this, scene);\n    /**\r\n     * The flag the determines whether Game Objects should be sorted when `depthSort()` is called.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#sortChildrenFlag\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.sortChildrenFlag = false;\n    /**\r\n     * The Scene that this Display List belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * The Scene's Systems.\r\n     *\r\n     * @name Phaser.GameObjects.DisplayList#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Force a sort of the display list on the next call to depthSort.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#queueDepthSort\r\n   * @since 3.0.0\r\n   */\n  queueDepthSort: function () {\n    this.sortChildrenFlag = true;\n  },\n\n  /**\r\n   * Immediately sorts the display list if the flag is set.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#depthSort\r\n   * @since 3.0.0\r\n   */\n  depthSort: function () {\n    if (this.sortChildrenFlag) {\n      StableSort.inplace(this.list, this.sortByDepth);\n      this.sortChildrenFlag = false;\n    }\n  },\n\n  /**\r\n   * Compare the depth of two Game Objects.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#sortByDepth\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} childA - The first Game Object.\r\n   * @param {Phaser.GameObjects.GameObject} childB - The second Game Object.\r\n   *\r\n   * @return {integer} The difference between the depths of each Game Object.\r\n   */\n  sortByDepth: function (childA, childB) {\n    return childA._depth - childB._depth;\n  },\n\n  /**\r\n   * Returns an array which contains all objects currently on the Display List.\r\n   * This is a reference to the main list array, not a copy of it, so be careful not to modify it.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#getChildren\r\n   * @since 3.12.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject[]} The group members.\r\n   */\n  getChildren: function () {\n    return this.list;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    var i = this.list.length;\n\n    while (i--) {\n      this.list[i].destroy(true);\n    }\n\n    this.list.length = 0;\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.GameObjects.DisplayList#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('DisplayList', DisplayList, 'displayList');\nmodule.exports = DisplayList;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/DisplayList.js"],"names":["Class","require","List","PluginCache","SceneEvents","StableSort","DisplayList","Extends","initialize","scene","call","sortChildrenFlag","systems","sys","events","once","BOOT","boot","on","START","start","DESTROY","destroy","SHUTDOWN","shutdown","queueDepthSort","depthSort","inplace","list","sortByDepth","childA","childB","_depth","getChildren","i","length","off","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar List = require('../structs/List');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\nvar StableSort = require('../utils/array/StableSort');\r\n\r\n/**\r\n * @classdesc\r\n * The Display List plugin.\r\n *\r\n * Display Lists belong to a Scene and maintain the list of Game Objects to render every frame.\r\n *\r\n * Some of these Game Objects may also be part of the Scene's [Update List]{@link Phaser.GameObjects.UpdateList}, for updating.\r\n *\r\n * @class DisplayList\r\n * @extends Phaser.Structs.List.<Phaser.GameObjects.GameObject>\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that this Display List belongs to.\r\n */\r\nvar DisplayList = new Class({\r\n\r\n    Extends: List,\r\n\r\n    initialize:\r\n\r\n    function DisplayList (scene)\r\n    {\r\n        List.call(this, scene);\r\n\r\n        /**\r\n         * The flag the determines whether Game Objects should be sorted when `depthSort()` is called.\r\n         *\r\n         * @name Phaser.GameObjects.DisplayList#sortChildrenFlag\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.sortChildrenFlag = false;\r\n\r\n        /**\r\n         * The Scene that this Display List belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.DisplayList#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Scene's Systems.\r\n         *\r\n         * @name Phaser.GameObjects.DisplayList#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Force a sort of the display list on the next call to depthSort.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#queueDepthSort\r\n     * @since 3.0.0\r\n     */\r\n    queueDepthSort: function ()\r\n    {\r\n        this.sortChildrenFlag = true;\r\n    },\r\n\r\n    /**\r\n     * Immediately sorts the display list if the flag is set.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#depthSort\r\n     * @since 3.0.0\r\n     */\r\n    depthSort: function ()\r\n    {\r\n        if (this.sortChildrenFlag)\r\n        {\r\n            StableSort.inplace(this.list, this.sortByDepth);\r\n\r\n            this.sortChildrenFlag = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Compare the depth of two Game Objects.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#sortByDepth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} childA - The first Game Object.\r\n     * @param {Phaser.GameObjects.GameObject} childB - The second Game Object.\r\n     *\r\n     * @return {integer} The difference between the depths of each Game Object.\r\n     */\r\n    sortByDepth: function (childA, childB)\r\n    {\r\n        return childA._depth - childB._depth;\r\n    },\r\n\r\n    /**\r\n     * Returns an array which contains all objects currently on the Display List.\r\n     * This is a reference to the main list array, not a copy of it, so be careful not to modify it.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#getChildren\r\n     * @since 3.12.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject[]} The group members.\r\n     */\r\n    getChildren: function ()\r\n    {\r\n        return this.list;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var i = this.list.length;\r\n\r\n        while (i--)\r\n        {\r\n            this.list[i].destroy(true);\r\n        }\r\n\r\n        this.list.length = 0;\r\n\r\n        this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.GameObjects.DisplayList#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('DisplayList', DisplayList, 'displayList');\r\n\r\nmodule.exports = DisplayList;\r\n"]},"metadata":{},"sourceType":"script"}