{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar StaticTilemapLayerCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  src.cull(camera);\n  var renderTiles = src.culledTiles;\n  var tileCount = renderTiles.length;\n\n  if (tileCount === 0) {\n    return;\n  }\n\n  var camMatrix = renderer._tempMatrix1;\n  var layerMatrix = renderer._tempMatrix2;\n  var calcMatrix = renderer._tempMatrix3;\n  layerMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n  var ctx = renderer.currentContext;\n  var gidMap = src.gidMap;\n  ctx.save();\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    layerMatrix.e = src.x;\n    layerMatrix.f = src.y;\n    camMatrix.multiply(layerMatrix, calcMatrix);\n    calcMatrix.copyToContext(ctx);\n  } else {\n    //  Undo the camera scroll\n    layerMatrix.e -= camera.scrollX * src.scrollFactorX;\n    layerMatrix.f -= camera.scrollY * src.scrollFactorY;\n    layerMatrix.copyToContext(ctx);\n  }\n\n  var alpha = camera.alpha * src.alpha;\n\n  if (!renderer.antialias || src.scaleX > 1 || src.scaleY > 1) {\n    ctx.imageSmoothingEnabled = false;\n  }\n\n  for (var i = 0; i < tileCount; i++) {\n    var tile = renderTiles[i];\n    var tileset = gidMap[tile.index];\n\n    if (!tileset) {\n      continue;\n    }\n\n    var image = tileset.image.getSourceImage();\n    var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\n\n    if (tileTexCoords) {\n      var tileWidth = tileset.tileWidth;\n      var tileHeight = tileset.tileHeight;\n      var halfWidth = tileWidth / 2;\n      var halfHeight = tileHeight / 2;\n      ctx.save();\n      ctx.translate(tile.pixelX + halfWidth, tile.pixelY + halfHeight);\n\n      if (tile.rotation !== 0) {\n        ctx.rotate(tile.rotation);\n      }\n\n      if (tile.flipX || tile.flipY) {\n        ctx.scale(tile.flipX ? -1 : 1, tile.flipY ? -1 : 1);\n      }\n\n      ctx.globalAlpha = alpha * tile.alpha;\n      ctx.drawImage(image, tileTexCoords.x, tileTexCoords.y, tileWidth, tileHeight, -halfWidth, -halfHeight, tileWidth, tileHeight);\n      ctx.restore();\n    }\n  }\n\n  ctx.restore();\n};\n\nmodule.exports = StaticTilemapLayerCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayerCanvasRenderer.js"],"names":["StaticTilemapLayerCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","cull","renderTiles","culledTiles","tileCount","length","camMatrix","_tempMatrix1","layerMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","ctx","currentContext","gidMap","save","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","copyToContext","alpha","antialias","imageSmoothingEnabled","i","tile","tileset","index","image","getSourceImage","tileTexCoords","getTileTextureCoordinates","tileWidth","tileHeight","halfWidth","halfHeight","translate","pixelX","pixelY","rotate","flipX","flipY","scale","globalAlpha","drawImage","restore","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar StaticTilemapLayerCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    src.cull(camera);\r\n\r\n    var renderTiles = src.culledTiles;\r\n    var tileCount = renderTiles.length;\r\n\r\n    if (tileCount === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var camMatrix = renderer._tempMatrix1;\r\n    var layerMatrix = renderer._tempMatrix2;\r\n    var calcMatrix = renderer._tempMatrix3;\r\n\r\n    layerMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    var ctx = renderer.currentContext;\r\n    var gidMap = src.gidMap;\r\n\r\n    ctx.save();\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        layerMatrix.e = src.x;\r\n        layerMatrix.f = src.y;\r\n\r\n        camMatrix.multiply(layerMatrix, calcMatrix);\r\n\r\n        calcMatrix.copyToContext(ctx);\r\n    }\r\n    else\r\n    {\r\n        //  Undo the camera scroll\r\n        layerMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        layerMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        layerMatrix.copyToContext(ctx);\r\n    }\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (!renderer.antialias || src.scaleX > 1 || src.scaleY > 1)\r\n    {\r\n        ctx.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    for (var i = 0; i < tileCount; i++)\r\n    {\r\n        var tile = renderTiles[i];\r\n\r\n        var tileset = gidMap[tile.index];\r\n\r\n        if (!tileset)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var image = tileset.image.getSourceImage();\r\n        var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n        if (tileTexCoords)\r\n        {\r\n            var tileWidth = tileset.tileWidth;\r\n            var tileHeight = tileset.tileHeight;\r\n            var halfWidth = tileWidth / 2;\r\n            var halfHeight = tileHeight / 2;\r\n    \r\n            ctx.save();\r\n\r\n            ctx.translate(tile.pixelX + halfWidth, tile.pixelY + halfHeight);\r\n\r\n            if (tile.rotation !== 0)\r\n            {\r\n                ctx.rotate(tile.rotation);\r\n            }\r\n    \r\n            if (tile.flipX || tile.flipY)\r\n            {\r\n                ctx.scale((tile.flipX) ? -1 : 1, (tile.flipY) ? -1 : 1);\r\n            }\r\n\r\n            ctx.globalAlpha = alpha * tile.alpha;\r\n    \r\n            ctx.drawImage(\r\n                image,\r\n                tileTexCoords.x, tileTexCoords.y,\r\n                tileWidth, tileHeight,\r\n                -halfWidth, -halfHeight,\r\n                tileWidth, tileHeight\r\n            );\r\n    \r\n            ctx.restore();\r\n        }\r\n    }\r\n\r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = StaticTilemapLayerCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}