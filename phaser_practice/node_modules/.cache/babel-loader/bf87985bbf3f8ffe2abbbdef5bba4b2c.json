{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar BlitterCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var list = src.getRenderList();\n\n  if (list.length === 0) {\n    return;\n  }\n\n  var ctx = renderer.currentContext;\n  var alpha = camera.alpha * src.alpha;\n\n  if (alpha === 0) {\n    //  Nothing to see, so abort early\n    return;\n  } //  Blend Mode + Scale Mode\n\n\n  ctx.globalCompositeOperation = renderer.blendModes[src.blendMode];\n  ctx.imageSmoothingEnabled = !(!renderer.antialias || src.frame.source.scaleMode);\n  var cameraScrollX = src.x - camera.scrollX * src.scrollFactorX;\n  var cameraScrollY = src.y - camera.scrollY * src.scrollFactorY;\n  ctx.save();\n\n  if (parentMatrix) {\n    parentMatrix.copyToContext(ctx);\n  }\n\n  var roundPixels = camera.roundPixels; //  Render bobs\n\n  for (var i = 0; i < list.length; i++) {\n    var bob = list[i];\n    var flip = bob.flipX || bob.flipY;\n    var frame = bob.frame;\n    var cd = frame.canvasData;\n    var dx = frame.x;\n    var dy = frame.y;\n    var fx = 1;\n    var fy = 1;\n    var bobAlpha = bob.alpha * alpha;\n\n    if (bobAlpha === 0) {\n      continue;\n    }\n\n    ctx.globalAlpha = bobAlpha;\n\n    if (!flip) {\n      if (roundPixels) {\n        dx = Math.round(dx);\n        dy = Math.round(dy);\n      }\n\n      ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx + bob.x + cameraScrollX, dy + bob.y + cameraScrollY, cd.width, cd.height);\n    } else {\n      if (bob.flipX) {\n        fx = -1;\n        dx -= cd.width;\n      }\n\n      if (bob.flipY) {\n        fy = -1;\n        dy -= cd.height;\n      }\n\n      ctx.save();\n      ctx.translate(bob.x + cameraScrollX, bob.y + cameraScrollY);\n      ctx.scale(fx, fy);\n      ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx, dy, cd.width, cd.height);\n      ctx.restore();\n    }\n  }\n\n  ctx.restore();\n};\n\nmodule.exports = BlitterCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/blitter/BlitterCanvasRenderer.js"],"names":["BlitterCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","list","getRenderList","length","ctx","currentContext","alpha","globalCompositeOperation","blendModes","blendMode","imageSmoothingEnabled","antialias","frame","source","scaleMode","cameraScrollX","x","scrollX","scrollFactorX","cameraScrollY","y","scrollY","scrollFactorY","save","copyToContext","roundPixels","i","bob","flip","flipX","flipY","cd","canvasData","dx","dy","fx","fy","bobAlpha","globalAlpha","Math","round","drawImage","image","width","height","translate","scale","restore","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderCanvas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar BlitterCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var list = src.getRenderList();\r\n\r\n    if (list.length === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var ctx = renderer.currentContext;\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (alpha === 0)\r\n    {\r\n        //  Nothing to see, so abort early\r\n        return;\r\n    }\r\n\r\n    //  Blend Mode + Scale Mode\r\n    ctx.globalCompositeOperation = renderer.blendModes[src.blendMode];\r\n\r\n    ctx.imageSmoothingEnabled = !(!renderer.antialias || src.frame.source.scaleMode);\r\n\r\n    var cameraScrollX = src.x - camera.scrollX * src.scrollFactorX;\r\n    var cameraScrollY = src.y - camera.scrollY * src.scrollFactorY;\r\n\r\n    ctx.save();\r\n\r\n    if (parentMatrix)\r\n    {\r\n        parentMatrix.copyToContext(ctx);\r\n    }\r\n\r\n    var roundPixels = camera.roundPixels;\r\n\r\n    //  Render bobs\r\n    for (var i = 0; i < list.length; i++)\r\n    {\r\n        var bob = list[i];\r\n        var flip = (bob.flipX || bob.flipY);\r\n        var frame = bob.frame;\r\n        var cd = frame.canvasData;\r\n        var dx = frame.x;\r\n        var dy = frame.y;\r\n        var fx = 1;\r\n        var fy = 1;\r\n\r\n        var bobAlpha = bob.alpha * alpha;\r\n\r\n        if (bobAlpha === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        ctx.globalAlpha = bobAlpha;\r\n    \r\n        if (!flip)\r\n        {\r\n            if (roundPixels)\r\n            {\r\n                dx = Math.round(dx);\r\n                dy = Math.round(dy);\r\n            }\r\n\r\n            ctx.drawImage(\r\n                frame.source.image,\r\n                cd.x,\r\n                cd.y,\r\n                cd.width,\r\n                cd.height,\r\n                dx + bob.x + cameraScrollX,\r\n                dy + bob.y + cameraScrollY,\r\n                cd.width,\r\n                cd.height\r\n            );\r\n        }\r\n        else\r\n        {\r\n            if (bob.flipX)\r\n            {\r\n                fx = -1;\r\n                dx -= cd.width;\r\n            }\r\n\r\n            if (bob.flipY)\r\n            {\r\n                fy = -1;\r\n                dy -= cd.height;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(bob.x + cameraScrollX, bob.y + cameraScrollY);\r\n            ctx.scale(fx, fy);\r\n            ctx.drawImage(frame.source.image, cd.x, cd.y, cd.width, cd.height, dx, dy, cd.width, cd.height);\r\n            ctx.restore();\r\n        }\r\n    }\r\n    \r\n    ctx.restore();\r\n};\r\n\r\nmodule.exports = BlitterCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}