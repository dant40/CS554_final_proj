{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Generate a series of sine and cosine values.\r\n *\r\n * @function Phaser.Math.SinCosTableGenerator\r\n * @since 3.0.0\r\n *\r\n * @param {number} length - The number of values to generate.\r\n * @param {number} [sinAmp=1] - The sine value amplitude.\r\n * @param {number} [cosAmp=1] - The cosine value amplitude.\r\n * @param {number} [frequency=1] - The frequency of the values.\r\n *\r\n * @return {Phaser.Types.Math.SinCosTable} The generated values.\r\n */\nvar SinCosTableGenerator = function (length, sinAmp, cosAmp, frequency) {\n  if (sinAmp === undefined) {\n    sinAmp = 1;\n  }\n\n  if (cosAmp === undefined) {\n    cosAmp = 1;\n  }\n\n  if (frequency === undefined) {\n    frequency = 1;\n  }\n\n  frequency *= Math.PI / length;\n  var cos = [];\n  var sin = [];\n\n  for (var c = 0; c < length; c++) {\n    cosAmp -= sinAmp * frequency;\n    sinAmp += cosAmp * frequency;\n    cos[c] = cosAmp;\n    sin[c] = sinAmp;\n  }\n\n  return {\n    sin: sin,\n    cos: cos,\n    length: length\n  };\n};\n\nmodule.exports = SinCosTableGenerator;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/SinCosTableGenerator.js"],"names":["SinCosTableGenerator","length","sinAmp","cosAmp","frequency","undefined","Math","PI","cos","sin","c","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;AAaA,IAAIA,oBAAoB,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,SAAlC,EAC3B;AACI,MAAIF,MAAM,KAAKG,SAAf,EAA0B;AAAEH,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACzC,MAAIC,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACzC,MAAIC,SAAS,KAAKC,SAAlB,EAA6B;AAAED,IAAAA,SAAS,GAAG,CAAZ;AAAgB;;AAE/CA,EAAAA,SAAS,IAAIE,IAAI,CAACC,EAAL,GAAUN,MAAvB;AAEA,MAAIO,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAApB,EAA4BS,CAAC,EAA7B,EACA;AACIP,IAAAA,MAAM,IAAID,MAAM,GAAGE,SAAnB;AACAF,IAAAA,MAAM,IAAIC,MAAM,GAAGC,SAAnB;AAEAI,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASP,MAAT;AACAM,IAAAA,GAAG,CAACC,CAAD,CAAH,GAASR,MAAT;AACH;;AAED,SAAO;AACHO,IAAAA,GAAG,EAAEA,GADF;AAEHD,IAAAA,GAAG,EAAEA,GAFF;AAGHP,IAAAA,MAAM,EAAEA;AAHL,GAAP;AAKH,CAzBD;;AA2BAU,MAAM,CAACC,OAAP,GAAiBZ,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Generate a series of sine and cosine values.\r\n *\r\n * @function Phaser.Math.SinCosTableGenerator\r\n * @since 3.0.0\r\n *\r\n * @param {number} length - The number of values to generate.\r\n * @param {number} [sinAmp=1] - The sine value amplitude.\r\n * @param {number} [cosAmp=1] - The cosine value amplitude.\r\n * @param {number} [frequency=1] - The frequency of the values.\r\n *\r\n * @return {Phaser.Types.Math.SinCosTable} The generated values.\r\n */\r\nvar SinCosTableGenerator = function (length, sinAmp, cosAmp, frequency)\r\n{\r\n    if (sinAmp === undefined) { sinAmp = 1; }\r\n    if (cosAmp === undefined) { cosAmp = 1; }\r\n    if (frequency === undefined) { frequency = 1; }\r\n\r\n    frequency *= Math.PI / length;\r\n\r\n    var cos = [];\r\n    var sin = [];\r\n\r\n    for (var c = 0; c < length; c++)\r\n    {\r\n        cosAmp -= sinAmp * frequency;\r\n        sinAmp += cosAmp * frequency;\r\n\r\n        cos[c] = cosAmp;\r\n        sin[c] = sinAmp;\r\n    }\r\n\r\n    return {\r\n        sin: sin,\r\n        cos: cos,\r\n        length: length\r\n    };\r\n};\r\n\r\nmodule.exports = SinCosTableGenerator;\r\n"]},"metadata":{},"sourceType":"script"}