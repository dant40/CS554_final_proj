{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Parses an XML Texture Atlas object and adds all the Frames into a Texture.\r\n *\r\n * @function Phaser.Textures.Parsers.AtlasXML\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {*} xml - The XML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\nvar AtlasXML = function (texture, sourceIndex, xml) {\n  //  Malformed?\n  if (!xml.getElementsByTagName('TextureAtlas')) {\n    console.warn('Invalid Texture Atlas XML given');\n    return;\n  } //  Add in a __BASE entry (for the entire atlas)\n\n\n  var source = texture.source[sourceIndex];\n  texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height); //  By this stage frames is a fully parsed array\n\n  var frames = xml.getElementsByTagName('SubTexture');\n  var newFrame;\n\n  for (var i = 0; i < frames.length; i++) {\n    var frame = frames[i].attributes;\n    var name = frame.name.value;\n    var x = parseInt(frame.x.value, 10);\n    var y = parseInt(frame.y.value, 10);\n    var width = parseInt(frame.width.value, 10);\n    var height = parseInt(frame.height.value, 10); //  The frame values are the exact coordinates to cut the frame out of the atlas from\n\n    newFrame = texture.add(name, sourceIndex, x, y, width, height); //  These are the original (non-trimmed) sprite values\n\n    if (frame.frameX) {\n      var frameX = Math.abs(parseInt(frame.frameX.value, 10));\n      var frameY = Math.abs(parseInt(frame.frameY.value, 10));\n      var frameWidth = parseInt(frame.frameWidth.value, 10);\n      var frameHeight = parseInt(frame.frameHeight.value, 10);\n      newFrame.setTrim(width, height, frameX, frameY, frameWidth, frameHeight);\n    }\n  }\n\n  return texture;\n};\n\nmodule.exports = AtlasXML;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/parsers/AtlasXML.js"],"names":["AtlasXML","texture","sourceIndex","xml","getElementsByTagName","console","warn","source","add","width","height","frames","newFrame","i","length","frame","attributes","name","value","x","parseInt","y","frameX","Math","abs","frameY","frameWidth","frameHeight","setTrim","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;AAcA,IAAIA,QAAQ,GAAG,UAAUC,OAAV,EAAmBC,WAAnB,EAAgCC,GAAhC,EACf;AACI;AACA,MAAI,CAACA,GAAG,CAACC,oBAAJ,CAAyB,cAAzB,CAAL,EACA;AACIC,IAAAA,OAAO,CAACC,IAAR,CAAa,iCAAb;AACA;AACH,GANL,CAQI;;;AACA,MAAIC,MAAM,GAAGN,OAAO,CAACM,MAAR,CAAeL,WAAf,CAAb;AAEAD,EAAAA,OAAO,CAACO,GAAR,CAAY,QAAZ,EAAsBN,WAAtB,EAAmC,CAAnC,EAAsC,CAAtC,EAAyCK,MAAM,CAACE,KAAhD,EAAuDF,MAAM,CAACG,MAA9D,EAXJ,CAaI;;AACA,MAAIC,MAAM,GAAGR,GAAG,CAACC,oBAAJ,CAAyB,YAAzB,CAAb;AAEA,MAAIQ,QAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACI,QAAIE,KAAK,GAAGJ,MAAM,CAACE,CAAD,CAAN,CAAUG,UAAtB;AAEA,QAAIC,IAAI,GAAGF,KAAK,CAACE,IAAN,CAAWC,KAAtB;AACA,QAAIC,CAAC,GAAGC,QAAQ,CAACL,KAAK,CAACI,CAAN,CAAQD,KAAT,EAAgB,EAAhB,CAAhB;AACA,QAAIG,CAAC,GAAGD,QAAQ,CAACL,KAAK,CAACM,CAAN,CAAQH,KAAT,EAAgB,EAAhB,CAAhB;AACA,QAAIT,KAAK,GAAGW,QAAQ,CAACL,KAAK,CAACN,KAAN,CAAYS,KAAb,EAAoB,EAApB,CAApB;AACA,QAAIR,MAAM,GAAGU,QAAQ,CAACL,KAAK,CAACL,MAAN,CAAaQ,KAAd,EAAqB,EAArB,CAArB,CAPJ,CASI;;AACAN,IAAAA,QAAQ,GAAGX,OAAO,CAACO,GAAR,CAAYS,IAAZ,EAAkBf,WAAlB,EAA+BiB,CAA/B,EAAkCE,CAAlC,EAAqCZ,KAArC,EAA4CC,MAA5C,CAAX,CAVJ,CAYI;;AACA,QAAIK,KAAK,CAACO,MAAV,EACA;AACI,UAAIA,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACL,KAAK,CAACO,MAAN,CAAaJ,KAAd,EAAqB,EAArB,CAAjB,CAAb;AACA,UAAIO,MAAM,GAAGF,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACL,KAAK,CAACU,MAAN,CAAaP,KAAd,EAAqB,EAArB,CAAjB,CAAb;AACA,UAAIQ,UAAU,GAAGN,QAAQ,CAACL,KAAK,CAACW,UAAN,CAAiBR,KAAlB,EAAyB,EAAzB,CAAzB;AACA,UAAIS,WAAW,GAAGP,QAAQ,CAACL,KAAK,CAACY,WAAN,CAAkBT,KAAnB,EAA0B,EAA1B,CAA1B;AAEAN,MAAAA,QAAQ,CAACgB,OAAT,CACInB,KADJ,EAEIC,MAFJ,EAGIY,MAHJ,EAIIG,MAJJ,EAKIC,UALJ,EAMIC,WANJ;AAQH;AACJ;;AAED,SAAO1B,OAAP;AACH,CApDD;;AAsDA4B,MAAM,CAACC,OAAP,GAAiB9B,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Parses an XML Texture Atlas object and adds all the Frames into a Texture.\r\n *\r\n * @function Phaser.Textures.Parsers.AtlasXML\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {*} xml - The XML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar AtlasXML = function (texture, sourceIndex, xml)\r\n{\r\n    //  Malformed?\r\n    if (!xml.getElementsByTagName('TextureAtlas'))\r\n    {\r\n        console.warn('Invalid Texture Atlas XML given');\r\n        return;\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    //  By this stage frames is a fully parsed array\r\n    var frames = xml.getElementsByTagName('SubTexture');\r\n\r\n    var newFrame;\r\n\r\n    for (var i = 0; i < frames.length; i++)\r\n    {\r\n        var frame = frames[i].attributes;\r\n\r\n        var name = frame.name.value;\r\n        var x = parseInt(frame.x.value, 10);\r\n        var y = parseInt(frame.y.value, 10);\r\n        var width = parseInt(frame.width.value, 10);\r\n        var height = parseInt(frame.height.value, 10);\r\n\r\n        //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n        newFrame = texture.add(name, sourceIndex, x, y, width, height);\r\n\r\n        //  These are the original (non-trimmed) sprite values\r\n        if (frame.frameX)\r\n        {\r\n            var frameX = Math.abs(parseInt(frame.frameX.value, 10));\r\n            var frameY = Math.abs(parseInt(frame.frameY.value, 10));\r\n            var frameWidth = parseInt(frame.frameWidth.value, 10);\r\n            var frameHeight = parseInt(frame.frameHeight.value, 10);\r\n\r\n            newFrame.setTrim(\r\n                width,\r\n                height,\r\n                frameX,\r\n                frameY,\r\n                frameWidth,\r\n                frameHeight\r\n            );\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = AtlasXML;\r\n"]},"metadata":{},"sourceType":"script"}