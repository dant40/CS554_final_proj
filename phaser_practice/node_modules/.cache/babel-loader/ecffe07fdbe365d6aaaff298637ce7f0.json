{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar MATH_CONST = require('../const');\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\n\n\nvar RotateTo = function (currentAngle, targetAngle, lerp) {\n  if (lerp === undefined) {\n    lerp = 0.05;\n  }\n\n  if (currentAngle === targetAngle) {\n    return currentAngle;\n  }\n\n  if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= MATH_CONST.PI2 - lerp) {\n    currentAngle = targetAngle;\n  } else {\n    if (Math.abs(targetAngle - currentAngle) > Math.PI) {\n      if (targetAngle < currentAngle) {\n        targetAngle += MATH_CONST.PI2;\n      } else {\n        targetAngle -= MATH_CONST.PI2;\n      }\n    }\n\n    if (targetAngle > currentAngle) {\n      currentAngle += lerp;\n    } else if (targetAngle < currentAngle) {\n      currentAngle -= lerp;\n    }\n  }\n\n  return currentAngle;\n};\n\nmodule.exports = RotateTo;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/angle/RotateTo.js"],"names":["MATH_CONST","require","RotateTo","currentAngle","targetAngle","lerp","undefined","Math","abs","PI2","PI","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,UAAD,CAAxB;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,QAAQ,GAAG,UAAUC,YAAV,EAAwBC,WAAxB,EAAqCC,IAArC,EACf;AACI,MAAIA,IAAI,KAAKC,SAAb,EAAwB;AAAED,IAAAA,IAAI,GAAG,IAAP;AAAc;;AAExC,MAAIF,YAAY,KAAKC,WAArB,EACA;AACI,WAAOD,YAAP;AACH;;AAED,MAAII,IAAI,CAACC,GAAL,CAASJ,WAAW,GAAGD,YAAvB,KAAwCE,IAAxC,IAAgDE,IAAI,CAACC,GAAL,CAASJ,WAAW,GAAGD,YAAvB,KAAyCH,UAAU,CAACS,GAAX,GAAiBJ,IAA9G,EACA;AACIF,IAAAA,YAAY,GAAGC,WAAf;AACH,GAHD,MAKA;AACI,QAAIG,IAAI,CAACC,GAAL,CAASJ,WAAW,GAAGD,YAAvB,IAAuCI,IAAI,CAACG,EAAhD,EACA;AACI,UAAIN,WAAW,GAAGD,YAAlB,EACA;AACIC,QAAAA,WAAW,IAAIJ,UAAU,CAACS,GAA1B;AACH,OAHD,MAKA;AACIL,QAAAA,WAAW,IAAIJ,UAAU,CAACS,GAA1B;AACH;AACJ;;AAED,QAAIL,WAAW,GAAGD,YAAlB,EACA;AACIA,MAAAA,YAAY,IAAIE,IAAhB;AACH,KAHD,MAIK,IAAID,WAAW,GAAGD,YAAlB,EACL;AACIA,MAAAA,YAAY,IAAIE,IAAhB;AACH;AACJ;;AAED,SAAOF,YAAP;AACH,CAtCD;;AAwCAQ,MAAM,CAACC,OAAP,GAAiBV,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar MATH_CONST = require('../const');\r\n\r\n/**\r\n * Rotates `currentAngle` towards `targetAngle`, taking the shortest rotation distance. The `lerp` argument is the amount to rotate by in this call.\r\n *\r\n * @function Phaser.Math.Angle.RotateTo\r\n * @since 3.0.0\r\n *\r\n * @param {number} currentAngle - The current angle, in radians.\r\n * @param {number} targetAngle - The target angle to rotate to, in radians.\r\n * @param {number} [lerp=0.05] - The lerp value to add to the current angle.\r\n *\r\n * @return {number} The adjusted angle.\r\n */\r\nvar RotateTo = function (currentAngle, targetAngle, lerp)\r\n{\r\n    if (lerp === undefined) { lerp = 0.05; }\r\n\r\n    if (currentAngle === targetAngle)\r\n    {\r\n        return currentAngle;\r\n    }\r\n\r\n    if (Math.abs(targetAngle - currentAngle) <= lerp || Math.abs(targetAngle - currentAngle) >= (MATH_CONST.PI2 - lerp))\r\n    {\r\n        currentAngle = targetAngle;\r\n    }\r\n    else\r\n    {\r\n        if (Math.abs(targetAngle - currentAngle) > Math.PI)\r\n        {\r\n            if (targetAngle < currentAngle)\r\n            {\r\n                targetAngle += MATH_CONST.PI2;\r\n            }\r\n            else\r\n            {\r\n                targetAngle -= MATH_CONST.PI2;\r\n            }\r\n        }\r\n\r\n        if (targetAngle > currentAngle)\r\n        {\r\n            currentAngle += lerp;\r\n        }\r\n        else if (targetAngle < currentAngle)\r\n        {\r\n            currentAngle -= lerp;\r\n        }\r\n    }\r\n\r\n    return currentAngle;\r\n};\r\n\r\nmodule.exports = RotateTo;\r\n"]},"metadata":{},"sourceType":"script"}