{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Features = require('../../device/Features');\n\nvar InputEvents = require('../events');\n\nvar NOOP = require('../../utils/Class'); //  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberof Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar MouseManager = new Class({\n  initialize: function MouseManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#capture\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.capture = true;\n    /**\r\n     * A boolean that controls if the Mouse Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Mouse target, as defined in the Game Config.\r\n     * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#target\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.target;\n    /**\r\n     * If the mouse has been pointer locked successfully this will be set to true.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#locked\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.locked = false;\n    /**\r\n     * The Mouse Move Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseMove\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseMove = NOOP;\n    /**\r\n     * The Mouse Down Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseDown\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseDown = NOOP;\n    /**\r\n     * The Mouse Up Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseUp\r\n     * @type {function}\r\n     * @since 3.10.0\r\n     */\n\n    this.onMouseUp = NOOP;\n    /**\r\n     * The Mouse Down Event handler specifically for events on the Window.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseDownWindow\r\n     * @type {function}\r\n     * @since 3.17.0\r\n     */\n\n    this.onMouseDownWindow = NOOP;\n    /**\r\n     * The Mouse Up Event handler specifically for events on the Window.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseUpWindow\r\n     * @type {function}\r\n     * @since 3.17.0\r\n     */\n\n    this.onMouseUpWindow = NOOP;\n    /**\r\n     * The Mouse Over Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseOver\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onMouseOver = NOOP;\n    /**\r\n     * The Mouse Out Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseOut\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onMouseOut = NOOP;\n    /**\r\n     * The Mouse Wheel Event handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#onMouseWheel\r\n     * @type {function}\r\n     * @since 3.18.0\r\n     */\n\n    this.onMouseWheel = NOOP;\n    /**\r\n     * Internal pointerLockChange handler.\r\n     * This function is sent the native DOM MouseEvent.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.pointerLockChange = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Touch Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#boot\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  boot: function () {\n    var config = this.manager.config;\n    this.enabled = config.inputMouse;\n    this.target = config.inputMouseEventTarget;\n    this.capture = config.inputMouseCapture;\n\n    if (!this.target) {\n      this.target = this.manager.game.canvas;\n    } else if (typeof this.target === 'string') {\n      this.target = document.getElementById(this.target);\n    }\n\n    if (config.disableContextMenu) {\n      this.disableContextMenu();\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n  },\n\n  /**\r\n   * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n   * \r\n   * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n   * \r\n   * Use this if you need to enable right-button mouse support in your game, and the browser\r\n   * menu keeps getting in the way.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Input.Mouse.MouseManager} This Mouse Manager instance.\r\n   */\n  disableContextMenu: function () {\n    document.body.addEventListener('contextmenu', function (event) {\n      event.preventDefault();\n      return false;\n    });\n    return this;\n  },\n\n  /**\r\n   * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n   *\r\n   * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n   * the user presses an exit key.\r\n   *\r\n   * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n   * from the games Input Manager, with an `isPointerLocked` property.\r\n   *\r\n   * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n   * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n   * @since 3.0.0\r\n   */\n  requestPointerLock: function () {\n    if (Features.pointerLock) {\n      var element = this.target;\n      element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\n      element.requestPointerLock();\n    }\n  },\n\n  /**\r\n   * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n   * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n   * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n   * @since 3.0.0\r\n   */\n  releasePointerLock: function () {\n    if (Features.pointerLock) {\n      document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\n      document.exitPointerLock();\n    }\n  },\n\n  /**\r\n   * Starts the Mouse Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n   * @since 3.0.0\r\n   */\n  startListeners: function () {\n    var _this = this;\n\n    var canvas = this.manager.canvas;\n    var autoFocus = window && window.focus && this.manager.game.config.autoFocus;\n\n    this.onMouseMove = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onMouseMove(event);\n\n        if (_this.capture) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onMouseDown = function (event) {\n      if (autoFocus) {\n        window.focus();\n      }\n\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onMouseDown(event);\n\n        if (_this.capture && event.target === canvas) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onMouseDownWindow = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas) {\n        //  Only process the event if the target isn't the canvas\n        _this.manager.onMouseDown(event);\n      }\n    };\n\n    this.onMouseUp = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onMouseUp(event);\n\n        if (_this.capture && event.target === canvas) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onMouseUpWindow = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas) {\n        //  Only process the event if the target isn't the canvas\n        _this.manager.onMouseUp(event);\n      }\n    };\n\n    this.onMouseOver = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.setCanvasOver(event);\n      }\n    };\n\n    this.onMouseOut = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.setCanvasOut(event);\n      }\n    };\n\n    this.onMouseWheel = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onMouseWheel(event);\n      }\n    };\n\n    var target = this.target;\n\n    if (!target) {\n      return;\n    }\n\n    var passive = {\n      passive: true\n    };\n    var nonPassive = {\n      passive: false\n    };\n    target.addEventListener('mousemove', this.onMouseMove, this.capture ? nonPassive : passive);\n    target.addEventListener('mousedown', this.onMouseDown, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseup', this.onMouseUp, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseover', this.onMouseOver, this.capture ? nonPassive : passive);\n    target.addEventListener('mouseout', this.onMouseOut, this.capture ? nonPassive : passive);\n    target.addEventListener('wheel', this.onMouseWheel, this.capture ? nonPassive : passive);\n\n    if (window && this.manager.game.config.inputWindowEvents) {\n      window.addEventListener('mousedown', this.onMouseDownWindow, nonPassive);\n      window.addEventListener('mouseup', this.onMouseUpWindow, nonPassive);\n    }\n\n    if (Features.pointerLock) {\n      this.pointerLockChange = function (event) {\n        var element = _this.target;\n        _this.locked = document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ? true : false;\n\n        _this.manager.onPointerLockChange(event);\n      };\n\n      document.addEventListener('pointerlockchange', this.pointerLockChange, true);\n      document.addEventListener('mozpointerlockchange', this.pointerLockChange, true);\n      document.addEventListener('webkitpointerlockchange', this.pointerLockChange, true);\n    }\n\n    this.enabled = true;\n  },\n\n  /**\r\n   * Stops the Mouse Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n   * @since 3.0.0\r\n   */\n  stopListeners: function () {\n    var target = this.target;\n    target.removeEventListener('mousemove', this.onMouseMove);\n    target.removeEventListener('mousedown', this.onMouseDown);\n    target.removeEventListener('mouseup', this.onMouseUp);\n    target.removeEventListener('mouseover', this.onMouseOver);\n    target.removeEventListener('mouseout', this.onMouseOut);\n\n    if (window) {\n      window.removeEventListener('mousedown', this.onMouseDownWindow);\n      window.removeEventListener('mouseup', this.onMouseUpWindow);\n    }\n\n    if (Features.pointerLock) {\n      document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\n      document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\n      document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\n    }\n  },\n\n  /**\r\n   * Destroys this Mouse Manager instance.\r\n   *\r\n   * @method Phaser.Input.Mouse.MouseManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.stopListeners();\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = MouseManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/mouse/MouseManager.js"],"names":["Class","require","Features","InputEvents","NOOP","MouseManager","initialize","inputManager","manager","capture","enabled","target","locked","onMouseMove","onMouseDown","onMouseUp","onMouseDownWindow","onMouseUpWindow","onMouseOver","onMouseOut","onMouseWheel","pointerLockChange","events","once","MANAGER_BOOT","boot","config","inputMouse","inputMouseEventTarget","inputMouseCapture","game","canvas","document","getElementById","disableContextMenu","startListeners","body","addEventListener","event","preventDefault","requestPointerLock","pointerLock","element","mozRequestPointerLock","webkitRequestPointerLock","releasePointerLock","exitPointerLock","mozExitPointerLock","webkitExitPointerLock","_this","autoFocus","window","focus","defaultPrevented","setCanvasOver","setCanvasOut","passive","nonPassive","inputWindowEvents","pointerLockElement","mozPointerLockElement","webkitPointerLockElement","onPointerLockChange","stopListeners","removeEventListener","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Features = require('../../device/Features');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/Class');\r\n\r\n//  https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\r\n//  https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n\r\n/**\r\n * @classdesc\r\n * The Mouse Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Mouse Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class MouseManager\r\n * @memberof Phaser.Input.Mouse\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar MouseManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function MouseManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM mouse events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Mouse Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Mouse target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * If the mouse has been pointer locked successfully this will be set to true.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#locked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = false;\r\n\r\n        /**\r\n         * The Mouse Move Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseMove\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseMove = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDown\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseDown = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUp\r\n         * @type {function}\r\n         * @since 3.10.0\r\n         */\r\n        this.onMouseUp = NOOP;\r\n\r\n        /**\r\n         * The Mouse Down Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseDownWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseDownWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Up Event handler specifically for events on the Window.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseUpWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onMouseUpWindow = NOOP;\r\n\r\n        /**\r\n         * The Mouse Over Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOver = NOOP;\r\n\r\n        /**\r\n         * The Mouse Out Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onMouseOut = NOOP;\r\n\r\n        /**\r\n         * The Mouse Wheel Event handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#onMouseWheel\r\n         * @type {function}\r\n         * @since 3.18.0\r\n         */\r\n        this.onMouseWheel = NOOP;\r\n\r\n        /**\r\n         * Internal pointerLockChange handler.\r\n         * This function is sent the native DOM MouseEvent.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Mouse.MouseManager#pointerLockChange\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.pointerLockChange = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputMouse;\r\n        this.target = config.inputMouseEventTarget;\r\n        this.capture = config.inputMouseCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n        else if (typeof this.target === 'string')\r\n        {\r\n            this.target = document.getElementById(this.target);\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you right-click on the browser.\r\n     * \r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     * \r\n     * Use this if you need to enable right-button mouse support in your game, and the browser\r\n     * menu keeps getting in the way.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#disableContextMenu\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Input.Mouse.MouseManager} This Mouse Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If the browser supports it, you can request that the pointer be locked to the browser window.\r\n     *\r\n     * This is classically known as 'FPS controls', where the pointer can't leave the browser until\r\n     * the user presses an exit key.\r\n     *\r\n     * If the browser successfully enters a locked state, a `POINTER_LOCK_CHANGE_EVENT` will be dispatched,\r\n     * from the games Input Manager, with an `isPointerLocked` property.\r\n     *\r\n     * It is important to note that pointer lock can only be enabled after an 'engagement gesture',\r\n     * see: https://w3c.github.io/pointerlock/#dfn-engagement-gesture.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#requestPointerLock\r\n     * @since 3.0.0\r\n     */\r\n    requestPointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            var element = this.target;\r\n\r\n            element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;\r\n\r\n            element.requestPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the browser supports pointer lock, this will request that the pointer lock is released. If\r\n     * the browser successfully enters a locked state, a 'POINTER_LOCK_CHANGE_EVENT' will be\r\n     * dispatched - from the game's input manager - with an `isPointerLocked` property.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#releasePointerLock\r\n     * @since 3.0.0\r\n     */\r\n    releasePointerLock: function ()\r\n    {\r\n        if (Features.pointerLock)\r\n        {\r\n            document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;\r\n            document.exitPointerLock();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Starts the Mouse Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var canvas = this.manager.canvas;\r\n        var autoFocus = (window && window.focus && this.manager.game.config.autoFocus);\r\n\r\n        this.onMouseMove = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onMouseMove(event);\r\n    \r\n                if (_this.capture)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseDown = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onMouseDown(event);\r\n    \r\n                if (_this.capture && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseDownWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onMouseDown(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseUp = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onMouseUp(event);\r\n    \r\n                if (_this.capture && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onMouseUpWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onMouseUp(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseOver = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOver(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseOut = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOut(event);\r\n            }\r\n        };\r\n\r\n        this.onMouseWheel = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onMouseWheel(event);\r\n            }\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('mousemove', this.onMouseMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mousedown', this.onMouseDown, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseup', this.onMouseUp, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseover', this.onMouseOver, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('mouseout', this.onMouseOut, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('wheel', this.onMouseWheel, (this.capture) ? nonPassive : passive);\r\n\r\n        if (window && this.manager.game.config.inputWindowEvents)\r\n        {\r\n            window.addEventListener('mousedown', this.onMouseDownWindow, nonPassive);\r\n            window.addEventListener('mouseup', this.onMouseUpWindow, nonPassive);\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            this.pointerLockChange = function (event)\r\n            {\r\n                var element = _this.target;\r\n\r\n                _this.locked = (document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element) ? true : false;\r\n\r\n                _this.manager.onPointerLockChange(event);\r\n            };\r\n\r\n            document.addEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.addEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Mouse Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('mousemove', this.onMouseMove);\r\n        target.removeEventListener('mousedown', this.onMouseDown);\r\n        target.removeEventListener('mouseup', this.onMouseUp);\r\n        target.removeEventListener('mouseover', this.onMouseOver);\r\n        target.removeEventListener('mouseout', this.onMouseOut);\r\n\r\n        if (window)\r\n        {\r\n            window.removeEventListener('mousedown', this.onMouseDownWindow);\r\n            window.removeEventListener('mouseup', this.onMouseUpWindow);\r\n        }\r\n\r\n        if (Features.pointerLock)\r\n        {\r\n            document.removeEventListener('pointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('mozpointerlockchange', this.pointerLockChange, true);\r\n            document.removeEventListener('webkitpointerlockchange', this.pointerLockChange, true);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Mouse Manager instance.\r\n     *\r\n     * @method Phaser.Input.Mouse.MouseManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MouseManager;\r\n"]},"metadata":{},"sourceType":"script"}