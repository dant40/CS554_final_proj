{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar LeaderboardScore = require('./LeaderboardScore');\n/**\r\n * @classdesc\r\n * This class represents one single Leaderboard that belongs to a Facebook Instant Game.\r\n * \r\n * You do not need to instantiate this class directly, it will be created when you use the\r\n * `getLeaderboard()` method of the main plugin.\r\n *\r\n * @class FacebookInstantGamesLeaderboard\r\n * @memberOf Phaser\r\n * @constructor\r\n * @extends Phaser.Events.EventEmitter\r\n * @since 3.13.0\r\n * \r\n * @param {Phaser.FacebookInstantGamesPlugin} plugin - A reference to the Facebook Instant Games Plugin.\r\n * @param {any} data - An Instant Game leaderboard instance.\r\n */\n\n\nvar Leaderboard = new Class({\n  Extends: EventEmitter,\n  initialize: function Leaderboard(plugin, data) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Facebook Instant Games Plugin.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#plugin\r\n     * @type {Phaser.FacebookInstantGamesPlugin}\r\n     * @since 3.13.0\r\n     */\n\n    this.plugin = plugin;\n    /**\r\n     * An Instant Game leaderboard instance.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#ref\r\n     * @type {any}\r\n     * @since 3.13.0\r\n     */\n\n    this.ref = data;\n    /**\r\n     * The name of the leaderboard.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#name\r\n     * @type {string}\r\n     * @since 3.13.0\r\n     */\n\n    this.name = data.getName();\n    /**\r\n     * The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#contextID\r\n     * @type {string}\r\n     * @since 3.13.0\r\n     */\n\n    this.contextID = data.getContextID();\n    /**\r\n     * The total number of player entries in the leaderboard.\r\n     * This value defaults to zero. Populate it via the `getEntryCount()` method.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#entryCount\r\n     * @type {integer}\r\n     * @since 3.13.0\r\n     */\n\n    this.entryCount = 0;\n    /**\r\n     * The players score object.\r\n     * This value defaults to `null`. Populate it via the `getPlayerScore()` method.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#playerScore\r\n     * @type {LeaderboardScore}\r\n     * @since 3.13.0\r\n     */\n\n    this.playerScore = null;\n    /**\r\n     * The scores in the Leaderboard from the currently requested range.\r\n     * This value defaults to an empty array. Populate it via the `getScores()` method.\r\n     * The contents of this array are reset each time `getScores()` is called.\r\n     *\r\n     * @name Phaser.FacebookInstantGamesLeaderboard#scores\r\n     * @type {LeaderboardScore[]}\r\n     * @since 3.13.0\r\n     */\n\n    this.scores = [];\n    this.getEntryCount();\n  },\n\n  /**\r\n   * Fetches the total number of player entries in the leaderboard.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesLeaderboard#getEntryCount\r\n   * @since 3.13.0\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getEntryCount: function () {\n    var _this = this;\n\n    this.ref.getEntryCountAsync().then(function (count) {\n      _this.entryCount = count;\n\n      _this.emit('getentrycount', count, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\r\n   * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `setscore` event along with the LeaderboardScore object and the name of the Leaderboard.\r\n   * \r\n   * If the save fails the event will send `null` as the score value.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesLeaderboard#setScore\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} score - The new score for the player. Must be a 64-bit integer number.\r\n   * @param {(string|any)} [data] - Metadata to associate with the stored score. Must be less than 2KB in size. If an object is given it will be passed to `JSON.stringify`.\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  setScore: function (score, data) {\n    if (data === undefined) {\n      data = '';\n    }\n\n    if (typeof data === 'object') {\n      data = JSON.stringify(data);\n    }\n\n    var _this = this;\n\n    this.ref.setScoreAsync(score, data).then(function (entry) {\n      if (entry) {\n        var score = LeaderboardScore(entry);\n        _this.playerScore = score;\n\n        _this.emit('setscore', score, _this.name);\n      } else {\n        _this.emit('setscore', null, _this.name);\n      }\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Gets the players leaderboard entry and stores it in the `playerScore` property.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n   * \r\n   * If the player has not yet saved a score, the event will send `null` as the score value, and `playerScore` will be set to `null` as well.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesLeaderboard#getPlayerScore\r\n   * @since 3.13.0\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getPlayerScore: function () {\n    var _this = this;\n\n    this.ref.getPlayerEntryAsync().then(function (entry) {\n      if (entry) {\n        var score = LeaderboardScore(entry);\n        _this.playerScore = score;\n\n        _this.emit('getplayerscore', score, _this.name);\n      } else {\n        _this.emit('getplayerscore', null, _this.name);\n      }\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesLeaderboard#getScores\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n   * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getScores: function (count, offset) {\n    if (count === undefined) {\n      count = 10;\n    }\n\n    if (offset === undefined) {\n      offset = 0;\n    }\n\n    var _this = this;\n\n    this.ref.getEntriesAsync(count, offset).then(function (entries) {\n      _this.scores = [];\n      entries.forEach(function (entry) {\n        _this.scores.push(LeaderboardScore(entry));\n      });\n\n      _this.emit('getscores', _this.scores, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  },\n\n  /**\r\n   * Retrieves a set of leaderboard entries, based on the current player's connected players (including the current player), ordered by local rank within the set of connected players.\r\n   * \r\n   * The data is requested in an async call, so the result isn't available immediately.\r\n   * \r\n   * When the call completes this Leaderboard will emit the `getconnectedscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n   *\r\n   * @method Phaser.FacebookInstantGamesLeaderboard#getConnectedScores\r\n   * @since 3.16.0\r\n   * \r\n   * @return {this} This Leaderboard instance.\r\n   */\n  getConnectedScores: function () {\n    var _this = this;\n\n    this.ref.getConnectedPlayerEntriesAsync().then(function (entries) {\n      _this.scores = [];\n      entries.forEach(function (entry) {\n        _this.scores.push(LeaderboardScore(entry));\n      });\n\n      _this.emit('getconnectedscores', _this.scores, _this.name);\n    }).catch(function (e) {\n      console.warn(e);\n    });\n    return this;\n  }\n});\nmodule.exports = Leaderboard;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/fbinstant/src/Leaderboard.js"],"names":["Class","require","EventEmitter","LeaderboardScore","Leaderboard","Extends","initialize","plugin","data","call","ref","name","getName","contextID","getContextID","entryCount","playerScore","scores","getEntryCount","_this","getEntryCountAsync","then","count","emit","catch","e","console","warn","setScore","score","undefined","JSON","stringify","setScoreAsync","entry","getPlayerScore","getPlayerEntryAsync","getScores","offset","getEntriesAsync","entries","forEach","push","getConnectedScores","getConnectedPlayerEntriesAsync","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIG,WAAW,GAAG,IAAIJ,KAAJ,CAAU;AAExBK,EAAAA,OAAO,EAAEH,YAFe;AAIxBI,EAAAA,UAAU,EAEV,SAASF,WAAT,CAAsBG,MAAtB,EAA8BC,IAA9B,EACA;AACIN,IAAAA,YAAY,CAACO,IAAb,CAAkB,IAAlB;AAEA;;;;;;;;AAOA,SAAKF,MAAL,GAAcA,MAAd;AAEA;;;;;;;;AAOA,SAAKG,GAAL,GAAWF,IAAX;AAEA;;;;;;;;AAOA,SAAKG,IAAL,GAAYH,IAAI,CAACI,OAAL,EAAZ;AAEA;;;;;;;;AAOA,SAAKC,SAAL,GAAiBL,IAAI,CAACM,YAAL,EAAjB;AAEA;;;;;;;;;AAQA,SAAKC,UAAL,GAAkB,CAAlB;AAEA;;;;;;;;;AAQA,SAAKC,WAAL,GAAmB,IAAnB;AAEA;;;;;;;;;;AASA,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,aAAL;AACH,GA9EuB;;AAgFxB;;;;;;;;;;;;AAYAA,EAAAA,aAAa,EAAE,YACf;AACI,QAAIC,KAAK,GAAG,IAAZ;;AAEA,SAAKT,GAAL,CAASU,kBAAT,GAA8BC,IAA9B,CAAmC,UAAUC,KAAV,EACnC;AACIH,MAAAA,KAAK,CAACJ,UAAN,GAAmBO,KAAnB;;AAEAH,MAAAA,KAAK,CAACI,IAAN,CAAW,eAAX,EAA4BD,KAA5B,EAAmCH,KAAK,CAACR,IAAzC;AAEH,KAND,EAMGa,KANH,CAMS,UAAUC,CAAV,EACT;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACH,KATD;AAWA,WAAO,IAAP;AACH,GA5GuB;;AA8GxB;;;;;;;;;;;;;;;;;;AAkBAG,EAAAA,QAAQ,EAAE,UAAUC,KAAV,EAAiBrB,IAAjB,EACV;AACI,QAAIA,IAAI,KAAKsB,SAAb,EAAwB;AAAEtB,MAAAA,IAAI,GAAG,EAAP;AAAY;;AAEtC,QAAI,OAAOA,IAAP,KAAgB,QAApB,EACA;AACIA,MAAAA,IAAI,GAAGuB,IAAI,CAACC,SAAL,CAAexB,IAAf,CAAP;AACH;;AAED,QAAIW,KAAK,GAAG,IAAZ;;AAEA,SAAKT,GAAL,CAASuB,aAAT,CAAuBJ,KAAvB,EAA8BrB,IAA9B,EAAoCa,IAApC,CAAyC,UAAUa,KAAV,EACzC;AACI,UAAIA,KAAJ,EACA;AACI,YAAIL,KAAK,GAAG1B,gBAAgB,CAAC+B,KAAD,CAA5B;AAEAf,QAAAA,KAAK,CAACH,WAAN,GAAoBa,KAApB;;AAEAV,QAAAA,KAAK,CAACI,IAAN,CAAW,UAAX,EAAuBM,KAAvB,EAA8BV,KAAK,CAACR,IAApC;AACH,OAPD,MASA;AACIQ,QAAAA,KAAK,CAACI,IAAN,CAAW,UAAX,EAAuB,IAAvB,EAA6BJ,KAAK,CAACR,IAAnC;AACH;AAEJ,KAfD,EAeGa,KAfH,CAeS,UAAUC,CAAV,EACT;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACH,KAlBD;AAoBA,WAAO,IAAP;AACH,GAhKuB;;AAkKxB;;;;;;;;;;;;;;AAcAU,EAAAA,cAAc,EAAE,YAChB;AACI,QAAIhB,KAAK,GAAG,IAAZ;;AAEA,SAAKT,GAAL,CAAS0B,mBAAT,GAA+Bf,IAA/B,CAAoC,UAAUa,KAAV,EACpC;AACI,UAAIA,KAAJ,EACA;AACI,YAAIL,KAAK,GAAG1B,gBAAgB,CAAC+B,KAAD,CAA5B;AAEAf,QAAAA,KAAK,CAACH,WAAN,GAAoBa,KAApB;;AAEAV,QAAAA,KAAK,CAACI,IAAN,CAAW,gBAAX,EAA6BM,KAA7B,EAAoCV,KAAK,CAACR,IAA1C;AACH,OAPD,MASA;AACIQ,QAAAA,KAAK,CAACI,IAAN,CAAW,gBAAX,EAA6B,IAA7B,EAAmCJ,KAAK,CAACR,IAAzC;AACH;AAEJ,KAfD,EAeGa,KAfH,CAeS,UAAUC,CAAV,EACT;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACH,KAlBD;AAoBA,WAAO,IAAP;AACH,GAzMuB;;AA2MxB;;;;;;;;;;;;;;;AAeAY,EAAAA,SAAS,EAAE,UAAUf,KAAV,EAAiBgB,MAAjB,EACX;AACI,QAAIhB,KAAK,KAAKQ,SAAd,EAAyB;AAAER,MAAAA,KAAK,GAAG,EAAR;AAAa;;AACxC,QAAIgB,MAAM,KAAKR,SAAf,EAA0B;AAAEQ,MAAAA,MAAM,GAAG,CAAT;AAAa;;AAEzC,QAAInB,KAAK,GAAG,IAAZ;;AAEA,SAAKT,GAAL,CAAS6B,eAAT,CAAyBjB,KAAzB,EAAgCgB,MAAhC,EAAwCjB,IAAxC,CAA6C,UAAUmB,OAAV,EAC7C;AACIrB,MAAAA,KAAK,CAACF,MAAN,GAAe,EAAf;AAEAuB,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUP,KAAV,EAChB;AACIf,QAAAA,KAAK,CAACF,MAAN,CAAayB,IAAb,CAAkBvC,gBAAgB,CAAC+B,KAAD,CAAlC;AACH,OAHD;;AAKAf,MAAAA,KAAK,CAACI,IAAN,CAAW,WAAX,EAAwBJ,KAAK,CAACF,MAA9B,EAAsCE,KAAK,CAACR,IAA5C;AAEH,KAXD,EAWGa,KAXH,CAWS,UAAUC,CAAV,EACT;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACH,KAdD;AAgBA,WAAO,IAAP;AACH,GAlPuB;;AAoPxB;;;;;;;;;;;;AAYAkB,EAAAA,kBAAkB,EAAE,YACpB;AACI,QAAIxB,KAAK,GAAG,IAAZ;;AAEA,SAAKT,GAAL,CAASkC,8BAAT,GAA0CvB,IAA1C,CAA+C,UAAUmB,OAAV,EAC/C;AACIrB,MAAAA,KAAK,CAACF,MAAN,GAAe,EAAf;AAEAuB,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUP,KAAV,EAChB;AACIf,QAAAA,KAAK,CAACF,MAAN,CAAayB,IAAb,CAAkBvC,gBAAgB,CAAC+B,KAAD,CAAlC;AACH,OAHD;;AAKAf,MAAAA,KAAK,CAACI,IAAN,CAAW,oBAAX,EAAiCJ,KAAK,CAACF,MAAvC,EAA+CE,KAAK,CAACR,IAArD;AAEH,KAXD,EAWGa,KAXH,CAWS,UAAUC,CAAV,EACT;AACIC,MAAAA,OAAO,CAACC,IAAR,CAAaF,CAAb;AACH,KAdD;AAgBA,WAAO,IAAP;AACH;AArRuB,CAAV,CAAlB;AAyRAoB,MAAM,CAACC,OAAP,GAAiB1C,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar LeaderboardScore = require('./LeaderboardScore');\r\n\r\n/**\r\n * @classdesc\r\n * This class represents one single Leaderboard that belongs to a Facebook Instant Game.\r\n * \r\n * You do not need to instantiate this class directly, it will be created when you use the\r\n * `getLeaderboard()` method of the main plugin.\r\n *\r\n * @class FacebookInstantGamesLeaderboard\r\n * @memberOf Phaser\r\n * @constructor\r\n * @extends Phaser.Events.EventEmitter\r\n * @since 3.13.0\r\n * \r\n * @param {Phaser.FacebookInstantGamesPlugin} plugin - A reference to the Facebook Instant Games Plugin.\r\n * @param {any} data - An Instant Game leaderboard instance.\r\n */\r\nvar Leaderboard = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Leaderboard (plugin, data)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Facebook Instant Games Plugin.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#plugin\r\n         * @type {Phaser.FacebookInstantGamesPlugin}\r\n         * @since 3.13.0\r\n         */\r\n        this.plugin = plugin;\r\n\r\n        /**\r\n         * An Instant Game leaderboard instance.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#ref\r\n         * @type {any}\r\n         * @since 3.13.0\r\n         */\r\n        this.ref = data;\r\n\r\n        /**\r\n         * The name of the leaderboard.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#name\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.name = data.getName();\r\n\r\n        /**\r\n         * The ID of the context that the leaderboard is associated with, or null if the leaderboard is not tied to a particular context.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#contextID\r\n         * @type {string}\r\n         * @since 3.13.0\r\n         */\r\n        this.contextID = data.getContextID();\r\n\r\n        /**\r\n         * The total number of player entries in the leaderboard.\r\n         * This value defaults to zero. Populate it via the `getEntryCount()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#entryCount\r\n         * @type {integer}\r\n         * @since 3.13.0\r\n         */\r\n        this.entryCount = 0;\r\n\r\n        /**\r\n         * The players score object.\r\n         * This value defaults to `null`. Populate it via the `getPlayerScore()` method.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#playerScore\r\n         * @type {LeaderboardScore}\r\n         * @since 3.13.0\r\n         */\r\n        this.playerScore = null;\r\n\r\n        /**\r\n         * The scores in the Leaderboard from the currently requested range.\r\n         * This value defaults to an empty array. Populate it via the `getScores()` method.\r\n         * The contents of this array are reset each time `getScores()` is called.\r\n         *\r\n         * @name Phaser.FacebookInstantGamesLeaderboard#scores\r\n         * @type {LeaderboardScore[]}\r\n         * @since 3.13.0\r\n         */\r\n        this.scores = [];\r\n\r\n        this.getEntryCount();\r\n    },\r\n\r\n    /**\r\n     * Fetches the total number of player entries in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getentrycount` event along with the count and name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getEntryCount\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getEntryCount: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getEntryCountAsync().then(function (count)\r\n        {\r\n            _this.entryCount = count;\r\n\r\n            _this.emit('getentrycount', count, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the player's score. If the player has an existing score, the old score will only be replaced if the new score is better than it.\r\n     * NOTE: If the leaderboard is associated with a specific context, the game must be in that context to set a score for the player.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `setscore` event along with the LeaderboardScore object and the name of the Leaderboard.\r\n     * \r\n     * If the save fails the event will send `null` as the score value.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#setScore\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} score - The new score for the player. Must be a 64-bit integer number.\r\n     * @param {(string|any)} [data] - Metadata to associate with the stored score. Must be less than 2KB in size. If an object is given it will be passed to `JSON.stringify`.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    setScore: function (score, data)\r\n    {\r\n        if (data === undefined) { data = ''; }\r\n\r\n        if (typeof data === 'object')\r\n        {\r\n            data = JSON.stringify(data);\r\n        }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.setScoreAsync(score, data).then(function (entry)\r\n        {\r\n            if (entry)\r\n            {\r\n                var score = LeaderboardScore(entry);\r\n\r\n                _this.playerScore = score;\r\n    \r\n                _this.emit('setscore', score, _this.name);\r\n            }\r\n            else\r\n            {\r\n                _this.emit('setscore', null, _this.name);\r\n            }\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the players leaderboard entry and stores it in the `playerScore` property.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getplayerscore` event along with the score and the name of the Leaderboard.\r\n     * \r\n     * If the player has not yet saved a score, the event will send `null` as the score value, and `playerScore` will be set to `null` as well.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getPlayerScore\r\n     * @since 3.13.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getPlayerScore: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getPlayerEntryAsync().then(function (entry)\r\n        {\r\n            if (entry)\r\n            {\r\n                var score = LeaderboardScore(entry);\r\n\r\n                _this.playerScore = score;\r\n    \r\n                _this.emit('getplayerscore', score, _this.name);\r\n            }\r\n            else\r\n            {\r\n                _this.emit('getplayerscore', null, _this.name);\r\n            }\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a set of leaderboard entries, ordered by score ranking in the leaderboard.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getScores\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [count=10] - The number of entries to attempt to fetch from the leaderboard. Currently, up to a maximum of 100 entries may be fetched per query.\r\n     * @param {integer} [offset=0] - The offset from the top of the leaderboard that entries will be fetched from.\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getScores: function (count, offset)\r\n    {\r\n        if (count === undefined) { count = 10; }\r\n        if (offset === undefined) { offset = 0; }\r\n\r\n        var _this = this;\r\n\r\n        this.ref.getEntriesAsync(count, offset).then(function (entries)\r\n        {\r\n            _this.scores = [];\r\n\r\n            entries.forEach(function (entry)\r\n            {\r\n                _this.scores.push(LeaderboardScore(entry));\r\n            });\r\n\r\n            _this.emit('getscores', _this.scores, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieves a set of leaderboard entries, based on the current player's connected players (including the current player), ordered by local rank within the set of connected players.\r\n     * \r\n     * The data is requested in an async call, so the result isn't available immediately.\r\n     * \r\n     * When the call completes this Leaderboard will emit the `getconnectedscores` event along with an array of LeaderboardScore entries and the name of the Leaderboard.\r\n     *\r\n     * @method Phaser.FacebookInstantGamesLeaderboard#getConnectedScores\r\n     * @since 3.16.0\r\n     * \r\n     * @return {this} This Leaderboard instance.\r\n     */\r\n    getConnectedScores: function ()\r\n    {\r\n        var _this = this;\r\n\r\n        this.ref.getConnectedPlayerEntriesAsync().then(function (entries)\r\n        {\r\n            _this.scores = [];\r\n\r\n            entries.forEach(function (entry)\r\n            {\r\n                _this.scores.push(LeaderboardScore(entry));\r\n            });\r\n\r\n            _this.emit('getconnectedscores', _this.scores, _this.name);\r\n\r\n        }).catch(function (e)\r\n        {\r\n            console.warn(e);\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Leaderboard;\r\n"]},"metadata":{},"sourceType":"script"}