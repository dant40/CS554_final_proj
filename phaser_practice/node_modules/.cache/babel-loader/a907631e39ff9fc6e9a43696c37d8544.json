{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SafeRange = require('./SafeRange');\n/**\r\n * Returns the total number of elements in the array which have a property matching the given value.\r\n *\r\n * @function Phaser.Utils.Array.CountAllMatching\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} property - The property to test on each array element.\r\n * @param {*} value - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {integer} The total number of elements with properties matching the given value.\r\n */\n\n\nvar CountAllMatching = function (array, property, value, startIndex, endIndex) {\n  if (startIndex === undefined) {\n    startIndex = 0;\n  }\n\n  if (endIndex === undefined) {\n    endIndex = array.length;\n  }\n\n  var total = 0;\n\n  if (SafeRange(array, startIndex, endIndex)) {\n    for (var i = startIndex; i < endIndex; i++) {\n      var child = array[i];\n\n      if (child[property] === value) {\n        total++;\n      }\n    }\n  }\n\n  return total;\n};\n\nmodule.exports = CountAllMatching;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/CountAllMatching.js"],"names":["SafeRange","require","CountAllMatching","array","property","value","startIndex","endIndex","undefined","length","total","i","child","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,gBAAgB,GAAG,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8CC,QAA9C,EACvB;AACI,MAAID,UAAU,KAAKE,SAAnB,EAA8B;AAAEF,IAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,MAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAAED,IAAAA,QAAQ,GAAGJ,KAAK,CAACM,MAAjB;AAA0B;;AAExD,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAIV,SAAS,CAACG,KAAD,EAAQG,UAAR,EAAoBC,QAApB,CAAb,EACA;AACI,SAAK,IAAII,CAAC,GAAGL,UAAb,EAAyBK,CAAC,GAAGJ,QAA7B,EAAuCI,CAAC,EAAxC,EACA;AACI,UAAIC,KAAK,GAAGT,KAAK,CAACQ,CAAD,CAAjB;;AAEA,UAAIC,KAAK,CAACR,QAAD,CAAL,KAAoBC,KAAxB,EACA;AACIK,QAAAA,KAAK;AACR;AACJ;AACJ;;AAED,SAAOA,KAAP;AACH,CArBD;;AAuBAG,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns the total number of elements in the array which have a property matching the given value.\r\n *\r\n * @function Phaser.Utils.Array.CountAllMatching\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} property - The property to test on each array element.\r\n * @param {*} value - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {integer} The total number of elements with properties matching the given value.\r\n */\r\nvar CountAllMatching = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var total = 0;\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (child[property] === value)\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return total;\r\n};\r\n\r\nmodule.exports = CountAllMatching;\r\n"]},"metadata":{},"sourceType":"script"}