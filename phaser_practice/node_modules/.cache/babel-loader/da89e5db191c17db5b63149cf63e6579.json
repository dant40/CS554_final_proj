{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('../../Formats');\n\nvar MapData = require('../../mapdata/MapData');\n\nvar ParseTileLayers = require('./ParseTileLayers');\n\nvar ParseTilesets = require('./ParseTilesets');\n/**\r\n * Parses a Weltmeister JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseWeltmeister\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Weltmeister JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?object} [description]\r\n */\n\n\nvar ParseWeltmeister = function (name, json, insertNull) {\n  if (json.layer.length === 0) {\n    console.warn('No layers found in the Weltmeister map: ' + name);\n    return null;\n  }\n\n  var width = 0;\n  var height = 0;\n\n  for (var i = 0; i < json.layer.length; i++) {\n    if (json.layer[i].width > width) {\n      width = json.layer[i].width;\n    }\n\n    if (json.layer[i].height > height) {\n      height = json.layer[i].height;\n    }\n  }\n\n  var mapData = new MapData({\n    width: width,\n    height: height,\n    name: name,\n    tileWidth: json.layer[0].tilesize,\n    tileHeight: json.layer[0].tilesize,\n    format: Formats.WELTMEISTER\n  });\n  mapData.layers = ParseTileLayers(json, insertNull);\n  mapData.tilesets = ParseTilesets(json);\n  return mapData;\n};\n\nmodule.exports = ParseWeltmeister;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/impact/ParseWeltmeister.js"],"names":["Formats","require","MapData","ParseTileLayers","ParseTilesets","ParseWeltmeister","name","json","insertNull","layer","length","console","warn","width","height","i","mapData","tileWidth","tilesize","tileHeight","format","WELTMEISTER","layers","tilesets","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAII,gBAAgB,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,UAAtB,EACvB;AACI,MAAID,IAAI,CAACE,KAAL,CAAWC,MAAX,KAAsB,CAA1B,EACA;AACIC,IAAAA,OAAO,CAACC,IAAR,CAAa,6CAA6CN,IAA1D;AACA,WAAO,IAAP;AACH;;AAED,MAAIO,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACE,KAAL,CAAWC,MAA/B,EAAuCK,CAAC,EAAxC,EACA;AACI,QAAIR,IAAI,CAACE,KAAL,CAAWM,CAAX,EAAcF,KAAd,GAAsBA,KAA1B,EAAiC;AAAEA,MAAAA,KAAK,GAAGN,IAAI,CAACE,KAAL,CAAWM,CAAX,EAAcF,KAAtB;AAA8B;;AACjE,QAAIN,IAAI,CAACE,KAAL,CAAWM,CAAX,EAAcD,MAAd,GAAuBA,MAA3B,EAAmC;AAAEA,MAAAA,MAAM,GAAGP,IAAI,CAACE,KAAL,CAAWM,CAAX,EAAcD,MAAvB;AAAgC;AACxE;;AAED,MAAIE,OAAO,GAAG,IAAId,OAAJ,CAAY;AACtBW,IAAAA,KAAK,EAAEA,KADe;AAEtBC,IAAAA,MAAM,EAAEA,MAFc;AAGtBR,IAAAA,IAAI,EAAEA,IAHgB;AAItBW,IAAAA,SAAS,EAAEV,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcS,QAJH;AAKtBC,IAAAA,UAAU,EAAEZ,IAAI,CAACE,KAAL,CAAW,CAAX,EAAcS,QALJ;AAMtBE,IAAAA,MAAM,EAAEpB,OAAO,CAACqB;AANM,GAAZ,CAAd;AASAL,EAAAA,OAAO,CAACM,MAAR,GAAiBnB,eAAe,CAACI,IAAD,EAAOC,UAAP,CAAhC;AACAQ,EAAAA,OAAO,CAACO,QAAR,GAAmBnB,aAAa,CAACG,IAAD,CAAhC;AAEA,SAAOS,OAAP;AACH,CA9BD;;AAgCAQ,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../../Formats');\r\nvar MapData = require('../../mapdata/MapData');\r\nvar ParseTileLayers = require('./ParseTileLayers');\r\nvar ParseTilesets = require('./ParseTilesets');\r\n\r\n/**\r\n * Parses a Weltmeister JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Impact.ParseWeltmeister\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Weltmeister JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?object} [description]\r\n */\r\nvar ParseWeltmeister = function (name, json, insertNull)\r\n{\r\n    if (json.layer.length === 0)\r\n    {\r\n        console.warn('No layers found in the Weltmeister map: ' + name);\r\n        return null;\r\n    }\r\n\r\n    var width = 0;\r\n    var height = 0;\r\n\r\n    for (var i = 0; i < json.layer.length; i++)\r\n    {\r\n        if (json.layer[i].width > width) { width = json.layer[i].width; }\r\n        if (json.layer[i].height > height) { height = json.layer[i].height; }\r\n    }\r\n\r\n    var mapData = new MapData({\r\n        width: width,\r\n        height: height,\r\n        name: name,\r\n        tileWidth: json.layer[0].tilesize,\r\n        tileHeight: json.layer[0].tilesize,\r\n        format: Formats.WELTMEISTER\r\n    });\r\n\r\n    mapData.layers = ParseTileLayers(json, insertNull);\r\n    mapData.tilesets = ParseTilesets(json);\r\n\r\n    return mapData;\r\n};\r\n\r\nmodule.exports = ParseWeltmeister;\r\n"]},"metadata":{},"sourceType":"script"}