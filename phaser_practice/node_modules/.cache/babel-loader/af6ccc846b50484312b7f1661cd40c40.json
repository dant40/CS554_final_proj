{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar Color = require('../../display/color/Color');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.Canvas\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\n\n\nvar CanvasSnapshot = function (canvas, config) {\n  var callback = GetFastValue(config, 'callback');\n  var type = GetFastValue(config, 'type', 'image/png');\n  var encoderOptions = GetFastValue(config, 'encoder', 0.92);\n  var x = Math.abs(Math.round(GetFastValue(config, 'x', 0)));\n  var y = Math.abs(Math.round(GetFastValue(config, 'y', 0)));\n  var width = GetFastValue(config, 'width', canvas.width);\n  var height = GetFastValue(config, 'height', canvas.height);\n  var getPixel = GetFastValue(config, 'getPixel', false);\n\n  if (getPixel) {\n    var context = canvas.getContext('2d');\n    var imageData = context.getImageData(x, y, 1, 1);\n    var data = imageData.data;\n    callback.call(null, new Color(data[0], data[1], data[2], data[3] / 255));\n  } else if (x !== 0 || y !== 0 || width !== canvas.width || height !== canvas.height) {\n    //  Area Grab\n    var copyCanvas = CanvasPool.createWebGL(this, width, height);\n    var ctx = copyCanvas.getContext('2d');\n    ctx.drawImage(canvas, x, y, width, height, 0, 0, width, height);\n    var image1 = new Image();\n\n    image1.onerror = function () {\n      callback.call(null);\n      CanvasPool.remove(copyCanvas);\n    };\n\n    image1.onload = function () {\n      callback.call(null, image1);\n      CanvasPool.remove(copyCanvas);\n    };\n\n    image1.src = copyCanvas.toDataURL(type, encoderOptions);\n  } else {\n    //  Full Grab\n    var image2 = new Image();\n\n    image2.onerror = function () {\n      callback.call(null);\n    };\n\n    image2.onload = function () {\n      callback.call(null, image2);\n    };\n\n    image2.src = canvas.toDataURL(type, encoderOptions);\n  }\n};\n\nmodule.exports = CanvasSnapshot;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/snapshot/CanvasSnapshot.js"],"names":["CanvasPool","require","Color","GetFastValue","CanvasSnapshot","canvas","config","callback","type","encoderOptions","x","Math","abs","round","y","width","height","getPixel","context","getContext","imageData","getImageData","data","call","copyCanvas","createWebGL","ctx","drawImage","image1","Image","onerror","remove","onload","src","toDataURL","image2","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar Color = require('../../display/color/Color');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Takes a snapshot of an area from the current frame displayed by a canvas.\r\n * \r\n * This is then copied to an Image object. When this loads, the results are sent\r\n * to the callback provided in the Snapshot Configuration object.\r\n *\r\n * @function Phaser.Renderer.Snapshot.Canvas\r\n * @since 3.0.0\r\n *\r\n * @param {HTMLCanvasElement} sourceCanvas - The canvas to take a snapshot of.\r\n * @param {Phaser.Types.Renderer.Snapshot.SnapshotState} config - The snapshot configuration object.\r\n */\r\nvar CanvasSnapshot = function (canvas, config)\r\n{\r\n    var callback = GetFastValue(config, 'callback');\r\n    var type = GetFastValue(config, 'type', 'image/png');\r\n    var encoderOptions = GetFastValue(config, 'encoder', 0.92);\r\n    var x = Math.abs(Math.round(GetFastValue(config, 'x', 0)));\r\n    var y = Math.abs(Math.round(GetFastValue(config, 'y', 0)));\r\n    var width = GetFastValue(config, 'width', canvas.width);\r\n    var height = GetFastValue(config, 'height', canvas.height);\r\n    var getPixel = GetFastValue(config, 'getPixel', false);\r\n\r\n    if (getPixel)\r\n    {\r\n        var context = canvas.getContext('2d');\r\n        var imageData = context.getImageData(x, y, 1, 1);\r\n        var data = imageData.data;\r\n\r\n        callback.call(null, new Color(data[0], data[1], data[2], data[3] / 255));\r\n    }\r\n    else if (x !== 0 || y !== 0 || width !== canvas.width || height !== canvas.height)\r\n    {\r\n        //  Area Grab\r\n        var copyCanvas = CanvasPool.createWebGL(this, width, height);\r\n        var ctx = copyCanvas.getContext('2d');\r\n\r\n        ctx.drawImage(canvas, x, y, width, height, 0, 0, width, height);\r\n\r\n        var image1 = new Image();\r\n    \r\n        image1.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n\r\n            CanvasPool.remove(copyCanvas);\r\n        };\r\n\r\n        image1.onload = function ()\r\n        {\r\n            callback.call(null, image1);\r\n\r\n            CanvasPool.remove(copyCanvas);\r\n        };\r\n\r\n        image1.src = copyCanvas.toDataURL(type, encoderOptions);\r\n    }\r\n    else\r\n    {\r\n        //  Full Grab\r\n        var image2 = new Image();\r\n    \r\n        image2.onerror = function ()\r\n        {\r\n            callback.call(null);\r\n        };\r\n\r\n        image2.onload = function ()\r\n        {\r\n            callback.call(null, image2);\r\n        };\r\n\r\n        image2.src = canvas.toDataURL(type, encoderOptions);\r\n    }\r\n};\r\n\r\nmodule.exports = CanvasSnapshot;\r\n"]},"metadata":{},"sourceType":"script"}