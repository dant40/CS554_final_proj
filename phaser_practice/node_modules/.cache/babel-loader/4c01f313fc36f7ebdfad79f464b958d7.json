{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar LineToCircle = require('./LineToCircle');\n/**\r\n * Checks for intersection between the line segment and circle,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetLineToCircle = function (line, circle, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (LineToCircle(line, circle)) {\n    var lx1 = line.x1;\n    var ly1 = line.y1;\n    var lx2 = line.x2;\n    var ly2 = line.y2;\n    var cx = circle.x;\n    var cy = circle.y;\n    var cr = circle.radius;\n    var lDirX = lx2 - lx1;\n    var lDirY = ly2 - ly1;\n    var oDirX = lx1 - cx;\n    var oDirY = ly1 - cy;\n    var coefficientA = lDirX * lDirX + lDirY * lDirY;\n    var coefficientB = 2 * (lDirX * oDirX + lDirY * oDirY);\n    var coefficientC = oDirX * oDirX + oDirY * oDirY - cr * cr;\n    var lambda = coefficientB * coefficientB - 4 * coefficientA * coefficientC;\n    var x, y;\n\n    if (lambda === 0) {\n      var root = -coefficientB / (2 * coefficientA);\n      x = lx1 + root * lDirX;\n      y = ly1 + root * lDirY;\n\n      if (root >= 0 && root <= 1) {\n        out.push(new Point(x, y));\n      }\n    } else if (lambda > 0) {\n      var root1 = (-coefficientB - Math.sqrt(lambda)) / (2 * coefficientA);\n      x = lx1 + root1 * lDirX;\n      y = ly1 + root1 * lDirY;\n\n      if (root1 >= 0 && root1 <= 1) {\n        out.push(new Point(x, y));\n      }\n\n      var root2 = (-coefficientB + Math.sqrt(lambda)) / (2 * coefficientA);\n      x = lx1 + root2 * lDirX;\n      y = ly1 + root2 * lDirY;\n\n      if (root2 >= 0 && root2 <= 1) {\n        out.push(new Point(x, y));\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetLineToCircle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetLineToCircle.js"],"names":["Point","require","LineToCircle","GetLineToCircle","line","circle","out","undefined","lx1","x1","ly1","y1","lx2","x2","ly2","y2","cx","x","cy","y","cr","radius","lDirX","lDirY","oDirX","oDirY","coefficientA","coefficientB","coefficientC","lambda","root","push","root1","Math","sqrt","root2","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar LineToCircle = require('./LineToCircle');\r\n\r\n/**\r\n * Checks for intersection between the line segment and circle,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetLineToCircle = function (line, circle, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (LineToCircle(line, circle))\r\n    {\r\n        var lx1 = line.x1;\r\n        var ly1 = line.y1;\r\n\r\n        var lx2 = line.x2;\r\n        var ly2 = line.y2;\r\n\r\n        var cx = circle.x;\r\n        var cy = circle.y;\r\n        var cr = circle.radius;\r\n\r\n        var lDirX = lx2 - lx1;\r\n        var lDirY = ly2 - ly1;\r\n        var oDirX = lx1 - cx;\r\n        var oDirY = ly1 - cy;\r\n\r\n        var coefficientA = lDirX * lDirX + lDirY * lDirY;\r\n        var coefficientB = 2 * (lDirX * oDirX + lDirY * oDirY);\r\n        var coefficientC = oDirX * oDirX + oDirY * oDirY - cr * cr;\r\n\r\n        var lambda = (coefficientB * coefficientB) - (4 * coefficientA * coefficientC);\r\n\r\n        var x, y;\r\n\r\n        if (lambda === 0)\r\n        {\r\n            var root = -coefficientB / (2 * coefficientA);\r\n            x = lx1 + root * lDirX;\r\n            y = ly1 + root * lDirY;\r\n            if (root >= 0 && root <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n        }\r\n        else if (lambda > 0)\r\n        {\r\n            var root1 = (-coefficientB - Math.sqrt(lambda)) / (2 * coefficientA);\r\n            x = lx1 + root1 * lDirX;\r\n            y = ly1 + root1 * lDirY;\r\n            if (root1 >= 0 && root1 <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n\r\n            var root2 = (-coefficientB + Math.sqrt(lambda)) / (2 * coefficientA);\r\n            x = lx1 + root2 * lDirX;\r\n            y = ly1 + root2 * lDirY;\r\n            if (root2 >= 0 && root2 <= 1)\r\n            {\r\n                out.push(new Point(x, y));\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetLineToCircle;\r\n"]},"metadata":{},"sourceType":"script"}