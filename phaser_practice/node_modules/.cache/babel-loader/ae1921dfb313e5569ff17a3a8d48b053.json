{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../../src/utils/Class');\n\nvar Vector3 = require('../../../src/math/Vector3'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class PerspectiveCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [fieldOfView=80] - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\n\nvar PerspectiveCamera = new Class({\n  Extends: Camera,\n  //  FOV is converted to radians automatically\n  initialize: function PerspectiveCamera(scene, fieldOfView, viewportWidth, viewportHeight) {\n    if (fieldOfView === undefined) {\n      fieldOfView = 80;\n    }\n\n    if (viewportWidth === undefined) {\n      viewportWidth = 0;\n    }\n\n    if (viewportHeight === undefined) {\n      viewportHeight = 0;\n    }\n\n    Camera.call(this, scene);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportWidth\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = viewportWidth;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportHeight\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = viewportHeight;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#fieldOfView\r\n     * @type {integer}\r\n     * @default 80\r\n     * @since 3.0.0\r\n     */\n\n    this.fieldOfView = fieldOfView * Math.PI / 180;\n    this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#setFOV\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  setFOV: function (value) {\n    this.fieldOfView = value * Math.PI / 180;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  update: function () {\n    var aspect = this.viewportWidth / this.viewportHeight; //  Create a perspective matrix for our camera\n\n    this.projection.perspective(this.fieldOfView, aspect, Math.abs(this.near), Math.abs(this.far)); //  Build the view matrix\n\n    tmpVec3.copy(this.position).add(this.direction);\n    this.view.lookAt(this.position, tmpVec3, this.up); //  Projection * view matrix\n\n    this.combined.copy(this.projection).multiply(this.view); //  Invert combined matrix, used for unproject\n\n    this.invProjectionView.copy(this.combined).invert();\n    this.billboardMatrixDirty = true;\n    this.updateChildren();\n    return this;\n  }\n});\nmodule.exports = PerspectiveCamera;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/camera3d/src/PerspectiveCamera.js"],"names":["Camera","require","Class","Vector3","tmpVec3","PerspectiveCamera","Extends","initialize","scene","fieldOfView","viewportWidth","viewportHeight","undefined","call","Math","PI","update","setFOV","value","aspect","projection","perspective","abs","near","far","copy","position","add","direction","view","lookAt","up","combined","multiply","invProjectionView","invert","billboardMatrixDirty","updateChildren","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,2BAAD,CAArB,C,CAEA;;;AACA,IAAIG,OAAO,GAAG,IAAID,OAAJ,EAAd;AAEA;;;;;;;;;;;;;;;;AAeA,IAAIE,iBAAiB,GAAG,IAAIH,KAAJ,CAAU;AAE9BI,EAAAA,OAAO,EAAEN,MAFqB;AAI9B;AACAO,EAAAA,UAAU,EAEV,SAASF,iBAAT,CAA4BG,KAA5B,EAAmCC,WAAnC,EAAgDC,aAAhD,EAA+DC,cAA/D,EACA;AACI,QAAIF,WAAW,KAAKG,SAApB,EAA+B;AAAEH,MAAAA,WAAW,GAAG,EAAd;AAAmB;;AACpD,QAAIC,aAAa,KAAKE,SAAtB,EAAiC;AAAEF,MAAAA,aAAa,GAAG,CAAhB;AAAoB;;AACvD,QAAIC,cAAc,KAAKC,SAAvB,EAAkC;AAAED,MAAAA,cAAc,GAAG,CAAjB;AAAqB;;AAEzDX,IAAAA,MAAM,CAACa,IAAP,CAAY,IAAZ,EAAkBL,KAAlB;AAEA;;;;;;;;;AAQA,SAAKE,aAAL,GAAqBA,aAArB;AAEA;;;;;;;;;AAQA,SAAKC,cAAL,GAAsBA,cAAtB;AAEA;;;;;;;;;AAQA,SAAKF,WAAL,GAAmBA,WAAW,GAAGK,IAAI,CAACC,EAAnB,GAAwB,GAA3C;AAEA,SAAKC,MAAL;AACH,GA9C6B;;AAgD9B;;;;;;;;;;AAUAC,EAAAA,MAAM,EAAE,UAAUC,KAAV,EACR;AACI,SAAKT,WAAL,GAAmBS,KAAK,GAAGJ,IAAI,CAACC,EAAb,GAAkB,GAArC;AAEA,WAAO,IAAP;AACH,GA/D6B;;AAiE9B;;;;;;;;AAQAC,EAAAA,MAAM,EAAE,YACR;AACI,QAAIG,MAAM,GAAG,KAAKT,aAAL,GAAqB,KAAKC,cAAvC,CADJ,CAGI;;AACA,SAAKS,UAAL,CAAgBC,WAAhB,CACI,KAAKZ,WADT,EAEIU,MAFJ,EAGIL,IAAI,CAACQ,GAAL,CAAS,KAAKC,IAAd,CAHJ,EAIIT,IAAI,CAACQ,GAAL,CAAS,KAAKE,GAAd,CAJJ,EAJJ,CAWI;;AACApB,IAAAA,OAAO,CAACqB,IAAR,CAAa,KAAKC,QAAlB,EAA4BC,GAA5B,CAAgC,KAAKC,SAArC;AAEA,SAAKC,IAAL,CAAUC,MAAV,CAAiB,KAAKJ,QAAtB,EAAgCtB,OAAhC,EAAyC,KAAK2B,EAA9C,EAdJ,CAgBI;;AACA,SAAKC,QAAL,CAAcP,IAAd,CAAmB,KAAKL,UAAxB,EAAoCa,QAApC,CAA6C,KAAKJ,IAAlD,EAjBJ,CAmBI;;AACA,SAAKK,iBAAL,CAAuBT,IAAvB,CAA4B,KAAKO,QAAjC,EAA2CG,MAA3C;AAEA,SAAKC,oBAAL,GAA4B,IAA5B;AAEA,SAAKC,cAAL;AAEA,WAAO,IAAP;AACH;AArG6B,CAAV,CAAxB;AAyGAC,MAAM,CAACC,OAAP,GAAiBlC,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../../src/utils/Class');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class PerspectiveCamera\r\n * @extends Phaser.Cameras.Sprite3D.Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n * @param {integer} [fieldOfView=80] - [description]\r\n * @param {integer} [viewportWidth=0] - [description]\r\n * @param {integer} [viewportHeight=0] - [description]\r\n */\r\nvar PerspectiveCamera = new Class({\r\n\r\n    Extends: Camera,\r\n\r\n    //  FOV is converted to radians automatically\r\n    initialize:\r\n\r\n    function PerspectiveCamera (scene, fieldOfView, viewportWidth, viewportHeight)\r\n    {\r\n        if (fieldOfView === undefined) { fieldOfView = 80; }\r\n        if (viewportWidth === undefined) { viewportWidth = 0; }\r\n        if (viewportHeight === undefined) { viewportHeight = 0; }\r\n\r\n        Camera.call(this, scene);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportWidth\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = viewportWidth;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#viewportHeight\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = viewportHeight;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.PerspectiveCamera#fieldOfView\r\n         * @type {integer}\r\n         * @default 80\r\n         * @since 3.0.0\r\n         */\r\n        this.fieldOfView = fieldOfView * Math.PI / 180;\r\n\r\n        this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#setFOV\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    setFOV: function (value)\r\n    {\r\n        this.fieldOfView = value * Math.PI / 180;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.PerspectiveCamera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    update: function ()\r\n    {\r\n        var aspect = this.viewportWidth / this.viewportHeight;\r\n\r\n        //  Create a perspective matrix for our camera\r\n        this.projection.perspective(\r\n            this.fieldOfView,\r\n            aspect,\r\n            Math.abs(this.near),\r\n            Math.abs(this.far)\r\n        );\r\n\r\n        //  Build the view matrix\r\n        tmpVec3.copy(this.position).add(this.direction);\r\n\r\n        this.view.lookAt(this.position, tmpVec3, this.up);\r\n\r\n        //  Projection * view matrix\r\n        this.combined.copy(this.projection).multiply(this.view);\r\n\r\n        //  Invert combined matrix, used for unproject\r\n        this.invProjectionView.copy(this.combined).invert();\r\n\r\n        this.billboardMatrixDirty = true;\r\n\r\n        this.updateChildren();\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = PerspectiveCamera;\r\n"]},"metadata":{},"sourceType":"script"}