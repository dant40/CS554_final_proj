{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Vector2 = require('./Vector2');\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\n\n\nvar TransformXY = function (x, y, positionX, positionY, rotation, scaleX, scaleY, output) {\n  if (output === undefined) {\n    output = new Vector2();\n  }\n\n  var radianSin = Math.sin(rotation);\n  var radianCos = Math.cos(rotation); // Rotate and Scale\n\n  var a = radianCos * scaleX;\n  var b = radianSin * scaleX;\n  var c = -radianSin * scaleY;\n  var d = radianCos * scaleY; //  Invert\n\n  var id = 1 / (a * d + c * -b);\n  output.x = d * id * x + -c * id * y + (positionY * c - positionX * d) * id;\n  output.y = a * id * y + -b * id * x + (-positionY * a + positionX * b) * id;\n  return output;\n};\n\nmodule.exports = TransformXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/TransformXY.js"],"names":["Vector2","require","TransformXY","x","y","positionX","positionY","rotation","scaleX","scaleY","output","undefined","radianSin","Math","sin","radianCos","cos","a","b","c","d","id","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,WAAW,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,EAAgDC,MAAhD,EAAwDC,MAAxD,EAAgEC,MAAhE,EAClB;AACI,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AAAED,IAAAA,MAAM,GAAG,IAAIV,OAAJ,EAAT;AAAyB;;AAErD,MAAIY,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASP,QAAT,CAAhB;AACA,MAAIQ,SAAS,GAAGF,IAAI,CAACG,GAAL,CAAST,QAAT,CAAhB,CAJJ,CAMI;;AACA,MAAIU,CAAC,GAAGF,SAAS,GAAGP,MAApB;AACA,MAAIU,CAAC,GAAGN,SAAS,GAAGJ,MAApB;AACA,MAAIW,CAAC,GAAG,CAACP,SAAD,GAAaH,MAArB;AACA,MAAIW,CAAC,GAAGL,SAAS,GAAGN,MAApB,CAVJ,CAYI;;AACA,MAAIY,EAAE,GAAG,KAAMJ,CAAC,GAAGG,CAAL,GAAWD,CAAC,GAAG,CAACD,CAArB,CAAT;AAEAR,EAAAA,MAAM,CAACP,CAAP,GAAYiB,CAAC,GAAGC,EAAJ,GAASlB,CAAV,GAAgB,CAACgB,CAAD,GAAKE,EAAL,GAAUjB,CAA1B,GAAgC,CAAEE,SAAS,GAAGa,CAAb,GAAmBd,SAAS,GAAGe,CAAhC,IAAsCC,EAAjF;AACAX,EAAAA,MAAM,CAACN,CAAP,GAAYa,CAAC,GAAGI,EAAJ,GAASjB,CAAV,GAAgB,CAACc,CAAD,GAAKG,EAAL,GAAUlB,CAA1B,GAAgC,CAAE,CAACG,SAAD,GAAaW,CAAd,GAAoBZ,SAAS,GAAGa,CAAjC,IAAuCG,EAAlF;AAEA,SAAOX,MAAP;AACH,CApBD;;AAsBAY,MAAM,CAACC,OAAP,GAAiBrB,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector2 = require('./Vector2');\r\n\r\n/**\r\n * Takes the `x` and `y` coordinates and transforms them into the same space as\r\n * defined by the position, rotation and scale values.\r\n *\r\n * @function Phaser.Math.TransformXY\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The x coordinate to be transformed.\r\n * @param {number} y - The y coordinate to be transformed.\r\n * @param {number} positionX - Horizontal position of the transform point.\r\n * @param {number} positionY - Vertical position of the transform point.\r\n * @param {number} rotation - Rotation of the transform point, in radians.\r\n * @param {number} scaleX - Horizontal scale of the transform point.\r\n * @param {number} scaleY - Vertical scale of the transform point.\r\n * @param {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} [output] - The output vector, point or object for the translated coordinates.\r\n *\r\n * @return {(Phaser.Math.Vector2|Phaser.Geom.Point|object)} The translated point.\r\n */\r\nvar TransformXY = function (x, y, positionX, positionY, rotation, scaleX, scaleY, output)\r\n{\r\n    if (output === undefined) { output = new Vector2(); }\r\n\r\n    var radianSin = Math.sin(rotation);\r\n    var radianCos = Math.cos(rotation);\r\n\r\n    // Rotate and Scale\r\n    var a = radianCos * scaleX;\r\n    var b = radianSin * scaleX;\r\n    var c = -radianSin * scaleY;\r\n    var d = radianCos * scaleY;\r\n\r\n    //  Invert\r\n    var id = 1 / ((a * d) + (c * -b));\r\n\r\n    output.x = (d * id * x) + (-c * id * y) + (((positionY * c) - (positionX * d)) * id);\r\n    output.y = (a * id * y) + (-b * id * x) + (((-positionY * a) + (positionX * b)) * id);\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = TransformXY;\r\n"]},"metadata":{},"sourceType":"script"}