{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @callback EachSetCallback<E>\r\n *\r\n * @param {E} entry - The Set entry.\r\n * @param {number} index - The index of the entry within the Set.\r\n *\r\n * @return {?boolean} The callback result.\r\n */\n\n/**\r\n * @classdesc\r\n * A Set is a collection of unique elements.\r\n *\r\n * @class Set\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[]} - [elements]\r\n *\r\n * @param {Array.<*>} [elements] - An optional array of elements to insert into this Set.\r\n */\n\n\nvar Set = new Class({\n  initialize: function Set(elements) {\n    /**\r\n     * The entries of this Set. Stored internally as an array.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.Set#entries\r\n     * @type {Array.<*>}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n    this.entries = [];\n\n    if (Array.isArray(elements)) {\n      for (var i = 0; i < elements.length; i++) {\n        this.set(elements[i]);\n      }\n    }\n  },\n\n  /**\r\n   * Inserts the provided value into this Set. If the value is already contained in this Set this method will have no effect.\r\n   *\r\n   * @method Phaser.Structs.Set#set\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {*} value - The value to insert into this Set.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  set: function (value) {\n    if (this.entries.indexOf(value) === -1) {\n      this.entries.push(value);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Get an element of this Set which has a property of the specified name, if that property is equal to the specified value.\r\n   * If no elements of this Set satisfy the condition then this method will return `null`.\r\n   *\r\n   * @method Phaser.Structs.Set#get\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value,$return]\r\n   *\r\n   * @param {string} property - The property name to check on the elements of this Set.\r\n   * @param {*} value - The value to check for.\r\n   *\r\n   * @return {*} The first element of this Set that meets the required condition, or `null` if this Set contains no elements that meet the condition.\r\n   */\n  get: function (property, value) {\n    for (var i = 0; i < this.entries.length; i++) {\n      var entry = this.entries[i];\n\n      if (entry[property] === value) {\n        return entry;\n      }\n    }\n  },\n\n  /**\r\n   * Returns an array containing all the values in this Set.\r\n   *\r\n   * @method Phaser.Structs.Set#getArray\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} An array containing all the values in this Set.\r\n   */\n  getArray: function () {\n    return this.entries.slice(0);\n  },\n\n  /**\r\n   * Removes the given value from this Set if this Set contains that value.\r\n   *\r\n   * @method Phaser.Structs.Set#delete\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {*} value - The value to remove from the Set.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  delete: function (value) {\n    var index = this.entries.indexOf(value);\n\n    if (index > -1) {\n      this.entries.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Dumps the contents of this Set to the console via `console.group`.\r\n   *\r\n   * @method Phaser.Structs.Set#dump\r\n   * @since 3.0.0\r\n   */\n  dump: function () {\n    // eslint-disable-next-line no-console\n    console.group('Set');\n\n    for (var i = 0; i < this.entries.length; i++) {\n      var entry = this.entries[i];\n      console.log(entry);\n    } // eslint-disable-next-line no-console\n\n\n    console.groupEnd();\n  },\n\n  /**\r\n   * Passes each value in this Set to the given callback.\r\n   * Use this function when you know this Set will be modified during the iteration, otherwise use `iterate`.\r\n   *\r\n   * @method Phaser.Structs.Set#each\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachSetCallback.<T>} - [callback]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n   * @param {*} [callbackScope] - The scope of the callback.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  each: function (callback, callbackScope) {\n    var i;\n    var temp = this.entries.slice();\n    var len = temp.length;\n\n    if (callbackScope) {\n      for (i = 0; i < len; i++) {\n        if (callback.call(callbackScope, temp[i], i) === false) {\n          break;\n        }\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        if (callback(temp[i], i) === false) {\n          break;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Passes each value in this Set to the given callback.\r\n   * For when you absolutely know this Set won't be modified during the iteration.\r\n   *\r\n   * @method Phaser.Structs.Set#iterate\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {EachSetCallback.<T>} - [callback]\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n   * @param {*} [callbackScope] - The scope of the callback.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  iterate: function (callback, callbackScope) {\n    var i;\n    var len = this.entries.length;\n\n    if (callbackScope) {\n      for (i = 0; i < len; i++) {\n        if (callback.call(callbackScope, this.entries[i], i) === false) {\n          break;\n        }\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        if (callback(this.entries[i], i) === false) {\n          break;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Goes through each entry in this Set and invokes the given function on them, passing in the arguments.\r\n   *\r\n   * @method Phaser.Structs.Set#iterateLocal\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @param {string} callbackKey - The key of the function to be invoked on each Set entry.\r\n   * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  iterateLocal: function (callbackKey) {\n    var i;\n    var args = [];\n\n    for (i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var len = this.entries.length;\n\n    for (i = 0; i < len; i++) {\n      var entry = this.entries[i];\n      entry[callbackKey].apply(entry, args);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Clears this Set so that it no longer contains any values.\r\n   *\r\n   * @method Phaser.Structs.Set#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n   *\r\n   * @return {Phaser.Structs.Set} This Set object.\r\n   */\n  clear: function () {\n    this.entries.length = 0;\n    return this;\n  },\n\n  /**\r\n   * Returns `true` if this Set contains the given value, otherwise returns `false`.\r\n   *\r\n   * @method Phaser.Structs.Set#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [value]\r\n   *\r\n   * @param {*} value - The value to check for in this Set.\r\n   *\r\n   * @return {boolean} `true` if the given value was found in this Set, otherwise `false`.\r\n   */\n  contains: function (value) {\n    return this.entries.indexOf(value) > -1;\n  },\n\n  /**\r\n   * Returns a new Set containing all values that are either in this Set or in the Set provided as an argument.\r\n   *\r\n   * @method Phaser.Structs.Set#union\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to perform the union with.\r\n   *\r\n   * @return {Phaser.Structs.Set} A new Set containing all the values in this Set and the Set provided as an argument.\r\n   */\n  union: function (set) {\n    var newSet = new Set();\n    set.entries.forEach(function (value) {\n      newSet.set(value);\n    });\n    this.entries.forEach(function (value) {\n      newSet.set(value);\n    });\n    return newSet;\n  },\n\n  /**\r\n   * Returns a new Set that contains only the values which are in this Set and that are also in the given Set.\r\n   *\r\n   * @method Phaser.Structs.Set#intersect\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to intersect this set with.\r\n   *\r\n   * @return {Phaser.Structs.Set} The result of the intersection, as a new Set.\r\n   */\n  intersect: function (set) {\n    var newSet = new Set();\n    this.entries.forEach(function (value) {\n      if (set.contains(value)) {\n        newSet.set(value);\n      }\n    });\n    return newSet;\n  },\n\n  /**\r\n   * Returns a new Set containing all the values in this Set which are *not* also in the given Set.\r\n   *\r\n   * @method Phaser.Structs.Set#difference\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n   *\r\n   * @param {Phaser.Structs.Set} set - The Set to perform the difference with.\r\n   *\r\n   * @return {Phaser.Structs.Set} A new Set containing all the values in this Set that are not also in the Set provided as an argument to this method.\r\n   */\n  difference: function (set) {\n    var newSet = new Set();\n    this.entries.forEach(function (value) {\n      if (!set.contains(value)) {\n        newSet.set(value);\n      }\n    });\n    return newSet;\n  },\n\n  /**\r\n   * The size of this Set. This is the number of entries within it.\r\n   * Changing the size will truncate the Set if the given value is smaller than the current size.\r\n   * Increasing the size larger than the current size has no effect.\r\n   *\r\n   * @name Phaser.Structs.Set#size\r\n   * @type {integer}\r\n   * @since 3.0.0\r\n   */\n  size: {\n    get: function () {\n      return this.entries.length;\n    },\n    set: function (value) {\n      if (value < this.entries.length) {\n        return this.entries.length = value;\n      } else {\n        return this.entries.length;\n      }\n    }\n  }\n});\nmodule.exports = Set;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/structs/Set.js"],"names":["Class","require","Set","initialize","elements","entries","Array","isArray","i","length","set","value","indexOf","push","get","property","entry","getArray","slice","delete","index","splice","dump","console","group","log","groupEnd","each","callback","callbackScope","temp","len","call","iterate","iterateLocal","callbackKey","args","arguments","apply","clear","contains","union","newSet","forEach","intersect","difference","size","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @callback EachSetCallback<E>\r\n *\r\n * @param {E} entry - The Set entry.\r\n * @param {number} index - The index of the entry within the Set.\r\n *\r\n * @return {?boolean} The callback result.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A Set is a collection of unique elements.\r\n *\r\n * @class Set\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[]} - [elements]\r\n *\r\n * @param {Array.<*>} [elements] - An optional array of elements to insert into this Set.\r\n */\r\nvar Set = new Class({\r\n\r\n    initialize:\r\n\r\n    function Set (elements)\r\n    {\r\n        /**\r\n         * The entries of this Set. Stored internally as an array.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.Set#entries\r\n         * @type {Array.<*>}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.entries = [];\r\n\r\n        if (Array.isArray(elements))\r\n        {\r\n            for (var i = 0; i < elements.length; i++)\r\n            {\r\n                this.set(elements[i]);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Inserts the provided value into this Set. If the value is already contained in this Set this method will have no effect.\r\n     *\r\n     * @method Phaser.Structs.Set#set\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @param {*} value - The value to insert into this Set.\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    set: function (value)\r\n    {\r\n        if (this.entries.indexOf(value) === -1)\r\n        {\r\n            this.entries.push(value);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Get an element of this Set which has a property of the specified name, if that property is equal to the specified value.\r\n     * If no elements of this Set satisfy the condition then this method will return `null`.\r\n     *\r\n     * @method Phaser.Structs.Set#get\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value,$return]\r\n     *\r\n     * @param {string} property - The property name to check on the elements of this Set.\r\n     * @param {*} value - The value to check for.\r\n     *\r\n     * @return {*} The first element of this Set that meets the required condition, or `null` if this Set contains no elements that meet the condition.\r\n     */\r\n    get: function (property, value)\r\n    {\r\n        for (var i = 0; i < this.entries.length; i++)\r\n        {\r\n            var entry = this.entries[i];\r\n\r\n            if (entry[property] === value)\r\n            {\r\n                return entry;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array containing all the values in this Set.\r\n     *\r\n     * @method Phaser.Structs.Set#getArray\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} An array containing all the values in this Set.\r\n     */\r\n    getArray: function ()\r\n    {\r\n        return this.entries.slice(0);\r\n    },\r\n\r\n    /**\r\n     * Removes the given value from this Set if this Set contains that value.\r\n     *\r\n     * @method Phaser.Structs.Set#delete\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @param {*} value - The value to remove from the Set.\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    delete: function (value)\r\n    {\r\n        var index = this.entries.indexOf(value);\r\n\r\n        if (index > -1)\r\n        {\r\n            this.entries.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Dumps the contents of this Set to the console via `console.group`.\r\n     *\r\n     * @method Phaser.Structs.Set#dump\r\n     * @since 3.0.0\r\n     */\r\n    dump: function ()\r\n    {\r\n        // eslint-disable-next-line no-console\r\n        console.group('Set');\r\n\r\n        for (var i = 0; i < this.entries.length; i++)\r\n        {\r\n            var entry = this.entries[i];\r\n            console.log(entry);\r\n        }\r\n\r\n        // eslint-disable-next-line no-console\r\n        console.groupEnd();\r\n    },\r\n\r\n    /**\r\n     * Passes each value in this Set to the given callback.\r\n     * Use this function when you know this Set will be modified during the iteration, otherwise use `iterate`.\r\n     *\r\n     * @method Phaser.Structs.Set#each\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {EachSetCallback.<T>} - [callback]\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n     * @param {*} [callbackScope] - The scope of the callback.\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    each: function (callback, callbackScope)\r\n    {\r\n        var i;\r\n        var temp = this.entries.slice();\r\n        var len = temp.length;\r\n\r\n        if (callbackScope)\r\n        {\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                if (callback.call(callbackScope, temp[i], i) === false)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                if (callback(temp[i], i) === false)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes each value in this Set to the given callback.\r\n     * For when you absolutely know this Set won't be modified during the iteration.\r\n     *\r\n     * @method Phaser.Structs.Set#iterate\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {EachSetCallback.<T>} - [callback]\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @param {EachSetCallback} callback - The callback to be invoked and passed each value this Set contains.\r\n     * @param {*} [callbackScope] - The scope of the callback.\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    iterate: function (callback, callbackScope)\r\n    {\r\n        var i;\r\n        var len = this.entries.length;\r\n\r\n        if (callbackScope)\r\n        {\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                if (callback.call(callbackScope, this.entries[i], i) === false)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = 0; i < len; i++)\r\n            {\r\n                if (callback(this.entries[i], i) === false)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Goes through each entry in this Set and invokes the given function on them, passing in the arguments.\r\n     *\r\n     * @method Phaser.Structs.Set#iterateLocal\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @param {string} callbackKey - The key of the function to be invoked on each Set entry.\r\n     * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    iterateLocal: function (callbackKey)\r\n    {\r\n        var i;\r\n        var args = [];\r\n\r\n        for (i = 1; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        var len = this.entries.length;\r\n\r\n        for (i = 0; i < len; i++)\r\n        {\r\n            var entry = this.entries[i];\r\n\r\n            entry[callbackKey].apply(entry, args);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clears this Set so that it no longer contains any values.\r\n     *\r\n     * @method Phaser.Structs.Set#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [$return]\r\n     *\r\n     * @return {Phaser.Structs.Set} This Set object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        this.entries.length = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns `true` if this Set contains the given value, otherwise returns `false`.\r\n     *\r\n     * @method Phaser.Structs.Set#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [value]\r\n     *\r\n     * @param {*} value - The value to check for in this Set.\r\n     *\r\n     * @return {boolean} `true` if the given value was found in this Set, otherwise `false`.\r\n     */\r\n    contains: function (value)\r\n    {\r\n        return (this.entries.indexOf(value) > -1);\r\n    },\r\n\r\n    /**\r\n     * Returns a new Set containing all values that are either in this Set or in the Set provided as an argument.\r\n     *\r\n     * @method Phaser.Structs.Set#union\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n     *\r\n     * @param {Phaser.Structs.Set} set - The Set to perform the union with.\r\n     *\r\n     * @return {Phaser.Structs.Set} A new Set containing all the values in this Set and the Set provided as an argument.\r\n     */\r\n    union: function (set)\r\n    {\r\n        var newSet = new Set();\r\n\r\n        set.entries.forEach(function (value)\r\n        {\r\n            newSet.set(value);\r\n        });\r\n\r\n        this.entries.forEach(function (value)\r\n        {\r\n            newSet.set(value);\r\n        });\r\n\r\n        return newSet;\r\n    },\r\n\r\n    /**\r\n     * Returns a new Set that contains only the values which are in this Set and that are also in the given Set.\r\n     *\r\n     * @method Phaser.Structs.Set#intersect\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n     *\r\n     * @param {Phaser.Structs.Set} set - The Set to intersect this set with.\r\n     *\r\n     * @return {Phaser.Structs.Set} The result of the intersection, as a new Set.\r\n     */\r\n    intersect: function (set)\r\n    {\r\n        var newSet = new Set();\r\n\r\n        this.entries.forEach(function (value)\r\n        {\r\n            if (set.contains(value))\r\n            {\r\n                newSet.set(value);\r\n            }\r\n        });\r\n\r\n        return newSet;\r\n    },\r\n\r\n    /**\r\n     * Returns a new Set containing all the values in this Set which are *not* also in the given Set.\r\n     *\r\n     * @method Phaser.Structs.Set#difference\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {Phaser.Structs.Set.<T>} - [set,$return]\r\n     *\r\n     * @param {Phaser.Structs.Set} set - The Set to perform the difference with.\r\n     *\r\n     * @return {Phaser.Structs.Set} A new Set containing all the values in this Set that are not also in the Set provided as an argument to this method.\r\n     */\r\n    difference: function (set)\r\n    {\r\n        var newSet = new Set();\r\n\r\n        this.entries.forEach(function (value)\r\n        {\r\n            if (!set.contains(value))\r\n            {\r\n                newSet.set(value);\r\n            }\r\n        });\r\n\r\n        return newSet;\r\n    },\r\n\r\n    /**\r\n     * The size of this Set. This is the number of entries within it.\r\n     * Changing the size will truncate the Set if the given value is smaller than the current size.\r\n     * Increasing the size larger than the current size has no effect.\r\n     *\r\n     * @name Phaser.Structs.Set#size\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\r\n    size: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.entries.length;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value < this.entries.length)\r\n            {\r\n                return this.entries.length = value;\r\n            }\r\n            else\r\n            {\r\n                return this.entries.length;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Set;\r\n"]},"metadata":{},"sourceType":"script"}