{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Circle.\r\n *\r\n * @function Phaser.Geom.Circle.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\n\n\nvar Random = function (circle, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var t = 2 * Math.PI * Math.random();\n  var u = Math.random() + Math.random();\n  var r = u > 1 ? 2 - u : u;\n  var x = r * Math.cos(t);\n  var y = r * Math.sin(t);\n  out.x = circle.x + x * circle.radius;\n  out.y = circle.y + y * circle.radius;\n  return out;\n};\n\nmodule.exports = Random;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/circle/Random.js"],"names":["Point","require","Random","circle","out","undefined","t","Math","PI","random","u","r","x","cos","y","sin","radius","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,MAAM,GAAG,UAAUC,MAAV,EAAkBC,GAAlB,EACb;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7C,MAAIM,CAAC,GAAG,IAAIC,IAAI,CAACC,EAAT,GAAcD,IAAI,CAACE,MAAL,EAAtB;AACA,MAAIC,CAAC,GAAGH,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACE,MAAL,EAAxB;AACA,MAAIE,CAAC,GAAID,CAAC,GAAG,CAAL,GAAU,IAAIA,CAAd,GAAkBA,CAA1B;AACA,MAAIE,CAAC,GAAGD,CAAC,GAAGJ,IAAI,CAACM,GAAL,CAASP,CAAT,CAAZ;AACA,MAAIQ,CAAC,GAAGH,CAAC,GAAGJ,IAAI,CAACQ,GAAL,CAAST,CAAT,CAAZ;AAEAF,EAAAA,GAAG,CAACQ,CAAJ,GAAQT,MAAM,CAACS,CAAP,GAAYA,CAAC,GAAGT,MAAM,CAACa,MAA/B;AACAZ,EAAAA,GAAG,CAACU,CAAJ,GAAQX,MAAM,CAACW,CAAP,GAAYA,CAAC,GAAGX,MAAM,CAACa,MAA/B;AAEA,SAAOZ,GAAP;AACH,CAdD;;AAgBAa,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Circle.\r\n *\r\n * @function Phaser.Geom.Circle.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\r\nvar Random = function (circle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var t = 2 * Math.PI * Math.random();\r\n    var u = Math.random() + Math.random();\r\n    var r = (u > 1) ? 2 - u : u;\r\n    var x = r * Math.cos(t);\r\n    var y = r * Math.sin(t);\r\n\r\n    out.x = circle.x + (x * circle.radius);\r\n    out.y = circle.y + (y * circle.radius);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n"]},"metadata":{},"sourceType":"script"}