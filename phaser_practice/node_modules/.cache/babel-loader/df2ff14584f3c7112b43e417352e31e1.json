{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Compute a random position vector in a spherical area, optionally defined by the given radius.\r\n *\r\n * @function Phaser.Math.RandomXYZ\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec3 - The Vector to compute random values for.\r\n * @param {number} [radius=1] - The radius.\r\n *\r\n * @return {Phaser.Math.Vector3} The given Vector.\r\n */\nvar RandomXYZ = function (vec3, radius) {\n  if (radius === undefined) {\n    radius = 1;\n  }\n\n  var r = Math.random() * 2 * Math.PI;\n  var z = Math.random() * 2 - 1;\n  var zScale = Math.sqrt(1 - z * z) * radius;\n  vec3.x = Math.cos(r) * zScale;\n  vec3.y = Math.sin(r) * zScale;\n  vec3.z = z * radius;\n  return vec3;\n};\n\nmodule.exports = RandomXYZ;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/RandomXYZ.js"],"names":["RandomXYZ","vec3","radius","undefined","r","Math","random","PI","z","zScale","sqrt","x","cos","y","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,SAAS,GAAG,UAAUC,IAAV,EAAgBC,MAAhB,EAChB;AACI,MAAIA,MAAM,KAAKC,SAAf,EAA0B;AAAED,IAAAA,MAAM,GAAG,CAAT;AAAa;;AAEzC,MAAIE,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBD,IAAI,CAACE,EAAjC;AACA,MAAIC,CAAC,GAAIH,IAAI,CAACC,MAAL,KAAgB,CAAjB,GAAsB,CAA9B;AACA,MAAIG,MAAM,GAAGJ,IAAI,CAACK,IAAL,CAAU,IAAIF,CAAC,GAAGA,CAAlB,IAAuBN,MAApC;AAEAD,EAAAA,IAAI,CAACU,CAAL,GAASN,IAAI,CAACO,GAAL,CAASR,CAAT,IAAcK,MAAvB;AACAR,EAAAA,IAAI,CAACY,CAAL,GAASR,IAAI,CAACS,GAAL,CAASV,CAAT,IAAcK,MAAvB;AACAR,EAAAA,IAAI,CAACO,CAAL,GAASA,CAAC,GAAGN,MAAb;AAEA,SAAOD,IAAP;AACH,CAbD;;AAeAc,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random position vector in a spherical area, optionally defined by the given radius.\r\n *\r\n * @function Phaser.Math.RandomXYZ\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec3 - The Vector to compute random values for.\r\n * @param {number} [radius=1] - The radius.\r\n *\r\n * @return {Phaser.Math.Vector3} The given Vector.\r\n */\r\nvar RandomXYZ = function (vec3, radius)\r\n{\r\n    if (radius === undefined) { radius = 1; }\r\n\r\n    var r = Math.random() * 2 * Math.PI;\r\n    var z = (Math.random() * 2) - 1;\r\n    var zScale = Math.sqrt(1 - z * z) * radius;\r\n\r\n    vec3.x = Math.cos(r) * zScale;\r\n    vec3.y = Math.sin(r) * zScale;\r\n    vec3.z = z * radius;\r\n\r\n    return vec3;\r\n};\r\n\r\nmodule.exports = RandomXYZ;\r\n"]},"metadata":{},"sourceType":"script"}