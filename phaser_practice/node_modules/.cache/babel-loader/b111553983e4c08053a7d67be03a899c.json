{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n\nvar Vector3 = require('./Vector3');\n\nvar Matrix3 = require('./Matrix3');\n\nvar EPSILON = 0.000001; //  Some shared 'private' arrays\n\nvar siNext = new Int8Array([1, 2, 0]);\nvar tmp = new Float32Array([0, 0, 0]);\nvar xUnitVec3 = new Vector3(1, 0, 0);\nvar yUnitVec3 = new Vector3(0, 1, 0);\nvar tmpvec = new Vector3();\nvar tmpMat3 = new Matrix3();\n/**\r\n * @classdesc\r\n * A quaternion.\r\n *\r\n * @class Quaternion\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\n\nvar Quaternion = new Class({\n  initialize: function Quaternion(x, y, z, w) {\n    /**\r\n     * The x component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    /**\r\n     * The y component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    /**\r\n     * The z component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    /**\r\n     * The w component of this Quaternion.\r\n     *\r\n     * @name Phaser.Math.Quaternion#w\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n  },\n\n  /**\r\n   * Copy the components of a given Quaternion or Vector into this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} src - The Quaternion or Vector to copy the components from.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  copy: function (src) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z;\n    this.w = src.w;\n    return this;\n  },\n\n  /**\r\n   * Set the components of this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} [x=0] - The x component, or an object containing x, y, z, and w components.\r\n   * @param {number} [y=0] - The y component.\r\n   * @param {number} [z=0] - The z component.\r\n   * @param {number} [w=0] - The w component.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  set: function (x, y, z, w) {\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a given Quaternion or Vector to this Quaternion. Addition is component-wise.\r\n   *\r\n   * @method Phaser.Math.Quaternion#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to add to this Quaternion.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  add: function (v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n    this.w += v.w;\n    return this;\n  },\n\n  /**\r\n   * Subtract a given Quaternion or Vector from this Quaternion. Subtraction is component-wise.\r\n   *\r\n   * @method Phaser.Math.Quaternion#subtract\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to subtract from this Quaternion.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  subtract: function (v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n    this.w -= v.w;\n    return this;\n  },\n\n  /**\r\n   * Scale this Quaternion by the given value.\r\n   *\r\n   * @method Phaser.Math.Quaternion#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} scale - The value to scale this Quaternion by.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  scale: function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    this.w *= scale;\n    return this;\n  },\n\n  /**\r\n   * Calculate the length of this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#length\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Quaternion.\r\n   */\n  length: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  },\n\n  /**\r\n   * Calculate the length of this Quaternion squared.\r\n   *\r\n   * @method Phaser.Math.Quaternion#lengthSq\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Quaternion, squared.\r\n   */\n  lengthSq: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return x * x + y * y + z * z + w * w;\n  },\n\n  /**\r\n   * Normalize this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#normalize\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  normalize: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    var len = x * x + y * y + z * z + w * w;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      this.x = x * len;\n      this.y = y * len;\n      this.z = z * len;\n      this.w = w * len;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the dot product of this Quaternion and the given Quaternion or Vector.\r\n   *\r\n   * @method Phaser.Math.Quaternion#dot\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to dot product with this Quaternion.\r\n   *\r\n   * @return {number} The dot product of this Quaternion and the given Quaternion or Vector.\r\n   */\n  dot: function (v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  },\n\n  /**\r\n   * Linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n   *\r\n   * @method Phaser.Math.Quaternion#lerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to interpolate towards.\r\n   * @param {number} [t=0] - The percentage of interpolation.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  lerp: function (v, t) {\n    if (t === undefined) {\n      t = 0;\n    }\n\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    this.x = ax + t * (v.x - ax);\n    this.y = ay + t * (v.y - ay);\n    this.z = az + t * (v.z - az);\n    this.w = aw + t * (v.w - aw);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Math.Quaternion#rotationTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} a - [description]\r\n   * @param {Phaser.Math.Vector3} b - [description]\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  rotationTo: function (a, b) {\n    var dot = a.x * b.x + a.y * b.y + a.z * b.z;\n\n    if (dot < -0.999999) {\n      if (tmpvec.copy(xUnitVec3).cross(a).length() < EPSILON) {\n        tmpvec.copy(yUnitVec3).cross(a);\n      }\n\n      tmpvec.normalize();\n      return this.setAxisAngle(tmpvec, Math.PI);\n    } else if (dot > 0.999999) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 1;\n      return this;\n    } else {\n      tmpvec.copy(a).cross(b);\n      this.x = tmpvec.x;\n      this.y = tmpvec.y;\n      this.z = tmpvec.z;\n      this.w = 1 + dot;\n      return this.normalize();\n    }\n  },\n\n  /**\r\n   * Set the axes of this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#setAxes\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} view - The view axis.\r\n   * @param {Phaser.Math.Vector3} right - The right axis.\r\n   * @param {Phaser.Math.Vector3} up - The upwards axis.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  setAxes: function (view, right, up) {\n    var m = tmpMat3.val;\n    m[0] = right.x;\n    m[3] = right.y;\n    m[6] = right.z;\n    m[1] = up.x;\n    m[4] = up.y;\n    m[7] = up.z;\n    m[2] = -view.x;\n    m[5] = -view.y;\n    m[8] = -view.z;\n    return this.fromMat3(tmpMat3).normalize();\n  },\n\n  /**\r\n   * Reset this Matrix to an identity (default) Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#identity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  identity: function () {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 1;\n    return this;\n  },\n\n  /**\r\n   * Set the axis angle of this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#setAxisAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} axis - The axis.\r\n   * @param {number} rad - The angle in radians.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  setAxisAngle: function (axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    this.x = s * axis.x;\n    this.y = s * axis.y;\n    this.z = s * axis.z;\n    this.w = Math.cos(rad);\n    return this;\n  },\n\n  /**\r\n   * Multiply this Quaternion by the given Quaternion or Vector.\r\n   *\r\n   * @method Phaser.Math.Quaternion#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to multiply this Quaternion by.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  multiply: function (b) {\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    var bx = b.x;\n    var by = b.y;\n    var bz = b.z;\n    var bw = b.w;\n    this.x = ax * bw + aw * bx + ay * bz - az * by;\n    this.y = ay * bw + aw * by + az * bx - ax * bz;\n    this.z = az * bw + aw * bz + ax * by - ay * bx;\n    this.w = aw * bw - ax * bx - ay * by - az * bz;\n    return this;\n  },\n\n  /**\r\n   * Smoothly linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n   *\r\n   * @method Phaser.Math.Quaternion#slerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to interpolate towards.\r\n   * @param {number} t - The percentage of interpolation.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  slerp: function (b, t) {\n    // benchmarks: http://jsperf.com/quaternion-slerp-implementations\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    var bx = b.x;\n    var by = b.y;\n    var bz = b.z;\n    var bw = b.w; // calc cosine\n\n    var cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n\n\n    var scale0 = 1 - t;\n    var scale1 = t; // calculate coefficients\n\n    if (1 - cosom > EPSILON) {\n      // standard case (slerp)\n      var omega = Math.acos(cosom);\n      var sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } // calculate final values\n\n\n    this.x = scale0 * ax + scale1 * bx;\n    this.y = scale0 * ay + scale1 * by;\n    this.z = scale0 * az + scale1 * bz;\n    this.w = scale0 * aw + scale1 * bw;\n    return this;\n  },\n\n  /**\r\n   * Invert this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#invert\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  invert: function () {\n    var a0 = this.x;\n    var a1 = this.y;\n    var a2 = this.z;\n    var a3 = this.w;\n    var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    var invDot = dot ? 1 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    this.x = -a0 * invDot;\n    this.y = -a1 * invDot;\n    this.z = -a2 * invDot;\n    this.w = a3 * invDot;\n    return this;\n  },\n\n  /**\r\n   * Convert this Quaternion into its conjugate.\r\n   *\r\n   * Sets the x, y and z components.\r\n   *\r\n   * @method Phaser.Math.Quaternion#conjugate\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  conjugate: function () {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    return this;\n  },\n\n  /**\r\n   * Rotate this Quaternion on the X axis.\r\n   *\r\n   * @method Phaser.Math.Quaternion#rotateX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rad - The rotation angle in radians.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  rotateX: function (rad) {\n    rad *= 0.5;\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    var bx = Math.sin(rad);\n    var bw = Math.cos(rad);\n    this.x = ax * bw + aw * bx;\n    this.y = ay * bw + az * bx;\n    this.z = az * bw - ay * bx;\n    this.w = aw * bw - ax * bx;\n    return this;\n  },\n\n  /**\r\n   * Rotate this Quaternion on the Y axis.\r\n   *\r\n   * @method Phaser.Math.Quaternion#rotateY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rad - The rotation angle in radians.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  rotateY: function (rad) {\n    rad *= 0.5;\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    var by = Math.sin(rad);\n    var bw = Math.cos(rad);\n    this.x = ax * bw - az * by;\n    this.y = ay * bw + aw * by;\n    this.z = az * bw + ax * by;\n    this.w = aw * bw - ay * by;\n    return this;\n  },\n\n  /**\r\n   * Rotate this Quaternion on the Z axis.\r\n   *\r\n   * @method Phaser.Math.Quaternion#rotateZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rad - The rotation angle in radians.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  rotateZ: function (rad) {\n    rad *= 0.5;\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    var bz = Math.sin(rad);\n    var bw = Math.cos(rad);\n    this.x = ax * bw + ay * bz;\n    this.y = ay * bw - ax * bz;\n    this.z = az * bw + aw * bz;\n    this.w = aw * bw - az * bz;\n    return this;\n  },\n\n  /**\r\n   * Create a unit (or rotation) Quaternion from its x, y, and z components.\r\n   *\r\n   * Sets the w component.\r\n   *\r\n   * @method Phaser.Math.Quaternion#calculateW\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  calculateW: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    this.w = -Math.sqrt(1.0 - x * x - y * y - z * z);\n    return this;\n  },\n\n  /**\r\n   * Convert the given Matrix into this Quaternion.\r\n   *\r\n   * @method Phaser.Math.Quaternion#fromMat3\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} mat - The Matrix to convert from.\r\n   *\r\n   * @return {Phaser.Math.Quaternion} This Quaternion.\r\n   */\n  fromMat3: function (mat) {\n    // benchmarks:\n    //    http://jsperf.com/typed-array-access-speed\n    //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var m = mat.val;\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if (fTrace > 0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n      this.w = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n\n      this.x = (m[7] - m[5]) * fRoot;\n      this.y = (m[2] - m[6]) * fRoot;\n      this.z = (m[3] - m[1]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      var i = 0;\n\n      if (m[4] > m[0]) {\n        i = 1;\n      }\n\n      if (m[8] > m[i * 3 + i]) {\n        i = 2;\n      }\n\n      var j = siNext[i];\n      var k = siNext[j]; //  This isn't quite as clean without array access\n\n      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);\n      tmp[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      tmp[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n      tmp[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n      this.x = tmp[0];\n      this.y = tmp[1];\n      this.z = tmp[2];\n      this.w = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;\n    }\n\n    return this;\n  }\n});\nmodule.exports = Quaternion;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Quaternion.js"],"names":["Class","require","Vector3","Matrix3","EPSILON","siNext","Int8Array","tmp","Float32Array","xUnitVec3","yUnitVec3","tmpvec","tmpMat3","Quaternion","initialize","x","y","z","w","copy","src","set","add","v","subtract","scale","length","Math","sqrt","lengthSq","normalize","len","dot","lerp","t","undefined","ax","ay","az","aw","rotationTo","a","b","cross","setAxisAngle","PI","setAxes","view","right","up","m","val","fromMat3","identity","axis","rad","s","sin","cos","multiply","bx","by","bz","bw","slerp","cosom","scale0","scale1","omega","acos","sinom","invert","a0","a1","a2","a3","invDot","conjugate","rotateX","rotateY","rotateZ","calculateW","mat","fTrace","fRoot","i","j","k","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\nvar Vector3 = require('./Vector3');\r\nvar Matrix3 = require('./Matrix3');\r\n\r\nvar EPSILON = 0.000001;\r\n\r\n//  Some shared 'private' arrays\r\nvar siNext = new Int8Array([ 1, 2, 0 ]);\r\nvar tmp = new Float32Array([ 0, 0, 0 ]);\r\n\r\nvar xUnitVec3 = new Vector3(1, 0, 0);\r\nvar yUnitVec3 = new Vector3(0, 1, 0);\r\n\r\nvar tmpvec = new Vector3();\r\nvar tmpMat3 = new Matrix3();\r\n\r\n/**\r\n * @classdesc\r\n * A quaternion.\r\n *\r\n * @class Quaternion\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\r\nvar Quaternion = new Class({\r\n\r\n    initialize:\r\n\r\n    function Quaternion (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The y component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The z component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        /**\r\n         * The w component of this Quaternion.\r\n         *\r\n         * @name Phaser.Math.Quaternion#w\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Quaternion or Vector into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} src - The Quaternion or Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z;\r\n        this.w = src.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the components of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} [x=0] - The x component, or an object containing x, y, z, and w components.\r\n     * @param {number} [y=0] - The y component.\r\n     * @param {number} [z=0] - The z component.\r\n     * @param {number} [w=0] - The w component.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    set: function (x, y, z, w)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Quaternion or Vector to this Quaternion. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to add to this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z;\r\n        this.w += v.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract a given Quaternion or Vector from this Quaternion. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Quaternion#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to subtract from this Quaternion.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z;\r\n        this.w -= v.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Quaternion by the given value.\r\n     *\r\n     * @method Phaser.Math.Quaternion#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Quaternion squared.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Quaternion, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n            this.w = w * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Quaternion and the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to dot product with this Quaternion.\r\n     *\r\n     * @return {number} The dot product of this Quaternion and the given Quaternion or Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} v - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} [t=0] - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n        this.w = aw + t * (v.w - aw);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotationTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} a - [description]\r\n     * @param {Phaser.Math.Vector3} b - [description]\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotationTo: function (a, b)\r\n    {\r\n        var dot = a.x * b.x + a.y * b.y + a.z * b.z;\r\n\r\n        if (dot < -0.999999)\r\n        {\r\n            if (tmpvec.copy(xUnitVec3).cross(a).length() < EPSILON)\r\n            {\r\n                tmpvec.copy(yUnitVec3).cross(a);\r\n            }\r\n\r\n            tmpvec.normalize();\r\n\r\n            return this.setAxisAngle(tmpvec, Math.PI);\r\n\r\n        }\r\n        else if (dot > 0.999999)\r\n        {\r\n            this.x = 0;\r\n            this.y = 0;\r\n            this.z = 0;\r\n            this.w = 1;\r\n\r\n            return this;\r\n        }\r\n        else\r\n        {\r\n            tmpvec.copy(a).cross(b);\r\n\r\n            this.x = tmpvec.x;\r\n            this.y = tmpvec.y;\r\n            this.z = tmpvec.z;\r\n            this.w = 1 + dot;\r\n\r\n            return this.normalize();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the axes of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxes\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} view - The view axis.\r\n     * @param {Phaser.Math.Vector3} right - The right axis.\r\n     * @param {Phaser.Math.Vector3} up - The upwards axis.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxes: function (view, right, up)\r\n    {\r\n        var m = tmpMat3.val;\r\n\r\n        m[0] = right.x;\r\n        m[3] = right.y;\r\n        m[6] = right.z;\r\n\r\n        m[1] = up.x;\r\n        m[4] = up.y;\r\n        m[7] = up.z;\r\n\r\n        m[2] = -view.x;\r\n        m[5] = -view.y;\r\n        m[8] = -view.z;\r\n\r\n        return this.fromMat3(tmpMat3).normalize();\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    identity: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the axis angle of this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#setAxisAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} axis - The axis.\r\n     * @param {number} rad - The angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    setAxisAngle: function (axis, rad)\r\n    {\r\n        rad = rad * 0.5;\r\n\r\n        var s = Math.sin(rad);\r\n\r\n        this.x = s * axis.x;\r\n        this.y = s * axis.y;\r\n        this.z = s * axis.z;\r\n        this.w = Math.cos(rad);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Multiply this Quaternion by the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to multiply this Quaternion by.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    multiply: function (b)\r\n    {\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        this.x = ax * bw + aw * bx + ay * bz - az * by;\r\n        this.y = ay * bw + aw * by + az * bx - ax * bz;\r\n        this.z = az * bw + aw * bz + ax * by - ay * bx;\r\n        this.w = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Smoothly linearly interpolate this Quaternion towards the given Quaternion or Vector.\r\n     *\r\n     * @method Phaser.Math.Quaternion#slerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Quaternion|Phaser.Math.Vector4)} b - The Quaternion or Vector to interpolate towards.\r\n     * @param {number} t - The percentage of interpolation.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    slerp: function (b, t)\r\n    {\r\n        // benchmarks: http://jsperf.com/quaternion-slerp-implementations\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = b.x;\r\n        var by = b.y;\r\n        var bz = b.z;\r\n        var bw = b.w;\r\n\r\n        // calc cosine\r\n        var cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n\r\n        // adjust signs (if necessary)\r\n        if (cosom < 0)\r\n        {\r\n            cosom = -cosom;\r\n            bx = - bx;\r\n            by = - by;\r\n            bz = - bz;\r\n            bw = - bw;\r\n        }\r\n\r\n        // \"from\" and \"to\" quaternions are very close\r\n        //  ... so we can do a linear interpolation\r\n        var scale0 = 1 - t;\r\n        var scale1 = t;\r\n\r\n        // calculate coefficients\r\n        if ((1 - cosom) > EPSILON)\r\n        {\r\n            // standard case (slerp)\r\n            var omega = Math.acos(cosom);\r\n            var sinom = Math.sin(omega);\r\n\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        }\r\n\r\n        // calculate final values\r\n        this.x = scale0 * ax + scale1 * bx;\r\n        this.y = scale0 * ay + scale1 * by;\r\n        this.z = scale0 * az + scale1 * bz;\r\n        this.w = scale0 * aw + scale1 * bw;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Invert this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a0 = this.x;\r\n        var a1 = this.y;\r\n        var a2 = this.z;\r\n        var a3 = this.w;\r\n\r\n        var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n        var invDot = (dot) ? 1 / dot : 0;\r\n\r\n        // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n        this.x = -a0 * invDot;\r\n        this.y = -a1 * invDot;\r\n        this.z = -a2 * invDot;\r\n        this.w = a3 * invDot;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Convert this Quaternion into its conjugate.\r\n     *\r\n     * Sets the x, y and z components.\r\n     *\r\n     * @method Phaser.Math.Quaternion#conjugate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    conjugate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the X axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateX: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bx = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw + aw * bx;\r\n        this.y = ay * bw + az * bx;\r\n        this.z = az * bw - ay * bx;\r\n        this.w = aw * bw - ax * bx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Y axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateY: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var by = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw - az * by;\r\n        this.y = ay * bw + aw * by;\r\n        this.z = az * bw + ax * by;\r\n        this.w = aw * bw - ay * by;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotate this Quaternion on the Z axis.\r\n     *\r\n     * @method Phaser.Math.Quaternion#rotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The rotation angle in radians.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    rotateZ: function (rad)\r\n    {\r\n        rad *= 0.5;\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        var bz = Math.sin(rad);\r\n        var bw = Math.cos(rad);\r\n\r\n        this.x = ax * bw + ay * bz;\r\n        this.y = ay * bw - ax * bz;\r\n        this.z = az * bw + aw * bz;\r\n        this.w = aw * bw - az * bz;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Create a unit (or rotation) Quaternion from its x, y, and z components.\r\n     *\r\n     * Sets the w component.\r\n     *\r\n     * @method Phaser.Math.Quaternion#calculateW\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    calculateW: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n\r\n        this.w = -Math.sqrt(1.0 - x * x - y * y - z * z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Convert the given Matrix into this Quaternion.\r\n     *\r\n     * @method Phaser.Math.Quaternion#fromMat3\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} mat - The Matrix to convert from.\r\n     *\r\n     * @return {Phaser.Math.Quaternion} This Quaternion.\r\n     */\r\n    fromMat3: function (mat)\r\n    {\r\n        // benchmarks:\r\n        //    http://jsperf.com/typed-array-access-speed\r\n        //    http://jsperf.com/conversion-of-3x3-matrix-to-quaternion\r\n\r\n        // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n        // article \"Quaternion Calculus and Fast Animation\".\r\n        var m = mat.val;\r\n        var fTrace = m[0] + m[4] + m[8];\r\n        var fRoot;\r\n\r\n        if (fTrace > 0)\r\n        {\r\n            // |w| > 1/2, may as well choose w > 1/2\r\n            fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n\r\n            this.w = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot; // 1/(4w)\r\n\r\n            this.x = (m[7] - m[5]) * fRoot;\r\n            this.y = (m[2] - m[6]) * fRoot;\r\n            this.z = (m[3] - m[1]) * fRoot;\r\n        }\r\n        else\r\n        {\r\n            // |w| <= 1/2\r\n            var i = 0;\r\n\r\n            if (m[4] > m[0])\r\n            {\r\n                i = 1;\r\n            }\r\n\r\n            if (m[8] > m[i * 3 + i])\r\n            {\r\n                i = 2;\r\n            }\r\n\r\n            var j = siNext[i];\r\n            var k = siNext[j];\r\n\r\n            //  This isn't quite as clean without array access\r\n            fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);\r\n            tmp[i] = 0.5 * fRoot;\r\n\r\n            fRoot = 0.5 / fRoot;\r\n\r\n            tmp[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n            tmp[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n\r\n            this.x = tmp[0];\r\n            this.y = tmp[1];\r\n            this.z = tmp[2];\r\n            this.w = (m[k * 3 + j] - m[j * 3 + k]) * fRoot;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Quaternion;\r\n"]},"metadata":{},"sourceType":"script"}