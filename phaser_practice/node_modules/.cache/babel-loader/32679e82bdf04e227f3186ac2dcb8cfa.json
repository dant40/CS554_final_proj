{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders a stroke outline around the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#StrokePathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\n\n\nvar StrokePathWebGL = function (pipeline, src, alpha, dx, dy) {\n  var strokeTint = pipeline.strokeTint;\n  var strokeTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.strokeColor, src.strokeAlpha * alpha);\n  strokeTint.TL = strokeTintColor;\n  strokeTint.TR = strokeTintColor;\n  strokeTint.BL = strokeTintColor;\n  strokeTint.BR = strokeTintColor;\n  var path = src.pathData;\n  var pathLength = path.length - 1;\n  var lineWidth = src.lineWidth;\n  var halfLineWidth = lineWidth / 2;\n  var px1 = path[0] - dx;\n  var py1 = path[1] - dy;\n\n  if (!src.closePath) {\n    pathLength -= 2;\n  }\n\n  for (var i = 2; i < pathLength; i += 2) {\n    var px2 = path[i] - dx;\n    var py2 = path[i + 1] - dy;\n    pipeline.setTexture2D();\n    pipeline.batchLine(px1, py1, px2, py2, halfLineWidth, halfLineWidth, lineWidth, i - 2, src.closePath ? i === pathLength - 1 : false);\n    px1 = px2;\n    py1 = py2;\n  }\n};\n\nmodule.exports = StrokePathWebGL;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/StrokePathWebGL.js"],"names":["Utils","require","StrokePathWebGL","pipeline","src","alpha","dx","dy","strokeTint","strokeTintColor","getTintAppendFloatAlphaAndSwap","strokeColor","strokeAlpha","TL","TR","BL","BR","path","pathData","pathLength","length","lineWidth","halfLineWidth","px1","py1","closePath","i","px2","py2","setTexture2D","batchLine","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,4BAAD,CAAnB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,eAAe,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,KAAzB,EAAgCC,EAAhC,EAAoCC,EAApC,EACtB;AACI,MAAIC,UAAU,GAAGL,QAAQ,CAACK,UAA1B;AACA,MAAIC,eAAe,GAAGT,KAAK,CAACU,8BAAN,CAAqCN,GAAG,CAACO,WAAzC,EAAsDP,GAAG,CAACQ,WAAJ,GAAkBP,KAAxE,CAAtB;AAEAG,EAAAA,UAAU,CAACK,EAAX,GAAgBJ,eAAhB;AACAD,EAAAA,UAAU,CAACM,EAAX,GAAgBL,eAAhB;AACAD,EAAAA,UAAU,CAACO,EAAX,GAAgBN,eAAhB;AACAD,EAAAA,UAAU,CAACQ,EAAX,GAAgBP,eAAhB;AAEA,MAAIQ,IAAI,GAAGb,GAAG,CAACc,QAAf;AACA,MAAIC,UAAU,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA/B;AACA,MAAIC,SAAS,GAAGjB,GAAG,CAACiB,SAApB;AACA,MAAIC,aAAa,GAAGD,SAAS,GAAG,CAAhC;AAEA,MAAIE,GAAG,GAAGN,IAAI,CAAC,CAAD,CAAJ,GAAUX,EAApB;AACA,MAAIkB,GAAG,GAAGP,IAAI,CAAC,CAAD,CAAJ,GAAUV,EAApB;;AAEA,MAAI,CAACH,GAAG,CAACqB,SAAT,EACA;AACIN,IAAAA,UAAU,IAAI,CAAd;AACH;;AAED,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgCO,CAAC,IAAI,CAArC,EACA;AACI,QAAIC,GAAG,GAAGV,IAAI,CAACS,CAAD,CAAJ,GAAUpB,EAApB;AACA,QAAIsB,GAAG,GAAGX,IAAI,CAACS,CAAC,GAAG,CAAL,CAAJ,GAAcnB,EAAxB;AAEAJ,IAAAA,QAAQ,CAAC0B,YAAT;AAEA1B,IAAAA,QAAQ,CAAC2B,SAAT,CACIP,GADJ,EAEIC,GAFJ,EAGIG,GAHJ,EAIIC,GAJJ,EAKIN,aALJ,EAMIA,aANJ,EAOID,SAPJ,EAQIK,CAAC,GAAG,CARR,EASKtB,GAAG,CAACqB,SAAL,GAAmBC,CAAC,KAAKP,UAAU,GAAG,CAAtC,GAA2C,KAT/C;AAYAI,IAAAA,GAAG,GAAGI,GAAN;AACAH,IAAAA,GAAG,GAAGI,GAAN;AACH;AACJ,CA7CD;;AA+CAG,MAAM,CAACC,OAAP,GAAiB9B,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders a stroke outline around the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#StrokePathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\r\nvar StrokePathWebGL = function (pipeline, src, alpha, dx, dy)\r\n{\r\n    var strokeTint = pipeline.strokeTint;\r\n    var strokeTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.strokeColor, src.strokeAlpha * alpha);\r\n\r\n    strokeTint.TL = strokeTintColor;\r\n    strokeTint.TR = strokeTintColor;\r\n    strokeTint.BL = strokeTintColor;\r\n    strokeTint.BR = strokeTintColor;\r\n\r\n    var path = src.pathData;\r\n    var pathLength = path.length - 1;\r\n    var lineWidth = src.lineWidth;\r\n    var halfLineWidth = lineWidth / 2;\r\n\r\n    var px1 = path[0] - dx;\r\n    var py1 = path[1] - dy;\r\n\r\n    if (!src.closePath)\r\n    {\r\n        pathLength -= 2;\r\n    }\r\n\r\n    for (var i = 2; i < pathLength; i += 2)\r\n    {\r\n        var px2 = path[i] - dx;\r\n        var py2 = path[i + 1] - dy;\r\n\r\n        pipeline.setTexture2D();\r\n\r\n        pipeline.batchLine(\r\n            px1,\r\n            py1,\r\n            px2,\r\n            py2,\r\n            halfLineWidth,\r\n            halfLineWidth,\r\n            lineWidth,\r\n            i - 2,\r\n            (src.closePath) ? (i === pathLength - 1) : false\r\n        );\r\n\r\n        px1 = px2;\r\n        py1 = py2;\r\n    }\r\n};\r\n\r\nmodule.exports = StrokePathWebGL;\r\n"]},"metadata":{},"sourceType":"script"}