{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar BlitterWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var list = src.getRenderList();\n\n  if (list.length === 0) {\n    return;\n  }\n\n  var pipeline = this.pipeline;\n  renderer.setPipeline(pipeline, src);\n  var cameraScrollX = camera.scrollX * src.scrollFactorX;\n  var cameraScrollY = camera.scrollY * src.scrollFactorY;\n  var calcMatrix = pipeline._tempMatrix1;\n  calcMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    calcMatrix.multiplyWithOffset(parentMatrix, -cameraScrollX, -cameraScrollY);\n    cameraScrollX = 0;\n    cameraScrollY = 0;\n  }\n\n  var blitterX = src.x - cameraScrollX;\n  var blitterY = src.y - cameraScrollY;\n  var prevTextureSourceIndex = -1;\n  var tintEffect = false;\n  var alpha = camera.alpha * src.alpha;\n  var roundPixels = camera.roundPixels;\n\n  for (var index = 0; index < list.length; index++) {\n    var bob = list[index];\n    var frame = bob.frame;\n    var bobAlpha = bob.alpha * alpha;\n\n    if (bobAlpha === 0) {\n      continue;\n    }\n\n    var width = frame.width;\n    var height = frame.height;\n    var x = blitterX + bob.x + frame.x;\n    var y = blitterY + bob.y + frame.y;\n\n    if (bob.flipX) {\n      width *= -1;\n      x += frame.width;\n    }\n\n    if (bob.flipY) {\n      height *= -1;\n      y += frame.height;\n    }\n\n    var xw = x + width;\n    var yh = y + height;\n    var tx0 = calcMatrix.getX(x, y);\n    var ty0 = calcMatrix.getY(x, y);\n    var tx1 = calcMatrix.getX(xw, yh);\n    var ty1 = calcMatrix.getY(xw, yh);\n    var tint = Utils.getTintAppendFloatAlpha(bob.tint, bobAlpha); //  Bind texture only if the Texture Source is different from before\n\n    if (frame.sourceIndex !== prevTextureSourceIndex) {\n      pipeline.setTexture2D(frame.glTexture, 0);\n      prevTextureSourceIndex = frame.sourceIndex;\n    }\n\n    if (roundPixels) {\n      tx0 = Math.round(tx0);\n      ty0 = Math.round(ty0);\n      tx1 = Math.round(tx1);\n      ty1 = Math.round(ty1);\n    } //  TL x/y, BL x/y, BR x/y, TR x/y\n\n\n    if (pipeline.batchQuad(tx0, ty0, tx0, ty1, tx1, ty1, tx1, ty0, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect, frame.glTexture, 0)) {\n      prevTextureSourceIndex = -1;\n    }\n  }\n};\n\nmodule.exports = BlitterWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/blitter/BlitterWebGLRenderer.js"],"names":["Utils","require","BlitterWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","list","getRenderList","length","pipeline","setPipeline","cameraScrollX","scrollX","scrollFactorX","cameraScrollY","scrollY","scrollFactorY","calcMatrix","_tempMatrix1","copyFrom","matrix","multiplyWithOffset","blitterX","x","blitterY","y","prevTextureSourceIndex","tintEffect","alpha","roundPixels","index","bob","frame","bobAlpha","width","height","flipX","flipY","xw","yh","tx0","getX","ty0","getY","tx1","ty1","tint","getTintAppendFloatAlpha","sourceIndex","setTexture2D","glTexture","Math","round","batchQuad","u0","v0","u1","v1","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Blitter#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Blitter} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar BlitterWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var list = src.getRenderList();\r\n\r\n    if (list.length === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var pipeline = this.pipeline;\r\n\r\n    renderer.setPipeline(pipeline, src);\r\n\r\n    var cameraScrollX = camera.scrollX * src.scrollFactorX;\r\n    var cameraScrollY = camera.scrollY * src.scrollFactorY;\r\n\r\n    var calcMatrix = pipeline._tempMatrix1;\r\n\r\n    calcMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        calcMatrix.multiplyWithOffset(parentMatrix, -cameraScrollX, -cameraScrollY);\r\n\r\n        cameraScrollX = 0;\r\n        cameraScrollY = 0;\r\n    }\r\n\r\n    var blitterX = src.x - cameraScrollX;\r\n    var blitterY = src.y - cameraScrollY;\r\n    var prevTextureSourceIndex = -1;\r\n    var tintEffect = false;\r\n    var alpha = camera.alpha * src.alpha;\r\n    var roundPixels = camera.roundPixels;\r\n\r\n    for (var index = 0; index < list.length; index++)\r\n    {\r\n        var bob = list[index];\r\n        var frame = bob.frame;\r\n        var bobAlpha = bob.alpha * alpha;\r\n\r\n        if (bobAlpha === 0)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var width = frame.width;\r\n        var height = frame.height;\r\n\r\n        var x = blitterX + bob.x + frame.x;\r\n        var y = blitterY + bob.y + frame.y;\r\n\r\n        if (bob.flipX)\r\n        {\r\n            width *= -1;\r\n            x += frame.width;\r\n        }\r\n\r\n        if (bob.flipY)\r\n        {\r\n            height *= -1;\r\n            y += frame.height;\r\n        }\r\n\r\n        var xw = x + width;\r\n        var yh = y + height;\r\n\r\n        var tx0 = calcMatrix.getX(x, y);\r\n        var ty0 = calcMatrix.getY(x, y);\r\n\r\n        var tx1 = calcMatrix.getX(xw, yh);\r\n        var ty1 = calcMatrix.getY(xw, yh);\r\n\r\n        var tint = Utils.getTintAppendFloatAlpha(bob.tint, bobAlpha);\r\n\r\n        //  Bind texture only if the Texture Source is different from before\r\n        if (frame.sourceIndex !== prevTextureSourceIndex)\r\n        {\r\n            pipeline.setTexture2D(frame.glTexture, 0);\r\n\r\n            prevTextureSourceIndex = frame.sourceIndex;\r\n        }\r\n\r\n        if (roundPixels)\r\n        {\r\n            tx0 = Math.round(tx0);\r\n            ty0 = Math.round(ty0);\r\n\r\n            tx1 = Math.round(tx1);\r\n            ty1 = Math.round(ty1);\r\n        }\r\n\r\n        //  TL x/y, BL x/y, BR x/y, TR x/y\r\n        if (pipeline.batchQuad(tx0, ty0, tx0, ty1, tx1, ty1, tx1, ty0, frame.u0, frame.v0, frame.u1, frame.v1, tint, tint, tint, tint, tintEffect, frame.glTexture, 0))\r\n        {\r\n            prevTextureSourceIndex = -1;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = BlitterWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}