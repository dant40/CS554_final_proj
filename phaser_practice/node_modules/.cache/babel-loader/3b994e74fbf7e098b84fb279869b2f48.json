{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\nvar Class = require('../utils/Class');\n\nvar CubicBezier = require('../math/interpolation/CubicBezierInterpolation');\n\nvar Curve = require('./Curve');\n\nvar Vector2 = require('../math/Vector2');\n/**\r\n * @classdesc\r\n * A higher-order BÃ©zier curve constructed of four points.\r\n *\r\n * @class CubicBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2|Phaser.Math.Vector2[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n * @param {Phaser.Math.Vector2} p3 - End Point.\r\n */\n\n\nvar CubicBezierCurve = new Class({\n  Extends: Curve,\n  initialize: function CubicBezierCurve(p0, p1, p2, p3) {\n    Curve.call(this, 'CubicBezierCurve');\n\n    if (Array.isArray(p0)) {\n      p3 = new Vector2(p0[6], p0[7]);\n      p2 = new Vector2(p0[4], p0[5]);\n      p1 = new Vector2(p0[2], p0[3]);\n      p0 = new Vector2(p0[0], p0[1]);\n    }\n    /**\r\n     * The start point of this curve.\r\n     *\r\n     * @name Phaser.Curves.CubicBezier#p0\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.p0 = p0;\n    /**\r\n     * The first control point of this curve.\r\n     *\r\n     * @name Phaser.Curves.CubicBezier#p1\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.p1 = p1;\n    /**\r\n     * The second control point of this curve.\r\n     *\r\n     * @name Phaser.Curves.CubicBezier#p2\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.p2 = p2;\n    /**\r\n     * The end point of this curve.\r\n     *\r\n     * @name Phaser.Curves.CubicBezier#p3\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.p3 = p3;\n  },\n\n  /**\r\n   * Gets the starting point on the curve.\r\n   *\r\n   * @method Phaser.Curves.CubicBezier#getStartPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getStartPoint: function (out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    return out.copy(this.p0);\n  },\n\n  /**\r\n   * Returns the resolution of this curve.\r\n   *\r\n   * @method Phaser.Curves.CubicBezier#getResolution\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} divisions - The amount of divisions used by this curve.\r\n   *\r\n   * @return {number} The resolution of the curve.\r\n   */\n  getResolution: function (divisions) {\n    return divisions;\n  },\n\n  /**\r\n   * Get point at relative position in curve according to length.\r\n   *\r\n   * @method Phaser.Curves.CubicBezier#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n   *\r\n   * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n   * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n   *\r\n   * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n   */\n  getPoint: function (t, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    }\n\n    var p0 = this.p0;\n    var p1 = this.p1;\n    var p2 = this.p2;\n    var p3 = this.p3;\n    return out.set(CubicBezier(t, p0.x, p1.x, p2.x, p3.x), CubicBezier(t, p0.y, p1.y, p2.y, p3.y));\n  },\n\n  /**\r\n   * Draws this curve to the specified graphics object.\r\n   *\r\n   * @method Phaser.Curves.CubicBezier#draw\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - The graphics object this curve should be drawn to.\r\n   * @param {integer} [pointsTotal=32] - The number of intermediary points that make up this curve. A higher number of points will result in a smoother curve.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} The graphics object this curve was drawn to. Useful for method chaining.\r\n   */\n  draw: function (graphics, pointsTotal) {\n    if (pointsTotal === undefined) {\n      pointsTotal = 32;\n    }\n\n    var points = this.getPoints(pointsTotal);\n    graphics.beginPath();\n    graphics.moveTo(this.p0.x, this.p0.y);\n\n    for (var i = 1; i < points.length; i++) {\n      graphics.lineTo(points[i].x, points[i].y);\n    }\n\n    graphics.strokePath(); //  So you can chain graphics calls\n\n    return graphics;\n  },\n\n  /**\r\n   * Returns a JSON object that describes this curve.\r\n   *\r\n   * @method Phaser.Curves.CubicBezier#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n   */\n  toJSON: function () {\n    return {\n      type: this.type,\n      points: [this.p0.x, this.p0.y, this.p1.x, this.p1.y, this.p2.x, this.p2.y, this.p3.x, this.p3.y]\n    };\n  }\n});\n/**\r\n * Generates a curve from a JSON object.\r\n *\r\n * @function Phaser.Curves.CubicBezier.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.CubicBezier} The curve generated from the JSON object.\r\n */\n\nCubicBezierCurve.fromJSON = function (data) {\n  var points = data.points;\n  var p0 = new Vector2(points[0], points[1]);\n  var p1 = new Vector2(points[2], points[3]);\n  var p2 = new Vector2(points[4], points[5]);\n  var p3 = new Vector2(points[6], points[7]);\n  return new CubicBezierCurve(p0, p1, p2, p3);\n};\n\nmodule.exports = CubicBezierCurve;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/curves/CubicBezierCurve.js"],"names":["Class","require","CubicBezier","Curve","Vector2","CubicBezierCurve","Extends","initialize","p0","p1","p2","p3","call","Array","isArray","getStartPoint","out","undefined","copy","getResolution","divisions","getPoint","t","set","x","y","draw","graphics","pointsTotal","points","getPoints","beginPath","moveTo","i","length","lineTo","strokePath","toJSON","type","fromJSON","data","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Based on the three.js Curve classes created by [zz85](http://www.lab4games.net/zz85/blog)\r\n\r\nvar Class = require('../utils/Class');\r\nvar CubicBezier = require('../math/interpolation/CubicBezierInterpolation');\r\nvar Curve = require('./Curve');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A higher-order BÃ©zier curve constructed of four points.\r\n *\r\n * @class CubicBezier\r\n * @extends Phaser.Curves.Curve\r\n * @memberof Phaser.Curves\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Math.Vector2|Phaser.Math.Vector2[])} p0 - Start point, or an array of point pairs.\r\n * @param {Phaser.Math.Vector2} p1 - Control Point 1.\r\n * @param {Phaser.Math.Vector2} p2 - Control Point 2.\r\n * @param {Phaser.Math.Vector2} p3 - End Point.\r\n */\r\nvar CubicBezierCurve = new Class({\r\n\r\n    Extends: Curve,\r\n\r\n    initialize:\r\n\r\n    function CubicBezierCurve (p0, p1, p2, p3)\r\n    {\r\n        Curve.call(this, 'CubicBezierCurve');\r\n\r\n        if (Array.isArray(p0))\r\n        {\r\n            p3 = new Vector2(p0[6], p0[7]);\r\n            p2 = new Vector2(p0[4], p0[5]);\r\n            p1 = new Vector2(p0[2], p0[3]);\r\n            p0 = new Vector2(p0[0], p0[1]);\r\n        }\r\n\r\n        /**\r\n         * The start point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p0\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p0 = p0;\r\n\r\n        /**\r\n         * The first control point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p1\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p1 = p1;\r\n\r\n        /**\r\n         * The second control point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p2 = p2;\r\n\r\n        /**\r\n         * The end point of this curve.\r\n         *\r\n         * @name Phaser.Curves.CubicBezier#p3\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.p3 = p3;\r\n    },\r\n\r\n    /**\r\n     * Gets the starting point on the curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getStartPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getStartPoint: function (out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        return out.copy(this.p0);\r\n    },\r\n\r\n    /**\r\n     * Returns the resolution of this curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getResolution\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} divisions - The amount of divisions used by this curve.\r\n     *\r\n     * @return {number} The resolution of the curve.\r\n     */\r\n    getResolution: function (divisions)\r\n    {\r\n        return divisions;\r\n    },\r\n\r\n    /**\r\n     * Get point at relative position in curve according to length.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Math.Vector2} O - [out,$return]\r\n     *\r\n     * @param {number} t - The position along the curve to return. Where 0 is the start and 1 is the end.\r\n     * @param {Phaser.Math.Vector2} [out] - A Vector2 object to store the result in. If not given will be created.\r\n     *\r\n     * @return {Phaser.Math.Vector2} The coordinates of the point on the curve. If an `out` object was given this will be returned.\r\n     */\r\n    getPoint: function (t, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        var p0 = this.p0;\r\n        var p1 = this.p1;\r\n        var p2 = this.p2;\r\n        var p3 = this.p3;\r\n\r\n        return out.set(CubicBezier(t, p0.x, p1.x, p2.x, p3.x), CubicBezier(t, p0.y, p1.y, p2.y, p3.y));\r\n    },\r\n\r\n    /**\r\n     * Draws this curve to the specified graphics object.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#draw\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.Graphics} G - [graphics,$return]\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The graphics object this curve should be drawn to.\r\n     * @param {integer} [pointsTotal=32] - The number of intermediary points that make up this curve. A higher number of points will result in a smoother curve.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} The graphics object this curve was drawn to. Useful for method chaining.\r\n     */\r\n    draw: function (graphics, pointsTotal)\r\n    {\r\n        if (pointsTotal === undefined) { pointsTotal = 32; }\r\n\r\n        var points = this.getPoints(pointsTotal);\r\n\r\n        graphics.beginPath();\r\n        graphics.moveTo(this.p0.x, this.p0.y);\r\n\r\n        for (var i = 1; i < points.length; i++)\r\n        {\r\n            graphics.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        graphics.strokePath();\r\n\r\n        //  So you can chain graphics calls\r\n        return graphics;\r\n    },\r\n\r\n    /**\r\n     * Returns a JSON object that describes this curve.\r\n     *\r\n     * @method Phaser.Curves.CubicBezier#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Curves.JSONCurve} The JSON object containing this curve data.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        return {\r\n            type: this.type,\r\n            points: [\r\n                this.p0.x, this.p0.y,\r\n                this.p1.x, this.p1.y,\r\n                this.p2.x, this.p2.y,\r\n                this.p3.x, this.p3.y\r\n            ]\r\n        };\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Generates a curve from a JSON object.\r\n *\r\n * @function Phaser.Curves.CubicBezier.fromJSON\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Curves.JSONCurve} data - The JSON object containing this curve data.\r\n *\r\n * @return {Phaser.Curves.CubicBezier} The curve generated from the JSON object.\r\n */\r\nCubicBezierCurve.fromJSON = function (data)\r\n{\r\n    var points = data.points;\r\n\r\n    var p0 = new Vector2(points[0], points[1]);\r\n    var p1 = new Vector2(points[2], points[3]);\r\n    var p2 = new Vector2(points[4], points[5]);\r\n    var p3 = new Vector2(points[6], points[7]);\r\n\r\n    return new CubicBezierCurve(p0, p1, p2, p3);\r\n};\r\n\r\nmodule.exports = CubicBezierCurve;\r\n"]},"metadata":{},"sourceType":"script"}