{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Frame = require('../../textures/Frame');\n/**\r\n * @classdesc\r\n * A Bob Game Object.\r\n *\r\n * A Bob belongs to a Blitter Game Object. The Blitter is responsible for managing and rendering this object.\r\n *\r\n * A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle\r\n * the flipped and visible state of the Bob. The Frame the Bob uses to render can be changed dynamically, but it\r\n * must be a Frame within the Texture used by the parent Blitter.\r\n *\r\n * Bob positions are relative to the Blitter parent. So if you move the Blitter parent, all Bob children will\r\n * have their positions impacted by this change as well.\r\n *\r\n * You can manipulate Bob objects directly from your game code, but the creation and destruction of them should be\r\n * handled via the Blitter parent.\r\n *\r\n * @class Bob\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Blitter} blitter - The parent Blitter object is responsible for updating this Bob.\r\n * @param {number} x - The horizontal position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {number} y - The vertical position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {(string|integer)} frame - The Frame this Bob will render with, as defined in the Texture the parent Blitter is using.\r\n * @param {boolean} visible - Should the Bob render visible or not to start with?\r\n */\n\n\nvar Bob = new Class({\n  initialize: function Bob(blitter, x, y, frame, visible) {\n    /**\r\n     * The Blitter object that this Bob belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#parent\r\n     * @type {Phaser.GameObjects.Blitter}\r\n     * @since 3.0.0\r\n     */\n    this.parent = blitter;\n    /**\r\n     * The x position of this Bob, relative to the x position of the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The y position of this Bob, relative to the y position of the Blitter.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The frame that the Bob uses to render with.\r\n     * To change the frame use the `Bob.setFrame` method.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = frame;\n    /**\r\n     * A blank object which can be used to store data related to this Bob in.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#data\r\n     * @type {object}\r\n     * @default {}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = {};\n    /**\r\n     * The tint value of this Bob.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#tint\r\n     * @type {number}\r\n     * @default 0xffffff\r\n     * @since 3.20.0\r\n     */\n\n    this.tint = 0xffffff;\n    /**\r\n     * The visible state of this Bob.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#_visible\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._visible = visible;\n    /**\r\n     * The alpha value of this Bob.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#_alpha\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._alpha = 1;\n    /**\r\n     * The horizontally flipped state of the Bob.\r\n     * A Bob that is flipped horizontally will render inversed on the horizontal axis.\r\n     * Flipping always takes place from the middle of the texture.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#flipX\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.flipX = false;\n    /**\r\n     * The vertically flipped state of the Bob.\r\n     * A Bob that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\r\n     * Flipping always takes place from the middle of the texture.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#flipY\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.flipY = false;\n  },\n\n  /**\r\n   * Changes the Texture Frame being used by this Bob.\r\n   * The frame must be part of the Texture the parent Blitter is using.\r\n   * If no value is given it will use the default frame of the Blitter parent.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The frame to be used during rendering.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFrame: function (frame) {\n    if (frame === undefined) {\n      this.frame = this.parent.frame;\n    } else if (frame instanceof Frame && frame.texture === this.parent.texture) {\n      this.frame = frame;\n    } else {\n      this.frame = this.parent.texture.get(frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Resets the horizontal and vertical flipped state of this Bob back to their default un-flipped state.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#resetFlip\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  resetFlip: function () {\n    this.flipX = false;\n    this.flipY = false;\n    return this;\n  },\n\n  /**\r\n   * Resets this Bob.\r\n   *\r\n   * Changes the position to the values given, and optionally changes the frame.\r\n   *\r\n   * Also resets the flipX and flipY values, sets alpha back to 1 and visible to true.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  reset: function (x, y, frame) {\n    this.x = x;\n    this.y = y;\n    this.flipX = false;\n    this.flipY = false;\n    this._alpha = 1;\n    this._visible = true;\n    this.parent.dirty = true;\n\n    if (frame) {\n      this.setFrame(frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Changes the position of this Bob to the values given.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setPosition\r\n   * @since 3.20.0\r\n   *\r\n   * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setPosition: function (x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlipX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlipX: function (value) {\n    this.flipX = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlipY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlipY: function (value) {\n    this.flipY = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal and vertical flipped state of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setFlip\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} x - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n   * @param {boolean} y - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setFlip: function (x, y) {\n    this.flipX = x;\n    this.flipY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the visibility of this Bob.\r\n   * \r\n   * An invisible Bob will skip rendering.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setVisible\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The visible state of the Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setVisible: function (value) {\n    this.visible = value;\n    return this;\n  },\n\n  /**\r\n   * Set the Alpha level of this Bob. The alpha controls the opacity of the Game Object as it renders.\r\n   * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n   * \r\n   * A Bob with alpha 0 will skip rendering.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The alpha value used for this Bob. Between 0 and 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setAlpha: function (value) {\n    this.alpha = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the tint of this Bob.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#setTint\r\n   * @since 3.20.0\r\n   *\r\n   * @param {number} value - The tint value used for this Bob. Between 0 and 0xffffff.\r\n   *\r\n   * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n   */\n  setTint: function (value) {\n    this.tint = value;\n    return this;\n  },\n\n  /**\r\n   * Destroys this Bob instance.\r\n   * Removes itself from the Blitter and clears the parent, frame and data properties.\r\n   *\r\n   * @method Phaser.GameObjects.Bob#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.parent.dirty = true;\n    this.parent.children.remove(this);\n    this.parent = undefined;\n    this.frame = undefined;\n    this.data = undefined;\n  },\n\n  /**\r\n   * The visible state of the Bob.\r\n   * \r\n   * An invisible Bob will skip rendering.\r\n   *\r\n   * @name Phaser.GameObjects.Bob#visible\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  visible: {\n    get: function () {\n      return this._visible;\n    },\n    set: function (value) {\n      this.parent.dirty |= this._visible !== value;\n      this._visible = value;\n    }\n  },\n\n  /**\r\n   * The alpha value of the Bob, between 0 and 1.\r\n   * \r\n   * A Bob with alpha 0 will skip rendering.\r\n   *\r\n   * @name Phaser.GameObjects.Bob#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function () {\n      return this._alpha;\n    },\n    set: function (value) {\n      this.parent.dirty |= this._alpha > 0 !== value > 0;\n      this._alpha = value;\n    }\n  }\n});\nmodule.exports = Bob;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/blitter/Bob.js"],"names":["Class","require","Frame","Bob","initialize","blitter","x","y","frame","visible","parent","data","tint","_visible","_alpha","flipX","flipY","setFrame","undefined","texture","get","resetFlip","reset","dirty","setPosition","setFlipX","value","setFlipY","setFlip","setVisible","setAlpha","alpha","setTint","destroy","children","remove","set","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Frame = require('../../textures/Frame');\r\n\r\n/**\r\n * @classdesc\r\n * A Bob Game Object.\r\n *\r\n * A Bob belongs to a Blitter Game Object. The Blitter is responsible for managing and rendering this object.\r\n *\r\n * A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle\r\n * the flipped and visible state of the Bob. The Frame the Bob uses to render can be changed dynamically, but it\r\n * must be a Frame within the Texture used by the parent Blitter.\r\n *\r\n * Bob positions are relative to the Blitter parent. So if you move the Blitter parent, all Bob children will\r\n * have their positions impacted by this change as well.\r\n *\r\n * You can manipulate Bob objects directly from your game code, but the creation and destruction of them should be\r\n * handled via the Blitter parent.\r\n *\r\n * @class Bob\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Blitter} blitter - The parent Blitter object is responsible for updating this Bob.\r\n * @param {number} x - The horizontal position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {number} y - The vertical position of this Game Object in the world, relative to the parent Blitter position.\r\n * @param {(string|integer)} frame - The Frame this Bob will render with, as defined in the Texture the parent Blitter is using.\r\n * @param {boolean} visible - Should the Bob render visible or not to start with?\r\n */\r\nvar Bob = new Class({\r\n\r\n    initialize:\r\n\r\n    function Bob (blitter, x, y, frame, visible)\r\n    {\r\n        /**\r\n         * The Blitter object that this Bob belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#parent\r\n         * @type {Phaser.GameObjects.Blitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = blitter;\r\n\r\n        /**\r\n         * The x position of this Bob, relative to the x position of the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#x\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of this Bob, relative to the y position of the Blitter.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#y\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The frame that the Bob uses to render with.\r\n         * To change the frame use the `Bob.setFrame` method.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = frame;\r\n\r\n        /**\r\n         * A blank object which can be used to store data related to this Bob in.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#data\r\n         * @type {object}\r\n         * @default {}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = {};\r\n\r\n        /**\r\n         * The tint value of this Bob.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#tint\r\n         * @type {number}\r\n         * @default 0xffffff\r\n         * @since 3.20.0\r\n         */\r\n        this.tint = 0xffffff;\r\n\r\n        /**\r\n         * The visible state of this Bob.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#_visible\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._visible = visible;\r\n\r\n        /**\r\n         * The alpha value of this Bob.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#_alpha\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._alpha = 1;\r\n\r\n        /**\r\n         * The horizontally flipped state of the Bob.\r\n         * A Bob that is flipped horizontally will render inversed on the horizontal axis.\r\n         * Flipping always takes place from the middle of the texture.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#flipX\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.flipX = false;\r\n\r\n        /**\r\n         * The vertically flipped state of the Bob.\r\n         * A Bob that is flipped vertically will render inversed on the vertical axis (i.e. upside down)\r\n         * Flipping always takes place from the middle of the texture.\r\n         *\r\n         * @name Phaser.GameObjects.Bob#flipY\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.flipY = false;\r\n    },\r\n\r\n    /**\r\n     * Changes the Texture Frame being used by this Bob.\r\n     * The frame must be part of the Texture the parent Blitter is using.\r\n     * If no value is given it will use the default frame of the Blitter parent.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The frame to be used during rendering.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setFrame: function (frame)\r\n    {\r\n        if (frame === undefined)\r\n        {\r\n            this.frame = this.parent.frame;\r\n        }\r\n        else if (frame instanceof Frame && frame.texture === this.parent.texture)\r\n        {\r\n            this.frame = frame;\r\n        }\r\n        else\r\n        {\r\n            this.frame = this.parent.texture.get(frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the horizontal and vertical flipped state of this Bob back to their default un-flipped state.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#resetFlip\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    resetFlip: function ()\r\n    {\r\n        this.flipX = false;\r\n        this.flipY = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets this Bob.\r\n     *\r\n     * Changes the position to the values given, and optionally changes the frame.\r\n     *\r\n     * Also resets the flipX and flipY values, sets alpha back to 1 and visible to true.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {(string|integer|Phaser.Textures.Frame)} [frame] - The Frame the Bob will use. It _must_ be part of the Texture the parent Blitter object is using.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    reset: function (x, y, frame)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.flipX = false;\r\n        this.flipY = false;\r\n\r\n        this._alpha = 1;\r\n        this._visible = true;\r\n\r\n        this.parent.dirty = true;\r\n\r\n        if (frame)\r\n        {\r\n            this.setFrame(frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Changes the position of this Bob to the values given.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setPosition\r\n     * @since 3.20.0\r\n     *\r\n     * @param {number} x - The x position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     * @param {number} y - The y position of the Bob. Bob coordinate are relative to the position of the Blitter object.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setFlipX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setFlipX: function (value)\r\n    {\r\n        this.flipX = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setFlipY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setFlipY: function (value)\r\n    {\r\n        this.flipY = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical flipped state of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setFlip\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} x - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n     * @param {boolean} y - The horizontal flipped state. `false` for no flip, or `true` to be flipped.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setFlip: function (x, y)\r\n    {\r\n        this.flipX = x;\r\n        this.flipY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the visibility of this Bob.\r\n     * \r\n     * An invisible Bob will skip rendering.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Bob. The alpha controls the opacity of the Game Object as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     * \r\n     * A Bob with alpha 0 will skip rendering.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The alpha value used for this Bob. Between 0 and 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setAlpha: function (value)\r\n    {\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the tint of this Bob.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#setTint\r\n     * @since 3.20.0\r\n     *\r\n     * @param {number} value - The tint value used for this Bob. Between 0 and 0xffffff.\r\n     *\r\n     * @return {Phaser.GameObjects.Bob} This Bob Game Object.\r\n     */\r\n    setTint: function (value)\r\n    {\r\n        this.tint = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Bob instance.\r\n     * Removes itself from the Blitter and clears the parent, frame and data properties.\r\n     *\r\n     * @method Phaser.GameObjects.Bob#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.parent.dirty = true;\r\n\r\n        this.parent.children.remove(this);\r\n\r\n        this.parent = undefined;\r\n        this.frame = undefined;\r\n        this.data = undefined;\r\n    },\r\n\r\n    /**\r\n     * The visible state of the Bob.\r\n     * \r\n     * An invisible Bob will skip rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#visible\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    visible: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._visible;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.parent.dirty |= (this._visible !== value);\r\n            this._visible = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha value of the Bob, between 0 and 1.\r\n     * \r\n     * A Bob with alpha 0 will skip rendering.\r\n     *\r\n     * @name Phaser.GameObjects.Bob#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alpha;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.parent.dirty |= ((this._alpha > 0) !== (value > 0));\r\n            this._alpha = value;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Bob;\r\n"]},"metadata":{},"sourceType":"script"}