{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Tileset = require('../../Tileset');\n\nvar ImageCollection = require('../../ImageCollection');\n\nvar ParseObject = require('./ParseObject');\n/**\r\n * Tilesets and Image Collections\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {object} [description]\r\n */\n\n\nvar ParseTilesets = function (json) {\n  var tilesets = [];\n  var imageCollections = [];\n  var lastSet = null;\n  var stringID;\n\n  for (var i = 0; i < json.tilesets.length; i++) {\n    //  name, firstgid, width, height, margin, spacing, properties\n    var set = json.tilesets[i];\n\n    if (set.source) {\n      console.warn('Phaser can\\'t load external tilesets. Use the Embed Tileset button and then export the map again.');\n    } else if (set.image) {\n      var newSet = new Tileset(set.name, set.firstgid, set.tilewidth, set.tileheight, set.margin, set.spacing);\n\n      if (json.version > 1) {\n        // Tiled 1.2+\n        if (Array.isArray(set.tiles)) {\n          var tiles = {};\n          var props = {};\n\n          for (var t = 0; t < set.tiles.length; t++) {\n            var tile = set.tiles[t]; //  Convert tileproperties\n\n            if (tile.properties) {\n              var newPropData = {};\n              tile.properties.forEach(function (propData) {\n                newPropData[propData['name']] = propData['value'];\n              });\n              props[tile.id] = newPropData;\n            } //  Convert objectgroup\n\n\n            if (tile.objectgroup) {\n              tiles[tile.id] = {\n                objectgroup: tile.objectgroup\n              };\n\n              if (tile.objectgroup.objects) {\n                var parsedObjects2 = tile.objectgroup.objects.map(function (obj) {\n                  return ParseObject(obj);\n                });\n                tiles[tile.id].objectgroup.objects = parsedObjects2;\n              }\n            } // Copy animation data\n\n\n            if (tile.animation) {\n              if (tiles.hasOwnProperty(tile.id)) {\n                tiles[tile.id].animation = tile.animation;\n              } else {\n                tiles[tile.id] = {\n                  animation: tile.animation\n                };\n              }\n            }\n          }\n\n          newSet.tileData = tiles;\n          newSet.tileProperties = props;\n        }\n      } else {\n        // Tiled 1\n        // Properties stored per-tile in object with string indexes starting at \"0\"\n        if (set.tileproperties) {\n          newSet.tileProperties = set.tileproperties;\n        } // Object & terrain shapes stored per-tile in object with string indexes starting at \"0\"\n\n\n        if (set.tiles) {\n          newSet.tileData = set.tiles; // Parse the objects into Phaser format to match handling of other Tiled objects\n\n          for (stringID in newSet.tileData) {\n            var objectGroup = newSet.tileData[stringID].objectgroup;\n\n            if (objectGroup && objectGroup.objects) {\n              var parsedObjects1 = objectGroup.objects.map(function (obj) {\n                return ParseObject(obj);\n              });\n              newSet.tileData[stringID].objectgroup.objects = parsedObjects1;\n            }\n          }\n        }\n      } // For a normal sliced tileset the row/count/size information is computed when updated.\n      // This is done (again) after the image is set.\n\n\n      newSet.updateTileData(set.imagewidth, set.imageheight);\n      tilesets.push(newSet);\n    } else {\n      var newCollection = new ImageCollection(set.name, set.firstgid, set.tilewidth, set.tileheight, set.margin, set.spacing, set.properties);\n\n      for (stringID in set.tiles) {\n        var image = set.tiles[stringID].image;\n        var gid = set.firstgid + parseInt(stringID, 10);\n        newCollection.addImage(gid, image);\n      }\n\n      imageCollections.push(newCollection);\n    } //  We've got a new Tileset, so set the lastgid into the previous one\n\n\n    if (lastSet) {\n      lastSet.lastgid = set.firstgid - 1;\n    }\n\n    lastSet = set;\n  }\n\n  return {\n    tilesets: tilesets,\n    imageCollections: imageCollections\n  };\n};\n\nmodule.exports = ParseTilesets;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/ParseTilesets.js"],"names":["Tileset","require","ImageCollection","ParseObject","ParseTilesets","json","tilesets","imageCollections","lastSet","stringID","i","length","set","source","console","warn","image","newSet","name","firstgid","tilewidth","tileheight","margin","spacing","version","Array","isArray","tiles","props","t","tile","properties","newPropData","forEach","propData","id","objectgroup","objects","parsedObjects2","map","obj","animation","hasOwnProperty","tileData","tileProperties","tileproperties","objectGroup","parsedObjects1","updateTileData","imagewidth","imageheight","push","newCollection","gid","parseInt","addImage","lastgid","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Tileset = require('../../Tileset');\r\nvar ImageCollection = require('../../ImageCollection');\r\nvar ParseObject = require('./ParseObject');\r\n\r\n/**\r\n * Tilesets and Image Collections\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseTilesets\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - [description]\r\n *\r\n * @return {object} [description]\r\n */\r\nvar ParseTilesets = function (json)\r\n{\r\n    var tilesets = [];\r\n    var imageCollections = [];\r\n    var lastSet = null;\r\n    var stringID;\r\n\r\n    for (var i = 0; i < json.tilesets.length; i++)\r\n    {\r\n        //  name, firstgid, width, height, margin, spacing, properties\r\n        var set = json.tilesets[i];\r\n\r\n        if (set.source)\r\n        {\r\n            console.warn('Phaser can\\'t load external tilesets. Use the Embed Tileset button and then export the map again.');\r\n        }\r\n        else if (set.image)\r\n        {\r\n            var newSet = new Tileset(set.name, set.firstgid, set.tilewidth, set.tileheight, set.margin, set.spacing);\r\n\r\n            if (json.version > 1)\r\n            {\r\n                // Tiled 1.2+\r\n\r\n                if (Array.isArray(set.tiles))\r\n                {\r\n                    var tiles = {};\r\n                    var props = {};\r\n\r\n                    for (var t = 0; t < set.tiles.length; t++)\r\n                    {\r\n                        var tile = set.tiles[t];\r\n\r\n                        //  Convert tileproperties\r\n                        if (tile.properties)\r\n                        {\r\n                            var newPropData = {};\r\n\r\n                            tile.properties.forEach(function (propData)\r\n                            {\r\n                                newPropData[propData['name']] = propData['value'];\r\n                            });\r\n\r\n                            props[tile.id] = newPropData;\r\n                        }\r\n\r\n                        //  Convert objectgroup\r\n                        if (tile.objectgroup)\r\n                        {\r\n                            tiles[tile.id] = { objectgroup: tile.objectgroup };\r\n\r\n                            if (tile.objectgroup.objects)\r\n                            {\r\n                                var parsedObjects2 = tile.objectgroup.objects.map(\r\n                                    function (obj) { return ParseObject(obj); }\r\n                                );\r\n\r\n                                tiles[tile.id].objectgroup.objects = parsedObjects2;\r\n                            }\r\n                        }\r\n\r\n                        // Copy animation data\r\n                        if (tile.animation)\r\n                        {\r\n                            if (tiles.hasOwnProperty(tile.id))\r\n                            {\r\n                                tiles[tile.id].animation = tile.animation;\r\n                            }\r\n                            else\r\n                            {\r\n                                tiles[tile.id] = { animation: tile.animation };\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    newSet.tileData = tiles;\r\n                    newSet.tileProperties = props;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                // Tiled 1\r\n\r\n                // Properties stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tileproperties)\r\n                {\r\n                    newSet.tileProperties = set.tileproperties;\r\n                }\r\n\r\n                // Object & terrain shapes stored per-tile in object with string indexes starting at \"0\"\r\n                if (set.tiles)\r\n                {\r\n                    newSet.tileData = set.tiles;\r\n\r\n                    // Parse the objects into Phaser format to match handling of other Tiled objects\r\n                    for (stringID in newSet.tileData)\r\n                    {\r\n                        var objectGroup = newSet.tileData[stringID].objectgroup;\r\n                        if (objectGroup && objectGroup.objects)\r\n                        {\r\n                            var parsedObjects1 = objectGroup.objects.map(\r\n                                function (obj) { return ParseObject(obj); }\r\n                            );\r\n                            newSet.tileData[stringID].objectgroup.objects = parsedObjects1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // For a normal sliced tileset the row/count/size information is computed when updated.\r\n            // This is done (again) after the image is set.\r\n            newSet.updateTileData(set.imagewidth, set.imageheight);\r\n\r\n            tilesets.push(newSet);\r\n        }\r\n        else\r\n        {\r\n            var newCollection = new ImageCollection(set.name, set.firstgid, set.tilewidth,\r\n                set.tileheight, set.margin, set.spacing, set.properties);\r\n\r\n            for (stringID in set.tiles)\r\n            {\r\n                var image = set.tiles[stringID].image;\r\n                var gid = set.firstgid + parseInt(stringID, 10);\r\n                newCollection.addImage(gid, image);\r\n            }\r\n\r\n            imageCollections.push(newCollection);\r\n        }\r\n\r\n        //  We've got a new Tileset, so set the lastgid into the previous one\r\n        if (lastSet)\r\n        {\r\n            lastSet.lastgid = set.firstgid - 1;\r\n        }\r\n\r\n        lastSet = set;\r\n    }\r\n\r\n    return { tilesets: tilesets, imageCollections: imageCollections };\r\n};\r\n\r\nmodule.exports = ParseTilesets;\r\n"]},"metadata":{},"sourceType":"script"}