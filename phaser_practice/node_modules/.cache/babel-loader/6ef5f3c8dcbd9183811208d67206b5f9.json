{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar CurveRender = require('./CurveRender');\n\nvar Earcut = require('../../../geom/polygon/Earcut');\n\nvar Rectangle = require('../../../geom/rectangle/Rectangle');\n\nvar Shape = require('../Shape');\n/**\r\n * @classdesc\r\n * The Curve Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * To render a Curve Shape you must first create a `Phaser.Curves.Curve` object, then pass it to\r\n * the Curve Shape in the constructor.\r\n * \r\n * The Curve shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @class Curve\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {Phaser.Curves.Curve} [curve] - The Curve object to use to create the Shape.\r\n * @param {number} [fillColor] - The color the curve will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the curve will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Curve = new Class({\n  Extends: Shape,\n  Mixins: [CurveRender],\n  initialize: function Curve(scene, x, y, curve, fillColor, fillAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    Shape.call(this, scene, 'Curve', curve);\n    /**\r\n     * Private internal value.\r\n     * The number of points used to draw the curve. Higher values create smoother renders at the cost of more triangles being drawn.\r\n     *\r\n     * @name Phaser.GameObjects.Curve#_smoothness\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._smoothness = 32;\n    /**\r\n     * Private internal value.\r\n     * The Curve bounds rectangle.\r\n     *\r\n     * @name Phaser.GameObjects.Curve#_curveBounds\r\n     * @type {Phaser.Geom.Rectangle}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._curveBounds = new Rectangle();\n    this.closePath = false;\n    this.setPosition(x, y);\n\n    if (fillColor !== undefined) {\n      this.setFillStyle(fillColor, fillAlpha);\n    }\n\n    this.updateData();\n  },\n\n  /**\r\n   * The smoothness of the curve. The number of points used when rendering it.\r\n   * Increase this value for smoother curves, at the cost of more polygons being rendered.\r\n   *\r\n   * @name Phaser.GameObjects.Curve#smoothness\r\n   * @type {integer}\r\n   * @default 32\r\n   * @since 3.13.0\r\n   */\n  smoothness: {\n    get: function () {\n      return this._smoothness;\n    },\n    set: function (value) {\n      this._smoothness = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * Sets the smoothness of the curve. The number of points used when rendering it.\r\n   * Increase this value for smoother curves, at the cost of more polygons being rendered.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Curve#setSmoothness\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the smoothness to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setSmoothness: function (value) {\n    this._smoothness = value;\n    return this.updateData();\n  },\n\n  /**\r\n   * Internal method that updates the data and path values.\r\n   *\r\n   * @method Phaser.GameObjects.Curve#updateData\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  updateData: function () {\n    var bounds = this._curveBounds;\n    var smoothness = this._smoothness; //  Update the bounds in case the underlying data has changed\n\n    this.geom.getBounds(bounds, smoothness);\n    this.setSize(bounds.width, bounds.height);\n    this.updateDisplayOrigin();\n    var path = [];\n    var points = this.geom.getPoints(smoothness);\n\n    for (var i = 0; i < points.length; i++) {\n      path.push(points[i].x, points[i].y);\n    }\n\n    path.push(points[0].x, points[0].y);\n    this.pathIndexes = Earcut(path);\n    this.pathData = path;\n    return this;\n  }\n});\nmodule.exports = Curve;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/curve/Curve.js"],"names":["Class","require","CurveRender","Earcut","Rectangle","Shape","Curve","Extends","Mixins","initialize","scene","x","y","curve","fillColor","fillAlpha","undefined","call","_smoothness","_curveBounds","closePath","setPosition","setFillStyle","updateData","smoothness","get","set","value","setSmoothness","bounds","geom","getBounds","setSize","width","height","updateDisplayOrigin","path","points","getPoints","i","length","push","pathIndexes","pathData","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar CurveRender = require('./CurveRender');\r\nvar Earcut = require('../../../geom/polygon/Earcut');\r\nvar Rectangle = require('../../../geom/rectangle/Rectangle');\r\nvar Shape = require('../Shape');\r\n\r\n/**\r\n * @classdesc\r\n * The Curve Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * To render a Curve Shape you must first create a `Phaser.Curves.Curve` object, then pass it to\r\n * the Curve Shape in the constructor.\r\n * \r\n * The Curve shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @class Curve\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {Phaser.Curves.Curve} [curve] - The Curve object to use to create the Shape.\r\n * @param {number} [fillColor] - The color the curve will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the curve will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Curve = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        CurveRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Curve (scene, x, y, curve, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        Shape.call(this, scene, 'Curve', curve);\r\n\r\n        /**\r\n         * Private internal value.\r\n         * The number of points used to draw the curve. Higher values create smoother renders at the cost of more triangles being drawn.\r\n         *\r\n         * @name Phaser.GameObjects.Curve#_smoothness\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._smoothness = 32;\r\n\r\n        /**\r\n         * Private internal value.\r\n         * The Curve bounds rectangle.\r\n         *\r\n         * @name Phaser.GameObjects.Curve#_curveBounds\r\n         * @type {Phaser.Geom.Rectangle}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._curveBounds = new Rectangle();\r\n\r\n        this.closePath = false;\r\n\r\n        this.setPosition(x, y);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * The smoothness of the curve. The number of points used when rendering it.\r\n     * Increase this value for smoother curves, at the cost of more polygons being rendered.\r\n     *\r\n     * @name Phaser.GameObjects.Curve#smoothness\r\n     * @type {integer}\r\n     * @default 32\r\n     * @since 3.13.0\r\n     */\r\n    smoothness: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._smoothness;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._smoothness = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the smoothness of the curve. The number of points used when rendering it.\r\n     * Increase this value for smoother curves, at the cost of more polygons being rendered.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Curve#setSmoothness\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the smoothness to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setSmoothness: function (value)\r\n    {\r\n        this._smoothness = value;\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Curve#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var bounds = this._curveBounds;\r\n        var smoothness = this._smoothness;\r\n\r\n        //  Update the bounds in case the underlying data has changed\r\n        this.geom.getBounds(bounds, smoothness);\r\n\r\n        this.setSize(bounds.width, bounds.height);\r\n        this.updateDisplayOrigin();\r\n\r\n        var path = [];\r\n        var points = this.geom.getPoints(smoothness);\r\n\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            path.push(points[i].x, points[i].y);\r\n        }\r\n\r\n        path.push(points[0].x, points[0].y);\r\n\r\n        this.pathIndexes = Earcut(path);\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Curve;\r\n"]},"metadata":{},"sourceType":"script"}