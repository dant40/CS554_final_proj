{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\r\n *\r\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\r\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\r\n * between 0 and 1 otherwise.\r\n *\r\n * @function Phaser.Math.SmoothStep\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\r\n *\r\n * @param {number} x - The input value.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The percentage of interpolation, between 0 and 1.\r\n */\nvar SmoothStep = function (x, min, max) {\n  if (x <= min) {\n    return 0;\n  }\n\n  if (x >= max) {\n    return 1;\n  }\n\n  x = (x - min) / (max - min);\n  return x * x * (3 - 2 * x);\n};\n\nmodule.exports = SmoothStep;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/SmoothStep.js"],"names":["SmoothStep","x","min","max","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;AAiBA,IAAIA,UAAU,GAAG,UAAUC,CAAV,EAAaC,GAAb,EAAkBC,GAAlB,EACjB;AACI,MAAIF,CAAC,IAAIC,GAAT,EACA;AACI,WAAO,CAAP;AACH;;AAED,MAAID,CAAC,IAAIE,GAAT,EACA;AACI,WAAO,CAAP;AACH;;AAEDF,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAGC,GAAL,KAAaC,GAAG,GAAGD,GAAnB,CAAJ;AAEA,SAAOD,CAAC,GAAGA,CAAJ,IAAS,IAAI,IAAIA,CAAjB,CAAP;AACH,CAfD;;AAiBAG,MAAM,CAACC,OAAP,GAAiBL,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Calculate a smooth interpolation percentage of `x` between `min` and `max`.\r\n *\r\n * The function receives the number `x` as an argument and returns 0 if `x` is less than or equal to the left edge,\r\n * 1 if `x` is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial,\r\n * between 0 and 1 otherwise.\r\n *\r\n * @function Phaser.Math.SmoothStep\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Smoothstep}\r\n *\r\n * @param {number} x - The input value.\r\n * @param {number} min - The minimum value, also known as the 'left edge', assumed smaller than the 'right edge'.\r\n * @param {number} max - The maximum value, also known as the 'right edge', assumed greater than the 'left edge'.\r\n *\r\n * @return {number} The percentage of interpolation, between 0 and 1.\r\n */\r\nvar SmoothStep = function (x, min, max)\r\n{\r\n    if (x <= min)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    if (x >= max)\r\n    {\r\n        return 1;\r\n    }\r\n\r\n    x = (x - min) / (max - min);\r\n\r\n    return x * x * (3 - 2 * x);\r\n};\r\n\r\nmodule.exports = SmoothStep;\r\n"]},"metadata":{},"sourceType":"script"}