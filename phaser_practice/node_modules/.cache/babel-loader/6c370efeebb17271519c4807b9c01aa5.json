{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n\nvar Circle = require('../../geom/circle/Circle');\n\nvar CircleContains = require('../../geom/circle/Contains');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n/**\r\n * @classdesc\r\n * A Zone Game Object.\r\n *\r\n * A Zone is a non-rendering rectangular Game Object that has a position and size.\r\n * It has no texture and never displays, but does live on the display list and\r\n * can be moved, scaled and rotated like any other Game Object.\r\n *\r\n * Its primary use is for creating Drop Zones and Input Hit Areas and it has a couple of helper methods\r\n * specifically for this. It is also useful for object overlap checks, or as a base for your own\r\n * non-displaying Game Objects.\r\n\r\n * The default origin is 0.5, the center of the Zone, the same as with Game Objects.\r\n *\r\n * @class Zone\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=1] - The width of the Game Object.\r\n * @param {number} [height=1] - The height of the Game Object.\r\n */\n\n\nvar Zone = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Depth, Components.GetBounds, Components.Origin, Components.Transform, Components.ScrollFactor, Components.Visible],\n  initialize: function Zone(scene, x, y, width, height) {\n    if (width === undefined) {\n      width = 1;\n    }\n\n    if (height === undefined) {\n      height = width;\n    }\n\n    GameObject.call(this, scene, 'Zone');\n    this.setPosition(x, y);\n    /**\r\n     * The native (un-scaled) width of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The native (un-scaled) height of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n    /**\r\n     * The Blend Mode of the Game Object.\r\n     * Although a Zone never renders, it still has a blend mode to allow it to fit seamlessly into\r\n     * display lists without causing a batch flush.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#blendMode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.blendMode = BlendModes.NORMAL;\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * The displayed width of this Game Object.\r\n   * This value takes into account the scale factor.\r\n   *\r\n   * @name Phaser.GameObjects.Zone#displayWidth\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  displayWidth: {\n    get: function () {\n      return this.scaleX * this.width;\n    },\n    set: function (value) {\n      this.scaleX = value / this.width;\n    }\n  },\n\n  /**\r\n   * The displayed height of this Game Object.\r\n   * This value takes into account the scale factor.\r\n   *\r\n   * @name Phaser.GameObjects.Zone#displayHeight\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  displayHeight: {\n    get: function () {\n      return this.scaleY * this.height;\n    },\n    set: function (value) {\n      this.scaleY = value / this.height;\n    }\n  },\n\n  /**\r\n   * Sets the size of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of this Game Object.\r\n   * @param {number} height - The height of this Game Object.\r\n   * @param {boolean} [resizeInput=true] - If this Zone has a Rectangle for a hit area this argument will resize the hit area as well.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setSize: function (width, height, resizeInput) {\n    if (resizeInput === undefined) {\n      resizeInput = true;\n    }\n\n    this.width = width;\n    this.height = height;\n    this.updateDisplayOrigin();\n    var input = this.input;\n\n    if (resizeInput && input && !input.customHitArea) {\n      input.hitArea.width = width;\n      input.hitArea.height = height;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the display size of this Game Object.\r\n   * Calling this will adjust the scale.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setDisplaySize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of this Game Object.\r\n   * @param {number} height - The height of this Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setDisplaySize: function (width, height) {\n    this.displayWidth = width;\n    this.displayHeight = height;\n    return this;\n  },\n\n  /**\r\n   * Sets this Zone to be a Circular Drop Zone.\r\n   * The circle is centered on this Zones `x` and `y` coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setCircleDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - The radius of the Circle that will form the Drop Zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setCircleDropZone: function (radius) {\n    return this.setDropZone(new Circle(0, 0, radius), CircleContains);\n  },\n\n  /**\r\n   * Sets this Zone to be a Rectangle Drop Zone.\r\n   * The rectangle is centered on this Zones `x` and `y` coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setRectangleDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the rectangle drop zone.\r\n   * @param {number} height - The height of the rectangle drop zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setRectangleDropZone: function (width, height) {\n    return this.setDropZone(new Rectangle(0, 0, width, height), RectangleContains);\n  },\n\n  /**\r\n   * Allows you to define your own Geometry shape to be used as a Drop Zone.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setDropZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} shape - A Geometry shape instance, such as Phaser.Geom.Ellipse, or your own custom shape.\r\n   * @param {Phaser.Types.Input.HitAreaCallback} callback - A function that will return `true` if the given x/y coords it is sent are within the shape.\r\n   *\r\n   * @return {Phaser.GameObjects.Zone} This Game Object.\r\n   */\n  setDropZone: function (shape, callback) {\n    if (shape === undefined) {\n      this.setRectangleDropZone(this.width, this.height);\n    } else if (!this.input) {\n      this.setInteractive(shape, callback, true);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * A NOOP method so you can pass a Zone to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setAlpha\r\n   * @private\r\n   * @since 3.11.0\r\n   */\n  setAlpha: function () {},\n\n  /**\r\n   * A NOOP method so you can pass a Zone to a Container in Canvas.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#setBlendMode\r\n   * @private\r\n   * @since 3.16.2\r\n   */\n  setBlendMode: function () {},\n\n  /**\r\n   * A Zone does not render.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#renderCanvas\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  renderCanvas: function () {},\n\n  /**\r\n   * A Zone does not render.\r\n   *\r\n   * @method Phaser.GameObjects.Zone#renderWebGL\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  renderWebGL: function () {}\n});\nmodule.exports = Zone;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/zone/Zone.js"],"names":["BlendModes","require","Circle","CircleContains","Class","Components","GameObject","Rectangle","RectangleContains","Zone","Extends","Mixins","Depth","GetBounds","Origin","Transform","ScrollFactor","Visible","initialize","scene","x","y","width","height","undefined","call","setPosition","blendMode","NORMAL","updateDisplayOrigin","displayWidth","get","scaleX","set","value","displayHeight","scaleY","setSize","resizeInput","input","customHitArea","hitArea","setDisplaySize","setCircleDropZone","radius","setDropZone","setRectangleDropZone","shape","callback","setInteractive","setAlpha","setBlendMode","renderCanvas","renderWebGL","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../../renderer/BlendModes');\r\nvar Circle = require('../../geom/circle/Circle');\r\nvar CircleContains = require('../../geom/circle/Contains');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar RectangleContains = require('../../geom/rectangle/Contains');\r\n\r\n/**\r\n * @classdesc\r\n * A Zone Game Object.\r\n *\r\n * A Zone is a non-rendering rectangular Game Object that has a position and size.\r\n * It has no texture and never displays, but does live on the display list and\r\n * can be moved, scaled and rotated like any other Game Object.\r\n *\r\n * Its primary use is for creating Drop Zones and Input Hit Areas and it has a couple of helper methods\r\n * specifically for this. It is also useful for object overlap checks, or as a base for your own\r\n * non-displaying Game Objects.\r\n\r\n * The default origin is 0.5, the center of the Zone, the same as with Game Objects.\r\n *\r\n * @class Zone\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=1] - The width of the Game Object.\r\n * @param {number} [height=1] - The height of the Game Object.\r\n */\r\nvar Zone = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Depth,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Transform,\r\n        Components.ScrollFactor,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Zone (scene, x, y, width, height)\r\n    {\r\n        if (width === undefined) { width = 1; }\r\n        if (height === undefined) { height = width; }\r\n\r\n        GameObject.call(this, scene, 'Zone');\r\n\r\n        this.setPosition(x, y);\r\n\r\n        /**\r\n         * The native (un-scaled) width of this Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The native (un-scaled) height of this Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n\r\n        /**\r\n         * The Blend Mode of the Game Object.\r\n         * Although a Zone never renders, it still has a blend mode to allow it to fit seamlessly into\r\n         * display lists without causing a batch flush.\r\n         *\r\n         * @name Phaser.GameObjects.Zone#blendMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.blendMode = BlendModes.NORMAL;\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * The displayed width of this Game Object.\r\n     * This value takes into account the scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#displayWidth\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    displayWidth: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.scaleX * this.width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.scaleX = value / this.width;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The displayed height of this Game Object.\r\n     * This value takes into account the scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Zone#displayHeight\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    displayHeight: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.scaleY * this.height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.scaleY = value / this.height;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the size of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of this Game Object.\r\n     * @param {number} height - The height of this Game Object.\r\n     * @param {boolean} [resizeInput=true] - If this Zone has a Rectangle for a hit area this argument will resize the hit area as well.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setSize: function (width, height, resizeInput)\r\n    {\r\n        if (resizeInput === undefined) { resizeInput = true; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.updateDisplayOrigin();\r\n\r\n        var input = this.input;\r\n\r\n        if (resizeInput && input && !input.customHitArea)\r\n        {\r\n            input.hitArea.width = width;\r\n            input.hitArea.height = height;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the display size of this Game Object.\r\n     * Calling this will adjust the scale.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setDisplaySize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of this Game Object.\r\n     * @param {number} height - The height of this Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setDisplaySize: function (width, height)\r\n    {\r\n        this.displayWidth = width;\r\n        this.displayHeight = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Zone to be a Circular Drop Zone.\r\n     * The circle is centered on this Zones `x` and `y` coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setCircleDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - The radius of the Circle that will form the Drop Zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setCircleDropZone: function (radius)\r\n    {\r\n        return this.setDropZone(new Circle(0, 0, radius), CircleContains);\r\n    },\r\n\r\n    /**\r\n     * Sets this Zone to be a Rectangle Drop Zone.\r\n     * The rectangle is centered on this Zones `x` and `y` coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setRectangleDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the rectangle drop zone.\r\n     * @param {number} height - The height of the rectangle drop zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setRectangleDropZone: function (width, height)\r\n    {\r\n        return this.setDropZone(new Rectangle(0, 0, width, height), RectangleContains);\r\n    },\r\n\r\n    /**\r\n     * Allows you to define your own Geometry shape to be used as a Drop Zone.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setDropZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} shape - A Geometry shape instance, such as Phaser.Geom.Ellipse, or your own custom shape.\r\n     * @param {Phaser.Types.Input.HitAreaCallback} callback - A function that will return `true` if the given x/y coords it is sent are within the shape.\r\n     *\r\n     * @return {Phaser.GameObjects.Zone} This Game Object.\r\n     */\r\n    setDropZone: function (shape, callback)\r\n    {\r\n        if (shape === undefined)\r\n        {\r\n            this.setRectangleDropZone(this.width, this.height);\r\n        }\r\n        else if (!this.input)\r\n        {\r\n            this.setInteractive(shape, callback, true);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass a Zone to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setAlpha\r\n     * @private\r\n     * @since 3.11.0\r\n     */\r\n    setAlpha: function ()\r\n    {\r\n    },\r\n    \r\n    /**\r\n     * A NOOP method so you can pass a Zone to a Container in Canvas.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#setBlendMode\r\n     * @private\r\n     * @since 3.16.2\r\n     */\r\n    setBlendMode: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A Zone does not render.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#renderCanvas\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    renderCanvas: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A Zone does not render.\r\n     *\r\n     * @method Phaser.GameObjects.Zone#renderWebGL\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    renderWebGL: function ()\r\n    {\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Zone;\r\n"]},"metadata":{},"sourceType":"script"}