{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SafeRange = require('./SafeRange');\n/**\r\n * Passes each element in the array, between the start and end indexes, to the given callback.\r\n *\r\n * @function Phaser.Utils.Array.EachInRange\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {function} callback - A callback to be invoked for each item in the array.\r\n * @param {object} context - The context in which the callback is invoked.\r\n * @param {integer} startIndex - The start index to search from.\r\n * @param {integer} endIndex - The end index to search to.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n *\r\n * @return {array} The input array.\r\n */\n\n\nvar EachInRange = function (array, callback, context, startIndex, endIndex) {\n  if (startIndex === undefined) {\n    startIndex = 0;\n  }\n\n  if (endIndex === undefined) {\n    endIndex = array.length;\n  }\n\n  if (SafeRange(array, startIndex, endIndex)) {\n    var i;\n    var args = [null];\n\n    for (i = 5; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (i = startIndex; i < endIndex; i++) {\n      args[0] = array[i];\n      callback.apply(context, args);\n    }\n  }\n\n  return array;\n};\n\nmodule.exports = EachInRange;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/EachInRange.js"],"names":["SafeRange","require","EachInRange","array","callback","context","startIndex","endIndex","undefined","length","i","args","arguments","push","apply","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,WAAW,GAAG,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,OAA3B,EAAoCC,UAApC,EAAgDC,QAAhD,EAClB;AACI,MAAID,UAAU,KAAKE,SAAnB,EAA8B;AAAEF,IAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,MAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAAED,IAAAA,QAAQ,GAAGJ,KAAK,CAACM,MAAjB;AAA0B;;AAExD,MAAIT,SAAS,CAACG,KAAD,EAAQG,UAAR,EAAoBC,QAApB,CAAb,EACA;AACI,QAAIG,CAAJ;AACA,QAAIC,IAAI,GAAG,CAAE,IAAF,CAAX;;AAEA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGE,SAAS,CAACH,MAA1B,EAAkCC,CAAC,EAAnC,EACA;AACIC,MAAAA,IAAI,CAACE,IAAL,CAAUD,SAAS,CAACF,CAAD,CAAnB;AACH;;AAED,SAAKA,CAAC,GAAGJ,UAAT,EAAqBI,CAAC,GAAGH,QAAzB,EAAmCG,CAAC,EAApC,EACA;AACIC,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUR,KAAK,CAACO,CAAD,CAAf;AAEAN,MAAAA,QAAQ,CAACU,KAAT,CAAeT,OAAf,EAAwBM,IAAxB;AACH;AACJ;;AAED,SAAOR,KAAP;AACH,CAxBD;;AA0BAY,MAAM,CAACC,OAAP,GAAiBd,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Passes each element in the array, between the start and end indexes, to the given callback.\r\n *\r\n * @function Phaser.Utils.Array.EachInRange\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {function} callback - A callback to be invoked for each item in the array.\r\n * @param {object} context - The context in which the callback is invoked.\r\n * @param {integer} startIndex - The start index to search from.\r\n * @param {integer} endIndex - The end index to search to.\r\n * @param {...*} [args] - Additional arguments that will be passed to the callback, after the child.\r\n *\r\n * @return {array} The input array.\r\n */\r\nvar EachInRange = function (array, callback, context, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        var i;\r\n        var args = [ null ];\r\n\r\n        for (i = 5; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (i = startIndex; i < endIndex; i++)\r\n        {\r\n            args[0] = array[i];\r\n\r\n            callback.apply(context, args);\r\n        }\r\n    }\r\n\r\n    return array;\r\n};\r\n\r\nmodule.exports = EachInRange;\r\n"]},"metadata":{},"sourceType":"script"}