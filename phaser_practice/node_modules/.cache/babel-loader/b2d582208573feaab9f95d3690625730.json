{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar DOMElementRender = require('./DOMElementRender');\n\nvar GameObject = require('../GameObject');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar RemoveFromDOM = require('../../dom/RemoveFromDOM');\n\nvar SCENE_EVENTS = require('../../scene/events');\n\nvar Vector4 = require('../../math/Vector4');\n/**\r\n * @classdesc\r\n * DOM Element Game Objects are a way to control and manipulate HTML Elements over the top of your game.\r\n * \r\n * In order for DOM Elements to display you have to enable them by adding the following to your game\r\n * configuration object:\r\n * \r\n * ```javascript\r\n * dom {\r\n *   createContainer: true\r\n * }\r\n * ```\r\n * \r\n * When this is added, Phaser will automatically create a DOM Container div that is positioned over the top\r\n * of the game canvas. This div is sized to match the canvas, and if the canvas size changes, as a result of\r\n * settings within the Scale Manager, the dom container is resized accordingly.\r\n * \r\n * You can create a DOM Element by either passing in DOMStrings, or by passing in a reference to an existing\r\n * Element that you wish to be placed under the control of Phaser. For example:\r\n * \r\n * ```javascript\r\n * this.add.dom(x, y, 'div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n * ```\r\n * \r\n * The above code will insert a div element into the DOM Container at the given x/y coordinate. The DOMString in\r\n * the 4th argument sets the initial CSS style of the div and the final argument is the inner text. In this case,\r\n * it will create a lime colored div that is 220px by 100px in size with the text Phaser in it, in an Arial font.\r\n * \r\n * You should nearly always, without exception, use explicitly sized HTML Elements, in order to fully control\r\n * alignment and positioning of the elements next to regular game content.\r\n * \r\n * Rather than specify the CSS and HTML directly you can use the `load.html` File Loader to load it into the\r\n * cache and then use the `createFromCache` method instead. You can also use `createFromHTML` and various other\r\n * methods available in this class to help construct your elements.\r\n * \r\n * Once the element has been created you can then control it like you would any other Game Object. You can set its\r\n * position, scale, rotation, alpha and other properties. It will move as the main Scene Camera moves and be clipped\r\n * at the edge of the canvas. It's important to remember some limitations of DOM Elements: The obvious one is that\r\n * they appear above or below your game canvas. You cannot blend them into the display list, meaning you cannot have\r\n * a DOM Element, then a Sprite, then another DOM Element behind it.\r\n * \r\n * They also cannot be enabled for input. To do that, you have to use the `addListener` method to add native event\r\n * listeners directly. The final limitation is to do with cameras. The DOM Container is sized to match the game canvas\r\n * entirely and clipped accordingly. DOM Elements respect camera scrolling and scrollFactor settings, but if you\r\n * change the size of the camera so it no longer matches the size of the canvas, they won't be clipped accordingly.\r\n * \r\n * Also, all DOM Elements are inserted into the same DOM Container, regardless of which Scene they are created in.\r\n * \r\n * DOM Elements are a powerful way to align native HTML with your Phaser Game Objects. For example, you can insert\r\n * a login form for a multiplayer game directly into your title screen. Or a text input box for a highscore table.\r\n * Or a banner ad from a 3rd party service. Or perhaps you'd like to use them for high resolution text display and\r\n * UI. The choice is up to you, just remember that you're dealing with standard HTML and CSS floating over the top\r\n * of your game, and should treat it accordingly.\r\n *\r\n * @class DOMElement\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this DOM Element in the world.\r\n * @param {number} [y=0] - The vertical position of this DOM Element in the world.\r\n * @param {(Element|string)} [element] - An existing DOM element, or a string. If a string starting with a # it will do a `getElementById` look-up on the string (minus the hash). Without a hash, it represents the type of element to create, i.e. 'div'.\r\n * @param {(string|any)} [style] - If a string, will be set directly as the elements `style` property value. If a plain object, will be iterated and the values transferred. In both cases the values replacing whatever CSS styles may have been previously set.\r\n * @param {string} [innerText] - If given, will be set directly as the elements `innerText` property value, replacing whatever was there before.\r\n */\n\n\nvar DOMElement = new Class({\n  Extends: GameObject,\n  Mixins: [Components.AlphaSingle, Components.BlendMode, Components.Depth, Components.Origin, Components.ScrollFactor, Components.Transform, Components.Visible, DOMElementRender],\n  initialize: function DOMElement(scene, x, y, element, style, innerText) {\n    GameObject.call(this, scene, 'DOMElement');\n    /**\r\n     * A reference to the parent DOM Container that the Game instance created when it started.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#parent\r\n     * @type {Element}\r\n     * @since 3.17.0\r\n     */\n\n    this.parent = scene.sys.game.domContainer;\n    /**\r\n     * A reference to the HTML Cache.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#cache\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @since 3.17.0\r\n     */\n\n    this.cache = scene.sys.cache.html;\n    /**\r\n     * The actual DOM Element that this Game Object is bound to. For example, if you've created a `<div>`\r\n     * then this property is a direct reference to that element within the dom.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#node\r\n     * @type {Element}\r\n     * @since 3.17.0\r\n     */\n\n    this.node;\n    /**\r\n     * By default a DOM Element will have its transform, display, opacity, zIndex and blend mode properties\r\n     * updated when its rendered. If, for some reason, you don't want any of these changed other than the\r\n     * CSS transform, then set this flag to `true`. When `true` only the CSS Transform is applied and it's\r\n     * up to you to keep track of and set the other properties as required.\r\n     * \r\n     * This can be handy if, for example, you've a nested DOM Element and you don't want the opacity to be\r\n     * picked-up by any of its children.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#transformOnly\r\n     * @type {boolean}\r\n     * @since 3.17.0\r\n     */\n\n    this.transformOnly = false;\n    /**\r\n     * The angle, in radians, by which to skew the DOM Element on the horizontal axis.\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#skewX\r\n     * @type {number}\r\n     * @since 3.17.0\r\n     */\n\n    this.skewX = 0;\n    /**\r\n     * The angle, in radians, by which to skew the DOM Element on the vertical axis.\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#skewY\r\n     * @type {number}\r\n     * @since 3.17.0\r\n     */\n\n    this.skewY = 0;\n    /**\r\n     * A Vector4 that contains the 3D rotation of this DOM Element around a fixed axis in 3D space.\r\n     * \r\n     * All values in the Vector4 are treated as degrees, unless the `rotate3dAngle` property is changed.\r\n     * \r\n     * For more details see the following MDN page:\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#rotate3d\r\n     * @type {Phaser.Math.Vector4}\r\n     * @since 3.17.0\r\n     */\n\n    this.rotate3d = new Vector4();\n    /**\r\n     * The unit that represents the 3D rotation values. By default this is `deg` for degrees, but can\r\n     * be changed to any supported unit. See this page for further details:\r\n     * \r\n     * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#rotate3dAngle\r\n     * @type {string}\r\n     * @since 3.17.0\r\n     */\n\n    this.rotate3dAngle = 'deg';\n    /**\r\n     * The native (un-scaled) width of this Game Object.\r\n     * \r\n     * For a DOM Element this property is read-only.\r\n     * \r\n     * The property `displayWidth` holds the computed bounds of this DOM Element, factoring in scaling.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#width\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.17.0\r\n     */\n\n    this.width = 0;\n    /**\r\n     * The native (un-scaled) height of this Game Object.\r\n     * \r\n     * For a DOM Element this property is read-only.\r\n     * \r\n     * The property `displayHeight` holds the computed bounds of this DOM Element, factoring in scaling.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#height\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.17.0\r\n     */\n\n    this.height = 0;\n    /**\r\n     * The computed display width of this Game Object, based on the `getBoundingClientRect` DOM call.\r\n     * \r\n     * The property `width` holds the un-scaled width of this DOM Element.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#displayWidth\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.17.0\r\n     */\n\n    this.displayWidth = 0;\n    /**\r\n     * The computed display height of this Game Object, based on the `getBoundingClientRect` DOM call.\r\n     * \r\n     * The property `height` holds the un-scaled height of this DOM Element.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#displayHeight\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.17.0\r\n     */\n\n    this.displayHeight = 0;\n    /**\r\n     * Internal native event handler.\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#handler\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.17.0\r\n     */\n\n    this.handler = this.dispatchNativeEvent.bind(this);\n    this.setPosition(x, y);\n\n    if (typeof element === 'string') {\n      //  hash?\n      if (element[0] === '#') {\n        this.setElement(element.substr(1), style, innerText);\n      } else {\n        this.createElement(element, style, innerText);\n      }\n    } else if (element) {\n      this.setElement(element, style, innerText);\n    }\n\n    scene.sys.events.on(SCENE_EVENTS.SLEEP, this.handleSceneEvent, this);\n    scene.sys.events.on(SCENE_EVENTS.WAKE, this.handleSceneEvent, this);\n  },\n\n  /**\r\n   * Handles a Scene Sleep and Wake event.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#handleSceneEvent\r\n   * @private\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Scenes.Systems} sys - The Scene Systems.\r\n   */\n  handleSceneEvent: function (sys) {\n    var node = this.node;\n    var style = node.style;\n\n    if (node) {\n      style.display = sys.settings.visible ? 'block' : 'none';\n    }\n  },\n\n  /**\r\n   * Sets the horizontal and vertical skew values of this DOM Element.\r\n   * \r\n   * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setSkew\r\n   * @since 3.17.0\r\n   *\r\n   * @param {number} [x=0] - The angle, in radians, by which to skew the DOM Element on the horizontal axis.\r\n   * @param {number} [y=x] - The angle, in radians, by which to skew the DOM Element on the vertical axis.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setSkew: function (x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.skewX = x;\n    this.skewY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the perspective CSS property of the _parent DOM Container_. This determines the distance between the z=0\r\n   * plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with\r\n   * z > 0 becomes larger; each 3D-element with z < 0 becomes smaller. The strength of the effect is determined\r\n   * by the value of this property.\r\n   * \r\n   * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/perspective\r\n   * \r\n   * **Changing this value changes it globally for all DOM Elements, as they all share the same parent container.**\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setPerspective\r\n   * @since 3.17.0\r\n   *\r\n   * @param {number} value - The perspective value, in pixels, that determines the distance between the z plane and the user.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setPerspective: function (value) {\n    this.parent.style.perspective = value + 'px';\n    return this;\n  },\n\n  /**\r\n   * The perspective CSS property value of the _parent DOM Container_. This determines the distance between the z=0\r\n   * plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with\r\n   * z > 0 becomes larger; each 3D-element with z < 0 becomes smaller. The strength of the effect is determined\r\n   * by the value of this property.\r\n   * \r\n   * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/perspective\r\n   * \r\n   * **Changing this value changes it globally for all DOM Elements, as they all share the same parent container.**\r\n   * \r\n   * @name Phaser.GameObjects.DOMElement#perspective\r\n   * @type {number}\r\n   * @since 3.17.0\r\n   */\n  perspective: {\n    get: function () {\n      return parseFloat(this.parent.style.perspective);\n    },\n    set: function (value) {\n      this.parent.style.perspective = value + 'px';\n    }\n  },\n\n  /**\r\n   * Adds one or more native DOM event listeners onto the underlying Element of this Game Object.\r\n   * The event is then dispatched via this Game Objects standard event emitter.\r\n   * \r\n   * For example:\r\n   * \r\n   * ```javascript\r\n   * var div = this.add.dom(x, y, element);\r\n   * \r\n   * div.addListener('click');\r\n   * \r\n   * div.on('click', handler);\r\n   * ```\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#addListener\r\n   * @since 3.17.0\r\n   *\r\n   * @param {string} events - The DOM event/s to listen for. You can specify multiple events by separating them with spaces.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  addListener: function (events) {\n    if (this.node) {\n      events = events.split(' ');\n\n      for (var i = 0; i < events.length; i++) {\n        this.node.addEventListener(events[i], this.handler, false);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Removes one or more native DOM event listeners from the underlying Element of this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#removeListener\r\n   * @since 3.17.0\r\n   *\r\n   * @param {string} events - The DOM event/s to stop listening for. You can specify multiple events by separating them with spaces.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  removeListener: function (events) {\n    if (this.node) {\n      events = events.split(' ');\n\n      for (var i = 0; i < events.length; i++) {\n        this.node.removeEventListener(events[i], this.handler);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal event proxy to dispatch native DOM Events via this Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#dispatchNativeEvent\r\n   * @private\r\n   * @since 3.17.0\r\n   *\r\n   * @param {any} event - The native DOM event.\r\n   */\n  dispatchNativeEvent: function (event) {\n    this.emit(event.type, event);\n  },\n\n  /**\r\n   * Creates a native DOM Element, adds it to the parent DOM Container and then binds it to this Game Object,\r\n   * so you can control it. The `tagName` should be a string and is passed to `document.createElement`:\r\n   * \r\n   * ```javascript\r\n   * this.add.dom().createElement('div');\r\n   * ```\r\n   * \r\n   * For more details on acceptable tag names see: https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\r\n   * \r\n   * You can also pass in a DOMString or style object to set the CSS on the created element, and an optional `innerText`\r\n   * value as well. Here is an example of a DOMString:\r\n   * \r\n   * ```javascript\r\n   * this.add.dom().createElement('div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n   * ```\r\n   * \r\n   * And using a style object:\r\n   * \r\n   * ```javascript\r\n   * var style = {\r\n   *   'background-color': 'lime';\r\n   *   'width': '200px';\r\n   *   'height': '100px';\r\n   *   'font': '48px Arial';\r\n   * };\r\n   * \r\n   * this.add.dom().createElement('div', style, 'Phaser');\r\n   * ```\r\n   * \r\n   * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n   * Any event listeners you may have previously created will need to be re-created after this call.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#createElement\r\n   * @since 3.17.0\r\n   *\r\n   * @param {string} tagName - A string that specifies the type of element to be created. The nodeName of the created element is initialized with the value of tagName. Don't use qualified names (like \"html:a\") with this method.\r\n   * @param {(string|any)} [style] - Either a DOMString that holds the CSS styles to be applied to the created element, or an object the styles will be ready from.\r\n   * @param {string} [innerText] - A DOMString that holds the text that will be set as the innerText of the created element.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  createElement: function (tagName, style, innerText) {\n    return this.setElement(document.createElement(tagName), style, innerText);\n  },\n\n  /**\r\n   * Binds a new DOM Element to this Game Object. If this Game Object already has an Element it is removed from the DOM\r\n   * entirely first. Any event listeners you may have previously created will need to be re-created on the new element.\r\n   * \r\n   * The `element` argument you pass to this method can be either a string tagName:\r\n   * \r\n   * ```javascript\r\n   * <h1 id=\"heading\">Phaser</h1>\r\n   *\r\n   * this.add.dom().setElement('heading');\r\n   * ```\r\n   * \r\n   * Or a reference to an Element instance:\r\n   * \r\n   * ```javascript\r\n   * <h1 id=\"heading\">Phaser</h1>\r\n   *\r\n   * var h1 = document.getElementById('heading');\r\n   * \r\n   * this.add.dom().setElement(h1);\r\n   * ```\r\n   * \r\n   * You can also pass in a DOMString or style object to set the CSS on the created element, and an optional `innerText`\r\n   * value as well. Here is an example of a DOMString:\r\n   * \r\n   * ```javascript\r\n   * this.add.dom().setElement(h1, 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n   * ```\r\n   * \r\n   * And using a style object:\r\n   * \r\n   * ```javascript\r\n   * var style = {\r\n   *   'background-color': 'lime';\r\n   *   'width': '200px';\r\n   *   'height': '100px';\r\n   *   'font': '48px Arial';\r\n   * };\r\n   * \r\n   * this.add.dom().setElement(h1, style, 'Phaser');\r\n   * ```\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setElement\r\n   * @since 3.17.0\r\n   *\r\n   * @param {(string|Element)} element - If a string it is passed to `getElementById()`, or it should be a reference to an existing Element.\r\n   * @param {(string|any)} [style] - Either a DOMString that holds the CSS styles to be applied to the created element, or an object the styles will be ready from.\r\n   * @param {string} [innerText] - A DOMString that holds the text that will be set as the innerText of the created element.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setElement: function (element, style, innerText) {\n    //  Already got an element? Remove it first\n    this.removeElement();\n    var target;\n\n    if (typeof element === 'string') {\n      //  hash?\n      if (element[0] === '#') {\n        element = element.substr(1);\n      }\n\n      target = document.getElementById(element);\n    } else if (typeof element === 'object' && element.nodeType === 1) {\n      target = element;\n    }\n\n    if (!target) {\n      return this;\n    }\n\n    this.node = target; //  style can be empty, a string or a plain object\n\n    if (style && IsPlainObject(style)) {\n      for (var key in style) {\n        target.style[key] = style[key];\n      }\n    } else if (typeof style === 'string') {\n      target.style = style;\n    } //  Add / Override the values we need\n\n\n    target.style.zIndex = '0';\n    target.style.display = 'inline';\n    target.style.position = 'absolute'; //  Node handler\n\n    target.phaser = this;\n\n    if (this.parent) {\n      this.parent.appendChild(target);\n    } //  InnerText\n\n\n    if (innerText) {\n      target.innerText = innerText;\n    }\n\n    return this.updateSize();\n  },\n\n  /**\r\n   * Takes a block of html from the HTML Cache, that has previously been preloaded into the game, and then\r\n   * creates a DOM Element from it. The loaded HTML is set as the `innerHTML` property of the created\r\n   * element.\r\n   * \r\n   * Assume the following html is stored in a file called `loginform.html`:\r\n   * \r\n   * ```html\r\n   * <input type=\"text\" name=\"nameField\" placeholder=\"Enter your name\" style=\"font-size: 32px\">\r\n   * <input type=\"button\" name=\"playButton\" value=\"Let's Play\" style=\"font-size: 32px\">\r\n   * ```\r\n   * \r\n   * Which is loaded into your game using the cache key 'login':\r\n   * \r\n   * ```javascript\r\n   * this.load.html('login', 'assets/loginform.html');\r\n   * ```\r\n   * \r\n   * You can create a DOM Element from it using the cache key:\r\n   * \r\n   * ```javascript\r\n   * this.add.dom().createFromCache('login');\r\n   * ```\r\n   * \r\n   * The optional `elementType` argument controls the container that is created, into which the loaded html is inserted.\r\n   * The default is a plain `div` object, but any valid tagName can be given.\r\n   * \r\n   * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n   * Any event listeners you may have previously created will need to be re-created after this call.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#createFromCache\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} The key of the html cache entry to use for this DOM Element.\r\n   * @param {string} [tagName='div'] - The tag name of the element into which all of the loaded html will be inserted. Defaults to a plain div tag.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  createFromCache: function (key, tagName) {\n    var html = this.cache.get(key);\n\n    if (html) {\n      this.createFromHTML(html, tagName);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Takes a string of html and then creates a DOM Element from it. The HTML is set as the `innerHTML`\r\n   * property of the created element.\r\n   * \r\n   * ```javascript\r\n   * let form = `\r\n   * <input type=\"text\" name=\"nameField\" placeholder=\"Enter your name\" style=\"font-size: 32px\">\r\n   * <input type=\"button\" name=\"playButton\" value=\"Let's Play\" style=\"font-size: 32px\">\r\n   * `;\r\n   * ```\r\n   * \r\n   * You can create a DOM Element from it using the string:\r\n   * \r\n   * ```javascript\r\n   * this.add.dom().createFromHTML(form);\r\n   * ```\r\n   * \r\n   * The optional `elementType` argument controls the type of container that is created, into which the html is inserted.\r\n   * The default is a plain `div` object, but any valid tagName can be given.\r\n   * \r\n   * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n   * Any event listeners you may have previously created will need to be re-created after this call.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#createFromHTML\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} A string of html to be set as the `innerHTML` property of the created element.\r\n   * @param {string} [tagName='div'] - The tag name of the element into which all of the html will be inserted. Defaults to a plain div tag.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  createFromHTML: function (html, tagName) {\n    if (tagName === undefined) {\n      tagName = 'div';\n    } //  Already got an element? Remove it first\n\n\n    this.removeElement();\n    var element = document.createElement(tagName);\n    this.node = element;\n    element.style.zIndex = '0';\n    element.style.display = 'inline';\n    element.style.position = 'absolute'; //  Node handler\n\n    element.phaser = this;\n\n    if (this.parent) {\n      this.parent.appendChild(element);\n    }\n\n    element.innerHTML = html;\n    return this.updateSize();\n  },\n\n  /**\r\n   * Removes the current DOM Element bound to this Game Object from the DOM entirely and resets the\r\n   * `node` property of this Game Object to be `null`.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#removeElement\r\n   * @since 3.17.0\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  removeElement: function () {\n    if (this.node) {\n      RemoveFromDOM(this.node);\n      this.node = null;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal method that calls `getBoundingClientRect` on the `node` and then sets the bounds width\r\n   * and height into the `displayWidth` and `displayHeight` properties, and the `clientWidth` and `clientHeight`\r\n   * values into the `width` and `height` properties respectively.\r\n   * \r\n   * This is called automatically whenever a new element is created or set.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#updateSize\r\n   * @since 3.17.0\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  updateSize: function () {\n    var node = this.node;\n    var nodeBounds = node.getBoundingClientRect();\n    this.width = node.clientWidth;\n    this.height = node.clientHeight;\n    this.displayWidth = nodeBounds.width || 0;\n    this.displayHeight = nodeBounds.height || 0;\n    return this;\n  },\n\n  /**\r\n   * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n   * them, looking for the first one that has a property matching the given key and value. It then returns this child\r\n   * if found, or `null` if not.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#getChildByProperty\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} property - The property to search the children for.\r\n   * @param {string} value - The value the property must strictly equal.\r\n   * \r\n   * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n   */\n  getChildByProperty: function (property, value) {\n    if (this.node) {\n      var children = this.node.querySelectorAll('*');\n\n      for (var i = 0; i < children.length; i++) {\n        if (children[i][property] === value) {\n          return children[i];\n        }\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n   * them, looking for the first one that has a matching id. It then returns this child if found, or `null` if not.\r\n   * \r\n   * Be aware that class and id names are case-sensitive.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#getChildByID\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} id - The id to search the children for.\r\n   * \r\n   * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n   */\n  getChildByID: function (id) {\n    return this.getChildByProperty('id', id);\n  },\n\n  /**\r\n   * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n   * them, looking for the first one that has a matching name. It then returns this child if found, or `null` if not.\r\n   * \r\n   * Be aware that class and id names are case-sensitive.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#getChildByName\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} name - The name to search the children for.\r\n   * \r\n   * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n   */\n  getChildByName: function (name) {\n    return this.getChildByProperty('name', name);\n  },\n\n  /**\r\n   * Sets the `className` property of the DOM Element node and updates the internal sizes.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setClassName\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} className - A string representing the class or space-separated classes of the element.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setClassName: function (className) {\n    if (this.node) {\n      this.node.className = className;\n      this.updateSize();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the `innerText` property of the DOM Element node and updates the internal sizes.\r\n   * \r\n   * Note that only certain types of Elements can have `innerText` set on them.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setText\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} text - A DOMString representing the rendered text content of the element.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setText: function (text) {\n    if (this.node) {\n      this.node.innerText = text;\n      this.updateSize();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the `innerHTML` property of the DOM Element node and updates the internal sizes.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#setHTML\r\n   * @since 3.17.0\r\n   * \r\n   * @param {string} html - A DOMString of html to be set as the `innerHTML` property of the element.\r\n   * \r\n   * @return {this} This DOM Element instance.\r\n   */\n  setHTML: function (html) {\n    if (this.node) {\n      this.node.innerHTML = html;\n      this.updateSize();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Runs internal update tasks.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#preUpdate\r\n   * @private\r\n   * @since 3.17.0\r\n   */\n  preUpdate: function () {\n    var parent = this.parentContainer;\n    var node = this.node;\n\n    if (node && parent && !parent.willRender()) {\n      node.style.display = 'none';\n    }\n  },\n\n  /**\r\n   * Compares the renderMask with the renderFlags to see if this Game Object will render or not.\r\n   * \r\n   * DOMElements always return `true` as they need to still set values during the render pass, even if not visible.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#willRender\r\n   * @since 3.17.0\r\n   *\r\n   * @return {boolean} `true` if the Game Object should be rendered, otherwise `false`.\r\n   */\n  willRender: function () {\n    return true;\n  },\n\n  /**\r\n   * Handles the pre-destroy step for the DOM Element, which removes the underlying node from the DOM.\r\n   *\r\n   * @method Phaser.GameObjects.DOMElement#preDestroy\r\n   * @private\r\n   * @since 3.17.0\r\n   */\n  preDestroy: function () {\n    this.removeElement();\n    this.scene.sys.events.off(SCENE_EVENTS.SLEEP, this.handleSceneEvent, this);\n    this.scene.sys.events.off(SCENE_EVENTS.WAKE, this.handleSceneEvent, this);\n  }\n});\nmodule.exports = DOMElement;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/domelement/DOMElement.js"],"names":["Class","require","Components","DOMElementRender","GameObject","IsPlainObject","RemoveFromDOM","SCENE_EVENTS","Vector4","DOMElement","Extends","Mixins","AlphaSingle","BlendMode","Depth","Origin","ScrollFactor","Transform","Visible","initialize","scene","x","y","element","style","innerText","call","parent","sys","game","domContainer","cache","html","node","transformOnly","skewX","skewY","rotate3d","rotate3dAngle","width","height","displayWidth","displayHeight","handler","dispatchNativeEvent","bind","setPosition","setElement","substr","createElement","events","on","SLEEP","handleSceneEvent","WAKE","display","settings","visible","setSkew","undefined","setPerspective","value","perspective","get","parseFloat","set","addListener","split","i","length","addEventListener","removeListener","removeEventListener","event","emit","type","tagName","document","removeElement","target","getElementById","nodeType","key","zIndex","position","phaser","appendChild","updateSize","createFromCache","createFromHTML","innerHTML","nodeBounds","getBoundingClientRect","clientWidth","clientHeight","getChildByProperty","property","children","querySelectorAll","getChildByID","id","getChildByName","name","setClassName","className","setText","text","setHTML","preUpdate","parentContainer","willRender","preDestroy","off","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar DOMElementRender = require('./DOMElementRender');\r\nvar GameObject = require('../GameObject');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar RemoveFromDOM = require('../../dom/RemoveFromDOM');\r\nvar SCENE_EVENTS = require('../../scene/events');\r\nvar Vector4 = require('../../math/Vector4');\r\n\r\n/**\r\n * @classdesc\r\n * DOM Element Game Objects are a way to control and manipulate HTML Elements over the top of your game.\r\n * \r\n * In order for DOM Elements to display you have to enable them by adding the following to your game\r\n * configuration object:\r\n * \r\n * ```javascript\r\n * dom {\r\n *   createContainer: true\r\n * }\r\n * ```\r\n * \r\n * When this is added, Phaser will automatically create a DOM Container div that is positioned over the top\r\n * of the game canvas. This div is sized to match the canvas, and if the canvas size changes, as a result of\r\n * settings within the Scale Manager, the dom container is resized accordingly.\r\n * \r\n * You can create a DOM Element by either passing in DOMStrings, or by passing in a reference to an existing\r\n * Element that you wish to be placed under the control of Phaser. For example:\r\n * \r\n * ```javascript\r\n * this.add.dom(x, y, 'div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n * ```\r\n * \r\n * The above code will insert a div element into the DOM Container at the given x/y coordinate. The DOMString in\r\n * the 4th argument sets the initial CSS style of the div and the final argument is the inner text. In this case,\r\n * it will create a lime colored div that is 220px by 100px in size with the text Phaser in it, in an Arial font.\r\n * \r\n * You should nearly always, without exception, use explicitly sized HTML Elements, in order to fully control\r\n * alignment and positioning of the elements next to regular game content.\r\n * \r\n * Rather than specify the CSS and HTML directly you can use the `load.html` File Loader to load it into the\r\n * cache and then use the `createFromCache` method instead. You can also use `createFromHTML` and various other\r\n * methods available in this class to help construct your elements.\r\n * \r\n * Once the element has been created you can then control it like you would any other Game Object. You can set its\r\n * position, scale, rotation, alpha and other properties. It will move as the main Scene Camera moves and be clipped\r\n * at the edge of the canvas. It's important to remember some limitations of DOM Elements: The obvious one is that\r\n * they appear above or below your game canvas. You cannot blend them into the display list, meaning you cannot have\r\n * a DOM Element, then a Sprite, then another DOM Element behind it.\r\n * \r\n * They also cannot be enabled for input. To do that, you have to use the `addListener` method to add native event\r\n * listeners directly. The final limitation is to do with cameras. The DOM Container is sized to match the game canvas\r\n * entirely and clipped accordingly. DOM Elements respect camera scrolling and scrollFactor settings, but if you\r\n * change the size of the camera so it no longer matches the size of the canvas, they won't be clipped accordingly.\r\n * \r\n * Also, all DOM Elements are inserted into the same DOM Container, regardless of which Scene they are created in.\r\n * \r\n * DOM Elements are a powerful way to align native HTML with your Phaser Game Objects. For example, you can insert\r\n * a login form for a multiplayer game directly into your title screen. Or a text input box for a highscore table.\r\n * Or a banner ad from a 3rd party service. Or perhaps you'd like to use them for high resolution text display and\r\n * UI. The choice is up to you, just remember that you're dealing with standard HTML and CSS floating over the top\r\n * of your game, and should treat it accordingly.\r\n *\r\n * @class DOMElement\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.17.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this DOM Element in the world.\r\n * @param {number} [y=0] - The vertical position of this DOM Element in the world.\r\n * @param {(Element|string)} [element] - An existing DOM element, or a string. If a string starting with a # it will do a `getElementById` look-up on the string (minus the hash). Without a hash, it represents the type of element to create, i.e. 'div'.\r\n * @param {(string|any)} [style] - If a string, will be set directly as the elements `style` property value. If a plain object, will be iterated and the values transferred. In both cases the values replacing whatever CSS styles may have been previously set.\r\n * @param {string} [innerText] - If given, will be set directly as the elements `innerText` property value, replacing whatever was there before.\r\n */\r\nvar DOMElement = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.AlphaSingle,\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Origin,\r\n        Components.ScrollFactor,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        DOMElementRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DOMElement (scene, x, y, element, style, innerText)\r\n    {\r\n        GameObject.call(this, scene, 'DOMElement');\r\n\r\n        /**\r\n         * A reference to the parent DOM Container that the Game instance created when it started.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#parent\r\n         * @type {Element}\r\n         * @since 3.17.0\r\n         */\r\n        this.parent = scene.sys.game.domContainer;\r\n\r\n        /**\r\n         * A reference to the HTML Cache.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#cache\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @since 3.17.0\r\n         */\r\n        this.cache = scene.sys.cache.html;\r\n\r\n        /**\r\n         * The actual DOM Element that this Game Object is bound to. For example, if you've created a `<div>`\r\n         * then this property is a direct reference to that element within the dom.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#node\r\n         * @type {Element}\r\n         * @since 3.17.0\r\n         */\r\n        this.node;\r\n\r\n        /**\r\n         * By default a DOM Element will have its transform, display, opacity, zIndex and blend mode properties\r\n         * updated when its rendered. If, for some reason, you don't want any of these changed other than the\r\n         * CSS transform, then set this flag to `true`. When `true` only the CSS Transform is applied and it's\r\n         * up to you to keep track of and set the other properties as required.\r\n         * \r\n         * This can be handy if, for example, you've a nested DOM Element and you don't want the opacity to be\r\n         * picked-up by any of its children.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#transformOnly\r\n         * @type {boolean}\r\n         * @since 3.17.0\r\n         */\r\n        this.transformOnly = false;\r\n\r\n        /**\r\n         * The angle, in radians, by which to skew the DOM Element on the horizontal axis.\r\n         * \r\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#skewX\r\n         * @type {number}\r\n         * @since 3.17.0\r\n         */\r\n        this.skewX = 0;\r\n\r\n        /**\r\n         * The angle, in radians, by which to skew the DOM Element on the vertical axis.\r\n         * \r\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#skewY\r\n         * @type {number}\r\n         * @since 3.17.0\r\n         */\r\n        this.skewY = 0;\r\n\r\n        /**\r\n         * A Vector4 that contains the 3D rotation of this DOM Element around a fixed axis in 3D space.\r\n         * \r\n         * All values in the Vector4 are treated as degrees, unless the `rotate3dAngle` property is changed.\r\n         * \r\n         * For more details see the following MDN page:\r\n         * \r\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#rotate3d\r\n         * @type {Phaser.Math.Vector4}\r\n         * @since 3.17.0\r\n         */\r\n        this.rotate3d = new Vector4();\r\n\r\n        /**\r\n         * The unit that represents the 3D rotation values. By default this is `deg` for degrees, but can\r\n         * be changed to any supported unit. See this page for further details:\r\n         * \r\n         * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotate3d\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#rotate3dAngle\r\n         * @type {string}\r\n         * @since 3.17.0\r\n         */\r\n        this.rotate3dAngle = 'deg';\r\n\r\n        /**\r\n         * The native (un-scaled) width of this Game Object.\r\n         * \r\n         * For a DOM Element this property is read-only.\r\n         * \r\n         * The property `displayWidth` holds the computed bounds of this DOM Element, factoring in scaling.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#width\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.17.0\r\n         */\r\n        this.width = 0;\r\n\r\n        /**\r\n         * The native (un-scaled) height of this Game Object.\r\n         * \r\n         * For a DOM Element this property is read-only.\r\n         * \r\n         * The property `displayHeight` holds the computed bounds of this DOM Element, factoring in scaling.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#height\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.17.0\r\n         */\r\n        this.height = 0;\r\n\r\n        /**\r\n         * The computed display width of this Game Object, based on the `getBoundingClientRect` DOM call.\r\n         * \r\n         * The property `width` holds the un-scaled width of this DOM Element.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#displayWidth\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.17.0\r\n         */\r\n        this.displayWidth = 0;\r\n\r\n        /**\r\n         * The computed display height of this Game Object, based on the `getBoundingClientRect` DOM call.\r\n         * \r\n         * The property `height` holds the un-scaled height of this DOM Element.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#displayHeight\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.17.0\r\n         */\r\n        this.displayHeight = 0;\r\n\r\n        /**\r\n         * Internal native event handler.\r\n         * \r\n         * @name Phaser.GameObjects.DOMElement#handler\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.17.0\r\n         */\r\n        this.handler = this.dispatchNativeEvent.bind(this);\r\n\r\n        this.setPosition(x, y);\r\n\r\n        if (typeof element === 'string')\r\n        {\r\n            //  hash?\r\n            if (element[0] === '#')\r\n            {\r\n                this.setElement(element.substr(1), style, innerText);\r\n            }\r\n            else\r\n            {\r\n                this.createElement(element, style, innerText);\r\n            }\r\n        }\r\n        else if (element)\r\n        {\r\n            this.setElement(element, style, innerText);\r\n        }\r\n\r\n        scene.sys.events.on(SCENE_EVENTS.SLEEP, this.handleSceneEvent, this);\r\n        scene.sys.events.on(SCENE_EVENTS.WAKE, this.handleSceneEvent, this);\r\n    },\r\n\r\n    /**\r\n     * Handles a Scene Sleep and Wake event.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#handleSceneEvent\r\n     * @private\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Scenes.Systems} sys - The Scene Systems.\r\n     */\r\n    handleSceneEvent: function (sys)\r\n    {\r\n        var node = this.node;\r\n        var style = node.style;\r\n    \r\n        if (node)\r\n        {\r\n            style.display = (sys.settings.visible) ? 'block' : 'none';\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical skew values of this DOM Element.\r\n     * \r\n     * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/transform\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setSkew\r\n     * @since 3.17.0\r\n     *\r\n     * @param {number} [x=0] - The angle, in radians, by which to skew the DOM Element on the horizontal axis.\r\n     * @param {number} [y=x] - The angle, in radians, by which to skew the DOM Element on the vertical axis.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setSkew: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.skewX = x;\r\n        this.skewY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the perspective CSS property of the _parent DOM Container_. This determines the distance between the z=0\r\n     * plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with\r\n     * z > 0 becomes larger; each 3D-element with z < 0 becomes smaller. The strength of the effect is determined\r\n     * by the value of this property.\r\n     * \r\n     * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/perspective\r\n     * \r\n     * **Changing this value changes it globally for all DOM Elements, as they all share the same parent container.**\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setPerspective\r\n     * @since 3.17.0\r\n     *\r\n     * @param {number} value - The perspective value, in pixels, that determines the distance between the z plane and the user.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setPerspective: function (value)\r\n    {\r\n        this.parent.style.perspective = value + 'px';\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The perspective CSS property value of the _parent DOM Container_. This determines the distance between the z=0\r\n     * plane and the user in order to give a 3D-positioned element some perspective. Each 3D element with\r\n     * z > 0 becomes larger; each 3D-element with z < 0 becomes smaller. The strength of the effect is determined\r\n     * by the value of this property.\r\n     * \r\n     * For more information see: https://developer.mozilla.org/en-US/docs/Web/CSS/perspective\r\n     * \r\n     * **Changing this value changes it globally for all DOM Elements, as they all share the same parent container.**\r\n     * \r\n     * @name Phaser.GameObjects.DOMElement#perspective\r\n     * @type {number}\r\n     * @since 3.17.0\r\n     */\r\n    perspective: {\r\n\r\n        get: function ()\r\n        {\r\n            return parseFloat(this.parent.style.perspective);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.parent.style.perspective = value + 'px';\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Adds one or more native DOM event listeners onto the underlying Element of this Game Object.\r\n     * The event is then dispatched via this Game Objects standard event emitter.\r\n     * \r\n     * For example:\r\n     * \r\n     * ```javascript\r\n     * var div = this.add.dom(x, y, element);\r\n     * \r\n     * div.addListener('click');\r\n     * \r\n     * div.on('click', handler);\r\n     * ```\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#addListener\r\n     * @since 3.17.0\r\n     *\r\n     * @param {string} events - The DOM event/s to listen for. You can specify multiple events by separating them with spaces.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    addListener: function (events)\r\n    {\r\n        if (this.node)\r\n        {\r\n            events = events.split(' ');\r\n\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                this.node.addEventListener(events[i], this.handler, false);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes one or more native DOM event listeners from the underlying Element of this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#removeListener\r\n     * @since 3.17.0\r\n     *\r\n     * @param {string} events - The DOM event/s to stop listening for. You can specify multiple events by separating them with spaces.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    removeListener: function (events)\r\n    {\r\n        if (this.node)\r\n        {\r\n            events = events.split(' ');\r\n\r\n            for (var i = 0; i < events.length; i++)\r\n            {\r\n                this.node.removeEventListener(events[i], this.handler);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal event proxy to dispatch native DOM Events via this Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#dispatchNativeEvent\r\n     * @private\r\n     * @since 3.17.0\r\n     *\r\n     * @param {any} event - The native DOM event.\r\n     */\r\n    dispatchNativeEvent: function (event)\r\n    {\r\n        this.emit(event.type, event);\r\n    },\r\n\r\n    /**\r\n     * Creates a native DOM Element, adds it to the parent DOM Container and then binds it to this Game Object,\r\n     * so you can control it. The `tagName` should be a string and is passed to `document.createElement`:\r\n     * \r\n     * ```javascript\r\n     * this.add.dom().createElement('div');\r\n     * ```\r\n     * \r\n     * For more details on acceptable tag names see: https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement\r\n     * \r\n     * You can also pass in a DOMString or style object to set the CSS on the created element, and an optional `innerText`\r\n     * value as well. Here is an example of a DOMString:\r\n     * \r\n     * ```javascript\r\n     * this.add.dom().createElement('div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n     * ```\r\n     * \r\n     * And using a style object:\r\n     * \r\n     * ```javascript\r\n     * var style = {\r\n     *   'background-color': 'lime';\r\n     *   'width': '200px';\r\n     *   'height': '100px';\r\n     *   'font': '48px Arial';\r\n     * };\r\n     * \r\n     * this.add.dom().createElement('div', style, 'Phaser');\r\n     * ```\r\n     * \r\n     * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n     * Any event listeners you may have previously created will need to be re-created after this call.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#createElement\r\n     * @since 3.17.0\r\n     *\r\n     * @param {string} tagName - A string that specifies the type of element to be created. The nodeName of the created element is initialized with the value of tagName. Don't use qualified names (like \"html:a\") with this method.\r\n     * @param {(string|any)} [style] - Either a DOMString that holds the CSS styles to be applied to the created element, or an object the styles will be ready from.\r\n     * @param {string} [innerText] - A DOMString that holds the text that will be set as the innerText of the created element.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    createElement: function (tagName, style, innerText)\r\n    {\r\n        return this.setElement(document.createElement(tagName), style, innerText);\r\n    },\r\n\r\n    /**\r\n     * Binds a new DOM Element to this Game Object. If this Game Object already has an Element it is removed from the DOM\r\n     * entirely first. Any event listeners you may have previously created will need to be re-created on the new element.\r\n     * \r\n     * The `element` argument you pass to this method can be either a string tagName:\r\n     * \r\n     * ```javascript\r\n     * <h1 id=\"heading\">Phaser</h1>\r\n     *\r\n     * this.add.dom().setElement('heading');\r\n     * ```\r\n     * \r\n     * Or a reference to an Element instance:\r\n     * \r\n     * ```javascript\r\n     * <h1 id=\"heading\">Phaser</h1>\r\n     *\r\n     * var h1 = document.getElementById('heading');\r\n     * \r\n     * this.add.dom().setElement(h1);\r\n     * ```\r\n     * \r\n     * You can also pass in a DOMString or style object to set the CSS on the created element, and an optional `innerText`\r\n     * value as well. Here is an example of a DOMString:\r\n     * \r\n     * ```javascript\r\n     * this.add.dom().setElement(h1, 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\r\n     * ```\r\n     * \r\n     * And using a style object:\r\n     * \r\n     * ```javascript\r\n     * var style = {\r\n     *   'background-color': 'lime';\r\n     *   'width': '200px';\r\n     *   'height': '100px';\r\n     *   'font': '48px Arial';\r\n     * };\r\n     * \r\n     * this.add.dom().setElement(h1, style, 'Phaser');\r\n     * ```\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setElement\r\n     * @since 3.17.0\r\n     *\r\n     * @param {(string|Element)} element - If a string it is passed to `getElementById()`, or it should be a reference to an existing Element.\r\n     * @param {(string|any)} [style] - Either a DOMString that holds the CSS styles to be applied to the created element, or an object the styles will be ready from.\r\n     * @param {string} [innerText] - A DOMString that holds the text that will be set as the innerText of the created element.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setElement: function (element, style, innerText)\r\n    {\r\n        //  Already got an element? Remove it first\r\n        this.removeElement();\r\n\r\n        var target;\r\n\r\n        if (typeof element === 'string')\r\n        {\r\n            //  hash?\r\n            if (element[0] === '#')\r\n            {\r\n                element = element.substr(1);\r\n            }\r\n\r\n            target = document.getElementById(element);\r\n        }\r\n        else if (typeof element === 'object' && element.nodeType === 1)\r\n        {\r\n            target = element;\r\n        }\r\n\r\n        if (!target)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.node = target;\r\n\r\n        //  style can be empty, a string or a plain object\r\n        if (style && IsPlainObject(style))\r\n        {\r\n            for (var key in style)\r\n            {\r\n                target.style[key] = style[key];\r\n            }\r\n        }\r\n        else if (typeof style === 'string')\r\n        {\r\n            target.style = style;\r\n        }\r\n\r\n        //  Add / Override the values we need\r\n\r\n        target.style.zIndex = '0';\r\n        target.style.display = 'inline';\r\n        target.style.position = 'absolute';\r\n\r\n        //  Node handler\r\n\r\n        target.phaser = this;\r\n\r\n        if (this.parent)\r\n        {\r\n            this.parent.appendChild(target);\r\n        }\r\n\r\n        //  InnerText\r\n\r\n        if (innerText)\r\n        {\r\n            target.innerText = innerText;\r\n        }\r\n\r\n        return this.updateSize();\r\n    },\r\n\r\n    /**\r\n     * Takes a block of html from the HTML Cache, that has previously been preloaded into the game, and then\r\n     * creates a DOM Element from it. The loaded HTML is set as the `innerHTML` property of the created\r\n     * element.\r\n     * \r\n     * Assume the following html is stored in a file called `loginform.html`:\r\n     * \r\n     * ```html\r\n     * <input type=\"text\" name=\"nameField\" placeholder=\"Enter your name\" style=\"font-size: 32px\">\r\n     * <input type=\"button\" name=\"playButton\" value=\"Let's Play\" style=\"font-size: 32px\">\r\n     * ```\r\n     * \r\n     * Which is loaded into your game using the cache key 'login':\r\n     * \r\n     * ```javascript\r\n     * this.load.html('login', 'assets/loginform.html');\r\n     * ```\r\n     * \r\n     * You can create a DOM Element from it using the cache key:\r\n     * \r\n     * ```javascript\r\n     * this.add.dom().createFromCache('login');\r\n     * ```\r\n     * \r\n     * The optional `elementType` argument controls the container that is created, into which the loaded html is inserted.\r\n     * The default is a plain `div` object, but any valid tagName can be given.\r\n     * \r\n     * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n     * Any event listeners you may have previously created will need to be re-created after this call.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#createFromCache\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} The key of the html cache entry to use for this DOM Element.\r\n     * @param {string} [tagName='div'] - The tag name of the element into which all of the loaded html will be inserted. Defaults to a plain div tag.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    createFromCache: function (key, tagName)\r\n    {\r\n        var html = this.cache.get(key);\r\n\r\n        if (html)\r\n        {\r\n            this.createFromHTML(html, tagName);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes a string of html and then creates a DOM Element from it. The HTML is set as the `innerHTML`\r\n     * property of the created element.\r\n     * \r\n     * ```javascript\r\n     * let form = `\r\n     * <input type=\"text\" name=\"nameField\" placeholder=\"Enter your name\" style=\"font-size: 32px\">\r\n     * <input type=\"button\" name=\"playButton\" value=\"Let's Play\" style=\"font-size: 32px\">\r\n     * `;\r\n     * ```\r\n     * \r\n     * You can create a DOM Element from it using the string:\r\n     * \r\n     * ```javascript\r\n     * this.add.dom().createFromHTML(form);\r\n     * ```\r\n     * \r\n     * The optional `elementType` argument controls the type of container that is created, into which the html is inserted.\r\n     * The default is a plain `div` object, but any valid tagName can be given.\r\n     * \r\n     * If this Game Object already has an Element, it is removed from the DOM entirely first.\r\n     * Any event listeners you may have previously created will need to be re-created after this call.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#createFromHTML\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} A string of html to be set as the `innerHTML` property of the created element.\r\n     * @param {string} [tagName='div'] - The tag name of the element into which all of the html will be inserted. Defaults to a plain div tag.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    createFromHTML: function (html, tagName)\r\n    {\r\n        if (tagName === undefined) { tagName = 'div'; }\r\n\r\n        //  Already got an element? Remove it first\r\n        this.removeElement();\r\n\r\n        var element = document.createElement(tagName);\r\n\r\n        this.node = element;\r\n\r\n        element.style.zIndex = '0';\r\n        element.style.display = 'inline';\r\n        element.style.position = 'absolute';\r\n\r\n        //  Node handler\r\n\r\n        element.phaser = this;\r\n\r\n        if (this.parent)\r\n        {\r\n            this.parent.appendChild(element);\r\n        }\r\n\r\n        element.innerHTML = html;\r\n\r\n        return this.updateSize();\r\n    },\r\n\r\n    /**\r\n     * Removes the current DOM Element bound to this Game Object from the DOM entirely and resets the\r\n     * `node` property of this Game Object to be `null`.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#removeElement\r\n     * @since 3.17.0\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    removeElement: function ()\r\n    {\r\n        if (this.node)\r\n        {\r\n            RemoveFromDOM(this.node);\r\n\r\n            this.node = null;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that calls `getBoundingClientRect` on the `node` and then sets the bounds width\r\n     * and height into the `displayWidth` and `displayHeight` properties, and the `clientWidth` and `clientHeight`\r\n     * values into the `width` and `height` properties respectively.\r\n     * \r\n     * This is called automatically whenever a new element is created or set.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#updateSize\r\n     * @since 3.17.0\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    updateSize: function ()\r\n    {\r\n        var node = this.node;\r\n\r\n        var nodeBounds = node.getBoundingClientRect();\r\n\r\n        this.width = node.clientWidth;\r\n        this.height = node.clientHeight;\r\n\r\n        this.displayWidth = nodeBounds.width || 0;\r\n        this.displayHeight = nodeBounds.height || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n     * them, looking for the first one that has a property matching the given key and value. It then returns this child\r\n     * if found, or `null` if not.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#getChildByProperty\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} property - The property to search the children for.\r\n     * @param {string} value - The value the property must strictly equal.\r\n     * \r\n     * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n     */\r\n    getChildByProperty: function (property, value)\r\n    {\r\n        if (this.node)\r\n        {\r\n            var children = this.node.querySelectorAll('*');\r\n\r\n            for (var i = 0; i < children.length; i++)\r\n            {\r\n                if (children[i][property] === value)\r\n                {\r\n                    return children[i];\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n     * them, looking for the first one that has a matching id. It then returns this child if found, or `null` if not.\r\n     * \r\n     * Be aware that class and id names are case-sensitive.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#getChildByID\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} id - The id to search the children for.\r\n     * \r\n     * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n     */\r\n    getChildByID: function (id)\r\n    {\r\n        return this.getChildByProperty('id', id);\r\n    },\r\n\r\n    /**\r\n     * Gets all children from this DOM Elements node, using `querySelectorAll('*')` and then iterates through\r\n     * them, looking for the first one that has a matching name. It then returns this child if found, or `null` if not.\r\n     * \r\n     * Be aware that class and id names are case-sensitive.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#getChildByName\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} name - The name to search the children for.\r\n     * \r\n     * @return {?Element} The first matching child DOM Element, or `null` if not found.\r\n     */\r\n    getChildByName: function (name)\r\n    {\r\n        return this.getChildByProperty('name', name);\r\n    },\r\n\r\n    /**\r\n     * Sets the `className` property of the DOM Element node and updates the internal sizes.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setClassName\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} className - A string representing the class or space-separated classes of the element.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setClassName: function (className)\r\n    {\r\n        if (this.node)\r\n        {\r\n            this.node.className = className;\r\n\r\n            this.updateSize();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the `innerText` property of the DOM Element node and updates the internal sizes.\r\n     * \r\n     * Note that only certain types of Elements can have `innerText` set on them.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setText\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} text - A DOMString representing the rendered text content of the element.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setText: function (text)\r\n    {\r\n        if (this.node)\r\n        {\r\n            this.node.innerText = text;\r\n\r\n            this.updateSize();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the `innerHTML` property of the DOM Element node and updates the internal sizes.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#setHTML\r\n     * @since 3.17.0\r\n     * \r\n     * @param {string} html - A DOMString of html to be set as the `innerHTML` property of the element.\r\n     * \r\n     * @return {this} This DOM Element instance.\r\n     */\r\n    setHTML: function (html)\r\n    {\r\n        if (this.node)\r\n        {\r\n            this.node.innerHTML = html;\r\n\r\n            this.updateSize();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Runs internal update tasks.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#preUpdate\r\n     * @private\r\n     * @since 3.17.0\r\n     */\r\n    preUpdate: function ()\r\n    {\r\n        var parent = this.parentContainer;\r\n        var node = this.node;\r\n\r\n        if (node && parent && !parent.willRender())\r\n        {\r\n            node.style.display = 'none';\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Compares the renderMask with the renderFlags to see if this Game Object will render or not.\r\n     * \r\n     * DOMElements always return `true` as they need to still set values during the render pass, even if not visible.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#willRender\r\n     * @since 3.17.0\r\n     *\r\n     * @return {boolean} `true` if the Game Object should be rendered, otherwise `false`.\r\n     */\r\n    willRender: function ()\r\n    {\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Handles the pre-destroy step for the DOM Element, which removes the underlying node from the DOM.\r\n     *\r\n     * @method Phaser.GameObjects.DOMElement#preDestroy\r\n     * @private\r\n     * @since 3.17.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.removeElement();\r\n\r\n        this.scene.sys.events.off(SCENE_EVENTS.SLEEP, this.handleSceneEvent, this);\r\n        this.scene.sys.events.off(SCENE_EVENTS.WAKE, this.handleSceneEvent, this);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DOMElement;\r\n"]},"metadata":{},"sourceType":"script"}