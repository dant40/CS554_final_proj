{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ParseXMLBitmapFont = require('./ParseXMLBitmapFont');\n/**\r\n * Parse an XML Bitmap Font from an Atlas.\r\n *\r\n * Adds the parsed Bitmap Font data to the cache with the `fontName` key.\r\n *\r\n * @function ParseFromAtlas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to parse the Bitmap Font for.\r\n * @param {string} fontName - The key of the font to add to the Bitmap Font cache.\r\n * @param {string} textureKey - The key of the BitmapFont's texture.\r\n * @param {string} frameKey - The key of the BitmapFont texture's frame.\r\n * @param {string} xmlKey - The key of the XML data of the font to parse.\r\n * @param {integer} [xSpacing] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing] - The y-axis spacing to add to the line height.\r\n *\r\n * @return {boolean} Whether the parsing was successful or not.\r\n */\n\n\nvar ParseFromAtlas = function (scene, fontName, textureKey, frameKey, xmlKey, xSpacing, ySpacing) {\n  var frame = scene.sys.textures.getFrame(textureKey, frameKey);\n  var xml = scene.sys.cache.xml.get(xmlKey);\n\n  if (frame && xml) {\n    var data = ParseXMLBitmapFont(xml, xSpacing, ySpacing, frame);\n    scene.sys.cache.bitmapFont.add(fontName, {\n      data: data,\n      texture: textureKey,\n      frame: frameKey\n    });\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = ParseFromAtlas;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/bitmaptext/ParseFromAtlas.js"],"names":["ParseXMLBitmapFont","require","ParseFromAtlas","scene","fontName","textureKey","frameKey","xmlKey","xSpacing","ySpacing","frame","sys","textures","getFrame","xml","cache","get","data","bitmapFont","add","texture","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIC,cAAc,GAAG,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,UAA3B,EAAuCC,QAAvC,EAAiDC,MAAjD,EAAyDC,QAAzD,EAAmEC,QAAnE,EACrB;AACI,MAAIC,KAAK,GAAGP,KAAK,CAACQ,GAAN,CAAUC,QAAV,CAAmBC,QAAnB,CAA4BR,UAA5B,EAAwCC,QAAxC,CAAZ;AACA,MAAIQ,GAAG,GAAGX,KAAK,CAACQ,GAAN,CAAUI,KAAV,CAAgBD,GAAhB,CAAoBE,GAApB,CAAwBT,MAAxB,CAAV;;AAEA,MAAIG,KAAK,IAAII,GAAb,EACA;AACI,QAAIG,IAAI,GAAGjB,kBAAkB,CAACc,GAAD,EAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,KAA1B,CAA7B;AAEAP,IAAAA,KAAK,CAACQ,GAAN,CAAUI,KAAV,CAAgBG,UAAhB,CAA2BC,GAA3B,CAA+Bf,QAA/B,EAAyC;AAAEa,MAAAA,IAAI,EAAEA,IAAR;AAAcG,MAAAA,OAAO,EAAEf,UAAvB;AAAmCK,MAAAA,KAAK,EAAEJ;AAA1C,KAAzC;AAEA,WAAO,IAAP;AACH,GAPD,MASA;AACI,WAAO,KAAP;AACH;AACJ,CAjBD;;AAmBAe,MAAM,CAACC,OAAP,GAAiBpB,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ParseXMLBitmapFont = require('./ParseXMLBitmapFont');\r\n\r\n/**\r\n * Parse an XML Bitmap Font from an Atlas.\r\n *\r\n * Adds the parsed Bitmap Font data to the cache with the `fontName` key.\r\n *\r\n * @function ParseFromAtlas\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to parse the Bitmap Font for.\r\n * @param {string} fontName - The key of the font to add to the Bitmap Font cache.\r\n * @param {string} textureKey - The key of the BitmapFont's texture.\r\n * @param {string} frameKey - The key of the BitmapFont texture's frame.\r\n * @param {string} xmlKey - The key of the XML data of the font to parse.\r\n * @param {integer} [xSpacing] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing] - The y-axis spacing to add to the line height.\r\n *\r\n * @return {boolean} Whether the parsing was successful or not.\r\n */\r\nvar ParseFromAtlas = function (scene, fontName, textureKey, frameKey, xmlKey, xSpacing, ySpacing)\r\n{\r\n    var frame = scene.sys.textures.getFrame(textureKey, frameKey);\r\n    var xml = scene.sys.cache.xml.get(xmlKey);\r\n\r\n    if (frame && xml)\r\n    {\r\n        var data = ParseXMLBitmapFont(xml, xSpacing, ySpacing, frame);\r\n\r\n        scene.sys.cache.bitmapFont.add(fontName, { data: data, texture: textureKey, frame: frameKey });\r\n\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = ParseFromAtlas;\r\n"]},"metadata":{},"sourceType":"script"}