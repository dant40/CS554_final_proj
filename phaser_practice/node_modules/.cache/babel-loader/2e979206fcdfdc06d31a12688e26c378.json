{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetLineToRectangle = require('./GetLineToRectangle');\n\nvar RectangleToRectangle = require('./RectangleToRectangle');\n/**\r\n * Checks if two Rectangles intersect and returns the intersection points as a Point object array.\r\n *\r\n * A Rectangle intersects another Rectangle if any part of its bounds is within the other Rectangle's bounds. As such, the two Rectangles are considered \"solid\". A Rectangle with no width or no height will never intersect another Rectangle.\r\n *\r\n * @function Phaser.Geom.Intersects.GetRectangleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to check for intersection.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetRectangleToRectangle = function (rectA, rectB, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (RectangleToRectangle(rectA, rectB)) {\n    var lineA = rectA.getLineA();\n    var lineB = rectA.getLineB();\n    var lineC = rectA.getLineC();\n    var lineD = rectA.getLineD();\n    GetLineToRectangle(lineA, rectB, out);\n    GetLineToRectangle(lineB, rectB, out);\n    GetLineToRectangle(lineC, rectB, out);\n    GetLineToRectangle(lineD, rectB, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetRectangleToRectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetRectangleToRectangle.js"],"names":["GetLineToRectangle","require","RectangleToRectangle","GetRectangleToRectangle","rectA","rectB","out","undefined","lineA","getLineA","lineB","getLineB","lineC","getLineC","lineD","getLineD","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIE,uBAAuB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EAC9B;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIJ,oBAAoB,CAACE,KAAD,EAAQC,KAAR,CAAxB,EACA;AACI,QAAIG,KAAK,GAAGJ,KAAK,CAACK,QAAN,EAAZ;AACA,QAAIC,KAAK,GAAGN,KAAK,CAACO,QAAN,EAAZ;AACA,QAAIC,KAAK,GAAGR,KAAK,CAACS,QAAN,EAAZ;AACA,QAAIC,KAAK,GAAGV,KAAK,CAACW,QAAN,EAAZ;AAEAf,IAAAA,kBAAkB,CAACQ,KAAD,EAAQH,KAAR,EAAeC,GAAf,CAAlB;AACAN,IAAAA,kBAAkB,CAACU,KAAD,EAAQL,KAAR,EAAeC,GAAf,CAAlB;AACAN,IAAAA,kBAAkB,CAACY,KAAD,EAAQP,KAAR,EAAeC,GAAf,CAAlB;AACAN,IAAAA,kBAAkB,CAACc,KAAD,EAAQT,KAAR,EAAeC,GAAf,CAAlB;AACH;;AAED,SAAOA,GAAP;AACH,CAlBD;;AAoBAU,MAAM,CAACC,OAAP,GAAiBd,uBAAjB","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetLineToRectangle = require('./GetLineToRectangle');\r\nvar RectangleToRectangle = require('./RectangleToRectangle');\r\n\r\n/**\r\n * Checks if two Rectangles intersect and returns the intersection points as a Point object array.\r\n *\r\n * A Rectangle intersects another Rectangle if any part of its bounds is within the other Rectangle's bounds. As such, the two Rectangles are considered \"solid\". A Rectangle with no width or no height will never intersect another Rectangle.\r\n *\r\n * @function Phaser.Geom.Intersects.GetRectangleToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to check for intersection.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetRectangleToRectangle = function (rectA, rectB, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (RectangleToRectangle(rectA, rectB))\r\n    {\r\n        var lineA = rectA.getLineA();\r\n        var lineB = rectA.getLineB();\r\n        var lineC = rectA.getLineC();\r\n        var lineD = rectA.getLineD();\r\n\r\n        GetLineToRectangle(lineA, rectB, out);\r\n        GetLineToRectangle(lineB, rectB, out);\r\n        GetLineToRectangle(lineC, rectB, out);\r\n        GetLineToRectangle(lineD, rectB, out);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetRectangleToRectangle;\r\n"]},"metadata":{},"sourceType":"script"}