{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * @namespace Phaser.Renderer.WebGL.Utils\r\n * @since 3.0.0\r\n */\nmodule.exports = {\n  /**\r\n   * Packs four floats on a range from 0.0 to 1.0 into a single Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintFromFloats\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} r - Red component in a range from 0.0 to 1.0 \r\n   * @param {number} g - Green component in a range from 0.0 to 1.0\r\n   * @param {number} b - Blue component in a range from 0.0 to 1.0\r\n   * @param {number} a - Alpha component in a range from 0.0 to 1.0\r\n   * \r\n   * @return {number} [description]\r\n   */\n  getTintFromFloats: function (r, g, b, a) {\n    var ur = (r * 255.0 | 0) & 0xFF;\n    var ug = (g * 255.0 | 0) & 0xFF;\n    var ub = (b * 255.0 | 0) & 0xFF;\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | ur << 16 | ug << 8 | ub) >>> 0;\n  },\n\n  /**\r\n   * Packs a Uint24, representing RGB components, with a Float32, representing\r\n   * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - Uint24 representing RGB components\r\n   * @param {number} a - Float32 representing Alpha component\r\n   * \r\n   * @return {number} Packed RGBA as Uint32\r\n   */\n  getTintAppendFloatAlpha: function (rgb, a) {\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | rgb) >>> 0;\n  },\n\n  /**\r\n   * Packs a Uint24, representing RGB components, with a Float32, representing\r\n   * the alpha component, with a range between 0.0 and 1.0 and return a \r\n   * swizzled Uint32\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - Uint24 representing RGB components\r\n   * @param {number} a - Float32 representing Alpha component\r\n   * \r\n   * @return {number} Packed RGBA as Uint32\r\n   */\n  getTintAppendFloatAlphaAndSwap: function (rgb, a) {\n    var ur = (rgb >> 16 | 0) & 0xff;\n    var ug = (rgb >> 8 | 0) & 0xff;\n    var ub = (rgb | 0) & 0xff;\n    var ua = (a * 255.0 | 0) & 0xFF;\n    return (ua << 24 | ub << 16 | ug << 8 | ur) >>> 0;\n  },\n\n  /**\r\n   * Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getFloatsFromUintRGB\r\n   * @since 3.0.0\r\n   * \r\n   * @param {number} rgb - RGB packed as a Uint24\r\n   * \r\n   * @return {array} Array of floats representing each component as a float \r\n   */\n  getFloatsFromUintRGB: function (rgb) {\n    var ur = (rgb >> 16 | 0) & 0xff;\n    var ug = (rgb >> 8 | 0) & 0xff;\n    var ub = (rgb | 0) & 0xff;\n    return [ur / 255.0, ug / 255.0, ub / 255.0];\n  },\n\n  /**\r\n   * Counts how many attributes of 32 bits a vertex has\r\n   *\r\n   * @function Phaser.Renderer.WebGL.Utils.getComponentCount\r\n   * @since 3.0.0\r\n   * \r\n   * @param {array} attributes - Array of attributes \r\n   * @param {WebGLRenderingContext} glContext - WebGLContext used for check types\r\n   * \r\n   * @return {number} Count of 32 bit attributes in vertex\r\n   */\n  getComponentCount: function (attributes, glContext) {\n    var count = 0;\n\n    for (var index = 0; index < attributes.length; ++index) {\n      var element = attributes[index];\n\n      if (element.type === glContext.FLOAT) {\n        count += element.size;\n      } else {\n        count += 1; // We'll force any other type to be 32 bit. for now\n      }\n    }\n\n    return count;\n  }\n};","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/webgl/Utils.js"],"names":["module","exports","getTintFromFloats","r","g","b","a","ur","ug","ub","ua","getTintAppendFloatAlpha","rgb","getTintAppendFloatAlphaAndSwap","getFloatsFromUintRGB","getComponentCount","attributes","glContext","count","index","length","element","type","FLOAT","size"],"mappings":"AAAA;;;;;;;AAOA;;;;AAIAA,MAAM,CAACC,OAAP,GAAiB;AAEb;;;;;;;;;;;;;AAaAC,EAAAA,iBAAiB,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EACnB;AACI,QAAIC,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AACA,QAAIK,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AACA,QAAIK,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AACA,QAAIK,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AAEA,WAAO,CAAEI,EAAE,IAAI,EAAP,GAAcH,EAAE,IAAI,EAApB,GAA2BC,EAAE,IAAI,CAAjC,GAAsCC,EAAvC,MAA+C,CAAtD;AACH,GAvBY;;AAyBb;;;;;;;;;;;;AAYAE,EAAAA,uBAAuB,EAAE,UAAUC,GAAV,EAAeN,CAAf,EACzB;AACI,QAAII,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AACA,WAAO,CAAEI,EAAE,IAAI,EAAP,GAAaE,GAAd,MAAuB,CAA9B;AACH,GAzCY;;AA2Cb;;;;;;;;;;;;;AAaAC,EAAAA,8BAA8B,EAAE,UAAUD,GAAV,EAAeN,CAAf,EAChC;AACI,QAAIC,EAAE,GAAG,CAAEK,GAAG,IAAI,EAAR,GAAY,CAAb,IAAkB,IAA3B;AACA,QAAIJ,EAAE,GAAG,CAAEI,GAAG,IAAI,CAAR,GAAW,CAAZ,IAAiB,IAA1B;AACA,QAAIH,EAAE,GAAG,CAACG,GAAG,GAAC,CAAL,IAAU,IAAnB;AACA,QAAIF,EAAE,GAAG,CAAEJ,CAAC,GAAG,KAAL,GAAY,CAAb,IAAkB,IAA3B;AAEA,WAAO,CAAEI,EAAE,IAAI,EAAP,GAAcD,EAAE,IAAI,EAApB,GAA2BD,EAAE,IAAI,CAAjC,GAAsCD,EAAvC,MAA+C,CAAtD;AACH,GAhEY;;AAkEb;;;;;;;;;;AAUAO,EAAAA,oBAAoB,EAAE,UAAUF,GAAV,EACtB;AACI,QAAIL,EAAE,GAAG,CAAEK,GAAG,IAAI,EAAR,GAAY,CAAb,IAAkB,IAA3B;AACA,QAAIJ,EAAE,GAAG,CAAEI,GAAG,IAAI,CAAR,GAAW,CAAZ,IAAiB,IAA1B;AACA,QAAIH,EAAE,GAAG,CAACG,GAAG,GAAC,CAAL,IAAU,IAAnB;AAEA,WAAO,CAAEL,EAAE,GAAG,KAAP,EAAcC,EAAE,GAAG,KAAnB,EAA0BC,EAAE,GAAG,KAA/B,CAAP;AACH,GAnFY;;AAqFb;;;;;;;;;;;AAWAM,EAAAA,iBAAiB,EAAE,UAAUC,UAAV,EAAsBC,SAAtB,EACnB;AACI,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,UAAU,CAACI,MAAvC,EAA+C,EAAED,KAAjD,EACA;AACI,UAAIE,OAAO,GAAGL,UAAU,CAACG,KAAD,CAAxB;;AAEA,UAAIE,OAAO,CAACC,IAAR,KAAiBL,SAAS,CAACM,KAA/B,EACA;AACIL,QAAAA,KAAK,IAAIG,OAAO,CAACG,IAAjB;AACH,OAHD,MAKA;AACIN,QAAAA,KAAK,IAAI,CAAT,CADJ,CACgB;AACf;AACJ;;AAED,WAAOA,KAAP;AACH;AAnHY,CAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @namespace Phaser.Renderer.WebGL.Utils\r\n * @since 3.0.0\r\n */\r\nmodule.exports = {\r\n\r\n    /**\r\n     * Packs four floats on a range from 0.0 to 1.0 into a single Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintFromFloats\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} r - Red component in a range from 0.0 to 1.0 \r\n     * @param {number} g - Green component in a range from 0.0 to 1.0\r\n     * @param {number} b - Blue component in a range from 0.0 to 1.0\r\n     * @param {number} a - Alpha component in a range from 0.0 to 1.0\r\n     * \r\n     * @return {number} [description]\r\n     */\r\n    getTintFromFloats: function (r, g, b, a)\r\n    {\r\n        var ur = ((r * 255.0)|0) & 0xFF;\r\n        var ug = ((g * 255.0)|0) & 0xFF;\r\n        var ub = ((b * 255.0)|0) & 0xFF;\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n\r\n        return ((ua << 24) | (ur << 16) | (ug << 8) | ub) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlpha\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     * \r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlpha: function (rgb, a)\r\n    {\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n        return ((ua << 24) | rgb) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Packs a Uint24, representing RGB components, with a Float32, representing\r\n     * the alpha component, with a range between 0.0 and 1.0 and return a \r\n     * swizzled Uint32\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getTintAppendFloatAlphaAndSwap\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - Uint24 representing RGB components\r\n     * @param {number} a - Float32 representing Alpha component\r\n     * \r\n     * @return {number} Packed RGBA as Uint32\r\n     */\r\n    getTintAppendFloatAlphaAndSwap: function (rgb, a)\r\n    {\r\n        var ur = ((rgb >> 16)|0) & 0xff;\r\n        var ug = ((rgb >> 8)|0) & 0xff;\r\n        var ub = (rgb|0) & 0xff;\r\n        var ua = ((a * 255.0)|0) & 0xFF;\r\n\r\n        return ((ua << 24) | (ub << 16) | (ug << 8) | ur) >>> 0;\r\n    },\r\n\r\n    /**\r\n     * Unpacks a Uint24 RGB into an array of floats of ranges of 0.0 and 1.0\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getFloatsFromUintRGB\r\n     * @since 3.0.0\r\n     * \r\n     * @param {number} rgb - RGB packed as a Uint24\r\n     * \r\n     * @return {array} Array of floats representing each component as a float \r\n     */\r\n    getFloatsFromUintRGB: function (rgb)\r\n    {\r\n        var ur = ((rgb >> 16)|0) & 0xff;\r\n        var ug = ((rgb >> 8)|0) & 0xff;\r\n        var ub = (rgb|0) & 0xff;\r\n\r\n        return [ ur / 255.0, ug / 255.0, ub / 255.0 ];\r\n    },\r\n\r\n    /**\r\n     * Counts how many attributes of 32 bits a vertex has\r\n     *\r\n     * @function Phaser.Renderer.WebGL.Utils.getComponentCount\r\n     * @since 3.0.0\r\n     * \r\n     * @param {array} attributes - Array of attributes \r\n     * @param {WebGLRenderingContext} glContext - WebGLContext used for check types\r\n     * \r\n     * @return {number} Count of 32 bit attributes in vertex\r\n     */\r\n    getComponentCount: function (attributes, glContext)\r\n    {\r\n        var count = 0;\r\n\r\n        for (var index = 0; index < attributes.length; ++index)\r\n        {\r\n            var element = attributes[index];\r\n            \r\n            if (element.type === glContext.FLOAT)\r\n            {\r\n                count += element.size;\r\n            }\r\n            else\r\n            {\r\n                count += 1; // We'll force any other type to be 32 bit. for now\r\n            }\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}