{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Used internally by the KeyCombo class.\r\n * Return `true` if it reached the end of the combo, `false` if not.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.AdvanceKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to advance.\r\n *\r\n * @return {boolean} `true` if it reached the end of the combo, `false` if not.\r\n */\nvar AdvanceKeyCombo = function (event, combo) {\n  combo.timeLastMatched = event.timeStamp;\n  combo.index++;\n\n  if (combo.index === combo.size) {\n    return true;\n  } else {\n    combo.current = combo.keyCodes[combo.index];\n    return false;\n  }\n};\n\nmodule.exports = AdvanceKeyCombo;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/keyboard/combo/AdvanceKeyCombo.js"],"names":["AdvanceKeyCombo","event","combo","timeLastMatched","timeStamp","index","size","current","keyCodes","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;AAaA,IAAIA,eAAe,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EACtB;AACIA,EAAAA,KAAK,CAACC,eAAN,GAAwBF,KAAK,CAACG,SAA9B;AACAF,EAAAA,KAAK,CAACG,KAAN;;AAEA,MAAIH,KAAK,CAACG,KAAN,KAAgBH,KAAK,CAACI,IAA1B,EACA;AACI,WAAO,IAAP;AACH,GAHD,MAKA;AACIJ,IAAAA,KAAK,CAACK,OAAN,GAAgBL,KAAK,CAACM,QAAN,CAAeN,KAAK,CAACG,KAArB,CAAhB;AACA,WAAO,KAAP;AACH;AACJ,CAdD;;AAgBAI,MAAM,CAACC,OAAP,GAAiBV,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Used internally by the KeyCombo class.\r\n * Return `true` if it reached the end of the combo, `false` if not.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.AdvanceKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to advance.\r\n *\r\n * @return {boolean} `true` if it reached the end of the combo, `false` if not.\r\n */\r\nvar AdvanceKeyCombo = function (event, combo)\r\n{\r\n    combo.timeLastMatched = event.timeStamp;\r\n    combo.index++;\r\n\r\n    if (combo.index === combo.size)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        combo.current = combo.keyCodes[combo.index];\r\n        return false;\r\n    }\r\n};\r\n\r\nmodule.exports = AdvanceKeyCombo;\r\n"]},"metadata":{},"sourceType":"script"}