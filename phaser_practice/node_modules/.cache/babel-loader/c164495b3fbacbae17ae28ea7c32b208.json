{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Linear = require('../Linear');\n/**\r\n * A linear interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.Linear\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {!number} The interpolated value.\r\n */\n\n\nvar LinearInterpolation = function (v, k) {\n  var m = v.length - 1;\n  var f = m * k;\n  var i = Math.floor(f);\n\n  if (k < 0) {\n    return Linear(v[0], v[1], f);\n  } else if (k > 1) {\n    return Linear(v[m], v[m - 1], m - f);\n  } else {\n    return Linear(v[i], v[i + 1 > m ? m : i + 1], f - i);\n  }\n};\n\nmodule.exports = LinearInterpolation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/interpolation/LinearInterpolation.js"],"names":["Linear","require","LinearInterpolation","v","k","m","length","f","i","Math","floor","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,mBAAmB,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAC1B;AACI,MAAIC,CAAC,GAAGF,CAAC,CAACG,MAAF,GAAW,CAAnB;AACA,MAAIC,CAAC,GAAGF,CAAC,GAAGD,CAAZ;AACA,MAAII,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAX,CAAR;;AAEA,MAAIH,CAAC,GAAG,CAAR,EACA;AACI,WAAOJ,MAAM,CAACG,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaI,CAAb,CAAb;AACH,GAHD,MAIK,IAAIH,CAAC,GAAG,CAAR,EACL;AACI,WAAOJ,MAAM,CAACG,CAAC,CAACE,CAAD,CAAF,EAAOF,CAAC,CAACE,CAAC,GAAG,CAAL,CAAR,EAAiBA,CAAC,GAAGE,CAArB,CAAb;AACH,GAHI,MAKL;AACI,WAAOP,MAAM,CAACG,CAAC,CAACK,CAAD,CAAF,EAAOL,CAAC,CAAEK,CAAC,GAAG,CAAJ,GAAQH,CAAT,GAAcA,CAAd,GAAkBG,CAAC,GAAG,CAAvB,CAAR,EAAmCD,CAAC,GAAGC,CAAvC,CAAb;AACH;AACJ,CAlBD;;AAoBAG,MAAM,CAACC,OAAP,GAAiBV,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Linear = require('../Linear');\r\n\r\n/**\r\n * A linear interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.Linear\r\n * @since 3.0.0\r\n * @see {@link https://en.wikipedia.org/wiki/Linear_interpolation}\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {!number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {!number} The interpolated value.\r\n */\r\nvar LinearInterpolation = function (v, k)\r\n{\r\n    var m = v.length - 1;\r\n    var f = m * k;\r\n    var i = Math.floor(f);\r\n\r\n    if (k < 0)\r\n    {\r\n        return Linear(v[0], v[1], f);\r\n    }\r\n    else if (k > 1)\r\n    {\r\n        return Linear(v[m], v[m - 1], m - f);\r\n    }\r\n    else\r\n    {\r\n        return Linear(v[i], v[(i + 1 > m) ? m : i + 1], f - i);\r\n    }\r\n};\r\n\r\nmodule.exports = LinearInterpolation;\r\n"]},"metadata":{},"sourceType":"script"}