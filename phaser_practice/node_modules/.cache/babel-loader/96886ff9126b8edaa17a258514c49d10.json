{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar WorldToTileX = require('./WorldToTileX');\n\nvar WorldToTileY = require('./WorldToTileY');\n/**\r\n * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n * @param {number} width - The width of the area.\r\n * @param {number} height - The height of the area.\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\n\n\nvar GetTilesWithinWorldXY = function (worldX, worldY, width, height, filteringOptions, camera, layer) {\n  // Top left corner of the rect, rounded down to include partial tiles\n  var xStart = WorldToTileX(worldX, true, camera, layer);\n  var yStart = WorldToTileY(worldY, true, camera, layer); // Bottom right corner of the rect, rounded up to include partial tiles\n\n  var xEnd = Math.ceil(WorldToTileX(worldX + width, false, camera, layer));\n  var yEnd = Math.ceil(WorldToTileY(worldY + height, false, camera, layer));\n  return GetTilesWithin(xStart, yStart, xEnd - xStart, yEnd - yStart, filteringOptions, layer);\n};\n\nmodule.exports = GetTilesWithinWorldXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/GetTilesWithinWorldXY.js"],"names":["GetTilesWithin","require","WorldToTileX","WorldToTileY","GetTilesWithinWorldXY","worldX","worldY","width","height","filteringOptions","camera","layer","xStart","yStart","xEnd","Math","ceil","yEnd","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIG,qBAAqB,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,MAAjC,EAAyCC,gBAAzC,EAA2DC,MAA3D,EAAmEC,KAAnE,EAC5B;AACI;AACA,MAAIC,MAAM,GAAGV,YAAY,CAACG,MAAD,EAAS,IAAT,EAAeK,MAAf,EAAuBC,KAAvB,CAAzB;AACA,MAAIE,MAAM,GAAGV,YAAY,CAACG,MAAD,EAAS,IAAT,EAAeI,MAAf,EAAuBC,KAAvB,CAAzB,CAHJ,CAKI;;AACA,MAAIG,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAUd,YAAY,CAACG,MAAM,GAAGE,KAAV,EAAiB,KAAjB,EAAwBG,MAAxB,EAAgCC,KAAhC,CAAtB,CAAX;AACA,MAAIM,IAAI,GAAGF,IAAI,CAACC,IAAL,CAAUb,YAAY,CAACG,MAAM,GAAGE,MAAV,EAAkB,KAAlB,EAAyBE,MAAzB,EAAiCC,KAAjC,CAAtB,CAAX;AAEA,SAAOX,cAAc,CAACY,MAAD,EAASC,MAAT,EAAiBC,IAAI,GAAGF,MAAxB,EAAgCK,IAAI,GAAGJ,MAAvC,EAA+CJ,gBAA/C,EAAiEE,KAAjE,CAArB;AACH,CAXD;;AAaAO,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\n/**\r\n * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinWorldXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n * @param {number} width - The width of the area.\r\n * @param {number} height - The height of the area.\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinWorldXY = function (worldX, worldY, width, height, filteringOptions, camera, layer)\r\n{\r\n    // Top left corner of the rect, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(worldX, true, camera, layer);\r\n    var yStart = WorldToTileY(worldY, true, camera, layer);\r\n\r\n    // Bottom right corner of the rect, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(worldX + width, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(worldY + height, false, camera, layer));\r\n\r\n    return GetTilesWithin(xStart, yStart, xEnd - xStart, yEnd - yStart, filteringOptions, layer);\r\n};\r\n\r\nmodule.exports = GetTilesWithinWorldXY;\r\n"]},"metadata":{},"sourceType":"script"}