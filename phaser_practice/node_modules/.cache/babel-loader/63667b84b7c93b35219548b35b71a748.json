{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point'); //  This is based off an explanation and expanded math presented by Paul Bourke:\n//  See http:'local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/\n\n/**\r\n * Checks if two Lines intersect. If the Lines are identical, they will be treated as parallel and thus non-intersecting.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line1 - The first Line to check.\r\n * @param {Phaser.Geom.Line} line2 - The second Line to check.\r\n * @param {Phaser.Geom.Point} [out] - A Point in which to optionally store the point of intersection.\r\n *\r\n * @return {boolean} `true` if the two Lines intersect, and the `out` object will be populated, if given. Otherwise, `false`.\r\n */\n\n\nvar LineToLine = function (line1, line2, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var x1 = line1.x1;\n  var y1 = line1.y1;\n  var x2 = line1.x2;\n  var y2 = line1.y2;\n  var x3 = line2.x1;\n  var y3 = line2.y1;\n  var x4 = line2.x2;\n  var y4 = line2.y2;\n  var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\n  var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\n  var deNom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1); //  Make sure there is not a division by zero - this also indicates that the lines are parallel.\n  //  If numA and numB were both equal to zero the lines would be on top of each other (coincidental).\n  //  This check is not done because it is not necessary for this implementation (the parallel check accounts for this).\n\n  if (deNom === 0) {\n    return false;\n  } //  Calculate the intermediate fractional point that the lines potentially intersect.\n\n\n  var uA = numA / deNom;\n  var uB = numB / deNom; //  The fractional point will be between 0 and 1 inclusive if the lines intersect.\n  //  If the fractional calculation is larger than 1 or smaller than 0 the lines would need to be longer to intersect.\n\n  if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n    out.x = x1 + uA * (x2 - x1);\n    out.y = y1 + uA * (y2 - y1);\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = LineToLine;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/LineToLine.js"],"names":["Point","require","LineToLine","line1","line2","out","undefined","x1","y1","x2","y2","x3","y3","x4","y4","numA","numB","deNom","uA","uB","x","y","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,UAAU,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EACjB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIL,KAAJ,EAAN;AAAoB;;AAE7C,MAAIO,EAAE,GAAGJ,KAAK,CAACI,EAAf;AACA,MAAIC,EAAE,GAAGL,KAAK,CAACK,EAAf;AACA,MAAIC,EAAE,GAAGN,KAAK,CAACM,EAAf;AACA,MAAIC,EAAE,GAAGP,KAAK,CAACO,EAAf;AAEA,MAAIC,EAAE,GAAGP,KAAK,CAACG,EAAf;AACA,MAAIK,EAAE,GAAGR,KAAK,CAACI,EAAf;AACA,MAAIK,EAAE,GAAGT,KAAK,CAACK,EAAf;AACA,MAAIK,EAAE,GAAGV,KAAK,CAACM,EAAf;AAEA,MAAIK,IAAI,GAAG,CAACF,EAAE,GAAGF,EAAN,KAAaH,EAAE,GAAGI,EAAlB,IAAwB,CAACE,EAAE,GAAGF,EAAN,KAAaL,EAAE,GAAGI,EAAlB,CAAnC;AACA,MAAIK,IAAI,GAAG,CAACP,EAAE,GAAGF,EAAN,KAAaC,EAAE,GAAGI,EAAlB,IAAwB,CAACF,EAAE,GAAGF,EAAN,KAAaD,EAAE,GAAGI,EAAlB,CAAnC;AACA,MAAIM,KAAK,GAAG,CAACH,EAAE,GAAGF,EAAN,KAAaH,EAAE,GAAGF,EAAlB,IAAwB,CAACM,EAAE,GAAGF,EAAN,KAAaD,EAAE,GAAGF,EAAlB,CAApC,CAfJ,CAiBI;AACA;AACA;;AAEA,MAAIS,KAAK,KAAK,CAAd,EACA;AACI,WAAO,KAAP;AACH,GAxBL,CA0BI;;;AAEA,MAAIC,EAAE,GAAGH,IAAI,GAAGE,KAAhB;AACA,MAAIE,EAAE,GAAGH,IAAI,GAAGC,KAAhB,CA7BJ,CA+BI;AACA;;AAEA,MAAIC,EAAE,IAAI,CAAN,IAAWA,EAAE,IAAI,CAAjB,IAAsBC,EAAE,IAAI,CAA5B,IAAiCA,EAAE,IAAI,CAA3C,EACA;AACId,IAAAA,GAAG,CAACe,CAAJ,GAAQb,EAAE,GAAIW,EAAE,IAAIT,EAAE,GAAGF,EAAT,CAAhB;AACAF,IAAAA,GAAG,CAACgB,CAAJ,GAAQb,EAAE,GAAIU,EAAE,IAAIR,EAAE,GAAGF,EAAT,CAAhB;AAEA,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH,CA5CD;;AA8CAc,MAAM,CAACC,OAAP,GAAiBrB,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n//  This is based off an explanation and expanded math presented by Paul Bourke:\r\n//  See http:'local.wasp.uwa.edu.au/~pbourke/geometry/lineline2d/\r\n\r\n/**\r\n * Checks if two Lines intersect. If the Lines are identical, they will be treated as parallel and thus non-intersecting.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line1 - The first Line to check.\r\n * @param {Phaser.Geom.Line} line2 - The second Line to check.\r\n * @param {Phaser.Geom.Point} [out] - A Point in which to optionally store the point of intersection.\r\n *\r\n * @return {boolean} `true` if the two Lines intersect, and the `out` object will be populated, if given. Otherwise, `false`.\r\n */\r\nvar LineToLine = function (line1, line2, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var x1 = line1.x1;\r\n    var y1 = line1.y1;\r\n    var x2 = line1.x2;\r\n    var y2 = line1.y2;\r\n\r\n    var x3 = line2.x1;\r\n    var y3 = line2.y1;\r\n    var x4 = line2.x2;\r\n    var y4 = line2.y2;\r\n\r\n    var numA = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);\r\n    var numB = (x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3);\r\n    var deNom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);\r\n\r\n    //  Make sure there is not a division by zero - this also indicates that the lines are parallel.\r\n    //  If numA and numB were both equal to zero the lines would be on top of each other (coincidental).\r\n    //  This check is not done because it is not necessary for this implementation (the parallel check accounts for this).\r\n\r\n    if (deNom === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    //  Calculate the intermediate fractional point that the lines potentially intersect.\r\n\r\n    var uA = numA / deNom;\r\n    var uB = numB / deNom;\r\n\r\n    //  The fractional point will be between 0 and 1 inclusive if the lines intersect.\r\n    //  If the fractional calculation is larger than 1 or smaller than 0 the lines would need to be longer to intersect.\r\n\r\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1)\r\n    {\r\n        out.x = x1 + (uA * (x2 - x1));\r\n        out.y = y1 + (uA * (y2 - y1));\r\n\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = LineToLine;\r\n"]},"metadata":{},"sourceType":"script"}