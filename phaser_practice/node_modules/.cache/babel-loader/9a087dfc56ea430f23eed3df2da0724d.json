{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n/**\r\n * @classdesc\r\n * The Game Object Factory is a Scene plugin that allows you to quickly create many common\r\n * types of Game Objects and have them automatically registered with the Scene.\r\n *\r\n * Game Objects directly register themselves with the Factory and inject their own creation\r\n * methods into the class.\r\n *\r\n * @class GameObjectFactory\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object Factory belongs.\r\n */\n\n\nvar GameObjectFactory = new Class({\n  initialize: function GameObjectFactory(scene) {\n    /**\r\n     * The Scene to which this Game Object Factory belongs.\r\n     *\r\n     * @name Phaser.GameObjects.GameObjectFactory#scene\r\n     * @type {Phaser.Scene}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene.Systems.\r\n     *\r\n     * @name Phaser.GameObjects.GameObjectFactory#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * A reference to the Scene Display List.\r\n     *\r\n     * @name Phaser.GameObjects.GameObjectFactory#displayList\r\n     * @type {Phaser.GameObjects.DisplayList}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.displayList;\n    /**\r\n     * A reference to the Scene Update List.\r\n     *\r\n     * @name Phaser.GameObjects.GameObjectFactory#updateList\r\n     * @type {Phaser.GameObjects.UpdateList}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.updateList;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.GameObjectFactory#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.displayList = this.systems.displayList;\n    this.updateList = this.systems.updateList;\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.GameObjects.GameObjectFactory#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Adds an existing Game Object to this Scene.\r\n   *\r\n   * If the Game Object renders, it will be added to the Display List.\r\n   * If it has a `preUpdate` method, it will be added to the Update List.\r\n   *\r\n   * @method Phaser.GameObjects.GameObjectFactory#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.Group)} child - The child to be added to this Scene.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that was added.\r\n   */\n  existing: function (child) {\n    if (child.renderCanvas || child.renderWebGL) {\n      this.displayList.add(child);\n    }\n\n    if (child.preUpdate) {\n      this.updateList.add(child);\n    }\n\n    return child;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.GameObjects.GameObjectFactory#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.GameObjects.GameObjectFactory#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n    this.displayList = null;\n    this.updateList = null;\n  }\n});\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can register a custom GameObject factory in the GameObjectFactory,\r\n * providing a name (`factoryType`) and the constructor (`factoryFunction`) in order\r\n * to be called when you call to Phaser.Scene.add[ factoryType ] method.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.register\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you will use to call to Phaser.Scene.add[ factoryType ] method.\r\n * @param {function} factoryFunction - The constructor function to be called when you invoke to the Phaser.Scene.add method.\r\n */\n\nGameObjectFactory.register = function (factoryType, factoryFunction) {\n  if (!GameObjectFactory.prototype.hasOwnProperty(factoryType)) {\n    GameObjectFactory.prototype[factoryType] = factoryFunction;\n  }\n};\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can remove a custom GameObject factory registered in the GameObjectFactory,\r\n * providing a its `factoryType`.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.remove\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you want to remove from the GameObjectFactory.\r\n */\n\n\nGameObjectFactory.remove = function (factoryType) {\n  if (GameObjectFactory.prototype.hasOwnProperty(factoryType)) {\n    delete GameObjectFactory.prototype[factoryType];\n  }\n};\n\nPluginCache.register('GameObjectFactory', GameObjectFactory, 'add');\nmodule.exports = GameObjectFactory;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/GameObjectFactory.js"],"names":["Class","require","PluginCache","SceneEvents","GameObjectFactory","initialize","scene","systems","sys","displayList","updateList","events","once","BOOT","boot","on","START","start","DESTROY","destroy","SHUTDOWN","shutdown","existing","child","renderCanvas","renderWebGL","add","preUpdate","off","register","factoryType","factoryFunction","prototype","hasOwnProperty","remove","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Game Object Factory is a Scene plugin that allows you to quickly create many common\r\n * types of Game Objects and have them automatically registered with the Scene.\r\n *\r\n * Game Objects directly register themselves with the Factory and inject their own creation\r\n * methods into the class.\r\n *\r\n * @class GameObjectFactory\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object Factory belongs.\r\n */\r\nvar GameObjectFactory = new Class({\r\n\r\n    initialize:\r\n\r\n    function GameObjectFactory (scene)\r\n    {\r\n        /**\r\n         * The Scene to which this Game Object Factory belongs.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#scene\r\n         * @type {Phaser.Scene}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * A reference to the Scene Display List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList;\r\n\r\n        /**\r\n         * A reference to the Scene Update List.\r\n         *\r\n         * @name Phaser.GameObjects.GameObjectFactory#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.displayList = this.systems.displayList;\r\n        this.updateList = this.systems.updateList;\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Game Object to this Scene.\r\n     *\r\n     * If the Game Object renders, it will be added to the Display List.\r\n     * If it has a `preUpdate` method, it will be added to the Update List.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|Phaser.GameObjects.Group)} child - The child to be added to this Scene.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that was added.\r\n     */\r\n    existing: function (child)\r\n    {\r\n        if (child.renderCanvas || child.renderWebGL)\r\n        {\r\n            this.displayList.add(child);\r\n        }\r\n\r\n        if (child.preUpdate)\r\n        {\r\n            this.updateList.add(child);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.systems.events.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.GameObjects.GameObjectFactory#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n\r\n        this.displayList = null;\r\n        this.updateList = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can register a custom GameObject factory in the GameObjectFactory,\r\n * providing a name (`factoryType`) and the constructor (`factoryFunction`) in order\r\n * to be called when you call to Phaser.Scene.add[ factoryType ] method.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.register\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you will use to call to Phaser.Scene.add[ factoryType ] method.\r\n * @param {function} factoryFunction - The constructor function to be called when you invoke to the Phaser.Scene.add method.\r\n */\r\nGameObjectFactory.register = function (factoryType, factoryFunction)\r\n{\r\n    if (!GameObjectFactory.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        GameObjectFactory.prototype[factoryType] = factoryFunction;\r\n    }\r\n};\r\n\r\n/**\r\n * Static method called directly by the Game Object factory functions.\r\n * With this method you can remove a custom GameObject factory registered in the GameObjectFactory,\r\n * providing a its `factoryType`.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory.remove\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {string} factoryType - The key of the factory that you want to remove from the GameObjectFactory.\r\n */\r\nGameObjectFactory.remove = function (factoryType)\r\n{\r\n    if (GameObjectFactory.prototype.hasOwnProperty(factoryType))\r\n    {\r\n        delete GameObjectFactory.prototype[factoryType];\r\n    }\r\n};\r\n\r\nPluginCache.register('GameObjectFactory', GameObjectFactory, 'add');\r\n\r\nmodule.exports = GameObjectFactory;\r\n"]},"metadata":{},"sourceType":"script"}