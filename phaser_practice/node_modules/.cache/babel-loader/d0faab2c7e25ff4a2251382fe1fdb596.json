{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetAspectRatio = require('./GetAspectRatio');\n/**\r\n * Adjusts the target rectangle, changing its width, height and position,\r\n * so that it fits inside the area of the source rectangle, while maintaining its original\r\n * aspect ratio.\r\n * \r\n * Unlike the `FitOutside` function, there may be some space inside the source area not covered.\r\n *\r\n * @function Phaser.Geom.Rectangle.FitInside\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [target,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} target - The target rectangle to adjust.\r\n * @param {Phaser.Geom.Rectangle} source - The source rectangle to envelop the target in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified target rectangle instance.\r\n */\n\n\nvar FitInside = function (target, source) {\n  var ratio = GetAspectRatio(target);\n\n  if (ratio < GetAspectRatio(source)) {\n    //  Taller than Wide\n    target.setSize(source.height * ratio, source.height);\n  } else {\n    //  Wider than Tall\n    target.setSize(source.width, source.width / ratio);\n  }\n\n  return target.setPosition(source.centerX - target.width / 2, source.centerY - target.height / 2);\n};\n\nmodule.exports = FitInside;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/FitInside.js"],"names":["GetAspectRatio","require","FitInside","target","source","ratio","setSize","height","width","setPosition","centerX","centerY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,SAAS,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAChB;AACI,MAAIC,KAAK,GAAGL,cAAc,CAACG,MAAD,CAA1B;;AAEA,MAAIE,KAAK,GAAGL,cAAc,CAACI,MAAD,CAA1B,EACA;AACI;AACAD,IAAAA,MAAM,CAACG,OAAP,CAAeF,MAAM,CAACG,MAAP,GAAgBF,KAA/B,EAAsCD,MAAM,CAACG,MAA7C;AACH,GAJD,MAMA;AACI;AACAJ,IAAAA,MAAM,CAACG,OAAP,CAAeF,MAAM,CAACI,KAAtB,EAA6BJ,MAAM,CAACI,KAAP,GAAeH,KAA5C;AACH;;AAED,SAAOF,MAAM,CAACM,WAAP,CACHL,MAAM,CAACM,OAAP,GAAkBP,MAAM,CAACK,KAAP,GAAe,CAD9B,EAEHJ,MAAM,CAACO,OAAP,GAAkBR,MAAM,CAACI,MAAP,GAAgB,CAF/B,CAAP;AAIH,CAnBD;;AAqBAK,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetAspectRatio = require('./GetAspectRatio');\r\n\r\n/**\r\n * Adjusts the target rectangle, changing its width, height and position,\r\n * so that it fits inside the area of the source rectangle, while maintaining its original\r\n * aspect ratio.\r\n * \r\n * Unlike the `FitOutside` function, there may be some space inside the source area not covered.\r\n *\r\n * @function Phaser.Geom.Rectangle.FitInside\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [target,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} target - The target rectangle to adjust.\r\n * @param {Phaser.Geom.Rectangle} source - The source rectangle to envelop the target in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified target rectangle instance.\r\n */\r\nvar FitInside = function (target, source)\r\n{\r\n    var ratio = GetAspectRatio(target);\r\n\r\n    if (ratio < GetAspectRatio(source))\r\n    {\r\n        //  Taller than Wide\r\n        target.setSize(source.height * ratio, source.height);\r\n    }\r\n    else\r\n    {\r\n        //  Wider than Tall\r\n        target.setSize(source.width, source.width / ratio);\r\n    }\r\n\r\n    return target.setPosition(\r\n        source.centerX - (target.width / 2),\r\n        source.centerY - (target.height / 2)\r\n    );\r\n};\r\n\r\nmodule.exports = FitInside;\r\n"]},"metadata":{},"sourceType":"script"}