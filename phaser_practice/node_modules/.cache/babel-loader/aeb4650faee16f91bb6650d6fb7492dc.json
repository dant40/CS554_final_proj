{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Compute a random four-dimensional vector.\r\n *\r\n * @function Phaser.Math.RandomXYZW\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector4} vec4 - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector4} The given Vector.\r\n */\nvar RandomXYZW = function (vec4, scale) {\n  if (scale === undefined) {\n    scale = 1;\n  } // TODO: Not spherical; should fix this for more uniform distribution\n\n\n  vec4.x = (Math.random() * 2 - 1) * scale;\n  vec4.y = (Math.random() * 2 - 1) * scale;\n  vec4.z = (Math.random() * 2 - 1) * scale;\n  vec4.w = (Math.random() * 2 - 1) * scale;\n  return vec4;\n};\n\nmodule.exports = RandomXYZW;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/RandomXYZW.js"],"names":["RandomXYZW","vec4","scale","undefined","x","Math","random","y","z","w","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,UAAU,GAAG,UAAUC,IAAV,EAAgBC,KAAhB,EACjB;AACI,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAG,CAAR;AAAY,GAD3C,CAGI;;;AACAD,EAAAA,IAAI,CAACG,CAAL,GAAS,CAACC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BJ,KAAnC;AACAD,EAAAA,IAAI,CAACM,CAAL,GAAS,CAACF,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BJ,KAAnC;AACAD,EAAAA,IAAI,CAACO,CAAL,GAAS,CAACH,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BJ,KAAnC;AACAD,EAAAA,IAAI,CAACQ,CAAL,GAAS,CAACJ,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAArB,IAA0BJ,KAAnC;AAEA,SAAOD,IAAP;AACH,CAXD;;AAaAS,MAAM,CAACC,OAAP,GAAiBX,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random four-dimensional vector.\r\n *\r\n * @function Phaser.Math.RandomXYZW\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector4} vec4 - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector4} The given Vector.\r\n */\r\nvar RandomXYZW = function (vec4, scale)\r\n{\r\n    if (scale === undefined) { scale = 1; }\r\n\r\n    // TODO: Not spherical; should fix this for more uniform distribution\r\n    vec4.x = (Math.random() * 2 - 1) * scale;\r\n    vec4.y = (Math.random() * 2 - 1) * scale;\r\n    vec4.z = (Math.random() * 2 - 1) * scale;\r\n    vec4.w = (Math.random() * 2 - 1) * scale;\r\n\r\n    return vec4;\r\n};\r\n\r\nmodule.exports = RandomXYZW;\r\n"]},"metadata":{},"sourceType":"script"}