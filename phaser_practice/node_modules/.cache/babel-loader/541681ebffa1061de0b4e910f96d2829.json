{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders a filled path for the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#FillPathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} calcMatrix - The transform matrix used to get the position values.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\n\n\nvar FillPathWebGL = function (pipeline, calcMatrix, src, alpha, dx, dy) {\n  var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\n  var path = src.pathData;\n  var pathIndexes = src.pathIndexes;\n\n  for (var i = 0; i < pathIndexes.length; i += 3) {\n    var p0 = pathIndexes[i] * 2;\n    var p1 = pathIndexes[i + 1] * 2;\n    var p2 = pathIndexes[i + 2] * 2;\n    var x0 = path[p0 + 0] - dx;\n    var y0 = path[p0 + 1] - dy;\n    var x1 = path[p1 + 0] - dx;\n    var y1 = path[p1 + 1] - dy;\n    var x2 = path[p2 + 0] - dx;\n    var y2 = path[p2 + 1] - dy;\n    var tx0 = calcMatrix.getX(x0, y0);\n    var ty0 = calcMatrix.getY(x0, y0);\n    var tx1 = calcMatrix.getX(x1, y1);\n    var ty1 = calcMatrix.getY(x1, y1);\n    var tx2 = calcMatrix.getX(x2, y2);\n    var ty2 = calcMatrix.getY(x2, y2);\n    pipeline.setTexture2D();\n    pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, pipeline.tintEffect);\n  }\n};\n\nmodule.exports = FillPathWebGL;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/FillPathWebGL.js"],"names":["Utils","require","FillPathWebGL","pipeline","calcMatrix","src","alpha","dx","dy","fillTintColor","getTintAppendFloatAlphaAndSwap","fillColor","fillAlpha","path","pathData","pathIndexes","i","length","p0","p1","p2","x0","y0","x1","y1","x2","y2","tx0","getX","ty0","getY","tx1","ty1","tx2","ty2","setTexture2D","batchTri","tintEffect","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,4BAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,aAAa,GAAG,UAAUC,QAAV,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,EAA4CC,EAA5C,EAAgDC,EAAhD,EACpB;AACI,MAAIC,aAAa,GAAGT,KAAK,CAACU,8BAAN,CAAqCL,GAAG,CAACM,SAAzC,EAAoDN,GAAG,CAACO,SAAJ,GAAgBN,KAApE,CAApB;AAEA,MAAIO,IAAI,GAAGR,GAAG,CAACS,QAAf;AACA,MAAIC,WAAW,GAAGV,GAAG,CAACU,WAAtB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,IAAI,CAA7C,EACA;AACI,QAAIE,EAAE,GAAGH,WAAW,CAACC,CAAD,CAAX,GAAiB,CAA1B;AACA,QAAIG,EAAE,GAAGJ,WAAW,CAACC,CAAC,GAAG,CAAL,CAAX,GAAqB,CAA9B;AACA,QAAII,EAAE,GAAGL,WAAW,CAACC,CAAC,GAAG,CAAL,CAAX,GAAqB,CAA9B;AAEA,QAAIK,EAAE,GAAGR,IAAI,CAACK,EAAE,GAAG,CAAN,CAAJ,GAAeX,EAAxB;AACA,QAAIe,EAAE,GAAGT,IAAI,CAACK,EAAE,GAAG,CAAN,CAAJ,GAAeV,EAAxB;AACA,QAAIe,EAAE,GAAGV,IAAI,CAACM,EAAE,GAAG,CAAN,CAAJ,GAAeZ,EAAxB;AACA,QAAIiB,EAAE,GAAGX,IAAI,CAACM,EAAE,GAAG,CAAN,CAAJ,GAAeX,EAAxB;AACA,QAAIiB,EAAE,GAAGZ,IAAI,CAACO,EAAE,GAAG,CAAN,CAAJ,GAAeb,EAAxB;AACA,QAAImB,EAAE,GAAGb,IAAI,CAACO,EAAE,GAAG,CAAN,CAAJ,GAAeZ,EAAxB;AAEA,QAAImB,GAAG,GAAGvB,UAAU,CAACwB,IAAX,CAAgBP,EAAhB,EAAoBC,EAApB,CAAV;AACA,QAAIO,GAAG,GAAGzB,UAAU,CAAC0B,IAAX,CAAgBT,EAAhB,EAAoBC,EAApB,CAAV;AAEA,QAAIS,GAAG,GAAG3B,UAAU,CAACwB,IAAX,CAAgBL,EAAhB,EAAoBC,EAApB,CAAV;AACA,QAAIQ,GAAG,GAAG5B,UAAU,CAAC0B,IAAX,CAAgBP,EAAhB,EAAoBC,EAApB,CAAV;AAEA,QAAIS,GAAG,GAAG7B,UAAU,CAACwB,IAAX,CAAgBH,EAAhB,EAAoBC,EAApB,CAAV;AACA,QAAIQ,GAAG,GAAG9B,UAAU,CAAC0B,IAAX,CAAgBL,EAAhB,EAAoBC,EAApB,CAAV;AAEAvB,IAAAA,QAAQ,CAACgC,YAAT;AAEAhC,IAAAA,QAAQ,CAACiC,QAAT,CAAkBT,GAAlB,EAAuBE,GAAvB,EAA4BE,GAA5B,EAAiCC,GAAjC,EAAsCC,GAAtC,EAA2CC,GAA3C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,CAAtD,EAAyD,CAAzD,EAA4DzB,aAA5D,EAA2EA,aAA3E,EAA0FA,aAA1F,EAAyGN,QAAQ,CAACkC,UAAlH;AACH;AACJ,CAjCD;;AAmCAC,MAAM,CAACC,OAAP,GAAiBrC,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders a filled path for the given Shape.\r\n *\r\n * @method Phaser.GameObjects.Shape#FillPathWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLPipeline} pipeline - The WebGL Pipeline used to render this Shape.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} calcMatrix - The transform matrix used to get the position values.\r\n * @param {Phaser.GameObjects.Shape} src - The Game Object shape being rendered in this call.\r\n * @param {number} alpha - The base alpha value.\r\n * @param {number} dx - The source displayOriginX.\r\n * @param {number} dy - The source displayOriginY.\r\n */\r\nvar FillPathWebGL = function (pipeline, calcMatrix, src, alpha, dx, dy)\r\n{\r\n    var fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\r\n\r\n    var path = src.pathData;\r\n    var pathIndexes = src.pathIndexes;\r\n\r\n    for (var i = 0; i < pathIndexes.length; i += 3)\r\n    {\r\n        var p0 = pathIndexes[i] * 2;\r\n        var p1 = pathIndexes[i + 1] * 2;\r\n        var p2 = pathIndexes[i + 2] * 2;\r\n\r\n        var x0 = path[p0 + 0] - dx;\r\n        var y0 = path[p0 + 1] - dy;\r\n        var x1 = path[p1 + 0] - dx;\r\n        var y1 = path[p1 + 1] - dy;\r\n        var x2 = path[p2 + 0] - dx;\r\n        var y2 = path[p2 + 1] - dy;\r\n\r\n        var tx0 = calcMatrix.getX(x0, y0);\r\n        var ty0 = calcMatrix.getY(x0, y0);\r\n\r\n        var tx1 = calcMatrix.getX(x1, y1);\r\n        var ty1 = calcMatrix.getY(x1, y1);\r\n\r\n        var tx2 = calcMatrix.getX(x2, y2);\r\n        var ty2 = calcMatrix.getY(x2, y2);\r\n    \r\n        pipeline.setTexture2D();\r\n\r\n        pipeline.batchTri(tx0, ty0, tx1, ty1, tx2, ty2, 0, 0, 1, 1, fillTintColor, fillTintColor, fillTintColor, pipeline.tintEffect);\r\n    }\r\n};\r\n\r\nmodule.exports = FillPathWebGL;\r\n"]},"metadata":{},"sourceType":"script"}