{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Scene Plugin Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#scenePlugin method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#scenePlugin.\r\n *\r\n * @class ScenePluginFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar ScenePluginFile = new Class({\n  Extends: File,\n  initialize: function ScenePluginFile(loader, key, url, systemKey, sceneKey, xhrSettings) {\n    var extension = 'js';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n      systemKey = GetFastValue(config, 'systemKey');\n      sceneKey = GetFastValue(config, 'sceneKey');\n    }\n\n    var fileConfig = {\n      type: 'scenePlugin',\n      cache: false,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings,\n      config: {\n        systemKey: systemKey,\n        sceneKey: sceneKey\n      }\n    };\n    File.call(this, loader, fileConfig); // If the url variable refers to a class, add the plugin directly\n\n    if (typeof url === 'function') {\n      this.data = url;\n      this.state = CONST.FILE_POPULATED;\n    }\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.ScenePluginFile#onProcess\r\n   * @since 3.8.0\r\n   */\n  onProcess: function () {\n    var pluginManager = this.loader.systems.plugins;\n    var config = this.config;\n    var key = this.key;\n    var systemKey = GetFastValue(config, 'systemKey', key);\n    var sceneKey = GetFastValue(config, 'sceneKey', key);\n\n    if (this.state === CONST.FILE_POPULATED) {\n      pluginManager.installScenePlugin(systemKey, this.data, sceneKey, this.loader.scene, true);\n    } else {\n      //  Plugin added via a js file\n      this.state = CONST.FILE_PROCESSING;\n      this.data = document.createElement('script');\n      this.data.language = 'javascript';\n      this.data.type = 'text/javascript';\n      this.data.defer = false;\n      this.data.text = this.xhrLoader.responseText;\n      document.head.appendChild(this.data);\n      pluginManager.installScenePlugin(systemKey, window[this.key], sceneKey, this.loader.scene, true);\n    }\n\n    this.onProcessComplete();\n  }\n});\n/**\r\n * Adds a Scene Plugin Script file, or array of plugin files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.scenePlugin('ModPlayer', 'plugins/ModPlayer.js', 'modPlayer', 'mods');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.scenePlugin({\r\n *     key: 'modplayer',\r\n *     url: 'plugins/ModPlayer.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.ScenePluginFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will automatically be converted into a script element\r\n * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. It will then be passed to the Phaser PluginCache.register method.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Script File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#scenePlugin\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.8.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|function)} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, set to a plugin function.\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('scenePlugin', function (key, url, systemKey, sceneKey, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new ScenePluginFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new ScenePluginFile(this, key, url, systemKey, sceneKey, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = ScenePluginFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/ScenePluginFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","ScenePluginFile","Extends","initialize","loader","key","url","systemKey","sceneKey","xhrSettings","extension","config","fileConfig","type","cache","responseType","call","data","state","FILE_POPULATED","onProcess","pluginManager","systems","plugins","installScenePlugin","scene","FILE_PROCESSING","document","createElement","language","defer","text","xhrLoader","responseText","head","appendChild","window","onProcessComplete","register","Array","isArray","i","length","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Scene Plugin Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#scenePlugin method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#scenePlugin.\r\n *\r\n * @class ScenePluginFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar ScenePluginFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function ScenePluginFile (loader, key, url, systemKey, sceneKey, xhrSettings)\r\n    {\r\n        var extension = 'js';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            systemKey = GetFastValue(config, 'systemKey');\r\n            sceneKey = GetFastValue(config, 'sceneKey');\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'scenePlugin',\r\n            cache: false,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                systemKey: systemKey,\r\n                sceneKey: sceneKey\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        // If the url variable refers to a class, add the plugin directly\r\n        if (typeof url === 'function')\r\n        {\r\n            this.data = url;\r\n\r\n            this.state = CONST.FILE_POPULATED;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ScenePluginFile#onProcess\r\n     * @since 3.8.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        var pluginManager = this.loader.systems.plugins;\r\n        var config = this.config;\r\n\r\n        var key = this.key;\r\n        var systemKey = GetFastValue(config, 'systemKey', key);\r\n        var sceneKey = GetFastValue(config, 'sceneKey', key);\r\n\r\n        if (this.state === CONST.FILE_POPULATED)\r\n        {\r\n            pluginManager.installScenePlugin(systemKey, this.data, sceneKey, this.loader.scene, true);\r\n        }\r\n        else\r\n        {\r\n            //  Plugin added via a js file\r\n            this.state = CONST.FILE_PROCESSING;\r\n\r\n            this.data = document.createElement('script');\r\n            this.data.language = 'javascript';\r\n            this.data.type = 'text/javascript';\r\n            this.data.defer = false;\r\n            this.data.text = this.xhrLoader.responseText;\r\n\r\n            document.head.appendChild(this.data);\r\n\r\n            pluginManager.installScenePlugin(systemKey, window[this.key], sceneKey, this.loader.scene, true);\r\n        }\r\n\r\n        this.onProcessComplete();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Scene Plugin Script file, or array of plugin files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.scenePlugin('ModPlayer', 'plugins/ModPlayer.js', 'modPlayer', 'mods');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.scenePlugin({\r\n *     key: 'modplayer',\r\n *     url: 'plugins/ModPlayer.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.ScenePluginFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will automatically be converted into a script element\r\n * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. It will then be passed to the Phaser PluginCache.register method.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Script File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#scenePlugin\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.8.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig|Phaser.Types.Loader.FileTypes.ScenePluginFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|function)} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, set to a plugin function.\r\n * @param {string} [systemKey] - If this plugin is to be added to Scene.Systems, this is the property key for it.\r\n * @param {string} [sceneKey] - If this plugin is to be added to the Scene, this is the property key for it.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('scenePlugin', function (key, url, systemKey, sceneKey, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new ScenePluginFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new ScenePluginFile(this, key, url, systemKey, sceneKey, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = ScenePluginFile;\r\n"]},"metadata":{},"sourceType":"script"}