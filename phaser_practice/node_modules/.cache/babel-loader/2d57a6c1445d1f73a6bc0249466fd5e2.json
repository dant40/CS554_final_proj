{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Pick = require('../../../utils/object/Pick');\n\nvar ParseGID = require('./ParseGID');\n\nvar copyPoints = function (p) {\n  return {\n    x: p.x,\n    y: p.y\n  };\n};\n\nvar commonObjectProps = ['id', 'name', 'type', 'rotation', 'properties', 'visible', 'x', 'y', 'width', 'height'];\n/**\r\n * Convert a Tiled object to an internal parsed object normalising and copying properties over, while applying optional x and y offsets. The parsed object will always have the properties `id`, `name`, `type`, `rotation`, `properties`, `visible`, `x`, `y`, `width` and `height`. Other properties will be added according to the object type (such as text, polyline, gid etc.)\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObject\r\n * @since 3.0.0\r\n *\r\n * @param {object} tiledObject - Tiled object to convert to an internal parsed object normalising and copying properties over.\r\n * @param {number} [offsetX=0] - Optional additional offset to apply to the object's x property. Defaults to 0.\r\n * @param {number} [offsetY=0] - Optional additional offset to apply to the object's y property. Defaults to 0.\r\n *\r\n * @return {object} The parsed object containing properties read from the Tiled object according to it's type with x and y values updated according to the given offsets.\r\n */\n\nvar ParseObject = function (tiledObject, offsetX, offsetY) {\n  if (offsetX === undefined) {\n    offsetX = 0;\n  }\n\n  if (offsetY === undefined) {\n    offsetY = 0;\n  }\n\n  var parsedObject = Pick(tiledObject, commonObjectProps);\n  parsedObject.x += offsetX;\n  parsedObject.y += offsetY;\n\n  if (tiledObject.gid) {\n    //  Object tiles\n    var gidInfo = ParseGID(tiledObject.gid);\n    parsedObject.gid = gidInfo.gid;\n    parsedObject.flippedHorizontal = gidInfo.flippedHorizontal;\n    parsedObject.flippedVertical = gidInfo.flippedVertical;\n    parsedObject.flippedAntiDiagonal = gidInfo.flippedAntiDiagonal;\n  } else if (tiledObject.polyline) {\n    parsedObject.polyline = tiledObject.polyline.map(copyPoints);\n  } else if (tiledObject.polygon) {\n    parsedObject.polygon = tiledObject.polygon.map(copyPoints);\n  } else if (tiledObject.ellipse) {\n    parsedObject.ellipse = tiledObject.ellipse;\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n  } else if (tiledObject.text) {\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n    parsedObject.text = tiledObject.text;\n  } else {\n    // Otherwise, assume it is a rectangle\n    parsedObject.rectangle = true;\n    parsedObject.width = tiledObject.width;\n    parsedObject.height = tiledObject.height;\n  }\n\n  return parsedObject;\n};\n\nmodule.exports = ParseObject;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/ParseObject.js"],"names":["Pick","require","ParseGID","copyPoints","p","x","y","commonObjectProps","ParseObject","tiledObject","offsetX","offsetY","undefined","parsedObject","gid","gidInfo","flippedHorizontal","flippedVertical","flippedAntiDiagonal","polyline","map","polygon","ellipse","width","height","text","rectangle","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,4BAAD,CAAlB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIE,UAAU,GAAG,UAAUC,CAAV,EAAa;AAAE,SAAO;AAAEC,IAAAA,CAAC,EAAED,CAAC,CAACC,CAAP;AAAUC,IAAAA,CAAC,EAAEF,CAAC,CAACE;AAAf,GAAP;AAA4B,CAA5D;;AAEA,IAAIC,iBAAiB,GAAG,CAAE,IAAF,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,UAAxB,EAAoC,YAApC,EAAkD,SAAlD,EAA6D,GAA7D,EAAkE,GAAlE,EAAuE,OAAvE,EAAgF,QAAhF,CAAxB;AAEA;;;;;;;;;;;;;AAYA,IAAIC,WAAW,GAAG,UAAUC,WAAV,EAAuBC,OAAvB,EAAgCC,OAAhC,EAClB;AACI,MAAID,OAAO,KAAKE,SAAhB,EAA2B;AAAEF,IAAAA,OAAO,GAAG,CAAV;AAAc;;AAC3C,MAAIC,OAAO,KAAKC,SAAhB,EAA2B;AAAED,IAAAA,OAAO,GAAG,CAAV;AAAc;;AAE3C,MAAIE,YAAY,GAAGb,IAAI,CAACS,WAAD,EAAcF,iBAAd,CAAvB;AAEAM,EAAAA,YAAY,CAACR,CAAb,IAAkBK,OAAlB;AACAG,EAAAA,YAAY,CAACP,CAAb,IAAkBK,OAAlB;;AAEA,MAAIF,WAAW,CAACK,GAAhB,EACA;AACI;AACA,QAAIC,OAAO,GAAGb,QAAQ,CAACO,WAAW,CAACK,GAAb,CAAtB;AACAD,IAAAA,YAAY,CAACC,GAAb,GAAmBC,OAAO,CAACD,GAA3B;AACAD,IAAAA,YAAY,CAACG,iBAAb,GAAiCD,OAAO,CAACC,iBAAzC;AACAH,IAAAA,YAAY,CAACI,eAAb,GAA+BF,OAAO,CAACE,eAAvC;AACAJ,IAAAA,YAAY,CAACK,mBAAb,GAAmCH,OAAO,CAACG,mBAA3C;AACH,GARD,MASK,IAAIT,WAAW,CAACU,QAAhB,EACL;AACIN,IAAAA,YAAY,CAACM,QAAb,GAAwBV,WAAW,CAACU,QAAZ,CAAqBC,GAArB,CAAyBjB,UAAzB,CAAxB;AACH,GAHI,MAIA,IAAIM,WAAW,CAACY,OAAhB,EACL;AACIR,IAAAA,YAAY,CAACQ,OAAb,GAAuBZ,WAAW,CAACY,OAAZ,CAAoBD,GAApB,CAAwBjB,UAAxB,CAAvB;AACH,GAHI,MAIA,IAAIM,WAAW,CAACa,OAAhB,EACL;AACIT,IAAAA,YAAY,CAACS,OAAb,GAAuBb,WAAW,CAACa,OAAnC;AACAT,IAAAA,YAAY,CAACU,KAAb,GAAqBd,WAAW,CAACc,KAAjC;AACAV,IAAAA,YAAY,CAACW,MAAb,GAAsBf,WAAW,CAACe,MAAlC;AACH,GALI,MAMA,IAAIf,WAAW,CAACgB,IAAhB,EACL;AACIZ,IAAAA,YAAY,CAACU,KAAb,GAAqBd,WAAW,CAACc,KAAjC;AACAV,IAAAA,YAAY,CAACW,MAAb,GAAsBf,WAAW,CAACe,MAAlC;AACAX,IAAAA,YAAY,CAACY,IAAb,GAAoBhB,WAAW,CAACgB,IAAhC;AACH,GALI,MAOL;AACI;AACAZ,IAAAA,YAAY,CAACa,SAAb,GAAyB,IAAzB;AACAb,IAAAA,YAAY,CAACU,KAAb,GAAqBd,WAAW,CAACc,KAAjC;AACAV,IAAAA,YAAY,CAACW,MAAb,GAAsBf,WAAW,CAACe,MAAlC;AACH;;AAED,SAAOX,YAAP;AACH,CAhDD;;AAkDAc,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Pick = require('../../../utils/object/Pick');\r\nvar ParseGID = require('./ParseGID');\r\n\r\nvar copyPoints = function (p) { return { x: p.x, y: p.y }; };\r\n\r\nvar commonObjectProps = [ 'id', 'name', 'type', 'rotation', 'properties', 'visible', 'x', 'y', 'width', 'height' ];\r\n\r\n/**\r\n * Convert a Tiled object to an internal parsed object normalising and copying properties over, while applying optional x and y offsets. The parsed object will always have the properties `id`, `name`, `type`, `rotation`, `properties`, `visible`, `x`, `y`, `width` and `height`. Other properties will be added according to the object type (such as text, polyline, gid etc.)\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObject\r\n * @since 3.0.0\r\n *\r\n * @param {object} tiledObject - Tiled object to convert to an internal parsed object normalising and copying properties over.\r\n * @param {number} [offsetX=0] - Optional additional offset to apply to the object's x property. Defaults to 0.\r\n * @param {number} [offsetY=0] - Optional additional offset to apply to the object's y property. Defaults to 0.\r\n *\r\n * @return {object} The parsed object containing properties read from the Tiled object according to it's type with x and y values updated according to the given offsets.\r\n */\r\nvar ParseObject = function (tiledObject, offsetX, offsetY)\r\n{\r\n    if (offsetX === undefined) { offsetX = 0; }\r\n    if (offsetY === undefined) { offsetY = 0; }\r\n\r\n    var parsedObject = Pick(tiledObject, commonObjectProps);\r\n\r\n    parsedObject.x += offsetX;\r\n    parsedObject.y += offsetY;\r\n\r\n    if (tiledObject.gid)\r\n    {\r\n        //  Object tiles\r\n        var gidInfo = ParseGID(tiledObject.gid);\r\n        parsedObject.gid = gidInfo.gid;\r\n        parsedObject.flippedHorizontal = gidInfo.flippedHorizontal;\r\n        parsedObject.flippedVertical = gidInfo.flippedVertical;\r\n        parsedObject.flippedAntiDiagonal = gidInfo.flippedAntiDiagonal;\r\n    }\r\n    else if (tiledObject.polyline)\r\n    {\r\n        parsedObject.polyline = tiledObject.polyline.map(copyPoints);\r\n    }\r\n    else if (tiledObject.polygon)\r\n    {\r\n        parsedObject.polygon = tiledObject.polygon.map(copyPoints);\r\n    }\r\n    else if (tiledObject.ellipse)\r\n    {\r\n        parsedObject.ellipse = tiledObject.ellipse;\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n    }\r\n    else if (tiledObject.text)\r\n    {\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n        parsedObject.text = tiledObject.text;\r\n    }\r\n    else\r\n    {\r\n        // Otherwise, assume it is a rectangle\r\n        parsedObject.rectangle = true;\r\n        parsedObject.width = tiledObject.width;\r\n        parsedObject.height = tiledObject.height;\r\n    }\r\n\r\n    return parsedObject;\r\n};\r\n\r\nmodule.exports = ParseObject;\r\n"]},"metadata":{},"sourceType":"script"}