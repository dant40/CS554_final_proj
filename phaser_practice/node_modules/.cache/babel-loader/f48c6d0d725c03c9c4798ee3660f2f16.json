{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar NOOP = require('../utils/NOOP');\n/**\r\n * @classdesc\r\n * Abstracts away the use of RAF or setTimeOut for the core game update loop.\r\n * This is invoked automatically by the Phaser.Game instance.\r\n *\r\n * @class RequestAnimationFrame\r\n * @memberof Phaser.DOM\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar RequestAnimationFrame = new Class({\n  initialize: function RequestAnimationFrame() {\n    /**\r\n     * True if RequestAnimationFrame is running, otherwise false.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#isRunning\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n    this.isRunning = false;\n    /**\r\n     * The callback to be invoked each step.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#callback\r\n     * @type {FrameRequestCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.callback = NOOP;\n    /**\r\n     * The most recent timestamp. Either a DOMHighResTimeStamp under RAF or `Date.now` under SetTimeout.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#tick\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.tick = 0;\n    /**\r\n     * True if the step is using setTimeout instead of RAF.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#isSetTimeOut\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isSetTimeOut = false;\n    /**\r\n     * The setTimeout or RAF callback ID used when canceling them.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#timeOutID\r\n     * @type {?number}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.timeOutID = null;\n    /**\r\n     * The previous time the step was called.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#lastTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lastTime = 0;\n    /**\r\n     * The target FPS rate in ms.\r\n     * Only used when setTimeout is used instead of RAF.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#target\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.21.0\r\n     */\n\n    this.target = 0;\n\n    var _this = this;\n    /**\r\n     * The RAF step function.\r\n     * Updates the local tick value, invokes the callback and schedules another call to requestAnimationFrame.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#step\r\n     * @type {FrameRequestCallback}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.step = function step() {\n      //  Because we cannot trust the time passed to this callback from the browser and need it kept in sync with event times\n      var timestamp = window.performance.now(); //  DOMHighResTimeStamp\n\n      _this.lastTime = _this.tick;\n      _this.tick = timestamp;\n\n      _this.callback(timestamp);\n\n      _this.timeOutID = window.requestAnimationFrame(step);\n    };\n    /**\r\n     * The SetTimeout step function.\r\n     * Updates the local tick value, invokes the callback and schedules another call to setTimeout.\r\n     *\r\n     * @name Phaser.DOM.RequestAnimationFrame#stepTimeout\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.stepTimeout = function stepTimeout() {\n      var d = Date.now();\n      var delay = Math.min(Math.max(_this.target * 2 + _this.tick - d, 0), _this.target);\n      _this.lastTime = _this.tick;\n      _this.tick = d;\n\n      _this.callback(d);\n\n      _this.timeOutID = window.setTimeout(stepTimeout, delay);\n    };\n  },\n\n  /**\r\n   * Starts the requestAnimationFrame or setTimeout process running.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#start\r\n   * @since 3.0.0\r\n   *\r\n   * @param {FrameRequestCallback} callback - The callback to invoke each step.\r\n   * @param {boolean} forceSetTimeOut - Should it use SetTimeout, even if RAF is available?\r\n   * @param {number} targetFPS - The target fps rate (in ms). Only used when setTimeout is used.\r\n   */\n  start: function (callback, forceSetTimeOut, targetFPS) {\n    if (this.isRunning) {\n      return;\n    }\n\n    this.callback = callback;\n    this.isSetTimeOut = forceSetTimeOut;\n    this.target = targetFPS;\n    this.isRunning = true;\n    this.timeOutID = forceSetTimeOut ? window.setTimeout(this.stepTimeout, 0) : window.requestAnimationFrame(this.step);\n  },\n\n  /**\r\n   * Stops the requestAnimationFrame or setTimeout from running.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#stop\r\n   * @since 3.0.0\r\n   */\n  stop: function () {\n    this.isRunning = false;\n\n    if (this.isSetTimeOut) {\n      clearTimeout(this.timeOutID);\n    } else {\n      window.cancelAnimationFrame(this.timeOutID);\n    }\n  },\n\n  /**\r\n   * Stops the step from running and clears the callback reference.\r\n   *\r\n   * @method Phaser.DOM.RequestAnimationFrame#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.stop();\n    this.callback = NOOP;\n  }\n});\nmodule.exports = RequestAnimationFrame;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/dom/RequestAnimationFrame.js"],"names":["Class","require","NOOP","RequestAnimationFrame","initialize","isRunning","callback","tick","isSetTimeOut","timeOutID","lastTime","target","_this","step","timestamp","window","performance","now","requestAnimationFrame","stepTimeout","d","Date","delay","Math","min","max","setTimeout","start","forceSetTimeOut","targetFPS","stop","clearTimeout","cancelAnimationFrame","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,eAAD,CAAlB;AAEA;;;;;;;;;;;;AAUA,IAAIE,qBAAqB,GAAG,IAAIH,KAAJ,CAAU;AAElCI,EAAAA,UAAU,EAEV,SAASD,qBAAT,GACA;AACI;;;;;;;;AAQA,SAAKE,SAAL,GAAiB,KAAjB;AAEA;;;;;;;;AAOA,SAAKC,QAAL,GAAgBJ,IAAhB;AAEA;;;;;;;;;AAQA,SAAKK,IAAL,GAAY,CAAZ;AAEA;;;;;;;;;AAQA,SAAKC,YAAL,GAAoB,KAApB;AAEA;;;;;;;;;AAQA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;;;;;;;;AAQA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,MAAL,GAAc,CAAd;;AAEA,QAAIC,KAAK,GAAG,IAAZ;AAEA;;;;;;;;;;AAQA,SAAKC,IAAL,GAAY,SAASA,IAAT,GACZ;AACI;AACA,UAAIC,SAAS,GAAGC,MAAM,CAACC,WAAP,CAAmBC,GAAnB,EAAhB,CAFJ,CAII;;AACAL,MAAAA,KAAK,CAACF,QAAN,GAAiBE,KAAK,CAACL,IAAvB;AAEAK,MAAAA,KAAK,CAACL,IAAN,GAAaO,SAAb;;AAEAF,MAAAA,KAAK,CAACN,QAAN,CAAeQ,SAAf;;AAEAF,MAAAA,KAAK,CAACH,SAAN,GAAkBM,MAAM,CAACG,qBAAP,CAA6BL,IAA7B,CAAlB;AACH,KAbD;AAeA;;;;;;;;;;AAQA,SAAKM,WAAL,GAAmB,SAASA,WAAT,GACnB;AACI,UAAIC,CAAC,GAAGC,IAAI,CAACJ,GAAL,EAAR;AAEA,UAAIK,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASb,KAAK,CAACD,MAAN,GAAe,CAAf,GAAmBC,KAAK,CAACL,IAAzB,GAAgCa,CAAzC,EAA4C,CAA5C,CAAT,EAAyDR,KAAK,CAACD,MAA/D,CAAZ;AAEAC,MAAAA,KAAK,CAACF,QAAN,GAAiBE,KAAK,CAACL,IAAvB;AAEAK,MAAAA,KAAK,CAACL,IAAN,GAAaa,CAAb;;AAEAR,MAAAA,KAAK,CAACN,QAAN,CAAec,CAAf;;AAEAR,MAAAA,KAAK,CAACH,SAAN,GAAkBM,MAAM,CAACW,UAAP,CAAkBP,WAAlB,EAA+BG,KAA/B,CAAlB;AACH,KAbD;AAcH,GA3HiC;;AA6HlC;;;;;;;;;;AAUAK,EAAAA,KAAK,EAAE,UAAUrB,QAAV,EAAoBsB,eAApB,EAAqCC,SAArC,EACP;AACI,QAAI,KAAKxB,SAAT,EACA;AACI;AACH;;AAED,SAAKC,QAAL,GAAgBA,QAAhB;AAEA,SAAKE,YAAL,GAAoBoB,eAApB;AAEA,SAAKjB,MAAL,GAAckB,SAAd;AAEA,SAAKxB,SAAL,GAAiB,IAAjB;AAEA,SAAKI,SAAL,GAAkBmB,eAAD,GAAoBb,MAAM,CAACW,UAAP,CAAkB,KAAKP,WAAvB,EAAoC,CAApC,CAApB,GAA6DJ,MAAM,CAACG,qBAAP,CAA6B,KAAKL,IAAlC,CAA9E;AACH,GAvJiC;;AAyJlC;;;;;;AAMAiB,EAAAA,IAAI,EAAE,YACN;AACI,SAAKzB,SAAL,GAAiB,KAAjB;;AAEA,QAAI,KAAKG,YAAT,EACA;AACIuB,MAAAA,YAAY,CAAC,KAAKtB,SAAN,CAAZ;AACH,KAHD,MAKA;AACIM,MAAAA,MAAM,CAACiB,oBAAP,CAA4B,KAAKvB,SAAjC;AACH;AACJ,GA3KiC;;AA6KlC;;;;;;AAMAwB,EAAAA,OAAO,EAAE,YACT;AACI,SAAKH,IAAL;AAEA,SAAKxB,QAAL,GAAgBJ,IAAhB;AACH;AAxLiC,CAAV,CAA5B;AA4LAgC,MAAM,CAACC,OAAP,GAAiBhC,qBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar NOOP = require('../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * Abstracts away the use of RAF or setTimeOut for the core game update loop.\r\n * This is invoked automatically by the Phaser.Game instance.\r\n *\r\n * @class RequestAnimationFrame\r\n * @memberof Phaser.DOM\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar RequestAnimationFrame = new Class({\r\n\r\n    initialize:\r\n\r\n    function RequestAnimationFrame ()\r\n    {\r\n        /**\r\n         * True if RequestAnimationFrame is running, otherwise false.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#isRunning\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The callback to be invoked each step.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#callback\r\n         * @type {FrameRequestCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.callback = NOOP;\r\n\r\n        /**\r\n         * The most recent timestamp. Either a DOMHighResTimeStamp under RAF or `Date.now` under SetTimeout.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#tick\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.tick = 0;\r\n\r\n        /**\r\n         * True if the step is using setTimeout instead of RAF.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#isSetTimeOut\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isSetTimeOut = false;\r\n\r\n        /**\r\n         * The setTimeout or RAF callback ID used when canceling them.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#timeOutID\r\n         * @type {?number}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.timeOutID = null;\r\n\r\n        /**\r\n         * The previous time the step was called.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#lastTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.lastTime = 0;\r\n\r\n        /**\r\n         * The target FPS rate in ms.\r\n         * Only used when setTimeout is used instead of RAF.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#target\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.21.0\r\n         */\r\n        this.target = 0;\r\n\r\n        var _this = this;\r\n\r\n        /**\r\n         * The RAF step function.\r\n         * Updates the local tick value, invokes the callback and schedules another call to requestAnimationFrame.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#step\r\n         * @type {FrameRequestCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.step = function step ()\r\n        {\r\n            //  Because we cannot trust the time passed to this callback from the browser and need it kept in sync with event times\r\n            var timestamp = window.performance.now();\r\n\r\n            //  DOMHighResTimeStamp\r\n            _this.lastTime = _this.tick;\r\n\r\n            _this.tick = timestamp;\r\n\r\n            _this.callback(timestamp);\r\n\r\n            _this.timeOutID = window.requestAnimationFrame(step);\r\n        };\r\n\r\n        /**\r\n         * The SetTimeout step function.\r\n         * Updates the local tick value, invokes the callback and schedules another call to setTimeout.\r\n         *\r\n         * @name Phaser.DOM.RequestAnimationFrame#stepTimeout\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.stepTimeout = function stepTimeout ()\r\n        {\r\n            var d = Date.now();\r\n\r\n            var delay = Math.min(Math.max(_this.target * 2 + _this.tick - d, 0), _this.target);\r\n\r\n            _this.lastTime = _this.tick;\r\n\r\n            _this.tick = d;\r\n\r\n            _this.callback(d);\r\n\r\n            _this.timeOutID = window.setTimeout(stepTimeout, delay);\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Starts the requestAnimationFrame or setTimeout process running.\r\n     *\r\n     * @method Phaser.DOM.RequestAnimationFrame#start\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FrameRequestCallback} callback - The callback to invoke each step.\r\n     * @param {boolean} forceSetTimeOut - Should it use SetTimeout, even if RAF is available?\r\n     * @param {number} targetFPS - The target fps rate (in ms). Only used when setTimeout is used.\r\n     */\r\n    start: function (callback, forceSetTimeOut, targetFPS)\r\n    {\r\n        if (this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.callback = callback;\r\n\r\n        this.isSetTimeOut = forceSetTimeOut;\r\n\r\n        this.target = targetFPS;\r\n\r\n        this.isRunning = true;\r\n\r\n        this.timeOutID = (forceSetTimeOut) ? window.setTimeout(this.stepTimeout, 0) : window.requestAnimationFrame(this.step);\r\n    },\r\n\r\n    /**\r\n     * Stops the requestAnimationFrame or setTimeout from running.\r\n     *\r\n     * @method Phaser.DOM.RequestAnimationFrame#stop\r\n     * @since 3.0.0\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        if (this.isSetTimeOut)\r\n        {\r\n            clearTimeout(this.timeOutID);\r\n        }\r\n        else\r\n        {\r\n            window.cancelAnimationFrame(this.timeOutID);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Stops the step from running and clears the callback reference.\r\n     *\r\n     * @method Phaser.DOM.RequestAnimationFrame#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stop();\r\n\r\n        this.callback = NOOP;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = RequestAnimationFrame;\r\n"]},"metadata":{},"sourceType":"script"}