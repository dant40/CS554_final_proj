{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n/**\r\n * @classdesc\r\n * A Death Zone.\r\n *\r\n * A Death Zone is a special type of zone that will kill a Particle as soon as it either enters, or leaves, the zone.\r\n *\r\n * The zone consists of a `source` which could be a Geometric shape, such as a Rectangle or Ellipse, or your own\r\n * object as long as it includes a `contains` method for which the Particles can be tested against.\r\n *\r\n * @class DeathZone\r\n * @memberof Phaser.GameObjects.Particles.Zones\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.GameObjects.Particles.DeathZoneSource} source - An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n * @param {boolean} killOnEnter - Should the Particle be killed when it enters the zone? `true` or leaves it? `false`\r\n */\n\n\nvar DeathZone = new Class({\n  initialize: function DeathZone(source, killOnEnter) {\n    /**\r\n     * An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n     * This could be a Geometry shape, such as `Phaser.Geom.Circle`, or your own custom object.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.DeathZone#source\r\n     * @type {Phaser.Types.GameObjects.Particles.DeathZoneSource}\r\n     * @since 3.0.0\r\n     */\n    this.source = source;\n    /**\r\n     * Set to `true` if the Particle should be killed if it enters this zone.\r\n     * Set to `false` to kill the Particle if it leaves this zone.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Zones.DeathZone#killOnEnter\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.killOnEnter = killOnEnter;\n  },\n\n  /**\r\n   * Checks if the given Particle will be killed or not by this zone.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Zones.DeathZone#willKill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to be checked against this zone.\r\n   *\r\n   * @return {boolean} Return `true` if the Particle is to be killed, otherwise return `false`.\r\n   */\n  willKill: function (particle) {\n    var withinZone = this.source.contains(particle.x, particle.y);\n    return withinZone && this.killOnEnter || !withinZone && !this.killOnEnter;\n  }\n});\nmodule.exports = DeathZone;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/zones/DeathZone.js"],"names":["Class","require","DeathZone","initialize","source","killOnEnter","willKill","particle","withinZone","contains","x","y","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,SAAS,GAAG,IAAIF,KAAJ,CAAU;AAEtBG,EAAAA,UAAU,EAEV,SAASD,SAAT,CAAoBE,MAApB,EAA4BC,WAA5B,EACA;AACI;;;;;;;;AAQA,SAAKD,MAAL,GAAcA,MAAd;AAEA;;;;;;;;;AAQA,SAAKC,WAAL,GAAmBA,WAAnB;AACH,GAzBqB;;AA2BtB;;;;;;;;;;AAUAC,EAAAA,QAAQ,EAAE,UAAUC,QAAV,EACV;AACI,QAAIC,UAAU,GAAG,KAAKJ,MAAL,CAAYK,QAAZ,CAAqBF,QAAQ,CAACG,CAA9B,EAAiCH,QAAQ,CAACI,CAA1C,CAAjB;AAEA,WAAQH,UAAU,IAAI,KAAKH,WAAnB,IAAkC,CAACG,UAAD,IAAe,CAAC,KAAKH,WAA/D;AACH;AA1CqB,CAAV,CAAhB;AA8CAO,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A Death Zone.\r\n *\r\n * A Death Zone is a special type of zone that will kill a Particle as soon as it either enters, or leaves, the zone.\r\n *\r\n * The zone consists of a `source` which could be a Geometric shape, such as a Rectangle or Ellipse, or your own\r\n * object as long as it includes a `contains` method for which the Particles can be tested against.\r\n *\r\n * @class DeathZone\r\n * @memberof Phaser.GameObjects.Particles.Zones\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.GameObjects.Particles.DeathZoneSource} source - An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n * @param {boolean} killOnEnter - Should the Particle be killed when it enters the zone? `true` or leaves it? `false`\r\n */\r\nvar DeathZone = new Class({\r\n\r\n    initialize:\r\n\r\n    function DeathZone (source, killOnEnter)\r\n    {\r\n        /**\r\n         * An object instance that has a `contains` method that returns a boolean when given `x` and `y` arguments.\r\n         * This could be a Geometry shape, such as `Phaser.Geom.Circle`, or your own custom object.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Zones.DeathZone#source\r\n         * @type {Phaser.Types.GameObjects.Particles.DeathZoneSource}\r\n         * @since 3.0.0\r\n         */\r\n        this.source = source;\r\n\r\n        /**\r\n         * Set to `true` if the Particle should be killed if it enters this zone.\r\n         * Set to `false` to kill the Particle if it leaves this zone.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Zones.DeathZone#killOnEnter\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.killOnEnter = killOnEnter;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given Particle will be killed or not by this zone.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Zones.DeathZone#willKill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.Particle} particle - The Particle to be checked against this zone.\r\n     *\r\n     * @return {boolean} Return `true` if the Particle is to be killed, otherwise return `false`.\r\n     */\r\n    willKill: function (particle)\r\n    {\r\n        var withinZone = this.source.contains(particle.x, particle.y);\r\n\r\n        return (withinZone && this.killOnEnter || !withinZone && !this.killOnEnter);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DeathZone;\r\n"]},"metadata":{},"sourceType":"script"}