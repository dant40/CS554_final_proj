{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar ImageFile = require('./ImageFile.js');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar MultiFile = require('../MultiFile.js');\n\nvar ParseXMLBitmapFont = require('../../gameobjects/bitmaptext/ParseXMLBitmapFont.js');\n\nvar XMLFile = require('./XMLFile.js');\n/**\r\n * @classdesc\r\n * A single Bitmap Font based File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#bitmapFont method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#bitmapFont.\r\n *\r\n * @class BitmapFontFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n */\n\n\nvar BitmapFontFile = new Class({\n  Extends: MultiFile,\n  initialize: function BitmapFontFile(loader, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings) {\n    var image;\n    var data;\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      image = new ImageFile(loader, {\n        key: key,\n        url: GetFastValue(config, 'textureURL'),\n        extension: GetFastValue(config, 'textureExtension', 'png'),\n        normalMap: GetFastValue(config, 'normalMap'),\n        xhrSettings: GetFastValue(config, 'textureXhrSettings')\n      });\n      data = new XMLFile(loader, {\n        key: key,\n        url: GetFastValue(config, 'fontDataURL'),\n        extension: GetFastValue(config, 'fontDataExtension', 'xml'),\n        xhrSettings: GetFastValue(config, 'fontDataXhrSettings')\n      });\n    } else {\n      image = new ImageFile(loader, key, textureURL, textureXhrSettings);\n      data = new XMLFile(loader, key, fontDataURL, fontDataXhrSettings);\n    }\n\n    if (image.linkFile) {\n      //  Image has a normal map\n      MultiFile.call(this, loader, 'bitmapfont', key, [image, data, image.linkFile]);\n    } else {\n      MultiFile.call(this, loader, 'bitmapfont', key, [image, data]);\n    }\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.BitmapFontFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function () {\n    if (this.isReadyToProcess()) {\n      var image = this.files[0];\n      var xml = this.files[1];\n      image.addToCache();\n      xml.addToCache();\n      this.loader.cacheManager.bitmapFont.add(image.key, {\n        data: ParseXMLBitmapFont(xml.data),\n        texture: image.key,\n        frame: null\n      });\n      this.complete = true;\n    }\n  }\n});\n/**\r\n * Adds an XML based Bitmap Font, or array of fonts, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the font data to be provided in an XML file format.\r\n * These files are created by software such as the [Angelcode Bitmap Font Generator](http://www.angelcode.com/products/bmfont/),\r\n * [Littera](http://kvazars.com/littera/) or [Glyph Designer](https://71squared.com/glyphdesigner)\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.BitmapFontFileConfig` for more details.\r\n *\r\n * Once the atlas has finished loading you can use key of it when creating a Bitmap Text Game Object:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * // and later in your game ...\r\n * this.add.bitmapText(x, y, 'goldenFont', 'Hello World');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use when creating a Bitmap Text object.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', [ 'images/GoldFont.png', 'images/GoldFont-n.png' ], 'images/GoldFont.xml');\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     normalMap: 'images/GoldFont-n.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Bitmap Font File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#bitmapFont\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('bitmapFont', function (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings) {\n  var multifile; //  Supports an Object file definition in the key argument\n  //  Or an array of objects in the key argument\n  //  Or a single entry where all arguments have been defined\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      multifile = new BitmapFontFile(this, key[i]);\n      this.addFile(multifile.files);\n    }\n  } else {\n    multifile = new BitmapFontFile(this, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings);\n    this.addFile(multifile.files);\n  }\n\n  return this;\n});\nmodule.exports = BitmapFontFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/BitmapFontFile.js"],"names":["Class","require","FileTypesManager","GetFastValue","ImageFile","IsPlainObject","MultiFile","ParseXMLBitmapFont","XMLFile","BitmapFontFile","Extends","initialize","loader","key","textureURL","fontDataURL","textureXhrSettings","fontDataXhrSettings","image","data","config","url","extension","normalMap","xhrSettings","linkFile","call","addToCache","isReadyToProcess","files","xml","cacheManager","bitmapFont","add","texture","frame","complete","register","multifile","Array","isArray","i","length","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar ImageFile = require('./ImageFile.js');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar MultiFile = require('../MultiFile.js');\r\nvar ParseXMLBitmapFont = require('../../gameobjects/bitmaptext/ParseXMLBitmapFont.js');\r\nvar XMLFile = require('./XMLFile.js');\r\n\r\n/**\r\n * @classdesc\r\n * A single Bitmap Font based File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#bitmapFont method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#bitmapFont.\r\n *\r\n * @class BitmapFontFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n */\r\nvar BitmapFontFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function BitmapFontFile (loader, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings)\r\n    {\r\n        var image;\r\n        var data;\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n\r\n            image = new ImageFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'textureURL'),\r\n                extension: GetFastValue(config, 'textureExtension', 'png'),\r\n                normalMap: GetFastValue(config, 'normalMap'),\r\n                xhrSettings: GetFastValue(config, 'textureXhrSettings')\r\n            });\r\n\r\n            data = new XMLFile(loader, {\r\n                key: key,\r\n                url: GetFastValue(config, 'fontDataURL'),\r\n                extension: GetFastValue(config, 'fontDataExtension', 'xml'),\r\n                xhrSettings: GetFastValue(config, 'fontDataXhrSettings')\r\n            });\r\n        }\r\n        else\r\n        {\r\n            image = new ImageFile(loader, key, textureURL, textureXhrSettings);\r\n            data = new XMLFile(loader, key, fontDataURL, fontDataXhrSettings);\r\n        }\r\n\r\n        if (image.linkFile)\r\n        {\r\n            //  Image has a normal map\r\n            MultiFile.call(this, loader, 'bitmapfont', key, [ image, data, image.linkFile ]);\r\n        }\r\n        else\r\n        {\r\n            MultiFile.call(this, loader, 'bitmapfont', key, [ image, data ]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.BitmapFontFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.isReadyToProcess())\r\n        {\r\n            var image = this.files[0];\r\n            var xml = this.files[1];\r\n\r\n            image.addToCache();\r\n            xml.addToCache();\r\n\r\n            this.loader.cacheManager.bitmapFont.add(image.key, { data: ParseXMLBitmapFont(xml.data), texture: image.key, frame: null });\r\n\r\n            this.complete = true;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an XML based Bitmap Font, or array of fonts, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the font data to be provided in an XML file format.\r\n * These files are created by software such as the [Angelcode Bitmap Font Generator](http://www.angelcode.com/products/bmfont/),\r\n * [Littera](http://kvazars.com/littera/) or [Glyph Designer](https://71squared.com/glyphdesigner)\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.BitmapFontFileConfig` for more details.\r\n *\r\n * Once the atlas has finished loading you can use key of it when creating a Bitmap Text Game Object:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', 'images/GoldFont.png', 'images/GoldFont.xml');\r\n * // and later in your game ...\r\n * this.add.bitmapText(x, y, 'goldenFont', 'Hello World');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use when creating a Bitmap Text object.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont('goldenFont', [ 'images/GoldFont.png', 'images/GoldFont-n.png' ], 'images/GoldFont.xml');\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.bitmapFont({\r\n *     key: 'goldenFont',\r\n *     textureURL: 'images/GoldFont.png',\r\n *     normalMap: 'images/GoldFont-n.png',\r\n *     fontDataURL: 'images/GoldFont.xml'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Bitmap Font File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#bitmapFont\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig|Phaser.Types.Loader.FileTypes.BitmapFontFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [textureURL] - The absolute or relative URL to load the font image file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {string} [fontDataURL] - The absolute or relative URL to load the font xml data file from. If undefined or `null` it will be set to `<key>.xml`, i.e. if `key` was \"alien\" then the URL will be \"alien.xml\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - An XHR Settings configuration object for the font image file. Used in replacement of the Loaders default XHR Settings.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [fontDataXhrSettings] - An XHR Settings configuration object for the font data xml file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('bitmapFont', function (key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings)\r\n{\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new BitmapFontFile(this, key[i]);\r\n\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new BitmapFontFile(this, key, textureURL, fontDataURL, textureXhrSettings, fontDataXhrSettings);\r\n\r\n        this.addFile(multifile.files);\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = BitmapFontFile;\r\n"]},"metadata":{},"sourceType":"script"}