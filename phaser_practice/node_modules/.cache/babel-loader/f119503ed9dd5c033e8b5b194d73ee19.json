{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Linear = require('../../math/Linear');\n/**\r\n * @namespace Phaser.Display.Color.Interpolate\r\n * @memberof Phaser.Display.Color\r\n * @since 3.0.0\r\n */\n\n/**\r\n * Interpolates between the two given color ranges over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.RGBWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {number} r1 - Red value.\r\n * @param {number} g1 - Blue value.\r\n * @param {number} b1 - Green value.\r\n * @param {number} r2 - Red value.\r\n * @param {number} g2 - Blue value.\r\n * @param {number} b2 - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar RGBWithRGB = function (r1, g1, b1, r2, g2, b2, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  var t = index / length;\n  return {\n    r: Linear(r1, r2, t),\n    g: Linear(g1, g2, t),\n    b: Linear(b1, b2, t)\n  };\n};\n/**\r\n * Interpolates between the two given color objects over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithColor\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {Phaser.Display.Color} color2 - The second Color object.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar ColorWithColor = function (color1, color2, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  return RGBWithRGB(color1.r, color1.g, color1.b, color2.r, color2.g, color2.b, length, index);\n};\n/**\r\n * Interpolates between the Color object and color values over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {number} r - Red value.\r\n * @param {number} g - Blue value.\r\n * @param {number} b - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\n\n\nvar ColorWithRGB = function (color, r, g, b, length, index) {\n  if (length === undefined) {\n    length = 100;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  return RGBWithRGB(color.r, color.g, color.b, r, g, b, length, index);\n};\n\nmodule.exports = {\n  RGBWithRGB: RGBWithRGB,\n  ColorWithRGB: ColorWithRGB,\n  ColorWithColor: ColorWithColor\n};","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/Interpolate.js"],"names":["Linear","require","RGBWithRGB","r1","g1","b1","r2","g2","b2","length","index","undefined","t","r","g","b","ColorWithColor","color1","color2","ColorWithRGB","color","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAApB;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIC,UAAU,GAAG,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,MAAlC,EAA0CC,KAA1C,EACjB;AACI,MAAID,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,GAAT;AAAe;;AAC3C,MAAIC,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,MAAIE,CAAC,GAAGF,KAAK,GAAGD,MAAhB;AAEA,SAAO;AACHI,IAAAA,CAAC,EAAEb,MAAM,CAACG,EAAD,EAAKG,EAAL,EAASM,CAAT,CADN;AAEHE,IAAAA,CAAC,EAAEd,MAAM,CAACI,EAAD,EAAKG,EAAL,EAASK,CAAT,CAFN;AAGHG,IAAAA,CAAC,EAAEf,MAAM,CAACK,EAAD,EAAKG,EAAL,EAASI,CAAT;AAHN,GAAP;AAKH,CAZD;AAcA;;;;;;;;;;;;;;;;;AAeA,IAAII,cAAc,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BT,MAA1B,EAAkCC,KAAlC,EACrB;AACI,MAAID,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,GAAT;AAAe;;AAC3C,MAAIC,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,SAAOR,UAAU,CAACe,MAAM,CAACJ,CAAR,EAAWI,MAAM,CAACH,CAAlB,EAAqBG,MAAM,CAACF,CAA5B,EAA+BG,MAAM,CAACL,CAAtC,EAAyCK,MAAM,CAACJ,CAAhD,EAAmDI,MAAM,CAACH,CAA1D,EAA6DN,MAA7D,EAAqEC,KAArE,CAAjB;AACH,CAND;AAQA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIS,YAAY,GAAG,UAAUC,KAAV,EAAiBP,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0BN,MAA1B,EAAkCC,KAAlC,EACnB;AACI,MAAID,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,GAAT;AAAe;;AAC3C,MAAIC,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,SAAOR,UAAU,CAACkB,KAAK,CAACP,CAAP,EAAUO,KAAK,CAACN,CAAhB,EAAmBM,KAAK,CAACL,CAAzB,EAA4BF,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCN,MAArC,EAA6CC,KAA7C,CAAjB;AACH,CAND;;AAQAW,MAAM,CAACC,OAAP,GAAiB;AAEbpB,EAAAA,UAAU,EAAEA,UAFC;AAGbiB,EAAAA,YAAY,EAAEA,YAHD;AAIbH,EAAAA,cAAc,EAAEA;AAJH,CAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Linear = require('../../math/Linear');\r\n\r\n/**\r\n * @namespace Phaser.Display.Color.Interpolate\r\n * @memberof Phaser.Display.Color\r\n * @since 3.0.0\r\n */\r\n\r\n/**\r\n * Interpolates between the two given color ranges over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.RGBWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {number} r1 - Red value.\r\n * @param {number} g1 - Blue value.\r\n * @param {number} b1 - Green value.\r\n * @param {number} r2 - Red value.\r\n * @param {number} g2 - Blue value.\r\n * @param {number} b2 - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar RGBWithRGB = function (r1, g1, b1, r2, g2, b2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    var t = index / length;\r\n\r\n    return {\r\n        r: Linear(r1, r2, t),\r\n        g: Linear(g1, g2, t),\r\n        b: Linear(b1, b2, t)\r\n    };\r\n};\r\n\r\n/**\r\n * Interpolates between the two given color objects over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithColor\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {Phaser.Display.Color} color2 - The second Color object.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithColor = function (color1, color2, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color1.r, color1.g, color1.b, color2.r, color2.g, color2.b, length, index);\r\n};\r\n\r\n/**\r\n * Interpolates between the Color object and color values over the length supplied.\r\n *\r\n * @function Phaser.Display.Color.Interpolate.ColorWithRGB\r\n * @memberof Phaser.Display.Color.Interpolate\r\n * @static\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Display.Color} color1 - The first Color object.\r\n * @param {number} r - Red value.\r\n * @param {number} g - Blue value.\r\n * @param {number} b - Green value.\r\n * @param {number} [length=100] - Distance to interpolate over.\r\n * @param {number} [index=0] - Index to start from.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object containing the interpolated color values.\r\n */\r\nvar ColorWithRGB = function (color, r, g, b, length, index)\r\n{\r\n    if (length === undefined) { length = 100; }\r\n    if (index === undefined) { index = 0; }\r\n\r\n    return RGBWithRGB(color.r, color.g, color.b, r, g, b, length, index);\r\n};\r\n\r\nmodule.exports = {\r\n\r\n    RGBWithRGB: RGBWithRGB,\r\n    ColorWithRGB: ColorWithRGB,\r\n    ColorWithColor: ColorWithColor\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"script"}