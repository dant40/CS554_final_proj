{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar PolygonRender = require('./PolygonRender');\n\nvar Class = require('../../../utils/Class');\n\nvar Earcut = require('../../../geom/polygon/Earcut');\n\nvar GetAABB = require('../../../geom/polygon/GetAABB');\n\nvar GeomPolygon = require('../../../geom/polygon/Polygon');\n\nvar Shape = require('../Shape');\n\nvar Smooth = require('../../../geom/polygon/Smooth');\n/**\r\n * @classdesc\r\n * The Polygon Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * The Polygon Shape is created by providing a list of points, which are then used to create an\r\n * internal Polygon geometry object. The points can be set from a variety of formats:\r\n *\r\n * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point or Vector2 objects: `[new Phaser.Math.Vector2(x1, y1), ...]`\r\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n * \r\n * By default the `x` and `y` coordinates of this Shape refer to the center of it. However, depending\r\n * on the coordinates of the points provided, the final shape may be rendered offset from its origin.\r\n *\r\n * @class Polygon\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {any} [points] - The points that make up the polygon.\r\n * @param {number} [fillColor] - The color the polygon will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the polygon will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Polygon = new Class({\n  Extends: Shape,\n  Mixins: [PolygonRender],\n  initialize: function Polygon(scene, x, y, points, fillColor, fillAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    Shape.call(this, scene, 'Polygon', new GeomPolygon(points));\n    var bounds = GetAABB(this.geom);\n    this.setPosition(x, y);\n    this.setSize(bounds.width, bounds.height);\n\n    if (fillColor !== undefined) {\n      this.setFillStyle(fillColor, fillAlpha);\n    }\n\n    this.updateDisplayOrigin();\n    this.updateData();\n  },\n\n  /**\r\n   * Smooths the polygon over the number of iterations specified.\r\n   * The base polygon data will be updated and replaced with the smoothed values.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Polygon#smooth\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [iterations=1] - The number of times to apply the polygon smoothing.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  smooth: function (iterations) {\n    if (iterations === undefined) {\n      iterations = 1;\n    }\n\n    for (var i = 0; i < iterations; i++) {\n      Smooth(this.geom);\n    }\n\n    return this.updateData();\n  },\n\n  /**\r\n   * Internal method that updates the data and path values.\r\n   *\r\n   * @method Phaser.GameObjects.Polygon#updateData\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  updateData: function () {\n    var path = [];\n    var points = this.geom.points;\n\n    for (var i = 0; i < points.length; i++) {\n      path.push(points[i].x, points[i].y);\n    }\n\n    path.push(points[0].x, points[0].y);\n    this.pathIndexes = Earcut(path);\n    this.pathData = path;\n    return this;\n  }\n});\nmodule.exports = Polygon;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/polygon/Polygon.js"],"names":["PolygonRender","require","Class","Earcut","GetAABB","GeomPolygon","Shape","Smooth","Polygon","Extends","Mixins","initialize","scene","x","y","points","fillColor","fillAlpha","undefined","call","bounds","geom","setPosition","setSize","width","height","setFillStyle","updateDisplayOrigin","updateData","smooth","iterations","i","path","length","push","pathIndexes","pathData","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,8BAAD,CAApB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,+BAAD,CAArB;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,+BAAD,CAAzB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,8BAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA,IAAIO,OAAO,GAAG,IAAIN,KAAJ,CAAU;AAEpBO,EAAAA,OAAO,EAAEH,KAFW;AAIpBI,EAAAA,MAAM,EAAE,CACJV,aADI,CAJY;AAQpBW,EAAAA,UAAU,EAEV,SAASH,OAAT,CAAkBI,KAAlB,EAAyBC,CAAzB,EAA4BC,CAA5B,EAA+BC,MAA/B,EAAuCC,SAAvC,EAAkDC,SAAlD,EACA;AACI,QAAIJ,CAAC,KAAKK,SAAV,EAAqB;AAAEL,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,QAAIC,CAAC,KAAKI,SAAV,EAAqB;AAAEJ,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAE/BR,IAAAA,KAAK,CAACa,IAAN,CAAW,IAAX,EAAiBP,KAAjB,EAAwB,SAAxB,EAAmC,IAAIP,WAAJ,CAAgBU,MAAhB,CAAnC;AAEA,QAAIK,MAAM,GAAGhB,OAAO,CAAC,KAAKiB,IAAN,CAApB;AAEA,SAAKC,WAAL,CAAiBT,CAAjB,EAAoBC,CAApB;AACA,SAAKS,OAAL,CAAaH,MAAM,CAACI,KAApB,EAA2BJ,MAAM,CAACK,MAAlC;;AAEA,QAAIT,SAAS,KAAKE,SAAlB,EACA;AACI,WAAKQ,YAAL,CAAkBV,SAAlB,EAA6BC,SAA7B;AACH;;AAED,SAAKU,mBAAL;AACA,SAAKC,UAAL;AACH,GA7BmB;;AA+BpB;;;;;;;;;;;;AAYAC,EAAAA,MAAM,EAAE,UAAUC,UAAV,EACR;AACI,QAAIA,UAAU,KAAKZ,SAAnB,EAA8B;AAAEY,MAAAA,UAAU,GAAG,CAAb;AAAiB;;AAEjD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAApB,EAAgCC,CAAC,EAAjC,EACA;AACIxB,MAAAA,MAAM,CAAC,KAAKc,IAAN,CAAN;AACH;;AAED,WAAO,KAAKO,UAAL,EAAP;AACH,GArDmB;;AAuDpB;;;;;;;;;AASAA,EAAAA,UAAU,EAAE,YACZ;AACI,QAAII,IAAI,GAAG,EAAX;AACA,QAAIjB,MAAM,GAAG,KAAKM,IAAL,CAAUN,MAAvB;;AAEA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,MAAM,CAACkB,MAA3B,EAAmCF,CAAC,EAApC,EACA;AACIC,MAAAA,IAAI,CAACE,IAAL,CAAUnB,MAAM,CAACgB,CAAD,CAAN,CAAUlB,CAApB,EAAuBE,MAAM,CAACgB,CAAD,CAAN,CAAUjB,CAAjC;AACH;;AAEDkB,IAAAA,IAAI,CAACE,IAAL,CAAUnB,MAAM,CAAC,CAAD,CAAN,CAAUF,CAApB,EAAuBE,MAAM,CAAC,CAAD,CAAN,CAAUD,CAAjC;AAEA,SAAKqB,WAAL,GAAmBhC,MAAM,CAAC6B,IAAD,CAAzB;AACA,SAAKI,QAAL,GAAgBJ,IAAhB;AAEA,WAAO,IAAP;AACH;AAhFmB,CAAV,CAAd;AAoFAK,MAAM,CAACC,OAAP,GAAiB9B,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar PolygonRender = require('./PolygonRender');\r\nvar Class = require('../../../utils/Class');\r\nvar Earcut = require('../../../geom/polygon/Earcut');\r\nvar GetAABB = require('../../../geom/polygon/GetAABB');\r\nvar GeomPolygon = require('../../../geom/polygon/Polygon');\r\nvar Shape = require('../Shape');\r\nvar Smooth = require('../../../geom/polygon/Smooth');\r\n\r\n/**\r\n * @classdesc\r\n * The Polygon Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * The Polygon Shape is created by providing a list of points, which are then used to create an\r\n * internal Polygon geometry object. The points can be set from a variety of formats:\r\n *\r\n * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point or Vector2 objects: `[new Phaser.Math.Vector2(x1, y1), ...]`\r\n * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n * \r\n * By default the `x` and `y` coordinates of this Shape refer to the center of it. However, depending\r\n * on the coordinates of the points provided, the final shape may be rendered offset from its origin.\r\n *\r\n * @class Polygon\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {any} [points] - The points that make up the polygon.\r\n * @param {number} [fillColor] - The color the polygon will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the polygon will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Polygon = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        PolygonRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Polygon (scene, x, y, points, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        Shape.call(this, scene, 'Polygon', new GeomPolygon(points));\r\n\r\n        var bounds = GetAABB(this.geom);\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(bounds.width, bounds.height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Smooths the polygon over the number of iterations specified.\r\n     * The base polygon data will be updated and replaced with the smoothed values.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Polygon#smooth\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [iterations=1] - The number of times to apply the polygon smoothing.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    smooth: function (iterations)\r\n    {\r\n        if (iterations === undefined) { iterations = 1; }\r\n\r\n        for (var i = 0; i < iterations; i++)\r\n        {\r\n            Smooth(this.geom);\r\n        }\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Polygon#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var path = [];\r\n        var points = this.geom.points;\r\n\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            path.push(points[i].x, points[i].y);\r\n        }\r\n\r\n        path.push(points[0].x, points[0].y);\r\n\r\n        this.pathIndexes = Earcut(path);\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Polygon;\r\n"]},"metadata":{},"sourceType":"script"}