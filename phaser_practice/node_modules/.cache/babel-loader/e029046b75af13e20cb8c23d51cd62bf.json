{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Mesh = require('./Mesh');\n\nvar GameObjectFactory = require('../GameObjectFactory');\n/**\r\n * Creates a new Mesh Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Mesh Game Object and WebGL support have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#mesh\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.Mesh} The Game Object that was created.\r\n */\n\n\nif (typeof WEBGL_RENDERER) {\n  GameObjectFactory.register('mesh', function (x, y, vertices, uv, colors, alphas, texture, frame) {\n    return this.displayList.add(new Mesh(this.scene, x, y, vertices, uv, colors, alphas, texture, frame));\n  });\n} //  When registering a factory function 'this' refers to the GameObjectFactory context.\n//\n//  There are several properties available to use:\n//\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\n//  this.displayList - a reference to the Display List the Scene owns\n//  this.updateList - a reference to the Update List the Scene owns","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/mesh/MeshFactory.js"],"names":["Mesh","require","GameObjectFactory","WEBGL_RENDERER","register","x","y","vertices","uv","colors","alphas","texture","frame","displayList","add","scene"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,sBAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAI,OAAOE,cAAX,EACA;AACID,EAAAA,iBAAiB,CAACE,QAAlB,CAA2B,MAA3B,EAAmC,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,QAAhB,EAA0BC,EAA1B,EAA8BC,MAA9B,EAAsCC,MAAtC,EAA8CC,OAA9C,EAAuDC,KAAvD,EACnC;AACI,WAAO,KAAKC,WAAL,CAAiBC,GAAjB,CAAqB,IAAId,IAAJ,CAAS,KAAKe,KAAd,EAAqBV,CAArB,EAAwBC,CAAxB,EAA2BC,QAA3B,EAAqCC,EAArC,EAAyCC,MAAzC,EAAiDC,MAAjD,EAAyDC,OAAzD,EAAkEC,KAAlE,CAArB,CAAP;AACH,GAHD;AAIH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Mesh = require('./Mesh');\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\n\r\n/**\r\n * Creates a new Mesh Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Mesh Game Object and WebGL support have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#mesh\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n *\r\n * @return {Phaser.GameObjects.Mesh} The Game Object that was created.\r\n */\r\nif (typeof WEBGL_RENDERER)\r\n{\r\n    GameObjectFactory.register('mesh', function (x, y, vertices, uv, colors, alphas, texture, frame)\r\n    {\r\n        return this.displayList.add(new Mesh(this.scene, x, y, vertices, uv, colors, alphas, texture, frame));\r\n    });\r\n}\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n"]},"metadata":{},"sourceType":"script"}