{"ast":null,"code":"/**\r\n* The `Matter.Common` module contains utility functions that are common to all modules.\r\n*\r\n* @class Common\r\n*/\nvar Common = {};\nmodule.exports = Common;\n\n(function () {\n  Common._nextId = 0;\n  Common._seed = 0;\n  Common._nowStartTime = +new Date();\n  /**\r\n   * Extends the object in the first argument using the object in the second argument.\r\n   * @method extend\r\n   * @param {} obj\r\n   * @param {boolean} deep\r\n   * @return {} obj extended\r\n   */\n\n  Common.extend = function (obj, deep) {\n    var argsStart, args, deepClone;\n\n    if (typeof deep === 'boolean') {\n      argsStart = 2;\n      deepClone = deep;\n    } else {\n      argsStart = 1;\n      deepClone = true;\n    }\n\n    for (var i = argsStart; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      if (source) {\n        for (var prop in source) {\n          if (deepClone && source[prop] && source[prop].constructor === Object) {\n            if (!obj[prop] || obj[prop].constructor === Object) {\n              obj[prop] = obj[prop] || {};\n              Common.extend(obj[prop], deepClone, source[prop]);\n            } else {\n              obj[prop] = source[prop];\n            }\n          } else {\n            obj[prop] = source[prop];\n          }\n        }\n      }\n    }\n\n    return obj;\n  };\n  /**\r\n   * Creates a new clone of the object, if deep is true references will also be cloned.\r\n   * @method clone\r\n   * @param {} obj\r\n   * @param {bool} deep\r\n   * @return {} obj cloned\r\n   */\n\n\n  Common.clone = function (obj, deep) {\n    return Common.extend({}, deep, obj);\n  };\n  /**\r\n   * Returns the list of keys for the given object.\r\n   * @method keys\r\n   * @param {} obj\r\n   * @return {string[]} keys\r\n   */\n\n\n  Common.keys = function (obj) {\n    if (Object.keys) return Object.keys(obj); // avoid hasOwnProperty for performance\n\n    var keys = [];\n\n    for (var key in obj) keys.push(key);\n\n    return keys;\n  };\n  /**\r\n   * Returns the list of values for the given object.\r\n   * @method values\r\n   * @param {} obj\r\n   * @return {array} Array of the objects property values\r\n   */\n\n\n  Common.values = function (obj) {\n    var values = [];\n\n    if (Object.keys) {\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        values.push(obj[keys[i]]);\n      }\n\n      return values;\n    } // avoid hasOwnProperty for performance\n\n\n    for (var key in obj) values.push(obj[key]);\n\n    return values;\n  };\n  /**\r\n   * Gets a value from `base` relative to the `path` string.\r\n   * @method get\r\n   * @param {} obj The base object\r\n   * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n   * @param {number} [begin] Path slice begin\r\n   * @param {number} [end] Path slice end\r\n   * @return {} The object at the given path\r\n   */\n\n\n  Common.get = function (obj, path, begin, end) {\n    path = path.split('.').slice(begin, end);\n\n    for (var i = 0; i < path.length; i += 1) {\n      obj = obj[path[i]];\n    }\n\n    return obj;\n  };\n  /**\r\n   * Sets a value on `base` relative to the given `path` string.\r\n   * @method set\r\n   * @param {} obj The base object\r\n   * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n   * @param {} val The value to set\r\n   * @param {number} [begin] Path slice begin\r\n   * @param {number} [end] Path slice end\r\n   * @return {} Pass through `val` for chaining\r\n   */\n\n\n  Common.set = function (obj, path, val, begin, end) {\n    var parts = path.split('.').slice(begin, end);\n    Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n    return val;\n  };\n  /**\r\n   * Shuffles the given array in-place.\r\n   * The function uses a seeded random generator.\r\n   * @method shuffle\r\n   * @param {array} array\r\n   * @return {array} array shuffled randomly\r\n   */\n\n\n  Common.shuffle = function (array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Common.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n\n    return array;\n  };\n  /**\r\n   * Randomly chooses a value from a list with equal probability.\r\n   * The function uses a seeded random generator.\r\n   * @method choose\r\n   * @param {array} choices\r\n   * @return {object} A random choice object from the array\r\n   */\n\n\n  Common.choose = function (choices) {\n    return choices[Math.floor(Common.random() * choices.length)];\n  };\n  /**\r\n   * Returns true if the object is a HTMLElement, otherwise false.\r\n   * @method isElement\r\n   * @param {object} obj\r\n   * @return {boolean} True if the object is a HTMLElement, otherwise false\r\n   */\n\n\n  Common.isElement = function (obj) {\n    if (typeof HTMLElement !== 'undefined') {\n      return obj instanceof HTMLElement;\n    }\n\n    return !!(obj && obj.nodeType && obj.nodeName);\n  };\n  /**\r\n   * Returns true if the object is an array.\r\n   * @method isArray\r\n   * @param {object} obj\r\n   * @return {boolean} True if the object is an array, otherwise false\r\n   */\n\n\n  Common.isArray = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n  /**\r\n   * Returns true if the object is a function.\r\n   * @method isFunction\r\n   * @param {object} obj\r\n   * @return {boolean} True if the object is a function, otherwise false\r\n   */\n\n\n  Common.isFunction = function (obj) {\n    return typeof obj === \"function\";\n  };\n  /**\r\n   * Returns true if the object is a plain object.\r\n   * @method isPlainObject\r\n   * @param {object} obj\r\n   * @return {boolean} True if the object is a plain object, otherwise false\r\n   */\n\n\n  Common.isPlainObject = function (obj) {\n    return typeof obj === 'object' && obj.constructor === Object;\n  };\n  /**\r\n   * Returns true if the object is a string.\r\n   * @method isString\r\n   * @param {object} obj\r\n   * @return {boolean} True if the object is a string, otherwise false\r\n   */\n\n\n  Common.isString = function (obj) {\n    return toString.call(obj) === '[object String]';\n  };\n  /**\r\n   * Returns the given value clamped between a minimum and maximum value.\r\n   * @method clamp\r\n   * @param {number} value\r\n   * @param {number} min\r\n   * @param {number} max\r\n   * @return {number} The value clamped between min and max inclusive\r\n   */\n\n\n  Common.clamp = function (value, min, max) {\n    if (value < min) return min;\n    if (value > max) return max;\n    return value;\n  };\n  /**\r\n   * Returns the sign of the given value.\r\n   * @method sign\r\n   * @param {number} value\r\n   * @return {number} -1 if negative, +1 if 0 or positive\r\n   */\n\n\n  Common.sign = function (value) {\n    return value < 0 ? -1 : 1;\n  };\n  /**\r\n   * Returns the current timestamp since the time origin (e.g. from page load).\r\n   * The result will be high-resolution including decimal places if available.\r\n   * @method now\r\n   * @return {number} the current timestamp\r\n   */\n\n\n  Common.now = function () {\n    if (typeof window !== 'undefined' && window.performance) {\n      if (window.performance.now) {\n        return window.performance.now();\n      } else if (window.performance.webkitNow) {\n        return window.performance.webkitNow();\n      }\n    }\n\n    return new Date() - Common._nowStartTime;\n  };\n  /**\r\n   * Returns a random value between a minimum and a maximum value inclusive.\r\n   * The function uses a seeded random generator.\r\n   * @method random\r\n   * @param {number} min\r\n   * @param {number} max\r\n   * @return {number} A random number between min and max inclusive\r\n   */\n\n\n  Common.random = function (min, max) {\n    min = typeof min !== \"undefined\" ? min : 0;\n    max = typeof max !== \"undefined\" ? max : 1;\n    return min + _seededRandom() * (max - min);\n  };\n\n  var _seededRandom = function () {\n    // https://en.wikipedia.org/wiki/Linear_congruential_generator\n    Common._seed = (Common._seed * 9301 + 49297) % 233280;\n    return Common._seed / 233280;\n  };\n  /**\r\n   * Converts a CSS hex colour string into an integer.\r\n   * @method colorToNumber\r\n   * @param {string} colorString\r\n   * @return {number} An integer representing the CSS hex string\r\n   */\n\n\n  Common.colorToNumber = function (colorString) {\n    colorString = colorString.replace('#', '');\n\n    if (colorString.length == 3) {\n      colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n    }\n\n    return parseInt(colorString, 16);\n  };\n  /**\r\n   * The console logging level to use, where each level includes all levels above and excludes the levels below.\r\n   * The default level is 'debug' which shows all console messages.  \r\n   *\r\n   * Possible level values are:\r\n   * - 0 = None\r\n   * - 1 = Debug\r\n   * - 2 = Info\r\n   * - 3 = Warn\r\n   * - 4 = Error\r\n   * @property Common.logLevel\r\n   * @type {Number}\r\n   * @default 1\r\n   */\n\n\n  Common.logLevel = 1;\n  /**\r\n   * Shows a `console.log` message only if the current `Common.logLevel` allows it.\r\n   * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n   * @method log\r\n   * @param ...objs {} The objects to log.\r\n   */\n\n  Common.log = function () {\n    if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n      console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n    }\n  };\n  /**\r\n   * Shows a `console.info` message only if the current `Common.logLevel` allows it.\r\n   * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n   * @method info\r\n   * @param ...objs {} The objects to log.\r\n   */\n\n\n  Common.info = function () {\n    if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n      console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n    }\n  };\n  /**\r\n   * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\r\n   * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n   * @method warn\r\n   * @param ...objs {} The objects to log.\r\n   */\n\n\n  Common.warn = function () {\n    if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n      console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n    }\n  };\n  /**\r\n   * Returns the next unique sequential ID.\r\n   * @method nextId\r\n   * @return {Number} Unique sequential ID\r\n   */\n\n\n  Common.nextId = function () {\n    return Common._nextId++;\n  };\n  /**\r\n   * A cross browser compatible indexOf implementation.\r\n   * @method indexOf\r\n   * @param {array} haystack\r\n   * @param {object} needle\r\n   * @return {number} The position of needle in haystack, otherwise -1.\r\n   */\n\n\n  Common.indexOf = function (haystack, needle) {\n    if (haystack.indexOf) return haystack.indexOf(needle);\n\n    for (var i = 0; i < haystack.length; i++) {\n      if (haystack[i] === needle) return i;\n    }\n\n    return -1;\n  };\n  /**\r\n   * A cross browser compatible array map implementation.\r\n   * @method map\r\n   * @param {array} list\r\n   * @param {function} func\r\n   * @return {array} Values from list transformed by func.\r\n   */\n\n\n  Common.map = function (list, func) {\n    if (list.map) {\n      return list.map(func);\n    }\n\n    var mapped = [];\n\n    for (var i = 0; i < list.length; i += 1) {\n      mapped.push(func(list[i]));\n    }\n\n    return mapped;\n  };\n  /**\r\n   * Takes a directed graph and returns the partially ordered set of vertices in topological order.\r\n   * Circular dependencies are allowed.\r\n   * @method topologicalSort\r\n   * @param {object} graph\r\n   * @return {array} Partially ordered set of vertices in topological order.\r\n   */\n\n\n  Common.topologicalSort = function (graph) {\n    // https://github.com/mgechev/javascript-algorithms\n    // Copyright (c) Minko Gechev (MIT license)\n    // Modifications: tidy formatting and naming\n    var result = [],\n        visited = [],\n        temp = [];\n\n    for (var node in graph) {\n      if (!visited[node] && !temp[node]) {\n        Common._topologicalSort(node, visited, temp, graph, result);\n      }\n    }\n\n    return result;\n  };\n\n  Common._topologicalSort = function (node, visited, temp, graph, result) {\n    var neighbors = graph[node] || [];\n    temp[node] = true;\n\n    for (var i = 0; i < neighbors.length; i += 1) {\n      var neighbor = neighbors[i];\n\n      if (temp[neighbor]) {\n        // skip circular dependencies\n        continue;\n      }\n\n      if (!visited[neighbor]) {\n        Common._topologicalSort(neighbor, visited, temp, graph, result);\n      }\n    }\n\n    temp[node] = false;\n    visited[node] = true;\n    result.push(node);\n  };\n  /**\r\n   * Takes _n_ functions as arguments and returns a new function that calls them in order.\r\n   * The arguments applied when calling the new function will also be applied to every function passed.\r\n   * The value of `this` refers to the last value returned in the chain that was not `undefined`.\r\n   * Therefore if a passed function does not return a value, the previously returned value is maintained.\r\n   * After all passed functions have been called the new function returns the last returned value (if any).\r\n   * If any of the passed functions are a chain, then the chain will be flattened.\r\n   * @method chain\r\n   * @param ...funcs {function} The functions to chain.\r\n   * @return {function} A new function that calls the passed functions in order.\r\n   */\n\n\n  Common.chain = function () {\n    var funcs = [];\n\n    for (var i = 0; i < arguments.length; i += 1) {\n      var func = arguments[i];\n\n      if (func._chained) {\n        // flatten already chained functions\n        funcs.push.apply(funcs, func._chained);\n      } else {\n        funcs.push(func);\n      }\n    }\n\n    var chain = function () {\n      // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n      var lastResult,\n          args = new Array(arguments.length);\n\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        args[i] = arguments[i];\n      }\n\n      for (i = 0; i < funcs.length; i += 1) {\n        var result = funcs[i].apply(lastResult, args);\n\n        if (typeof result !== 'undefined') {\n          lastResult = result;\n        }\n      }\n\n      return lastResult;\n    };\n\n    chain._chained = funcs;\n    return chain;\n  };\n  /**\r\n   * Chains a function to excute before the original function on the given `path` relative to `base`.\r\n   * See also docs for `Common.chain`.\r\n   * @method chainPathBefore\r\n   * @param {} base The base object\r\n   * @param {string} path The path relative to `base`\r\n   * @param {function} func The function to chain before the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Common.chainPathBefore = function (base, path, func) {\n    return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n  };\n  /**\r\n   * Chains a function to excute after the original function on the given `path` relative to `base`.\r\n   * See also docs for `Common.chain`.\r\n   * @method chainPathAfter\r\n   * @param {} base The base object\r\n   * @param {string} path The path relative to `base`\r\n   * @param {function} func The function to chain after the original\r\n   * @return {function} The chained function that replaced the original\r\n   */\n\n\n  Common.chainPathAfter = function (base, path, func) {\n    return Common.set(base, path, Common.chain(Common.get(base, path), func));\n  };\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/core/Common.js"],"names":["Common","module","exports","_nextId","_seed","_nowStartTime","Date","extend","obj","deep","argsStart","args","deepClone","i","arguments","length","source","prop","constructor","Object","clone","keys","key","push","values","get","path","begin","end","split","slice","set","val","parts","shuffle","array","j","Math","floor","random","temp","choose","choices","isElement","HTMLElement","nodeType","nodeName","isArray","prototype","toString","call","isFunction","isPlainObject","isString","clamp","value","min","max","sign","now","window","performance","webkitNow","_seededRandom","colorToNumber","colorString","replace","charAt","parseInt","logLevel","log","console","apply","concat","Array","info","warn","nextId","indexOf","haystack","needle","map","list","func","mapped","topologicalSort","graph","result","visited","node","_topologicalSort","neighbors","neighbor","chain","funcs","_chained","lastResult","l","chainPathBefore","base","chainPathAfter"],"mappings":"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","sourcesContent":["/**\r\n* The `Matter.Common` module contains utility functions that are common to all modules.\r\n*\r\n* @class Common\r\n*/\r\n\r\nvar Common = {};\r\n\r\nmodule.exports = Common;\r\n\r\n(function() {\r\n\r\n    Common._nextId = 0;\r\n    Common._seed = 0;\r\n    Common._nowStartTime = +(new Date());\r\n\r\n    /**\r\n     * Extends the object in the first argument using the object in the second argument.\r\n     * @method extend\r\n     * @param {} obj\r\n     * @param {boolean} deep\r\n     * @return {} obj extended\r\n     */\r\n    Common.extend = function(obj, deep) {\r\n        var argsStart,\r\n            args,\r\n            deepClone;\r\n\r\n        if (typeof deep === 'boolean') {\r\n            argsStart = 2;\r\n            deepClone = deep;\r\n        } else {\r\n            argsStart = 1;\r\n            deepClone = true;\r\n        }\r\n\r\n        for (var i = argsStart; i < arguments.length; i++) {\r\n            var source = arguments[i];\r\n\r\n            if (source) {\r\n                for (var prop in source) {\r\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\r\n                        if (!obj[prop] || obj[prop].constructor === Object) {\r\n                            obj[prop] = obj[prop] || {};\r\n                            Common.extend(obj[prop], deepClone, source[prop]);\r\n                        } else {\r\n                            obj[prop] = source[prop];\r\n                        }\r\n                    } else {\r\n                        obj[prop] = source[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        \r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Creates a new clone of the object, if deep is true references will also be cloned.\r\n     * @method clone\r\n     * @param {} obj\r\n     * @param {bool} deep\r\n     * @return {} obj cloned\r\n     */\r\n    Common.clone = function(obj, deep) {\r\n        return Common.extend({}, deep, obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the list of keys for the given object.\r\n     * @method keys\r\n     * @param {} obj\r\n     * @return {string[]} keys\r\n     */\r\n    Common.keys = function(obj) {\r\n        if (Object.keys)\r\n            return Object.keys(obj);\r\n\r\n        // avoid hasOwnProperty for performance\r\n        var keys = [];\r\n        for (var key in obj)\r\n            keys.push(key);\r\n        return keys;\r\n    };\r\n\r\n    /**\r\n     * Returns the list of values for the given object.\r\n     * @method values\r\n     * @param {} obj\r\n     * @return {array} Array of the objects property values\r\n     */\r\n    Common.values = function(obj) {\r\n        var values = [];\r\n        \r\n        if (Object.keys) {\r\n            var keys = Object.keys(obj);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                values.push(obj[keys[i]]);\r\n            }\r\n            return values;\r\n        }\r\n        \r\n        // avoid hasOwnProperty for performance\r\n        for (var key in obj)\r\n            values.push(obj[key]);\r\n        return values;\r\n    };\r\n\r\n    /**\r\n     * Gets a value from `base` relative to the `path` string.\r\n     * @method get\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} The object at the given path\r\n     */\r\n    Common.get = function(obj, path, begin, end) {\r\n        path = path.split('.').slice(begin, end);\r\n\r\n        for (var i = 0; i < path.length; i += 1) {\r\n            obj = obj[path[i]];\r\n        }\r\n\r\n        return obj;\r\n    };\r\n\r\n    /**\r\n     * Sets a value on `base` relative to the given `path` string.\r\n     * @method set\r\n     * @param {} obj The base object\r\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\r\n     * @param {} val The value to set\r\n     * @param {number} [begin] Path slice begin\r\n     * @param {number} [end] Path slice end\r\n     * @return {} Pass through `val` for chaining\r\n     */\r\n    Common.set = function(obj, path, val, begin, end) {\r\n        var parts = path.split('.').slice(begin, end);\r\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\r\n        return val;\r\n    };\r\n\r\n    /**\r\n     * Shuffles the given array in-place.\r\n     * The function uses a seeded random generator.\r\n     * @method shuffle\r\n     * @param {array} array\r\n     * @return {array} array shuffled randomly\r\n     */\r\n    Common.shuffle = function(array) {\r\n        for (var i = array.length - 1; i > 0; i--) {\r\n            var j = Math.floor(Common.random() * (i + 1));\r\n            var temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    };\r\n\r\n    /**\r\n     * Randomly chooses a value from a list with equal probability.\r\n     * The function uses a seeded random generator.\r\n     * @method choose\r\n     * @param {array} choices\r\n     * @return {object} A random choice object from the array\r\n     */\r\n    Common.choose = function(choices) {\r\n        return choices[Math.floor(Common.random() * choices.length)];\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a HTMLElement, otherwise false.\r\n     * @method isElement\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\r\n     */\r\n    Common.isElement = function(obj) {\r\n        if (typeof HTMLElement !== 'undefined') {\r\n            return obj instanceof HTMLElement;\r\n        }\r\n\r\n        return !!(obj && obj.nodeType && obj.nodeName);\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is an array.\r\n     * @method isArray\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is an array, otherwise false\r\n     */\r\n    Common.isArray = function(obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a function.\r\n     * @method isFunction\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a function, otherwise false\r\n     */\r\n    Common.isFunction = function(obj) {\r\n        return typeof obj === \"function\";\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a plain object.\r\n     * @method isPlainObject\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a plain object, otherwise false\r\n     */\r\n    Common.isPlainObject = function(obj) {\r\n        return typeof obj === 'object' && obj.constructor === Object;\r\n    };\r\n\r\n    /**\r\n     * Returns true if the object is a string.\r\n     * @method isString\r\n     * @param {object} obj\r\n     * @return {boolean} True if the object is a string, otherwise false\r\n     */\r\n    Common.isString = function(obj) {\r\n        return toString.call(obj) === '[object String]';\r\n    };\r\n    \r\n    /**\r\n     * Returns the given value clamped between a minimum and maximum value.\r\n     * @method clamp\r\n     * @param {number} value\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} The value clamped between min and max inclusive\r\n     */\r\n    Common.clamp = function(value, min, max) {\r\n        if (value < min)\r\n            return min;\r\n        if (value > max)\r\n            return max;\r\n        return value;\r\n    };\r\n    \r\n    /**\r\n     * Returns the sign of the given value.\r\n     * @method sign\r\n     * @param {number} value\r\n     * @return {number} -1 if negative, +1 if 0 or positive\r\n     */\r\n    Common.sign = function(value) {\r\n        return value < 0 ? -1 : 1;\r\n    };\r\n    \r\n    /**\r\n     * Returns the current timestamp since the time origin (e.g. from page load).\r\n     * The result will be high-resolution including decimal places if available.\r\n     * @method now\r\n     * @return {number} the current timestamp\r\n     */\r\n    Common.now = function() {\r\n        if (typeof window !== 'undefined' && window.performance) {\r\n            if (window.performance.now) {\r\n                return window.performance.now();\r\n            } else if (window.performance.webkitNow) {\r\n                return window.performance.webkitNow();\r\n            }\r\n        }\r\n\r\n        return (new Date()) - Common._nowStartTime;\r\n    };\r\n    \r\n    /**\r\n     * Returns a random value between a minimum and a maximum value inclusive.\r\n     * The function uses a seeded random generator.\r\n     * @method random\r\n     * @param {number} min\r\n     * @param {number} max\r\n     * @return {number} A random number between min and max inclusive\r\n     */\r\n    Common.random = function(min, max) {\r\n        min = (typeof min !== \"undefined\") ? min : 0;\r\n        max = (typeof max !== \"undefined\") ? max : 1;\r\n        return min + _seededRandom() * (max - min);\r\n    };\r\n\r\n    var _seededRandom = function() {\r\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\r\n        return Common._seed / 233280;\r\n    };\r\n\r\n    /**\r\n     * Converts a CSS hex colour string into an integer.\r\n     * @method colorToNumber\r\n     * @param {string} colorString\r\n     * @return {number} An integer representing the CSS hex string\r\n     */\r\n    Common.colorToNumber = function(colorString) {\r\n        colorString = colorString.replace('#','');\r\n\r\n        if (colorString.length == 3) {\r\n            colorString = colorString.charAt(0) + colorString.charAt(0)\r\n                        + colorString.charAt(1) + colorString.charAt(1)\r\n                        + colorString.charAt(2) + colorString.charAt(2);\r\n        }\r\n\r\n        return parseInt(colorString, 16);\r\n    };\r\n\r\n    /**\r\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\r\n     * The default level is 'debug' which shows all console messages.  \r\n     *\r\n     * Possible level values are:\r\n     * - 0 = None\r\n     * - 1 = Debug\r\n     * - 2 = Info\r\n     * - 3 = Warn\r\n     * - 4 = Error\r\n     * @property Common.logLevel\r\n     * @type {Number}\r\n     * @default 1\r\n     */\r\n    Common.logLevel = 1;\r\n\r\n    /**\r\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method log\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.log = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method info\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.info = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\r\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\r\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\r\n     * @method warn\r\n     * @param ...objs {} The objects to log.\r\n     */\r\n    Common.warn = function() {\r\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\r\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns the next unique sequential ID.\r\n     * @method nextId\r\n     * @return {Number} Unique sequential ID\r\n     */\r\n    Common.nextId = function() {\r\n        return Common._nextId++;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible indexOf implementation.\r\n     * @method indexOf\r\n     * @param {array} haystack\r\n     * @param {object} needle\r\n     * @return {number} The position of needle in haystack, otherwise -1.\r\n     */\r\n    Common.indexOf = function(haystack, needle) {\r\n        if (haystack.indexOf)\r\n            return haystack.indexOf(needle);\r\n\r\n        for (var i = 0; i < haystack.length; i++) {\r\n            if (haystack[i] === needle)\r\n                return i;\r\n        }\r\n\r\n        return -1;\r\n    };\r\n\r\n    /**\r\n     * A cross browser compatible array map implementation.\r\n     * @method map\r\n     * @param {array} list\r\n     * @param {function} func\r\n     * @return {array} Values from list transformed by func.\r\n     */\r\n    Common.map = function(list, func) {\r\n        if (list.map) {\r\n            return list.map(func);\r\n        }\r\n\r\n        var mapped = [];\r\n\r\n        for (var i = 0; i < list.length; i += 1) {\r\n            mapped.push(func(list[i]));\r\n        }\r\n\r\n        return mapped;\r\n    };\r\n\r\n    /**\r\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\r\n     * Circular dependencies are allowed.\r\n     * @method topologicalSort\r\n     * @param {object} graph\r\n     * @return {array} Partially ordered set of vertices in topological order.\r\n     */\r\n    Common.topologicalSort = function(graph) {\r\n        // https://github.com/mgechev/javascript-algorithms\r\n        // Copyright (c) Minko Gechev (MIT license)\r\n        // Modifications: tidy formatting and naming\r\n        var result = [],\r\n            visited = [],\r\n            temp = [];\r\n\r\n        for (var node in graph) {\r\n            if (!visited[node] && !temp[node]) {\r\n                Common._topologicalSort(node, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\r\n        var neighbors = graph[node] || [];\r\n        temp[node] = true;\r\n\r\n        for (var i = 0; i < neighbors.length; i += 1) {\r\n            var neighbor = neighbors[i];\r\n\r\n            if (temp[neighbor]) {\r\n                // skip circular dependencies\r\n                continue;\r\n            }\r\n\r\n            if (!visited[neighbor]) {\r\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\r\n            }\r\n        }\r\n\r\n        temp[node] = false;\r\n        visited[node] = true;\r\n\r\n        result.push(node);\r\n    };\r\n\r\n    /**\r\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\r\n     * The arguments applied when calling the new function will also be applied to every function passed.\r\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\r\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\r\n     * After all passed functions have been called the new function returns the last returned value (if any).\r\n     * If any of the passed functions are a chain, then the chain will be flattened.\r\n     * @method chain\r\n     * @param ...funcs {function} The functions to chain.\r\n     * @return {function} A new function that calls the passed functions in order.\r\n     */\r\n    Common.chain = function() {\r\n        var funcs = [];\r\n\r\n        for (var i = 0; i < arguments.length; i += 1) {\r\n            var func = arguments[i];\r\n\r\n            if (func._chained) {\r\n                // flatten already chained functions\r\n                funcs.push.apply(funcs, func._chained);\r\n            } else {\r\n                funcs.push(func);\r\n            }\r\n        }\r\n\r\n        var chain = function() {\r\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\r\n            var lastResult,\r\n                args = new Array(arguments.length);\r\n\r\n            for (var i = 0, l = arguments.length; i < l; i++) {\r\n                args[i] = arguments[i];\r\n            }\r\n\r\n            for (i = 0; i < funcs.length; i += 1) {\r\n                var result = funcs[i].apply(lastResult, args);\r\n\r\n                if (typeof result !== 'undefined') {\r\n                    lastResult = result;\r\n                }\r\n            }\r\n\r\n            return lastResult;\r\n        };\r\n\r\n        chain._chained = funcs;\r\n\r\n        return chain;\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathBefore\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathBefore = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            func,\r\n            Common.get(base, path)\r\n        ));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\r\n     * See also docs for `Common.chain`.\r\n     * @method chainPathAfter\r\n     * @param {} base The base object\r\n     * @param {string} path The path relative to `base`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Common.chainPathAfter = function(base, path, func) {\r\n        return Common.set(base, path, Common.chain(\r\n            Common.get(base, path),\r\n            func\r\n        ));\r\n    };\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}