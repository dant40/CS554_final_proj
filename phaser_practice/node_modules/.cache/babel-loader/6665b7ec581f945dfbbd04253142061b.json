{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * The Impact Velocity component.\r\n * Should be applied as a mixin.\r\n *\r\n * @namespace Phaser.Physics.Impact.Components.Velocity\r\n * @since 3.0.0\r\n */\nvar Velocity = {\n  /**\r\n   * Sets the horizontal velocity of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Impact.Components.Velocity#setVelocityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity value.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setVelocityX: function (x) {\n    this.vel.x = x;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical velocity of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Impact.Components.Velocity#setVelocityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} y - The vertical velocity value.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setVelocityY: function (y) {\n    this.vel.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal and vertical velocities of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Impact.Components.Velocity#setVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity value.\r\n   * @param {number} [y=x] - The vertical velocity value. If not given, defaults to the horizontal value.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setVelocity: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.vel.x = x;\n    this.vel.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the maximum velocity this body can travel at.\r\n   *\r\n   * @method Phaser.Physics.Impact.Components.Velocity#setMaxVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The maximum allowed horizontal velocity.\r\n   * @param {number} [y=x] - The maximum allowed vertical velocity. If not given, defaults to the horizontal value.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setMaxVelocity: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.maxVel.x = x;\n    this.maxVel.y = y;\n    return this;\n  }\n};\nmodule.exports = Velocity;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/components/Velocity.js"],"names":["Velocity","setVelocityX","x","vel","setVelocityY","y","setVelocity","undefined","setMaxVelocity","maxVel","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;AAOA,IAAIA,QAAQ,GAAG;AAEX;;;;;;;;;;AAUAC,EAAAA,YAAY,EAAE,UAAUC,CAAV,EACd;AACI,SAAKC,GAAL,CAASD,CAAT,GAAaA,CAAb;AAEA,WAAO,IAAP;AACH,GAjBU;;AAmBX;;;;;;;;;;AAUAE,EAAAA,YAAY,EAAE,UAAUC,CAAV,EACd;AACI,SAAKF,GAAL,CAASE,CAAT,GAAaA,CAAb;AAEA,WAAO,IAAP;AACH,GAlCU;;AAoCX;;;;;;;;;;;AAWAC,EAAAA,WAAW,EAAE,UAAUJ,CAAV,EAAaG,CAAb,EACb;AACI,QAAIA,CAAC,KAAKE,SAAV,EAAqB;AAAEF,MAAAA,CAAC,GAAGH,CAAJ;AAAQ;;AAE/B,SAAKC,GAAL,CAASD,CAAT,GAAaA,CAAb;AACA,SAAKC,GAAL,CAASE,CAAT,GAAaA,CAAb;AAEA,WAAO,IAAP;AACH,GAvDU;;AAyDX;;;;;;;;;;;AAWAG,EAAAA,cAAc,EAAE,UAAUN,CAAV,EAAaG,CAAb,EAChB;AACI,QAAIA,CAAC,KAAKE,SAAV,EAAqB;AAAEF,MAAAA,CAAC,GAAGH,CAAJ;AAAQ;;AAE/B,SAAKO,MAAL,CAAYP,CAAZ,GAAgBA,CAAhB;AACA,SAAKO,MAAL,CAAYJ,CAAZ,GAAgBA,CAAhB;AAEA,WAAO,IAAP;AACH;AA5EU,CAAf;AAgFAK,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * The Impact Velocity component.\r\n * Should be applied as a mixin.\r\n *\r\n * @namespace Phaser.Physics.Impact.Components.Velocity\r\n * @since 3.0.0\r\n */\r\nvar Velocity = {\r\n\r\n    /**\r\n     * Sets the horizontal velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocityX: function (x)\r\n    {\r\n        this.vel.x = x;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} y - The vertical velocity value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocityY: function (y)\r\n    {\r\n        this.vel.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical velocities of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     * @param {number} [y=x] - The vertical velocity value. If not given, defaults to the horizontal value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setVelocity: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.vel.x = x;\r\n        this.vel.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the maximum velocity this body can travel at.\r\n     *\r\n     * @method Phaser.Physics.Impact.Components.Velocity#setMaxVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The maximum allowed horizontal velocity.\r\n     * @param {number} [y=x] - The maximum allowed vertical velocity. If not given, defaults to the horizontal value.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setMaxVelocity: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.maxVel.x = x;\r\n        this.maxVel.y = y;\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Velocity;\r\n"]},"metadata":{},"sourceType":"script"}