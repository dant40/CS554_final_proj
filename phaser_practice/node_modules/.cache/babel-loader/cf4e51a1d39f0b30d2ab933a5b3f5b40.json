{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArcadeSprite = require('./ArcadeSprite');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Group = require('../../gameobjects/group/Group');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * An Arcade Physics Static Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given static Arcade Physics bodies.\r\n *\r\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Group}.\r\n *\r\n * @class StaticGroup\r\n * @extends Phaser.GameObjects.Group\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n */\n\n\nvar StaticPhysicsGroup = new Class({\n  Extends: Group,\n  initialize: function StaticPhysicsGroup(world, scene, children, config) {\n    if (!children && !config) {\n      config = {\n        internalCreateCallback: this.createCallbackHandler,\n        internalRemoveCallback: this.removeCallbackHandler,\n        createMultipleCallback: this.createMultipleCallbackHandler,\n        classType: ArcadeSprite\n      };\n    } else if (IsPlainObject(children)) {\n      //  children is a plain object, so swizzle them:\n      config = children;\n      children = null;\n      config.internalCreateCallback = this.createCallbackHandler;\n      config.internalRemoveCallback = this.removeCallbackHandler;\n      config.createMultipleCallback = this.createMultipleCallbackHandler;\n      config.classType = GetFastValue(config, 'classType', ArcadeSprite);\n    } else if (Array.isArray(children) && IsPlainObject(children[0])) {\n      //  children is an array of plain objects\n      config = children;\n      children = null;\n      config.forEach(function (singleConfig) {\n        singleConfig.internalCreateCallback = this.createCallbackHandler;\n        singleConfig.internalRemoveCallback = this.removeCallbackHandler;\n        singleConfig.createMultipleCallback = this.createMultipleCallbackHandler;\n        singleConfig.classType = GetFastValue(singleConfig, 'classType', ArcadeSprite);\n      });\n    }\n    /**\r\n     * The physics simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticGroup#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.world = world;\n    /**\r\n     * The scene this group belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticGroup#physicsType\r\n     * @type {integer}\r\n     * @default Phaser.Physics.Arcade.STATIC_BODY\r\n     * @since 3.0.0\r\n     */\n\n    this.physicsType = CONST.STATIC_BODY;\n    Group.call(this, scene, children, config);\n    /**\r\n     * A textual representation of this Game Object.\r\n     * Used internally by Phaser but is available for your own custom classes to populate.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticGroup#type\r\n     * @type {string}\r\n     * @default 'StaticPhysicsGroup'\r\n     * @since 3.21.0\r\n     */\n\n    this.type = 'StaticPhysicsGroup';\n  },\n\n  /**\r\n   * Adds a static physics body to the new group member (if it lacks one) and adds it to the simulation.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticGroup#createCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The new group member.\r\n   *\r\n   * @see Phaser.Physics.Arcade.World#enableBody\r\n   */\n  createCallbackHandler: function (child) {\n    if (!child.body) {\n      this.world.enableBody(child, CONST.STATIC_BODY);\n    }\n  },\n\n  /**\r\n   * Disables the group member's physics body, removing it from the simulation.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticGroup#removeCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The group member being removed.\r\n   *\r\n   * @see Phaser.Physics.Arcade.World#disableBody\r\n   */\n  removeCallbackHandler: function (child) {\n    if (child.body) {\n      this.world.disableBody(child);\n    }\n  },\n\n  /**\r\n   * Refreshes the group.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticGroup#createMultipleCallbackHandler\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject[]} entries - The newly created group members.\r\n   *\r\n   * @see Phaser.Physics.Arcade.StaticGroup#refresh\r\n   */\n  createMultipleCallbackHandler: function () {\n    this.refresh();\n  },\n\n  /**\r\n   * Resets each Body to the position of its parent Game Object.\r\n   * Body sizes aren't changed (use {@link Phaser.Physics.Arcade.Components.Enable#refreshBody} for that).\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticGroup#refresh\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticGroup} This group.\r\n   *\r\n   * @see Phaser.Physics.Arcade.StaticBody#reset\r\n   */\n  refresh: function () {\n    var children = this.children.entries;\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].body.reset();\n    }\n\n    return this;\n  }\n});\nmodule.exports = StaticPhysicsGroup;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/StaticPhysicsGroup.js"],"names":["ArcadeSprite","require","Class","CONST","GetFastValue","Group","IsPlainObject","StaticPhysicsGroup","Extends","initialize","world","scene","children","config","internalCreateCallback","createCallbackHandler","internalRemoveCallback","removeCallbackHandler","createMultipleCallback","createMultipleCallbackHandler","classType","Array","isArray","forEach","singleConfig","physicsType","STATIC_BODY","call","type","child","body","enableBody","disableBody","refresh","entries","i","length","reset","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArcadeSprite = require('./ArcadeSprite');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Group = require('../../gameobjects/group/Group');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * An Arcade Physics Static Group object.\r\n *\r\n * All Game Objects created by this Group will automatically be given static Arcade Physics bodies.\r\n *\r\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Group}.\r\n *\r\n * @class StaticGroup\r\n * @extends Phaser.GameObjects.Group\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The physics simulation.\r\n * @param {Phaser.Scene} scene - The scene this group belongs to.\r\n * @param {(Phaser.GameObjects.GameObject[]|Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig)} [children] - Game Objects to add to this group; or the `config` argument.\r\n * @param {Phaser.Types.GameObjects.Group.GroupConfig|Phaser.Types.GameObjects.Group.GroupCreateConfig} [config] - Settings for this group.\r\n */\r\nvar StaticPhysicsGroup = new Class({\r\n\r\n    Extends: Group,\r\n\r\n    initialize:\r\n\r\n    function StaticPhysicsGroup (world, scene, children, config)\r\n    {\r\n        if (!children && !config)\r\n        {\r\n            config = {\r\n                internalCreateCallback: this.createCallbackHandler,\r\n                internalRemoveCallback: this.removeCallbackHandler,\r\n                createMultipleCallback: this.createMultipleCallbackHandler,\r\n                classType: ArcadeSprite\r\n            };\r\n        }\r\n        else if (IsPlainObject(children))\r\n        {\r\n            //  children is a plain object, so swizzle them:\r\n            config = children;\r\n            children = null;\r\n\r\n            config.internalCreateCallback = this.createCallbackHandler;\r\n            config.internalRemoveCallback = this.removeCallbackHandler;\r\n            config.createMultipleCallback = this.createMultipleCallbackHandler;\r\n            config.classType = GetFastValue(config, 'classType', ArcadeSprite);\r\n        }\r\n        else if (Array.isArray(children) && IsPlainObject(children[0]))\r\n        {\r\n            //  children is an array of plain objects\r\n            config = children;\r\n            children = null;\r\n\r\n            config.forEach(function (singleConfig)\r\n            {\r\n                singleConfig.internalCreateCallback = this.createCallbackHandler;\r\n                singleConfig.internalRemoveCallback = this.removeCallbackHandler;\r\n                singleConfig.createMultipleCallback = this.createMultipleCallbackHandler;\r\n                singleConfig.classType = GetFastValue(singleConfig, 'classType', ArcadeSprite);\r\n            });\r\n        }\r\n\r\n        /**\r\n         * The physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticGroup#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * The scene this group belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticGroup#physicsType\r\n         * @type {integer}\r\n         * @default Phaser.Physics.Arcade.STATIC_BODY\r\n         * @since 3.0.0\r\n         */\r\n        this.physicsType = CONST.STATIC_BODY;\r\n\r\n        Group.call(this, scene, children, config);\r\n\r\n        /**\r\n         * A textual representation of this Game Object.\r\n         * Used internally by Phaser but is available for your own custom classes to populate.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticGroup#type\r\n         * @type {string}\r\n         * @default 'StaticPhysicsGroup'\r\n         * @since 3.21.0\r\n         */\r\n        this.type = 'StaticPhysicsGroup';\r\n    },\r\n\r\n    /**\r\n     * Adds a static physics body to the new group member (if it lacks one) and adds it to the simulation.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticGroup#createCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The new group member.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#enableBody\r\n     */\r\n    createCallbackHandler: function (child)\r\n    {\r\n        if (!child.body)\r\n        {\r\n            this.world.enableBody(child, CONST.STATIC_BODY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Disables the group member's physics body, removing it from the simulation.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticGroup#removeCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The group member being removed.\r\n     *\r\n     * @see Phaser.Physics.Arcade.World#disableBody\r\n     */\r\n    removeCallbackHandler: function (child)\r\n    {\r\n        if (child.body)\r\n        {\r\n            this.world.disableBody(child);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Refreshes the group.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticGroup#createMultipleCallbackHandler\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject[]} entries - The newly created group members.\r\n     *\r\n     * @see Phaser.Physics.Arcade.StaticGroup#refresh\r\n     */\r\n    createMultipleCallbackHandler: function ()\r\n    {\r\n        this.refresh();\r\n    },\r\n\r\n    /**\r\n     * Resets each Body to the position of its parent Game Object.\r\n     * Body sizes aren't changed (use {@link Phaser.Physics.Arcade.Components.Enable#refreshBody} for that).\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticGroup#refresh\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticGroup} This group.\r\n     *\r\n     * @see Phaser.Physics.Arcade.StaticBody#reset\r\n     */\r\n    refresh: function ()\r\n    {\r\n        var children = this.children.entries;\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].body.reset();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticPhysicsGroup;\r\n"]},"metadata":{},"sourceType":"script"}