{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\n/**\r\n * Checks if two Circles intersect.\r\n *\r\n * @function Phaser.Geom.Intersects.CircleToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circleA - The first Circle to check for intersection.\r\n * @param {Phaser.Geom.Circle} circleB - The second Circle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the two Circles intersect, otherwise `false`.\r\n */\n\n\nvar CircleToCircle = function (circleA, circleB) {\n  return DistanceBetween(circleA.x, circleA.y, circleB.x, circleB.y) <= circleA.radius + circleB.radius;\n};\n\nmodule.exports = CircleToCircle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/CircleToCircle.js"],"names":["DistanceBetween","require","CircleToCircle","circleA","circleB","x","y","radius","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,qCAAD,CAA7B;AAEA;;;;;;;;;;;;;AAWA,IAAIC,cAAc,GAAG,UAAUC,OAAV,EAAmBC,OAAnB,EACrB;AACI,SAAQJ,eAAe,CAACG,OAAO,CAACE,CAAT,EAAYF,OAAO,CAACG,CAApB,EAAuBF,OAAO,CAACC,CAA/B,EAAkCD,OAAO,CAACE,CAA1C,CAAf,IAAgEH,OAAO,CAACI,MAAR,GAAiBH,OAAO,CAACG,MAAjG;AACH,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiBP,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\n\r\n/**\r\n * Checks if two Circles intersect.\r\n *\r\n * @function Phaser.Geom.Intersects.CircleToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circleA - The first Circle to check for intersection.\r\n * @param {Phaser.Geom.Circle} circleB - The second Circle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the two Circles intersect, otherwise `false`.\r\n */\r\nvar CircleToCircle = function (circleA, circleB)\r\n{\r\n    return (DistanceBetween(circleA.x, circleA.y, circleB.x, circleB.y) <= (circleA.radius + circleB.radius));\r\n};\r\n\r\nmodule.exports = CircleToCircle;\r\n"]},"metadata":{},"sourceType":"script"}