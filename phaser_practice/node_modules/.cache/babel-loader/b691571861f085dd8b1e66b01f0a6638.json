{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Circumference = require('./Circumference');\n\nvar CircumferencePoint = require('./CircumferencePoint');\n\nvar FromPercent = require('../../math/FromPercent');\n\nvar MATH_CONST = require('../../math/const');\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the circle.\r\n */\n\n\nvar GetPoints = function (circle, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  } //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n\n  if (!quantity) {\n    quantity = Circumference(circle) / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\n    out.push(CircumferencePoint(circle, angle));\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/circle/GetPoints.js"],"names":["Circumference","require","CircumferencePoint","FromPercent","MATH_CONST","GetPoints","circle","quantity","stepRate","out","undefined","i","angle","PI2","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,kBAAD,CAAxB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAII,SAAS,GAAG,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCC,GAAtC,EAChB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW,GADxC,CAGI;;;AACA,MAAI,CAACF,QAAL,EACA;AACIA,IAAAA,QAAQ,GAAGP,aAAa,CAACM,MAAD,CAAb,GAAwBE,QAAnC;AACH;;AAED,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAApB,EAA8BI,CAAC,EAA/B,EACA;AACI,QAAIC,KAAK,GAAGT,WAAW,CAACQ,CAAC,GAAGJ,QAAL,EAAe,CAAf,EAAkBH,UAAU,CAACS,GAA7B,CAAvB;AAEAJ,IAAAA,GAAG,CAACK,IAAJ,CAASZ,kBAAkB,CAACI,MAAD,EAASM,KAAT,CAA3B;AACH;;AAED,SAAOH,GAAP;AACH,CAlBD;;AAoBAM,MAAM,CAACC,OAAP,GAAiBX,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Circumference = require('./Circumference');\r\nvar CircumferencePoint = require('./CircumferencePoint');\r\nvar FromPercent = require('../../math/FromPercent');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n * based on the given quantity or stepRate values.\r\n *\r\n * @function Phaser.Geom.Circle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Circle} circle - The Circle to get the points from.\r\n * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n * @param {array} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array of Point objects pertaining to the points around the circumference of the circle.\r\n */\r\nvar GetPoints = function (circle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Circumference(circle) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var angle = FromPercent(i / quantity, 0, MATH_CONST.PI2);\r\n\r\n        out.push(CircumferencePoint(circle, angle));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n"]},"metadata":{},"sourceType":"script"}