{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar EaseMap = require('../../../math/easing/EaseMap');\n\nvar Events = require('../events');\n\nvar Vector2 = require('../../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera Pan effect.\r\n *\r\n * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n * over the duration and with the ease specified.\r\n *\r\n * Only the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Pan\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Pan = new Class({\n  initialize: function Pan(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.11.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.11.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The starting scroll coordinates to pan the camera from.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#source\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.source = new Vector2();\n    /**\r\n     * The constantly updated value based on zoom.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#current\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.current = new Vector2();\n    /**\r\n     * The destination scroll coordinates to pan the camera to.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#destination\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.11.0\r\n     */\n\n    this.destination = new Vector2();\n    /**\r\n     * The ease function to use during the pan.\r\n     * \r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#ease\r\n     * @type {function}\r\n     * @since 3.11.0\r\n     */\n\n    this.ease;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#progress\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdate\r\n     * @type {?Phaser.Types.Cameras.Scene2D.CameraPanCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n   * over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n   * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function (x, y, duration, ease, force, callback, context) {\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    if (ease === undefined) {\n      ease = EaseMap.Linear;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    var cam = this.camera;\n\n    if (!force && this.isRunning) {\n      return cam;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0; //  Starting from\n\n    this.source.set(cam.scrollX, cam.scrollY); //  Destination\n\n    this.destination.set(x, y); //  Zoom factored version\n\n    cam.getScroll(x, y, this.current); //  Using this ease\n\n    if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease)) {\n      this.ease = EaseMap[ease];\n    } else if (typeof ease === 'function') {\n      this.ease = ease;\n    }\n\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.PAN_START, this.camera, this, duration, x, y);\n    return cam;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#update\r\n   * @since 3.11.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    var progress = Clamp(this._elapsed / this.duration, 0, 1);\n    this.progress = progress;\n    var cam = this.camera;\n\n    if (this._elapsed < this.duration) {\n      var v = this.ease(progress);\n      cam.getScroll(this.destination.x, this.destination.y, this.current);\n      var x = this.source.x + (this.current.x - this.source.x) * v;\n      var y = this.source.y + (this.current.y - this.source.y) * v;\n      cam.setScroll(x, y);\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, cam, progress, x, y);\n      }\n    } else {\n      cam.centerOn(this.destination.x, this.destination.y);\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, cam, progress, cam.scrollX, cam.scrollY);\n      }\n\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   */\n  effectComplete: function () {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.PAN_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#reset\r\n   * @since 3.11.0\r\n   */\n  reset: function () {\n    this.isRunning = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Pan#destroy\r\n   * @since 3.11.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.camera = null;\n    this.source = null;\n    this.destination = null;\n  }\n});\nmodule.exports = Pan;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/effects/Pan.js"],"names":["Clamp","require","Class","EaseMap","Events","Vector2","Pan","initialize","camera","isRunning","duration","source","current","destination","ease","progress","_elapsed","_onUpdate","_onUpdateScope","start","x","y","force","callback","context","undefined","Linear","scene","cam","set","scrollX","scrollY","getScroll","hasOwnProperty","emit","PAN_START","update","time","delta","v","setScroll","call","centerOn","effectComplete","PAN_COMPLETE","reset","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar EaseMap = require('../../../math/easing/EaseMap');\r\nvar Events = require('../events');\r\nvar Vector2 = require('../../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Pan effect.\r\n *\r\n * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n * over the duration and with the ease specified.\r\n *\r\n * Only the camera scroll is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Pan\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Pan = new Class({\r\n\r\n    initialize:\r\n\r\n    function Pan (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#duration\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The starting scroll coordinates to pan the camera from.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#source\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.source = new Vector2();\r\n\r\n        /**\r\n         * The constantly updated value based on zoom.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#current\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.current = new Vector2();\r\n\r\n        /**\r\n         * The destination scroll coordinates to pan the camera to.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#destination\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.11.0\r\n         */\r\n        this.destination = new Vector2();\r\n\r\n        /**\r\n         * The ease function to use during the pan.\r\n         * \r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#ease\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.ease;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#progress\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdate\r\n         * @type {?Phaser.Types.Cameras.Scene2D.CameraPanCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Pan#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n     * over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#start\r\n     * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n     * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (x, y, duration, ease, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (ease === undefined) { ease = EaseMap.Linear; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return cam;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        //  Starting from\r\n        this.source.set(cam.scrollX, cam.scrollY);\r\n\r\n        //  Destination\r\n        this.destination.set(x, y);\r\n\r\n        //  Zoom factored version\r\n        cam.getScroll(x, y, this.current);\r\n\r\n        //  Using this ease\r\n        if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease))\r\n        {\r\n            this.ease = EaseMap[ease];\r\n        }\r\n        else if (typeof ease === 'function')\r\n        {\r\n            this.ease = ease;\r\n        }\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit(Events.PAN_START, this.camera, this, duration, x, y);\r\n\r\n        return cam;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#update\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        var progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        this.progress = progress;\r\n\r\n        var cam = this.camera;\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            var v = this.ease(progress);\r\n\r\n            cam.getScroll(this.destination.x, this.destination.y, this.current);\r\n\r\n            var x = this.source.x + ((this.current.x - this.source.x) * v);\r\n            var y = this.source.y + ((this.current.y - this.source.y) * v);\r\n\r\n            cam.setScroll(x, y);\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, cam, progress, x, y);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            cam.centerOn(this.destination.x, this.destination.y);\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, cam, progress, cam.scrollX, cam.scrollY);\r\n            }\r\n    \r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#effectComplete\r\n     * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n     * @since 3.11.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit(Events.PAN_COMPLETE, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#reset\r\n     * @since 3.11.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Pan#destroy\r\n     * @since 3.11.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n        this.source = null;\r\n        this.destination = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Pan;\r\n"]},"metadata":{},"sourceType":"script"}