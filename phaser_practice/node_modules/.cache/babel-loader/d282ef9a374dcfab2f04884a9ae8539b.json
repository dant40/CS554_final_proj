{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Color = require('./Color');\n/**\r\n * Converts a hex string into a Phaser Color object.\r\n * \r\n * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\r\n *\r\n * An alpha channel is _not_ supported.\r\n *\r\n * @function Phaser.Display.Color.HexStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} hex - The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.\r\n *\r\n * @return {Phaser.Display.Color} A Color object populated by the values of the given string.\r\n */\n\n\nvar HexStringToColor = function (hex) {\n  var color = new Color(); // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n\n  hex = hex.replace(/^(?:#|0x)?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^(?:#|0x)?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n  if (result) {\n    var r = parseInt(result[1], 16);\n    var g = parseInt(result[2], 16);\n    var b = parseInt(result[3], 16);\n    color.setTo(r, g, b);\n  }\n\n  return color;\n};\n\nmodule.exports = HexStringToColor;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/HexStringToColor.js"],"names":["Color","require","HexStringToColor","hex","color","replace","m","r","g","b","result","exec","parseInt","setTo","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,gBAAgB,GAAG,UAAUC,GAAV,EACvB;AACI,MAAIC,KAAK,GAAG,IAAIJ,KAAJ,EAAZ,CADJ,CAGI;;AACAG,EAAAA,GAAG,GAAGA,GAAG,CAACE,OAAJ,CAAY,yCAAZ,EAAuD,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAC7D;AACI,WAAOF,CAAC,GAAGA,CAAJ,GAAQC,CAAR,GAAYA,CAAZ,GAAgBC,CAAhB,GAAoBA,CAA3B;AACH,GAHK,CAAN;AAKA,MAAIC,MAAM,GAAI,kDAAD,CAAqDC,IAArD,CAA0DR,GAA1D,CAAb;;AAEA,MAAIO,MAAJ,EACA;AACI,QAAIH,CAAC,GAAGK,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AACA,QAAIF,CAAC,GAAGI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AACA,QAAID,CAAC,GAAGG,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AAEAN,IAAAA,KAAK,CAACS,KAAN,CAAYN,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB;AACH;;AAED,SAAOL,KAAP;AACH,CAtBD;;AAwBAU,MAAM,CAACC,OAAP,GAAiBb,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a hex string into a Phaser Color object.\r\n * \r\n * The hex string can supplied as `'#0033ff'` or the short-hand format of `'#03f'`; it can begin with an optional \"#\" or \"0x\", or be unprefixed.\r\n *\r\n * An alpha channel is _not_ supported.\r\n *\r\n * @function Phaser.Display.Color.HexStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} hex - The hex color value to convert, such as `#0033ff` or the short-hand format: `#03f`.\r\n *\r\n * @return {Phaser.Display.Color} A Color object populated by the values of the given string.\r\n */\r\nvar HexStringToColor = function (hex)\r\n{\r\n    var color = new Color();\r\n\r\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\r\n    hex = hex.replace(/^(?:#|0x)?([a-f\\d])([a-f\\d])([a-f\\d])$/i, function (m, r, g, b)\r\n    {\r\n        return r + r + g + g + b + b;\r\n    });\r\n\r\n    var result = (/^(?:#|0x)?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i).exec(hex);\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 16);\r\n        var g = parseInt(result[2], 16);\r\n        var b = parseInt(result[3], 16);\r\n\r\n        color.setTo(r, g, b);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = HexStringToColor;\r\n"]},"metadata":{},"sourceType":"script"}