{"ast":null,"code":"/**\r\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n* Vectors are the basis of all the geometry related operations in the engine.\r\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vector\r\n*/\n// TODO: consider params for reusing vector objects\nvar Vector = {};\nmodule.exports = Vector;\n\n(function () {\n  /**\r\n   * Creates a new vector.\r\n   * @method create\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @return {vector} A new vector\r\n   */\n  Vector.create = function (x, y) {\n    return {\n      x: x || 0,\n      y: y || 0\n    };\n  };\n  /**\r\n   * Returns a new vector with `x` and `y` copied from the given `vector`.\r\n   * @method clone\r\n   * @param {vector} vector\r\n   * @return {vector} A new cloned vector\r\n   */\n\n\n  Vector.clone = function (vector) {\n    return {\n      x: vector.x,\n      y: vector.y\n    };\n  };\n  /**\r\n   * Returns the magnitude (length) of a vector.\r\n   * @method magnitude\r\n   * @param {vector} vector\r\n   * @return {number} The magnitude of the vector\r\n   */\n\n\n  Vector.magnitude = function (vector) {\n    return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  };\n  /**\r\n   * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\r\n   * @method magnitudeSquared\r\n   * @param {vector} vector\r\n   * @return {number} The squared magnitude of the vector\r\n   */\n\n\n  Vector.magnitudeSquared = function (vector) {\n    return vector.x * vector.x + vector.y * vector.y;\n  };\n  /**\r\n   * Rotates the vector about (0, 0) by specified angle.\r\n   * @method rotate\r\n   * @param {vector} vector\r\n   * @param {number} angle\r\n   * @param {vector} [output]\r\n   * @return {vector} The vector rotated about (0, 0)\r\n   */\n\n\n  Vector.rotate = function (vector, angle, output) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n    if (!output) output = {};\n    var x = vector.x * cos - vector.y * sin;\n    output.y = vector.x * sin + vector.y * cos;\n    output.x = x;\n    return output;\n  };\n  /**\r\n   * Rotates the vector about a specified point by specified angle.\r\n   * @method rotateAbout\r\n   * @param {vector} vector\r\n   * @param {number} angle\r\n   * @param {vector} point\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector rotated about the point\r\n   */\n\n\n  Vector.rotateAbout = function (vector, angle, point, output) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle);\n    if (!output) output = {};\n    var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n    output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n    output.x = x;\n    return output;\n  };\n  /**\r\n   * Normalises a vector (such that its magnitude is `1`).\r\n   * @method normalise\r\n   * @param {vector} vector\r\n   * @return {vector} A new vector normalised\r\n   */\n\n\n  Vector.normalise = function (vector) {\n    var magnitude = Vector.magnitude(vector);\n    if (magnitude === 0) return {\n      x: 0,\n      y: 0\n    };\n    return {\n      x: vector.x / magnitude,\n      y: vector.y / magnitude\n    };\n  };\n  /**\r\n   * Returns the dot-product of two vectors.\r\n   * @method dot\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The dot product of the two vectors\r\n   */\n\n\n  Vector.dot = function (vectorA, vectorB) {\n    return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n  };\n  /**\r\n   * Returns the cross-product of two vectors.\r\n   * @method cross\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The cross product of the two vectors\r\n   */\n\n\n  Vector.cross = function (vectorA, vectorB) {\n    return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n  };\n  /**\r\n   * Returns the cross-product of three vectors.\r\n   * @method cross3\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} vectorC\r\n   * @return {number} The cross product of the three vectors\r\n   */\n\n\n  Vector.cross3 = function (vectorA, vectorB, vectorC) {\n    return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n  };\n  /**\r\n   * Adds the two vectors.\r\n   * @method add\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector of vectorA and vectorB added\r\n   */\n\n\n  Vector.add = function (vectorA, vectorB, output) {\n    if (!output) output = {};\n    output.x = vectorA.x + vectorB.x;\n    output.y = vectorA.y + vectorB.y;\n    return output;\n  };\n  /**\r\n   * Subtracts the two vectors.\r\n   * @method sub\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @param {vector} [output]\r\n   * @return {vector} A new vector of vectorA and vectorB subtracted\r\n   */\n\n\n  Vector.sub = function (vectorA, vectorB, output) {\n    if (!output) output = {};\n    output.x = vectorA.x - vectorB.x;\n    output.y = vectorA.y - vectorB.y;\n    return output;\n  };\n  /**\r\n   * Multiplies a vector and a scalar.\r\n   * @method mult\r\n   * @param {vector} vector\r\n   * @param {number} scalar\r\n   * @return {vector} A new vector multiplied by scalar\r\n   */\n\n\n  Vector.mult = function (vector, scalar) {\n    return {\n      x: vector.x * scalar,\n      y: vector.y * scalar\n    };\n  };\n  /**\r\n   * Divides a vector and a scalar.\r\n   * @method div\r\n   * @param {vector} vector\r\n   * @param {number} scalar\r\n   * @return {vector} A new vector divided by scalar\r\n   */\n\n\n  Vector.div = function (vector, scalar) {\n    return {\n      x: vector.x / scalar,\n      y: vector.y / scalar\n    };\n  };\n  /**\r\n   * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\r\n   * @method perp\r\n   * @param {vector} vector\r\n   * @param {bool} [negate=false]\r\n   * @return {vector} The perpendicular vector\r\n   */\n\n\n  Vector.perp = function (vector, negate) {\n    negate = negate === true ? -1 : 1;\n    return {\n      x: negate * -vector.y,\n      y: negate * vector.x\n    };\n  };\n  /**\r\n   * Negates both components of a vector such that it points in the opposite direction.\r\n   * @method neg\r\n   * @param {vector} vector\r\n   * @return {vector} The negated vector\r\n   */\n\n\n  Vector.neg = function (vector) {\n    return {\n      x: -vector.x,\n      y: -vector.y\n    };\n  };\n  /**\r\n   * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\r\n   * @method angle\r\n   * @param {vector} vectorA\r\n   * @param {vector} vectorB\r\n   * @return {number} The angle in radians\r\n   */\n\n\n  Vector.angle = function (vectorA, vectorB) {\n    return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n  };\n  /**\r\n   * Temporary vector pool (not thread-safe).\r\n   * @property _temp\r\n   * @type {vector[]}\r\n   * @private\r\n   */\n\n\n  Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/geometry/Vector.js"],"names":["Vector","module","exports","create","x","y","clone","vector","magnitude","Math","sqrt","magnitudeSquared","rotate","angle","output","cos","sin","rotateAbout","point","normalise","dot","vectorA","vectorB","cross","cross3","vectorC","add","sub","mult","scalar","div","perp","negate","neg","atan2","_temp"],"mappings":"AAAA;;;;;;;;;AAUA;AAEA,IAAIA,MAAM,GAAG,EAAb;AAEAC,MAAM,CAACC,OAAP,GAAiBF,MAAjB;;AAEA,CAAC,YAAW;AAER;;;;;;;AAOAA,EAAAA,MAAM,CAACG,MAAP,GAAgB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC3B,WAAO;AAAED,MAAAA,CAAC,EAAEA,CAAC,IAAI,CAAV;AAAaC,MAAAA,CAAC,EAAEA,CAAC,IAAI;AAArB,KAAP;AACH,GAFD;AAIA;;;;;;;;AAMAL,EAAAA,MAAM,CAACM,KAAP,GAAe,UAASC,MAAT,EAAiB;AAC5B,WAAO;AAAEH,MAAAA,CAAC,EAAEG,MAAM,CAACH,CAAZ;AAAeC,MAAAA,CAAC,EAAEE,MAAM,CAACF;AAAzB,KAAP;AACH,GAFD;AAIA;;;;;;;;AAMAL,EAAAA,MAAM,CAACQ,SAAP,GAAmB,UAASD,MAAT,EAAiB;AAChC,WAAOE,IAAI,CAACC,IAAL,CAAWH,MAAM,CAACH,CAAP,GAAWG,MAAM,CAACH,CAAnB,GAAyBG,MAAM,CAACF,CAAP,GAAWE,MAAM,CAACF,CAArD,CAAP;AACH,GAFD;AAIA;;;;;;;;AAMAL,EAAAA,MAAM,CAACW,gBAAP,GAA0B,UAASJ,MAAT,EAAiB;AACvC,WAAQA,MAAM,CAACH,CAAP,GAAWG,MAAM,CAACH,CAAnB,GAAyBG,MAAM,CAACF,CAAP,GAAWE,MAAM,CAACF,CAAlD;AACH,GAFD;AAIA;;;;;;;;;;AAQAL,EAAAA,MAAM,CAACY,MAAP,GAAgB,UAASL,MAAT,EAAiBM,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5C,QAAIC,GAAG,GAAGN,IAAI,CAACM,GAAL,CAASF,KAAT,CAAV;AAAA,QAA2BG,GAAG,GAAGP,IAAI,CAACO,GAAL,CAASH,KAAT,CAAjC;AACA,QAAI,CAACC,MAAL,EAAaA,MAAM,GAAG,EAAT;AACb,QAAIV,CAAC,GAAGG,MAAM,CAACH,CAAP,GAAWW,GAAX,GAAiBR,MAAM,CAACF,CAAP,GAAWW,GAApC;AACAF,IAAAA,MAAM,CAACT,CAAP,GAAWE,MAAM,CAACH,CAAP,GAAWY,GAAX,GAAiBT,MAAM,CAACF,CAAP,GAAWU,GAAvC;AACAD,IAAAA,MAAM,CAACV,CAAP,GAAWA,CAAX;AACA,WAAOU,MAAP;AACH,GAPD;AASA;;;;;;;;;;;AASAd,EAAAA,MAAM,CAACiB,WAAP,GAAqB,UAASV,MAAT,EAAiBM,KAAjB,EAAwBK,KAAxB,EAA+BJ,MAA/B,EAAuC;AACxD,QAAIC,GAAG,GAAGN,IAAI,CAACM,GAAL,CAASF,KAAT,CAAV;AAAA,QAA2BG,GAAG,GAAGP,IAAI,CAACO,GAAL,CAASH,KAAT,CAAjC;AACA,QAAI,CAACC,MAAL,EAAaA,MAAM,GAAG,EAAT;AACb,QAAIV,CAAC,GAAGc,KAAK,CAACd,CAAN,IAAW,CAACG,MAAM,CAACH,CAAP,GAAWc,KAAK,CAACd,CAAlB,IAAuBW,GAAvB,GAA6B,CAACR,MAAM,CAACF,CAAP,GAAWa,KAAK,CAACb,CAAlB,IAAuBW,GAA/D,CAAR;AACAF,IAAAA,MAAM,CAACT,CAAP,GAAWa,KAAK,CAACb,CAAN,IAAW,CAACE,MAAM,CAACH,CAAP,GAAWc,KAAK,CAACd,CAAlB,IAAuBY,GAAvB,GAA6B,CAACT,MAAM,CAACF,CAAP,GAAWa,KAAK,CAACb,CAAlB,IAAuBU,GAA/D,CAAX;AACAD,IAAAA,MAAM,CAACV,CAAP,GAAWA,CAAX;AACA,WAAOU,MAAP;AACH,GAPD;AASA;;;;;;;;AAMAd,EAAAA,MAAM,CAACmB,SAAP,GAAmB,UAASZ,MAAT,EAAiB;AAChC,QAAIC,SAAS,GAAGR,MAAM,CAACQ,SAAP,CAAiBD,MAAjB,CAAhB;AACA,QAAIC,SAAS,KAAK,CAAlB,EACI,OAAO;AAAEJ,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAP;AACJ,WAAO;AAAED,MAAAA,CAAC,EAAEG,MAAM,CAACH,CAAP,GAAWI,SAAhB;AAA2BH,MAAAA,CAAC,EAAEE,MAAM,CAACF,CAAP,GAAWG;AAAzC,KAAP;AACH,GALD;AAOA;;;;;;;;;AAOAR,EAAAA,MAAM,CAACoB,GAAP,GAAa,UAASC,OAAT,EAAkBC,OAAlB,EAA2B;AACpC,WAAQD,OAAO,CAACjB,CAAR,GAAYkB,OAAO,CAAClB,CAArB,GAA2BiB,OAAO,CAAChB,CAAR,GAAYiB,OAAO,CAACjB,CAAtD;AACH,GAFD;AAIA;;;;;;;;;AAOAL,EAAAA,MAAM,CAACuB,KAAP,GAAe,UAASF,OAAT,EAAkBC,OAAlB,EAA2B;AACtC,WAAQD,OAAO,CAACjB,CAAR,GAAYkB,OAAO,CAACjB,CAArB,GAA2BgB,OAAO,CAAChB,CAAR,GAAYiB,OAAO,CAAClB,CAAtD;AACH,GAFD;AAIA;;;;;;;;;;AAQAJ,EAAAA,MAAM,CAACwB,MAAP,GAAgB,UAASH,OAAT,EAAkBC,OAAlB,EAA2BG,OAA3B,EAAoC;AAChD,WAAO,CAACH,OAAO,CAAClB,CAAR,GAAYiB,OAAO,CAACjB,CAArB,KAA2BqB,OAAO,CAACpB,CAAR,GAAYgB,OAAO,CAAChB,CAA/C,IAAoD,CAACiB,OAAO,CAACjB,CAAR,GAAYgB,OAAO,CAAChB,CAArB,KAA2BoB,OAAO,CAACrB,CAAR,GAAYiB,OAAO,CAACjB,CAA/C,CAA3D;AACH,GAFD;AAIA;;;;;;;;;;AAQAJ,EAAAA,MAAM,CAAC0B,GAAP,GAAa,UAASL,OAAT,EAAkBC,OAAlB,EAA2BR,MAA3B,EAAmC;AAC5C,QAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,EAAT;AACbA,IAAAA,MAAM,CAACV,CAAP,GAAWiB,OAAO,CAACjB,CAAR,GAAYkB,OAAO,CAAClB,CAA/B;AACAU,IAAAA,MAAM,CAACT,CAAP,GAAWgB,OAAO,CAAChB,CAAR,GAAYiB,OAAO,CAACjB,CAA/B;AACA,WAAOS,MAAP;AACH,GALD;AAOA;;;;;;;;;;AAQAd,EAAAA,MAAM,CAAC2B,GAAP,GAAa,UAASN,OAAT,EAAkBC,OAAlB,EAA2BR,MAA3B,EAAmC;AAC5C,QAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,EAAT;AACbA,IAAAA,MAAM,CAACV,CAAP,GAAWiB,OAAO,CAACjB,CAAR,GAAYkB,OAAO,CAAClB,CAA/B;AACAU,IAAAA,MAAM,CAACT,CAAP,GAAWgB,OAAO,CAAChB,CAAR,GAAYiB,OAAO,CAACjB,CAA/B;AACA,WAAOS,MAAP;AACH,GALD;AAOA;;;;;;;;;AAOAd,EAAAA,MAAM,CAAC4B,IAAP,GAAc,UAASrB,MAAT,EAAiBsB,MAAjB,EAAyB;AACnC,WAAO;AAAEzB,MAAAA,CAAC,EAAEG,MAAM,CAACH,CAAP,GAAWyB,MAAhB;AAAwBxB,MAAAA,CAAC,EAAEE,MAAM,CAACF,CAAP,GAAWwB;AAAtC,KAAP;AACH,GAFD;AAIA;;;;;;;;;AAOA7B,EAAAA,MAAM,CAAC8B,GAAP,GAAa,UAASvB,MAAT,EAAiBsB,MAAjB,EAAyB;AAClC,WAAO;AAAEzB,MAAAA,CAAC,EAAEG,MAAM,CAACH,CAAP,GAAWyB,MAAhB;AAAwBxB,MAAAA,CAAC,EAAEE,MAAM,CAACF,CAAP,GAAWwB;AAAtC,KAAP;AACH,GAFD;AAIA;;;;;;;;;AAOA7B,EAAAA,MAAM,CAAC+B,IAAP,GAAc,UAASxB,MAAT,EAAiByB,MAAjB,EAAyB;AACnCA,IAAAA,MAAM,GAAGA,MAAM,KAAK,IAAX,GAAkB,CAAC,CAAnB,GAAuB,CAAhC;AACA,WAAO;AAAE5B,MAAAA,CAAC,EAAE4B,MAAM,GAAG,CAACzB,MAAM,CAACF,CAAtB;AAAyBA,MAAAA,CAAC,EAAE2B,MAAM,GAAGzB,MAAM,CAACH;AAA5C,KAAP;AACH,GAHD;AAKA;;;;;;;;AAMAJ,EAAAA,MAAM,CAACiC,GAAP,GAAa,UAAS1B,MAAT,EAAiB;AAC1B,WAAO;AAAEH,MAAAA,CAAC,EAAE,CAACG,MAAM,CAACH,CAAb;AAAgBC,MAAAA,CAAC,EAAE,CAACE,MAAM,CAACF;AAA3B,KAAP;AACH,GAFD;AAIA;;;;;;;;;AAOAL,EAAAA,MAAM,CAACa,KAAP,GAAe,UAASQ,OAAT,EAAkBC,OAAlB,EAA2B;AACtC,WAAOb,IAAI,CAACyB,KAAL,CAAWZ,OAAO,CAACjB,CAAR,GAAYgB,OAAO,CAAChB,CAA/B,EAAkCiB,OAAO,CAAClB,CAAR,GAAYiB,OAAO,CAACjB,CAAtD,CAAP;AACH,GAFD;AAIA;;;;;;;;AAMAJ,EAAAA,MAAM,CAACmC,KAAP,GAAe,CACXnC,MAAM,CAACG,MAAP,EADW,EACMH,MAAM,CAACG,MAAP,EADN,EAEXH,MAAM,CAACG,MAAP,EAFW,EAEMH,MAAM,CAACG,MAAP,EAFN,EAGXH,MAAM,CAACG,MAAP,EAHW,EAGMH,MAAM,CAACG,MAAP,EAHN,CAAf;AAMH,CA9ND","sourcesContent":["/**\r\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n* Vectors are the basis of all the geometry related operations in the engine.\r\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Vector\r\n*/\r\n\r\n// TODO: consider params for reusing vector objects\r\n\r\nvar Vector = {};\r\n\r\nmodule.exports = Vector;\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new vector.\r\n     * @method create\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @return {vector} A new vector\r\n     */\r\n    Vector.create = function(x, y) {\r\n        return { x: x || 0, y: y || 0 };\r\n    };\r\n\r\n    /**\r\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\r\n     * @method clone\r\n     * @param {vector} vector\r\n     * @return {vector} A new cloned vector\r\n     */\r\n    Vector.clone = function(vector) {\r\n        return { x: vector.x, y: vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector.\r\n     * @method magnitude\r\n     * @param {vector} vector\r\n     * @return {number} The magnitude of the vector\r\n     */\r\n    Vector.magnitude = function(vector) {\r\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\r\n    };\r\n\r\n    /**\r\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\r\n     * @method magnitudeSquared\r\n     * @param {vector} vector\r\n     * @return {number} The squared magnitude of the vector\r\n     */\r\n    Vector.magnitudeSquared = function(vector) {\r\n        return (vector.x * vector.x) + (vector.y * vector.y);\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about (0, 0) by specified angle.\r\n     * @method rotate\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} [output]\r\n     * @return {vector} The vector rotated about (0, 0)\r\n     */\r\n    Vector.rotate = function(vector, angle, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = vector.x * cos - vector.y * sin;\r\n        output.y = vector.x * sin + vector.y * cos;\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Rotates the vector about a specified point by specified angle.\r\n     * @method rotateAbout\r\n     * @param {vector} vector\r\n     * @param {number} angle\r\n     * @param {vector} point\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector rotated about the point\r\n     */\r\n    Vector.rotateAbout = function(vector, angle, point, output) {\r\n        var cos = Math.cos(angle), sin = Math.sin(angle);\r\n        if (!output) output = {};\r\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\r\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\r\n        output.x = x;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Normalises a vector (such that its magnitude is `1`).\r\n     * @method normalise\r\n     * @param {vector} vector\r\n     * @return {vector} A new vector normalised\r\n     */\r\n    Vector.normalise = function(vector) {\r\n        var magnitude = Vector.magnitude(vector);\r\n        if (magnitude === 0)\r\n            return { x: 0, y: 0 };\r\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\r\n    };\r\n\r\n    /**\r\n     * Returns the dot-product of two vectors.\r\n     * @method dot\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The dot product of the two vectors\r\n     */\r\n    Vector.dot = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of two vectors.\r\n     * @method cross\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The cross product of the two vectors\r\n     */\r\n    Vector.cross = function(vectorA, vectorB) {\r\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\r\n    };\r\n\r\n    /**\r\n     * Returns the cross-product of three vectors.\r\n     * @method cross3\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} vectorC\r\n     * @return {number} The cross product of the three vectors\r\n     */\r\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\r\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Adds the two vectors.\r\n     * @method add\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB added\r\n     */\r\n    Vector.add = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x + vectorB.x;\r\n        output.y = vectorA.y + vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Subtracts the two vectors.\r\n     * @method sub\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @param {vector} [output]\r\n     * @return {vector} A new vector of vectorA and vectorB subtracted\r\n     */\r\n    Vector.sub = function(vectorA, vectorB, output) {\r\n        if (!output) output = {};\r\n        output.x = vectorA.x - vectorB.x;\r\n        output.y = vectorA.y - vectorB.y;\r\n        return output;\r\n    };\r\n\r\n    /**\r\n     * Multiplies a vector and a scalar.\r\n     * @method mult\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector multiplied by scalar\r\n     */\r\n    Vector.mult = function(vector, scalar) {\r\n        return { x: vector.x * scalar, y: vector.y * scalar };\r\n    };\r\n\r\n    /**\r\n     * Divides a vector and a scalar.\r\n     * @method div\r\n     * @param {vector} vector\r\n     * @param {number} scalar\r\n     * @return {vector} A new vector divided by scalar\r\n     */\r\n    Vector.div = function(vector, scalar) {\r\n        return { x: vector.x / scalar, y: vector.y / scalar };\r\n    };\r\n\r\n    /**\r\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\r\n     * @method perp\r\n     * @param {vector} vector\r\n     * @param {bool} [negate=false]\r\n     * @return {vector} The perpendicular vector\r\n     */\r\n    Vector.perp = function(vector, negate) {\r\n        negate = negate === true ? -1 : 1;\r\n        return { x: negate * -vector.y, y: negate * vector.x };\r\n    };\r\n\r\n    /**\r\n     * Negates both components of a vector such that it points in the opposite direction.\r\n     * @method neg\r\n     * @param {vector} vector\r\n     * @return {vector} The negated vector\r\n     */\r\n    Vector.neg = function(vector) {\r\n        return { x: -vector.x, y: -vector.y };\r\n    };\r\n\r\n    /**\r\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\r\n     * @method angle\r\n     * @param {vector} vectorA\r\n     * @param {vector} vectorB\r\n     * @return {number} The angle in radians\r\n     */\r\n    Vector.angle = function(vectorA, vectorB) {\r\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\r\n    };\r\n\r\n    /**\r\n     * Temporary vector pool (not thread-safe).\r\n     * @property _temp\r\n     * @type {vector[]}\r\n     * @private\r\n     */\r\n    Vector._temp = [\r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create(), \r\n        Vector.create(), Vector.create()\r\n    ];\r\n\r\n})();"]},"metadata":{},"sourceType":"script"}