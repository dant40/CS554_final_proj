{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar DegToRad = require('../../../math/DegToRad');\n\nvar FillStyleCanvas = require('../FillStyleCanvas');\n\nvar LineStyleCanvas = require('../LineStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Arc#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Arc} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar ArcCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    var radius = src.radius;\n    ctx.beginPath();\n    ctx.arc(radius - src.originX * (radius * 2), radius - src.originY * (radius * 2), radius, DegToRad(src._startAngle), DegToRad(src._endAngle), src.anticlockwise);\n\n    if (src.closePath) {\n      ctx.closePath();\n    }\n\n    if (src.isFilled) {\n      FillStyleCanvas(ctx, src);\n      ctx.fill();\n    }\n\n    if (src.isStroked) {\n      LineStyleCanvas(ctx, src);\n      ctx.stroke();\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = ArcCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/arc/ArcCanvasRenderer.js"],"names":["DegToRad","require","FillStyleCanvas","LineStyleCanvas","SetTransform","ArcCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","ctx","currentContext","radius","beginPath","arc","originX","originY","_startAngle","_endAngle","anticlockwise","closePath","isFilled","fill","isStroked","stroke","restore","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,6CAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAII,iBAAiB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EACxB;AACI,MAAIC,GAAG,GAAGL,QAAQ,CAACM,cAAnB;;AAEA,MAAIR,YAAY,CAACE,QAAD,EAAWK,GAAX,EAAgBJ,GAAhB,EAAqBE,MAArB,EAA6BC,YAA7B,CAAhB,EACA;AACI,QAAIG,MAAM,GAAGN,GAAG,CAACM,MAAjB;AAEAF,IAAAA,GAAG,CAACG,SAAJ;AAEAH,IAAAA,GAAG,CAACI,GAAJ,CACKF,MAAD,GAAWN,GAAG,CAACS,OAAJ,IAAeH,MAAM,GAAG,CAAxB,CADf,EAEKA,MAAD,GAAWN,GAAG,CAACU,OAAJ,IAAeJ,MAAM,GAAG,CAAxB,CAFf,EAGIA,MAHJ,EAIIb,QAAQ,CAACO,GAAG,CAACW,WAAL,CAJZ,EAKIlB,QAAQ,CAACO,GAAG,CAACY,SAAL,CALZ,EAMIZ,GAAG,CAACa,aANR;;AASA,QAAIb,GAAG,CAACc,SAAR,EACA;AACIV,MAAAA,GAAG,CAACU,SAAJ;AACH;;AAED,QAAId,GAAG,CAACe,QAAR,EACA;AACIpB,MAAAA,eAAe,CAACS,GAAD,EAAMJ,GAAN,CAAf;AAEAI,MAAAA,GAAG,CAACY,IAAJ;AACH;;AAED,QAAIhB,GAAG,CAACiB,SAAR,EACA;AACIrB,MAAAA,eAAe,CAACQ,GAAD,EAAMJ,GAAN,CAAf;AAEAI,MAAAA,GAAG,CAACc,MAAJ;AACH,KA/BL,CAiCI;;;AACAd,IAAAA,GAAG,CAACe,OAAJ;AACH;AACJ,CAzCD;;AA2CAC,MAAM,CAACC,OAAP,GAAiBvB,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar DegToRad = require('../../../math/DegToRad');\r\nvar FillStyleCanvas = require('../FillStyleCanvas');\r\nvar LineStyleCanvas = require('../LineStyleCanvas');\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Arc#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Arc} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ArcCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        var radius = src.radius;\r\n\r\n        ctx.beginPath();\r\n\r\n        ctx.arc(\r\n            (radius) - src.originX * (radius * 2),\r\n            (radius) - src.originY * (radius * 2),\r\n            radius,\r\n            DegToRad(src._startAngle),\r\n            DegToRad(src._endAngle),\r\n            src.anticlockwise\r\n        );\r\n\r\n        if (src.closePath)\r\n        {\r\n            ctx.closePath();\r\n        }\r\n\r\n        if (src.isFilled)\r\n        {\r\n            FillStyleCanvas(ctx, src);\r\n\r\n            ctx.fill();\r\n        }\r\n\r\n        if (src.isStroked)\r\n        {\r\n            LineStyleCanvas(ctx, src);\r\n\r\n            ctx.stroke();\r\n        }\r\n\r\n        //  Restore the context saved in SetTransform\r\n        ctx.restore();\r\n    }\r\n};\r\n\r\nmodule.exports = ArcCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}