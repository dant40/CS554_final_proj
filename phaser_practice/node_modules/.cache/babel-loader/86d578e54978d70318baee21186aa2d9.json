{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n/**\r\n * @classdesc\r\n * A Polygon object\r\n *\r\n * The polygon is a closed shape consists of a series of connected straight lines defined by list of ordered points.\r\n * Several formats are supported to define the list of points, check the setTo method for details. \r\n * This is a geometry object allowing you to define and inspect the shape.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Polygon you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Polygon\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Point[]} [points] - List of points defining the perimeter of this Polygon. Several formats are supported: \r\n * - A string containing paired x y values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n * - An array of objects with public x y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n */\n\n\nvar Polygon = new Class({\n  initialize: function Polygon(points) {\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.POLYGON`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Polygon#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n    this.type = GEOM_CONST.POLYGON;\n    /**\r\n     * The area of this Polygon.\r\n     *\r\n     * @name Phaser.Geom.Polygon#area\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.area = 0;\n    /**\r\n     * An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]\r\n     *\r\n     * @name Phaser.Geom.Polygon#points\r\n     * @type {Phaser.Geom.Point[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.points = [];\n\n    if (points) {\n      this.setTo(points);\n    }\n  },\n\n  /**\r\n   * Check to see if the Polygon contains the given x / y coordinates.\r\n   *\r\n   * @method Phaser.Geom.Polygon#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check within the polygon.\r\n   * @param {number} y - The y coordinate to check within the polygon.\r\n   *\r\n   * @return {boolean} `true` if the coordinates are within the polygon, otherwise `false`.\r\n   */\n  contains: function (x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Sets this Polygon to the given points.\r\n   *\r\n   * The points can be set from a variety of formats:\r\n   *\r\n   * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n   * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n   * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n   * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n   * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n   *\r\n   * `setTo` may also be called without any arguments to remove all points.\r\n   *\r\n   * @method Phaser.Geom.Polygon#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} points - Points defining the perimeter of this polygon. Please check function description above for the different supported formats.\r\n   *\r\n   * @return {Phaser.Geom.Polygon} This Polygon object.\r\n   */\n  setTo: function (points) {\n    this.area = 0;\n    this.points = [];\n\n    if (typeof points === 'string') {\n      points = points.split(' ');\n    }\n\n    if (!Array.isArray(points)) {\n      return this;\n    }\n\n    var p;\n    var y0 = Number.MAX_VALUE; //  The points argument is an array, so iterate through it\n\n    for (var i = 0; i < points.length; i++) {\n      p = {\n        x: 0,\n        y: 0\n      };\n\n      if (typeof points[i] === 'number' || typeof points[i] === 'string') {\n        p.x = parseFloat(points[i]);\n        p.y = parseFloat(points[i + 1]);\n        i++;\n      } else if (Array.isArray(points[i])) {\n        //  An array of arrays?\n        p.x = points[i][0];\n        p.y = points[i][1];\n      } else {\n        p.x = points[i].x;\n        p.y = points[i].y;\n      }\n\n      this.points.push(p); //  Lowest boundary\n\n      if (p.y < y0) {\n        y0 = p.y;\n      }\n    }\n\n    this.calculateArea(y0);\n    return this;\n  },\n\n  /**\r\n   * Calculates the area of the Polygon. This is available in the property Polygon.area\r\n   *\r\n   * @method Phaser.Geom.Polygon#calculateArea\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The area of the polygon.\r\n   */\n  calculateArea: function () {\n    if (this.points.length < 3) {\n      this.area = 0;\n      return this.area;\n    }\n\n    var sum = 0;\n    var p1;\n    var p2;\n\n    for (var i = 0; i < this.points.length - 1; i++) {\n      p1 = this.points[i];\n      p2 = this.points[i + 1];\n      sum += (p2.x - p1.x) * (p1.y + p2.y);\n    }\n\n    p1 = this.points[0];\n    p2 = this.points[this.points.length - 1];\n    sum += (p1.x - p2.x) * (p2.y + p1.y);\n    this.area = -sum * 0.5;\n    return this.area;\n  },\n\n  /**\r\n   * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n   * based on the given quantity or stepRate values.\r\n   *\r\n   * @method Phaser.Geom.Polygon#getPoints\r\n   * @since 3.12.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n   * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n   */\n  getPoints: function (quantity, step, output) {\n    return GetPoints(this, quantity, step, output);\n  }\n});\nmodule.exports = Polygon;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/polygon/Polygon.js"],"names":["Class","require","Contains","GetPoints","GEOM_CONST","Polygon","initialize","points","type","POLYGON","area","setTo","contains","x","y","split","Array","isArray","p","y0","Number","MAX_VALUE","i","length","parseFloat","push","calculateArea","sum","p1","p2","getPoints","quantity","step","output","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\n\r\n/**\r\n * @classdesc\r\n * A Polygon object\r\n *\r\n * The polygon is a closed shape consists of a series of connected straight lines defined by list of ordered points.\r\n * Several formats are supported to define the list of points, check the setTo method for details. \r\n * This is a geometry object allowing you to define and inspect the shape.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Polygon you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Polygon\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Point[]} [points] - List of points defining the perimeter of this Polygon. Several formats are supported: \r\n * - A string containing paired x y values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n * - An array of objects with public x y properties: `[obj1, obj2, ...]`\r\n * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n */\r\nvar Polygon = new Class({\r\n\r\n    initialize:\r\n\r\n    function Polygon (points)\r\n    {\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.POLYGON`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Polygon#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.POLYGON;\r\n\r\n        /**\r\n         * The area of this Polygon.\r\n         *\r\n         * @name Phaser.Geom.Polygon#area\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.area = 0;\r\n\r\n        /**\r\n         * An array of number pair objects that make up this polygon. I.e. [ {x,y}, {x,y}, {x,y} ]\r\n         *\r\n         * @name Phaser.Geom.Polygon#points\r\n         * @type {Phaser.Geom.Point[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.points = [];\r\n\r\n        if (points)\r\n        {\r\n            this.setTo(points);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Polygon contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Polygon#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the polygon.\r\n     * @param {number} y - The y coordinate to check within the polygon.\r\n     *\r\n     * @return {boolean} `true` if the coordinates are within the polygon, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Sets this Polygon to the given points.\r\n     *\r\n     * The points can be set from a variety of formats:\r\n     *\r\n     * - A string containing paired values separated by a single space: `'40 0 40 20 100 20 100 80 40 80 40 100 0 50'`\r\n     * - An array of Point objects: `[new Phaser.Point(x1, y1), ...]`\r\n     * - An array of objects with public x/y properties: `[obj1, obj2, ...]`\r\n     * - An array of paired numbers that represent point coordinates: `[x1,y1, x2,y2, ...]`\r\n     * - An array of arrays with two elements representing x/y coordinates: `[[x1, y1], [x2, y2], ...]`\r\n     *\r\n     * `setTo` may also be called without any arguments to remove all points.\r\n     *\r\n     * @method Phaser.Geom.Polygon#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} points - Points defining the perimeter of this polygon. Please check function description above for the different supported formats.\r\n     *\r\n     * @return {Phaser.Geom.Polygon} This Polygon object.\r\n     */\r\n    setTo: function (points)\r\n    {\r\n        this.area = 0;\r\n        this.points = [];\r\n\r\n        if (typeof points === 'string')\r\n        {\r\n            points = points.split(' ');\r\n        }\r\n\r\n        if (!Array.isArray(points))\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var p;\r\n        var y0 = Number.MAX_VALUE;\r\n\r\n        //  The points argument is an array, so iterate through it\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            p = { x: 0, y: 0 };\r\n\r\n            if (typeof points[i] === 'number' || typeof points[i] === 'string')\r\n            {\r\n                p.x = parseFloat(points[i]);\r\n                p.y = parseFloat(points[i + 1]);\r\n                i++;\r\n            }\r\n            else if (Array.isArray(points[i]))\r\n            {\r\n                //  An array of arrays?\r\n                p.x = points[i][0];\r\n                p.y = points[i][1];\r\n            }\r\n            else\r\n            {\r\n                p.x = points[i].x;\r\n                p.y = points[i].y;\r\n            }\r\n\r\n            this.points.push(p);\r\n\r\n            //  Lowest boundary\r\n            if (p.y < y0)\r\n            {\r\n                y0 = p.y;\r\n            }\r\n        }\r\n\r\n        this.calculateArea(y0);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates the area of the Polygon. This is available in the property Polygon.area\r\n     *\r\n     * @method Phaser.Geom.Polygon#calculateArea\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The area of the polygon.\r\n     */\r\n    calculateArea: function ()\r\n    {\r\n        if (this.points.length < 3)\r\n        {\r\n            this.area = 0;\r\n\r\n            return this.area;\r\n        }\r\n\r\n        var sum = 0;\r\n        var p1;\r\n        var p2;\r\n\r\n        for (var i = 0; i < this.points.length - 1; i++)\r\n        {\r\n            p1 = this.points[i];\r\n            p2 = this.points[i + 1];\r\n\r\n            sum += (p2.x - p1.x) * (p1.y + p2.y);\r\n        }\r\n\r\n        p1 = this.points[0];\r\n        p2 = this.points[this.points.length - 1];\r\n\r\n        sum += (p1.x - p2.x) * (p2.y + p1.y);\r\n\r\n        this.area = -sum * 0.5;\r\n\r\n        return this.area;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the perimeter of the Polygon,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Polygon#getPoints\r\n     * @since 3.12.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the perimeter of the Polygon and dividing it by the stepRate.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the perimeter of the Polygon.\r\n     */\r\n    getPoints: function (quantity, step, output)\r\n    {\r\n        return GetPoints(this, quantity, step, output);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Polygon;\r\n"]},"metadata":{},"sourceType":"script"}