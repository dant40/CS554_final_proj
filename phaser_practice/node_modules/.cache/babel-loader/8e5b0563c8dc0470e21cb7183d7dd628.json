{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Vector2 = require('./Vector2');\n/**\r\n * Returns a Vector2 containing the x and y position of the given index in a `width` x `height` sized grid.\r\n * \r\n * For example, in a 6 x 4 grid, index 16 would equal x: 4 y: 2.\r\n * \r\n * If the given index is out of range an empty Vector2 is returned.\r\n *\r\n * @function Phaser.Math.ToXY\r\n * @since 3.19.0\r\n *\r\n * @param {integer} index - The position within the grid to get the x/y value for.\r\n * @param {integer} width - The width of the grid.\r\n * @param {integer} height - The height of the grid.\r\n * @param {Phaser.Math.Vector2} [out] - An optional Vector2 to store the result in. If not given, a new Vector2 instance will be created.\r\n *\r\n * @return {Phaser.Math.Vector2} A Vector2 where the x and y properties contain the given grid index.\r\n */\n\n\nvar ToXY = function (index, width, height, out) {\n  if (out === undefined) {\n    out = new Vector2();\n  }\n\n  var x = 0;\n  var y = 0;\n  var total = width * height;\n\n  if (index > 0 && index <= total) {\n    if (index > width - 1) {\n      y = Math.floor(index / width);\n      x = index - y * width;\n    } else {\n      x = index;\n    }\n\n    out.set(x, y);\n  }\n\n  return out;\n};\n\nmodule.exports = ToXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/ToXY.js"],"names":["Vector2","require","ToXY","index","width","height","out","undefined","x","y","total","Math","floor","set","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,IAAI,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,GAAhC,EACX;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIN,OAAJ,EAAN;AAAsB;;AAE/C,MAAIQ,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,KAAK,GAAGN,KAAK,GAAGC,MAApB;;AAEA,MAAIF,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAIO,KAA1B,EACA;AACI,QAAIP,KAAK,GAAGC,KAAK,GAAG,CAApB,EACA;AACIK,MAAAA,CAAC,GAAGE,IAAI,CAACC,KAAL,CAAWT,KAAK,GAAGC,KAAnB,CAAJ;AACAI,MAAAA,CAAC,GAAGL,KAAK,GAAIM,CAAC,GAAGL,KAAjB;AACH,KAJD,MAMA;AACII,MAAAA,CAAC,GAAGL,KAAJ;AACH;;AAEDG,IAAAA,GAAG,CAACO,GAAJ,CAAQL,CAAR,EAAWC,CAAX;AACH;;AAED,SAAOH,GAAP;AACH,CAxBD;;AA0BAQ,MAAM,CAACC,OAAP,GAAiBb,IAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector2 = require('./Vector2');\r\n\r\n/**\r\n * Returns a Vector2 containing the x and y position of the given index in a `width` x `height` sized grid.\r\n * \r\n * For example, in a 6 x 4 grid, index 16 would equal x: 4 y: 2.\r\n * \r\n * If the given index is out of range an empty Vector2 is returned.\r\n *\r\n * @function Phaser.Math.ToXY\r\n * @since 3.19.0\r\n *\r\n * @param {integer} index - The position within the grid to get the x/y value for.\r\n * @param {integer} width - The width of the grid.\r\n * @param {integer} height - The height of the grid.\r\n * @param {Phaser.Math.Vector2} [out] - An optional Vector2 to store the result in. If not given, a new Vector2 instance will be created.\r\n *\r\n * @return {Phaser.Math.Vector2} A Vector2 where the x and y properties contain the given grid index.\r\n */\r\nvar ToXY = function (index, width, height, out)\r\n{\r\n    if (out === undefined) { out = new Vector2(); }\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n    var total = width * height;\r\n\r\n    if (index > 0 && index <= total)\r\n    {\r\n        if (index > width - 1)\r\n        {\r\n            y = Math.floor(index / width);\r\n            x = index - (y * width);\r\n        }\r\n        else\r\n        {\r\n            x = index;\r\n        }\r\n\r\n        out.set(x, y);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = ToXY;\r\n"]},"metadata":{},"sourceType":"script"}