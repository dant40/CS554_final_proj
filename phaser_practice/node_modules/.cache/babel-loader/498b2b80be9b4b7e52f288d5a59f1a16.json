{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar TriangleToTriangle = require('./TriangleToTriangle');\n\nvar GetTriangleToLine = require('./GetTriangleToLine');\n/**\r\n * Checks if two Triangles intersect, and returns the intersection points as a Point object array.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.GetTriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetTriangleToTriangle = function (triangleA, triangleB, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (TriangleToTriangle(triangleA, triangleB)) {\n    var lineA = triangleB.getLineA();\n    var lineB = triangleB.getLineB();\n    var lineC = triangleB.getLineC();\n    GetTriangleToLine(triangleA, lineA, out);\n    GetTriangleToLine(triangleA, lineB, out);\n    GetTriangleToLine(triangleA, lineC, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetTriangleToTriangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetTriangleToTriangle.js"],"names":["TriangleToTriangle","require","GetTriangleToLine","GetTriangleToTriangle","triangleA","triangleB","out","undefined","lineA","getLineA","lineB","getLineB","lineC","getLineC","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qBAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIE,qBAAqB,GAAG,UAAUC,SAAV,EAAqBC,SAArB,EAAgCC,GAAhC,EAC5B;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIN,kBAAkB,CAACI,SAAD,EAAYC,SAAZ,CAAtB,EACA;AACI,QAAIG,KAAK,GAAGH,SAAS,CAACI,QAAV,EAAZ;AACA,QAAIC,KAAK,GAAGL,SAAS,CAACM,QAAV,EAAZ;AACA,QAAIC,KAAK,GAAGP,SAAS,CAACQ,QAAV,EAAZ;AAEAX,IAAAA,iBAAiB,CAACE,SAAD,EAAYI,KAAZ,EAAmBF,GAAnB,CAAjB;AACAJ,IAAAA,iBAAiB,CAACE,SAAD,EAAYM,KAAZ,EAAmBJ,GAAnB,CAAjB;AACAJ,IAAAA,iBAAiB,CAACE,SAAD,EAAYQ,KAAZ,EAAmBN,GAAnB,CAAjB;AACH;;AAED,SAAOA,GAAP;AACH,CAhBD;;AAkBAQ,MAAM,CAACC,OAAP,GAAiBZ,qBAAjB","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar TriangleToTriangle = require('./TriangleToTriangle');\r\nvar GetTriangleToLine = require('./GetTriangleToLine');\r\n\r\n/**\r\n * Checks if two Triangles intersect, and returns the intersection points as a Point object array.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.GetTriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetTriangleToTriangle = function (triangleA, triangleB, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (TriangleToTriangle(triangleA, triangleB))\r\n    {\r\n        var lineA = triangleB.getLineA();\r\n        var lineB = triangleB.getLineB();\r\n        var lineC = triangleB.getLineC();\r\n\r\n        GetTriangleToLine(triangleA, lineA, out);\r\n        GetTriangleToLine(triangleA, lineB, out);\r\n        GetTriangleToLine(triangleA, lineC, out);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetTriangleToTriangle;\r\n"]},"metadata":{},"sourceType":"script"}