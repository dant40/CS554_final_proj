{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Between = require('../../math/Between');\n\nvar ContainsRect = require('./ContainsRect');\n\nvar Point = require('../point/Point');\n/**\r\n * Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\r\n * The inner Rectangle must be fully contained within the outer rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.RandomOutside\r\n * @since 3.10.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} outer - The outer Rectangle to get the random point within.\r\n * @param {Phaser.Geom.Rectangle} inner - The inner Rectangle to exclude from the returned point.\r\n * @param {Phaser.Geom.Point} [out] - A Point, or Point-like object to store the result in. If not specified, a new Point will be created.\r\n *\r\n * @return {Phaser.Geom.Point} A Point object containing the random values in its `x` and `y` properties.\r\n */\n\n\nvar RandomOutside = function (outer, inner, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  if (ContainsRect(outer, inner)) {\n    //  Pick a random quadrant\n    //\n    //  The quadrants don't extend the full widths / heights of the outer rect to give\n    //  us a better uniformed distribution, otherwise you get clumping in the corners where\n    //  the 4 quads would overlap\n    switch (Between(0, 3)) {\n      case 0:\n        // Top\n        out.x = outer.x + Math.random() * (inner.right - outer.x);\n        out.y = outer.y + Math.random() * (inner.top - outer.y);\n        break;\n\n      case 1:\n        // Bottom\n        out.x = inner.x + Math.random() * (outer.right - inner.x);\n        out.y = inner.bottom + Math.random() * (outer.bottom - inner.bottom);\n        break;\n\n      case 2:\n        // Left\n        out.x = outer.x + Math.random() * (inner.x - outer.x);\n        out.y = inner.y + Math.random() * (outer.bottom - inner.y);\n        break;\n\n      case 3:\n        // Right\n        out.x = inner.right + Math.random() * (outer.right - inner.right);\n        out.y = outer.y + Math.random() * (inner.bottom - outer.y);\n        break;\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = RandomOutside;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/RandomOutside.js"],"names":["Between","require","ContainsRect","Point","RandomOutside","outer","inner","out","undefined","x","Math","random","right","y","top","bottom","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIG,aAAa,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EACpB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7C,MAAID,YAAY,CAACG,KAAD,EAAQC,KAAR,CAAhB,EACA;AACI;AACA;AACA;AACA;AACA;AAEA,YAAQN,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAf;AAEI,WAAK,CAAL;AAAQ;AACJO,QAAAA,GAAG,CAACE,CAAJ,GAAQJ,KAAK,CAACI,CAAN,GAAWC,IAAI,CAACC,MAAL,MAAiBL,KAAK,CAACM,KAAN,GAAcP,KAAK,CAACI,CAArC,CAAnB;AACAF,QAAAA,GAAG,CAACM,CAAJ,GAAQR,KAAK,CAACQ,CAAN,GAAWH,IAAI,CAACC,MAAL,MAAiBL,KAAK,CAACQ,GAAN,GAAYT,KAAK,CAACQ,CAAnC,CAAnB;AACA;;AAEJ,WAAK,CAAL;AAAQ;AACJN,QAAAA,GAAG,CAACE,CAAJ,GAAQH,KAAK,CAACG,CAAN,GAAWC,IAAI,CAACC,MAAL,MAAiBN,KAAK,CAACO,KAAN,GAAcN,KAAK,CAACG,CAArC,CAAnB;AACAF,QAAAA,GAAG,CAACM,CAAJ,GAAQP,KAAK,CAACS,MAAN,GAAgBL,IAAI,CAACC,MAAL,MAAiBN,KAAK,CAACU,MAAN,GAAeT,KAAK,CAACS,MAAtC,CAAxB;AACA;;AAEJ,WAAK,CAAL;AAAQ;AACJR,QAAAA,GAAG,CAACE,CAAJ,GAAQJ,KAAK,CAACI,CAAN,GAAWC,IAAI,CAACC,MAAL,MAAiBL,KAAK,CAACG,CAAN,GAAUJ,KAAK,CAACI,CAAjC,CAAnB;AACAF,QAAAA,GAAG,CAACM,CAAJ,GAAQP,KAAK,CAACO,CAAN,GAAWH,IAAI,CAACC,MAAL,MAAiBN,KAAK,CAACU,MAAN,GAAeT,KAAK,CAACO,CAAtC,CAAnB;AACA;;AAEJ,WAAK,CAAL;AAAQ;AACJN,QAAAA,GAAG,CAACE,CAAJ,GAAQH,KAAK,CAACM,KAAN,GAAeF,IAAI,CAACC,MAAL,MAAiBN,KAAK,CAACO,KAAN,GAAcN,KAAK,CAACM,KAArC,CAAvB;AACAL,QAAAA,GAAG,CAACM,CAAJ,GAAQR,KAAK,CAACQ,CAAN,GAAWH,IAAI,CAACC,MAAL,MAAiBL,KAAK,CAACS,MAAN,GAAeV,KAAK,CAACQ,CAAtC,CAAnB;AACA;AApBR;AAsBH;;AAED,SAAON,GAAP;AACH,CArCD;;AAuCAS,MAAM,CAACC,OAAP,GAAiBb,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Between = require('../../math/Between');\r\nvar ContainsRect = require('./ContainsRect');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Calculates a random point that lies within the `outer` Rectangle, but outside of the `inner` Rectangle.\r\n * The inner Rectangle must be fully contained within the outer rectangle.\r\n *\r\n * @function Phaser.Geom.Rectangle.RandomOutside\r\n * @since 3.10.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} outer - The outer Rectangle to get the random point within.\r\n * @param {Phaser.Geom.Rectangle} inner - The inner Rectangle to exclude from the returned point.\r\n * @param {Phaser.Geom.Point} [out] - A Point, or Point-like object to store the result in. If not specified, a new Point will be created.\r\n *\r\n * @return {Phaser.Geom.Point} A Point object containing the random values in its `x` and `y` properties.\r\n */\r\nvar RandomOutside = function (outer, inner, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    if (ContainsRect(outer, inner))\r\n    {\r\n        //  Pick a random quadrant\r\n        //\r\n        //  The quadrants don't extend the full widths / heights of the outer rect to give\r\n        //  us a better uniformed distribution, otherwise you get clumping in the corners where\r\n        //  the 4 quads would overlap\r\n\r\n        switch (Between(0, 3))\r\n        {\r\n            case 0: // Top\r\n                out.x = outer.x + (Math.random() * (inner.right - outer.x));\r\n                out.y = outer.y + (Math.random() * (inner.top - outer.y));\r\n                break;\r\n\r\n            case 1: // Bottom\r\n                out.x = inner.x + (Math.random() * (outer.right - inner.x));\r\n                out.y = inner.bottom + (Math.random() * (outer.bottom - inner.bottom));\r\n                break;\r\n\r\n            case 2: // Left\r\n                out.x = outer.x + (Math.random() * (inner.x - outer.x));\r\n                out.y = inner.y + (Math.random() * (outer.bottom - inner.y));\r\n                break;\r\n\r\n            case 3: // Right\r\n                out.x = inner.right + (Math.random() * (outer.right - inner.right));\r\n                out.y = outer.y + (Math.random() * (inner.bottom - outer.y));\r\n                break;\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = RandomOutside;\r\n"]},"metadata":{},"sourceType":"script"}