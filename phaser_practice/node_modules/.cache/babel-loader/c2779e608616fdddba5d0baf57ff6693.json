{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Snap a value to nearest grid slice, using rounding.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\r\n *\r\n * @function Phaser.Math.Snap.To\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\r\n *\r\n * @return {number} The snapped value.\r\n */\nvar SnapTo = function (value, gap, start, divide) {\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (gap === 0) {\n    return value;\n  }\n\n  value -= start;\n  value = gap * Math.round(value / gap);\n  return divide ? (start + value) / gap : start + value;\n};\n\nmodule.exports = SnapTo;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/snap/SnapTo.js"],"names":["SnapTo","value","gap","start","divide","undefined","Math","round","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;AAeA,IAAIA,MAAM,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,MAA7B,EACb;AACI,MAAID,KAAK,KAAKE,SAAd,EAAyB;AAAEF,IAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,MAAID,GAAG,KAAK,CAAZ,EACA;AACI,WAAOD,KAAP;AACH;;AAEDA,EAAAA,KAAK,IAAIE,KAAT;AACAF,EAAAA,KAAK,GAAGC,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWN,KAAK,GAAGC,GAAnB,CAAd;AAEA,SAAQE,MAAD,GAAW,CAACD,KAAK,GAAGF,KAAT,IAAkBC,GAA7B,GAAmCC,KAAK,GAAGF,KAAlD;AACH,CAbD;;AAeAO,MAAM,CAACC,OAAP,GAAiBT,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Snap a value to nearest grid slice, using rounding.\r\n *\r\n * Example: if you have an interval gap of `5` and a position of `12`... you will snap to `10` whereas `14` will snap to `15`.\r\n *\r\n * @function Phaser.Math.Snap.To\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to snap.\r\n * @param {number} gap - The interval gap of the grid.\r\n * @param {number} [start=0] - Optional starting offset for gap.\r\n * @param {boolean} [divide=false] - If `true` it will divide the snapped value by the gap before returning.\r\n *\r\n * @return {number} The snapped value.\r\n */\r\nvar SnapTo = function (value, gap, start, divide)\r\n{\r\n    if (start === undefined) { start = 0; }\r\n\r\n    if (gap === 0)\r\n    {\r\n        return value;\r\n    }\r\n\r\n    value -= start;\r\n    value = gap * Math.round(value / gap);\r\n\r\n    return (divide) ? (start + value) / gap : start + value;\r\n};\r\n\r\nmodule.exports = SnapTo;\r\n"]},"metadata":{},"sourceType":"script"}