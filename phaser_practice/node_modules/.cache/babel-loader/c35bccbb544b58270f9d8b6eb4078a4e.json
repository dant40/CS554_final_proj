{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Animation = require('./Animation');\n\nvar Class = require('../utils/Class');\n\nvar CustomMap = require('../structs/Map');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar GameEvents = require('../core/events');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar Pad = require('../utils/string/Pad');\n/**\r\n * @classdesc\r\n * The Animation Manager.\r\n *\r\n * Animations are managed by the global Animation Manager. This is a singleton class that is\r\n * responsible for creating and delivering animations and their corresponding data to all Game Objects.\r\n * Unlike plugins it is owned by the Game instance, not the Scene.\r\n *\r\n * Sprites and other Game Objects get the data they need from the AnimationManager.\r\n *\r\n * @class AnimationManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Animations\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n */\n\n\nvar AnimationManager = new Class({\n  Extends: EventEmitter,\n  initialize: function AnimationManager(game) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Phaser.Game instance.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#game\r\n     * @type {Phaser.Game}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.game = game;\n    /**\r\n     * A reference to the Texture Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#textureManager\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.textureManager = null;\n    /**\r\n     * The global time scale of the Animation Manager.\r\n     *\r\n     * This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#globalTimeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.globalTimeScale = 1;\n    /**\r\n     * The Animations registered in the Animation Manager.\r\n     *\r\n     * This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#anims\r\n     * @type {Phaser.Structs.Map.<string, Phaser.Animations.Animation>}\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\n\n    this.anims = new CustomMap();\n    /**\r\n     * Whether the Animation Manager is paused along with all of its Animations.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#paused\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.paused = false;\n    /**\r\n     * The name of this Animation Manager.\r\n     *\r\n     * @name Phaser.Animations.AnimationManager#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.name = 'AnimationManager';\n    game.events.once(GameEvents.BOOT, this.boot, this);\n  },\n\n  /**\r\n   * Registers event listeners after the Game boots.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#boot\r\n   * @listens Phaser.Core.Events#DESTROY\r\n   * @since 3.0.0\r\n   */\n  boot: function () {\n    this.textureManager = this.game.textures;\n    this.game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Adds an existing Animation to the Animation Manager.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#add\r\n   * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key under which the Animation should be added. The Animation will be updated with it. Must be unique.\r\n   * @param {Phaser.Animations.Animation} animation - The Animation which should be added to the Animation Manager.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  add: function (key, animation) {\n    if (this.anims.has(key)) {\n      console.warn('Animation key exists: ' + key);\n      return;\n    }\n\n    animation.key = key;\n    this.anims.set(key, animation);\n    this.emit(Events.ADD_ANIMATION, key, animation);\n    return this;\n  },\n\n  /**\r\n   * Checks to see if the given key is already in use within the Animation Manager or not.\r\n   * \r\n   * Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#exists\r\n   * @since 3.16.0\r\n   *\r\n   * @param {string} key - The key of the Animation to check.\r\n   *\r\n   * @return {boolean} `true` if the Animation already exists in the Animation Manager, or `false` if the key is available.\r\n   */\n  exists: function (key) {\n    return this.anims.has(key);\n  },\n\n  /**\r\n   * Creates a new Animation and adds it to the Animation Manager.\r\n   * \r\n   * Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.\r\n   * \r\n   * If an invalid key is given this method will return `false`.\r\n   * \r\n   * If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.\r\n   * \r\n   * A brand new animation is only created if the key is valid and not already in use.\r\n   * \r\n   * If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#create\r\n   * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Animations.Animation} config - The configuration settings for the Animation.\r\n   *\r\n   * @return {(Phaser.Animations.Animation|false)} The Animation that was created, or `false` is the key is already in use.\r\n   */\n  create: function (config) {\n    var key = config.key;\n    var anim = false;\n\n    if (key) {\n      anim = this.get(key);\n\n      if (!anim) {\n        anim = new Animation(this, key, config);\n        this.anims.set(key, anim);\n        this.emit(Events.ADD_ANIMATION, key, anim);\n      }\n    }\n\n    return anim;\n  },\n\n  /**\r\n   * Loads this Animation Manager's Animations and settings from a JSON object.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Types.Animations.JSONAnimations|Phaser.Types.Animations.JSONAnimation)} data - The JSON object to parse.\r\n   * @param {boolean} [clearCurrentAnimations=false] - If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added.\r\n   *\r\n   * @return {Phaser.Animations.Animation[]} An array containing all of the Animation objects that were created as a result of this call.\r\n   */\n  fromJSON: function (data, clearCurrentAnimations) {\n    if (clearCurrentAnimations === undefined) {\n      clearCurrentAnimations = false;\n    }\n\n    if (clearCurrentAnimations) {\n      this.anims.clear();\n    } //  Do we have a String (i.e. from JSON, or an Object?)\n\n\n    if (typeof data === 'string') {\n      data = JSON.parse(data);\n    }\n\n    var output = []; //  Array of animations, or a single animation?\n\n    if (data.hasOwnProperty('anims') && Array.isArray(data.anims)) {\n      for (var i = 0; i < data.anims.length; i++) {\n        output.push(this.create(data.anims[i]));\n      }\n\n      if (data.hasOwnProperty('globalTimeScale')) {\n        this.globalTimeScale = data.globalTimeScale;\n      }\n    } else if (data.hasOwnProperty('key') && data.type === 'frame') {\n      output.push(this.create(data));\n    }\n\n    return output;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#generateFrameNames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key for the texture containing the animation frames.\r\n   * @param {Phaser.Types.Animations.GenerateFrameNames} [config] - The configuration object for the animation frame names.\r\n   *\r\n   * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n   */\n  generateFrameNames: function (key, config) {\n    var prefix = GetValue(config, 'prefix', '');\n    var start = GetValue(config, 'start', 0);\n    var end = GetValue(config, 'end', 0);\n    var suffix = GetValue(config, 'suffix', '');\n    var zeroPad = GetValue(config, 'zeroPad', 0);\n    var out = GetValue(config, 'outputArray', []);\n    var frames = GetValue(config, 'frames', false);\n    var texture = this.textureManager.get(key);\n\n    if (!texture) {\n      return out;\n    }\n\n    var diff = start < end ? 1 : -1; //  Adjust because we use i !== end in the for loop\n\n    end += diff;\n    var i;\n    var frame;\n\n    if (!config) {\n      //  Use every frame in the atlas?\n      frames = texture.getFrameNames();\n\n      for (i = 0; i < frames.length; i++) {\n        out.push({\n          key: key,\n          frame: frames[i]\n        });\n      }\n    } else if (Array.isArray(frames)) {\n      //  Have they provided their own custom frame sequence array?\n      for (i = 0; i < frames.length; i++) {\n        frame = prefix + Pad(frames[i], zeroPad, '0', 1) + suffix;\n\n        if (texture.has(frame)) {\n          out.push({\n            key: key,\n            frame: frame\n          });\n        }\n      }\n    } else {\n      for (i = start; i !== end; i += diff) {\n        frame = prefix + Pad(i, zeroPad, '0', 1) + suffix;\n\n        if (texture.has(frame)) {\n          out.push({\n            key: key,\n            frame: frame\n          });\n        }\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.\r\n   *\r\n   * Generates objects with numbered frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNumbers}.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#generateFrameNumbers\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key for the texture containing the animation frames.\r\n   * @param {Phaser.Types.Animations.GenerateFrameNumbers} config - The configuration object for the animation frames.\r\n   *\r\n   * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n   */\n  generateFrameNumbers: function (key, config) {\n    var startFrame = GetValue(config, 'start', 0);\n    var endFrame = GetValue(config, 'end', -1);\n    var firstFrame = GetValue(config, 'first', false);\n    var out = GetValue(config, 'outputArray', []);\n    var frames = GetValue(config, 'frames', false);\n    var texture = this.textureManager.get(key);\n\n    if (!texture) {\n      return out;\n    }\n\n    if (firstFrame && texture.has(firstFrame)) {\n      out.push({\n        key: key,\n        frame: firstFrame\n      });\n    }\n\n    var i; //  Have they provided their own custom frame sequence array?\n\n    if (Array.isArray(frames)) {\n      for (i = 0; i < frames.length; i++) {\n        if (texture.has(frames[i])) {\n          out.push({\n            key: key,\n            frame: frames[i]\n          });\n        }\n      }\n    } else {\n      //  No endFrame then see if we can get it\n      if (endFrame === -1) {\n        endFrame = texture.frameTotal;\n      }\n\n      var diff = startFrame < endFrame ? 1 : -1; //  Adjust because we use i !== end in the for loop\n\n      endFrame += diff;\n\n      for (i = startFrame; i !== endFrame; i += diff) {\n        if (texture.has(i)) {\n          out.push({\n            key: key,\n            frame: i\n          });\n        }\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Get an Animation.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the Animation to retrieve.\r\n   *\r\n   * @return {Phaser.Animations.Animation} The Animation.\r\n   */\n  get: function (key) {\n    return this.anims.get(key);\n  },\n\n  /**\r\n   * Load an Animation into a Game Object's Animation Component.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#load\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - The Game Object to load the animation into.\r\n   * @param {string} key - The key of the animation to load.\r\n   * @param {(string|integer)} [startFrame] - The name of a start frame to set on the loaded animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object with the animation loaded into it.\r\n   */\n  load: function (child, key, startFrame) {\n    var anim = this.get(key);\n\n    if (anim) {\n      anim.load(child, startFrame);\n    } else {\n      console.warn('Missing animation: ' + key);\n    }\n\n    return child;\n  },\n\n  /**\r\n   * Pause all animations.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#pauseAll\r\n   * @fires Phaser.Animations.Events#PAUSE_ALL\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  pauseAll: function () {\n    if (!this.paused) {\n      this.paused = true;\n      this.emit(Events.PAUSE_ALL);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Play an animation on the given Game Objects that have an Animation Component.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#play\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to play on the Game Object.\r\n   * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} child - The Game Objects to play the animation on.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  play: function (key, child) {\n    if (!Array.isArray(child)) {\n      child = [child];\n    }\n\n    var anim = this.get(key);\n\n    if (!anim) {\n      return;\n    }\n\n    for (var i = 0; i < child.length; i++) {\n      child[i].anims.play(key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Remove an animation.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#remove\r\n   * @fires Phaser.Animations.Events#REMOVE_ANIMATION\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to remove.\r\n   *\r\n   * @return {Phaser.Animations.Animation} [description]\r\n   */\n  remove: function (key) {\n    var anim = this.get(key);\n\n    if (anim) {\n      this.emit(Events.REMOVE_ANIMATION, key, anim);\n      this.anims.delete(key);\n    }\n\n    return anim;\n  },\n\n  /**\r\n   * Resume all paused animations.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#resumeAll\r\n   * @fires Phaser.Animations.Events#RESUME_ALL\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  resumeAll: function () {\n    if (this.paused) {\n      this.paused = false;\n      this.emit(Events.RESUME_ALL);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Takes an array of Game Objects that have an Animation Component and then\r\n   * starts the given animation playing on them, each one offset by the\r\n   * `stagger` amount given to this method.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#staggerPlay\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n   *\r\n   * @param {string} key - The key of the animation to play on the Game Objects.\r\n   * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} children - An array of Game Objects to play the animation on. They must have an Animation Component.\r\n   * @param {number} [stagger=0] - The amount of time, in milliseconds, to offset each play time by.\r\n   *\r\n   * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n   */\n  staggerPlay: function (key, children, stagger) {\n    if (stagger === undefined) {\n      stagger = 0;\n    }\n\n    if (!Array.isArray(children)) {\n      children = [children];\n    }\n\n    var anim = this.get(key);\n\n    if (!anim) {\n      return;\n    }\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].anims.delayedPlay(stagger * i, key);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Get the animation data as javascript object by giving key, or get the data of all animations as array of objects, if key wasn't provided.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - [description]\r\n   *\r\n   * @return {Phaser.Types.Animations.JSONAnimations} [description]\r\n   */\n  toJSON: function (key) {\n    if (key !== undefined && key !== '') {\n      return this.anims.get(key).toJSON();\n    } else {\n      var output = {\n        anims: [],\n        globalTimeScale: this.globalTimeScale\n      };\n      this.anims.each(function (animationKey, animation) {\n        output.anims.push(animation.toJSON());\n      });\n      return output;\n    }\n  },\n\n  /**\r\n   * Destroy this Animation Manager and clean up animation definitions and references to other objects.\r\n   * This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.\r\n   *\r\n   * @method Phaser.Animations.AnimationManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.anims.clear();\n    this.textureManager = null;\n    this.game = null;\n  }\n});\nmodule.exports = AnimationManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/animations/AnimationManager.js"],"names":["Animation","require","Class","CustomMap","EventEmitter","Events","GameEvents","GetValue","Pad","AnimationManager","Extends","initialize","game","call","textureManager","globalTimeScale","anims","paused","name","events","once","BOOT","boot","textures","DESTROY","destroy","add","key","animation","has","console","warn","set","emit","ADD_ANIMATION","exists","create","config","anim","get","fromJSON","data","clearCurrentAnimations","undefined","clear","JSON","parse","output","hasOwnProperty","Array","isArray","i","length","push","type","generateFrameNames","prefix","start","end","suffix","zeroPad","out","frames","texture","diff","frame","getFrameNames","generateFrameNumbers","startFrame","endFrame","firstFrame","frameTotal","load","child","pauseAll","PAUSE_ALL","play","remove","REMOVE_ANIMATION","delete","resumeAll","RESUME_ALL","staggerPlay","children","stagger","delayedPlay","toJSON","each","animationKey","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Animation = require('./Animation');\r\nvar Class = require('../utils/Class');\r\nvar CustomMap = require('../structs/Map');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Pad = require('../utils/string/Pad');\r\n\r\n/**\r\n * @classdesc\r\n * The Animation Manager.\r\n *\r\n * Animations are managed by the global Animation Manager. This is a singleton class that is\r\n * responsible for creating and delivering animations and their corresponding data to all Game Objects.\r\n * Unlike plugins it is owned by the Game instance, not the Scene.\r\n *\r\n * Sprites and other Game Objects get the data they need from the AnimationManager.\r\n *\r\n * @class AnimationManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Animations\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance.\r\n */\r\nvar AnimationManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function AnimationManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#game\r\n         * @type {Phaser.Game}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * A reference to the Texture Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#textureManager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.textureManager = null;\r\n\r\n        /**\r\n         * The global time scale of the Animation Manager.\r\n         *\r\n         * This scales the time delta between two frames, thus influencing the speed of time for the Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#globalTimeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.globalTimeScale = 1;\r\n\r\n        /**\r\n         * The Animations registered in the Animation Manager.\r\n         *\r\n         * This map should be modified with the {@link #add} and {@link #create} methods of the Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#anims\r\n         * @type {Phaser.Structs.Map.<string, Phaser.Animations.Animation>}\r\n         * @protected\r\n         * @since 3.0.0\r\n         */\r\n        this.anims = new CustomMap();\r\n\r\n        /**\r\n         * Whether the Animation Manager is paused along with all of its Animations.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * The name of this Animation Manager.\r\n         *\r\n         * @name Phaser.Animations.AnimationManager#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'AnimationManager';\r\n\r\n        game.events.once(GameEvents.BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * Registers event listeners after the Game boots.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#boot\r\n     * @listens Phaser.Core.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.textureManager = this.game.textures;\r\n\r\n        this.game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Animation to the Animation Manager.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#add\r\n     * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key under which the Animation should be added. The Animation will be updated with it. Must be unique.\r\n     * @param {Phaser.Animations.Animation} animation - The Animation which should be added to the Animation Manager.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    add: function (key, animation)\r\n    {\r\n        if (this.anims.has(key))\r\n        {\r\n            console.warn('Animation key exists: ' + key);\r\n\r\n            return;\r\n        }\r\n\r\n        animation.key = key;\r\n\r\n        this.anims.set(key, animation);\r\n\r\n        this.emit(Events.ADD_ANIMATION, key, animation);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the given key is already in use within the Animation Manager or not.\r\n     * \r\n     * Animations are global. Keys created in one scene can be used from any other Scene in your game. They are not Scene specific.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#exists\r\n     * @since 3.16.0\r\n     *\r\n     * @param {string} key - The key of the Animation to check.\r\n     *\r\n     * @return {boolean} `true` if the Animation already exists in the Animation Manager, or `false` if the key is available.\r\n     */\r\n    exists: function (key)\r\n    {\r\n        return this.anims.has(key);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Animation and adds it to the Animation Manager.\r\n     * \r\n     * Animations are global. Once created, you can use them in any Scene in your game. They are not Scene specific.\r\n     * \r\n     * If an invalid key is given this method will return `false`.\r\n     * \r\n     * If you pass the key of an animation that already exists in the Animation Manager, that animation will be returned.\r\n     * \r\n     * A brand new animation is only created if the key is valid and not already in use.\r\n     * \r\n     * If you wish to re-use an existing key, call `AnimationManager.remove` first, then this method.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#create\r\n     * @fires Phaser.Animations.Events#ADD_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Animations.Animation} config - The configuration settings for the Animation.\r\n     *\r\n     * @return {(Phaser.Animations.Animation|false)} The Animation that was created, or `false` is the key is already in use.\r\n     */\r\n    create: function (config)\r\n    {\r\n        var key = config.key;\r\n\r\n        var anim = false;\r\n\r\n        if (key)\r\n        {\r\n            anim = this.get(key);\r\n\r\n            if (!anim)\r\n            {\r\n                anim = new Animation(this, key, config);\r\n\r\n                this.anims.set(key, anim);\r\n        \r\n                this.emit(Events.ADD_ANIMATION, key, anim);\r\n            }\r\n        }\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * Loads this Animation Manager's Animations and settings from a JSON object.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Animations.JSONAnimations|Phaser.Types.Animations.JSONAnimation)} data - The JSON object to parse.\r\n     * @param {boolean} [clearCurrentAnimations=false] - If set to `true`, the current animations will be removed (`anims.clear()`). If set to `false` (default), the animations in `data` will be added.\r\n     *\r\n     * @return {Phaser.Animations.Animation[]} An array containing all of the Animation objects that were created as a result of this call.\r\n     */\r\n    fromJSON: function (data, clearCurrentAnimations)\r\n    {\r\n        if (clearCurrentAnimations === undefined) { clearCurrentAnimations = false; }\r\n\r\n        if (clearCurrentAnimations)\r\n        {\r\n            this.anims.clear();\r\n        }\r\n\r\n        //  Do we have a String (i.e. from JSON, or an Object?)\r\n        if (typeof data === 'string')\r\n        {\r\n            data = JSON.parse(data);\r\n        }\r\n\r\n        var output = [];\r\n\r\n        //  Array of animations, or a single animation?\r\n        if (data.hasOwnProperty('anims') && Array.isArray(data.anims))\r\n        {\r\n            for (var i = 0; i < data.anims.length; i++)\r\n            {\r\n                output.push(this.create(data.anims[i]));\r\n            }\r\n\r\n            if (data.hasOwnProperty('globalTimeScale'))\r\n            {\r\n                this.globalTimeScale = data.globalTimeScale;\r\n            }\r\n        }\r\n        else if (data.hasOwnProperty('key') && data.type === 'frame')\r\n        {\r\n            output.push(this.create(data));\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {Phaser.Types.Animations.GenerateFrameNames} [config] - The configuration object for the animation frame names.\r\n     *\r\n     * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n     */\r\n    generateFrameNames: function (key, config)\r\n    {\r\n        var prefix = GetValue(config, 'prefix', '');\r\n        var start = GetValue(config, 'start', 0);\r\n        var end = GetValue(config, 'end', 0);\r\n        var suffix = GetValue(config, 'suffix', '');\r\n        var zeroPad = GetValue(config, 'zeroPad', 0);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        var diff = (start < end) ? 1 : -1;\r\n\r\n        //  Adjust because we use i !== end in the for loop\r\n        end += diff;\r\n\r\n        var i;\r\n        var frame;\r\n\r\n        if (!config)\r\n        {\r\n            //  Use every frame in the atlas?\r\n            frames = texture.getFrameNames();\r\n\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                out.push({ key: key, frame: frames[i] });\r\n            }\r\n        }\r\n        else if (Array.isArray(frames))\r\n        {\r\n            //  Have they provided their own custom frame sequence array?\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                frame = prefix + Pad(frames[i], zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = start; i !== end; i += diff)\r\n            {\r\n                frame = prefix + Pad(i, zeroPad, '0', 1) + suffix;\r\n\r\n                if (texture.has(frame))\r\n                {\r\n                    out.push({ key: key, frame: frame });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Generate an array of {@link Phaser.Types.Animations.AnimationFrame} objects from a texture key and configuration object.\r\n     *\r\n     * Generates objects with numbered frame names, as configured by the given {@link Phaser.Types.Animations.GenerateFrameNumbers}.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#generateFrameNumbers\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key for the texture containing the animation frames.\r\n     * @param {Phaser.Types.Animations.GenerateFrameNumbers} config - The configuration object for the animation frames.\r\n     *\r\n     * @return {Phaser.Types.Animations.AnimationFrame[]} The array of {@link Phaser.Types.Animations.AnimationFrame} objects.\r\n     */\r\n    generateFrameNumbers: function (key, config)\r\n    {\r\n        var startFrame = GetValue(config, 'start', 0);\r\n        var endFrame = GetValue(config, 'end', -1);\r\n        var firstFrame = GetValue(config, 'first', false);\r\n        var out = GetValue(config, 'outputArray', []);\r\n        var frames = GetValue(config, 'frames', false);\r\n\r\n        var texture = this.textureManager.get(key);\r\n\r\n        if (!texture)\r\n        {\r\n            return out;\r\n        }\r\n\r\n        if (firstFrame && texture.has(firstFrame))\r\n        {\r\n            out.push({ key: key, frame: firstFrame });\r\n        }\r\n\r\n        var i;\r\n\r\n        //  Have they provided their own custom frame sequence array?\r\n        if (Array.isArray(frames))\r\n        {\r\n            for (i = 0; i < frames.length; i++)\r\n            {\r\n                if (texture.has(frames[i]))\r\n                {\r\n                    out.push({ key: key, frame: frames[i] });\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  No endFrame then see if we can get it\r\n            if (endFrame === -1)\r\n            {\r\n                endFrame = texture.frameTotal;\r\n            }\r\n\r\n            var diff = (startFrame < endFrame) ? 1 : -1;\r\n\r\n            //  Adjust because we use i !== end in the for loop\r\n            endFrame += diff;\r\n\r\n            for (i = startFrame; i !== endFrame; i += diff)\r\n            {\r\n                if (texture.has(i))\r\n                {\r\n                    out.push({ key: key, frame: i });\r\n                }\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Get an Animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the Animation to retrieve.\r\n     *\r\n     * @return {Phaser.Animations.Animation} The Animation.\r\n     */\r\n    get: function (key)\r\n    {\r\n        return this.anims.get(key);\r\n    },\r\n\r\n    /**\r\n     * Load an Animation into a Game Object's Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#load\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - The Game Object to load the animation into.\r\n     * @param {string} key - The key of the animation to load.\r\n     * @param {(string|integer)} [startFrame] - The name of a start frame to set on the loaded animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object with the animation loaded into it.\r\n     */\r\n    load: function (child, key, startFrame)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            anim.load(child, startFrame);\r\n        }\r\n        else\r\n        {\r\n            console.warn('Missing animation: ' + key);\r\n        }\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * Pause all animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#pauseAll\r\n     * @fires Phaser.Animations.Events#PAUSE_ALL\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        if (!this.paused)\r\n        {\r\n            this.paused = true;\r\n\r\n            this.emit(Events.PAUSE_ALL);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Play an animation on the given Game Objects that have an Animation Component.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Object.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} child - The Game Objects to play the animation on.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    play: function (key, child)\r\n    {\r\n        if (!Array.isArray(child))\r\n        {\r\n            child = [ child ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < child.length; i++)\r\n        {\r\n            child[i].anims.play(key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Remove an animation.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#remove\r\n     * @fires Phaser.Animations.Events#REMOVE_ANIMATION\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to remove.\r\n     *\r\n     * @return {Phaser.Animations.Animation} [description]\r\n     */\r\n    remove: function (key)\r\n    {\r\n        var anim = this.get(key);\r\n\r\n        if (anim)\r\n        {\r\n            this.emit(Events.REMOVE_ANIMATION, key, anim);\r\n\r\n            this.anims.delete(key);\r\n        }\r\n\r\n        return anim;\r\n    },\r\n\r\n    /**\r\n     * Resume all paused animations.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#resumeAll\r\n     * @fires Phaser.Animations.Events#RESUME_ALL\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        if (this.paused)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.emit(Events.RESUME_ALL);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array of Game Objects that have an Animation Component and then\r\n     * starts the given animation playing on them, each one offset by the\r\n     * `stagger` amount given to this method.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#staggerPlay\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n     *\r\n     * @param {string} key - The key of the animation to play on the Game Objects.\r\n     * @param {Phaser.GameObjects.GameObject|Phaser.GameObjects.GameObject[]} children - An array of Game Objects to play the animation on. They must have an Animation Component.\r\n     * @param {number} [stagger=0] - The amount of time, in milliseconds, to offset each play time by.\r\n     *\r\n     * @return {Phaser.Animations.AnimationManager} This Animation Manager.\r\n     */\r\n    staggerPlay: function (key, children, stagger)\r\n    {\r\n        if (stagger === undefined) { stagger = 0; }\r\n\r\n        if (!Array.isArray(children))\r\n        {\r\n            children = [ children ];\r\n        }\r\n\r\n        var anim = this.get(key);\r\n\r\n        if (!anim)\r\n        {\r\n            return;\r\n        }\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].anims.delayedPlay(stagger * i, key);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Get the animation data as javascript object by giving key, or get the data of all animations as array of objects, if key wasn't provided.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - [description]\r\n     *\r\n     * @return {Phaser.Types.Animations.JSONAnimations} [description]\r\n     */\r\n    toJSON: function (key)\r\n    {\r\n        if (key !== undefined && key !== '')\r\n        {\r\n            return this.anims.get(key).toJSON();\r\n        }\r\n        else\r\n        {\r\n            var output = {\r\n                anims: [],\r\n                globalTimeScale: this.globalTimeScale\r\n            };\r\n\r\n            this.anims.each(function (animationKey, animation)\r\n            {\r\n                output.anims.push(animation.toJSON());\r\n            });\r\n\r\n            return output;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroy this Animation Manager and clean up animation definitions and references to other objects.\r\n     * This method should not be called directly. It will be called automatically as a response to a `destroy` event from the Phaser.Game instance.\r\n     *\r\n     * @method Phaser.Animations.AnimationManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.anims.clear();\r\n\r\n        this.textureManager = null;\r\n\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = AnimationManager;\r\n"]},"metadata":{},"sourceType":"script"}