{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ArrayRemove = require('../utils/array/Remove');\n\nvar Class = require('../utils/Class');\n\nvar NumberTweenBuilder = require('./builders/NumberTweenBuilder');\n\nvar PluginCache = require('../plugins/PluginCache');\n\nvar SceneEvents = require('../scene/events');\n\nvar StaggerBuilder = require('./builders/StaggerBuilder');\n\nvar TimelineBuilder = require('./builders/TimelineBuilder');\n\nvar TWEEN_CONST = require('./tween/const');\n\nvar TweenBuilder = require('./builders/TweenBuilder');\n/**\r\n * @classdesc\r\n * The Tween Manager is a default Scene Plugin which controls and updates Tweens and Timelines.\r\n *\r\n * @class TweenManager\r\n * @memberof Phaser.Tweens\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Tween Manager.\r\n */\n\n\nvar TweenManager = new Class({\n  initialize: function TweenManager(scene) {\n    /**\r\n     * The Scene which owns this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * The Systems object of the Scene which owns this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * The time scale of the Tween Manager.\r\n     *\r\n     * This value scales the time delta between two frames, thus influencing the speed of time for all Tweens owned by this Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * An array of Tweens and Timelines which will be added to the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_add\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._add = [];\n    /**\r\n     * An array of Tweens and Timelines pending to be later added to the Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_pending\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._pending = [];\n    /**\r\n     * An array of Tweens and Timelines which are still incomplete and are actively processed by the Tween Manager.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_active\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._active = [];\n    /**\r\n     * An array of Tweens and Timelines which will be removed from the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_destroy\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._destroy = [];\n    /**\r\n     * The number of Tweens and Timelines which need to be processed by the Tween Manager at the start of the frame.\r\n     *\r\n     * @name Phaser.Tweens.TweenManager#_toProcess\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._toProcess = 0;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.on(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n    this.timeScale = 1;\n  },\n\n  /**\r\n   * Create a Tween Timeline and return it, but do NOT add it to the active or pending Tween lists.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#createTimeline\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.TimelineBuilderConfig} [config] - The configuration object for the Timeline and its Tweens.\r\n   *\r\n   * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n   */\n  createTimeline: function (config) {\n    return TimelineBuilder(this, config);\n  },\n\n  /**\r\n   * Create a Tween Timeline and add it to the active Tween list/\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#timeline\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.TimelineBuilderConfig} [config] - The configuration object for the Timeline and its Tweens.\r\n   *\r\n   * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n   */\n  timeline: function (config) {\n    var timeline = TimelineBuilder(this, config);\n\n    if (!timeline.paused) {\n      this._add.push(timeline);\n\n      this._toProcess++;\n    }\n\n    return timeline;\n  },\n\n  /**\r\n   * Create a Tween and return it, but do NOT add it to the active or pending Tween lists.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The configuration object for the Tween.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Tween object.\r\n   */\n  create: function (config) {\n    return TweenBuilder(this, config);\n  },\n\n  /**\r\n   * Create a Tween and add it to the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The configuration object for the Tween.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Tween.\r\n   */\n  add: function (config) {\n    var tween = TweenBuilder(this, config);\n\n    this._add.push(tween);\n\n    this._toProcess++;\n    return tween;\n  },\n\n  /**\r\n   * Add an existing tween into the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to add.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n   */\n  existing: function (tween) {\n    this._add.push(tween);\n\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Create a Number Tween and add it to the active Tween list.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#addCounter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.NumberTweenBuilderConfig} config - The configuration object for the Number Tween.\r\n   *\r\n   * @return {Phaser.Tweens.Tween} The created Number Tween.\r\n   */\n  addCounter: function (config) {\n    var tween = NumberTweenBuilder(this, config);\n\n    this._add.push(tween);\n\n    this._toProcess++;\n    return tween;\n  },\n\n  /**\r\n   * Creates a Stagger function to be used by a Tween property.\r\n   * \r\n   * The stagger function will allow you to stagger changes to the value of the property across all targets of the tween.\r\n   * \r\n   * This is only worth using if the tween has multiple targets.\r\n   * \r\n   * The following will stagger the delay by 100ms across all targets of the tween, causing them to scale down to 0.2\r\n   * over the duration specified:\r\n   * \r\n   * ```javascript\r\n   * this.tweens.add({\r\n   *     targets: [ ... ],\r\n   *     scale: 0.2,\r\n   *     ease: 'linear',\r\n   *     duration: 1000,\r\n   *     delay: this.tweens.stagger(100)\r\n   * });\r\n   * ```\r\n   * \r\n   * The following will stagger the delay by 500ms across all targets of the tween using a 10 x 6 grid, staggering\r\n   * from the center out, using a cubic ease.\r\n   * \r\n   * ```javascript\r\n   * this.tweens.add({\r\n   *     targets: [ ... ],\r\n   *     scale: 0.2,\r\n   *     ease: 'linear',\r\n   *     duration: 1000,\r\n   *     delay: this.tweens.stagger(500, { grid: [ 10, 6 ], from: 'center', ease: 'cubic.out' })\r\n   * });\r\n   * ```\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#stagger\r\n   * @since 3.19.0\r\n   *\r\n   * @param {(number|number[])} value - The amount to stagger by, or an array containing two elements representing the min and max values to stagger between.\r\n   * @param {Phaser.Types.Tweens.StaggerConfig} config - The configuration object for the Stagger function.\r\n   *\r\n   * @return {function} The stagger function.\r\n   */\n  stagger: function (value, options) {\n    return StaggerBuilder(value, options);\n  },\n\n  /**\r\n   * Updates the Tween Manager's internal lists at the start of the frame.\r\n   *\r\n   * This method will return immediately if no changes have been indicated.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#preUpdate\r\n   * @since 3.0.0\r\n   */\n  preUpdate: function () {\n    if (this._toProcess === 0) {\n      //  Quick bail\n      return;\n    }\n\n    var list = this._destroy;\n    var active = this._active;\n    var pending = this._pending;\n    var i;\n    var tween; //  Clear the 'destroy' list\n\n    for (i = 0; i < list.length; i++) {\n      tween = list[i]; //  Remove from the 'active' array\n\n      var idx = active.indexOf(tween);\n\n      if (idx === -1) {\n        //  Not in the active array, is it in pending instead?\n        idx = pending.indexOf(tween);\n\n        if (idx > -1) {\n          tween.state = TWEEN_CONST.REMOVED;\n          pending.splice(idx, 1);\n        }\n      } else {\n        tween.state = TWEEN_CONST.REMOVED;\n        active.splice(idx, 1);\n      }\n    }\n\n    list.length = 0; //  Process the addition list\n    //  This stops callbacks and out of sync events from populating the active array mid-way during the update\n\n    list = this._add;\n\n    for (i = 0; i < list.length; i++) {\n      tween = list[i];\n\n      if (tween.state === TWEEN_CONST.PENDING_ADD) {\n        //  Return true if the Tween should be started right away, otherwise false\n        if (tween.init()) {\n          tween.play();\n\n          this._active.push(tween);\n        } else {\n          this._pending.push(tween);\n        }\n      }\n    }\n\n    list.length = 0;\n    this._toProcess = 0;\n  },\n\n  /**\r\n   * Updates all Tweens and Timelines of the Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestamp - The current time in milliseconds.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function (timestamp, delta) {\n    //  Process active tweens\n    var list = this._active;\n    var tween; //  Scale the delta\n\n    delta *= this.timeScale;\n\n    for (var i = 0; i < list.length; i++) {\n      tween = list[i]; //  If Tween.update returns 'true' then it means it has completed,\n      //  so move it to the destroy list\n\n      if (tween.update(timestamp, delta)) {\n        this._destroy.push(tween);\n\n        this._toProcess++;\n      }\n    }\n  },\n\n  /**\r\n   * Removes the given tween from the Tween Manager, regardless of its state (pending or active).\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#remove\r\n   * @since 3.17.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to be removed.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n   */\n  remove: function (tween) {\n    ArrayRemove(this._add, tween);\n    ArrayRemove(this._pending, tween);\n    ArrayRemove(this._active, tween);\n    ArrayRemove(this._destroy, tween);\n    tween.state = TWEEN_CONST.REMOVED;\n    return this;\n  },\n\n  /**\r\n   * Checks if a Tween or Timeline is active and adds it to the Tween Manager at the start of the frame if it isn't.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#makeActive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to check.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n   */\n  makeActive: function (tween) {\n    if (this._add.indexOf(tween) !== -1 || this._active.indexOf(tween) !== -1) {\n      return this;\n    }\n\n    var idx = this._pending.indexOf(tween);\n\n    if (idx !== -1) {\n      this._pending.splice(idx, 1);\n    }\n\n    this._add.push(tween);\n\n    tween.state = TWEEN_CONST.PENDING_ADD;\n    this._toProcess++;\n    return this;\n  },\n\n  /**\r\n   * Passes all Tweens to the given callback.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#each\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The function to call.\r\n   * @param {object} [scope] - The scope (`this` object) to call the function with.\r\n   * @param {...*} [args] - The arguments to pass into the function. Its first argument will always be the Tween currently being iterated.\r\n   */\n  each: function (callback, scope) {\n    var args = [null];\n\n    for (var i = 1; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    for (var texture in this.list) {\n      args[0] = this.list[texture];\n      callback.apply(scope, args);\n    }\n  },\n\n  /**\r\n   * Returns an array of all active Tweens and Timelines in the Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getAllTweens\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.Tween[]} A new array containing references to all active Tweens and Timelines.\r\n   */\n  getAllTweens: function () {\n    var list = this._active;\n    var output = [];\n\n    for (var i = 0; i < list.length; i++) {\n      output.push(list[i]);\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Returns the scale of the time delta for all Tweens and Timelines owned by this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getGlobalTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The scale of the time delta, usually 1.\r\n   */\n  getGlobalTimeScale: function () {\n    return this.timeScale;\n  },\n\n  /**\r\n   * Returns an array of all Tweens or Timelines in the Tween Manager which affect the given target or array of targets.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#getTweensOf\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n   *\r\n   * @return {Phaser.Tweens.Tween[]} A new array containing all Tweens and Timelines which affect the given target(s).\r\n   */\n  getTweensOf: function (target) {\n    var list = this._active;\n    var tween;\n    var output = [];\n    var i;\n\n    if (Array.isArray(target)) {\n      for (i = 0; i < list.length; i++) {\n        tween = list[i];\n\n        for (var t = 0; t < target.length; t++) {\n          if (tween.hasTarget(target[t])) {\n            output.push(tween);\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < list.length; i++) {\n        tween = list[i];\n\n        if (tween.hasTarget(target)) {\n          output.push(tween);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Checks if the given object is being affected by a playing Tween.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#isTweening\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} target - target Phaser.Tweens.Tween object\r\n   *\r\n   * @return {boolean} returns if target tween object is active or not\r\n   */\n  isTweening: function (target) {\n    var list = this._active;\n    var tween;\n\n    for (var i = 0; i < list.length; i++) {\n      tween = list[i];\n\n      if (tween.hasTarget(target) && tween.isPlaying()) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Stops all Tweens in this Tween Manager. They will be removed at the start of the frame.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#killAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  killAll: function () {\n    var tweens = this.getAllTweens();\n\n    for (var i = 0; i < tweens.length; i++) {\n      tweens[i].stop();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Stops all Tweens which affect the given target or array of targets. The Tweens will be removed from the Tween Manager at the start of the frame.\r\n   *\r\n   * @see {@link #getTweensOf}\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#killTweensOf\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  killTweensOf: function (target) {\n    var tweens = this.getTweensOf(target);\n\n    for (var i = 0; i < tweens.length; i++) {\n      tweens[i].stop();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Pauses all Tweens in this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#pauseAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  pauseAll: function () {\n    var list = this._active;\n\n    for (var i = 0; i < list.length; i++) {\n      list[i].pause();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Resumes all Tweens in this Tween Manager.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#resumeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  resumeAll: function () {\n    var list = this._active;\n\n    for (var i = 0; i < list.length; i++) {\n      list[i].resume();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets a new scale of the time delta for this Tween Manager.\r\n   *\r\n   * The time delta is the time elapsed between two consecutive frames and influences the speed of time for this Tween Manager and all Tweens it owns. Values higher than 1 increase the speed of time, while values smaller than 1 decrease it. A value of 0 freezes time and is effectively equivalent to pausing all Tweens.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#setGlobalTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The new scale of the time delta, where 1 is the normal speed.\r\n   *\r\n   * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n   */\n  setGlobalTimeScale: function (value) {\n    this.timeScale = value;\n    return this;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    this.killAll();\n    this._add = [];\n    this._pending = [];\n    this._active = [];\n    this._destroy = [];\n    this._toProcess = 0;\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.PRE_UPDATE, this.preUpdate, this);\n    eventEmitter.off(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Tweens.TweenManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('TweenManager', TweenManager, 'tweens');\nmodule.exports = TweenManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/TweenManager.js"],"names":["ArrayRemove","require","Class","NumberTweenBuilder","PluginCache","SceneEvents","StaggerBuilder","TimelineBuilder","TWEEN_CONST","TweenBuilder","TweenManager","initialize","scene","systems","sys","timeScale","_add","_pending","_active","_destroy","_toProcess","events","once","BOOT","boot","on","START","start","DESTROY","destroy","eventEmitter","PRE_UPDATE","preUpdate","UPDATE","update","SHUTDOWN","shutdown","createTimeline","config","timeline","paused","push","create","add","tween","existing","addCounter","stagger","value","options","list","active","pending","i","length","idx","indexOf","state","REMOVED","splice","PENDING_ADD","init","play","timestamp","delta","remove","makeActive","each","callback","scope","args","arguments","texture","apply","getAllTweens","output","getGlobalTimeScale","getTweensOf","target","Array","isArray","t","hasTarget","isTweening","isPlaying","killAll","tweens","stop","killTweensOf","pauseAll","pause","resumeAll","resume","setGlobalTimeScale","off","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ArrayRemove = require('../utils/array/Remove');\r\nvar Class = require('../utils/Class');\r\nvar NumberTweenBuilder = require('./builders/NumberTweenBuilder');\r\nvar PluginCache = require('../plugins/PluginCache');\r\nvar SceneEvents = require('../scene/events');\r\nvar StaggerBuilder = require('./builders/StaggerBuilder');\r\nvar TimelineBuilder = require('./builders/TimelineBuilder');\r\nvar TWEEN_CONST = require('./tween/const');\r\nvar TweenBuilder = require('./builders/TweenBuilder');\r\n\r\n/**\r\n * @classdesc\r\n * The Tween Manager is a default Scene Plugin which controls and updates Tweens and Timelines.\r\n *\r\n * @class TweenManager\r\n * @memberof Phaser.Tweens\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene which owns this Tween Manager.\r\n */\r\nvar TweenManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function TweenManager (scene)\r\n    {\r\n        /**\r\n         * The Scene which owns this Tween Manager.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * The Systems object of the Scene which owns this Tween Manager.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * The time scale of the Tween Manager.\r\n         *\r\n         * This value scales the time delta between two frames, thus influencing the speed of time for all Tweens owned by this Tween Manager.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * An array of Tweens and Timelines which will be added to the Tween Manager at the start of the frame.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#_add\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._add = [];\r\n\r\n        /**\r\n         * An array of Tweens and Timelines pending to be later added to the Tween Manager.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#_pending\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._pending = [];\r\n\r\n        /**\r\n         * An array of Tweens and Timelines which are still incomplete and are actively processed by the Tween Manager.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#_active\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._active = [];\r\n\r\n        /**\r\n         * An array of Tweens and Timelines which will be removed from the Tween Manager at the start of the frame.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#_destroy\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._destroy = [];\r\n\r\n        /**\r\n         * The number of Tweens and Timelines which need to be processed by the Tween Manager at the start of the frame.\r\n         *\r\n         * @name Phaser.Tweens.TweenManager#_toProcess\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._toProcess = 0;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.PRE_UPDATE, this.preUpdate, this);\r\n        eventEmitter.on(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        this.timeScale = 1;\r\n    },\r\n\r\n    /**\r\n     * Create a Tween Timeline and return it, but do NOT add it to the active or pending Tween lists.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#createTimeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.TimelineBuilderConfig} [config] - The configuration object for the Timeline and its Tweens.\r\n     *\r\n     * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n     */\r\n    createTimeline: function (config)\r\n    {\r\n        return TimelineBuilder(this, config);\r\n    },\r\n\r\n    /**\r\n     * Create a Tween Timeline and add it to the active Tween list/\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#timeline\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.TimelineBuilderConfig} [config] - The configuration object for the Timeline and its Tweens.\r\n     *\r\n     * @return {Phaser.Tweens.Timeline} The created Timeline object.\r\n     */\r\n    timeline: function (config)\r\n    {\r\n        var timeline = TimelineBuilder(this, config);\r\n\r\n        if (!timeline.paused)\r\n        {\r\n            this._add.push(timeline);\r\n\r\n            this._toProcess++;\r\n        }\r\n\r\n        return timeline;\r\n    },\r\n\r\n    /**\r\n     * Create a Tween and return it, but do NOT add it to the active or pending Tween lists.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The configuration object for the Tween.\r\n     *\r\n     * @return {Phaser.Tweens.Tween} The created Tween object.\r\n     */\r\n    create: function (config)\r\n    {\r\n        return TweenBuilder(this, config);\r\n    },\r\n\r\n    /**\r\n     * Create a Tween and add it to the active Tween list.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The configuration object for the Tween.\r\n     *\r\n     * @return {Phaser.Tweens.Tween} The created Tween.\r\n     */\r\n    add: function (config)\r\n    {\r\n        var tween = TweenBuilder(this, config);\r\n\r\n        this._add.push(tween);\r\n\r\n        this._toProcess++;\r\n\r\n        return tween;\r\n    },\r\n\r\n    /**\r\n     * Add an existing tween into the active Tween list.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to add.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n     */\r\n    existing: function (tween)\r\n    {\r\n        this._add.push(tween);\r\n\r\n        this._toProcess++;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Create a Number Tween and add it to the active Tween list.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#addCounter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.NumberTweenBuilderConfig} config - The configuration object for the Number Tween.\r\n     *\r\n     * @return {Phaser.Tweens.Tween} The created Number Tween.\r\n     */\r\n    addCounter: function (config)\r\n    {\r\n        var tween = NumberTweenBuilder(this, config);\r\n\r\n        this._add.push(tween);\r\n\r\n        this._toProcess++;\r\n\r\n        return tween;\r\n    },\r\n\r\n    /**\r\n     * Creates a Stagger function to be used by a Tween property.\r\n     * \r\n     * The stagger function will allow you to stagger changes to the value of the property across all targets of the tween.\r\n     * \r\n     * This is only worth using if the tween has multiple targets.\r\n     * \r\n     * The following will stagger the delay by 100ms across all targets of the tween, causing them to scale down to 0.2\r\n     * over the duration specified:\r\n     * \r\n     * ```javascript\r\n     * this.tweens.add({\r\n     *     targets: [ ... ],\r\n     *     scale: 0.2,\r\n     *     ease: 'linear',\r\n     *     duration: 1000,\r\n     *     delay: this.tweens.stagger(100)\r\n     * });\r\n     * ```\r\n     * \r\n     * The following will stagger the delay by 500ms across all targets of the tween using a 10 x 6 grid, staggering\r\n     * from the center out, using a cubic ease.\r\n     * \r\n     * ```javascript\r\n     * this.tweens.add({\r\n     *     targets: [ ... ],\r\n     *     scale: 0.2,\r\n     *     ease: 'linear',\r\n     *     duration: 1000,\r\n     *     delay: this.tweens.stagger(500, { grid: [ 10, 6 ], from: 'center', ease: 'cubic.out' })\r\n     * });\r\n     * ```\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#stagger\r\n     * @since 3.19.0\r\n     *\r\n     * @param {(number|number[])} value - The amount to stagger by, or an array containing two elements representing the min and max values to stagger between.\r\n     * @param {Phaser.Types.Tweens.StaggerConfig} config - The configuration object for the Stagger function.\r\n     *\r\n     * @return {function} The stagger function.\r\n     */\r\n    stagger: function (value, options)\r\n    {\r\n        return StaggerBuilder(value, options);\r\n    },\r\n\r\n    /**\r\n     * Updates the Tween Manager's internal lists at the start of the frame.\r\n     *\r\n     * This method will return immediately if no changes have been indicated.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#preUpdate\r\n     * @since 3.0.0\r\n     */\r\n    preUpdate: function ()\r\n    {\r\n        if (this._toProcess === 0)\r\n        {\r\n            //  Quick bail\r\n            return;\r\n        }\r\n\r\n        var list = this._destroy;\r\n        var active = this._active;\r\n        var pending = this._pending;\r\n        var i;\r\n        var tween;\r\n\r\n        //  Clear the 'destroy' list\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            tween = list[i];\r\n\r\n            //  Remove from the 'active' array\r\n            var idx = active.indexOf(tween);\r\n\r\n            if (idx === -1)\r\n            {\r\n                //  Not in the active array, is it in pending instead?\r\n                idx = pending.indexOf(tween);\r\n\r\n                if (idx > -1)\r\n                {\r\n                    tween.state = TWEEN_CONST.REMOVED;\r\n                    pending.splice(idx, 1);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                tween.state = TWEEN_CONST.REMOVED;\r\n                active.splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        //  Process the addition list\r\n        //  This stops callbacks and out of sync events from populating the active array mid-way during the update\r\n\r\n        list = this._add;\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            tween = list[i];\r\n\r\n            if (tween.state === TWEEN_CONST.PENDING_ADD)\r\n            {\r\n                //  Return true if the Tween should be started right away, otherwise false\r\n                if (tween.init())\r\n                {\r\n                    tween.play();\r\n\r\n                    this._active.push(tween);\r\n                }\r\n                else\r\n                {\r\n                    this._pending.push(tween);\r\n                }\r\n            }\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        this._toProcess = 0;\r\n    },\r\n\r\n    /**\r\n     * Updates all Tweens and Timelines of the Tween Manager.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestamp - The current time in milliseconds.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (timestamp, delta)\r\n    {\r\n        //  Process active tweens\r\n        var list = this._active;\r\n        var tween;\r\n\r\n        //  Scale the delta\r\n        delta *= this.timeScale;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            tween = list[i];\r\n\r\n            //  If Tween.update returns 'true' then it means it has completed,\r\n            //  so move it to the destroy list\r\n            if (tween.update(timestamp, delta))\r\n            {\r\n                this._destroy.push(tween);\r\n                this._toProcess++;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Removes the given tween from the Tween Manager, regardless of its state (pending or active).\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#remove\r\n     * @since 3.17.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to be removed.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n     */\r\n    remove: function (tween)\r\n    {\r\n        ArrayRemove(this._add, tween);\r\n        ArrayRemove(this._pending, tween);\r\n        ArrayRemove(this._active, tween);\r\n        ArrayRemove(this._destroy, tween);\r\n\r\n        tween.state = TWEEN_CONST.REMOVED;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks if a Tween or Timeline is active and adds it to the Tween Manager at the start of the frame if it isn't.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#makeActive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to check.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager object.\r\n     */\r\n    makeActive: function (tween)\r\n    {\r\n        if (this._add.indexOf(tween) !== -1 || this._active.indexOf(tween) !== -1)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var idx = this._pending.indexOf(tween);\r\n\r\n        if (idx !== -1)\r\n        {\r\n            this._pending.splice(idx, 1);\r\n        }\r\n\r\n        this._add.push(tween);\r\n\r\n        tween.state = TWEEN_CONST.PENDING_ADD;\r\n\r\n        this._toProcess++;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Passes all Tweens to the given callback.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#each\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The function to call.\r\n     * @param {object} [scope] - The scope (`this` object) to call the function with.\r\n     * @param {...*} [args] - The arguments to pass into the function. Its first argument will always be the Tween currently being iterated.\r\n     */\r\n    each: function (callback, scope)\r\n    {\r\n        var args = [ null ];\r\n\r\n        for (var i = 1; i < arguments.length; i++)\r\n        {\r\n            args.push(arguments[i]);\r\n        }\r\n\r\n        for (var texture in this.list)\r\n        {\r\n            args[0] = this.list[texture];\r\n\r\n            callback.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all active Tweens and Timelines in the Tween Manager.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#getAllTweens\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tweens.Tween[]} A new array containing references to all active Tweens and Timelines.\r\n     */\r\n    getAllTweens: function ()\r\n    {\r\n        var list = this._active;\r\n        var output = [];\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            output.push(list[i]);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Returns the scale of the time delta for all Tweens and Timelines owned by this Tween Manager.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#getGlobalTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The scale of the time delta, usually 1.\r\n     */\r\n    getGlobalTimeScale: function ()\r\n    {\r\n        return this.timeScale;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all Tweens or Timelines in the Tween Manager which affect the given target or array of targets.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#getTweensOf\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n     *\r\n     * @return {Phaser.Tweens.Tween[]} A new array containing all Tweens and Timelines which affect the given target(s).\r\n     */\r\n    getTweensOf: function (target)\r\n    {\r\n        var list = this._active;\r\n        var tween;\r\n        var output = [];\r\n        var i;\r\n\r\n        if (Array.isArray(target))\r\n        {\r\n            for (i = 0; i < list.length; i++)\r\n            {\r\n                tween = list[i];\r\n\r\n                for (var t = 0; t < target.length; t++)\r\n                {\r\n                    if (tween.hasTarget(target[t]))\r\n                    {\r\n                        output.push(tween);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = 0; i < list.length; i++)\r\n            {\r\n                tween = list[i];\r\n\r\n                if (tween.hasTarget(target))\r\n                {\r\n                    output.push(tween);\r\n                }\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given object is being affected by a playing Tween.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#isTweening\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} target - target Phaser.Tweens.Tween object\r\n     *\r\n     * @return {boolean} returns if target tween object is active or not\r\n     */\r\n    isTweening: function (target)\r\n    {\r\n        var list = this._active;\r\n        var tween;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            tween = list[i];\r\n\r\n            if (tween.hasTarget(target) && tween.isPlaying())\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Stops all Tweens in this Tween Manager. They will be removed at the start of the frame.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#killAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n     */\r\n    killAll: function ()\r\n    {\r\n        var tweens = this.getAllTweens();\r\n\r\n        for (var i = 0; i < tweens.length; i++)\r\n        {\r\n            tweens[i].stop();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops all Tweens which affect the given target or array of targets. The Tweens will be removed from the Tween Manager at the start of the frame.\r\n     *\r\n     * @see {@link #getTweensOf}\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#killTweensOf\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(object|array)} target - The target to look for. Provide an array to look for multiple targets.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n     */\r\n    killTweensOf: function (target)\r\n    {\r\n        var tweens = this.getTweensOf(target);\r\n\r\n        for (var i = 0; i < tweens.length; i++)\r\n        {\r\n            tweens[i].stop();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Pauses all Tweens in this Tween Manager.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#pauseAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        var list = this._active;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            list[i].pause();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes all Tweens in this Tween Manager.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#resumeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        var list = this._active;\r\n\r\n        for (var i = 0; i < list.length; i++)\r\n        {\r\n            list[i].resume();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a new scale of the time delta for this Tween Manager.\r\n     *\r\n     * The time delta is the time elapsed between two consecutive frames and influences the speed of time for this Tween Manager and all Tweens it owns. Values higher than 1 increase the speed of time, while values smaller than 1 decrease it. A value of 0 freezes time and is effectively equivalent to pausing all Tweens.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#setGlobalTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The new scale of the time delta, where 1 is the normal speed.\r\n     *\r\n     * @return {Phaser.Tweens.TweenManager} This Tween Manager.\r\n     */\r\n    setGlobalTimeScale: function (value)\r\n    {\r\n        this.timeScale = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.killAll();\r\n\r\n        this._add = [];\r\n        this._pending = [];\r\n        this._active = [];\r\n        this._destroy = [];\r\n\r\n        this._toProcess = 0;\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.PRE_UPDATE, this.preUpdate, this);\r\n        eventEmitter.off(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Tweens.TweenManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('TweenManager', TweenManager, 'tweens');\r\n\r\nmodule.exports = TweenManager;\r\n"]},"metadata":{},"sourceType":"script"}