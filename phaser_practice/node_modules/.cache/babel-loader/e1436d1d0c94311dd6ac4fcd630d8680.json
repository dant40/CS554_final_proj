{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar Matrix4 = require('../../../src/math/Matrix4');\n\nvar RandomXYZ = require('../../../src/math/RandomXYZ');\n\nvar RandomXYZW = require('../../../src/math/RandomXYZW');\n\nvar RotateVec3 = require('../../../src/math/RotateVec3');\n\nvar Set = require('../../../src/structs/Set');\n\nvar Sprite3D = require('./sprite3d/Sprite3D');\n\nvar Vector2 = require('../../../src/math/Vector2');\n\nvar Vector3 = require('../../../src/math/Vector3');\n\nvar Vector4 = require('../../../src/math/Vector4'); //  Local cache vars\n\n\nvar tmpVec3 = new Vector3();\nvar tmpVec4 = new Vector4();\nvar dirvec = new Vector3();\nvar rightvec = new Vector3();\nvar billboardMatrix = new Matrix4(); //  @author attribute https://github.com/mattdesl/cam3d/wiki\n\n/**\r\n * @typedef {object} RayDef\r\n *\r\n * @property {Phaser.Math.Vector3} origin - [description]\r\n * @property {Phaser.Math.Vector3} direction - [description]\r\n */\n\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\nvar Camera = new Class({\n  initialize: function Camera(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#displayList\r\n     * @type {Phaser.GameObjects.DisplayList}\r\n     * @since 3.0.0\r\n     */\n\n    this.displayList = scene.sys.displayList;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#updateList\r\n     * @type {Phaser.GameObjects.UpdateList}\r\n     * @since 3.0.0\r\n     */\n\n    this.updateList = scene.sys.updateList;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#direction\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.direction = new Vector3(0, 0, -1);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#up\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.up = new Vector3(0, 1, 0);\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#position\r\n     * @type {Phaser.Math.Vector3}\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector3();\n    /**\r\n     *  The mapping from 3D size units to pixels.\r\n     *  In the default case 1 3D unit = 128 pixels. So a sprite that is\r\n     *  256 x 128 px in size will be 2 x 1 units.\r\n     *  Change to whatever best fits your game assets.\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#pixelScale\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.pixelScale = 128;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#projection\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.projection = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#view\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.view = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#combined\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.combined = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#invProjectionView\r\n     * @type {Phaser.Math.Matrix4}\r\n     * @since 3.0.0\r\n     */\n\n    this.invProjectionView = new Matrix4();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#near\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.near = 1;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#far\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.far = 100;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#ray\r\n     * @type {RayDef}\r\n     * @since 3.0.0\r\n     */\n\n    this.ray = {\n      origin: new Vector3(),\n      direction: new Vector3()\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#viewportWidth\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportWidth = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#viewportHeight\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.viewportHeight = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#billboardMatrixDirty\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.billboardMatrixDirty = true;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D#children\r\n     * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n     * @since 3.0.0\r\n     */\n\n    this.children = new Set();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   * @param {number} z - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setPosition: function (x, y, z) {\n    this.position.set(x, y, z);\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setScene\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Scene} scene - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setScene: function (scene) {\n    this.scene = scene;\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setPixelScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setPixelScale: function (value) {\n    this.pixelScale = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Sprite3D} sprite3D - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} [description]\r\n   */\n  add: function (sprite3D) {\n    this.children.set(sprite3D);\n    this.displayList.add(sprite3D.gameObject);\n    this.updateList.add(sprite3D.gameObject);\n    this.updateChildren();\n    return sprite3D;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} child - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  remove: function (child) {\n    this.displayList.remove(child.gameObject);\n    this.updateList.remove(child.gameObject);\n    this.children.delete(child);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  clear: function () {\n    var children = this.getChildren();\n\n    for (var i = 0; i < children.length; i++) {\n      this.remove(children[i]);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @return {array} [description]\r\n   */\n  getChildren: function () {\n    return this.children.entries;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   * @param {number} z - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} frame - [description]\r\n   * @param {boolean} [visible=true] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} [description]\r\n   */\n  create: function (x, y, z, key, frame, visible) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    var child = new Sprite3D(this.scene, x, y, z, key, frame);\n    this.displayList.add(child.gameObject);\n    this.updateList.add(child.gameObject);\n    child.visible = visible;\n    this.children.set(child);\n    this.updateChildren();\n    return child;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#createMultiple\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} quantity - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} frame - [description]\r\n   * @param {boolean} [visible=true] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n   */\n  createMultiple: function (quantity, key, frame, visible) {\n    if (visible === undefined) {\n      visible = true;\n    }\n\n    var output = [];\n\n    for (var i = 0; i < quantity; i++) {\n      var child = new Sprite3D(this.scene, 0, 0, 0, key, frame);\n      this.displayList.add(child.gameObject);\n      this.updateList.add(child.gameObject);\n      child.visible = visible;\n      this.children.set(child);\n      output.push(child);\n    }\n\n    return output;\n  },\n  //  Create a bunch of Sprite3D objects in a rectangle\n  //  size and spacing are Vec3s (or if integers are converted to vec3s)\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#createRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|{x:number,y:number})} size - [description]\r\n   * @param {(number|{x:number,y:number,z:number})} spacing - [description]\r\n   * @param {string} key - [description]\r\n   * @param {(string|number)} [frame] - [description]\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n   */\n  createRect: function (size, spacing, key, frame) {\n    if (typeof size === 'number') {\n      size = {\n        x: size,\n        y: size,\n        z: size\n      };\n    }\n\n    if (typeof spacing === 'number') {\n      spacing = {\n        x: spacing,\n        y: spacing,\n        z: spacing\n      };\n    }\n\n    var quantity = size.x * size.y * size.z;\n    var sprites = this.createMultiple(quantity, key, frame);\n    var i = 0;\n\n    for (var z = 0.5 - size.z / 2; z < size.z / 2; z++) {\n      for (var y = 0.5 - size.y / 2; y < size.y / 2; y++) {\n        for (var x = 0.5 - size.x / 2; x < size.x / 2; x++) {\n          var bx = x * spacing.x;\n          var by = y * spacing.y;\n          var bz = z * spacing.z;\n          sprites[i].position.set(bx, by, bz);\n          i++;\n        }\n      }\n    }\n\n    this.update();\n    return sprites;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#randomSphere\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [radius=1] - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  randomSphere: function (radius, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      RandomXYZ(sprites[i].position, radius);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#randomCube\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [scale=1] - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  randomCube: function (scale, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      RandomXYZW(sprites[i].position, scale);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#translateChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} vec3 - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  translateChildren: function (vec3, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      sprites[i].position.add(vec3);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#transformChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat4 - [description]\r\n   * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  transformChildren: function (mat4, sprites) {\n    if (sprites === undefined) {\n      sprites = this.getChildren();\n    }\n\n    for (var i = 0; i < sprites.length; i++) {\n      sprites[i].position.transformMat4(mat4);\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * Sets the width and height of the viewport. Does not update any matrices.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setViewport\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - [description]\r\n   * @param {number} height - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setViewport: function (width, height) {\n    this.viewportWidth = width;\n    this.viewportHeight = height;\n    return this.update();\n  },\n\n  /**\r\n   * Translates this camera by a specified Vector3 object\r\n   * or x, y, z parameters. Any undefined x y z values will\r\n   * default to zero, leaving that component unaffected.\r\n   * If you wish to set the camera position directly call setPosition instead.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - [description]\r\n   * @param {number} [y] - [description]\r\n   * @param {number} [z] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  translate: function (x, y, z) {\n    if (typeof x === 'object') {\n      this.position.x += x.x || 0;\n      this.position.y += x.y || 0;\n      this.position.z += x.z || 0;\n    } else {\n      this.position.x += x || 0;\n      this.position.y += y || 0;\n      this.position.z += z || 0;\n    }\n\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#lookAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - [description]\r\n   * @param {number} [y] - [description]\r\n   * @param {number} [z] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  lookAt: function (x, y, z) {\n    var dir = this.direction;\n    var up = this.up;\n\n    if (typeof x === 'object') {\n      dir.copy(x);\n    } else {\n      dir.set(x, y, z);\n    }\n\n    dir.subtract(this.position).normalize(); //  Calculate right vector\n\n    tmpVec3.copy(dir).cross(up).normalize(); //  Calculate up vector\n\n    up.copy(tmpVec3).cross(dir).normalize();\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - [description]\r\n   * @param {Phaser.Math.Vector3} axis - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  rotate: function (radians, axis) {\n    RotateVec3(this.direction, axis, radians);\n    RotateVec3(this.up, axis, radians);\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#rotateAround\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} point - [description]\r\n   * @param {number} radians - [description]\r\n   * @param {Phaser.Math.Vector3} axis - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  rotateAround: function (point, radians, axis) {\n    tmpVec3.copy(point).subtract(this.position);\n    this.translate(tmpVec3);\n    this.rotate(radians, axis);\n    this.translate(tmpVec3.negate());\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector3} vec - [description]\r\n   * @param {Phaser.Math.Vector4} out - [description]\r\n   *\r\n   * @return {Phaser.Math.Vector4} [description]\r\n   */\n  project: function (vec, out) {\n    if (out === undefined) {\n      out = new Vector4();\n    } //  TODO: support viewport XY\n\n\n    var viewportWidth = this.viewportWidth;\n    var viewportHeight = this.viewportHeight;\n    var n = Camera.NEAR_RANGE;\n    var f = Camera.FAR_RANGE; //  For useful Z and W values we should do the usual steps: clip space -> NDC -> window coords\n    //  Implicit 1.0 for w component\n\n    tmpVec4.set(vec.x, vec.y, vec.z, 1.0); //  Transform into clip space\n\n    tmpVec4.transformMat4(this.combined); //  Avoid divide by zero when 0x0x0 camera projects to a 0x0x0 vec3\n\n    if (tmpVec4.w === 0) {\n      tmpVec4.w = 1;\n    } //  Now into NDC\n\n\n    tmpVec4.x = tmpVec4.x / tmpVec4.w;\n    tmpVec4.y = tmpVec4.y / tmpVec4.w;\n    tmpVec4.z = tmpVec4.z / tmpVec4.w; //  And finally into window coordinates\n\n    out.x = viewportWidth / 2 * tmpVec4.x + (0 + viewportWidth / 2);\n    out.y = viewportHeight / 2 * tmpVec4.y + (0 + viewportHeight / 2);\n    out.z = (f - n) / 2 * tmpVec4.z + (f + n) / 2; //  If the out vector has a fourth component, we also store (1/clip.w), same idea as gl_FragCoord.w\n\n    if (out.w === 0 || out.w) {\n      out.w = 1 / tmpVec4.w;\n    }\n\n    return out;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#unproject\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} vec - [description]\r\n   * @param {Phaser.Math.Vector3} out - [description]\r\n   *\r\n   * @return {Phaser.Math.Vector3} [description]\r\n   */\n  unproject: function (vec, out) {\n    if (out === undefined) {\n      out = new Vector3();\n    }\n\n    var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\n    return out.copy(vec).unproject(viewport, this.invProjectionView);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getPickRay\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} [y] - [description]\r\n   *\r\n   * @return {RayDef} [description]\r\n   */\n  getPickRay: function (x, y) {\n    var origin = this.ray.origin.set(x, y, 0);\n    var direction = this.ray.direction.set(x, y, 1);\n    var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\n    var mtx = this.invProjectionView;\n    origin.unproject(viewport, mtx);\n    direction.unproject(viewport, mtx);\n    direction.subtract(origin).normalize();\n    return this.ray;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#updateChildren\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  updateChildren: function () {\n    var children = this.children.entries;\n\n    for (var i = 0; i < children.length; i++) {\n      children[i].project(this);\n    }\n\n    return this;\n  },\n  //  Overridden by subclasses\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#update\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  update: function () {\n    return this.updateChildren();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#updateBillboardMatrix\r\n   * @since 3.0.0\r\n   */\n  updateBillboardMatrix: function () {\n    var dir = dirvec.set(this.direction).negate(); // Better view-aligned billboards might use this:\n    // var dir = tmp.set(camera.position).subtract(p).normalize();\n\n    var right = rightvec.set(this.up).cross(dir).normalize();\n    var up = tmpVec3.set(dir).cross(right).normalize();\n    var out = billboardMatrix.val;\n    out[0] = right.x;\n    out[1] = right.y;\n    out[2] = right.z;\n    out[3] = 0;\n    out[4] = up.x;\n    out[5] = up.y;\n    out[6] = up.z;\n    out[7] = 0;\n    out[8] = dir.x;\n    out[9] = dir.y;\n    out[10] = dir.z;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    this.billboardMatrixDirty = false;\n  },\n\n  /**\r\n   * This is a utility function for canvas 3D rendering,\r\n   * which determines the \"point size\" of a camera-facing\r\n   * sprite billboard given its 3D world position\r\n   * (origin at center of sprite) and its world width\r\n   * and height in x/y.\r\n   *\r\n   * We place into the output Vector2 the scaled width\r\n   * and height. If no `out` is specified, a new Vector2\r\n   * will be created for convenience (this should be avoided\r\n   * in tight loops).\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#getPointSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector2} vec - The position of the 3D Sprite.\r\n   * @param {Phaser.Math.Vector2} size - The x and y dimensions.\r\n   * @param {Phaser.Math.Vector2} out - The result, scaled x and y dimensions.\r\n   *\r\n   * @return {Phaser.Math.Vector2} [description]\r\n   */\n  getPointSize: function (vec, size, out) {\n    if (out === undefined) {\n      out = new Vector2();\n    } // TODO: optimize this with a simple distance calculation:\n    // https://developer.valvesoftware.com/wiki/Field_of_View\n\n\n    if (this.billboardMatrixDirty) {\n      this.updateBillboardMatrix();\n    }\n\n    var tmp = tmpVec3;\n    var dx = size.x / this.pixelScale / 2;\n    var dy = size.y / this.pixelScale / 2;\n    tmp.set(-dx, -dy, 0).transformMat4(billboardMatrix).add(vec);\n    this.project(tmp, tmp);\n    var tlx = tmp.x;\n    var tly = tmp.y;\n    tmp.set(dx, dy, 0).transformMat4(billboardMatrix).add(vec);\n    this.project(tmp, tmp);\n    var brx = tmp.x;\n    var bry = tmp.y; // var w = Math.abs(brx - tlx);\n    // var h = Math.abs(bry - tly);\n    //  Allow the projection to get negative ...\n\n    var w = brx - tlx;\n    var h = bry - tly;\n    return out.set(w, h);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.children.clear();\n    this.scene = undefined;\n    this.children = undefined;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setX: function (value) {\n    this.position.x = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setY: function (value) {\n    this.position.y = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.Camera#setZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n   */\n  setZ: function (value) {\n    this.position.z = value;\n    return this.update();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function () {\n      return this.position.x;\n    },\n    set: function (value) {\n      this.position.x = value;\n      this.update();\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function () {\n      return this.position.y;\n    },\n    set: function (value) {\n      this.position.y = value;\n      this.update();\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @name Phaser.Cameras.Sprite3D.Camera#z\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  z: {\n    get: function () {\n      return this.position.z;\n    },\n    set: function (value) {\n      this.position.z = value;\n      this.update();\n    }\n  }\n});\nCamera.FAR_RANGE = 1.0;\nCamera.NEAR_RANGE = 0.0;\nmodule.exports = Camera;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/camera3d/src/Camera.js"],"names":["Class","require","Matrix4","RandomXYZ","RandomXYZW","RotateVec3","Set","Sprite3D","Vector2","Vector3","Vector4","tmpVec3","tmpVec4","dirvec","rightvec","billboardMatrix","Camera","initialize","scene","displayList","sys","updateList","name","direction","up","position","pixelScale","projection","view","combined","invProjectionView","near","far","ray","origin","viewportWidth","viewportHeight","billboardMatrixDirty","children","setPosition","x","y","z","set","update","setScene","setPixelScale","value","add","sprite3D","gameObject","updateChildren","remove","child","delete","clear","getChildren","i","length","entries","create","key","frame","visible","undefined","createMultiple","quantity","output","push","createRect","size","spacing","sprites","bx","by","bz","randomSphere","radius","randomCube","scale","translateChildren","vec3","transformChildren","mat4","transformMat4","setViewport","width","height","translate","lookAt","dir","copy","subtract","normalize","cross","rotate","radians","axis","rotateAround","point","negate","project","vec","out","n","NEAR_RANGE","f","FAR_RANGE","w","unproject","viewport","getPickRay","mtx","updateBillboardMatrix","right","val","getPointSize","tmp","dx","dy","tlx","tly","brx","bry","h","destroy","setX","setY","setZ","get","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar Matrix4 = require('../../../src/math/Matrix4');\r\nvar RandomXYZ = require('../../../src/math/RandomXYZ');\r\nvar RandomXYZW = require('../../../src/math/RandomXYZW');\r\nvar RotateVec3 = require('../../../src/math/RotateVec3');\r\nvar Set = require('../../../src/structs/Set');\r\nvar Sprite3D = require('./sprite3d/Sprite3D');\r\nvar Vector2 = require('../../../src/math/Vector2');\r\nvar Vector3 = require('../../../src/math/Vector3');\r\nvar Vector4 = require('../../../src/math/Vector4');\r\n\r\n//  Local cache vars\r\nvar tmpVec3 = new Vector3();\r\nvar tmpVec4 = new Vector4();\r\nvar dirvec = new Vector3();\r\nvar rightvec = new Vector3();\r\nvar billboardMatrix = new Matrix4();\r\n\r\n//  @author attribute https://github.com/mattdesl/cam3d/wiki\r\n\r\n/**\r\n * @typedef {object} RayDef\r\n *\r\n * @property {Phaser.Math.Vector3} origin - [description]\r\n * @property {Phaser.Math.Vector3} direction - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class Camera\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar Camera = new Class({\r\n\r\n    initialize:\r\n\r\n    function Camera (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#displayList\r\n         * @type {Phaser.GameObjects.DisplayList}\r\n         * @since 3.0.0\r\n         */\r\n        this.displayList = scene.sys.displayList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#updateList\r\n         * @type {Phaser.GameObjects.UpdateList}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateList = scene.sys.updateList;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#direction\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.direction = new Vector3(0, 0, -1);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#up\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.up = new Vector3(0, 1, 0);\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#position\r\n         * @type {Phaser.Math.Vector3}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector3();\r\n\r\n\r\n        /**\r\n         *  The mapping from 3D size units to pixels.\r\n         *  In the default case 1 3D unit = 128 pixels. So a sprite that is\r\n         *  256 x 128 px in size will be 2 x 1 units.\r\n         *  Change to whatever best fits your game assets.\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#pixelScale\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.pixelScale = 128;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#projection\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.projection = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#view\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.view = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#combined\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.combined = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#invProjectionView\r\n         * @type {Phaser.Math.Matrix4}\r\n         * @since 3.0.0\r\n         */\r\n        this.invProjectionView = new Matrix4();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#near\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.near = 1;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#far\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.far = 100;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#ray\r\n         * @type {RayDef}\r\n         * @since 3.0.0\r\n         */\r\n        this.ray = {\r\n            origin: new Vector3(),\r\n            direction: new Vector3()\r\n        };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportWidth = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#viewportHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.viewportHeight = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#billboardMatrixDirty\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.billboardMatrixDirty = true;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D#children\r\n         * @type {Phaser.Structs.Set.<Phaser.GameObjects.GameObject>}\r\n         * @since 3.0.0\r\n         */\r\n        this.children = new Set();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPosition: function (x, y, z)\r\n    {\r\n        this.position.set(x, y, z);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setScene\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setScene: function (scene)\r\n    {\r\n        this.scene = scene;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setPixelScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setPixelScale: function (value)\r\n    {\r\n        this.pixelScale = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Sprite3D} sprite3D - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    add: function (sprite3D)\r\n    {\r\n        this.children.set(sprite3D);\r\n\r\n        this.displayList.add(sprite3D.gameObject);\r\n        this.updateList.add(sprite3D.gameObject);\r\n\r\n        this.updateChildren();\r\n\r\n        return sprite3D;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} child - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    remove: function (child)\r\n    {\r\n        this.displayList.remove(child.gameObject);\r\n        this.updateList.remove(child.gameObject);\r\n\r\n        this.children.delete(child);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        var children = this.getChildren();\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            this.remove(children[i]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {array} [description]\r\n     */\r\n    getChildren: function ()\r\n    {\r\n        return this.children.entries;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     * @param {number} z - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} [description]\r\n     */\r\n    create: function (x, y, z, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var child = new Sprite3D(this.scene, x, y, z, key, frame);\r\n\r\n        this.displayList.add(child.gameObject);\r\n        this.updateList.add(child.gameObject);\r\n\r\n        child.visible = visible;\r\n\r\n        this.children.set(child);\r\n\r\n        this.updateChildren();\r\n\r\n        return child;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createMultiple\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} quantity - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} frame - [description]\r\n     * @param {boolean} [visible=true] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createMultiple: function (quantity, key, frame, visible)\r\n    {\r\n        if (visible === undefined) { visible = true; }\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < quantity; i++)\r\n        {\r\n            var child = new Sprite3D(this.scene, 0, 0, 0, key, frame);\r\n\r\n            this.displayList.add(child.gameObject);\r\n            this.updateList.add(child.gameObject);\r\n\r\n            child.visible = visible;\r\n\r\n            this.children.set(child);\r\n\r\n            output.push(child);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    //  Create a bunch of Sprite3D objects in a rectangle\r\n    //  size and spacing are Vec3s (or if integers are converted to vec3s)\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#createRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|{x:number,y:number})} size - [description]\r\n     * @param {(number|{x:number,y:number,z:number})} spacing - [description]\r\n     * @param {string} key - [description]\r\n     * @param {(string|number)} [frame] - [description]\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D[]} [description]\r\n     */\r\n    createRect: function (size, spacing, key, frame)\r\n    {\r\n        if (typeof size === 'number') { size = { x: size, y: size, z: size }; }\r\n        if (typeof spacing === 'number') { spacing = { x: spacing, y: spacing, z: spacing }; }\r\n\r\n        var quantity = size.x * size.y * size.z;\r\n\r\n        var sprites = this.createMultiple(quantity, key, frame);\r\n\r\n        var i = 0;\r\n\r\n        for (var z = 0.5 - (size.z / 2); z < (size.z / 2); z++)\r\n        {\r\n            for (var y = 0.5 - (size.y / 2); y < (size.y / 2); y++)\r\n            {\r\n                for (var x = 0.5 - (size.x / 2); x < (size.x / 2); x++)\r\n                {\r\n                    var bx = (x * spacing.x);\r\n                    var by = (y * spacing.y);\r\n                    var bz = (z * spacing.z);\r\n\r\n                    sprites[i].position.set(bx, by, bz);\r\n\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.update();\r\n\r\n        return sprites;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomSphere\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [radius=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomSphere: function (radius, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZ(sprites[i].position, radius);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#randomCube\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [scale=1] - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} [sprites] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    randomCube: function (scale, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            RandomXYZW(sprites[i].position, scale);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec3 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translateChildren: function (vec3, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.add(vec3);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#transformChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat4 - [description]\r\n     * @param {Phaser.GameObjects.Sprite3D[]} sprites - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    transformChildren: function (mat4, sprites)\r\n    {\r\n        if (sprites === undefined) { sprites = this.getChildren(); }\r\n\r\n        for (var i = 0; i < sprites.length; i++)\r\n        {\r\n            sprites[i].position.transformMat4(mat4);\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Sets the width and height of the viewport. Does not update any matrices.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setViewport\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setViewport: function (width, height)\r\n    {\r\n        this.viewportWidth = width;\r\n        this.viewportHeight = height;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * Translates this camera by a specified Vector3 object\r\n     * or x, y, z parameters. Any undefined x y z values will\r\n     * default to zero, leaving that component unaffected.\r\n     * If you wish to set the camera position directly call setPosition instead.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    translate: function (x, y, z)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.position.x += x.x || 0;\r\n            this.position.y += x.y || 0;\r\n            this.position.z += x.z || 0;\r\n        }\r\n        else\r\n        {\r\n            this.position.x += x || 0;\r\n            this.position.y += y || 0;\r\n            this.position.z += z || 0;\r\n        }\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#lookAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - [description]\r\n     * @param {number} [y] - [description]\r\n     * @param {number} [z] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    lookAt: function (x, y, z)\r\n    {\r\n        var dir = this.direction;\r\n        var up = this.up;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            dir.copy(x);\r\n        }\r\n        else\r\n        {\r\n            dir.set(x, y, z);\r\n        }\r\n\r\n        dir.subtract(this.position).normalize();\r\n\r\n        //  Calculate right vector\r\n        tmpVec3.copy(dir).cross(up).normalize();\r\n\r\n        //  Calculate up vector\r\n        up.copy(tmpVec3).cross(dir).normalize();\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotate: function (radians, axis)\r\n    {\r\n        RotateVec3(this.direction, axis, radians);\r\n        RotateVec3(this.up, axis, radians);\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#rotateAround\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} point - [description]\r\n     * @param {number} radians - [description]\r\n     * @param {Phaser.Math.Vector3} axis - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    rotateAround: function (point, radians, axis)\r\n    {\r\n        tmpVec3.copy(point).subtract(this.position);\r\n\r\n        this.translate(tmpVec3);\r\n        this.rotate(radians, axis);\r\n        this.translate(tmpVec3.negate());\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector3} vec - [description]\r\n     * @param {Phaser.Math.Vector4} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector4} [description]\r\n     */\r\n    project: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector4(); }\r\n\r\n        //  TODO: support viewport XY\r\n        var viewportWidth = this.viewportWidth;\r\n        var viewportHeight = this.viewportHeight;\r\n        var n = Camera.NEAR_RANGE;\r\n        var f = Camera.FAR_RANGE;\r\n\r\n        //  For useful Z and W values we should do the usual steps: clip space -> NDC -> window coords\r\n\r\n        //  Implicit 1.0 for w component\r\n        tmpVec4.set(vec.x, vec.y, vec.z, 1.0);\r\n\r\n        //  Transform into clip space\r\n        tmpVec4.transformMat4(this.combined);\r\n\r\n        //  Avoid divide by zero when 0x0x0 camera projects to a 0x0x0 vec3\r\n        if (tmpVec4.w === 0)\r\n        {\r\n            tmpVec4.w = 1;\r\n        }\r\n\r\n        //  Now into NDC\r\n        tmpVec4.x = tmpVec4.x / tmpVec4.w;\r\n        tmpVec4.y = tmpVec4.y / tmpVec4.w;\r\n        tmpVec4.z = tmpVec4.z / tmpVec4.w;\r\n\r\n        //  And finally into window coordinates\r\n        out.x = viewportWidth / 2 * tmpVec4.x + (0 + viewportWidth / 2);\r\n        out.y = viewportHeight / 2 * tmpVec4.y + (0 + viewportHeight / 2);\r\n        out.z = (f - n) / 2 * tmpVec4.z + (f + n) / 2;\r\n\r\n        //  If the out vector has a fourth component, we also store (1/clip.w), same idea as gl_FragCoord.w\r\n        if (out.w === 0 || out.w)\r\n        {\r\n            out.w = 1 / tmpVec4.w;\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#unproject\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} vec - [description]\r\n     * @param {Phaser.Math.Vector3} out - [description]\r\n     *\r\n     * @return {Phaser.Math.Vector3} [description]\r\n     */\r\n    unproject: function (vec, out)\r\n    {\r\n        if (out === undefined) { out = new Vector3(); }\r\n\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n\r\n        return out.copy(vec).unproject(viewport, this.invProjectionView);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPickRay\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} [y] - [description]\r\n     *\r\n     * @return {RayDef} [description]\r\n     */\r\n    getPickRay: function (x, y)\r\n    {\r\n        var origin = this.ray.origin.set(x, y, 0);\r\n        var direction = this.ray.direction.set(x, y, 1);\r\n        var viewport = tmpVec4.set(0, 0, this.viewportWidth, this.viewportHeight);\r\n        var mtx = this.invProjectionView;\r\n\r\n        origin.unproject(viewport, mtx);\r\n\r\n        direction.unproject(viewport, mtx);\r\n\r\n        direction.subtract(origin).normalize();\r\n\r\n        return this.ray;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateChildren\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    updateChildren: function ()\r\n    {\r\n        var children = this.children.entries;\r\n\r\n        for (var i = 0; i < children.length; i++)\r\n        {\r\n            children[i].project(this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    //  Overridden by subclasses\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#update\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    update: function ()\r\n    {\r\n        return this.updateChildren();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#updateBillboardMatrix\r\n     * @since 3.0.0\r\n     */\r\n    updateBillboardMatrix: function ()\r\n    {\r\n        var dir = dirvec.set(this.direction).negate();\r\n\r\n        // Better view-aligned billboards might use this:\r\n        // var dir = tmp.set(camera.position).subtract(p).normalize();\r\n\r\n        var right = rightvec.set(this.up).cross(dir).normalize();\r\n        var up = tmpVec3.set(dir).cross(right).normalize();\r\n\r\n        var out = billboardMatrix.val;\r\n\r\n        out[0] = right.x;\r\n        out[1] = right.y;\r\n        out[2] = right.z;\r\n        out[3] = 0;\r\n\r\n        out[4] = up.x;\r\n        out[5] = up.y;\r\n        out[6] = up.z;\r\n        out[7] = 0;\r\n\r\n        out[8] = dir.x;\r\n        out[9] = dir.y;\r\n        out[10] = dir.z;\r\n        out[11] = 0;\r\n\r\n        out[12] = 0;\r\n        out[13] = 0;\r\n        out[14] = 0;\r\n        out[15] = 1;\r\n\r\n        this.billboardMatrixDirty = false;\r\n    },\r\n\r\n    /**\r\n     * This is a utility function for canvas 3D rendering,\r\n     * which determines the \"point size\" of a camera-facing\r\n     * sprite billboard given its 3D world position\r\n     * (origin at center of sprite) and its world width\r\n     * and height in x/y.\r\n     *\r\n     * We place into the output Vector2 the scaled width\r\n     * and height. If no `out` is specified, a new Vector2\r\n     * will be created for convenience (this should be avoided\r\n     * in tight loops).\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#getPointSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector2} vec - The position of the 3D Sprite.\r\n     * @param {Phaser.Math.Vector2} size - The x and y dimensions.\r\n     * @param {Phaser.Math.Vector2} out - The result, scaled x and y dimensions.\r\n     *\r\n     * @return {Phaser.Math.Vector2} [description]\r\n     */\r\n    getPointSize: function (vec, size, out)\r\n    {\r\n        if (out === undefined) { out = new Vector2(); }\r\n\r\n        // TODO: optimize this with a simple distance calculation:\r\n        // https://developer.valvesoftware.com/wiki/Field_of_View\r\n\r\n        if (this.billboardMatrixDirty)\r\n        {\r\n            this.updateBillboardMatrix();\r\n        }\r\n\r\n        var tmp = tmpVec3;\r\n\r\n        var dx = (size.x / this.pixelScale) / 2;\r\n        var dy = (size.y / this.pixelScale) / 2;\r\n\r\n        tmp.set(-dx, -dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var tlx = tmp.x;\r\n        var tly = tmp.y;\r\n\r\n        tmp.set(dx, dy, 0).transformMat4(billboardMatrix).add(vec);\r\n\r\n        this.project(tmp, tmp);\r\n\r\n        var brx = tmp.x;\r\n        var bry = tmp.y;\r\n\r\n        // var w = Math.abs(brx - tlx);\r\n        // var h = Math.abs(bry - tly);\r\n\r\n        //  Allow the projection to get negative ...\r\n        var w = brx - tlx;\r\n        var h = bry - tly;\r\n\r\n        return out.set(w, h);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.children.clear();\r\n\r\n        this.scene = undefined;\r\n        this.children = undefined;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setX: function (value)\r\n    {\r\n        this.position.x = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setY: function (value)\r\n    {\r\n        this.position.y = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.Camera#setZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.Camera} This Camera object.\r\n     */\r\n    setZ: function (value)\r\n    {\r\n        this.position.z = value;\r\n\r\n        return this.update();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n            this.update();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.Camera#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n});\r\n\r\nCamera.FAR_RANGE = 1.0;\r\nCamera.NEAR_RANGE = 0.0;\r\n\r\nmodule.exports = Camera;\r\n"]},"metadata":{},"sourceType":"script"}