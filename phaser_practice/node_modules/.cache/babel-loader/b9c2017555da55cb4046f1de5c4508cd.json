{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * @ignore\r\n */\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction defaultCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\r\n * A [Floyd-Rivest](https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm) quick selection algorithm.\r\n *\r\n * Rearranges the array items so that all items in the [left, k] range are smaller than all items in [k, right];\r\n * The k-th element will have the (k - left + 1)th smallest value in [left, right].\r\n *\r\n * The array is modified in-place.\r\n *\r\n * Based on code by [Vladimir Agafonkin](https://www.npmjs.com/~mourner)\r\n *\r\n * @function Phaser.Utils.Array.QuickSelect\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - The array to sort.\r\n * @param {integer} k - The k-th element index.\r\n * @param {integer} [left=0] - The index of the left part of the range.\r\n * @param {integer} [right] - The index of the right part of the range.\r\n * @param {function} [compare] - An optional comparison function. Is passed two elements and should return 0, 1 or -1.\r\n */\n\n\nvar QuickSelect = function (arr, k, left, right, compare) {\n  if (left === undefined) {\n    left = 0;\n  }\n\n  if (right === undefined) {\n    right = arr.length - 1;\n  }\n\n  if (compare === undefined) {\n    compare = defaultCompare;\n  }\n\n  while (right > left) {\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      QuickSelect(arr, k, newLeft, newRight, compare);\n    }\n\n    var t = arr[k];\n    var i = left;\n    var j = right;\n    swap(arr, left, k);\n\n    if (compare(arr[right], t) > 0) {\n      swap(arr, left, right);\n    }\n\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n\n      while (compare(arr[i], t) < 0) {\n        i++;\n      }\n\n      while (compare(arr[j], t) > 0) {\n        j--;\n      }\n    }\n\n    if (compare(arr[left], t) === 0) {\n      swap(arr, left, j);\n    } else {\n      j++;\n      swap(arr, j, right);\n    }\n\n    if (j <= k) {\n      left = j + 1;\n    }\n\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n};\n\nmodule.exports = QuickSelect;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/QuickSelect.js"],"names":["swap","arr","i","j","tmp","defaultCompare","a","b","QuickSelect","k","left","right","compare","undefined","length","n","m","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction swap (arr, i, j)\r\n{\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction defaultCompare (a, b)\r\n{\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n}\r\n\r\n/**\r\n * A [Floyd-Rivest](https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm) quick selection algorithm.\r\n *\r\n * Rearranges the array items so that all items in the [left, k] range are smaller than all items in [k, right];\r\n * The k-th element will have the (k - left + 1)th smallest value in [left, right].\r\n *\r\n * The array is modified in-place.\r\n *\r\n * Based on code by [Vladimir Agafonkin](https://www.npmjs.com/~mourner)\r\n *\r\n * @function Phaser.Utils.Array.QuickSelect\r\n * @since 3.0.0\r\n *\r\n * @param {array} arr - The array to sort.\r\n * @param {integer} k - The k-th element index.\r\n * @param {integer} [left=0] - The index of the left part of the range.\r\n * @param {integer} [right] - The index of the right part of the range.\r\n * @param {function} [compare] - An optional comparison function. Is passed two elements and should return 0, 1 or -1.\r\n */\r\nvar QuickSelect = function (arr, k, left, right, compare)\r\n{\r\n    if (left === undefined) { left = 0; }\r\n    if (right === undefined) { right = arr.length - 1; }\r\n    if (compare === undefined) { compare = defaultCompare; }\r\n\r\n    while (right > left)\r\n    {\r\n        if (right - left > 600)\r\n        {\r\n            var n = right - left + 1;\r\n            var m = k - left + 1;\r\n            var z = Math.log(n);\r\n            var s = 0.5 * Math.exp(2 * z / 3);\r\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\r\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\r\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\r\n\r\n            QuickSelect(arr, k, newLeft, newRight, compare);\r\n        }\r\n\r\n        var t = arr[k];\r\n        var i = left;\r\n        var j = right;\r\n\r\n        swap(arr, left, k);\r\n\r\n        if (compare(arr[right], t) > 0)\r\n        {\r\n            swap(arr, left, right);\r\n        }\r\n\r\n        while (i < j)\r\n        {\r\n            swap(arr, i, j);\r\n\r\n            i++;\r\n            j--;\r\n\r\n            while (compare(arr[i], t) < 0)\r\n            {\r\n                i++;\r\n            }\r\n\r\n            while (compare(arr[j], t) > 0)\r\n            {\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0)\r\n        {\r\n            swap(arr, left, j);\r\n        }\r\n        else\r\n        {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k)\r\n        {\r\n            left = j + 1;\r\n        }\r\n\r\n        if (k <= j)\r\n        {\r\n            right = j - 1;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = QuickSelect;\r\n"]},"metadata":{},"sourceType":"script"}