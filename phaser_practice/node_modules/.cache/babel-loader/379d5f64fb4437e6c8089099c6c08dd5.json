{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Work out what percentage `value` is of the range between `min` and `max`.\r\n * If `max` isn't given then it will return the percentage of `value` to `min`.\r\n *\r\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\r\n *\r\n * @function Phaser.Math.Percent\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to determine the percentage of.\r\n * @param {number} min - The minimum value.\r\n * @param {number} [max] - The maximum value.\r\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\r\n *\r\n * @return {number} A value between 0 and 1 representing the percentage.\r\n */\nvar Percent = function (value, min, max, upperMax) {\n  if (max === undefined) {\n    max = min + 1;\n  }\n\n  var percentage = (value - min) / (max - min);\n\n  if (percentage > 1) {\n    if (upperMax !== undefined) {\n      percentage = (upperMax - value) / (upperMax - max);\n\n      if (percentage < 0) {\n        percentage = 0;\n      }\n    } else {\n      percentage = 1;\n    }\n  } else if (percentage < 0) {\n    percentage = 0;\n  }\n\n  return percentage;\n};\n\nmodule.exports = Percent;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Percent.js"],"names":["Percent","value","min","max","upperMax","undefined","percentage","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA,IAAIA,OAAO,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,GAAtB,EAA2BC,QAA3B,EACd;AACI,MAAID,GAAG,KAAKE,SAAZ,EAAuB;AAAEF,IAAAA,GAAG,GAAGD,GAAG,GAAG,CAAZ;AAAgB;;AAEzC,MAAII,UAAU,GAAG,CAACL,KAAK,GAAGC,GAAT,KAAiBC,GAAG,GAAGD,GAAvB,CAAjB;;AAEA,MAAII,UAAU,GAAG,CAAjB,EACA;AACI,QAAIF,QAAQ,KAAKC,SAAjB,EACA;AACIC,MAAAA,UAAU,GAAG,CAAEF,QAAQ,GAAGH,KAAb,KAAwBG,QAAQ,GAAGD,GAAnC,CAAb;;AAEA,UAAIG,UAAU,GAAG,CAAjB,EACA;AACIA,QAAAA,UAAU,GAAG,CAAb;AACH;AACJ,KARD,MAUA;AACIA,MAAAA,UAAU,GAAG,CAAb;AACH;AACJ,GAfD,MAgBK,IAAIA,UAAU,GAAG,CAAjB,EACL;AACIA,IAAAA,UAAU,GAAG,CAAb;AACH;;AAED,SAAOA,UAAP;AACH,CA5BD;;AA8BAC,MAAM,CAACC,OAAP,GAAiBR,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Work out what percentage `value` is of the range between `min` and `max`.\r\n * If `max` isn't given then it will return the percentage of `value` to `min`.\r\n *\r\n * You can optionally specify an `upperMax` value, which is a mid-way point in the range that represents 100%, after which the % starts to go down to zero again.\r\n *\r\n * @function Phaser.Math.Percent\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to determine the percentage of.\r\n * @param {number} min - The minimum value.\r\n * @param {number} [max] - The maximum value.\r\n * @param {number} [upperMax] - The mid-way point in the range that represents 100%.\r\n *\r\n * @return {number} A value between 0 and 1 representing the percentage.\r\n */\r\nvar Percent = function (value, min, max, upperMax)\r\n{\r\n    if (max === undefined) { max = min + 1; }\r\n\r\n    var percentage = (value - min) / (max - min);\r\n\r\n    if (percentage > 1)\r\n    {\r\n        if (upperMax !== undefined)\r\n        {\r\n            percentage = ((upperMax - value)) / (upperMax - max);\r\n\r\n            if (percentage < 0)\r\n            {\r\n                percentage = 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            percentage = 1;\r\n        }\r\n    }\r\n    else if (percentage < 0)\r\n    {\r\n        percentage = 0;\r\n    }\r\n\r\n    return percentage;\r\n};\r\n\r\nmodule.exports = Percent;\r\n"]},"metadata":{},"sourceType":"script"}