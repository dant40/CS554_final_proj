{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Utils = require('./Utils');\n/**\r\n * @classdesc\r\n * WebGLPipeline is a class that describes the way elements will be renderered\r\n * in WebGL, specially focused on batching vertices (batching is not provided).\r\n * Pipelines are mostly used for describing 2D rendering passes but it's\r\n * flexible enough to be used for any type of rendering including 3D.\r\n * Internally WebGLPipeline will handle things like compiling shaders,\r\n * creating vertex buffers, assigning primitive topology and binding\r\n * vertex attributes.\r\n *\r\n * The config properties are:\r\n * - game: Current game instance.\r\n * - renderer: Current WebGL renderer.\r\n * - gl: Current WebGL context.\r\n * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\r\n *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\r\n * - vertShader: Source for vertex shader as a string.\r\n * - fragShader: Source for fragment shader as a string.\r\n * - vertexCapacity: The amount of vertices that shall be allocated\r\n * - vertexSize: The size of a single vertex in bytes.\r\n * - vertices: An optional buffer of vertices\r\n * - attributes: An array describing the vertex attributes\r\n *\r\n * The vertex attributes properties are:\r\n * - name : String - Name of the attribute in the vertex shader\r\n * - size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\r\n * - type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\r\n * - normalized : boolean - Is the attribute normalized\r\n * - offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\r\n * Here you can find more information of how to describe an attribute:\r\n * - https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\r\n *\r\n * @class WebGLPipeline\r\n * @memberof Phaser.Renderer.WebGL\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - The configuration object for this WebGL Pipeline, as described above.\r\n */\n\n\nvar WebGLPipeline = new Class({\n  initialize: function WebGLPipeline(config) {\n    /**\r\n     * Name of the Pipeline. Used for identifying\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n    this.name = 'WebGLPipeline';\n    /**\r\n     * The Game which owns this WebGL Pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#game\r\n     * @type {Phaser.Game}\r\n     * @since 3.0.0\r\n     */\n\n    this.game = config.game;\n    /**\r\n     * The canvas which this WebGL Pipeline renders to.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#view\r\n     * @type {HTMLCanvasElement}\r\n     * @since 3.0.0\r\n     */\n\n    this.view = config.game.canvas;\n    /**\r\n     * Used to store the current game resolution\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#resolution\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.resolution = 1;\n    /**\r\n     * Width of the current viewport\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = 0;\n    /**\r\n     * Height of the current viewport\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = 0;\n    /**\r\n     * The WebGL context this WebGL Pipeline uses.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#gl\r\n     * @type {WebGLRenderingContext}\r\n     * @since 3.0.0\r\n     */\n\n    this.gl = config.gl;\n    /**\r\n     * How many vertices have been fed to the current pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCount\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexCount = 0;\n    /**\r\n     * The limit of vertices that the pipeline can hold\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCapacity\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexCapacity = config.vertexCapacity;\n    /**\r\n     * The WebGL Renderer which owns this WebGL Pipeline.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#renderer\r\n     * @type {Phaser.Renderer.WebGL.WebGLRenderer}\r\n     * @since 3.0.0\r\n     */\n\n    this.renderer = config.renderer;\n    /**\r\n     * Raw byte buffer of vertices.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexData\r\n     * @type {ArrayBuffer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexData = config.vertices ? config.vertices : new ArrayBuffer(config.vertexCapacity * config.vertexSize);\n    /**\r\n     * The handle to a WebGL vertex buffer object.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexBuffer\r\n     * @type {WebGLBuffer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexBuffer = this.renderer.createVertexBuffer(config.vertices ? config.vertices : this.vertexData.byteLength, this.gl.STREAM_DRAW);\n    /**\r\n     * The handle to a WebGL program\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#program\r\n     * @type {WebGLProgram}\r\n     * @since 3.0.0\r\n     */\n\n    this.program = this.renderer.createProgram(config.vertShader, config.fragShader);\n    /**\r\n     * Array of objects that describe the vertex attributes\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#attributes\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.attributes = config.attributes;\n    /**\r\n     * The size in bytes of the vertex\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexSize\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexSize = config.vertexSize;\n    /**\r\n     * The primitive topology which the pipeline will use to submit draw calls\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#topology\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.topology = config.topology;\n    /**\r\n     * Uint8 view to the vertex raw buffer. Used for uploading vertex buffer resources\r\n     * to the GPU.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#bytes\r\n     * @type {Uint8Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.bytes = new Uint8Array(this.vertexData);\n    /**\r\n     * This will store the amount of components of 32 bit length\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexComponentCount\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.vertexComponentCount = Utils.getComponentCount(config.attributes, this.gl);\n    /**\r\n     * Indicates if the current pipeline is flushing the contents to the GPU.\r\n     * When the variable is set the flush function will be locked.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#flushLocked\r\n     * @type {boolean}\r\n     * @since 3.1.0\r\n     */\n\n    this.flushLocked = false;\n    /**\r\n     * Indicates if the current pipeline is active or not for this frame only.\r\n     * Reset in the onRender method.\r\n     *\r\n     * @name Phaser.Renderer.WebGL.WebGLPipeline#active\r\n     * @type {boolean}\r\n     * @since 3.10.0\r\n     */\n\n    this.active = false;\n  },\n\n  /**\r\n   * Called when the Game has fully booted and the Renderer has finished setting up.\r\n   *\r\n   * By this stage all Game level systems are now in place and you can perform any final\r\n   * tasks that the pipeline may need that relied on game systems such as the Texture Manager.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#boot\r\n   * @since 3.11.0\r\n   */\n  boot: function () {},\n\n  /**\r\n   * Adds a description of vertex attribute to the pipeline\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#addAttribute\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - Name of the vertex attribute\r\n   * @param {integer} size - Vertex component size\r\n   * @param {integer} type - Type of the attribute\r\n   * @param {boolean} normalized - Is the value normalized to a range\r\n   * @param {integer} offset - Byte offset to the beginning of the first element in the vertex\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  addAttribute: function (name, size, type, normalized, offset) {\n    this.attributes.push({\n      name: name,\n      size: size,\n      type: this.renderer.glFormats[type],\n      normalized: normalized,\n      offset: offset\n    });\n    this.vertexComponentCount = Utils.getComponentCount(this.attributes, this.gl);\n    return this;\n  },\n\n  /**\r\n   * Check if the current batch of vertices is full.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#shouldFlush\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the current batch should be flushed, otherwise `false`.\r\n   */\n  shouldFlush: function () {\n    return this.vertexCount >= this.vertexCapacity;\n  },\n\n  /**\r\n   * Resizes the properties used to describe the viewport\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#resize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The new width of this WebGL Pipeline.\r\n   * @param {number} height - The new height of this WebGL Pipeline.\r\n   * @param {number} resolution - The resolution this WebGL Pipeline should be resized to.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  resize: function (width, height, resolution) {\n    this.width = width * resolution;\n    this.height = height * resolution;\n    this.resolution = resolution;\n    return this;\n  },\n\n  /**\r\n   * Binds the pipeline resources, including programs, vertex buffers and binds attributes\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#bind\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  bind: function () {\n    var gl = this.gl;\n    var vertexBuffer = this.vertexBuffer;\n    var attributes = this.attributes;\n    var program = this.program;\n    var renderer = this.renderer;\n    var vertexSize = this.vertexSize;\n    renderer.setProgram(program);\n    renderer.setVertexBuffer(vertexBuffer);\n\n    for (var index = 0; index < attributes.length; ++index) {\n      var element = attributes[index];\n      var location = gl.getAttribLocation(program, element.name);\n\n      if (location >= 0) {\n        gl.enableVertexAttribArray(location);\n        gl.vertexAttribPointer(location, element.size, element.type, element.normalized, vertexSize, element.offset);\n      } else if (location !== -1) {\n        gl.disableVertexAttribArray(location);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set whenever this WebGL Pipeline is bound to a WebGL Renderer.\r\n   *\r\n   * This method is called every time the WebGL Pipeline is attempted to be bound, even if it already is the current pipeline.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onBind\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onBind: function () {\n    // This is for updating uniform data it's called on each bind attempt.\n    return this;\n  },\n\n  /**\r\n   * Called before each frame is rendered, but after the canvas has been cleared.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onPreRender\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onPreRender: function () {\n    // called once every frame\n    return this;\n  },\n\n  /**\r\n   * Called before a Scene's Camera is rendered.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onRender\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Scene} scene - The Scene being rendered.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Scene Camera being rendered with.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onRender: function () {\n    // called for each camera\n    return this;\n  },\n\n  /**\r\n   * Called after each frame has been completely rendered and snapshots have been taken.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#onPostRender\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  onPostRender: function () {\n    // called once every frame\n    return this;\n  },\n\n  /**\r\n   * Uploads the vertex data and emits a draw call\r\n   * for the current batch of vertices.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#flush\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  flush: function () {\n    if (this.flushLocked) {\n      return this;\n    }\n\n    this.flushLocked = true;\n    var gl = this.gl;\n    var vertexCount = this.vertexCount;\n    var topology = this.topology;\n    var vertexSize = this.vertexSize;\n\n    if (vertexCount === 0) {\n      this.flushLocked = false;\n      return;\n    }\n\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.bytes.subarray(0, vertexCount * vertexSize));\n    gl.drawArrays(topology, 0, vertexCount);\n    this.vertexCount = 0;\n    this.flushLocked = false;\n    return this;\n  },\n\n  /**\r\n   * Removes all object references in this WebGL Pipeline and removes its program from the WebGL context.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#destroy\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  destroy: function () {\n    var gl = this.gl;\n    gl.deleteProgram(this.program);\n    gl.deleteBuffer(this.vertexBuffer);\n    delete this.program;\n    delete this.vertexBuffer;\n    delete this.gl;\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new value of the `float` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat1: function (name, x) {\n    this.renderer.setFloat1(this.program, name, x);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new X component of the `vec2` uniform.\r\n   * @param {number} y - The new Y component of the `vec2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat2: function (name, x, y) {\n    this.renderer.setFloat2(this.program, name, x, y);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - The new X component of the `vec3` uniform.\r\n   * @param {number} y - The new Y component of the `vec3` uniform.\r\n   * @param {number} z - The new Z component of the `vec3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat3: function (name, x, y, z) {\n    this.renderer.setFloat3(this.program, name, x, y, z);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {number} x - X component of the uniform\r\n   * @param {number} y - Y component of the uniform\r\n   * @param {number} z - Z component of the uniform\r\n   * @param {number} w - W component of the uniform\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat4: function (name, x, y, z, w) {\n    this.renderer.setFloat4(this.program, name, x, y, z, w);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat1v: function (name, arr) {\n    this.renderer.setFloat1v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat2v: function (name, arr) {\n    this.renderer.setFloat2v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat3v: function (name, arr) {\n    this.renderer.setFloat3v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4v\r\n   * @since 3.13.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setFloat4v: function (name, arr) {\n    this.renderer.setFloat4v(this.program, name, arr);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt1\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new value of the `int` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt1: function (name, x) {\n    this.renderer.setInt1(this.program, name, x);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new X component of the `ivec2` uniform.\r\n   * @param {integer} y - The new Y component of the `ivec2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt2: function (name, x, y) {\n    this.renderer.setInt2(this.program, name, x, y);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - The new X component of the `ivec3` uniform.\r\n   * @param {integer} y - The new Y component of the `ivec3` uniform.\r\n   * @param {integer} z - The new Z component of the `ivec3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt3: function (name, x, y, z) {\n    this.renderer.setInt3(this.program, name, x, y, z);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {integer} x - X component of the uniform\r\n   * @param {integer} y - Y component of the uniform\r\n   * @param {integer} z - Z component of the uniform\r\n   * @param {integer} w - W component of the uniform\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setInt4: function (name, x, y, z, w) {\n    this.renderer.setInt4(this.program, name, x, y, z, w);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix2\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n   * @param {Float32Array} matrix - The new values for the `mat2` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix2: function (name, transpose, matrix) {\n    this.renderer.setMatrix2(this.program, name, transpose, matrix);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix3\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n   * @param {Float32Array} matrix - The new values for the `mat3` uniform.\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix3: function (name, transpose, matrix) {\n    this.renderer.setMatrix3(this.program, name, transpose, matrix);\n    return this;\n  },\n\n  /**\r\n   * Set a uniform value of the current pipeline program.\r\n   *\r\n   * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix4\r\n   * @since 3.2.0\r\n   *\r\n   * @param {string} name - The name of the uniform to look-up and modify.\r\n   * @param {boolean} transpose - Should the matrix be transpose\r\n   * @param {Float32Array} matrix - Matrix data\r\n   *\r\n   * @return {this} This WebGLPipeline instance.\r\n   */\n  setMatrix4: function (name, transpose, matrix) {\n    this.renderer.setMatrix4(this.program, name, transpose, matrix);\n    return this;\n  }\n});\nmodule.exports = WebGLPipeline;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/webgl/WebGLPipeline.js"],"names":["Class","require","Utils","WebGLPipeline","initialize","config","name","game","view","canvas","resolution","width","height","gl","vertexCount","vertexCapacity","renderer","vertexData","vertices","ArrayBuffer","vertexSize","vertexBuffer","createVertexBuffer","byteLength","STREAM_DRAW","program","createProgram","vertShader","fragShader","attributes","topology","bytes","Uint8Array","vertexComponentCount","getComponentCount","flushLocked","active","boot","addAttribute","size","type","normalized","offset","push","glFormats","shouldFlush","resize","bind","setProgram","setVertexBuffer","index","length","element","location","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","disableVertexAttribArray","onBind","onPreRender","onRender","onPostRender","flush","bufferSubData","ARRAY_BUFFER","subarray","drawArrays","destroy","deleteProgram","deleteBuffer","setFloat1","x","setFloat2","y","setFloat3","z","setFloat4","w","setFloat1v","arr","setFloat2v","setFloat3v","setFloat4v","setInt1","setInt2","setInt3","setInt4","setMatrix2","transpose","matrix","setMatrix3","setMatrix4","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Utils = require('./Utils');\r\n\r\n/**\r\n * @classdesc\r\n * WebGLPipeline is a class that describes the way elements will be renderered\r\n * in WebGL, specially focused on batching vertices (batching is not provided).\r\n * Pipelines are mostly used for describing 2D rendering passes but it's\r\n * flexible enough to be used for any type of rendering including 3D.\r\n * Internally WebGLPipeline will handle things like compiling shaders,\r\n * creating vertex buffers, assigning primitive topology and binding\r\n * vertex attributes.\r\n *\r\n * The config properties are:\r\n * - game: Current game instance.\r\n * - renderer: Current WebGL renderer.\r\n * - gl: Current WebGL context.\r\n * - topology: This indicates how the primitives are rendered. The default value is GL_TRIANGLES.\r\n *              Here is the full list of rendering primitives (https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants).\r\n * - vertShader: Source for vertex shader as a string.\r\n * - fragShader: Source for fragment shader as a string.\r\n * - vertexCapacity: The amount of vertices that shall be allocated\r\n * - vertexSize: The size of a single vertex in bytes.\r\n * - vertices: An optional buffer of vertices\r\n * - attributes: An array describing the vertex attributes\r\n *\r\n * The vertex attributes properties are:\r\n * - name : String - Name of the attribute in the vertex shader\r\n * - size : integer - How many components describe the attribute. For ex: vec3 = size of 3, float = size of 1\r\n * - type : GLenum - WebGL type (gl.BYTE, gl.SHORT, gl.UNSIGNED_BYTE, gl.UNSIGNED_SHORT, gl.FLOAT)\r\n * - normalized : boolean - Is the attribute normalized\r\n * - offset : integer - The offset in bytes to the current attribute in the vertex. Equivalent to offsetof(vertex, attrib) in C\r\n * Here you can find more information of how to describe an attribute:\r\n * - https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer\r\n *\r\n * @class WebGLPipeline\r\n * @memberof Phaser.Renderer.WebGL\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {object} config - The configuration object for this WebGL Pipeline, as described above.\r\n */\r\nvar WebGLPipeline = new Class({\r\n\r\n    initialize:\r\n\r\n    function WebGLPipeline (config)\r\n    {\r\n        /**\r\n         * Name of the Pipeline. Used for identifying\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = 'WebGLPipeline';\r\n\r\n        /**\r\n         * The Game which owns this WebGL Pipeline.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#game\r\n         * @type {Phaser.Game}\r\n         * @since 3.0.0\r\n         */\r\n        this.game = config.game;\r\n\r\n        /**\r\n         * The canvas which this WebGL Pipeline renders to.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#view\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.0.0\r\n         */\r\n        this.view = config.game.canvas;\r\n\r\n        /**\r\n         * Used to store the current game resolution\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#resolution\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.resolution = 1;\r\n\r\n        /**\r\n         * Width of the current viewport\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = 0;\r\n\r\n        /**\r\n         * Height of the current viewport\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = 0;\r\n\r\n        /**\r\n         * The WebGL context this WebGL Pipeline uses.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#gl\r\n         * @type {WebGLRenderingContext}\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = config.gl;\r\n\r\n        /**\r\n         * How many vertices have been fed to the current pipeline.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCount\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCount = 0;\r\n\r\n        /**\r\n         * The limit of vertices that the pipeline can hold\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexCapacity\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexCapacity = config.vertexCapacity;\r\n\r\n        /**\r\n         * The WebGL Renderer which owns this WebGL Pipeline.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#renderer\r\n         * @type {Phaser.Renderer.WebGL.WebGLRenderer}\r\n         * @since 3.0.0\r\n         */\r\n        this.renderer = config.renderer;\r\n\r\n        /**\r\n         * Raw byte buffer of vertices.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexData\r\n         * @type {ArrayBuffer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexData = (config.vertices ? config.vertices : new ArrayBuffer(config.vertexCapacity * config.vertexSize));\r\n\r\n        /**\r\n         * The handle to a WebGL vertex buffer object.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexBuffer\r\n         * @type {WebGLBuffer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexBuffer = this.renderer.createVertexBuffer((config.vertices ? config.vertices : this.vertexData.byteLength), this.gl.STREAM_DRAW);\r\n\r\n        /**\r\n         * The handle to a WebGL program\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#program\r\n         * @type {WebGLProgram}\r\n         * @since 3.0.0\r\n         */\r\n        this.program = this.renderer.createProgram(config.vertShader, config.fragShader);\r\n\r\n        /**\r\n         * Array of objects that describe the vertex attributes\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#attributes\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.attributes = config.attributes;\r\n\r\n        /**\r\n         * The size in bytes of the vertex\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexSize\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexSize = config.vertexSize;\r\n\r\n        /**\r\n         * The primitive topology which the pipeline will use to submit draw calls\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#topology\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.topology = config.topology;\r\n\r\n        /**\r\n         * Uint8 view to the vertex raw buffer. Used for uploading vertex buffer resources\r\n         * to the GPU.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#bytes\r\n         * @type {Uint8Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.bytes = new Uint8Array(this.vertexData);\r\n\r\n        /**\r\n         * This will store the amount of components of 32 bit length\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#vertexComponentCount\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertexComponentCount = Utils.getComponentCount(config.attributes, this.gl);\r\n\r\n        /**\r\n         * Indicates if the current pipeline is flushing the contents to the GPU.\r\n         * When the variable is set the flush function will be locked.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#flushLocked\r\n         * @type {boolean}\r\n         * @since 3.1.0\r\n         */\r\n        this.flushLocked = false;\r\n\r\n        /**\r\n         * Indicates if the current pipeline is active or not for this frame only.\r\n         * Reset in the onRender method.\r\n         *\r\n         * @name Phaser.Renderer.WebGL.WebGLPipeline#active\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Called when the Game has fully booted and the Renderer has finished setting up.\r\n     *\r\n     * By this stage all Game level systems are now in place and you can perform any final\r\n     * tasks that the pipeline may need that relied on game systems such as the Texture Manager.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#boot\r\n     * @since 3.11.0\r\n     */\r\n    boot: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Adds a description of vertex attribute to the pipeline\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#addAttribute\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - Name of the vertex attribute\r\n     * @param {integer} size - Vertex component size\r\n     * @param {integer} type - Type of the attribute\r\n     * @param {boolean} normalized - Is the value normalized to a range\r\n     * @param {integer} offset - Byte offset to the beginning of the first element in the vertex\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    addAttribute: function (name, size, type, normalized, offset)\r\n    {\r\n        this.attributes.push({\r\n            name: name,\r\n            size: size,\r\n            type: this.renderer.glFormats[type],\r\n            normalized: normalized,\r\n            offset: offset\r\n        });\r\n\r\n        this.vertexComponentCount = Utils.getComponentCount(\r\n            this.attributes,\r\n            this.gl\r\n        );\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check if the current batch of vertices is full.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#shouldFlush\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the current batch should be flushed, otherwise `false`.\r\n     */\r\n    shouldFlush: function ()\r\n    {\r\n        return (this.vertexCount >= this.vertexCapacity);\r\n    },\r\n\r\n    /**\r\n     * Resizes the properties used to describe the viewport\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#resize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The new width of this WebGL Pipeline.\r\n     * @param {number} height - The new height of this WebGL Pipeline.\r\n     * @param {number} resolution - The resolution this WebGL Pipeline should be resized to.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    resize: function (width, height, resolution)\r\n    {\r\n        this.width = width * resolution;\r\n        this.height = height * resolution;\r\n        this.resolution = resolution;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds the pipeline resources, including programs, vertex buffers and binds attributes\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#bind\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    bind: function ()\r\n    {\r\n        var gl = this.gl;\r\n        var vertexBuffer = this.vertexBuffer;\r\n        var attributes = this.attributes;\r\n        var program = this.program;\r\n        var renderer = this.renderer;\r\n        var vertexSize = this.vertexSize;\r\n\r\n        renderer.setProgram(program);\r\n        renderer.setVertexBuffer(vertexBuffer);\r\n\r\n        for (var index = 0; index < attributes.length; ++index)\r\n        {\r\n            var element = attributes[index];\r\n            var location = gl.getAttribLocation(program, element.name);\r\n\r\n            if (location >= 0)\r\n            {\r\n                gl.enableVertexAttribArray(location);\r\n                gl.vertexAttribPointer(location, element.size, element.type, element.normalized, vertexSize, element.offset);\r\n            }\r\n            else if (location !== -1)\r\n            {\r\n                gl.disableVertexAttribArray(location);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set whenever this WebGL Pipeline is bound to a WebGL Renderer.\r\n     *\r\n     * This method is called every time the WebGL Pipeline is attempted to be bound, even if it already is the current pipeline.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onBind\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onBind: function ()\r\n    {\r\n        // This is for updating uniform data it's called on each bind attempt.\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called before each frame is rendered, but after the canvas has been cleared.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onPreRender\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onPreRender: function ()\r\n    {\r\n        // called once every frame\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called before a Scene's Camera is rendered.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onRender\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Scene} scene - The Scene being rendered.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Scene Camera being rendered with.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onRender: function ()\r\n    {\r\n        // called for each camera\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called after each frame has been completely rendered and snapshots have been taken.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#onPostRender\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    onPostRender: function ()\r\n    {\r\n        // called once every frame\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Uploads the vertex data and emits a draw call\r\n     * for the current batch of vertices.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#flush\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    flush: function ()\r\n    {\r\n        if (this.flushLocked) { return this; }\r\n\r\n        this.flushLocked = true;\r\n\r\n        var gl = this.gl;\r\n        var vertexCount = this.vertexCount;\r\n        var topology = this.topology;\r\n        var vertexSize = this.vertexSize;\r\n\r\n        if (vertexCount === 0)\r\n        {\r\n            this.flushLocked = false;\r\n            return;\r\n        }\r\n\r\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.bytes.subarray(0, vertexCount * vertexSize));\r\n        gl.drawArrays(topology, 0, vertexCount);\r\n\r\n        this.vertexCount = 0;\r\n        this.flushLocked = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes all object references in this WebGL Pipeline and removes its program from the WebGL context.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#destroy\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var gl = this.gl;\r\n\r\n        gl.deleteProgram(this.program);\r\n        gl.deleteBuffer(this.vertexBuffer);\r\n\r\n        delete this.program;\r\n        delete this.vertexBuffer;\r\n        delete this.gl;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - The new value of the `float` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat1: function (name, x)\r\n    {\r\n        this.renderer.setFloat1(this.program, name, x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - The new X component of the `vec2` uniform.\r\n     * @param {number} y - The new Y component of the `vec2` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat2: function (name, x, y)\r\n    {\r\n        this.renderer.setFloat2(this.program, name, x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - The new X component of the `vec3` uniform.\r\n     * @param {number} y - The new Y component of the `vec3` uniform.\r\n     * @param {number} z - The new Z component of the `vec3` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat3: function (name, x, y, z)\r\n    {\r\n        this.renderer.setFloat3(this.program, name, x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {number} x - X component of the uniform\r\n     * @param {number} y - Y component of the uniform\r\n     * @param {number} z - Z component of the uniform\r\n     * @param {number} w - W component of the uniform\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat4: function (name, x, y, z, w)\r\n    {\r\n        this.renderer.setFloat4(this.program, name, x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat1v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat1v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat1v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat2v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat2v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat2v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat3v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat3v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat3v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setFloat4v\r\n     * @since 3.13.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {Float32Array} arr - The new value to be used for the uniform variable.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setFloat4v: function (name, arr)\r\n    {\r\n        this.renderer.setFloat4v(this.program, name, arr);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt1\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - The new value of the `int` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt1: function (name, x)\r\n    {\r\n        this.renderer.setInt1(this.program, name, x);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - The new X component of the `ivec2` uniform.\r\n     * @param {integer} y - The new Y component of the `ivec2` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt2: function (name, x, y)\r\n    {\r\n        this.renderer.setInt2(this.program, name, x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - The new X component of the `ivec3` uniform.\r\n     * @param {integer} y - The new Y component of the `ivec3` uniform.\r\n     * @param {integer} z - The new Z component of the `ivec3` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt3: function (name, x, y, z)\r\n    {\r\n        this.renderer.setInt3(this.program, name, x, y, z);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setInt4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {integer} x - X component of the uniform\r\n     * @param {integer} y - Y component of the uniform\r\n     * @param {integer} z - Z component of the uniform\r\n     * @param {integer} w - W component of the uniform\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setInt4: function (name, x, y, z, w)\r\n    {\r\n        this.renderer.setInt4(this.program, name, x, y, z, w);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix2\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n     * @param {Float32Array} matrix - The new values for the `mat2` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix2: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix2(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix3\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - Whether to transpose the matrix. Should be `false`.\r\n     * @param {Float32Array} matrix - The new values for the `mat3` uniform.\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix3: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix3(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set a uniform value of the current pipeline program.\r\n     *\r\n     * @method Phaser.Renderer.WebGL.WebGLPipeline#setMatrix4\r\n     * @since 3.2.0\r\n     *\r\n     * @param {string} name - The name of the uniform to look-up and modify.\r\n     * @param {boolean} transpose - Should the matrix be transpose\r\n     * @param {Float32Array} matrix - Matrix data\r\n     *\r\n     * @return {this} This WebGLPipeline instance.\r\n     */\r\n    setMatrix4: function (name, transpose, matrix)\r\n    {\r\n        this.renderer.setMatrix4(this.program, name, transpose, matrix);\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = WebGLPipeline;\r\n"]},"metadata":{},"sourceType":"script"}