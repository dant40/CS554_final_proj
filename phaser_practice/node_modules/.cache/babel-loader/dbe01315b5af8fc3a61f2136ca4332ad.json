{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Light = require('./Light');\n\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * @callback LightForEach\r\n *\r\n * @param {Phaser.GameObjects.Light} light - The Light.\r\n */\n\n/**\r\n * @classdesc\r\n * Manages Lights for a Scene.\r\n *\r\n * Affects the rendering of Game Objects using the `Light2D` pipeline.\r\n *\r\n * @class LightsManager\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n */\n\n\nvar LightsManager = new Class({\n  initialize: function LightsManager() {\n    /**\r\n     * The pool of Lights.\r\n     *\r\n     * Used to recycle removed Lights for a more efficient use of memory.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#lightPool\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n    this.lightPool = [];\n    /**\r\n     * The Lights in the Scene.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#lights\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.lights = [];\n    /**\r\n     * Lights that have been culled from a Camera's viewport.\r\n     *\r\n     * Lights in this list will not be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#culledLights\r\n     * @type {Phaser.GameObjects.Light[]}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.culledLights = [];\n    /**\r\n     * The ambient color.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#ambientColor\r\n     * @type {{ r: number, g: number, b: number }}\r\n     * @since 3.0.0\r\n     */\n\n    this.ambientColor = {\n      r: 0.1,\n      g: 0.1,\n      b: 0.1\n    };\n    /**\r\n     * Whether the Lights Manager is enabled.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#active\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.active = false;\n    /**\r\n     * The maximum number of lights that a single Camera and the lights shader can process.\r\n     * Change this via the `maxLights` property in your game config, as it cannot be changed at runtime.\r\n     *\r\n     * @name Phaser.GameObjects.LightsManager#maxLights\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.15.0\r\n     */\n\n    this.maxLights = -1;\n  },\n\n  /**\r\n   * Enable the Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#enable\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  enable: function () {\n    if (this.maxLights === -1) {\n      this.maxLights = this.scene.sys.game.renderer.config.maxLights;\n    }\n\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Disable the Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#disable\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  disable: function () {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Cull any Lights that aren't visible to the given Camera.\r\n   *\r\n   * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#cull\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to cull Lights for.\r\n   *\r\n   * @return {Phaser.GameObjects.Light[]} The culled Lights.\r\n   */\n  cull: function (camera) {\n    var lights = this.lights;\n    var culledLights = this.culledLights;\n    var length = lights.length;\n    var cameraCenterX = camera.x + camera.width / 2.0;\n    var cameraCenterY = camera.y + camera.height / 2.0;\n    var cameraRadius = (camera.width + camera.height) / 2.0;\n    var point = {\n      x: 0,\n      y: 0\n    };\n    var cameraMatrix = camera.matrix;\n    var viewportHeight = this.systems.game.config.height;\n    culledLights.length = 0;\n\n    for (var index = 0; index < length && culledLights.length < this.maxLights; index++) {\n      var light = lights[index];\n      cameraMatrix.transformPoint(light.x, light.y, point); //  We'll just use bounding spheres to test if lights should be rendered\n\n      var dx = cameraCenterX - (point.x - camera.scrollX * light.scrollFactorX * camera.zoom);\n      var dy = cameraCenterY - (viewportHeight - (point.y - camera.scrollY * light.scrollFactorY * camera.zoom));\n      var distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance < light.radius + cameraRadius) {\n        culledLights.push(lights[index]);\n      }\n    }\n\n    return culledLights;\n  },\n\n  /**\r\n   * Iterate over each Light with a callback.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#forEachLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {LightForEach} callback - The callback that is called with each Light.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  forEachLight: function (callback) {\n    if (!callback) {\n      return;\n    }\n\n    var lights = this.lights;\n    var length = lights.length;\n\n    for (var index = 0; index < length; ++index) {\n      callback(lights[index]);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set the ambient light color.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#setAmbientColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rgb - The integer RGB color of the ambient light.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  setAmbientColor: function (rgb) {\n    var color = Utils.getFloatsFromUintRGB(rgb);\n    this.ambientColor.r = color[0];\n    this.ambientColor.g = color[1];\n    this.ambientColor.b = color[2];\n    return this;\n  },\n\n  /**\r\n   * Returns the maximum number of Lights allowed to appear at once.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#getMaxVisibleLights\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The maximum number of Lights allowed to appear at once.\r\n   */\n  getMaxVisibleLights: function () {\n    return 10;\n  },\n\n  /**\r\n   * Get the number of Lights managed by this Lights Manager.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#getLightCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of Lights managed by this Lights Manager.\r\n   */\n  getLightCount: function () {\n    return this.lights.length;\n  },\n\n  /**\r\n   * Add a Light.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#addLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal position of the Light.\r\n   * @param {number} [y=0] - The vertical position of the Light.\r\n   * @param {number} [radius=100] - The radius of the Light.\r\n   * @param {number} [rgb=0xffffff] - The integer RGB color of the light.\r\n   * @param {number} [intensity=1] - The intensity of the Light.\r\n   *\r\n   * @return {Phaser.GameObjects.Light} The Light that was added.\r\n   */\n  addLight: function (x, y, radius, rgb, intensity) {\n    var color = null;\n    var light = null;\n    x = x === undefined ? 0.0 : x;\n    y = y === undefined ? 0.0 : y;\n    rgb = rgb === undefined ? 0xffffff : rgb;\n    radius = radius === undefined ? 100.0 : radius;\n    intensity = intensity === undefined ? 1.0 : intensity;\n    color = Utils.getFloatsFromUintRGB(rgb);\n    light = null;\n\n    if (this.lightPool.length > 0) {\n      light = this.lightPool.pop();\n      light.set(x, y, radius, color[0], color[1], color[2], intensity);\n    } else {\n      light = new Light(x, y, radius, color[0], color[1], color[2], intensity);\n    }\n\n    this.lights.push(light);\n    return light;\n  },\n\n  /**\r\n   * Remove a Light.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#removeLight\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Light} light - The Light to remove.\r\n   *\r\n   * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n   */\n  removeLight: function (light) {\n    var index = this.lights.indexOf(light);\n\n    if (index >= 0) {\n      this.lightPool.push(light);\n      this.lights.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Shut down the Lights Manager.\r\n   *\r\n   * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\r\n   * culled Lights.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#shutdown\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    while (this.lights.length > 0) {\n      this.lightPool.push(this.lights.pop());\n    }\n\n    this.ambientColor = {\n      r: 0.1,\n      g: 0.1,\n      b: 0.1\n    };\n    this.culledLights.length = 0;\n    this.lights.length = 0;\n  },\n\n  /**\r\n   * Destroy the Lights Manager.\r\n   *\r\n   * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.\r\n   *\r\n   * @method Phaser.GameObjects.LightsManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n  }\n});\nmodule.exports = LightsManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/lights/LightsManager.js"],"names":["Class","require","Light","Utils","LightsManager","initialize","lightPool","lights","culledLights","ambientColor","r","g","b","active","maxLights","enable","scene","sys","game","renderer","config","disable","cull","camera","length","cameraCenterX","x","width","cameraCenterY","y","height","cameraRadius","point","cameraMatrix","matrix","viewportHeight","systems","index","light","transformPoint","dx","scrollX","scrollFactorX","zoom","dy","scrollY","scrollFactorY","distance","Math","sqrt","radius","push","forEachLight","callback","setAmbientColor","rgb","color","getFloatsFromUintRGB","getMaxVisibleLights","getLightCount","addLight","intensity","undefined","pop","set","removeLight","indexOf","splice","shutdown","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Light = require('./Light');\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * @callback LightForEach\r\n *\r\n * @param {Phaser.GameObjects.Light} light - The Light.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Manages Lights for a Scene.\r\n *\r\n * Affects the rendering of Game Objects using the `Light2D` pipeline.\r\n *\r\n * @class LightsManager\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n */\r\nvar LightsManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function LightsManager ()\r\n    {\r\n        /**\r\n         * The pool of Lights.\r\n         *\r\n         * Used to recycle removed Lights for a more efficient use of memory.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lightPool\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lightPool = [];\r\n\r\n        /**\r\n         * The Lights in the Scene.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#lights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.lights = [];\r\n\r\n        /**\r\n         * Lights that have been culled from a Camera's viewport.\r\n         *\r\n         * Lights in this list will not be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#culledLights\r\n         * @type {Phaser.GameObjects.Light[]}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.culledLights = [];\r\n\r\n        /**\r\n         * The ambient color.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#ambientColor\r\n         * @type {{ r: number, g: number, b: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n\r\n        /**\r\n         * Whether the Lights Manager is enabled.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#active\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.active = false;\r\n\r\n        /**\r\n         * The maximum number of lights that a single Camera and the lights shader can process.\r\n         * Change this via the `maxLights` property in your game config, as it cannot be changed at runtime.\r\n         *\r\n         * @name Phaser.GameObjects.LightsManager#maxLights\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.15.0\r\n         */\r\n        this.maxLights = -1;\r\n    },\r\n\r\n    /**\r\n     * Enable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#enable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    enable: function ()\r\n    {\r\n        if (this.maxLights === -1)\r\n        {\r\n            this.maxLights = this.scene.sys.game.renderer.config.maxLights;\r\n        }\r\n\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Disable the Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#disable\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    disable: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Cull any Lights that aren't visible to the given Camera.\r\n     *\r\n     * Culling Lights improves performance by ensuring that only Lights within a Camera's viewport are rendered.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to cull Lights for.\r\n     *\r\n     * @return {Phaser.GameObjects.Light[]} The culled Lights.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        var lights = this.lights;\r\n        var culledLights = this.culledLights;\r\n        var length = lights.length;\r\n        var cameraCenterX = camera.x + camera.width / 2.0;\r\n        var cameraCenterY = camera.y + camera.height / 2.0;\r\n        var cameraRadius = (camera.width + camera.height) / 2.0;\r\n        var point = { x: 0, y: 0 };\r\n        var cameraMatrix = camera.matrix;\r\n        var viewportHeight = this.systems.game.config.height;\r\n\r\n        culledLights.length = 0;\r\n\r\n        for (var index = 0; index < length && culledLights.length < this.maxLights; index++)\r\n        {\r\n            var light = lights[index];\r\n\r\n            cameraMatrix.transformPoint(light.x, light.y, point);\r\n\r\n            //  We'll just use bounding spheres to test if lights should be rendered\r\n            var dx = cameraCenterX - (point.x - (camera.scrollX * light.scrollFactorX * camera.zoom));\r\n            var dy = cameraCenterY - (viewportHeight - (point.y - (camera.scrollY * light.scrollFactorY) * camera.zoom));\r\n            var distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n            if (distance < light.radius + cameraRadius)\r\n            {\r\n                culledLights.push(lights[index]);\r\n            }\r\n        }\r\n\r\n        return culledLights;\r\n    },\r\n\r\n    /**\r\n     * Iterate over each Light with a callback.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#forEachLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {LightForEach} callback - The callback that is called with each Light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    forEachLight: function (callback)\r\n    {\r\n        if (!callback)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var lights = this.lights;\r\n        var length = lights.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            callback(lights[index]);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the ambient light color.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#setAmbientColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rgb - The integer RGB color of the ambient light.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    setAmbientColor: function (rgb)\r\n    {\r\n        var color = Utils.getFloatsFromUintRGB(rgb);\r\n\r\n        this.ambientColor.r = color[0];\r\n        this.ambientColor.g = color[1];\r\n        this.ambientColor.b = color[2];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the maximum number of Lights allowed to appear at once.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getMaxVisibleLights\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The maximum number of Lights allowed to appear at once.\r\n     */\r\n    getMaxVisibleLights: function ()\r\n    {\r\n        return 10;\r\n    },\r\n\r\n    /**\r\n     * Get the number of Lights managed by this Lights Manager.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#getLightCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of Lights managed by this Lights Manager.\r\n     */\r\n    getLightCount: function ()\r\n    {\r\n        return this.lights.length;\r\n    },\r\n\r\n    /**\r\n     * Add a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#addLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal position of the Light.\r\n     * @param {number} [y=0] - The vertical position of the Light.\r\n     * @param {number} [radius=100] - The radius of the Light.\r\n     * @param {number} [rgb=0xffffff] - The integer RGB color of the light.\r\n     * @param {number} [intensity=1] - The intensity of the Light.\r\n     *\r\n     * @return {Phaser.GameObjects.Light} The Light that was added.\r\n     */\r\n    addLight: function (x, y, radius, rgb, intensity)\r\n    {\r\n        var color = null;\r\n        var light = null;\r\n\r\n        x = (x === undefined) ? 0.0 : x;\r\n        y = (y === undefined) ? 0.0 : y;\r\n        rgb = (rgb === undefined) ? 0xffffff : rgb;\r\n        radius = (radius === undefined) ? 100.0 : radius;\r\n        intensity = (intensity === undefined) ? 1.0 : intensity;\r\n\r\n        color = Utils.getFloatsFromUintRGB(rgb);\r\n        light = null;\r\n\r\n        if (this.lightPool.length > 0)\r\n        {\r\n            light = this.lightPool.pop();\r\n            light.set(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n        else\r\n        {\r\n            light = new Light(x, y, radius, color[0], color[1], color[2], intensity);\r\n        }\r\n\r\n        this.lights.push(light);\r\n\r\n        return light;\r\n    },\r\n\r\n    /**\r\n     * Remove a Light.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#removeLight\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Light} light - The Light to remove.\r\n     *\r\n     * @return {Phaser.GameObjects.LightsManager} This Lights Manager object.\r\n     */\r\n    removeLight: function (light)\r\n    {\r\n        var index = this.lights.indexOf(light);\r\n\r\n        if (index >= 0)\r\n        {\r\n            this.lightPool.push(light);\r\n            this.lights.splice(index, 1);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shut down the Lights Manager.\r\n     *\r\n     * Recycles all active Lights into the Light pool, resets ambient light color and clears the lists of Lights and\r\n     * culled Lights.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#shutdown\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        while (this.lights.length > 0)\r\n        {\r\n            this.lightPool.push(this.lights.pop());\r\n        }\r\n\r\n        this.ambientColor = { r: 0.1, g: 0.1, b: 0.1 };\r\n        this.culledLights.length = 0;\r\n        this.lights.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Destroy the Lights Manager.\r\n     *\r\n     * Cleans up all references by calling {@link Phaser.GameObjects.LightsManager#shutdown}.\r\n     *\r\n     * @method Phaser.GameObjects.LightsManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = LightsManager;\r\n"]},"metadata":{},"sourceType":"script"}