{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n/**\r\n * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n * collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollision\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * @param {boolean} updateLayer - If true, updates the current tiles on the layer. Set to\r\n * false if no tiles have been placed for significant performance boost.\r\n */\n\n\nvar SetCollision = function (indexes, collides, recalculateFaces, layer, updateLayer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (!Array.isArray(indexes)) {\n    indexes = [indexes];\n  }\n\n  if (updateLayer === undefined) {\n    updateLayer = true;\n  } // Update the array of colliding indexes\n\n\n  for (var i = 0; i < indexes.length; i++) {\n    SetLayerCollisionIndex(indexes[i], collides, layer);\n  } // Update the tiles\n\n\n  if (updateLayer) {\n    for (var ty = 0; ty < layer.height; ty++) {\n      for (var tx = 0; tx < layer.width; tx++) {\n        var tile = layer.data[ty][tx];\n\n        if (tile && indexes.indexOf(tile.index) !== -1) {\n          SetTileCollision(tile, collides);\n        }\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollision;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetCollision.js"],"names":["SetTileCollision","require","CalculateFacesWithin","SetLayerCollisionIndex","SetCollision","indexes","collides","recalculateFaces","layer","updateLayer","undefined","Array","isArray","i","length","ty","height","tx","width","tile","data","indexOf","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIG,YAAY,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,gBAA7B,EAA+CC,KAA/C,EAAsDC,WAAtD,EACnB;AACI,MAAIH,QAAQ,KAAKI,SAAjB,EAA4B;AAAEJ,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,MAAIC,gBAAgB,KAAKG,SAAzB,EAAoC;AAAEH,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAChE,MAAI,CAACI,KAAK,CAACC,OAAN,CAAcP,OAAd,CAAL,EAA6B;AAAEA,IAAAA,OAAO,GAAG,CAAEA,OAAF,CAAV;AAAwB;;AACvD,MAAII,WAAW,KAAKC,SAApB,EAA+B;AAAED,IAAAA,WAAW,GAAG,IAAd;AAAqB,GAJ1D,CAMI;;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,OAAO,CAACS,MAA5B,EAAoCD,CAAC,EAArC,EACA;AACIV,IAAAA,sBAAsB,CAACE,OAAO,CAACQ,CAAD,CAAR,EAAaP,QAAb,EAAuBE,KAAvB,CAAtB;AACH,GAVL,CAYI;;;AACA,MAAIC,WAAJ,EACA;AACI,SAAK,IAAIM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGP,KAAK,CAACQ,MAA5B,EAAoCD,EAAE,EAAtC,EACA;AACI,WAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGT,KAAK,CAACU,KAA5B,EAAmCD,EAAE,EAArC,EACA;AACI,YAAIE,IAAI,GAAGX,KAAK,CAACY,IAAN,CAAWL,EAAX,EAAeE,EAAf,CAAX;;AAEA,YAAIE,IAAI,IAAId,OAAO,CAACgB,OAAR,CAAgBF,IAAI,CAACG,KAArB,MAAgC,CAAC,CAA7C,EACA;AACItB,UAAAA,gBAAgB,CAACmB,IAAD,EAAOb,QAAP,CAAhB;AACH;AACJ;AACJ;AACJ;;AAED,MAAIC,gBAAJ,EACA;AACIL,IAAAA,oBAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOM,KAAK,CAACU,KAAb,EAAoBV,KAAK,CAACQ,MAA1B,EAAkCR,KAAlC,CAApB;AACH;AACJ,CAlCD;;AAoCAe,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\r\n\r\n/**\r\n * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n * collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollision\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * @param {boolean} updateLayer - If true, updates the current tiles on the layer. Set to\r\n * false if no tiles have been placed for significant performance boost.\r\n */\r\nvar SetCollision = function (indexes, collides, recalculateFaces, layer, updateLayer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n    if (!Array.isArray(indexes)) { indexes = [ indexes ]; }\r\n    if (updateLayer === undefined) { updateLayer = true; }\r\n\r\n    // Update the array of colliding indexes\r\n    for (var i = 0; i < indexes.length; i++)\r\n    {\r\n        SetLayerCollisionIndex(indexes[i], collides, layer);\r\n    }\r\n    \r\n    // Update the tiles\r\n    if (updateLayer)\r\n    {\r\n        for (var ty = 0; ty < layer.height; ty++)\r\n        {\r\n            for (var tx = 0; tx < layer.width; tx++)\r\n            {\r\n                var tile = layer.data[ty][tx];\r\n\r\n                if (tile && indexes.indexOf(tile.index) !== -1)\r\n                {\r\n                    SetTileCollision(tile, collides);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollision;\r\n"]},"metadata":{},"sourceType":"script"}