{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\r\n * the loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\r\n * \r\n * You shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class MultiFile\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {string} type - The file type string for sorting within the Loader.\r\n * @param {string} key - The key of the file within the loader.\r\n * @param {Phaser.Loader.File[]} files - An array of Files that make-up this MultiFile.\r\n */\n\n\nvar MultiFile = new Class({\n  initialize: function MultiFile(loader, type, key, files) {\n    /**\r\n     * A reference to the Loader that is going to load this file.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#loader\r\n     * @type {Phaser.Loader.LoaderPlugin}\r\n     * @since 3.7.0\r\n     */\n    this.loader = loader;\n    /**\r\n     * The file type string for sorting within the Loader.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#type\r\n     * @type {string}\r\n     * @since 3.7.0\r\n     */\n\n    this.type = type;\n    /**\r\n     * Unique cache key (unique within its file type)\r\n     *\r\n     * @name Phaser.Loader.MultiFile#key\r\n     * @type {string}\r\n     * @since 3.7.0\r\n     */\n\n    this.key = key;\n    /**\r\n     * The current index being used by multi-file loaders to avoid key clashes.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#multiKeyIndex\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.20.0\r\n     */\n\n    this.multiKeyIndex = loader.multiKeyIndex++;\n    /**\r\n     * Array of files that make up this MultiFile.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#files\r\n     * @type {Phaser.Loader.File[]}\r\n     * @since 3.7.0\r\n     */\n\n    this.files = files;\n    /**\r\n     * The completion status of this MultiFile.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#complete\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.7.0\r\n     */\n\n    this.complete = false;\n    /**\r\n     * The number of files to load.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#pending\r\n     * @type {integer}\r\n     * @since 3.7.0\r\n     */\n\n    this.pending = files.length;\n    /**\r\n     * The number of files that failed to load.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#failed\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.7.0\r\n     */\n\n    this.failed = 0;\n    /**\r\n     * A storage container for transient data that the loading files need.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#config\r\n     * @type {any}\r\n     * @since 3.7.0\r\n     */\n\n    this.config = {};\n    /**\r\n     * A reference to the Loaders baseURL at the time this MultiFile was created.\r\n     * Used to populate child-files.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#baseURL\r\n     * @type {string}\r\n     * @since 3.20.0\r\n     */\n\n    this.baseURL = loader.baseURL;\n    /**\r\n     * A reference to the Loaders path at the time this MultiFile was created.\r\n     * Used to populate child-files.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#path\r\n     * @type {string}\r\n     * @since 3.20.0\r\n     */\n\n    this.path = loader.path;\n    /**\r\n     * A reference to the Loaders prefix at the time this MultiFile was created.\r\n     * Used to populate child-files.\r\n     *\r\n     * @name Phaser.Loader.MultiFile#prefix\r\n     * @type {string}\r\n     * @since 3.20.0\r\n     */\n\n    this.prefix = loader.prefix; //  Link the files\n\n    for (var i = 0; i < files.length; i++) {\n      files[i].multiFile = this;\n    }\n  },\n\n  /**\r\n   * Checks if this MultiFile is ready to process its children or not.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#isReadyToProcess\r\n   * @since 3.7.0\r\n   *\r\n   * @return {boolean} `true` if all children of this MultiFile have loaded, otherwise `false`.\r\n   */\n  isReadyToProcess: function () {\n    return this.pending === 0 && this.failed === 0 && !this.complete;\n  },\n\n  /**\r\n   * Adds another child to this MultiFile, increases the pending count and resets the completion status.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#addToMultiFile\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} files - The File to add to this MultiFile.\r\n   *\r\n   * @return {Phaser.Loader.MultiFile} This MultiFile instance.\r\n   */\n  addToMultiFile: function (file) {\n    this.files.push(file);\n    file.multiFile = this;\n    this.pending++;\n    this.complete = false;\n    return this;\n  },\n\n  /**\r\n   * Called by each File when it finishes loading.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#onFileComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n   */\n  onFileComplete: function (file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n    }\n  },\n\n  /**\r\n   * Called by each File that fails to load.\r\n   *\r\n   * @method Phaser.Loader.MultiFile#onFileFailed\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has failed to load.\r\n   */\n  onFileFailed: function (file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.failed++;\n    }\n  }\n});\nmodule.exports = MultiFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/MultiFile.js"],"names":["Class","require","MultiFile","initialize","loader","type","key","files","multiKeyIndex","complete","pending","length","failed","config","baseURL","path","prefix","i","multiFile","isReadyToProcess","addToMultiFile","file","push","onFileComplete","index","indexOf","onFileFailed","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,SAAS,GAAG,IAAIF,KAAJ,CAAU;AAEtBG,EAAAA,UAAU,EAEV,SAASD,SAAT,CAAoBE,MAApB,EAA4BC,IAA5B,EAAkCC,GAAlC,EAAuCC,KAAvC,EACA;AACI;;;;;;;AAOA,SAAKH,MAAL,GAAcA,MAAd;AAEA;;;;;;;;AAOA,SAAKC,IAAL,GAAYA,IAAZ;AAEA;;;;;;;;AAOA,SAAKC,GAAL,GAAWA,GAAX;AAEA;;;;;;;;;AAQA,SAAKE,aAAL,GAAqBJ,MAAM,CAACI,aAAP,EAArB;AAEA;;;;;;;;AAOA,SAAKD,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;AAQA,SAAKE,QAAL,GAAgB,KAAhB;AAEA;;;;;;;;AAQA,SAAKC,OAAL,GAAeH,KAAK,CAACI,MAArB;AAEA;;;;;;;;;AAQA,SAAKC,MAAL,GAAc,CAAd;AAEA;;;;;;;;AAOA,SAAKC,MAAL,GAAc,EAAd;AAEA;;;;;;;;;AAQA,SAAKC,OAAL,GAAeV,MAAM,CAACU,OAAtB;AAEA;;;;;;;;;AAQA,SAAKC,IAAL,GAAYX,MAAM,CAACW,IAAnB;AAEA;;;;;;;;;AAQA,SAAKC,MAAL,GAAcZ,MAAM,CAACY,MAArB,CAlHJ,CAoHI;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,KAAK,CAACI,MAA1B,EAAkCM,CAAC,EAAnC,EACA;AACIV,MAAAA,KAAK,CAACU,CAAD,CAAL,CAASC,SAAT,GAAqB,IAArB;AACH;AACJ,GA9HqB;;AAgItB;;;;;;;;AAQAC,EAAAA,gBAAgB,EAAE,YAClB;AACI,WAAQ,KAAKT,OAAL,KAAiB,CAAjB,IAAsB,KAAKE,MAAL,KAAgB,CAAtC,IAA2C,CAAC,KAAKH,QAAzD;AACH,GA3IqB;;AA6ItB;;;;;;;;;;AAUAW,EAAAA,cAAc,EAAE,UAAUC,IAAV,EAChB;AACI,SAAKd,KAAL,CAAWe,IAAX,CAAgBD,IAAhB;AAEAA,IAAAA,IAAI,CAACH,SAAL,GAAiB,IAAjB;AAEA,SAAKR,OAAL;AAEA,SAAKD,QAAL,GAAgB,KAAhB;AAEA,WAAO,IAAP;AACH,GAlKqB;;AAoKtB;;;;;;;;AAQAc,EAAAA,cAAc,EAAE,UAAUF,IAAV,EAChB;AACI,QAAIG,KAAK,GAAG,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBJ,IAAnB,CAAZ;;AAEA,QAAIG,KAAK,KAAK,CAAC,CAAf,EACA;AACI,WAAKd,OAAL;AACH;AACJ,GApLqB;;AAsLtB;;;;;;;;AAQAgB,EAAAA,YAAY,EAAE,UAAUL,IAAV,EACd;AACI,QAAIG,KAAK,GAAG,KAAKjB,KAAL,CAAWkB,OAAX,CAAmBJ,IAAnB,CAAZ;;AAEA,QAAIG,KAAK,KAAK,CAAC,CAAf,EACA;AACI,WAAKZ,MAAL;AACH;AACJ;AAtMqB,CAAV,CAAhB;AA0MAe,MAAM,CAACC,OAAP,GAAiB1B,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A MultiFile is a special kind of parent that contains two, or more, Files as children and looks after\r\n * the loading and processing of them all. It is commonly extended and used as a base class for file types such as AtlasJSON or BitmapFont.\r\n * \r\n * You shouldn't create an instance of a MultiFile directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class MultiFile\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {string} type - The file type string for sorting within the Loader.\r\n * @param {string} key - The key of the file within the loader.\r\n * @param {Phaser.Loader.File[]} files - An array of Files that make-up this MultiFile.\r\n */\r\nvar MultiFile = new Class({\r\n\r\n    initialize:\r\n\r\n    function MultiFile (loader, type, key, files)\r\n    {\r\n        /**\r\n         * A reference to the Loader that is going to load this file.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#loader\r\n         * @type {Phaser.Loader.LoaderPlugin}\r\n         * @since 3.7.0\r\n         */\r\n        this.loader = loader;\r\n\r\n        /**\r\n         * The file type string for sorting within the Loader.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#type\r\n         * @type {string}\r\n         * @since 3.7.0\r\n         */\r\n        this.type = type;\r\n\r\n        /**\r\n         * Unique cache key (unique within its file type)\r\n         *\r\n         * @name Phaser.Loader.MultiFile#key\r\n         * @type {string}\r\n         * @since 3.7.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * The current index being used by multi-file loaders to avoid key clashes.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#multiKeyIndex\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.20.0\r\n         */\r\n        this.multiKeyIndex = loader.multiKeyIndex++;\r\n\r\n        /**\r\n         * Array of files that make up this MultiFile.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#files\r\n         * @type {Phaser.Loader.File[]}\r\n         * @since 3.7.0\r\n         */\r\n        this.files = files;\r\n\r\n        /**\r\n         * The completion status of this MultiFile.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#complete\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.7.0\r\n         */\r\n        this.complete = false;\r\n\r\n        /**\r\n         * The number of files to load.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#pending\r\n         * @type {integer}\r\n         * @since 3.7.0\r\n         */\r\n\r\n        this.pending = files.length;\r\n\r\n        /**\r\n         * The number of files that failed to load.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#failed\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.7.0\r\n         */\r\n        this.failed = 0;\r\n\r\n        /**\r\n         * A storage container for transient data that the loading files need.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#config\r\n         * @type {any}\r\n         * @since 3.7.0\r\n         */\r\n        this.config = {};\r\n\r\n        /**\r\n         * A reference to the Loaders baseURL at the time this MultiFile was created.\r\n         * Used to populate child-files.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#baseURL\r\n         * @type {string}\r\n         * @since 3.20.0\r\n         */\r\n        this.baseURL = loader.baseURL;\r\n\r\n        /**\r\n         * A reference to the Loaders path at the time this MultiFile was created.\r\n         * Used to populate child-files.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#path\r\n         * @type {string}\r\n         * @since 3.20.0\r\n         */\r\n        this.path = loader.path;\r\n\r\n        /**\r\n         * A reference to the Loaders prefix at the time this MultiFile was created.\r\n         * Used to populate child-files.\r\n         *\r\n         * @name Phaser.Loader.MultiFile#prefix\r\n         * @type {string}\r\n         * @since 3.20.0\r\n         */\r\n        this.prefix = loader.prefix;\r\n\r\n        //  Link the files\r\n        for (var i = 0; i < files.length; i++)\r\n        {\r\n            files[i].multiFile = this;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if this MultiFile is ready to process its children or not.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#isReadyToProcess\r\n     * @since 3.7.0\r\n     *\r\n     * @return {boolean} `true` if all children of this MultiFile have loaded, otherwise `false`.\r\n     */\r\n    isReadyToProcess: function ()\r\n    {\r\n        return (this.pending === 0 && this.failed === 0 && !this.complete);\r\n    },\r\n\r\n    /**\r\n     * Adds another child to this MultiFile, increases the pending count and resets the completion status.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#addToMultiFile\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} files - The File to add to this MultiFile.\r\n     *\r\n     * @return {Phaser.Loader.MultiFile} This MultiFile instance.\r\n     */\r\n    addToMultiFile: function (file)\r\n    {\r\n        this.files.push(file);\r\n\r\n        file.multiFile = this;\r\n\r\n        this.pending++;\r\n\r\n        this.complete = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Called by each File when it finishes loading.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#onFileComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n     */\r\n    onFileComplete: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.pending--;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by each File that fails to load.\r\n     *\r\n     * @method Phaser.Loader.MultiFile#onFileFailed\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has failed to load.\r\n     */\r\n    onFileFailed: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.failed++;\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MultiFile;\r\n"]},"metadata":{},"sourceType":"script"}