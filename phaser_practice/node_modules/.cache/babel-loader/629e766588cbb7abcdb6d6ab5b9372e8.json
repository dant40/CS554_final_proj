{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * @ignore\r\n */\nfunction P0(t, p) {\n  var k = 1 - t;\n  return k * k * k * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P1(t, p) {\n  var k = 1 - t;\n  return 3 * k * k * t * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P2(t, p) {\n  return 3 * (1 - t) * t * t * p;\n}\n/**\r\n * @ignore\r\n */\n\n\nfunction P3(t, p) {\n  return t * t * t * p;\n}\n/**\r\n * A cubic bezier interpolation method.\r\n *\r\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\r\n *\r\n * @function Phaser.Math.Interpolation.CubicBezier\r\n * @since 3.0.0\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} p0 - The start point.\r\n * @param {number} p1 - The first control point.\r\n * @param {number} p2 - The second control point.\r\n * @param {number} p3 - The end point.\r\n *\r\n * @return {number} The interpolated value.\r\n */\n\n\nvar CubicBezierInterpolation = function (t, p0, p1, p2, p3) {\n  return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\n};\n\nmodule.exports = CubicBezierInterpolation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/interpolation/CubicBezierInterpolation.js"],"names":["P0","t","p","k","P1","P2","P3","CubicBezierInterpolation","p0","p1","p2","p3","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;AAGA,SAASA,EAAT,CAAaC,CAAb,EAAgBC,CAAhB,EACA;AACI,MAAIC,CAAC,GAAG,IAAIF,CAAZ;AAEA,SAAOE,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYD,CAAnB;AACH;AAED;;;;;AAGA,SAASE,EAAT,CAAaH,CAAb,EAAgBC,CAAhB,EACA;AACI,MAAIC,CAAC,GAAG,IAAIF,CAAZ;AAEA,SAAO,IAAIE,CAAJ,GAAQA,CAAR,GAAYF,CAAZ,GAAgBC,CAAvB;AACH;AAED;;;;;AAGA,SAASG,EAAT,CAAaJ,CAAb,EAAgBC,CAAhB,EACA;AACI,SAAO,KAAK,IAAID,CAAT,IAAcA,CAAd,GAAkBA,CAAlB,GAAsBC,CAA7B;AACH;AAED;;;;;AAGA,SAASI,EAAT,CAAaL,CAAb,EAAgBC,CAAhB,EACA;AACI,SAAOD,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYC,CAAnB;AACH;AAED;;;;;;;;;;;;;;;;;;AAgBA,IAAIK,wBAAwB,GAAG,UAAUN,CAAV,EAAaO,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAC/B;AACI,SAAOX,EAAE,CAACC,CAAD,EAAIO,EAAJ,CAAF,GAAYJ,EAAE,CAACH,CAAD,EAAIQ,EAAJ,CAAd,GAAwBJ,EAAE,CAACJ,CAAD,EAAIS,EAAJ,CAA1B,GAAoCJ,EAAE,CAACL,CAAD,EAAIU,EAAJ,CAA7C;AACH,CAHD;;AAKAC,MAAM,CAACC,OAAP,GAAiBN,wBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P0 (t, p)\r\n{\r\n    var k = 1 - t;\r\n\r\n    return k * k * k * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P1 (t, p)\r\n{\r\n    var k = 1 - t;\r\n\r\n    return 3 * k * k * t * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P2 (t, p)\r\n{\r\n    return 3 * (1 - t) * t * t * p;\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction P3 (t, p)\r\n{\r\n    return t * t * t * p;\r\n}\r\n\r\n/**\r\n * A cubic bezier interpolation method.\r\n *\r\n * https://medium.com/@adrian_cooney/bezier-interpolation-13b68563313a\r\n *\r\n * @function Phaser.Math.Interpolation.CubicBezier\r\n * @since 3.0.0\r\n *\r\n * @param {number} t - The percentage of interpolation, between 0 and 1.\r\n * @param {number} p0 - The start point.\r\n * @param {number} p1 - The first control point.\r\n * @param {number} p2 - The second control point.\r\n * @param {number} p3 - The end point.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nvar CubicBezierInterpolation = function (t, p0, p1, p2, p3)\r\n{\r\n    return P0(t, p0) + P1(t, p1) + P2(t, p2) + P3(t, p3);\r\n};\r\n\r\nmodule.exports = CubicBezierInterpolation;\r\n"]},"metadata":{},"sourceType":"script"}