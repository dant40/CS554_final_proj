{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Clone = require('../utils/object/Clone');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar GameEvents = require('../core/events');\n\nvar NOOP = require('../utils/NOOP');\n/**\r\n * @classdesc\r\n * The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\r\n * The audio file type and the encoding of those files are extremely important.\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class BaseSoundManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar BaseSoundManager = new Class({\n  Extends: EventEmitter,\n  initialize: function BaseSoundManager(game) {\n    EventEmitter.call(this);\n    /**\r\n     * Local reference to game.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#game\r\n     * @type {Phaser.Game}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.game = game;\n    /**\r\n     * Local reference to the JSON Cache, as used by Audio Sprites.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#jsonCache\r\n     * @type {Phaser.Cache.BaseCache}\r\n     * @readonly\r\n     * @since 3.7.0\r\n     */\n\n    this.jsonCache = game.cache.json;\n    /**\r\n     * An array containing all added sounds.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#sounds\r\n     * @type {Phaser.Sound.BaseSound[]}\r\n     * @default []\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.sounds = [];\n    /**\r\n     * Global mute setting.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#mute\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.mute = false;\n    /**\r\n     * Global volume setting.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#volume\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.volume = 1;\n    /**\r\n     * Flag indicating if sounds should be paused when game looses focus,\r\n     * for instance when user switches to another tab/program/app.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#pauseOnBlur\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.pauseOnBlur = true;\n    /**\r\n     * Property that actually holds the value of global playback rate.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#_rate\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._rate = 1;\n    /**\r\n     * Property that actually holds the value of global detune.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#_detune\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._detune = 0;\n    /**\r\n     * Mobile devices require sounds to be triggered from an explicit user action,\r\n     * such as a tap, before any sound can be loaded/played on a web page.\r\n     * Set to true if the audio system is currently locked awaiting user interaction.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#locked\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.locked = this.locked || false;\n    /**\r\n     * Flag used internally for handling when the audio system\r\n     * has been unlocked, if there ever was a need for it.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#unlocked\r\n     * @type {boolean}\r\n     * @default false\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.unlocked = false;\n    game.events.on(GameEvents.BLUR, function () {\n      if (this.pauseOnBlur) {\n        this.onBlur();\n      }\n    }, this);\n    game.events.on(GameEvents.FOCUS, function () {\n      if (this.pauseOnBlur) {\n        this.onFocus();\n      }\n    }, this);\n    game.events.on(GameEvents.PRE_STEP, this.update, this);\n    game.events.once(GameEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#add\r\n   * @override\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.BaseSound} The new sound instance.\r\n   */\n  add: NOOP,\n\n  /**\r\n   * Adds a new audio sprite sound into the sound manager.\r\n   * Audio Sprites are a combination of audio files and a JSON configuration.\r\n   * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#addAudioSprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {(Phaser.Sound.HTML5AudioSound|Phaser.Sound.WebAudioSound)} The new audio sprite sound instance.\r\n   */\n  addAudioSprite: function (key, config) {\n    if (config === undefined) {\n      config = {};\n    }\n\n    var sound = this.add(key, config);\n    sound.spritemap = this.jsonCache.get(key).spritemap;\n\n    for (var markerName in sound.spritemap) {\n      if (!sound.spritemap.hasOwnProperty(markerName)) {\n        continue;\n      }\n\n      var markerConfig = Clone(config);\n      var marker = sound.spritemap[markerName];\n      markerConfig.loop = marker.hasOwnProperty('loop') ? marker.loop : false;\n      sound.addMarker({\n        name: markerName,\n        start: marker.start,\n        duration: marker.end - marker.start,\n        config: markerConfig\n      });\n    }\n\n    return sound;\n  },\n\n  /**\r\n   * Adds a new sound to the sound manager and plays it.\r\n   * The sound will be automatically removed (destroyed) once playback ends.\r\n   * This lets you play a new sound on the fly without the need to keep a reference to it.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#play\r\n   * @listens Phaser.Sound.Events#COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {(Phaser.Types.Sound.SoundConfig|Phaser.Types.Sound.SoundMarker)} [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.\r\n   *\r\n   * @return {boolean} Whether the sound started playing successfully.\r\n   */\n  play: function (key, extra) {\n    var sound = this.add(key);\n    sound.once(Events.COMPLETE, sound.destroy, sound);\n\n    if (extra) {\n      if (extra.name) {\n        sound.addMarker(extra);\n        return sound.play(extra.name);\n      } else {\n        return sound.play(extra);\n      }\n    } else {\n      return sound.play();\n    }\n  },\n\n  /**\r\n   * Enables playing audio sprite sound on the fly without the need to keep a reference to it.\r\n   * Sound will auto destroy once its playback ends.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#playAudioSprite\r\n   * @listens Phaser.Sound.Events#COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {string} spriteName - The name of the sound sprite to play.\r\n   * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {boolean} Whether the audio sprite sound started playing successfully.\r\n   */\n  playAudioSprite: function (key, spriteName, config) {\n    var sound = this.addAudioSprite(key);\n    sound.once(Events.COMPLETE, sound.destroy, sound);\n    return sound.play(spriteName, config);\n  },\n\n  /**\r\n   * Removes a sound from the sound manager.\r\n   * The removed sound is destroyed before removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Sound.BaseSound} sound - The sound object to remove.\r\n   *\r\n   * @return {boolean} True if the sound was removed successfully, otherwise false.\r\n   */\n  remove: function (sound) {\n    var index = this.sounds.indexOf(sound);\n\n    if (index !== -1) {\n      sound.destroy();\n      this.sounds.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Removes all sounds from the sound manager that have an asset key matching the given value.\r\n   * The removed sounds are destroyed before removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#removeByKey\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key to match when removing sound objects.\r\n   *\r\n   * @return {number} The number of matching sound objects that were removed.\r\n   */\n  removeByKey: function (key) {\n    var removed = 0;\n\n    for (var i = this.sounds.length - 1; i >= 0; i--) {\n      var sound = this.sounds[i];\n\n      if (sound.key === key) {\n        sound.destroy();\n        this.sounds.splice(i, 1);\n        removed++;\n      }\n    }\n\n    return removed;\n  },\n\n  /**\r\n   * Pauses all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#pauseAll\r\n   * @fires Phaser.Sound.Events#PAUSE_ALL\r\n   * @since 3.0.0\r\n   */\n  pauseAll: function () {\n    this.forEachActiveSound(function (sound) {\n      sound.pause();\n    });\n    this.emit(Events.PAUSE_ALL, this);\n  },\n\n  /**\r\n   * Resumes all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#resumeAll\r\n   * @fires Phaser.Sound.Events#RESUME_ALL\r\n   * @since 3.0.0\r\n   */\n  resumeAll: function () {\n    this.forEachActiveSound(function (sound) {\n      sound.resume();\n    });\n    this.emit(Events.RESUME_ALL, this);\n  },\n\n  /**\r\n   * Stops all the sounds in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#stopAll\r\n   * @fires Phaser.Sound.Events#STOP_ALL\r\n   * @since 3.0.0\r\n   */\n  stopAll: function () {\n    this.forEachActiveSound(function (sound) {\n      sound.stop();\n    });\n    this.emit(Events.STOP_ALL, this);\n  },\n\n  /**\r\n   * Method used internally for unlocking audio playback on devices that\r\n   * require user interaction before any sound can be played on a web page.\r\n   *\r\n   * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#unlock\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  unlock: NOOP,\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#onBlur\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: NOOP,\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#onFocus\r\n   * @override\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: NOOP,\n\n  /**\r\n   * Update method called on every game step.\r\n   * Removes destroyed sounds and updates every active sound in the game.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#update\r\n   * @protected\r\n   * @fires Phaser.Sound.Events#UNLOCKED\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (this.unlocked) {\n      this.unlocked = false;\n      this.locked = false;\n      this.emit(Events.UNLOCKED, this);\n    }\n\n    for (var i = this.sounds.length - 1; i >= 0; i--) {\n      if (this.sounds[i].pendingRemove) {\n        this.sounds.splice(i, 1);\n      }\n    }\n\n    this.sounds.forEach(function (sound) {\n      sound.update(time, delta);\n    });\n  },\n\n  /**\r\n   * Destroys all the sounds in the game and all associated events.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.removeAllListeners();\n    this.forEachActiveSound(function (sound) {\n      sound.destroy();\n    });\n    this.sounds.length = 0;\n    this.sounds = null;\n    this.game = null;\n  },\n\n  /**\r\n   * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#forEachActiveSound\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Sound.EachActiveSoundCallback} callback - Callback function. (manager: Phaser.Sound.BaseSoundManager, sound: Phaser.Sound.BaseSound, index: number, sounds: Phaser.Manager.BaseSound[]) => void\r\n   * @param {*} [scope] - Callback context.\r\n   */\n  forEachActiveSound: function (callback, scope) {\n    var _this = this;\n\n    this.sounds.forEach(function (sound, index) {\n      if (sound && !sound.pendingRemove) {\n        callback.call(scope || _this, sound, index, _this.sounds);\n      }\n    });\n  },\n\n  /**\r\n   * Sets the global playback rate at which all the sounds will be played.\r\n   *\r\n   * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audios playback speed.\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#setRate\r\n   * @fires Phaser.Sound.Events#GLOBAL_RATE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - Global playback rate at which all the sounds will be played.\r\n   *\r\n   * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n   */\n  setRate: function (value) {\n    this.rate = value;\n    return this;\n  },\n\n  /**\r\n   * Global playback rate at which all the sounds will be played.\r\n   * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n   * and 2.0 doubles the audio's playback speed.\r\n   *\r\n   * @name Phaser.Sound.BaseSoundManager#rate\r\n   * @type {number}\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  rate: {\n    get: function () {\n      return this._rate;\n    },\n    set: function (value) {\n      this._rate = value;\n      this.forEachActiveSound(function (sound) {\n        sound.calculateRate();\n      });\n      this.emit(Events.GLOBAL_RATE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @method Phaser.Sound.BaseSoundManager#setDetune\r\n   * @fires Phaser.Sound.Events#GLOBAL_DETUNE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n   */\n  setDetune: function (value) {\n    this.detune = value;\n    return this;\n  },\n\n  /**\r\n   * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n   * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n   *\r\n   * @name Phaser.Sound.BaseSoundManager#detune\r\n   * @type {number}\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  detune: {\n    get: function () {\n      return this._detune;\n    },\n    set: function (value) {\n      this._detune = value;\n      this.forEachActiveSound(function (sound) {\n        sound.calculateRate();\n      });\n      this.emit(Events.GLOBAL_DETUNE, this, value);\n    }\n  }\n});\nmodule.exports = BaseSoundManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/sound/BaseSoundManager.js"],"names":["Class","require","Clone","EventEmitter","Events","GameEvents","NOOP","BaseSoundManager","Extends","initialize","game","call","jsonCache","cache","json","sounds","mute","volume","pauseOnBlur","_rate","_detune","locked","unlocked","events","on","BLUR","onBlur","FOCUS","onFocus","PRE_STEP","update","once","DESTROY","destroy","add","addAudioSprite","key","config","undefined","sound","spritemap","get","markerName","hasOwnProperty","markerConfig","marker","loop","addMarker","name","start","duration","end","play","extra","COMPLETE","playAudioSprite","spriteName","remove","index","indexOf","splice","removeByKey","removed","i","length","pauseAll","forEachActiveSound","pause","emit","PAUSE_ALL","resumeAll","resume","RESUME_ALL","stopAll","stop","STOP_ALL","unlock","time","delta","UNLOCKED","pendingRemove","forEach","removeAllListeners","callback","scope","_this","setRate","value","rate","set","calculateRate","GLOBAL_RATE","setDetune","detune","GLOBAL_DETUNE","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Clone = require('../utils/object/Clone');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar GameEvents = require('../core/events');\r\nvar NOOP = require('../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * The sound manager is responsible for playing back audio via Web Audio API or HTML Audio tag as fallback.\r\n * The audio file type and the encoding of those files are extremely important.\r\n *\r\n * Not all browsers can play all audio formats.\r\n *\r\n * There is a good guide to what's supported [here](https://developer.mozilla.org/en-US/Apps/Fundamentals/Audio_and_video_delivery/Cross-browser_audio_basics#Audio_Codec_Support).\r\n *\r\n * @class BaseSoundManager\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar BaseSoundManager = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function BaseSoundManager (game)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * Local reference to game.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#game\r\n         * @type {Phaser.Game}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * Local reference to the JSON Cache, as used by Audio Sprites.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#jsonCache\r\n         * @type {Phaser.Cache.BaseCache}\r\n         * @readonly\r\n         * @since 3.7.0\r\n         */\r\n        this.jsonCache = game.cache.json;\r\n\r\n        /**\r\n         * An array containing all added sounds.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#sounds\r\n         * @type {Phaser.Sound.BaseSound[]}\r\n         * @default []\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.sounds = [];\r\n\r\n        /**\r\n         * Global mute setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#mute\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.mute = false;\r\n\r\n        /**\r\n         * Global volume setting.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#volume\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.volume = 1;\r\n\r\n        /**\r\n         * Flag indicating if sounds should be paused when game looses focus,\r\n         * for instance when user switches to another tab/program/app.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#pauseOnBlur\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.pauseOnBlur = true;\r\n\r\n        /**\r\n         * Property that actually holds the value of global playback rate.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_rate\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._rate = 1;\r\n\r\n        /**\r\n         * Property that actually holds the value of global detune.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#_detune\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._detune = 0;\r\n\r\n        /**\r\n         * Mobile devices require sounds to be triggered from an explicit user action,\r\n         * such as a tap, before any sound can be loaded/played on a web page.\r\n         * Set to true if the audio system is currently locked awaiting user interaction.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#locked\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.locked = this.locked || false;\r\n\r\n        /**\r\n         * Flag used internally for handling when the audio system\r\n         * has been unlocked, if there ever was a need for it.\r\n         *\r\n         * @name Phaser.Sound.BaseSoundManager#unlocked\r\n         * @type {boolean}\r\n         * @default false\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.unlocked = false;\r\n\r\n        game.events.on(GameEvents.BLUR, function ()\r\n        {\r\n            if (this.pauseOnBlur)\r\n            {\r\n                this.onBlur();\r\n            }\r\n        }, this);\r\n\r\n        game.events.on(GameEvents.FOCUS, function ()\r\n        {\r\n            if (this.pauseOnBlur)\r\n            {\r\n                this.onFocus();\r\n            }\r\n        }, this);\r\n\r\n        game.events.on(GameEvents.PRE_STEP, this.update, this);\r\n        game.events.once(GameEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#add\r\n     * @override\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.BaseSound} The new sound instance.\r\n     */\r\n    add: NOOP,\r\n\r\n    /**\r\n     * Adds a new audio sprite sound into the sound manager.\r\n     * Audio Sprites are a combination of audio files and a JSON configuration.\r\n     * The JSON follows the format of that created by https://github.com/tonistiigi/audiosprite\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#addAudioSprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {(Phaser.Sound.HTML5AudioSound|Phaser.Sound.WebAudioSound)} The new audio sprite sound instance.\r\n     */\r\n    addAudioSprite: function (key, config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        var sound = this.add(key, config);\r\n\r\n        sound.spritemap = this.jsonCache.get(key).spritemap;\r\n\r\n        for (var markerName in sound.spritemap)\r\n        {\r\n            if (!sound.spritemap.hasOwnProperty(markerName))\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var markerConfig = Clone(config);\r\n\r\n            var marker = sound.spritemap[markerName];\r\n\r\n            markerConfig.loop = (marker.hasOwnProperty('loop')) ? marker.loop : false;\r\n\r\n            sound.addMarker({\r\n                name: markerName,\r\n                start: marker.start,\r\n                duration: marker.end - marker.start,\r\n                config: markerConfig\r\n            });\r\n        }\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound to the sound manager and plays it.\r\n     * The sound will be automatically removed (destroyed) once playback ends.\r\n     * This lets you play a new sound on the fly without the need to keep a reference to it.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#play\r\n     * @listens Phaser.Sound.Events#COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {(Phaser.Types.Sound.SoundConfig|Phaser.Types.Sound.SoundMarker)} [extra] - An optional additional object containing settings to be applied to the sound. It could be either config or marker object.\r\n     *\r\n     * @return {boolean} Whether the sound started playing successfully.\r\n     */\r\n    play: function (key, extra)\r\n    {\r\n        var sound = this.add(key);\r\n\r\n        sound.once(Events.COMPLETE, sound.destroy, sound);\r\n\r\n        if (extra)\r\n        {\r\n            if (extra.name)\r\n            {\r\n                sound.addMarker(extra);\r\n\r\n                return sound.play(extra.name);\r\n            }\r\n            else\r\n            {\r\n                return sound.play(extra);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            return sound.play();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Enables playing audio sprite sound on the fly without the need to keep a reference to it.\r\n     * Sound will auto destroy once its playback ends.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#playAudioSprite\r\n     * @listens Phaser.Sound.Events#COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {string} spriteName - The name of the sound sprite to play.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {boolean} Whether the audio sprite sound started playing successfully.\r\n     */\r\n    playAudioSprite: function (key, spriteName, config)\r\n    {\r\n        var sound = this.addAudioSprite(key);\r\n\r\n        sound.once(Events.COMPLETE, sound.destroy, sound);\r\n\r\n        return sound.play(spriteName, config);\r\n    },\r\n\r\n    /**\r\n     * Removes a sound from the sound manager.\r\n     * The removed sound is destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.BaseSound} sound - The sound object to remove.\r\n     *\r\n     * @return {boolean} True if the sound was removed successfully, otherwise false.\r\n     */\r\n    remove: function (sound)\r\n    {\r\n        var index = this.sounds.indexOf(sound);\r\n\r\n        if (index !== -1)\r\n        {\r\n            sound.destroy();\r\n\r\n            this.sounds.splice(index, 1);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Removes all sounds from the sound manager that have an asset key matching the given value.\r\n     * The removed sounds are destroyed before removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#removeByKey\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key to match when removing sound objects.\r\n     *\r\n     * @return {number} The number of matching sound objects that were removed.\r\n     */\r\n    removeByKey: function (key)\r\n    {\r\n        var removed = 0;\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            var sound = this.sounds[i];\r\n\r\n            if (sound.key === key)\r\n            {\r\n                sound.destroy();\r\n\r\n                this.sounds.splice(i, 1);\r\n\r\n                removed++;\r\n            }\r\n        }\r\n\r\n        return removed;\r\n    },\r\n\r\n    /**\r\n     * Pauses all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#pauseAll\r\n     * @fires Phaser.Sound.Events#PAUSE_ALL\r\n     * @since 3.0.0\r\n     */\r\n    pauseAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.pause();\r\n        });\r\n\r\n        this.emit(Events.PAUSE_ALL, this);\r\n    },\r\n\r\n    /**\r\n     * Resumes all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#resumeAll\r\n     * @fires Phaser.Sound.Events#RESUME_ALL\r\n     * @since 3.0.0\r\n     */\r\n    resumeAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.resume();\r\n        });\r\n\r\n        this.emit(Events.RESUME_ALL, this);\r\n    },\r\n\r\n    /**\r\n     * Stops all the sounds in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#stopAll\r\n     * @fires Phaser.Sound.Events#STOP_ALL\r\n     * @since 3.0.0\r\n     */\r\n    stopAll: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.stop();\r\n        });\r\n\r\n        this.emit(Events.STOP_ALL, this);\r\n    },\r\n\r\n    /**\r\n     * Method used internally for unlocking audio playback on devices that\r\n     * require user interaction before any sound can be played on a web page.\r\n     *\r\n     * Read more about how this issue is handled here in [this article](https://medium.com/@pgoloskokovic/unlocking-web-audio-the-smarter-way-8858218c0e09).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#unlock\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    unlock: NOOP,\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onBlur\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: NOOP,\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.BaseSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#onFocus\r\n     * @override\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: NOOP,\r\n\r\n    /**\r\n     * Update method called on every game step.\r\n     * Removes destroyed sounds and updates every active sound in the game.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#update\r\n     * @protected\r\n     * @fires Phaser.Sound.Events#UNLOCKED\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.unlocked)\r\n        {\r\n            this.unlocked = false;\r\n            this.locked = false;\r\n\r\n            this.emit(Events.UNLOCKED, this);\r\n        }\r\n\r\n        for (var i = this.sounds.length - 1; i >= 0; i--)\r\n        {\r\n            if (this.sounds[i].pendingRemove)\r\n            {\r\n                this.sounds.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        this.sounds.forEach(function (sound)\r\n        {\r\n            sound.update(time, delta);\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Destroys all the sounds in the game and all associated events.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.removeAllListeners();\r\n\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            sound.destroy();\r\n        });\r\n\r\n        this.sounds.length = 0;\r\n        this.sounds = null;\r\n\r\n        this.game = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally for iterating only over active sounds and skipping sounds that are marked for removal.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#forEachActiveSound\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Sound.EachActiveSoundCallback} callback - Callback function. (manager: Phaser.Sound.BaseSoundManager, sound: Phaser.Sound.BaseSound, index: number, sounds: Phaser.Manager.BaseSound[]) => void\r\n     * @param {*} [scope] - Callback context.\r\n     */\r\n    forEachActiveSound: function (callback, scope)\r\n    {\r\n        var _this = this;\r\n\r\n        this.sounds.forEach(function (sound, index)\r\n        {\r\n            if (sound && !sound.pendingRemove)\r\n            {\r\n                callback.call(scope || _this, sound, index, _this.sounds);\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Sets the global playback rate at which all the sounds will be played.\r\n     *\r\n     * For example, a value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audios playback speed.\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setRate\r\n     * @fires Phaser.Sound.Events#GLOBAL_RATE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - Global playback rate at which all the sounds will be played.\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setRate: function (value)\r\n    {\r\n        this.rate = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Global playback rate at which all the sounds will be played.\r\n     * Value of 1.0 plays the audio at full speed, 0.5 plays the audio at half speed\r\n     * and 2.0 doubles the audio's playback speed.\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#rate\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    rate: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rate;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._rate = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_RATE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @method Phaser.Sound.BaseSoundManager#setDetune\r\n     * @fires Phaser.Sound.Events#GLOBAL_DETUNE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @return {Phaser.Sound.BaseSoundManager} This Sound Manager.\r\n     */\r\n    setDetune: function (value)\r\n    {\r\n        this.detune = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Global detuning of all sounds in [cents](https://en.wikipedia.org/wiki/Cent_%28music%29).\r\n     * The range of the value is -1200 to 1200, but we recommend setting it to [50](https://en.wikipedia.org/wiki/50_Cent).\r\n     *\r\n     * @name Phaser.Sound.BaseSoundManager#detune\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    detune: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._detune;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._detune = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.calculateRate();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_DETUNE, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = BaseSoundManager;\r\n"]},"metadata":{},"sourceType":"script"}