{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetValue = require('../../utils/object/GetValue');\n/**\r\n * @classdesc\r\n * A Fixed Key Camera Control.\r\n *\r\n * This allows you to control the movement and zoom of a camera using the defined keys.\r\n *\r\n * ```javascript\r\n * var camControl = new FixedKeyControl({\r\n *     camera: this.cameras.main,\r\n *     left: cursors.left,\r\n *     right: cursors.right,\r\n *     speed: float OR { x: 0, y: 0 }\r\n * });\r\n * ```\r\n *\r\n * Movement is precise and has no 'smoothing' applied to it.\r\n *\r\n * You must call the `update` method of this controller every frame.\r\n *\r\n * @class FixedKeyControl\r\n * @memberof Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Cameras.Controls.FixedKeyControlConfig} config - The Fixed Key Control configuration object.\r\n */\n\n\nvar FixedKeyControl = new Class({\n  initialize: function FixedKeyControl(config) {\n    /**\r\n     * The Camera that this Control will update.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#camera\r\n     * @type {?Phaser.Cameras.Scene2D.Camera}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n    this.camera = GetValue(config, 'camera', null);\n    /**\r\n     * The Key to be pressed that will move the Camera left.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#left\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.left = GetValue(config, 'left', null);\n    /**\r\n     * The Key to be pressed that will move the Camera right.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#right\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.right = GetValue(config, 'right', null);\n    /**\r\n     * The Key to be pressed that will move the Camera up.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#up\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.up = GetValue(config, 'up', null);\n    /**\r\n     * The Key to be pressed that will move the Camera down.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#down\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.down = GetValue(config, 'down', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera in.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#zoomIn\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomIn = GetValue(config, 'zoomIn', null);\n    /**\r\n     * The Key to be pressed that will zoom the Camera out.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#zoomOut\r\n     * @type {?Phaser.Input.Keyboard.Key}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomOut = GetValue(config, 'zoomOut', null);\n    /**\r\n     * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#zoomSpeed\r\n     * @type {number}\r\n     * @default 0.01\r\n     * @since 3.0.0\r\n     */\n\n    this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\n    /**\r\n     * The horizontal speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#speedX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.speedX = 0;\n    /**\r\n     * The vertical speed the camera will move.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#speedY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.speedY = 0;\n    var speed = GetValue(config, 'speed', null);\n\n    if (typeof speed === 'number') {\n      this.speedX = speed;\n      this.speedY = speed;\n    } else {\n      this.speedX = GetValue(config, 'speed.x', 0);\n      this.speedY = GetValue(config, 'speed.y', 0);\n    }\n    /**\r\n     * Internal property to track the current zoom level.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#_zoom\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this._zoom = 0;\n    /**\r\n     * A flag controlling if the Controls will update the Camera or not.\r\n     *\r\n     * @name Phaser.Cameras.Controls.FixedKeyControl#active\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.active = this.camera !== null;\n  },\n\n  /**\r\n   * Starts the Key Control running, providing it has been linked to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.FixedKeyControl#start\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n   */\n  start: function () {\n    this.active = this.camera !== null;\n    return this;\n  },\n\n  /**\r\n   * Stops this Key Control from running. Call `start` to start it again.\r\n   *\r\n   * @method Phaser.Cameras.Controls.FixedKeyControl#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n   */\n  stop: function () {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Binds this Key Control to a camera.\r\n   *\r\n   * @method Phaser.Cameras.Controls.FixedKeyControl#setCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n   *\r\n   * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n   */\n  setCamera: function (camera) {\n    this.camera = camera;\n    return this;\n  },\n\n  /**\r\n   * Applies the results of pressing the control keys to the Camera.\r\n   *\r\n   * You must call this every step, it is not called automatically.\r\n   *\r\n   * @method Phaser.Cameras.Controls.FixedKeyControl#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function (delta) {\n    if (!this.active) {\n      return;\n    }\n\n    if (delta === undefined) {\n      delta = 1;\n    }\n\n    var cam = this.camera;\n\n    if (this.up && this.up.isDown) {\n      cam.scrollY -= this.speedY * delta | 0;\n    } else if (this.down && this.down.isDown) {\n      cam.scrollY += this.speedY * delta | 0;\n    }\n\n    if (this.left && this.left.isDown) {\n      cam.scrollX -= this.speedX * delta | 0;\n    } else if (this.right && this.right.isDown) {\n      cam.scrollX += this.speedX * delta | 0;\n    } //  Camera zoom\n\n\n    if (this.zoomIn && this.zoomIn.isDown) {\n      cam.zoom -= this.zoomSpeed;\n\n      if (cam.zoom < 0.1) {\n        cam.zoom = 0.1;\n      }\n    } else if (this.zoomOut && this.zoomOut.isDown) {\n      cam.zoom += this.zoomSpeed;\n    }\n  },\n\n  /**\r\n   * Destroys this Key Control.\r\n   *\r\n   * @method Phaser.Cameras.Controls.FixedKeyControl#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.camera = null;\n    this.left = null;\n    this.right = null;\n    this.up = null;\n    this.down = null;\n    this.zoomIn = null;\n    this.zoomOut = null;\n  }\n});\nmodule.exports = FixedKeyControl;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/controls/FixedKeyControl.js"],"names":["Class","require","GetValue","FixedKeyControl","initialize","config","camera","left","right","up","down","zoomIn","zoomOut","zoomSpeed","speedX","speedY","speed","_zoom","active","start","stop","setCamera","update","delta","undefined","cam","isDown","scrollY","scrollX","zoom","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n/**\r\n * @classdesc\r\n * A Fixed Key Camera Control.\r\n *\r\n * This allows you to control the movement and zoom of a camera using the defined keys.\r\n *\r\n * ```javascript\r\n * var camControl = new FixedKeyControl({\r\n *     camera: this.cameras.main,\r\n *     left: cursors.left,\r\n *     right: cursors.right,\r\n *     speed: float OR { x: 0, y: 0 }\r\n * });\r\n * ```\r\n *\r\n * Movement is precise and has no 'smoothing' applied to it.\r\n *\r\n * You must call the `update` method of this controller every frame.\r\n *\r\n * @class FixedKeyControl\r\n * @memberof Phaser.Cameras.Controls\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Cameras.Controls.FixedKeyControlConfig} config - The Fixed Key Control configuration object.\r\n */\r\nvar FixedKeyControl = new Class({\r\n\r\n    initialize:\r\n\r\n    function FixedKeyControl (config)\r\n    {\r\n        /**\r\n         * The Camera that this Control will update.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#camera\r\n         * @type {?Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = GetValue(config, 'camera', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera left.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#left\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.left = GetValue(config, 'left', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera right.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#right\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.right = GetValue(config, 'right', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera up.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#up\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.up = GetValue(config, 'up', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will move the Camera down.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#down\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.down = GetValue(config, 'down', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera in.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomIn\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomIn = GetValue(config, 'zoomIn', null);\r\n\r\n        /**\r\n         * The Key to be pressed that will zoom the Camera out.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomOut\r\n         * @type {?Phaser.Input.Keyboard.Key}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomOut = GetValue(config, 'zoomOut', null);\r\n\r\n        /**\r\n         * The speed at which the camera will zoom if the `zoomIn` or `zoomOut` keys are pressed.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#zoomSpeed\r\n         * @type {number}\r\n         * @default 0.01\r\n         * @since 3.0.0\r\n         */\r\n        this.zoomSpeed = GetValue(config, 'zoomSpeed', 0.01);\r\n\r\n        /**\r\n         * The horizontal speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#speedX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.speedX = 0;\r\n\r\n        /**\r\n         * The vertical speed the camera will move.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#speedY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.speedY = 0;\r\n\r\n        var speed = GetValue(config, 'speed', null);\r\n\r\n        if (typeof speed === 'number')\r\n        {\r\n            this.speedX = speed;\r\n            this.speedY = speed;\r\n        }\r\n        else\r\n        {\r\n            this.speedX = GetValue(config, 'speed.x', 0);\r\n            this.speedY = GetValue(config, 'speed.y', 0);\r\n        }\r\n\r\n        /**\r\n         * Internal property to track the current zoom level.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#_zoom\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._zoom = 0;\r\n\r\n        /**\r\n         * A flag controlling if the Controls will update the Camera or not.\r\n         *\r\n         * @name Phaser.Cameras.Controls.FixedKeyControl#active\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.active = (this.camera !== null);\r\n    },\r\n\r\n    /**\r\n     * Starts the Key Control running, providing it has been linked to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.active = (this.camera !== null);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops this Key Control from running. Call `start` to start it again.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Binds this Key Control to a camera.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#setCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera to bind this Key Control to.\r\n     *\r\n     * @return {Phaser.Cameras.Controls.FixedKeyControl} This Key Control instance.\r\n     */\r\n    setCamera: function (camera)\r\n    {\r\n        this.camera = camera;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies the results of pressing the control keys to the Camera.\r\n     *\r\n     * You must call this every step, it is not called automatically.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        if (!this.active)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (delta === undefined) { delta = 1; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (this.up && this.up.isDown)\r\n        {\r\n            cam.scrollY -= ((this.speedY * delta) | 0);\r\n        }\r\n        else if (this.down && this.down.isDown)\r\n        {\r\n            cam.scrollY += ((this.speedY * delta) | 0);\r\n        }\r\n\r\n        if (this.left && this.left.isDown)\r\n        {\r\n            cam.scrollX -= ((this.speedX * delta) | 0);\r\n        }\r\n        else if (this.right && this.right.isDown)\r\n        {\r\n            cam.scrollX += ((this.speedX * delta) | 0);\r\n        }\r\n\r\n        //  Camera zoom\r\n\r\n        if (this.zoomIn && this.zoomIn.isDown)\r\n        {\r\n            cam.zoom -= this.zoomSpeed;\r\n\r\n            if (cam.zoom < 0.1)\r\n            {\r\n                cam.zoom = 0.1;\r\n            }\r\n        }\r\n        else if (this.zoomOut && this.zoomOut.isDown)\r\n        {\r\n            cam.zoom += this.zoomSpeed;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Key Control.\r\n     *\r\n     * @method Phaser.Cameras.Controls.FixedKeyControl#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n\r\n        this.left = null;\r\n        this.right = null;\r\n        this.up = null;\r\n        this.down = null;\r\n\r\n        this.zoomIn = null;\r\n        this.zoomOut = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = FixedKeyControl;\r\n"]},"metadata":{},"sourceType":"script"}