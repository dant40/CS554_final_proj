{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  http://www.blackpawn.com/texts/pointinpoly/\n//  points is an array of Point-like objects with public x/y properties\n//  returns an array containing all points that are within the triangle, or an empty array if none\n//  if 'returnFirst' is true it will return after the first point within the triangle is found\n\n/**\r\n * Filters an array of point-like objects to only those contained within a triangle.\r\n * If `returnFirst` is true, will return an array containing only the first point in the provided array that is within the triangle (or an empty array if there are no such points).\r\n *\r\n * @function Phaser.Geom.Triangle.ContainsArray\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The triangle that the points are being checked in.\r\n * @param {Phaser.Geom.Point[]} points - An array of point-like objects (objects that have an `x` and `y` property)\r\n * @param {boolean} [returnFirst=false] - If `true`, return an array containing only the first point found that is within the triangle.\r\n * @param {array} [out] - If provided, the points that are within the triangle will be appended to this array instead of being added to a new array. If `returnFirst` is true, only the first point found within the triangle will be appended. This array will also be returned by this function.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array containing all the points from `points` that are within the triangle, if an array was provided as `out`, points will be appended to that array and it will also be returned here.\r\n */\nvar ContainsArray = function (triangle, points, returnFirst, out) {\n  if (returnFirst === undefined) {\n    returnFirst = false;\n  }\n\n  if (out === undefined) {\n    out = [];\n  }\n\n  var v0x = triangle.x3 - triangle.x1;\n  var v0y = triangle.y3 - triangle.y1;\n  var v1x = triangle.x2 - triangle.x1;\n  var v1y = triangle.y2 - triangle.y1;\n  var dot00 = v0x * v0x + v0y * v0y;\n  var dot01 = v0x * v1x + v0y * v1y;\n  var dot11 = v1x * v1x + v1y * v1y; // Compute barycentric coordinates\n\n  var b = dot00 * dot11 - dot01 * dot01;\n  var inv = b === 0 ? 0 : 1 / b;\n  var u;\n  var v;\n  var v2x;\n  var v2y;\n  var dot02;\n  var dot12;\n  var x1 = triangle.x1;\n  var y1 = triangle.y1;\n\n  for (var i = 0; i < points.length; i++) {\n    v2x = points[i].x - x1;\n    v2y = points[i].y - y1;\n    dot02 = v0x * v2x + v0y * v2y;\n    dot12 = v1x * v2x + v1y * v2y;\n    u = (dot11 * dot02 - dot01 * dot12) * inv;\n    v = (dot00 * dot12 - dot01 * dot02) * inv;\n\n    if (u >= 0 && v >= 0 && u + v < 1) {\n      out.push({\n        x: points[i].x,\n        y: points[i].y\n      });\n\n      if (returnFirst) {\n        break;\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = ContainsArray;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/ContainsArray.js"],"names":["ContainsArray","triangle","points","returnFirst","out","undefined","v0x","x3","x1","v0y","y3","y1","v1x","x2","v1y","y2","dot00","dot01","dot11","b","inv","u","v","v2x","v2y","dot02","dot12","i","length","x","y","push","module","exports"],"mappings":"AAAA;;;;;AAMA;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;AAcA,IAAIA,aAAa,GAAG,UAAUC,QAAV,EAAoBC,MAApB,EAA4BC,WAA5B,EAAyCC,GAAzC,EACpB;AACI,MAAID,WAAW,KAAKE,SAApB,EAA+B;AAAEF,IAAAA,WAAW,GAAG,KAAd;AAAsB;;AACvD,MAAIC,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIE,GAAG,GAAGL,QAAQ,CAACM,EAAT,GAAcN,QAAQ,CAACO,EAAjC;AACA,MAAIC,GAAG,GAAGR,QAAQ,CAACS,EAAT,GAAcT,QAAQ,CAACU,EAAjC;AAEA,MAAIC,GAAG,GAAGX,QAAQ,CAACY,EAAT,GAAcZ,QAAQ,CAACO,EAAjC;AACA,MAAIM,GAAG,GAAGb,QAAQ,CAACc,EAAT,GAAcd,QAAQ,CAACU,EAAjC;AAEA,MAAIK,KAAK,GAAIV,GAAG,GAAGA,GAAP,GAAeG,GAAG,GAAGA,GAAjC;AACA,MAAIQ,KAAK,GAAIX,GAAG,GAAGM,GAAP,GAAeH,GAAG,GAAGK,GAAjC;AACA,MAAII,KAAK,GAAIN,GAAG,GAAGA,GAAP,GAAeE,GAAG,GAAGA,GAAjC,CAZJ,CAcI;;AACA,MAAIK,CAAC,GAAKH,KAAK,GAAGE,KAAT,GAAmBD,KAAK,GAAGA,KAApC;AACA,MAAIG,GAAG,GAAID,CAAC,KAAK,CAAP,GAAY,CAAZ,GAAiB,IAAIA,CAA/B;AAEA,MAAIE,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,KAAJ;AAEA,MAAIlB,EAAE,GAAGP,QAAQ,CAACO,EAAlB;AACA,MAAIG,EAAE,GAAGV,QAAQ,CAACU,EAAlB;;AAEA,OAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,MAAM,CAAC0B,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACIJ,IAAAA,GAAG,GAAGrB,MAAM,CAACyB,CAAD,CAAN,CAAUE,CAAV,GAAcrB,EAApB;AACAgB,IAAAA,GAAG,GAAGtB,MAAM,CAACyB,CAAD,CAAN,CAAUG,CAAV,GAAcnB,EAApB;AAEAc,IAAAA,KAAK,GAAInB,GAAG,GAAGiB,GAAP,GAAed,GAAG,GAAGe,GAA7B;AACAE,IAAAA,KAAK,GAAId,GAAG,GAAGW,GAAP,GAAeT,GAAG,GAAGU,GAA7B;AAEAH,IAAAA,CAAC,GAAG,CAAEH,KAAK,GAAGO,KAAT,GAAmBR,KAAK,GAAGS,KAA5B,IAAsCN,GAA1C;AACAE,IAAAA,CAAC,GAAG,CAAEN,KAAK,GAAGU,KAAT,GAAmBT,KAAK,GAAGQ,KAA5B,IAAsCL,GAA1C;;AAEA,QAAIC,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAAf,IAAqBD,CAAC,GAAGC,CAAJ,GAAQ,CAAjC,EACA;AACIlB,MAAAA,GAAG,CAAC2B,IAAJ,CAAS;AAAEF,QAAAA,CAAC,EAAE3B,MAAM,CAACyB,CAAD,CAAN,CAAUE,CAAf;AAAkBC,QAAAA,CAAC,EAAE5B,MAAM,CAACyB,CAAD,CAAN,CAAUG;AAA/B,OAAT;;AAEA,UAAI3B,WAAJ,EACA;AACI;AACH;AACJ;AACJ;;AAED,SAAOC,GAAP;AACH,CApDD;;AAsDA4B,MAAM,CAACC,OAAP,GAAiBjC,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  http://www.blackpawn.com/texts/pointinpoly/\r\n\r\n//  points is an array of Point-like objects with public x/y properties\r\n//  returns an array containing all points that are within the triangle, or an empty array if none\r\n//  if 'returnFirst' is true it will return after the first point within the triangle is found\r\n\r\n/**\r\n * Filters an array of point-like objects to only those contained within a triangle.\r\n * If `returnFirst` is true, will return an array containing only the first point in the provided array that is within the triangle (or an empty array if there are no such points).\r\n *\r\n * @function Phaser.Geom.Triangle.ContainsArray\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The triangle that the points are being checked in.\r\n * @param {Phaser.Geom.Point[]} points - An array of point-like objects (objects that have an `x` and `y` property)\r\n * @param {boolean} [returnFirst=false] - If `true`, return an array containing only the first point found that is within the triangle.\r\n * @param {array} [out] - If provided, the points that are within the triangle will be appended to this array instead of being added to a new array. If `returnFirst` is true, only the first point found within the triangle will be appended. This array will also be returned by this function.\r\n *\r\n * @return {Phaser.Geom.Point[]} An array containing all the points from `points` that are within the triangle, if an array was provided as `out`, points will be appended to that array and it will also be returned here.\r\n */\r\nvar ContainsArray = function (triangle, points, returnFirst, out)\r\n{\r\n    if (returnFirst === undefined) { returnFirst = false; }\r\n    if (out === undefined) { out = []; }\r\n\r\n    var v0x = triangle.x3 - triangle.x1;\r\n    var v0y = triangle.y3 - triangle.y1;\r\n\r\n    var v1x = triangle.x2 - triangle.x1;\r\n    var v1y = triangle.y2 - triangle.y1;\r\n\r\n    var dot00 = (v0x * v0x) + (v0y * v0y);\r\n    var dot01 = (v0x * v1x) + (v0y * v1y);\r\n    var dot11 = (v1x * v1x) + (v1y * v1y);\r\n\r\n    // Compute barycentric coordinates\r\n    var b = ((dot00 * dot11) - (dot01 * dot01));\r\n    var inv = (b === 0) ? 0 : (1 / b);\r\n\r\n    var u;\r\n    var v;\r\n    var v2x;\r\n    var v2y;\r\n    var dot02;\r\n    var dot12;\r\n\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    for (var i = 0; i < points.length; i++)\r\n    {\r\n        v2x = points[i].x - x1;\r\n        v2y = points[i].y - y1;\r\n\r\n        dot02 = (v0x * v2x) + (v0y * v2y);\r\n        dot12 = (v1x * v2x) + (v1y * v2y);\r\n\r\n        u = ((dot11 * dot02) - (dot01 * dot12)) * inv;\r\n        v = ((dot00 * dot12) - (dot01 * dot02)) * inv;\r\n    \r\n        if (u >= 0 && v >= 0 && (u + v < 1))\r\n        {\r\n            out.push({ x: points[i].x, y: points[i].y });\r\n\r\n            if (returnFirst)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = ContainsArray;\r\n"]},"metadata":{},"sourceType":"script"}