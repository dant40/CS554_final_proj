{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Vector3 = require('../math/Vector3');\n\nvar Matrix4 = require('../math/Matrix4');\n\nvar Quaternion = require('../math/Quaternion');\n\nvar tmpMat4 = new Matrix4();\nvar tmpQuat = new Quaternion();\nvar tmpVec3 = new Vector3();\n/**\r\n * Rotates a vector in place by axis angle.\r\n *\r\n * This is the same as transforming a point by an\r\n * axis-angle quaternion, but it has higher precision.\r\n *\r\n * @function Phaser.Math.RotateVec3\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec - The vector to be rotated.\r\n * @param {Phaser.Math.Vector3} axis - The axis to rotate around.\r\n * @param {number} radians - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Math.Vector3} The given vector.\r\n */\n\nvar RotateVec3 = function (vec, axis, radians) {\n  //  Set the quaternion to our axis angle\n  tmpQuat.setAxisAngle(axis, radians); //  Create a rotation matrix from the axis angle\n\n  tmpMat4.fromRotationTranslation(tmpQuat, tmpVec3.set(0, 0, 0)); //  Multiply our vector by the rotation matrix\n\n  return vec.transformMat4(tmpMat4);\n};\n\nmodule.exports = RotateVec3;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/RotateVec3.js"],"names":["Vector3","require","Matrix4","Quaternion","tmpMat4","tmpQuat","tmpVec3","RotateVec3","vec","axis","radians","setAxisAngle","fromRotationTranslation","set","transformMat4","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIG,OAAO,GAAG,IAAIF,OAAJ,EAAd;AACA,IAAIG,OAAO,GAAG,IAAIF,UAAJ,EAAd;AACA,IAAIG,OAAO,GAAG,IAAIN,OAAJ,EAAd;AAEA;;;;;;;;;;;;;;;;AAeA,IAAIO,UAAU,GAAG,UAAUC,GAAV,EAAeC,IAAf,EAAqBC,OAArB,EACjB;AACI;AACAL,EAAAA,OAAO,CAACM,YAAR,CAAqBF,IAArB,EAA2BC,OAA3B,EAFJ,CAII;;AACAN,EAAAA,OAAO,CAACQ,uBAAR,CAAgCP,OAAhC,EAAyCC,OAAO,CAACO,GAAR,CAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAzC,EALJ,CAOI;;AACA,SAAOL,GAAG,CAACM,aAAJ,CAAkBV,OAAlB,CAAP;AACH,CAVD;;AAYAW,MAAM,CAACC,OAAP,GAAiBT,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Vector3 = require('../math/Vector3');\r\nvar Matrix4 = require('../math/Matrix4');\r\nvar Quaternion = require('../math/Quaternion');\r\n\r\nvar tmpMat4 = new Matrix4();\r\nvar tmpQuat = new Quaternion();\r\nvar tmpVec3 = new Vector3();\r\n\r\n/**\r\n * Rotates a vector in place by axis angle.\r\n *\r\n * This is the same as transforming a point by an\r\n * axis-angle quaternion, but it has higher precision.\r\n *\r\n * @function Phaser.Math.RotateVec3\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector3} vec - The vector to be rotated.\r\n * @param {Phaser.Math.Vector3} axis - The axis to rotate around.\r\n * @param {number} radians - The angle of rotation in radians.\r\n *\r\n * @return {Phaser.Math.Vector3} The given vector.\r\n */\r\nvar RotateVec3 = function (vec, axis, radians)\r\n{\r\n    //  Set the quaternion to our axis angle\r\n    tmpQuat.setAxisAngle(axis, radians);\r\n\r\n    //  Create a rotation matrix from the axis angle\r\n    tmpMat4.fromRotationTranslation(tmpQuat, tmpVec3.set(0, 0, 0));\r\n\r\n    //  Multiply our vector by the rotation matrix\r\n    return vec.transformMat4(tmpMat4);\r\n};\r\n\r\nmodule.exports = RotateVec3;\r\n"]},"metadata":{},"sourceType":"script"}