{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Contains = require('../circle/Contains');\n\nvar Point = require('../point/Point');\n\nvar tmp = new Point();\n/**\r\n * Checks for intersection between the line segment and circle.\r\n *\r\n * Based on code by [Matt DesLauriers](https://github.com/mattdesl/line-circle-collision/blob/master/LICENSE.md).\r\n *\r\n * @function Phaser.Geom.Intersects.LineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {(Phaser.Geom.Point|any)} [nearest] - An optional Point-like object. If given the closest point on the Line where the circle intersects will be stored in this object.\r\n *\r\n * @return {boolean} `true` if the two objects intersect, otherwise `false`.\r\n */\n\nvar LineToCircle = function (line, circle, nearest) {\n  if (nearest === undefined) {\n    nearest = tmp;\n  }\n\n  if (Contains(circle, line.x1, line.y1)) {\n    nearest.x = line.x1;\n    nearest.y = line.y1;\n    return true;\n  }\n\n  if (Contains(circle, line.x2, line.y2)) {\n    nearest.x = line.x2;\n    nearest.y = line.y2;\n    return true;\n  }\n\n  var dx = line.x2 - line.x1;\n  var dy = line.y2 - line.y1;\n  var lcx = circle.x - line.x1;\n  var lcy = circle.y - line.y1; //  project lc onto d, resulting in vector p\n\n  var dLen2 = dx * dx + dy * dy;\n  var px = dx;\n  var py = dy;\n\n  if (dLen2 > 0) {\n    var dp = (lcx * dx + lcy * dy) / dLen2;\n    px *= dp;\n    py *= dp;\n  }\n\n  nearest.x = line.x1 + px;\n  nearest.y = line.y1 + py; //  len2 of p\n\n  var pLen2 = px * px + py * py;\n  return pLen2 <= dLen2 && px * dx + py * dy >= 0 && Contains(circle, nearest.x, nearest.y);\n};\n\nmodule.exports = LineToCircle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/LineToCircle.js"],"names":["Contains","require","Point","tmp","LineToCircle","line","circle","nearest","undefined","x1","y1","x","y","x2","y2","dx","dy","lcx","lcy","dLen2","px","py","dp","pLen2","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,oBAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIE,GAAG,GAAG,IAAID,KAAJ,EAAV;AAEA;;;;;;;;;;;;;;;AAcA,IAAIE,YAAY,GAAG,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,OAAxB,EACnB;AACI,MAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAAED,IAAAA,OAAO,GAAGJ,GAAV;AAAgB;;AAE7C,MAAIH,QAAQ,CAACM,MAAD,EAASD,IAAI,CAACI,EAAd,EAAkBJ,IAAI,CAACK,EAAvB,CAAZ,EACA;AACIH,IAAAA,OAAO,CAACI,CAAR,GAAYN,IAAI,CAACI,EAAjB;AACAF,IAAAA,OAAO,CAACK,CAAR,GAAYP,IAAI,CAACK,EAAjB;AAEA,WAAO,IAAP;AACH;;AAED,MAAIV,QAAQ,CAACM,MAAD,EAASD,IAAI,CAACQ,EAAd,EAAkBR,IAAI,CAACS,EAAvB,CAAZ,EACA;AACIP,IAAAA,OAAO,CAACI,CAAR,GAAYN,IAAI,CAACQ,EAAjB;AACAN,IAAAA,OAAO,CAACK,CAAR,GAAYP,IAAI,CAACS,EAAjB;AAEA,WAAO,IAAP;AACH;;AAED,MAAIC,EAAE,GAAGV,IAAI,CAACQ,EAAL,GAAUR,IAAI,CAACI,EAAxB;AACA,MAAIO,EAAE,GAAGX,IAAI,CAACS,EAAL,GAAUT,IAAI,CAACK,EAAxB;AAEA,MAAIO,GAAG,GAAGX,MAAM,CAACK,CAAP,GAAWN,IAAI,CAACI,EAA1B;AACA,MAAIS,GAAG,GAAGZ,MAAM,CAACM,CAAP,GAAWP,IAAI,CAACK,EAA1B,CAvBJ,CAyBI;;AACA,MAAIS,KAAK,GAAIJ,EAAE,GAAGA,EAAN,GAAaC,EAAE,GAAGA,EAA9B;AACA,MAAII,EAAE,GAAGL,EAAT;AACA,MAAIM,EAAE,GAAGL,EAAT;;AAEA,MAAIG,KAAK,GAAG,CAAZ,EACA;AACI,QAAIG,EAAE,GAAG,CAAEL,GAAG,GAAGF,EAAP,GAAcG,GAAG,GAAGF,EAArB,IAA4BG,KAArC;AAEAC,IAAAA,EAAE,IAAIE,EAAN;AACAD,IAAAA,EAAE,IAAIC,EAAN;AACH;;AAEDf,EAAAA,OAAO,CAACI,CAAR,GAAYN,IAAI,CAACI,EAAL,GAAUW,EAAtB;AACAb,EAAAA,OAAO,CAACK,CAAR,GAAYP,IAAI,CAACK,EAAL,GAAUW,EAAtB,CAvCJ,CAyCI;;AACA,MAAIE,KAAK,GAAIH,EAAE,GAAGA,EAAN,GAAaC,EAAE,GAAGA,EAA9B;AAEA,SACIE,KAAK,IAAIJ,KAAT,IACEC,EAAE,GAAGL,EAAN,GAAaM,EAAE,GAAGL,EAAnB,IAA2B,CAD3B,IAEAhB,QAAQ,CAACM,MAAD,EAASC,OAAO,CAACI,CAAjB,EAAoBJ,OAAO,CAACK,CAA5B,CAHZ;AAKH,CAlDD;;AAoDAY,MAAM,CAACC,OAAP,GAAiBrB,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Contains = require('../circle/Contains');\r\nvar Point = require('../point/Point');\r\n\r\nvar tmp = new Point();\r\n\r\n/**\r\n * Checks for intersection between the line segment and circle.\r\n *\r\n * Based on code by [Matt DesLauriers](https://github.com/mattdesl/line-circle-collision/blob/master/LICENSE.md).\r\n *\r\n * @function Phaser.Geom.Intersects.LineToCircle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line segment to check.\r\n * @param {Phaser.Geom.Circle} circle - The circle to check against the line.\r\n * @param {(Phaser.Geom.Point|any)} [nearest] - An optional Point-like object. If given the closest point on the Line where the circle intersects will be stored in this object.\r\n *\r\n * @return {boolean} `true` if the two objects intersect, otherwise `false`.\r\n */\r\nvar LineToCircle = function (line, circle, nearest)\r\n{\r\n    if (nearest === undefined) { nearest = tmp; }\r\n\r\n    if (Contains(circle, line.x1, line.y1))\r\n    {\r\n        nearest.x = line.x1;\r\n        nearest.y = line.y1;\r\n\r\n        return true;\r\n    }\r\n\r\n    if (Contains(circle, line.x2, line.y2))\r\n    {\r\n        nearest.x = line.x2;\r\n        nearest.y = line.y2;\r\n\r\n        return true;\r\n    }\r\n\r\n    var dx = line.x2 - line.x1;\r\n    var dy = line.y2 - line.y1;\r\n\r\n    var lcx = circle.x - line.x1;\r\n    var lcy = circle.y - line.y1;\r\n\r\n    //  project lc onto d, resulting in vector p\r\n    var dLen2 = (dx * dx) + (dy * dy);\r\n    var px = dx;\r\n    var py = dy;\r\n\r\n    if (dLen2 > 0)\r\n    {\r\n        var dp = ((lcx * dx) + (lcy * dy)) / dLen2;\r\n\r\n        px *= dp;\r\n        py *= dp;\r\n    }\r\n\r\n    nearest.x = line.x1 + px;\r\n    nearest.y = line.y1 + py;\r\n    \r\n    //  len2 of p\r\n    var pLen2 = (px * px) + (py * py);\r\n    \r\n    return (\r\n        pLen2 <= dLen2 &&\r\n        ((px * dx) + (py * dy)) >= 0 &&\r\n        Contains(circle, nearest.x, nearest.y)\r\n    );\r\n};\r\n\r\nmodule.exports = LineToCircle;\r\n"]},"metadata":{},"sourceType":"script"}