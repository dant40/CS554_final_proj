{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.TileSprite#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.TileSprite} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar TileSpriteWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  src.updateCanvas();\n  var getTint = Utils.getTintAppendFloatAlpha;\n  this.pipeline.batchTexture(src, src.fillPattern, src.displayFrame.width * src.tileScaleX, src.displayFrame.height * src.tileScaleY, src.x, src.y, src.width, src.height, src.scaleX, src.scaleY, src.rotation, src.flipX, src.flipY, src.scrollFactorX, src.scrollFactorY, src.originX * src.width, src.originY * src.height, 0, 0, src.width, src.height, getTint(src._tintTL, camera.alpha * src._alphaTL), getTint(src._tintTR, camera.alpha * src._alphaTR), getTint(src._tintBL, camera.alpha * src._alphaBL), getTint(src._tintBR, camera.alpha * src._alphaBR), src._isTinted && src.tintFill, src.tilePositionX % src.displayFrame.width / src.displayFrame.width, src.tilePositionY % src.displayFrame.height / src.displayFrame.height, camera, parentMatrix);\n};\n\nmodule.exports = TileSpriteWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/tilesprite/TileSpriteWebGLRenderer.js"],"names":["Utils","require","TileSpriteWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","updateCanvas","getTint","getTintAppendFloatAlpha","pipeline","batchTexture","fillPattern","displayFrame","width","tileScaleX","height","tileScaleY","x","y","scaleX","scaleY","rotation","flipX","flipY","scrollFactorX","scrollFactorY","originX","originY","_tintTL","alpha","_alphaTL","_tintTR","_alphaTR","_tintBL","_alphaBL","_tintBR","_alphaBR","_isTinted","tintFill","tilePositionX","tilePositionY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,4BAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,uBAAuB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EAC9B;AACIH,EAAAA,GAAG,CAACI,YAAJ;AAEA,MAAIC,OAAO,GAAGT,KAAK,CAACU,uBAApB;AAEA,OAAKC,QAAL,CAAcC,YAAd,CACIR,GADJ,EAEIA,GAAG,CAACS,WAFR,EAGIT,GAAG,CAACU,YAAJ,CAAiBC,KAAjB,GAAyBX,GAAG,CAACY,UAHjC,EAG6CZ,GAAG,CAACU,YAAJ,CAAiBG,MAAjB,GAA0Bb,GAAG,CAACc,UAH3E,EAIId,GAAG,CAACe,CAJR,EAIWf,GAAG,CAACgB,CAJf,EAKIhB,GAAG,CAACW,KALR,EAKeX,GAAG,CAACa,MALnB,EAMIb,GAAG,CAACiB,MANR,EAMgBjB,GAAG,CAACkB,MANpB,EAOIlB,GAAG,CAACmB,QAPR,EAQInB,GAAG,CAACoB,KARR,EAQepB,GAAG,CAACqB,KARnB,EASIrB,GAAG,CAACsB,aATR,EASuBtB,GAAG,CAACuB,aAT3B,EAUIvB,GAAG,CAACwB,OAAJ,GAAcxB,GAAG,CAACW,KAVtB,EAU6BX,GAAG,CAACyB,OAAJ,GAAczB,GAAG,CAACa,MAV/C,EAWI,CAXJ,EAWO,CAXP,EAWUb,GAAG,CAACW,KAXd,EAWqBX,GAAG,CAACa,MAXzB,EAYIR,OAAO,CAACL,GAAG,CAAC0B,OAAL,EAAcxB,MAAM,CAACyB,KAAP,GAAe3B,GAAG,CAAC4B,QAAjC,CAZX,EAaIvB,OAAO,CAACL,GAAG,CAAC6B,OAAL,EAAc3B,MAAM,CAACyB,KAAP,GAAe3B,GAAG,CAAC8B,QAAjC,CAbX,EAcIzB,OAAO,CAACL,GAAG,CAAC+B,OAAL,EAAc7B,MAAM,CAACyB,KAAP,GAAe3B,GAAG,CAACgC,QAAjC,CAdX,EAeI3B,OAAO,CAACL,GAAG,CAACiC,OAAL,EAAc/B,MAAM,CAACyB,KAAP,GAAe3B,GAAG,CAACkC,QAAjC,CAfX,EAgBKlC,GAAG,CAACmC,SAAJ,IAAiBnC,GAAG,CAACoC,QAhB1B,EAiBKpC,GAAG,CAACqC,aAAJ,GAAoBrC,GAAG,CAACU,YAAJ,CAAiBC,KAAtC,GAA+CX,GAAG,CAACU,YAAJ,CAAiBC,KAjBpE,EAkBKX,GAAG,CAACsC,aAAJ,GAAoBtC,GAAG,CAACU,YAAJ,CAAiBG,MAAtC,GAAgDb,GAAG,CAACU,YAAJ,CAAiBG,MAlBrE,EAmBIX,MAnBJ,EAoBIC,YApBJ;AAsBH,CA5BD;;AA8BAoC,MAAM,CAACC,OAAP,GAAiB1C,uBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.TileSprite#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.TileSprite} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar TileSpriteWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    src.updateCanvas();\r\n\r\n    var getTint = Utils.getTintAppendFloatAlpha;\r\n\r\n    this.pipeline.batchTexture(\r\n        src,\r\n        src.fillPattern,\r\n        src.displayFrame.width * src.tileScaleX, src.displayFrame.height * src.tileScaleY,\r\n        src.x, src.y,\r\n        src.width, src.height,\r\n        src.scaleX, src.scaleY,\r\n        src.rotation,\r\n        src.flipX, src.flipY,\r\n        src.scrollFactorX, src.scrollFactorY,\r\n        src.originX * src.width, src.originY * src.height,\r\n        0, 0, src.width, src.height,\r\n        getTint(src._tintTL, camera.alpha * src._alphaTL),\r\n        getTint(src._tintTR, camera.alpha * src._alphaTR),\r\n        getTint(src._tintBL, camera.alpha * src._alphaBL),\r\n        getTint(src._tintBR, camera.alpha * src._alphaBR),\r\n        (src._isTinted && src.tintFill),\r\n        (src.tilePositionX % src.displayFrame.width) / src.displayFrame.width,\r\n        (src.tilePositionY % src.displayFrame.height) / src.displayFrame.height,\r\n        camera,\r\n        parentMatrix\r\n    );\r\n};\r\n\r\nmodule.exports = TileSpriteWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}