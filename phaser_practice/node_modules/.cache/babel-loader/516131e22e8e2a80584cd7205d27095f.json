{"ast":null,"code":"var OverlapRect = require('./OverlapRect');\n\nvar Circle = require('../../../geom/circle/Circle');\n\nvar CircleToCircle = require('../../../geom/intersects/CircleToCircle');\n\nvar CircleToRectangle = require('../../../geom/intersects/CircleToRectangle');\n/**\r\n * This method will search the given circular area and return an array of all physics bodies that\r\n * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n *\r\n * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n * contained within it.\r\n *\r\n * If Arcade Physics is set to use the RTree (which it is by default) then the search is rather fast,\r\n * otherwise the search is O(N) for Dynamic Bodies.\r\n *\r\n * @function Phaser.Physics.Arcade.Components.OverlapCirc\r\n * @since 3.21.0\r\n *\r\n * @param {number} x - The x coordinate of the center of the area to search within.\r\n * @param {number} y - The y coordinate of the center of the area to search within.\r\n * @param {number} radius - The radius of the area to search within.\r\n * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n *\r\n * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n */\n\n\nvar OverlapCirc = function (world, x, y, radius, includeDynamic, includeStatic) {\n  var bodiesInRect = OverlapRect(world, x - radius, y - radius, 2 * radius, 2 * radius, includeDynamic, includeStatic);\n\n  if (bodiesInRect.length === 0) {\n    return bodiesInRect;\n  }\n\n  var area = new Circle(x, y, radius);\n  var circFromBody = new Circle();\n  var bodiesInArea = [];\n\n  for (var i = 0; i < bodiesInRect.length; i++) {\n    var body = bodiesInRect[i];\n\n    if (body.isCircle) {\n      circFromBody.setTo(body.center.x, body.center.y, body.halfWidth);\n\n      if (CircleToCircle(area, circFromBody)) {\n        bodiesInArea.push(body);\n      }\n    } else if (CircleToRectangle(area, body)) {\n      bodiesInArea.push(body);\n    }\n  }\n\n  return bodiesInArea;\n};\n\nmodule.exports = OverlapCirc;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/components/OverlapCirc.js"],"names":["OverlapRect","require","Circle","CircleToCircle","CircleToRectangle","OverlapCirc","world","x","y","radius","includeDynamic","includeStatic","bodiesInRect","length","area","circFromBody","bodiesInArea","i","body","isCircle","setTo","center","halfWidth","push","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,6BAAD,CAApB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,yCAAD,CAA5B;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,4CAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAII,WAAW,GAAG,UAAUC,KAAV,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,MAAvB,EAA+BC,cAA/B,EAA+CC,aAA/C,EAClB;AACI,MAAIC,YAAY,GAAGZ,WAAW,CAACM,KAAD,EAAQC,CAAC,GAAGE,MAAZ,EAAoBD,CAAC,GAAGC,MAAxB,EAAgC,IAAIA,MAApC,EAA4C,IAAIA,MAAhD,EAAwDC,cAAxD,EAAwEC,aAAxE,CAA9B;;AAEA,MAAIC,YAAY,CAACC,MAAb,KAAwB,CAA5B,EACA;AACI,WAAOD,YAAP;AACH;;AAED,MAAIE,IAAI,GAAG,IAAIZ,MAAJ,CAAWK,CAAX,EAAcC,CAAd,EAAiBC,MAAjB,CAAX;AACA,MAAIM,YAAY,GAAG,IAAIb,MAAJ,EAAnB;AACA,MAAIc,YAAY,GAAG,EAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,YAAY,CAACC,MAAjC,EAAyCI,CAAC,EAA1C,EACA;AACI,QAAIC,IAAI,GAAGN,YAAY,CAACK,CAAD,CAAvB;;AAEA,QAAIC,IAAI,CAACC,QAAT,EACA;AACIJ,MAAAA,YAAY,CAACK,KAAb,CAAmBF,IAAI,CAACG,MAAL,CAAYd,CAA/B,EAAkCW,IAAI,CAACG,MAAL,CAAYb,CAA9C,EAAiDU,IAAI,CAACI,SAAtD;;AAEA,UAAInB,cAAc,CAACW,IAAD,EAAOC,YAAP,CAAlB,EACA;AACIC,QAAAA,YAAY,CAACO,IAAb,CAAkBL,IAAlB;AACH;AACJ,KARD,MASK,IAAId,iBAAiB,CAACU,IAAD,EAAOI,IAAP,CAArB,EACL;AACIF,MAAAA,YAAY,CAACO,IAAb,CAAkBL,IAAlB;AACH;AACJ;;AAED,SAAOF,YAAP;AACH,CAjCD;;AAmCAQ,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["var OverlapRect = require('./OverlapRect');\r\nvar Circle = require('../../../geom/circle/Circle');\r\nvar CircleToCircle = require('../../../geom/intersects/CircleToCircle');\r\nvar CircleToRectangle = require('../../../geom/intersects/CircleToRectangle');\r\n\r\n/**\r\n * This method will search the given circular area and return an array of all physics bodies that\r\n * overlap with it. It can return either Dynamic, Static bodies or a mixture of both.\r\n *\r\n * A body only has to intersect with the search area to be considered, it doesn't have to be fully\r\n * contained within it.\r\n *\r\n * If Arcade Physics is set to use the RTree (which it is by default) then the search is rather fast,\r\n * otherwise the search is O(N) for Dynamic Bodies.\r\n *\r\n * @function Phaser.Physics.Arcade.Components.OverlapCirc\r\n * @since 3.21.0\r\n *\r\n * @param {number} x - The x coordinate of the center of the area to search within.\r\n * @param {number} y - The y coordinate of the center of the area to search within.\r\n * @param {number} radius - The radius of the area to search within.\r\n * @param {boolean} [includeDynamic=true] - Should the search include Dynamic Bodies?\r\n * @param {boolean} [includeStatic=false] - Should the search include Static Bodies?\r\n *\r\n * @return {(Phaser.Physics.Arcade.Body[]|Phaser.Physics.Arcade.StaticBody[])} An array of bodies that overlap with the given area.\r\n */\r\nvar OverlapCirc = function (world, x, y, radius, includeDynamic, includeStatic)\r\n{\r\n    var bodiesInRect = OverlapRect(world, x - radius, y - radius, 2 * radius, 2 * radius, includeDynamic, includeStatic);\r\n\r\n    if (bodiesInRect.length === 0)\r\n    {\r\n        return bodiesInRect;\r\n    }\r\n\r\n    var area = new Circle(x, y, radius);\r\n    var circFromBody = new Circle();\r\n    var bodiesInArea = [];\r\n\r\n    for (var i = 0; i < bodiesInRect.length; i++)\r\n    {\r\n        var body = bodiesInRect[i];\r\n\r\n        if (body.isCircle)\r\n        {\r\n            circFromBody.setTo(body.center.x, body.center.y, body.halfWidth);\r\n\r\n            if (CircleToCircle(area, circFromBody))\r\n            {\r\n                bodiesInArea.push(body);\r\n            }\r\n        }\r\n        else if (CircleToRectangle(area, body))\r\n        {\r\n            bodiesInArea.push(body);\r\n        }\r\n    }\r\n\r\n    return bodiesInArea;\r\n};\r\n\r\nmodule.exports = OverlapCirc;\r\n"]},"metadata":{},"sourceType":"script"}