{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseAnimation = require('../../animations/Animation');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../../animations/events');\n/**\r\n * @classdesc\r\n * A Game Object Animation Controller.\r\n *\r\n * This controller lives as an instance within a Game Object, accessible as `sprite.anims`.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} parent - The Game Object to which this animation controller belongs.\r\n */\n\n\nvar Animation = new Class({\n  initialize: function Animation(parent) {\n    /**\r\n     * The Game Object to which this animation controller belongs.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#parent\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @since 3.0.0\r\n     */\n    this.parent = parent;\n    /**\r\n     * A reference to the global Animation Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#animationManager\r\n     * @type {Phaser.Animations.AnimationManager}\r\n     * @since 3.0.0\r\n     */\n\n    this.animationManager = parent.scene.sys.anims;\n    this.animationManager.once(Events.REMOVE_ANIMATION, this.remove, this);\n    /**\r\n     * Is an animation currently playing or not?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#isPlaying\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isPlaying = false;\n    /**\r\n     * The current Animation loaded into this Animation Controller.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#currentAnim\r\n     * @type {?Phaser.Animations.Animation}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.currentAnim = null;\n    /**\r\n     * The current AnimationFrame being displayed by this Animation Controller.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#currentFrame\r\n     * @type {?Phaser.Animations.AnimationFrame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.currentFrame = null;\n    /**\r\n     * The key of the next Animation to be loaded into this Animation Controller when the current animation completes.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#nextAnim\r\n     * @type {?string}\r\n     * @default null\r\n     * @since 3.16.0\r\n     */\n\n    this.nextAnim = null;\n    /**\r\n     * Time scale factor.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_timeScale\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._timeScale = 1;\n    /**\r\n     * The frame rate of playback in frames per second.\r\n     * The default is 24 if the `duration` property is `null`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#frameRate\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.frameRate = 0;\n    /**\r\n     * How long the animation should play for, in milliseconds.\r\n     * If the `frameRate` property has been set then it overrides this value,\r\n     * otherwise the `frameRate` is derived from `duration`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * ms per frame, not including frame specific modifiers that may be present in the Animation data.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#msPerFrame\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.msPerFrame = 0;\n    /**\r\n     * Skip frames if the time lags, or always advanced anyway?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#skipMissedFrames\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.skipMissedFrames = true;\n    /**\r\n     * A delay before starting playback, in milliseconds.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_delay\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._delay = 0;\n    /**\r\n     * Number of times to repeat the animation (-1 for infinity)\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_repeat\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._repeat = 0;\n    /**\r\n     * Delay before the repeat starts, in milliseconds.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_repeatDelay\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._repeatDelay = 0;\n    /**\r\n     * Should the animation yoyo? (reverse back down to the start) before repeating?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_yoyo\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._yoyo = false;\n    /**\r\n     * Will the playhead move forwards (`true`) or in reverse (`false`).\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#forward\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.forward = true;\n    /**\r\n     * An Internal trigger that's play the animation in reverse mode ('true') or not ('false'),\r\n     * needed because forward can be changed by yoyo feature.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_reverse\r\n     * @type {boolean}\r\n     * @default false\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this._reverse = false;\n    /**\r\n     * Internal time overflow accumulator.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#accumulator\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accumulator = 0;\n    /**\r\n     * The time point at which the next animation frame will change.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#nextTick\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.nextTick = 0;\n    /**\r\n     * An internal counter keeping track of how many repeats are left to play.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#repeatCounter\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.repeatCounter = 0;\n    /**\r\n     * An internal flag keeping track of pending repeats.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#pendingRepeat\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.pendingRepeat = false;\n    /**\r\n     * Is the Animation paused?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_paused\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._paused = false;\n    /**\r\n     * Was the animation previously playing before being paused?\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_wasPlaying\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._wasPlaying = false;\n    /**\r\n     * Internal property tracking if this Animation is waiting to stop.\r\n     *\r\n     * 0 = No\r\n     * 1 = Waiting for ms to pass\r\n     * 2 = Waiting for repeat\r\n     * 3 = Waiting for specific frame\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_pendingStop\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.4.0\r\n     */\n\n    this._pendingStop = 0;\n    /**\r\n     * Internal property used by _pendingStop.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#_pendingStopValue\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.4.0\r\n     */\n\n    this._pendingStopValue;\n  },\n\n  /**\r\n   * Sets an animation to be played immediately after the current one completes.\r\n   * \r\n   * The current animation must enter a 'completed' state for this to happen, i.e. finish all of its repeats, delays, etc, or have the `stop` method called directly on it.\r\n   * \r\n   * An animation set to repeat forever will never enter a completed state.\r\n   * \r\n   * You can chain a new animation at any point, including before the current one starts playing, during it, or when it ends (via its `animationcomplete` callback).\r\n   * Chained animations are specific to a Game Object, meaning different Game Objects can have different chained animations without impacting the global animation they're playing.\r\n   * \r\n   * Call this method with no arguments to reset the chained animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#chain\r\n   * @since 3.16.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} [key] - The string-based key of the animation to play next, as defined previously in the Animation Manager. Or an Animation instance.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  chain: function (key) {\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    this.nextAnim = key;\n    return this.parent;\n  },\n\n  /**\r\n   * Sets the amount of time, in milliseconds, that the animation will be delayed before starting playback.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} [value=0] - The amount of time, in milliseconds, to wait before starting playback.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setDelay: function (value) {\n    if (value === undefined) {\n      value = 0;\n    }\n\n    this._delay = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the amount of time, in milliseconds that the animation will be delayed before starting playback.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The amount of time, in milliseconds, the Animation will wait before starting playback.\r\n   */\n  getDelay: function () {\n    return this._delay;\n  },\n\n  /**\r\n   * Waits for the specified delay, in milliseconds, then starts playback of the requested animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#delayedPlay\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} delay - The delay, in milliseconds, to wait before starting the animation playing.\r\n   * @param {string} key - The key of the animation to play.\r\n   * @param {integer} [startFrame=0] - The frame of the animation to start from.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  delayedPlay: function (delay, key, startFrame) {\n    this.play(key, true, startFrame);\n    this.nextTick += delay;\n    return this.parent;\n  },\n\n  /**\r\n   * Returns the key of the animation currently loaded into this component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getCurrentKey\r\n   * @since 3.0.0\r\n   *\r\n   * @return {string} The key of the Animation loaded into this component.\r\n   */\n  getCurrentKey: function () {\n    if (this.currentAnim) {\n      return this.currentAnim.key;\n    }\n  },\n\n  /**\r\n   * Internal method used to load an animation into this component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#load\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the animation to load.\r\n   * @param {integer} [startFrame=0] - The start frame of the animation to load.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  load: function (key, startFrame) {\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (this.isPlaying) {\n      this.stop();\n    } //  Load the new animation in\n\n\n    this.animationManager.load(this, key, startFrame);\n    return this.parent;\n  },\n\n  /**\r\n   * Pause the current animation and set the `isPlaying` property to `false`.\r\n   * You can optionally pause it at a specific frame.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} [atFrame] - An optional frame to set after pausing the animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  pause: function (atFrame) {\n    if (!this._paused) {\n      this._paused = true;\n      this._wasPlaying = this.isPlaying;\n      this.isPlaying = false;\n    }\n\n    if (atFrame !== undefined) {\n      this.updateFrame(atFrame);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Resumes playback of a paused animation and sets the `isPlaying` property to `true`.\r\n   * You can optionally tell it to start playback from a specific frame.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} [fromFrame] - An optional frame to set before restarting playback.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  resume: function (fromFrame) {\n    if (this._paused) {\n      this._paused = false;\n      this.isPlaying = this._wasPlaying;\n    }\n\n    if (fromFrame !== undefined) {\n      this.updateFrame(fromFrame);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * `true` if the current animation is paused, otherwise `false`.\r\n   *\r\n   * @name Phaser.GameObjects.Components.Animation#isPaused\r\n   * @readonly\r\n   * @type {boolean}\r\n   * @since 3.4.0\r\n   */\n  isPaused: {\n    get: function () {\n      return this._paused;\n    }\n  },\n\n  /**\r\n   * Plays an Animation on a Game Object that has the Animation component, such as a Sprite.\r\n   * \r\n   * Animations are stored in the global Animation Manager and are referenced by a unique string-based key.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#play\r\n   * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n   * @param {boolean} [ignoreIfPlaying=false] - If this animation is already playing then ignore this call.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  play: function (key, ignoreIfPlaying, startFrame) {\n    if (ignoreIfPlaying === undefined) {\n      ignoreIfPlaying = false;\n    }\n\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key) {\n      return this.parent;\n    }\n\n    this.forward = true;\n    this._reverse = false;\n    this._paused = false;\n    this._wasPlaying = true;\n    return this._startAnimation(key, startFrame);\n  },\n\n  /**\r\n   * Plays an Animation (in reverse mode) on the Game Object that owns this Animation Component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#playReverse\r\n   * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n   * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  playReverse: function (key, ignoreIfPlaying, startFrame) {\n    if (ignoreIfPlaying === undefined) {\n      ignoreIfPlaying = false;\n    }\n\n    if (startFrame === undefined) {\n      startFrame = 0;\n    }\n\n    if (key instanceof BaseAnimation) {\n      key = key.key;\n    }\n\n    if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key) {\n      return this.parent;\n    }\n\n    this.forward = false;\n    this._reverse = true;\n    return this._startAnimation(key, startFrame);\n  },\n\n  /**\r\n   * Load an Animation and fires 'onStartEvent' event, extracted from 'play' method.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#_startAnimation\r\n   * @fires Phaser.Animations.Events#START_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_START_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_START_KEY_ANIMATION_EVENT\r\n   * @since 3.12.0\r\n   *\r\n   * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n   * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  _startAnimation: function (key, startFrame) {\n    this.load(key, startFrame);\n    var anim = this.currentAnim;\n    var gameObject = this.parent;\n\n    if (!anim) {\n      return gameObject;\n    } //  Should give us 9,007,199,254,740,991 safe repeats\n\n\n    this.repeatCounter = this._repeat === -1 ? Number.MAX_VALUE : this._repeat;\n    anim.getFirstTick(this);\n    this.isPlaying = true;\n    this.pendingRepeat = false;\n\n    if (anim.showOnStart) {\n      gameObject.visible = true;\n    }\n\n    var frame = this.currentFrame;\n    anim.emit(Events.ANIMATION_START, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_KEY_START + key, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_START, anim, frame, gameObject);\n    return gameObject;\n  },\n\n  /**\r\n   * Reverse the Animation that is already playing on the Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#reverse\r\n   * @since 3.12.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  reverse: function () {\n    if (this.isPlaying) {\n      this._reverse = !this._reverse;\n      this.forward = !this.forward;\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.\r\n   * If the animation has a non-zero repeat defined, `getProgress` and `getTotalProgress` will be different\r\n   * because `getProgress` doesn't include any repeats or repeat delays, whereas `getTotalProgress` does.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getProgress\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The progress of the current animation, between 0 and 1.\r\n   */\n  getProgress: function () {\n    var p = this.currentFrame.progress;\n\n    if (!this.forward) {\n      p = 1 - p;\n    }\n\n    return p;\n  },\n\n  /**\r\n   * Takes a value between 0 and 1 and uses it to set how far this animation is through playback.\r\n   * Does not factor in repeats or yoyos, but does handle playing forwards or backwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setProgress\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [value=0] - The progress value, between 0 and 1.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setProgress: function (value) {\n    if (!this.forward) {\n      value = 1 - value;\n    }\n\n    this.setCurrentFrame(this.currentAnim.getFrameByProgress(value));\n    return this.parent;\n  },\n\n  /**\r\n   * Handle the removal of an animation from the Animation Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [key] - The key of the removed Animation.\r\n   * @param {Phaser.Animations.Animation} [animation] - The removed Animation.\r\n   */\n  remove: function (key, animation) {\n    if (animation === undefined) {\n      animation = this.currentAnim;\n    }\n\n    if (this.isPlaying && animation.key === this.currentAnim.key) {\n      this.stop();\n      this.setCurrentFrame(this.currentAnim.frames[0]);\n    }\n  },\n\n  /**\r\n   * Gets the number of times that the animation will repeat\r\n   * after its first iteration. For example, if returns 1, the animation will\r\n   * play a total of twice (the initial play plus 1 repeat).\r\n   * A value of -1 means the animation will repeat indefinitely.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getRepeat\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The number of times that the animation will repeat.\r\n   */\n  getRepeat: function () {\n    return this._repeat;\n  },\n\n  /**\r\n   * Sets the number of times that the animation should repeat\r\n   * after its first iteration. For example, if repeat is 1, the animation will\r\n   * play a total of twice (the initial play plus 1 repeat).\r\n   * To repeat indefinitely, use -1. repeat should always be an integer.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setRepeat\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} value - The number of times that the animation should repeat.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setRepeat: function (value) {\n    this._repeat = value;\n    this.repeatCounter = value === -1 ? Number.MAX_VALUE : value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the amount of delay between repeats, if any.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getRepeatDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The delay between repeats.\r\n   */\n  getRepeatDelay: function () {\n    return this._repeatDelay;\n  },\n\n  /**\r\n   * Sets the amount of time in seconds between repeats.\r\n   * For example, if `repeat` is 2 and `repeatDelay` is 10, the animation will play initially,\r\n   * then wait for 10 seconds before repeating, then play again, then wait another 10 seconds\r\n   * before doing its final repeat.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setRepeatDelay\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} value - The delay to wait between repeats, in seconds.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setRepeatDelay: function (value) {\n    this._repeatDelay = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Restarts the current animation from its beginning, optionally including its delay value.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#restart\r\n   * @fires Phaser.Animations.Events#RESTART_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_RESTART_ANIMATION_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_RESTART_KEY_ANIMATION_EVENT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [includeDelay=false] - Whether to include the delay value of the animation when restarting.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  restart: function (includeDelay) {\n    if (includeDelay === undefined) {\n      includeDelay = false;\n    }\n\n    var anim = this.currentAnim;\n    anim.getFirstTick(this, includeDelay);\n    this.forward = true;\n    this.isPlaying = true;\n    this.pendingRepeat = false;\n    this._paused = false; //  Set frame\n\n    this.updateFrame(anim.frames[0]);\n    var gameObject = this.parent;\n    var frame = this.currentFrame;\n    anim.emit(Events.ANIMATION_RESTART, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_KEY_RESTART + anim.key, anim, frame, gameObject);\n    gameObject.emit(Events.SPRITE_ANIMATION_RESTART, anim, frame, gameObject);\n    return this.parent;\n  },\n\n  /**\r\n   * Immediately stops the current animation from playing and dispatches the `animationcomplete` event.\r\n   * \r\n   * If no animation is set, no event will be dispatched.\r\n   * \r\n   * If there is another animation queued (via the `chain` method) then it will start playing immediately.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stop\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stop: function () {\n    this._pendingStop = 0;\n    this.isPlaying = false;\n    var gameObject = this.parent;\n    var anim = this.currentAnim;\n    var frame = this.currentFrame;\n\n    if (anim) {\n      anim.emit(Events.ANIMATION_COMPLETE, anim, frame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_KEY_COMPLETE + anim.key, anim, frame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_COMPLETE, anim, frame, gameObject);\n    }\n\n    if (this.nextAnim) {\n      var key = this.nextAnim;\n      this.nextAnim = null;\n      this.play(key);\n    }\n\n    return gameObject;\n  },\n\n  /**\r\n   * Stops the current animation from playing after the specified time delay, given in milliseconds.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopAfterDelay\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @param {integer} delay - The number of milliseconds to wait before stopping this animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopAfterDelay: function (delay) {\n    this._pendingStop = 1;\n    this._pendingStopValue = delay;\n    return this.parent;\n  },\n\n  /**\r\n   * Stops the current animation from playing when it next repeats.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopOnRepeat\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopOnRepeat: function () {\n    this._pendingStop = 2;\n    return this.parent;\n  },\n\n  /**\r\n   * Stops the current animation from playing when it next sets the given frame.\r\n   * If this frame doesn't exist within the animation it will not stop it from playing.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#stopOnFrame\r\n   * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} frame - The frame to check before stopping this animation.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  stopOnFrame: function (frame) {\n    this._pendingStop = 3;\n    this._pendingStopValue = frame;\n    return this.parent;\n  },\n\n  /**\r\n   * Sets the Time Scale factor, allowing you to make the animation go go faster or slower than default.\r\n   * Where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setTimeScale\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [value=1] - The time scale factor, where 1 is no change, 0.5 is half speed, etc.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n   */\n  setTimeScale: function (value) {\n    if (value === undefined) {\n      value = 1;\n    }\n\n    this._timeScale = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets the Time Scale factor.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getTimeScale\r\n   * @since 3.4.0\r\n   *\r\n   * @return {number} The Time Scale value.\r\n   */\n  getTimeScale: function () {\n    return this._timeScale;\n  },\n\n  /**\r\n   * Returns the total number of frames in this animation.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getTotalFrames\r\n   * @since 3.4.0\r\n   *\r\n   * @return {integer} The total number of frames in this animation.\r\n   */\n  getTotalFrames: function () {\n    return this.currentAnim.frames.length;\n  },\n\n  /**\r\n   * The internal update loop for the Animation Component.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} time - The current timestamp.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.currentAnim || !this.isPlaying || this.currentAnim.paused) {\n      return;\n    }\n\n    this.accumulator += delta * this._timeScale;\n\n    if (this._pendingStop === 1) {\n      this._pendingStopValue -= delta;\n\n      if (this._pendingStopValue <= 0) {\n        return this.currentAnim.completeAnimation(this);\n      }\n    }\n\n    if (this.accumulator >= this.nextTick) {\n      this.currentAnim.setFrame(this);\n    }\n  },\n\n  /**\r\n   * Sets the given Animation Frame as being the current frame\r\n   * and applies it to the parent Game Object, adjusting its size and origin as needed.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setCurrentFrame\r\n   * @since 3.4.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} animationFrame - The Animation Frame to set as being current.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  setCurrentFrame: function (animationFrame) {\n    var gameObject = this.parent;\n    this.currentFrame = animationFrame;\n    gameObject.texture = animationFrame.frame.texture;\n    gameObject.frame = animationFrame.frame;\n\n    if (gameObject.isCropped) {\n      gameObject.frame.updateCropUVs(gameObject._crop, gameObject.flipX, gameObject.flipY);\n    }\n\n    gameObject.setSizeToFrame();\n\n    if (animationFrame.frame.customPivot) {\n      gameObject.setOrigin(animationFrame.frame.pivotX, animationFrame.frame.pivotY);\n    } else {\n      gameObject.updateDisplayOrigin();\n    }\n\n    return gameObject;\n  },\n\n  /**\r\n   * Internal frame change handler.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#updateFrame\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_UPDATE_EVENT\r\n   * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_UPDATE_EVENT\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Animations.AnimationFrame} animationFrame - The animation frame to change to.\r\n   */\n  updateFrame: function (animationFrame) {\n    var gameObject = this.setCurrentFrame(animationFrame);\n\n    if (this.isPlaying) {\n      if (animationFrame.setAlpha) {\n        gameObject.alpha = animationFrame.alpha;\n      }\n\n      var anim = this.currentAnim;\n      gameObject.emit(Events.SPRITE_ANIMATION_KEY_UPDATE + anim.key, anim, animationFrame, gameObject);\n      gameObject.emit(Events.SPRITE_ANIMATION_UPDATE, anim, animationFrame, gameObject);\n\n      if (this._pendingStop === 3 && this._pendingStopValue === animationFrame) {\n        this.currentAnim.completeAnimation(this);\n      }\n    }\n  },\n\n  /**\r\n   * Advances the animation to the next frame, regardless of the time or animation state.\r\n   * If the animation is set to repeat, or yoyo, this will still take effect.\r\n   * \r\n   * Calling this does not change the direction of the animation. I.e. if it was currently\r\n   * playing in reverse, calling this method doesn't then change the direction to forwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#nextFrame\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  nextFrame: function () {\n    if (this.currentAnim) {\n      this.currentAnim.nextFrame(this);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Advances the animation to the previous frame, regardless of the time or animation state.\r\n   * If the animation is set to repeat, or yoyo, this will still take effect.\r\n   * \r\n   * Calling this does not change the direction of the animation. I.e. if it was currently\r\n   * playing in forwards, calling this method doesn't then change the direction to backwards.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#previousFrame\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  previousFrame: function () {\n    if (this.currentAnim) {\n      this.currentAnim.previousFrame(this);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Sets if the current Animation will yoyo when it reaches the end.\r\n   * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#setYoyo\r\n   * @since 3.4.0\r\n   *\r\n   * @param {boolean} [value=false] - `true` if the animation should yoyo, `false` to not.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n   */\n  setYoyo: function (value) {\n    if (value === undefined) {\n      value = false;\n    }\n\n    this._yoyo = value;\n    return this.parent;\n  },\n\n  /**\r\n   * Gets if the current Animation will yoyo when it reaches the end.\r\n   * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#getYoyo\r\n   * @since 3.4.0\r\n   *\r\n   * @return {boolean} `true` if the animation is set to yoyo, `false` if not.\r\n   */\n  getYoyo: function () {\n    return this._yoyo;\n  },\n\n  /**\r\n   * Destroy this Animation component.\r\n   *\r\n   * Unregisters event listeners and cleans up its references.\r\n   *\r\n   * @method Phaser.GameObjects.Components.Animation#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.animationManager.off(Events.REMOVE_ANIMATION, this.remove, this);\n    this.animationManager = null;\n    this.parent = null;\n    this.currentAnim = null;\n    this.currentFrame = null;\n  }\n});\nmodule.exports = Animation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/Animation.js"],"names":["BaseAnimation","require","Class","Events","Animation","initialize","parent","animationManager","scene","sys","anims","once","REMOVE_ANIMATION","remove","isPlaying","currentAnim","currentFrame","nextAnim","_timeScale","frameRate","duration","msPerFrame","skipMissedFrames","_delay","_repeat","_repeatDelay","_yoyo","forward","_reverse","accumulator","nextTick","repeatCounter","pendingRepeat","_paused","_wasPlaying","_pendingStop","_pendingStopValue","chain","key","setDelay","value","undefined","getDelay","delayedPlay","delay","startFrame","play","getCurrentKey","load","stop","pause","atFrame","updateFrame","resume","fromFrame","isPaused","get","ignoreIfPlaying","_startAnimation","playReverse","anim","gameObject","Number","MAX_VALUE","getFirstTick","showOnStart","visible","frame","emit","ANIMATION_START","SPRITE_ANIMATION_KEY_START","SPRITE_ANIMATION_START","reverse","getProgress","p","progress","setProgress","setCurrentFrame","getFrameByProgress","animation","frames","getRepeat","setRepeat","getRepeatDelay","setRepeatDelay","restart","includeDelay","ANIMATION_RESTART","SPRITE_ANIMATION_KEY_RESTART","SPRITE_ANIMATION_RESTART","ANIMATION_COMPLETE","SPRITE_ANIMATION_KEY_COMPLETE","SPRITE_ANIMATION_COMPLETE","stopAfterDelay","stopOnRepeat","stopOnFrame","setTimeScale","getTimeScale","getTotalFrames","length","update","time","delta","paused","completeAnimation","setFrame","animationFrame","texture","isCropped","updateCropUVs","_crop","flipX","flipY","setSizeToFrame","customPivot","setOrigin","pivotX","pivotY","updateDisplayOrigin","setAlpha","alpha","SPRITE_ANIMATION_KEY_UPDATE","SPRITE_ANIMATION_UPDATE","nextFrame","previousFrame","setYoyo","getYoyo","destroy","off","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseAnimation = require('../../animations/Animation');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../../animations/events');\r\n\r\n/**\r\n * @classdesc\r\n * A Game Object Animation Controller.\r\n *\r\n * This controller lives as an instance within a Game Object, accessible as `sprite.anims`.\r\n *\r\n * @class Animation\r\n * @memberof Phaser.GameObjects.Components\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} parent - The Game Object to which this animation controller belongs.\r\n */\r\nvar Animation = new Class({\r\n\r\n    initialize:\r\n\r\n    function Animation (parent)\r\n    {\r\n        /**\r\n         * The Game Object to which this animation controller belongs.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#parent\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * A reference to the global Animation Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#animationManager\r\n         * @type {Phaser.Animations.AnimationManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.animationManager = parent.scene.sys.anims;\r\n\r\n        this.animationManager.once(Events.REMOVE_ANIMATION, this.remove, this);\r\n\r\n        /**\r\n         * Is an animation currently playing or not?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#isPlaying\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isPlaying = false;\r\n\r\n        /**\r\n         * The current Animation loaded into this Animation Controller.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#currentAnim\r\n         * @type {?Phaser.Animations.Animation}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentAnim = null;\r\n\r\n        /**\r\n         * The current AnimationFrame being displayed by this Animation Controller.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#currentFrame\r\n         * @type {?Phaser.Animations.AnimationFrame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.currentFrame = null;\r\n\r\n        /**\r\n         * The key of the next Animation to be loaded into this Animation Controller when the current animation completes.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#nextAnim\r\n         * @type {?string}\r\n         * @default null\r\n         * @since 3.16.0\r\n         */\r\n        this.nextAnim = null;\r\n\r\n        /**\r\n         * Time scale factor.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_timeScale\r\n         * @type {number}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._timeScale = 1;\r\n\r\n        /**\r\n         * The frame rate of playback in frames per second.\r\n         * The default is 24 if the `duration` property is `null`.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#frameRate\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frameRate = 0;\r\n\r\n        /**\r\n         * How long the animation should play for, in milliseconds.\r\n         * If the `frameRate` property has been set then it overrides this value,\r\n         * otherwise the `frameRate` is derived from `duration`.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * ms per frame, not including frame specific modifiers that may be present in the Animation data.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#msPerFrame\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.msPerFrame = 0;\r\n\r\n        /**\r\n         * Skip frames if the time lags, or always advanced anyway?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#skipMissedFrames\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.skipMissedFrames = true;\r\n\r\n        /**\r\n         * A delay before starting playback, in milliseconds.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_delay\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._delay = 0;\r\n\r\n        /**\r\n         * Number of times to repeat the animation (-1 for infinity)\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_repeat\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._repeat = 0;\r\n\r\n        /**\r\n         * Delay before the repeat starts, in milliseconds.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_repeatDelay\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._repeatDelay = 0;\r\n\r\n        /**\r\n         * Should the animation yoyo? (reverse back down to the start) before repeating?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_yoyo\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._yoyo = false;\r\n\r\n        /**\r\n         * Will the playhead move forwards (`true`) or in reverse (`false`).\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#forward\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.forward = true;\r\n\r\n        /**\r\n         * An Internal trigger that's play the animation in reverse mode ('true') or not ('false'),\r\n         * needed because forward can be changed by yoyo feature.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_reverse\r\n         * @type {boolean}\r\n         * @default false\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._reverse = false;\r\n\r\n        /**\r\n         * Internal time overflow accumulator.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#accumulator\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accumulator = 0;\r\n\r\n        /**\r\n         * The time point at which the next animation frame will change.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#nextTick\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.nextTick = 0;\r\n\r\n        /**\r\n         * An internal counter keeping track of how many repeats are left to play.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#repeatCounter\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.repeatCounter = 0;\r\n\r\n        /**\r\n         * An internal flag keeping track of pending repeats.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#pendingRepeat\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pendingRepeat = false;\r\n\r\n        /**\r\n         * Is the Animation paused?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_paused\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._paused = false;\r\n\r\n        /**\r\n         * Was the animation previously playing before being paused?\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_wasPlaying\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._wasPlaying = false;\r\n\r\n        /**\r\n         * Internal property tracking if this Animation is waiting to stop.\r\n         *\r\n         * 0 = No\r\n         * 1 = Waiting for ms to pass\r\n         * 2 = Waiting for repeat\r\n         * 3 = Waiting for specific frame\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_pendingStop\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._pendingStop = 0;\r\n\r\n        /**\r\n         * Internal property used by _pendingStop.\r\n         *\r\n         * @name Phaser.GameObjects.Components.Animation#_pendingStopValue\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.4.0\r\n         */\r\n        this._pendingStopValue;\r\n    },\r\n\r\n    /**\r\n     * Sets an animation to be played immediately after the current one completes.\r\n     * \r\n     * The current animation must enter a 'completed' state for this to happen, i.e. finish all of its repeats, delays, etc, or have the `stop` method called directly on it.\r\n     * \r\n     * An animation set to repeat forever will never enter a completed state.\r\n     * \r\n     * You can chain a new animation at any point, including before the current one starts playing, during it, or when it ends (via its `animationcomplete` callback).\r\n     * Chained animations are specific to a Game Object, meaning different Game Objects can have different chained animations without impacting the global animation they're playing.\r\n     * \r\n     * Call this method with no arguments to reset the chained animation.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#chain\r\n     * @since 3.16.0\r\n     *\r\n     * @param {(string|Phaser.Animations.Animation)} [key] - The string-based key of the animation to play next, as defined previously in the Animation Manager. Or an Animation instance.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    chain: function (key)\r\n    {\r\n        if (key instanceof BaseAnimation)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        this.nextAnim = key;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Sets the amount of time, in milliseconds, that the animation will be delayed before starting playback.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} [value=0] - The amount of time, in milliseconds, to wait before starting playback.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setDelay: function (value)\r\n    {\r\n        if (value === undefined) { value = 0; }\r\n\r\n        this._delay = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the amount of time, in milliseconds that the animation will be delayed before starting playback.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The amount of time, in milliseconds, the Animation will wait before starting playback.\r\n     */\r\n    getDelay: function ()\r\n    {\r\n        return this._delay;\r\n    },\r\n\r\n    /**\r\n     * Waits for the specified delay, in milliseconds, then starts playback of the requested animation.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#delayedPlay\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} delay - The delay, in milliseconds, to wait before starting the animation playing.\r\n     * @param {string} key - The key of the animation to play.\r\n     * @param {integer} [startFrame=0] - The frame of the animation to start from.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    delayedPlay: function (delay, key, startFrame)\r\n    {\r\n        this.play(key, true, startFrame);\r\n\r\n        this.nextTick += delay;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Returns the key of the animation currently loaded into this component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getCurrentKey\r\n     * @since 3.0.0\r\n     *\r\n     * @return {string} The key of the Animation loaded into this component.\r\n     */\r\n    getCurrentKey: function ()\r\n    {\r\n        if (this.currentAnim)\r\n        {\r\n            return this.currentAnim.key;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method used to load an animation into this component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#load\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the animation to load.\r\n     * @param {integer} [startFrame=0] - The start frame of the animation to load.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    load: function (key, startFrame)\r\n    {\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (this.isPlaying)\r\n        {\r\n            this.stop();\r\n        }\r\n\r\n        //  Load the new animation in\r\n        this.animationManager.load(this, key, startFrame);\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Pause the current animation and set the `isPlaying` property to `false`.\r\n     * You can optionally pause it at a specific frame.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} [atFrame] - An optional frame to set after pausing the animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    pause: function (atFrame)\r\n    {\r\n        if (!this._paused)\r\n        {\r\n            this._paused = true;\r\n            this._wasPlaying = this.isPlaying;\r\n            this.isPlaying = false;\r\n        }\r\n\r\n        if (atFrame !== undefined)\r\n        {\r\n            this.updateFrame(atFrame);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Resumes playback of a paused animation and sets the `isPlaying` property to `true`.\r\n     * You can optionally tell it to start playback from a specific frame.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} [fromFrame] - An optional frame to set before restarting playback.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    resume: function (fromFrame)\r\n    {\r\n        if (this._paused)\r\n        {\r\n            this._paused = false;\r\n            this.isPlaying = this._wasPlaying;\r\n        }\r\n\r\n        if (fromFrame !== undefined)\r\n        {\r\n            this.updateFrame(fromFrame);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * `true` if the current animation is paused, otherwise `false`.\r\n     *\r\n     * @name Phaser.GameObjects.Components.Animation#isPaused\r\n     * @readonly\r\n     * @type {boolean}\r\n     * @since 3.4.0\r\n     */\r\n    isPaused: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._paused;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Plays an Animation on a Game Object that has the Animation component, such as a Sprite.\r\n     * \r\n     * Animations are stored in the global Animation Manager and are referenced by a unique string-based key.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#play\r\n     * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n     * @param {boolean} [ignoreIfPlaying=false] - If this animation is already playing then ignore this call.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    play: function (key, ignoreIfPlaying, startFrame)\r\n    {\r\n        if (ignoreIfPlaying === undefined) { ignoreIfPlaying = false; }\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (key instanceof BaseAnimation)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key)\r\n        {\r\n            return this.parent;\r\n        }\r\n\r\n        this.forward = true;\r\n        this._reverse = false;\r\n        this._paused = false;\r\n        this._wasPlaying = true;\r\n\r\n        return this._startAnimation(key, startFrame);\r\n    },\r\n\r\n    /**\r\n     * Plays an Animation (in reverse mode) on the Game Object that owns this Animation Component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#playReverse\r\n     * @fires Phaser.GameObjects.Components.Animation#onStartEvent\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(string|Phaser.Animations.Animation)} key - The string-based key of the animation to play, as defined previously in the Animation Manager. Or an Animation instance.\r\n     * @param {boolean} [ignoreIfPlaying=false] - If an animation is already playing then ignore this call.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    playReverse: function (key, ignoreIfPlaying, startFrame)\r\n    {\r\n        if (ignoreIfPlaying === undefined) { ignoreIfPlaying = false; }\r\n        if (startFrame === undefined) { startFrame = 0; }\r\n\r\n        if (key instanceof BaseAnimation)\r\n        {\r\n            key = key.key;\r\n        }\r\n\r\n        if (ignoreIfPlaying && this.isPlaying && this.currentAnim.key === key)\r\n        {\r\n            return this.parent;\r\n        }\r\n\r\n        this.forward = false;\r\n        this._reverse = true;\r\n\r\n        return this._startAnimation(key, startFrame);\r\n    },\r\n\r\n    /**\r\n     * Load an Animation and fires 'onStartEvent' event, extracted from 'play' method.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#_startAnimation\r\n     * @fires Phaser.Animations.Events#START_ANIMATION_EVENT\r\n     * @fires Phaser.Animations.Events#SPRITE_START_ANIMATION_EVENT\r\n     * @fires Phaser.Animations.Events#SPRITE_START_KEY_ANIMATION_EVENT\r\n     * @since 3.12.0\r\n     *\r\n     * @param {string} key - The string-based key of the animation to play, as defined previously in the Animation Manager.\r\n     * @param {integer} [startFrame=0] - Optionally start the animation playing from this frame index.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    _startAnimation: function (key, startFrame)\r\n    {\r\n        this.load(key, startFrame);\r\n\r\n        var anim = this.currentAnim;\r\n        var gameObject = this.parent;\r\n\r\n        if (!anim)\r\n        {\r\n            return gameObject;\r\n        }\r\n\r\n        //  Should give us 9,007,199,254,740,991 safe repeats\r\n        this.repeatCounter = (this._repeat === -1) ? Number.MAX_VALUE : this._repeat;\r\n\r\n        anim.getFirstTick(this);\r\n\r\n        this.isPlaying = true;\r\n        this.pendingRepeat = false;\r\n\r\n        if (anim.showOnStart)\r\n        {\r\n            gameObject.visible = true;\r\n        }\r\n\r\n        var frame = this.currentFrame;\r\n\r\n        anim.emit(Events.ANIMATION_START, anim, frame, gameObject);\r\n\r\n        gameObject.emit(Events.SPRITE_ANIMATION_KEY_START + key, anim, frame, gameObject);\r\n\r\n        gameObject.emit(Events.SPRITE_ANIMATION_START, anim, frame, gameObject);\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Reverse the Animation that is already playing on the Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#reverse\r\n     * @since 3.12.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    reverse: function ()\r\n    {\r\n        if (this.isPlaying)\r\n        {\r\n            this._reverse = !this._reverse;\r\n\r\n            this.forward = !this.forward;\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Returns a value between 0 and 1 indicating how far this animation is through, ignoring repeats and yoyos.\r\n     * If the animation has a non-zero repeat defined, `getProgress` and `getTotalProgress` will be different\r\n     * because `getProgress` doesn't include any repeats or repeat delays, whereas `getTotalProgress` does.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The progress of the current animation, between 0 and 1.\r\n     */\r\n    getProgress: function ()\r\n    {\r\n        var p = this.currentFrame.progress;\r\n\r\n        if (!this.forward)\r\n        {\r\n            p = 1 - p;\r\n        }\r\n\r\n        return p;\r\n    },\r\n\r\n    /**\r\n     * Takes a value between 0 and 1 and uses it to set how far this animation is through playback.\r\n     * Does not factor in repeats or yoyos, but does handle playing forwards or backwards.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setProgress\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [value=0] - The progress value, between 0 and 1.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setProgress: function (value)\r\n    {\r\n        if (!this.forward)\r\n        {\r\n            value = 1 - value;\r\n        }\r\n\r\n        this.setCurrentFrame(this.currentAnim.getFrameByProgress(value));\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Handle the removal of an animation from the Animation Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [key] - The key of the removed Animation.\r\n     * @param {Phaser.Animations.Animation} [animation] - The removed Animation.\r\n     */\r\n    remove: function (key, animation)\r\n    {\r\n        if (animation === undefined) { animation = this.currentAnim; }\r\n\r\n        if (this.isPlaying && animation.key === this.currentAnim.key)\r\n        {\r\n            this.stop();\r\n\r\n            this.setCurrentFrame(this.currentAnim.frames[0]);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Gets the number of times that the animation will repeat\r\n     * after its first iteration. For example, if returns 1, the animation will\r\n     * play a total of twice (the initial play plus 1 repeat).\r\n     * A value of -1 means the animation will repeat indefinitely.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getRepeat\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The number of times that the animation will repeat.\r\n     */\r\n    getRepeat: function ()\r\n    {\r\n        return this._repeat;\r\n    },\r\n\r\n    /**\r\n     * Sets the number of times that the animation should repeat\r\n     * after its first iteration. For example, if repeat is 1, the animation will\r\n     * play a total of twice (the initial play plus 1 repeat).\r\n     * To repeat indefinitely, use -1. repeat should always be an integer.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setRepeat\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} value - The number of times that the animation should repeat.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setRepeat: function (value)\r\n    {\r\n        this._repeat = value;\r\n\r\n        this.repeatCounter = (value === -1) ? Number.MAX_VALUE : value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the amount of delay between repeats, if any.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getRepeatDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The delay between repeats.\r\n     */\r\n    getRepeatDelay: function ()\r\n    {\r\n        return this._repeatDelay;\r\n    },\r\n\r\n    /**\r\n     * Sets the amount of time in seconds between repeats.\r\n     * For example, if `repeat` is 2 and `repeatDelay` is 10, the animation will play initially,\r\n     * then wait for 10 seconds before repeating, then play again, then wait another 10 seconds\r\n     * before doing its final repeat.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setRepeatDelay\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} value - The delay to wait between repeats, in seconds.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setRepeatDelay: function (value)\r\n    {\r\n        this._repeatDelay = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Restarts the current animation from its beginning, optionally including its delay value.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#restart\r\n     * @fires Phaser.Animations.Events#RESTART_ANIMATION_EVENT\r\n     * @fires Phaser.Animations.Events#SPRITE_RESTART_ANIMATION_EVENT\r\n     * @fires Phaser.Animations.Events#SPRITE_RESTART_KEY_ANIMATION_EVENT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [includeDelay=false] - Whether to include the delay value of the animation when restarting.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    restart: function (includeDelay)\r\n    {\r\n        if (includeDelay === undefined) { includeDelay = false; }\r\n\r\n        var anim = this.currentAnim;\r\n\r\n        anim.getFirstTick(this, includeDelay);\r\n\r\n        this.forward = true;\r\n        this.isPlaying = true;\r\n        this.pendingRepeat = false;\r\n        this._paused = false;\r\n\r\n        //  Set frame\r\n        this.updateFrame(anim.frames[0]);\r\n\r\n        var gameObject = this.parent;\r\n        var frame = this.currentFrame;\r\n\r\n        anim.emit(Events.ANIMATION_RESTART, anim, frame, gameObject);\r\n\r\n        gameObject.emit(Events.SPRITE_ANIMATION_KEY_RESTART + anim.key, anim, frame, gameObject);\r\n\r\n        gameObject.emit(Events.SPRITE_ANIMATION_RESTART, anim, frame, gameObject);\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Immediately stops the current animation from playing and dispatches the `animationcomplete` event.\r\n     * \r\n     * If no animation is set, no event will be dispatched.\r\n     * \r\n     * If there is another animation queued (via the `chain` method) then it will start playing immediately.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stop\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this._pendingStop = 0;\r\n\r\n        this.isPlaying = false;\r\n\r\n        var gameObject = this.parent;\r\n        var anim = this.currentAnim;\r\n        var frame = this.currentFrame;\r\n\r\n        if (anim)\r\n        {\r\n            anim.emit(Events.ANIMATION_COMPLETE, anim, frame, gameObject);\r\n\r\n            gameObject.emit(Events.SPRITE_ANIMATION_KEY_COMPLETE + anim.key, anim, frame, gameObject);\r\n    \r\n            gameObject.emit(Events.SPRITE_ANIMATION_COMPLETE, anim, frame, gameObject);\r\n        }\r\n\r\n        if (this.nextAnim)\r\n        {\r\n            var key = this.nextAnim;\r\n\r\n            this.nextAnim = null;\r\n\r\n            this.play(key);\r\n        }\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing after the specified time delay, given in milliseconds.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopAfterDelay\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {integer} delay - The number of milliseconds to wait before stopping this animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopAfterDelay: function (delay)\r\n    {\r\n        this._pendingStop = 1;\r\n        this._pendingStopValue = delay;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing when it next repeats.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopOnRepeat\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopOnRepeat: function ()\r\n    {\r\n        this._pendingStop = 2;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Stops the current animation from playing when it next sets the given frame.\r\n     * If this frame doesn't exist within the animation it will not stop it from playing.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#stopOnFrame\r\n     * @fires Phaser.GameObjects.Components.Animation#onCompleteEvent\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} frame - The frame to check before stopping this animation.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    stopOnFrame: function (frame)\r\n    {\r\n        this._pendingStop = 3;\r\n        this._pendingStopValue = frame;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Sets the Time Scale factor, allowing you to make the animation go go faster or slower than default.\r\n     * Where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setTimeScale\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [value=1] - The time scale factor, where 1 is no change, 0.5 is half speed, etc.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object that owns this Animation Component.\r\n     */\r\n    setTimeScale: function (value)\r\n    {\r\n        if (value === undefined) { value = 1; }\r\n\r\n        this._timeScale = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets the Time Scale factor.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getTimeScale\r\n     * @since 3.4.0\r\n     *\r\n     * @return {number} The Time Scale value.\r\n     */\r\n    getTimeScale: function ()\r\n    {\r\n        return this._timeScale;\r\n    },\r\n\r\n    /**\r\n     * Returns the total number of frames in this animation.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getTotalFrames\r\n     * @since 3.4.0\r\n     *\r\n     * @return {integer} The total number of frames in this animation.\r\n     */\r\n    getTotalFrames: function ()\r\n    {\r\n        return this.currentAnim.frames.length;\r\n    },\r\n\r\n    /**\r\n     * The internal update loop for the Animation Component.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} time - The current timestamp.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.currentAnim || !this.isPlaying || this.currentAnim.paused)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.accumulator += delta * this._timeScale;\r\n\r\n        if (this._pendingStop === 1)\r\n        {\r\n            this._pendingStopValue -= delta;\r\n\r\n            if (this._pendingStopValue <= 0)\r\n            {\r\n                return this.currentAnim.completeAnimation(this);\r\n            }\r\n        }\r\n\r\n        if (this.accumulator >= this.nextTick)\r\n        {\r\n            this.currentAnim.setFrame(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given Animation Frame as being the current frame\r\n     * and applies it to the parent Game Object, adjusting its size and origin as needed.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setCurrentFrame\r\n     * @since 3.4.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} animationFrame - The Animation Frame to set as being current.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    setCurrentFrame: function (animationFrame)\r\n    {\r\n        var gameObject = this.parent;\r\n\r\n        this.currentFrame = animationFrame;\r\n\r\n        gameObject.texture = animationFrame.frame.texture;\r\n        gameObject.frame = animationFrame.frame;\r\n\r\n        if (gameObject.isCropped)\r\n        {\r\n            gameObject.frame.updateCropUVs(gameObject._crop, gameObject.flipX, gameObject.flipY);\r\n        }\r\n\r\n        gameObject.setSizeToFrame();\r\n\r\n        if (animationFrame.frame.customPivot)\r\n        {\r\n            gameObject.setOrigin(animationFrame.frame.pivotX, animationFrame.frame.pivotY);\r\n        }\r\n        else\r\n        {\r\n            gameObject.updateDisplayOrigin();\r\n        }\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Internal frame change handler.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#updateFrame\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_UPDATE_EVENT\r\n     * @fires Phaser.Animations.Events#SPRITE_ANIMATION_KEY_UPDATE_EVENT\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Animations.AnimationFrame} animationFrame - The animation frame to change to.\r\n     */\r\n    updateFrame: function (animationFrame)\r\n    {\r\n        var gameObject = this.setCurrentFrame(animationFrame);\r\n\r\n        if (this.isPlaying)\r\n        {\r\n            if (animationFrame.setAlpha)\r\n            {\r\n                gameObject.alpha = animationFrame.alpha;\r\n            }\r\n\r\n            var anim = this.currentAnim;\r\n\r\n            gameObject.emit(Events.SPRITE_ANIMATION_KEY_UPDATE + anim.key, anim, animationFrame, gameObject);\r\n\r\n            gameObject.emit(Events.SPRITE_ANIMATION_UPDATE, anim, animationFrame, gameObject);\r\n\r\n            if (this._pendingStop === 3 && this._pendingStopValue === animationFrame)\r\n            {\r\n                this.currentAnim.completeAnimation(this);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Advances the animation to the next frame, regardless of the time or animation state.\r\n     * If the animation is set to repeat, or yoyo, this will still take effect.\r\n     * \r\n     * Calling this does not change the direction of the animation. I.e. if it was currently\r\n     * playing in reverse, calling this method doesn't then change the direction to forwards.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#nextFrame\r\n     * @since 3.16.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    nextFrame: function ()\r\n    {\r\n        if (this.currentAnim)\r\n        {\r\n            this.currentAnim.nextFrame(this);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Advances the animation to the previous frame, regardless of the time or animation state.\r\n     * If the animation is set to repeat, or yoyo, this will still take effect.\r\n     * \r\n     * Calling this does not change the direction of the animation. I.e. if it was currently\r\n     * playing in forwards, calling this method doesn't then change the direction to backwards.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#previousFrame\r\n     * @since 3.16.0\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    previousFrame: function ()\r\n    {\r\n        if (this.currentAnim)\r\n        {\r\n            this.currentAnim.previousFrame(this);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Sets if the current Animation will yoyo when it reaches the end.\r\n     * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#setYoyo\r\n     * @since 3.4.0\r\n     *\r\n     * @param {boolean} [value=false] - `true` if the animation should yoyo, `false` to not.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object this Animation Component belongs to.\r\n     */\r\n    setYoyo: function (value)\r\n    {\r\n        if (value === undefined) { value = false; }\r\n\r\n        this._yoyo = value;\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Gets if the current Animation will yoyo when it reaches the end.\r\n     * A yoyo'ing animation will play through consecutively, and then reverse-play back to the start again.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#getYoyo\r\n     * @since 3.4.0\r\n     *\r\n     * @return {boolean} `true` if the animation is set to yoyo, `false` if not.\r\n     */\r\n    getYoyo: function ()\r\n    {\r\n        return this._yoyo;\r\n    },\r\n\r\n    /**\r\n     * Destroy this Animation component.\r\n     *\r\n     * Unregisters event listeners and cleans up its references.\r\n     *\r\n     * @method Phaser.GameObjects.Components.Animation#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.animationManager.off(Events.REMOVE_ANIMATION, this.remove, this);\r\n\r\n        this.animationManager = null;\r\n        this.parent = null;\r\n\r\n        this.currentAnim = null;\r\n        this.currentFrame = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Animation;\r\n"]},"metadata":{},"sourceType":"script"}