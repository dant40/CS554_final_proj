{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Length = require('./Length');\n/**\r\n * Extends the start and end points of a Line by the given amounts.\r\n *\r\n * The amounts can be positive or negative. Positive points will increase the length of the line,\r\n * while negative ones will decrease it.\r\n *\r\n * If no `right` value is provided it will extend the length of the line equally in both directions.\r\n *\r\n * Pass a value of zero to leave the start or end point unchanged.\r\n *\r\n * @function Phaser.Geom.Line.Extend\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line instance to extend.\r\n * @param {number} left - The amount to extend the start of the line by.\r\n * @param {number} [right] - The amount to extend the end of the line by. If not given it will be set to the `left` value.\r\n *\r\n * @return {Phaser.Geom.Line} The modified Line instance.\r\n */\n\n\nvar Extend = function (line, left, right) {\n  if (right === undefined) {\n    right = left;\n  }\n\n  var length = Length(line);\n  var slopX = line.x2 - line.x1;\n  var slopY = line.y2 - line.y1;\n\n  if (left) {\n    line.x1 = line.x1 - slopX / length * left;\n    line.y1 = line.y1 - slopY / length * left;\n  }\n\n  if (right) {\n    line.x2 = line.x2 + slopX / length * right;\n    line.y2 = line.y2 + slopY / length * right;\n  }\n\n  return line;\n};\n\nmodule.exports = Extend;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/line/Extend.js"],"names":["Length","require","Extend","line","left","right","undefined","length","slopX","x2","x1","slopY","y2","y1","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIC,MAAM,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,KAAtB,EACb;AACI,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAGD,IAAR;AAAe;;AAE1C,MAAIG,MAAM,GAAGP,MAAM,CAACG,IAAD,CAAnB;AAEA,MAAIK,KAAK,GAAGL,IAAI,CAACM,EAAL,GAAUN,IAAI,CAACO,EAA3B;AACA,MAAIC,KAAK,GAAGR,IAAI,CAACS,EAAL,GAAUT,IAAI,CAACU,EAA3B;;AAEA,MAAIT,IAAJ,EACA;AACID,IAAAA,IAAI,CAACO,EAAL,GAAUP,IAAI,CAACO,EAAL,GAAUF,KAAK,GAAGD,MAAR,GAAiBH,IAArC;AACAD,IAAAA,IAAI,CAACU,EAAL,GAAUV,IAAI,CAACU,EAAL,GAAUF,KAAK,GAAGJ,MAAR,GAAiBH,IAArC;AACH;;AAED,MAAIC,KAAJ,EACA;AACIF,IAAAA,IAAI,CAACM,EAAL,GAAUN,IAAI,CAACM,EAAL,GAAUD,KAAK,GAAGD,MAAR,GAAiBF,KAArC;AACAF,IAAAA,IAAI,CAACS,EAAL,GAAUT,IAAI,CAACS,EAAL,GAAUD,KAAK,GAAGJ,MAAR,GAAiBF,KAArC;AACH;;AAED,SAAOF,IAAP;AACH,CAtBD;;AAwBAW,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Length = require('./Length');\r\n\r\n/**\r\n * Extends the start and end points of a Line by the given amounts.\r\n *\r\n * The amounts can be positive or negative. Positive points will increase the length of the line,\r\n * while negative ones will decrease it.\r\n *\r\n * If no `right` value is provided it will extend the length of the line equally in both directions.\r\n *\r\n * Pass a value of zero to leave the start or end point unchanged.\r\n *\r\n * @function Phaser.Geom.Line.Extend\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The line instance to extend.\r\n * @param {number} left - The amount to extend the start of the line by.\r\n * @param {number} [right] - The amount to extend the end of the line by. If not given it will be set to the `left` value.\r\n *\r\n * @return {Phaser.Geom.Line} The modified Line instance.\r\n */\r\nvar Extend = function (line, left, right)\r\n{\r\n    if (right === undefined) { right = left; }\r\n\r\n    var length = Length(line);\r\n\r\n    var slopX = line.x2 - line.x1;\r\n    var slopY = line.y2 - line.y1;\r\n\r\n    if (left)\r\n    {\r\n        line.x1 = line.x1 - slopX / length * left;\r\n        line.y1 = line.y1 - slopY / length * left;\r\n    }\r\n\r\n    if (right)\r\n    {\r\n        line.x2 = line.x2 + slopX / length * right;\r\n        line.y2 = line.y2 + slopY / length * right;\r\n    }\r\n\r\n    return line;\r\n};\r\n\r\nmodule.exports = Extend;\r\n"]},"metadata":{},"sourceType":"script"}