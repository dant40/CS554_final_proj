{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar ShuffleArray = require('../../utils/array/Shuffle');\n/**\r\n * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n * appear to have changed! This method only modifies tile indexes and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.Shuffle\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar Shuffle = function (tileX, tileY, width, height, layer) {\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n  var indexes = tiles.map(function (tile) {\n    return tile.index;\n  });\n  ShuffleArray(indexes);\n\n  for (var i = 0; i < tiles.length; i++) {\n    tiles[i].index = indexes[i];\n  }\n};\n\nmodule.exports = Shuffle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/Shuffle.js"],"names":["GetTilesWithin","require","ShuffleArray","Shuffle","tileX","tileY","width","height","layer","tiles","indexes","map","tile","index","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,2BAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIE,OAAO,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,KAAvC,EACd;AACI,MAAIC,KAAK,GAAGT,cAAc,CAACI,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B,IAA9B,EAAoCC,KAApC,CAA1B;AAEA,MAAIE,OAAO,GAAGD,KAAK,CAACE,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAAE,WAAOA,IAAI,CAACC,KAAZ;AAAoB,GAAhD,CAAd;AACAX,EAAAA,YAAY,CAACQ,OAAD,CAAZ;;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACIL,IAAAA,KAAK,CAACK,CAAD,CAAL,CAASD,KAAT,GAAiBH,OAAO,CAACI,CAAD,CAAxB;AACH;AACJ,CAXD;;AAaAE,MAAM,CAACC,OAAP,GAAiBd,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar ShuffleArray = require('../../utils/array/Shuffle');\r\n\r\n/**\r\n * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n * appear to have changed! This method only modifies tile indexes and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.Shuffle\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar Shuffle = function (tileX, tileY, width, height, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    var indexes = tiles.map(function (tile) { return tile.index; });\r\n    ShuffleArray(indexes);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        tiles[i].index = indexes[i];\r\n    }\r\n};\r\n\r\nmodule.exports = Shuffle;\r\n"]},"metadata":{},"sourceType":"script"}