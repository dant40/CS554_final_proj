{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CONST = require('./const');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar Merge = require('../utils/object/Merge');\n\nvar InjectionMap = require('./InjectionMap');\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\n\n\nvar Settings = {\n  /**\r\n   * Takes a Scene configuration object and returns a fully formed System Settings object.\r\n   *\r\n   * @function Phaser.Scenes.Settings.create\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - The Scene configuration object used to create this Scene Settings.\r\n   *\r\n   * @return {Phaser.Types.Scenes.SettingsObject} The Scene Settings object created as a result of the config and default settings.\r\n   */\n  create: function (config) {\n    if (typeof config === 'string') {\n      config = {\n        key: config\n      };\n    } else if (config === undefined) {\n      //  Pass the 'hasOwnProperty' checks\n      config = {};\n    }\n\n    return {\n      status: CONST.PENDING,\n      key: GetValue(config, 'key', ''),\n      active: GetValue(config, 'active', false),\n      visible: GetValue(config, 'visible', true),\n      isBooted: false,\n      isTransition: false,\n      transitionFrom: null,\n      transitionDuration: 0,\n      transitionAllowInput: true,\n      //  Loader payload array\n      data: {},\n      pack: GetValue(config, 'pack', false),\n      //  Cameras\n      cameras: GetValue(config, 'cameras', null),\n      //  Scene Property Injection Map\n      map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\n      //  Physics\n      physics: GetValue(config, 'physics', {}),\n      //  Loader\n      loader: GetValue(config, 'loader', {}),\n      //  Plugins\n      plugins: GetValue(config, 'plugins', false),\n      //  Input\n      input: GetValue(config, 'input', {})\n    };\n  }\n};\nmodule.exports = Settings;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/scene/Settings.js"],"names":["CONST","require","GetValue","Merge","InjectionMap","Settings","create","config","key","undefined","status","PENDING","active","visible","isBooted","isTransition","transitionFrom","transitionDuration","transitionAllowInput","data","pack","cameras","map","physics","loader","plugins","input","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;AAIA,IAAII,QAAQ,GAAG;AAEX;;;;;;;;;;AAUAC,EAAAA,MAAM,EAAE,UAAUC,MAAV,EACR;AACI,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EACA;AACIA,MAAAA,MAAM,GAAG;AAAEC,QAAAA,GAAG,EAAED;AAAP,OAAT;AACH,KAHD,MAIK,IAAIA,MAAM,KAAKE,SAAf,EACL;AACI;AACAF,MAAAA,MAAM,GAAG,EAAT;AACH;;AAED,WAAO;AAEHG,MAAAA,MAAM,EAAEV,KAAK,CAACW,OAFX;AAIHH,MAAAA,GAAG,EAAEN,QAAQ,CAACK,MAAD,EAAS,KAAT,EAAgB,EAAhB,CAJV;AAKHK,MAAAA,MAAM,EAAEV,QAAQ,CAACK,MAAD,EAAS,QAAT,EAAmB,KAAnB,CALb;AAMHM,MAAAA,OAAO,EAAEX,QAAQ,CAACK,MAAD,EAAS,SAAT,EAAoB,IAApB,CANd;AAQHO,MAAAA,QAAQ,EAAE,KARP;AAUHC,MAAAA,YAAY,EAAE,KAVX;AAWHC,MAAAA,cAAc,EAAE,IAXb;AAYHC,MAAAA,kBAAkB,EAAE,CAZjB;AAaHC,MAAAA,oBAAoB,EAAE,IAbnB;AAeH;AAEAC,MAAAA,IAAI,EAAE,EAjBH;AAmBHC,MAAAA,IAAI,EAAElB,QAAQ,CAACK,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAnBX;AAqBH;AAEAc,MAAAA,OAAO,EAAEnB,QAAQ,CAACK,MAAD,EAAS,SAAT,EAAoB,IAApB,CAvBd;AAyBH;AAEAe,MAAAA,GAAG,EAAEpB,QAAQ,CAACK,MAAD,EAAS,KAAT,EAAgBJ,KAAK,CAACC,YAAD,EAAeF,QAAQ,CAACK,MAAD,EAAS,QAAT,EAAmB,EAAnB,CAAvB,CAArB,CA3BV;AA6BH;AAEAgB,MAAAA,OAAO,EAAErB,QAAQ,CAACK,MAAD,EAAS,SAAT,EAAoB,EAApB,CA/Bd;AAiCH;AAEAiB,MAAAA,MAAM,EAAEtB,QAAQ,CAACK,MAAD,EAAS,QAAT,EAAmB,EAAnB,CAnCb;AAqCH;AAEAkB,MAAAA,OAAO,EAAEvB,QAAQ,CAACK,MAAD,EAAS,SAAT,EAAoB,KAApB,CAvCd;AAyCH;AAEAmB,MAAAA,KAAK,EAAExB,QAAQ,CAACK,MAAD,EAAS,OAAT,EAAkB,EAAlB;AA3CZ,KAAP;AA8CH;AAtEU,CAAf;AA0EAoB,MAAM,CAACC,OAAP,GAAiBvB,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('./const');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar Merge = require('../utils/object/Merge');\r\nvar InjectionMap = require('./InjectionMap');\r\n\r\n/**\r\n * @namespace Phaser.Scenes.Settings\r\n */\r\n\r\nvar Settings = {\r\n\r\n    /**\r\n     * Takes a Scene configuration object and returns a fully formed System Settings object.\r\n     *\r\n     * @function Phaser.Scenes.Settings.create\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.Types.Scenes.SettingsConfig)} config - The Scene configuration object used to create this Scene Settings.\r\n     *\r\n     * @return {Phaser.Types.Scenes.SettingsObject} The Scene Settings object created as a result of the config and default settings.\r\n     */\r\n    create: function (config)\r\n    {\r\n        if (typeof config === 'string')\r\n        {\r\n            config = { key: config };\r\n        }\r\n        else if (config === undefined)\r\n        {\r\n            //  Pass the 'hasOwnProperty' checks\r\n            config = {};\r\n        }\r\n\r\n        return {\r\n\r\n            status: CONST.PENDING,\r\n\r\n            key: GetValue(config, 'key', ''),\r\n            active: GetValue(config, 'active', false),\r\n            visible: GetValue(config, 'visible', true),\r\n\r\n            isBooted: false,\r\n\r\n            isTransition: false,\r\n            transitionFrom: null,\r\n            transitionDuration: 0,\r\n            transitionAllowInput: true,\r\n\r\n            //  Loader payload array\r\n\r\n            data: {},\r\n\r\n            pack: GetValue(config, 'pack', false),\r\n\r\n            //  Cameras\r\n\r\n            cameras: GetValue(config, 'cameras', null),\r\n\r\n            //  Scene Property Injection Map\r\n\r\n            map: GetValue(config, 'map', Merge(InjectionMap, GetValue(config, 'mapAdd', {}))),\r\n\r\n            //  Physics\r\n\r\n            physics: GetValue(config, 'physics', {}),\r\n\r\n            //  Loader\r\n\r\n            loader: GetValue(config, 'loader', {}),\r\n\r\n            //  Plugins\r\n\r\n            plugins: GetValue(config, 'plugins', false),\r\n\r\n            //  Input\r\n\r\n            input: GetValue(config, 'input', {})\r\n\r\n        };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Settings;\r\n"]},"metadata":{},"sourceType":"script"}