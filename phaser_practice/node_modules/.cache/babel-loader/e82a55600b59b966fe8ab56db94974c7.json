{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport Phaser from 'phaser';\nvar config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: {\n    default: 'arcade',\n    arcade: {\n      gravity: {\n        y: 300\n      },\n      debug: false\n    }\n  },\n  scene: {\n    preload: preload,\n    create: create,\n    update: update\n  }\n};\nvar player;\nvar stars;\nvar bombs;\nvar platforms;\nvar cursors;\nvar score = 0;\nvar gameOver = false;\nvar scoreText;\nvar game = new Phaser.Game(config);\n\nfunction preload() {\n  this.load.image('sky', 'assets/sky.png');\n  this.load.image('ground', 'assets/platform.png');\n  this.load.image('star', 'assets/star.png');\n  this.load.image('bomb', 'assets/bomb.png');\n  this.load.spritesheet('dude', 'assets/dude.png', {\n    frameWidth: 32,\n    frameHeight: 48\n  });\n}\n\nfunction create() {\n  //  A simple background for our game\n  this.add.image(400, 300, 'sky'); //  The platforms group contains the ground and the 2 ledges we can jump on\n\n  platforms = this.physics.add.staticGroup(); //  Here we create the ground.\n  //  Scale it to fit the width of the game (the original sprite is 400x32 in size)\n\n  platforms.create(400, 568, 'ground').setScale(2).refreshBody(); //  Now let's create some ledges\n\n  platforms.create(600, 400, 'ground');\n  platforms.create(50, 250, 'ground');\n  platforms.create(750, 220, 'ground'); // The player and its settings\n\n  player = this.physics.add.sprite(100, 450, 'dude'); //  Player physics properties. Give the little guy a slight bounce.\n\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true); //  Our player animations, turning, walking left and walking right.\n\n  this.anims.create({\n    key: 'left',\n    frames: this.anims.generateFrameNumbers('dude', {\n      start: 0,\n      end: 3\n    }),\n    frameRate: 10,\n    repeat: -1\n  });\n  this.anims.create({\n    key: 'turn',\n    frames: [{\n      key: 'dude',\n      frame: 4\n    }],\n    frameRate: 20\n  });\n  this.anims.create({\n    key: 'right',\n    frames: this.anims.generateFrameNumbers('dude', {\n      start: 5,\n      end: 8\n    }),\n    frameRate: 10,\n    repeat: -1\n  }); //  Input Events\n\n  cursors = this.input.keyboard.createCursorKeys(); //  Some stars to collect, 12 in total, evenly spaced 70 pixels apart along the x axis\n\n  stars = this.physics.add.group({\n    key: 'star',\n    repeat: 11,\n    setXY: {\n      x: 12,\n      y: 0,\n      stepX: 70\n    }\n  });\n  stars.children.iterate(function (child) {\n    //  Give each star a slightly different bounce\n    child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\n  });\n  bombs = this.physics.add.group(); //  The score\n\n  scoreText = this.add.text(16, 16, 'score: 0', {\n    fontSize: '32px',\n    fill: '#000'\n  }); //  Collide the player and the stars with the platforms\n\n  this.physics.add.collider(player, platforms);\n  this.physics.add.collider(stars, platforms);\n  this.physics.add.collider(bombs, platforms); //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\n\n  this.physics.add.overlap(player, stars, collectStar, null, this);\n  this.physics.add.collider(player, bombs, hitBomb, null, this);\n}\n\nfunction update() {\n  if (gameOver) {\n    return;\n  }\n\n  if (cursors.left.isDown) {\n    player.setVelocityX(-160);\n    player.anims.play('left', true);\n  } else if (cursors.right.isDown) {\n    player.setVelocityX(160);\n    player.anims.play('right', true);\n  } else {\n    player.setVelocityX(0);\n    player.anims.play('turn');\n  }\n\n  if (cursors.up.isDown && player.body.touching.down) {\n    player.setVelocityY(-330);\n  }\n}\n\nfunction collectStar(player, star) {\n  star.disableBody(true, true); //  Add and update the score\n\n  score += 10;\n  scoreText.setText('Score: ' + score);\n\n  if (stars.countActive(true) === 0) {\n    //  A new batch of stars to collect\n    stars.children.iterate(function (child) {\n      child.enableBody(true, child.x, 0, true, true);\n    });\n    var x = player.x < 400 ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);\n    var bomb = bombs.create(x, 16, 'bomb');\n    bomb.setBounce(1);\n    bomb.setCollideWorldBounds(true);\n    bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);\n    bomb.allowGravity = false;\n  }\n}\n\nfunction hitBomb(player, bomb) {\n  this.physics.pause();\n  player.setTint(0xff0000);\n  player.anims.play('turn');\n  gameOver = true;\n}\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/src/App.js"],"names":["React","Phaser","config","type","AUTO","width","height","physics","default","arcade","gravity","y","debug","scene","preload","create","update","player","stars","bombs","platforms","cursors","score","gameOver","scoreText","game","Game","load","image","spritesheet","frameWidth","frameHeight","add","staticGroup","setScale","refreshBody","sprite","setBounce","setCollideWorldBounds","anims","key","frames","generateFrameNumbers","start","end","frameRate","repeat","frame","input","keyboard","createCursorKeys","group","setXY","x","stepX","children","iterate","child","setBounceY","Math","FloatBetween","text","fontSize","fill","collider","overlap","collectStar","hitBomb","left","isDown","setVelocityX","play","right","up","body","touching","down","setVelocityY","star","disableBody","setText","countActive","enableBody","Between","bomb","setVelocity","allowGravity","pause","setTint","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Phaser from 'phaser'\n\nvar config = {\n  type: Phaser.AUTO,\n  width: 800,\n  height: 600,\n  physics: {\n      default: 'arcade',\n      arcade: {\n          gravity: { y: 300 },\n          debug: false\n      }\n  },\n  scene: {\n      preload: preload,\n      create: create,\n      update: update\n  }\n};\n\nvar player;\nvar stars;\nvar bombs;\nvar platforms;\nvar cursors;\nvar score = 0;\nvar gameOver = false;\nvar scoreText;\n\nvar game = new Phaser.Game(config);\n\nfunction preload ()\n{\n  this.load.image('sky', 'assets/sky.png');\n  this.load.image('ground', 'assets/platform.png');\n  this.load.image('star', 'assets/star.png');\n  this.load.image('bomb', 'assets/bomb.png');\n  this.load.spritesheet('dude', 'assets/dude.png', { frameWidth: 32, frameHeight: 48 });\n}\n\nfunction create ()\n{\n  //  A simple background for our game\n  this.add.image(400, 300, 'sky');\n\n  //  The platforms group contains the ground and the 2 ledges we can jump on\n  platforms = this.physics.add.staticGroup();\n\n  //  Here we create the ground.\n  //  Scale it to fit the width of the game (the original sprite is 400x32 in size)\n  platforms.create(400, 568, 'ground').setScale(2).refreshBody();\n\n  //  Now let's create some ledges\n  platforms.create(600, 400, 'ground');\n  platforms.create(50, 250, 'ground');\n  platforms.create(750, 220, 'ground');\n\n  // The player and its settings\n  player = this.physics.add.sprite(100, 450, 'dude');\n\n  //  Player physics properties. Give the little guy a slight bounce.\n  player.setBounce(0.2);\n  player.setCollideWorldBounds(true);\n\n  //  Our player animations, turning, walking left and walking right.\n  this.anims.create({\n      key: 'left',\n      frames: this.anims.generateFrameNumbers('dude', { start: 0, end: 3 }),\n      frameRate: 10,\n      repeat: -1\n  });\n\n  this.anims.create({\n      key: 'turn',\n      frames: [ { key: 'dude', frame: 4 } ],\n      frameRate: 20\n  });\n\n  this.anims.create({\n      key: 'right',\n      frames: this.anims.generateFrameNumbers('dude', { start: 5, end: 8 }),\n      frameRate: 10,\n      repeat: -1\n  });\n\n  //  Input Events\n  cursors = this.input.keyboard.createCursorKeys();\n\n  //  Some stars to collect, 12 in total, evenly spaced 70 pixels apart along the x axis\n  stars = this.physics.add.group({\n      key: 'star',\n      repeat: 11,\n      setXY: { x: 12, y: 0, stepX: 70 }\n  });\n\n  stars.children.iterate(function (child) {\n\n      //  Give each star a slightly different bounce\n      child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));\n\n  });\n\n  bombs = this.physics.add.group();\n\n  //  The score\n  scoreText = this.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });\n\n  //  Collide the player and the stars with the platforms\n  this.physics.add.collider(player, platforms);\n  this.physics.add.collider(stars, platforms);\n  this.physics.add.collider(bombs, platforms);\n\n  //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function\n  this.physics.add.overlap(player, stars, collectStar, null, this);\n\n  this.physics.add.collider(player, bombs, hitBomb, null, this);\n}\n\nfunction update ()\n{\n  if (gameOver)\n  {\n      return;\n  }\n\n  if (cursors.left.isDown)\n  {\n      player.setVelocityX(-160);\n\n      player.anims.play('left', true);\n  }\n  else if (cursors.right.isDown)\n  {\n      player.setVelocityX(160);\n\n      player.anims.play('right', true);\n  }\n  else\n  {\n      player.setVelocityX(0);\n\n      player.anims.play('turn');\n  }\n\n  if (cursors.up.isDown && player.body.touching.down)\n  {\n      player.setVelocityY(-330);\n  }\n}\n\nfunction collectStar (player, star)\n{\n  star.disableBody(true, true);\n\n  //  Add and update the score\n  score += 10;\n  scoreText.setText('Score: ' + score);\n\n  if (stars.countActive(true) === 0)\n  {\n      //  A new batch of stars to collect\n      stars.children.iterate(function (child) {\n\n          child.enableBody(true, child.x, 0, true, true);\n\n      });\n\n      var x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);\n\n      var bomb = bombs.create(x, 16, 'bomb');\n      bomb.setBounce(1);\n      bomb.setCollideWorldBounds(true);\n      bomb.setVelocity(Phaser.Math.Between(-200, 200), 20);\n      bomb.allowGravity = false;\n\n  }\n}\n\nfunction hitBomb (player, bomb)\n{\n  this.physics.pause();\n\n  player.setTint(0xff0000);\n\n  player.anims.play('turn');\n\n  gameOver = true;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}