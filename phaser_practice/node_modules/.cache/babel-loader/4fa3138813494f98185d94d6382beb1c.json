{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Camera = require('./Camera');\n\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n\nvar ScaleEvents = require('../../scale/events');\n\nvar SceneEvents = require('../../scene/events');\n/**\r\n * @classdesc\r\n * The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\r\n * \r\n * By default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\r\n * in your game config.\r\n * \r\n * Create new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\r\n * the new Camera in using the `addExisting` method.\r\n * \r\n * Cameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \r\n * 'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\r\n * zero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\r\n * Game Objects, make sure it's one of the first 31 created.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.\r\n *\r\n * @class CameraManager\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that owns the Camera Manager plugin.\r\n */\n\n\nvar CameraManager = new Class({\n  initialize: function CameraManager(scene) {\n    /**\r\n     * The Scene that owns the Camera Manager plugin.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\r\n     * property set to match this value. By default it is set to match the value set in the\r\n     * game configuration, but can be changed at any point. Equally, individual cameras can\r\n     * also be changed as needed.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#roundPixels\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\n\n    this.roundPixels = scene.sys.game.config.roundPixels;\n    /**\r\n     * An Array of the Camera objects being managed by this Camera Manager.\r\n     * The Cameras are updated and rendered in the same order in which they appear in this array.\r\n     * Do not directly add or remove entries to this array. However, you can move the contents\r\n     * around the array should you wish to adjust the display order.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#cameras\r\n     * @type {Phaser.Cameras.Scene2D.Camera[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.cameras = [];\n    /**\r\n     * A handy reference to the 'main' camera. By default this is the first Camera the\r\n     * Camera Manager creates. You can also set it directly, or use the `makeMain` argument\r\n     * in the `add` and `addExisting` methods. It allows you to access it from your game:\r\n     * \r\n     * ```javascript\r\n     * var cam = this.cameras.main;\r\n     * ```\r\n     * \r\n     * Also see the properties `camera1`, `camera2` and so on.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#main\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @since 3.0.0\r\n     */\n\n    this.main;\n    /**\r\n     * A default un-transformed Camera that doesn't exist on the camera list and doesn't\r\n     * count towards the total number of cameras being managed. It exists for other\r\n     * systems, as well as your own code, should they require a basic un-transformed\r\n     * camera instance from which to calculate a view matrix.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.CameraManager#default\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @since 3.17.0\r\n     */\n\n    this.default;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#boot\r\n   * @private\r\n   * @listens Phaser.Scenes.Events#DESTROY\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    var sys = this.systems;\n\n    if (sys.settings.cameras) {\n      //  We have cameras to create\n      this.fromJSON(sys.settings.cameras);\n    } else {\n      //  Make one\n      this.add();\n    }\n\n    this.main = this.cameras[0]; //  Create a default camera\n\n    this.default = new Camera(0, 0, sys.scale.width, sys.scale.height).setScene(this.scene);\n    sys.game.scale.on(ScaleEvents.RESIZE, this.onResize, this);\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#start\r\n   * @private\r\n   * @listens Phaser.Scenes.Events#UPDATE\r\n   * @listens Phaser.Scenes.Events#SHUTDOWN\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    if (!this.main) {\n      var sys = this.systems;\n\n      if (sys.settings.cameras) {\n        //  We have cameras to create\n        this.fromJSON(sys.settings.cameras);\n      } else {\n        //  Make one\n        this.add();\n      }\n\n      this.main = this.cameras[0];\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Adds a new Camera into the Camera Manager. The Camera Manager can support up to 31 different Cameras.\r\n   * \r\n   * Each Camera has its own viewport, which controls the size of the Camera and its position within the canvas.\r\n   * \r\n   * Use the `Camera.scrollX` and `Camera.scrollY` properties to change where the Camera is looking, or the\r\n   * Camera methods such as `centerOn`. Cameras also have built in special effects, such as fade, flash, shake,\r\n   * pan and zoom.\r\n   * \r\n   * By default Cameras are transparent and will render anything that they can see based on their `scrollX`\r\n   * and `scrollY` values. Game Objects can be set to be ignored by a Camera by using the `Camera.ignore` method.\r\n   * \r\n   * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n   * it after creation if required.\r\n   * \r\n   * See the Camera class documentation for more details.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [x=0] - The horizontal position of the Camera viewport.\r\n   * @param {integer} [y=0] - The vertical position of the Camera viewport.\r\n   * @param {integer} [width] - The width of the Camera viewport. If not given it'll be the game config size.\r\n   * @param {integer} [height] - The height of the Camera viewport. If not given it'll be the game config size.\r\n   * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n   * @param {string} [name=''] - The name of the Camera.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The newly created Camera.\r\n   */\n  add: function (x, y, width, height, makeMain, name) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = this.scene.sys.scale.width;\n    }\n\n    if (height === undefined) {\n      height = this.scene.sys.scale.height;\n    }\n\n    if (makeMain === undefined) {\n      makeMain = false;\n    }\n\n    if (name === undefined) {\n      name = '';\n    }\n\n    var camera = new Camera(x, y, width, height);\n    camera.setName(name);\n    camera.setScene(this.scene);\n    camera.setRoundPixels(this.roundPixels);\n    camera.id = this.getNextID();\n    this.cameras.push(camera);\n\n    if (makeMain) {\n      this.main = camera;\n    }\n\n    return camera;\n  },\n\n  /**\r\n   * Adds an existing Camera into the Camera Manager.\r\n   * \r\n   * The Camera should either be a `Phaser.Cameras.Scene2D.Camera` instance, or a class that extends from it.\r\n   * \r\n   * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n   * it after addition if required.\r\n   * \r\n   * The Camera will be assigned an ID, which is used for Game Object exclusion and then added to the\r\n   * manager. As long as it doesn't already exist in the manager it will be added then returned.\r\n   * \r\n   * If this method returns `null` then the Camera already exists in this Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#addExisting\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to be added to the Camera Manager.\r\n   * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n   *\r\n   * @return {?Phaser.Cameras.Scene2D.Camera} The Camera that was added to the Camera Manager, or `null` if it couldn't be added.\r\n   */\n  addExisting: function (camera, makeMain) {\n    if (makeMain === undefined) {\n      makeMain = false;\n    }\n\n    var index = this.cameras.indexOf(camera);\n\n    if (index === -1) {\n      camera.id = this.getNextID();\n      camera.setRoundPixels(this.roundPixels);\n      this.cameras.push(camera);\n\n      if (makeMain) {\n        this.main = camera;\n      }\n\n      return camera;\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Gets the next available Camera ID number.\r\n   * \r\n   * The Camera Manager supports up to 31 unique cameras, after which the ID returned will always be zero.\r\n   * You can create additional cameras beyond 31, but they cannot be used for Game Object exclusion.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getNextID\r\n   * @private\r\n   * @since 3.11.0\r\n   *\r\n   * @return {number} The next available Camera ID, or 0 if they're all already in use.\r\n   */\n  getNextID: function () {\n    var cameras = this.cameras;\n    var testID = 1; //  Find the first free camera ID we can use\n\n    for (var t = 0; t < 32; t++) {\n      var found = false;\n\n      for (var i = 0; i < cameras.length; i++) {\n        var camera = cameras[i];\n\n        if (camera && camera.id === testID) {\n          found = true;\n          continue;\n        }\n      }\n\n      if (found) {\n        testID = testID << 1;\n      } else {\n        return testID;\n      }\n    }\n\n    return 0;\n  },\n\n  /**\r\n   * Gets the total number of Cameras in this Camera Manager.\r\n   * \r\n   * If the optional `isVisible` argument is set it will only count Cameras that are currently visible.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getTotal\r\n   * @since 3.11.0\r\n   * \r\n   * @param {boolean} [isVisible=false] - Set the `true` to only include visible Cameras in the total.\r\n   *\r\n   * @return {integer} The total number of Cameras in this Camera Manager.\r\n   */\n  getTotal: function (isVisible) {\n    if (isVisible === undefined) {\n      isVisible = false;\n    }\n\n    var total = 0;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (!isVisible || isVisible && camera.visible) {\n        total++;\n      }\n    }\n\n    return total;\n  },\n\n  /**\r\n   * Populates this Camera Manager based on the given configuration object, or an array of config objects.\r\n   * \r\n   * See the `Phaser.Types.Cameras.Scene2D.CameraConfig` documentation for details of the object structure.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.Cameras.Scene2D.CameraConfig|Phaser.Types.Cameras.Scene2D.CameraConfig[])} config - A Camera configuration object, or an array of them, to be added to this Camera Manager.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.CameraManager} This Camera Manager instance.\r\n   */\n  fromJSON: function (config) {\n    if (!Array.isArray(config)) {\n      config = [config];\n    }\n\n    var gameWidth = this.scene.sys.scale.width;\n    var gameHeight = this.scene.sys.scale.height;\n\n    for (var i = 0; i < config.length; i++) {\n      var cameraConfig = config[i];\n      var x = GetFastValue(cameraConfig, 'x', 0);\n      var y = GetFastValue(cameraConfig, 'y', 0);\n      var width = GetFastValue(cameraConfig, 'width', gameWidth);\n      var height = GetFastValue(cameraConfig, 'height', gameHeight);\n      var camera = this.add(x, y, width, height); //  Direct properties\n\n      camera.name = GetFastValue(cameraConfig, 'name', '');\n      camera.zoom = GetFastValue(cameraConfig, 'zoom', 1);\n      camera.rotation = GetFastValue(cameraConfig, 'rotation', 0);\n      camera.scrollX = GetFastValue(cameraConfig, 'scrollX', 0);\n      camera.scrollY = GetFastValue(cameraConfig, 'scrollY', 0);\n      camera.roundPixels = GetFastValue(cameraConfig, 'roundPixels', false);\n      camera.visible = GetFastValue(cameraConfig, 'visible', true); // Background Color\n\n      var backgroundColor = GetFastValue(cameraConfig, 'backgroundColor', false);\n\n      if (backgroundColor) {\n        camera.setBackgroundColor(backgroundColor);\n      } //  Bounds\n\n\n      var boundsConfig = GetFastValue(cameraConfig, 'bounds', null);\n\n      if (boundsConfig) {\n        var bx = GetFastValue(boundsConfig, 'x', 0);\n        var by = GetFastValue(boundsConfig, 'y', 0);\n        var bwidth = GetFastValue(boundsConfig, 'width', gameWidth);\n        var bheight = GetFastValue(boundsConfig, 'height', gameHeight);\n        camera.setBounds(bx, by, bwidth, bheight);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Gets a Camera based on its name.\r\n   * \r\n   * Camera names are optional and don't have to be set, so this method is only of any use if you\r\n   * have given your Cameras unique names.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The name of the Camera.\r\n   *\r\n   * @return {?Phaser.Cameras.Scene2D.Camera} The first Camera with a name matching the given string, otherwise `null`.\r\n   */\n  getCamera: function (name) {\n    var cameras = this.cameras;\n\n    for (var i = 0; i < cameras.length; i++) {\n      if (cameras[i].name === name) {\n        return cameras[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * Returns an array of all cameras below the given Pointer.\r\n   * \r\n   * The first camera in the array is the top-most camera in the camera list.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#getCamerasBelowPointer\r\n   * @since 3.10.0\r\n   *\r\n   * @param {Phaser.Input.Pointer} pointer - The Pointer to check against.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera[]} An array of cameras below the Pointer.\r\n   */\n  getCamerasBelowPointer: function (pointer) {\n    var cameras = this.cameras;\n    var x = pointer.x;\n    var y = pointer.y;\n    var output = [];\n\n    for (var i = 0; i < cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (camera.visible && camera.inputEnabled && RectangleContains(camera, x, y)) {\n        //  So the top-most camera is at the top of the search array\n        output.unshift(camera);\n      }\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Removes the given Camera, or an array of Cameras, from this Camera Manager.\r\n   * \r\n   * If found in the Camera Manager it will be immediately removed from the local cameras array.\r\n   * If also currently the 'main' camera, 'main' will be reset to be camera 0.\r\n   * \r\n   * The removed Cameras are automatically destroyed if the `runDestroy` argument is `true`, which is the default.\r\n   * If you wish to re-use the cameras then set this to `false`, but know that they will retain their references\r\n   * and internal data until destroyed or re-added to a Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Cameras.Scene2D.Camera|Phaser.Cameras.Scene2D.Camera[])} camera - The Camera, or an array of Cameras, to be removed from this Camera Manager.\r\n   * @param {boolean} [runDestroy=true] - Automatically call `Camera.destroy` on each Camera removed from this Camera Manager.\r\n   * \r\n   * @return {integer} The total number of Cameras removed.\r\n   */\n  remove: function (camera, runDestroy) {\n    if (runDestroy === undefined) {\n      runDestroy = true;\n    }\n\n    if (!Array.isArray(camera)) {\n      camera = [camera];\n    }\n\n    var total = 0;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < camera.length; i++) {\n      var index = cameras.indexOf(camera[i]);\n\n      if (index !== -1) {\n        if (runDestroy) {\n          cameras[index].destroy();\n        }\n\n        cameras.splice(index, 1);\n        total++;\n      }\n    }\n\n    if (!this.main && cameras[0]) {\n      this.main = cameras[0];\n    }\n\n    return total;\n  },\n\n  /**\r\n   * The internal render method. This is called automatically by the Scene and should not be invoked directly.\r\n   * \r\n   * It will iterate through all local cameras and render them in turn, as long as they're visible and have\r\n   * an alpha level > 0.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#render\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - The Renderer that will render the children to this camera.\r\n   * @param {Phaser.GameObjects.GameObject[]} children - An array of renderable Game Objects.\r\n   * @param {number} interpolation - Interpolation value. Reserved for future use.\r\n   */\n  render: function (renderer, children, interpolation) {\n    var scene = this.scene;\n    var cameras = this.cameras;\n\n    for (var i = 0; i < this.cameras.length; i++) {\n      var camera = cameras[i];\n\n      if (camera.visible && camera.alpha > 0) {\n        //  Hard-coded to 1 for now\n        camera.preRender(1);\n        renderer.render(scene, children, interpolation, camera);\n      }\n    }\n  },\n\n  /**\r\n   * Resets this Camera Manager.\r\n   * \r\n   * This will iterate through all current Cameras, destroying them all, then it will reset the\r\n   * cameras array, reset the ID counter and create 1 new single camera using the default values.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#resetAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The freshly created main Camera.\r\n   */\n  resetAll: function () {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].destroy();\n    }\n\n    this.cameras = [];\n    this.main = this.add();\n    return this.main;\n  },\n\n  /**\r\n   * The main update loop. Called automatically when the Scene steps.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#update\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].update(time, delta);\n    }\n  },\n\n  /**\r\n   * The event handler that manages the `resize` event dispatched by the Scale Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#onResize\r\n   * @since 3.18.0\r\n   *\r\n   * @param {Phaser.Structs.Size} gameSize - The default Game Size object. This is the un-modified game dimensions.\r\n   * @param {Phaser.Structs.Size} baseSize - The base Size object. The game dimensions multiplied by the resolution. The canvas width / height values match this.\r\n   */\n  onResize: function (gameSize, baseSize, displaySize, resolution, previousWidth, previousHeight) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      var cam = this.cameras[i]; //  if camera is at 0x0 and was the size of the previous game size, then we can safely assume it\n      //  should be updated to match the new game size too\n\n      if (cam._x === 0 && cam._y === 0 && cam._width === previousWidth && cam._height === previousHeight) {\n        cam.setSize(baseSize.width, baseSize.height);\n      }\n    }\n  },\n\n  /**\r\n   * Resizes all cameras to the given dimensions.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#resize\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} width - The new width of the camera.\r\n   * @param {number} height - The new height of the camera.\r\n   */\n  resize: function (width, height) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].setSize(width, height);\n    }\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    this.main = undefined;\n\n    for (var i = 0; i < this.cameras.length; i++) {\n      this.cameras[i].destroy();\n    }\n\n    this.cameras = [];\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.UPDATE, this.update, this);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.CameraManager#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.default.destroy();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('CameraManager', CameraManager, 'cameras');\nmodule.exports = CameraManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/CameraManager.js"],"names":["Camera","require","Class","GetFastValue","PluginCache","RectangleContains","ScaleEvents","SceneEvents","CameraManager","initialize","scene","systems","sys","roundPixels","game","config","cameras","main","default","events","once","BOOT","boot","on","START","start","settings","fromJSON","add","scale","width","height","setScene","RESIZE","onResize","DESTROY","destroy","eventEmitter","UPDATE","update","SHUTDOWN","shutdown","x","y","makeMain","name","undefined","camera","setName","setRoundPixels","id","getNextID","push","addExisting","index","indexOf","testID","t","found","i","length","getTotal","isVisible","total","visible","Array","isArray","gameWidth","gameHeight","cameraConfig","zoom","rotation","scrollX","scrollY","backgroundColor","setBackgroundColor","boundsConfig","bx","by","bwidth","bheight","setBounds","getCamera","getCamerasBelowPointer","pointer","output","inputEnabled","unshift","remove","runDestroy","splice","render","renderer","children","interpolation","alpha","preRender","resetAll","time","delta","gameSize","baseSize","displaySize","resolution","previousWidth","previousHeight","cam","_x","_y","_width","_height","setSize","resize","off","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Camera = require('./Camera');\r\nvar Class = require('../../utils/Class');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar RectangleContains = require('../../geom/rectangle/Contains');\r\nvar ScaleEvents = require('../../scale/events');\r\nvar SceneEvents = require('../../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * The Camera Manager is a plugin that belongs to a Scene and is responsible for managing all of the Scene Cameras.\r\n * \r\n * By default you can access the Camera Manager from within a Scene using `this.cameras`, although this can be changed\r\n * in your game config.\r\n * \r\n * Create new Cameras using the `add` method. Or extend the Camera class with your own addition code and then add\r\n * the new Camera in using the `addExisting` method.\r\n * \r\n * Cameras provide a view into your game world, and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis. The Camera Manager can manage up to 31 unique \r\n * 'Game Object ignore capable' Cameras. Any Cameras beyond 31 that you create will all be given a Camera ID of\r\n * zero, meaning that they cannot be used for Game Object exclusion. This means if you need your Camera to ignore\r\n * Game Objects, make sure it's one of the first 31 created.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash, Camera Shake, Pan and Zoom.\r\n *\r\n * @class CameraManager\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene that owns the Camera Manager plugin.\r\n */\r\nvar CameraManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CameraManager (scene)\r\n    {\r\n        /**\r\n         * The Scene that owns the Camera Manager plugin.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems handler for the Scene that owns the Camera Manager.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * All Cameras created by, or added to, this Camera Manager, will have their `roundPixels`\r\n         * property set to match this value. By default it is set to match the value set in the\r\n         * game configuration, but can be changed at any point. Equally, individual cameras can\r\n         * also be changed as needed.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#roundPixels\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.roundPixels = scene.sys.game.config.roundPixels;\r\n\r\n        /**\r\n         * An Array of the Camera objects being managed by this Camera Manager.\r\n         * The Cameras are updated and rendered in the same order in which they appear in this array.\r\n         * Do not directly add or remove entries to this array. However, you can move the contents\r\n         * around the array should you wish to adjust the display order.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#cameras\r\n         * @type {Phaser.Cameras.Scene2D.Camera[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras = [];\r\n\r\n        /**\r\n         * A handy reference to the 'main' camera. By default this is the first Camera the\r\n         * Camera Manager creates. You can also set it directly, or use the `makeMain` argument\r\n         * in the `add` and `addExisting` methods. It allows you to access it from your game:\r\n         * \r\n         * ```javascript\r\n         * var cam = this.cameras.main;\r\n         * ```\r\n         * \r\n         * Also see the properties `camera1`, `camera2` and so on.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#main\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @since 3.0.0\r\n         */\r\n        this.main;\r\n\r\n        /**\r\n         * A default un-transformed Camera that doesn't exist on the camera list and doesn't\r\n         * count towards the total number of cameras being managed. It exists for other\r\n         * systems, as well as your own code, should they require a basic un-transformed\r\n         * camera instance from which to calculate a view matrix.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.CameraManager#default\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @since 3.17.0\r\n         */\r\n        this.default;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#boot\r\n     * @private\r\n     * @listens Phaser.Scenes.Events#DESTROY\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        var sys = this.systems;\r\n\r\n        if (sys.settings.cameras)\r\n        {\r\n            //  We have cameras to create\r\n            this.fromJSON(sys.settings.cameras);\r\n        }\r\n        else\r\n        {\r\n            //  Make one\r\n            this.add();\r\n        }\r\n\r\n        this.main = this.cameras[0];\r\n\r\n        //  Create a default camera\r\n        this.default = new Camera(0, 0, sys.scale.width, sys.scale.height).setScene(this.scene);\r\n\r\n        sys.game.scale.on(ScaleEvents.RESIZE, this.onResize, this);\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#start\r\n     * @private\r\n     * @listens Phaser.Scenes.Events#UPDATE\r\n     * @listens Phaser.Scenes.Events#SHUTDOWN\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.main)\r\n        {\r\n            var sys = this.systems;\r\n\r\n            if (sys.settings.cameras)\r\n            {\r\n                //  We have cameras to create\r\n                this.fromJSON(sys.settings.cameras);\r\n            }\r\n            else\r\n            {\r\n                //  Make one\r\n                this.add();\r\n            }\r\n    \r\n            this.main = this.cameras[0];\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Adds a new Camera into the Camera Manager. The Camera Manager can support up to 31 different Cameras.\r\n     * \r\n     * Each Camera has its own viewport, which controls the size of the Camera and its position within the canvas.\r\n     * \r\n     * Use the `Camera.scrollX` and `Camera.scrollY` properties to change where the Camera is looking, or the\r\n     * Camera methods such as `centerOn`. Cameras also have built in special effects, such as fade, flash, shake,\r\n     * pan and zoom.\r\n     * \r\n     * By default Cameras are transparent and will render anything that they can see based on their `scrollX`\r\n     * and `scrollY` values. Game Objects can be set to be ignored by a Camera by using the `Camera.ignore` method.\r\n     * \r\n     * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n     * it after creation if required.\r\n     * \r\n     * See the Camera class documentation for more details.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [x=0] - The horizontal position of the Camera viewport.\r\n     * @param {integer} [y=0] - The vertical position of the Camera viewport.\r\n     * @param {integer} [width] - The width of the Camera viewport. If not given it'll be the game config size.\r\n     * @param {integer} [height] - The height of the Camera viewport. If not given it'll be the game config size.\r\n     * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n     * @param {string} [name=''] - The name of the Camera.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The newly created Camera.\r\n     */\r\n    add: function (x, y, width, height, makeMain, name)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = this.scene.sys.scale.width; }\r\n        if (height === undefined) { height = this.scene.sys.scale.height; }\r\n        if (makeMain === undefined) { makeMain = false; }\r\n        if (name === undefined) { name = ''; }\r\n\r\n        var camera = new Camera(x, y, width, height);\r\n\r\n        camera.setName(name);\r\n        camera.setScene(this.scene);\r\n        camera.setRoundPixels(this.roundPixels);\r\n\r\n        camera.id = this.getNextID();\r\n\r\n        this.cameras.push(camera);\r\n\r\n        if (makeMain)\r\n        {\r\n            this.main = camera;\r\n        }\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Camera into the Camera Manager.\r\n     * \r\n     * The Camera should either be a `Phaser.Cameras.Scene2D.Camera` instance, or a class that extends from it.\r\n     * \r\n     * The Camera will have its `roundPixels` property set to whatever `CameraManager.roundPixels` is. You can change\r\n     * it after addition if required.\r\n     * \r\n     * The Camera will be assigned an ID, which is used for Game Object exclusion and then added to the\r\n     * manager. As long as it doesn't already exist in the manager it will be added then returned.\r\n     * \r\n     * If this method returns `null` then the Camera already exists in this Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#addExisting\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to be added to the Camera Manager.\r\n     * @param {boolean} [makeMain=false] - Set this Camera as being the 'main' camera. This just makes the property `main` a reference to it.\r\n     *\r\n     * @return {?Phaser.Cameras.Scene2D.Camera} The Camera that was added to the Camera Manager, or `null` if it couldn't be added.\r\n     */\r\n    addExisting: function (camera, makeMain)\r\n    {\r\n        if (makeMain === undefined) { makeMain = false; }\r\n\r\n        var index = this.cameras.indexOf(camera);\r\n\r\n        if (index === -1)\r\n        {\r\n            camera.id = this.getNextID();\r\n\r\n            camera.setRoundPixels(this.roundPixels);\r\n\r\n            this.cameras.push(camera);\r\n\r\n            if (makeMain)\r\n            {\r\n                this.main = camera;\r\n            }\r\n    \r\n            return camera;\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the next available Camera ID number.\r\n     * \r\n     * The Camera Manager supports up to 31 unique cameras, after which the ID returned will always be zero.\r\n     * You can create additional cameras beyond 31, but they cannot be used for Game Object exclusion.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getNextID\r\n     * @private\r\n     * @since 3.11.0\r\n     *\r\n     * @return {number} The next available Camera ID, or 0 if they're all already in use.\r\n     */\r\n    getNextID: function ()\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        var testID = 1;\r\n\r\n        //  Find the first free camera ID we can use\r\n\r\n        for (var t = 0; t < 32; t++)\r\n        {\r\n            var found = false;\r\n\r\n            for (var i = 0; i < cameras.length; i++)\r\n            {\r\n                var camera = cameras[i];\r\n\r\n                if (camera && camera.id === testID)\r\n                {\r\n                    found = true;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (found)\r\n            {\r\n                testID = testID << 1;\r\n            }\r\n            else\r\n            {\r\n                return testID;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Gets the total number of Cameras in this Camera Manager.\r\n     * \r\n     * If the optional `isVisible` argument is set it will only count Cameras that are currently visible.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getTotal\r\n     * @since 3.11.0\r\n     * \r\n     * @param {boolean} [isVisible=false] - Set the `true` to only include visible Cameras in the total.\r\n     *\r\n     * @return {integer} The total number of Cameras in this Camera Manager.\r\n     */\r\n    getTotal: function (isVisible)\r\n    {\r\n        if (isVisible === undefined) { isVisible = false; }\r\n\r\n        var total = 0;\r\n\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (!isVisible || (isVisible && camera.visible))\r\n            {\r\n                total++;\r\n            }\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * Populates this Camera Manager based on the given configuration object, or an array of config objects.\r\n     * \r\n     * See the `Phaser.Types.Cameras.Scene2D.CameraConfig` documentation for details of the object structure.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.Cameras.Scene2D.CameraConfig|Phaser.Types.Cameras.Scene2D.CameraConfig[])} config - A Camera configuration object, or an array of them, to be added to this Camera Manager.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.CameraManager} This Camera Manager instance.\r\n     */\r\n    fromJSON: function (config)\r\n    {\r\n        if (!Array.isArray(config))\r\n        {\r\n            config = [ config ];\r\n        }\r\n\r\n        var gameWidth = this.scene.sys.scale.width;\r\n        var gameHeight = this.scene.sys.scale.height;\r\n\r\n        for (var i = 0; i < config.length; i++)\r\n        {\r\n            var cameraConfig = config[i];\r\n\r\n            var x = GetFastValue(cameraConfig, 'x', 0);\r\n            var y = GetFastValue(cameraConfig, 'y', 0);\r\n            var width = GetFastValue(cameraConfig, 'width', gameWidth);\r\n            var height = GetFastValue(cameraConfig, 'height', gameHeight);\r\n\r\n            var camera = this.add(x, y, width, height);\r\n\r\n            //  Direct properties\r\n            camera.name = GetFastValue(cameraConfig, 'name', '');\r\n            camera.zoom = GetFastValue(cameraConfig, 'zoom', 1);\r\n            camera.rotation = GetFastValue(cameraConfig, 'rotation', 0);\r\n            camera.scrollX = GetFastValue(cameraConfig, 'scrollX', 0);\r\n            camera.scrollY = GetFastValue(cameraConfig, 'scrollY', 0);\r\n            camera.roundPixels = GetFastValue(cameraConfig, 'roundPixels', false);\r\n            camera.visible = GetFastValue(cameraConfig, 'visible', true);\r\n\r\n            // Background Color\r\n\r\n            var backgroundColor = GetFastValue(cameraConfig, 'backgroundColor', false);\r\n\r\n            if (backgroundColor)\r\n            {\r\n                camera.setBackgroundColor(backgroundColor);\r\n            }\r\n\r\n            //  Bounds\r\n\r\n            var boundsConfig = GetFastValue(cameraConfig, 'bounds', null);\r\n\r\n            if (boundsConfig)\r\n            {\r\n                var bx = GetFastValue(boundsConfig, 'x', 0);\r\n                var by = GetFastValue(boundsConfig, 'y', 0);\r\n                var bwidth = GetFastValue(boundsConfig, 'width', gameWidth);\r\n                var bheight = GetFastValue(boundsConfig, 'height', gameHeight);\r\n\r\n                camera.setBounds(bx, by, bwidth, bheight);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a Camera based on its name.\r\n     * \r\n     * Camera names are optional and don't have to be set, so this method is only of any use if you\r\n     * have given your Cameras unique names.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The name of the Camera.\r\n     *\r\n     * @return {?Phaser.Cameras.Scene2D.Camera} The first Camera with a name matching the given string, otherwise `null`.\r\n     */\r\n    getCamera: function (name)\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            if (cameras[i].name === name)\r\n            {\r\n                return cameras[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all cameras below the given Pointer.\r\n     * \r\n     * The first camera in the array is the top-most camera in the camera list.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#getCamerasBelowPointer\r\n     * @since 3.10.0\r\n     *\r\n     * @param {Phaser.Input.Pointer} pointer - The Pointer to check against.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera[]} An array of cameras below the Pointer.\r\n     */\r\n    getCamerasBelowPointer: function (pointer)\r\n    {\r\n        var cameras = this.cameras;\r\n\r\n        var x = pointer.x;\r\n        var y = pointer.y;\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (camera.visible && camera.inputEnabled && RectangleContains(camera, x, y))\r\n            {\r\n                //  So the top-most camera is at the top of the search array\r\n                output.unshift(camera);\r\n            }\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Removes the given Camera, or an array of Cameras, from this Camera Manager.\r\n     * \r\n     * If found in the Camera Manager it will be immediately removed from the local cameras array.\r\n     * If also currently the 'main' camera, 'main' will be reset to be camera 0.\r\n     * \r\n     * The removed Cameras are automatically destroyed if the `runDestroy` argument is `true`, which is the default.\r\n     * If you wish to re-use the cameras then set this to `false`, but know that they will retain their references\r\n     * and internal data until destroyed or re-added to a Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Cameras.Scene2D.Camera|Phaser.Cameras.Scene2D.Camera[])} camera - The Camera, or an array of Cameras, to be removed from this Camera Manager.\r\n     * @param {boolean} [runDestroy=true] - Automatically call `Camera.destroy` on each Camera removed from this Camera Manager.\r\n     * \r\n     * @return {integer} The total number of Cameras removed.\r\n     */\r\n    remove: function (camera, runDestroy)\r\n    {\r\n        if (runDestroy === undefined) { runDestroy = true; }\r\n\r\n        if (!Array.isArray(camera))\r\n        {\r\n            camera = [ camera ];\r\n        }\r\n\r\n        var total = 0;\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < camera.length; i++)\r\n        {\r\n            var index = cameras.indexOf(camera[i]);\r\n\r\n            if (index !== -1)\r\n            {\r\n                if (runDestroy)\r\n                {\r\n                    cameras[index].destroy();\r\n                }\r\n\r\n                cameras.splice(index, 1);\r\n\r\n                total++;\r\n            }\r\n        }\r\n\r\n        if (!this.main && cameras[0])\r\n        {\r\n            this.main = cameras[0];\r\n        }\r\n\r\n        return total;\r\n    },\r\n\r\n    /**\r\n     * The internal render method. This is called automatically by the Scene and should not be invoked directly.\r\n     * \r\n     * It will iterate through all local cameras and render them in turn, as long as they're visible and have\r\n     * an alpha level > 0.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#render\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Renderer.Canvas.CanvasRenderer|Phaser.Renderer.WebGL.WebGLRenderer)} renderer - The Renderer that will render the children to this camera.\r\n     * @param {Phaser.GameObjects.GameObject[]} children - An array of renderable Game Objects.\r\n     * @param {number} interpolation - Interpolation value. Reserved for future use.\r\n     */\r\n    render: function (renderer, children, interpolation)\r\n    {\r\n        var scene = this.scene;\r\n        var cameras = this.cameras;\r\n\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            var camera = cameras[i];\r\n\r\n            if (camera.visible && camera.alpha > 0)\r\n            {\r\n                //  Hard-coded to 1 for now\r\n                camera.preRender(1);\r\n\r\n                renderer.render(scene, children, interpolation, camera);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resets this Camera Manager.\r\n     * \r\n     * This will iterate through all current Cameras, destroying them all, then it will reset the\r\n     * cameras array, reset the ID counter and create 1 new single camera using the default values.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#resetAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The freshly created main Camera.\r\n     */\r\n    resetAll: function ()\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].destroy();\r\n        }\r\n\r\n        this.cameras = [];\r\n\r\n        this.main = this.add();\r\n\r\n        return this.main;\r\n    },\r\n\r\n    /**\r\n     * The main update loop. Called automatically when the Scene steps.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].update(time, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The event handler that manages the `resize` event dispatched by the Scale Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#onResize\r\n     * @since 3.18.0\r\n     *\r\n     * @param {Phaser.Structs.Size} gameSize - The default Game Size object. This is the un-modified game dimensions.\r\n     * @param {Phaser.Structs.Size} baseSize - The base Size object. The game dimensions multiplied by the resolution. The canvas width / height values match this.\r\n     */\r\n    onResize: function (gameSize, baseSize, displaySize, resolution, previousWidth, previousHeight)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            var cam = this.cameras[i];\r\n\r\n            //  if camera is at 0x0 and was the size of the previous game size, then we can safely assume it\r\n            //  should be updated to match the new game size too\r\n\r\n            if (cam._x === 0 && cam._y === 0 && cam._width === previousWidth && cam._height === previousHeight)\r\n            {\r\n                cam.setSize(baseSize.width, baseSize.height);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resizes all cameras to the given dimensions.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#resize\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} width - The new width of the camera.\r\n     * @param {number} height - The new height of the camera.\r\n     */\r\n    resize: function (width, height)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].setSize(width, height);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.main = undefined;\r\n\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            this.cameras[i].destroy();\r\n        }\r\n\r\n        this.cameras = [];\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.UPDATE, this.update, this);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.CameraManager#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.default.destroy();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('CameraManager', CameraManager, 'cameras');\r\n\r\nmodule.exports = CameraManager;\r\n"]},"metadata":{},"sourceType":"script"}