{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.SwapByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileA - First tile index.\r\n * @param {integer} tileB - Second tile index.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SwapByIndex = function (indexA, indexB, tileX, tileY, width, height, layer) {\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i]) {\n      if (tiles[i].index === indexA) {\n        tiles[i].index = indexB;\n      } else if (tiles[i].index === indexB) {\n        tiles[i].index = indexA;\n      }\n    }\n  }\n};\n\nmodule.exports = SwapByIndex;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SwapByIndex.js"],"names":["GetTilesWithin","require","SwapByIndex","indexA","indexB","tileX","tileY","width","height","layer","tiles","i","length","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,WAAW,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuDC,KAAvD,EAClB;AACI,MAAIC,KAAK,GAAGV,cAAc,CAACK,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B,IAA9B,EAAoCC,KAApC,CAA1B;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI,QAAID,KAAK,CAACC,CAAD,CAAT,EACA;AACI,UAAID,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,KAAmBV,MAAvB,EACA;AACIO,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,GAAiBT,MAAjB;AACH,OAHD,MAIK,IAAIM,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,KAAmBT,MAAvB,EACL;AACIM,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,GAAiBV,MAAjB;AACH;AACJ;AACJ;AACJ,CAjBD;;AAmBAW,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n * information.\r\n *\r\n * @function Phaser.Tilemaps.Components.SwapByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileA - First tile index.\r\n * @param {integer} tileB - Second tile index.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SwapByIndex = function (indexA, indexB, tileX, tileY, width, height, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        if (tiles[i])\r\n        {\r\n            if (tiles[i].index === indexA)\r\n            {\r\n                tiles[i].index = indexB;\r\n            }\r\n            else if (tiles[i].index === indexB)\r\n            {\r\n                tiles[i].index = indexA;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = SwapByIndex;\r\n"]},"metadata":{},"sourceType":"script"}