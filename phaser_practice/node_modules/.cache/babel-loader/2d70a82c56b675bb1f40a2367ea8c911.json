{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Rotate a `point` around `x` and `y` by the given `angle` and `distance`.\r\n *\r\n * @function Phaser.Math.RotateAroundDistance\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} x - The horizontal coordinate to rotate around.\r\n * @param {number} y - The vertical coordinate to rotate around.\r\n * @param {number} angle - The angle of rotation in radians.\r\n * @param {number} distance - The distance from (x, y) to place the point at.\r\n *\r\n * @return {Phaser.Geom.Point} The given point.\r\n */\nvar RotateAroundDistance = function (point, x, y, angle, distance) {\n  var t = angle + Math.atan2(point.y - y, point.x - x);\n  point.x = x + distance * Math.cos(t);\n  point.y = y + distance * Math.sin(t);\n  return point;\n};\n\nmodule.exports = RotateAroundDistance;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/RotateAroundDistance.js"],"names":["RotateAroundDistance","point","x","y","angle","distance","t","Math","atan2","cos","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;AAcA,IAAIA,oBAAoB,GAAG,UAAUC,KAAV,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuBC,KAAvB,EAA8BC,QAA9B,EAC3B;AACI,MAAIC,CAAC,GAAGF,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWP,KAAK,CAACE,CAAN,GAAUA,CAArB,EAAwBF,KAAK,CAACC,CAAN,GAAUA,CAAlC,CAAhB;AAEAD,EAAAA,KAAK,CAACC,CAAN,GAAUA,CAAC,GAAIG,QAAQ,GAAGE,IAAI,CAACE,GAAL,CAASH,CAAT,CAA1B;AACAL,EAAAA,KAAK,CAACE,CAAN,GAAUA,CAAC,GAAIE,QAAQ,GAAGE,IAAI,CAACG,GAAL,CAASJ,CAAT,CAA1B;AAEA,SAAOL,KAAP;AACH,CARD;;AAUAU,MAAM,CAACC,OAAP,GAAiBZ,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Rotate a `point` around `x` and `y` by the given `angle` and `distance`.\r\n *\r\n * @function Phaser.Math.RotateAroundDistance\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Point|object)} point - The point to be rotated.\r\n * @param {number} x - The horizontal coordinate to rotate around.\r\n * @param {number} y - The vertical coordinate to rotate around.\r\n * @param {number} angle - The angle of rotation in radians.\r\n * @param {number} distance - The distance from (x, y) to place the point at.\r\n *\r\n * @return {Phaser.Geom.Point} The given point.\r\n */\r\nvar RotateAroundDistance = function (point, x, y, angle, distance)\r\n{\r\n    var t = angle + Math.atan2(point.y - y, point.x - x);\r\n\r\n    point.x = x + (distance * Math.cos(t));\r\n    point.y = y + (distance * Math.sin(t));\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = RotateAroundDistance;\r\n"]},"metadata":{},"sourceType":"script"}