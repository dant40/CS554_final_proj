{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar FillStyleCanvas = require('../FillStyleCanvas');\n\nvar LineStyleCanvas = require('../LineStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar GridCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    var dx = -src._displayOriginX;\n    var dy = -src._displayOriginY;\n    var alpha = camera.alpha * src.alpha; //  Work out the grid size\n\n    var width = src.width;\n    var height = src.height;\n    var cellWidth = src.cellWidth;\n    var cellHeight = src.cellHeight;\n    var gridWidth = Math.ceil(width / cellWidth);\n    var gridHeight = Math.ceil(height / cellHeight);\n    var cellWidthA = cellWidth;\n    var cellHeightA = cellHeight;\n    var cellWidthB = cellWidth - (gridWidth * cellWidth - width);\n    var cellHeightB = cellHeight - (gridHeight * cellHeight - height);\n    var showCells = src.showCells;\n    var showAltCells = src.showAltCells;\n    var showOutline = src.showOutline;\n    var x = 0;\n    var y = 0;\n    var r = 0;\n    var cw = 0;\n    var ch = 0;\n\n    if (showOutline) {\n      //  To make room for the grid lines (in case alpha < 1)\n      cellWidthA--;\n      cellHeightA--;\n\n      if (cellWidthB === cellWidth) {\n        cellWidthB--;\n      }\n\n      if (cellHeightB === cellHeight) {\n        cellHeightB--;\n      }\n    }\n\n    if (showCells && src.fillAlpha > 0) {\n      FillStyleCanvas(ctx, src);\n\n      for (y = 0; y < gridHeight; y++) {\n        if (showAltCells) {\n          r = y % 2;\n        }\n\n        for (x = 0; x < gridWidth; x++) {\n          if (showAltCells && r) {\n            r = 0;\n            continue;\n          }\n\n          r++;\n          cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n          ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n          ctx.fillRect(dx + x * cellWidth, dy + y * cellHeight, cw, ch);\n        }\n      }\n    }\n\n    if (showAltCells && src.altFillAlpha > 0) {\n      FillStyleCanvas(ctx, src, src.altFillColor, src.altFillAlpha * alpha);\n\n      for (y = 0; y < gridHeight; y++) {\n        if (showAltCells) {\n          r = y % 2;\n        }\n\n        for (x = 0; x < gridWidth; x++) {\n          if (showAltCells && !r) {\n            r = 1;\n            continue;\n          }\n\n          r = 0;\n          cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n          ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n          ctx.fillRect(dx + x * cellWidth, dy + y * cellHeight, cw, ch);\n        }\n      }\n    }\n\n    if (showOutline && src.outlineFillAlpha > 0) {\n      LineStyleCanvas(ctx, src, src.outlineFillColor, src.outlineFillAlpha * alpha);\n\n      for (x = 1; x < gridWidth; x++) {\n        var x1 = x * cellWidth;\n        ctx.beginPath();\n        ctx.moveTo(x1 + dx, dy);\n        ctx.lineTo(x1 + dx, height + dy);\n        ctx.stroke();\n      }\n\n      for (y = 1; y < gridHeight; y++) {\n        var y1 = y * cellHeight;\n        ctx.beginPath();\n        ctx.moveTo(dx, y1 + dy);\n        ctx.lineTo(dx + width, y1 + dy);\n        ctx.stroke();\n      }\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = GridCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/grid/GridCanvasRenderer.js"],"names":["FillStyleCanvas","require","LineStyleCanvas","SetTransform","GridCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","ctx","currentContext","dx","_displayOriginX","dy","_displayOriginY","alpha","width","height","cellWidth","cellHeight","gridWidth","Math","ceil","gridHeight","cellWidthA","cellHeightA","cellWidthB","cellHeightB","showCells","showAltCells","showOutline","x","y","r","cw","ch","fillAlpha","fillRect","altFillAlpha","altFillColor","outlineFillAlpha","outlineFillColor","x1","beginPath","moveTo","lineTo","stroke","y1","restore","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar FillStyleCanvas = require('../FillStyleCanvas');\r\nvar LineStyleCanvas = require('../LineStyleCanvas');\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar GridCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        var dx = -src._displayOriginX;\r\n        var dy = -src._displayOriginY;\r\n\r\n        var alpha = camera.alpha * src.alpha;\r\n\r\n        //  Work out the grid size\r\n\r\n        var width = src.width;\r\n        var height = src.height;\r\n\r\n        var cellWidth = src.cellWidth;\r\n        var cellHeight = src.cellHeight;\r\n\r\n        var gridWidth = Math.ceil(width / cellWidth);\r\n        var gridHeight = Math.ceil(height / cellHeight);\r\n\r\n        var cellWidthA = cellWidth;\r\n        var cellHeightA = cellHeight;\r\n\r\n        var cellWidthB = cellWidth - ((gridWidth * cellWidth) - width);\r\n        var cellHeightB = cellHeight - ((gridHeight * cellHeight) - height);\r\n\r\n        var showCells = src.showCells;\r\n        var showAltCells = src.showAltCells;\r\n        var showOutline = src.showOutline;\r\n\r\n        var x = 0;\r\n        var y = 0;\r\n        var r = 0;\r\n        var cw = 0;\r\n        var ch = 0;\r\n\r\n        if (showOutline)\r\n        {\r\n            //  To make room for the grid lines (in case alpha < 1)\r\n            cellWidthA--;\r\n            cellHeightA--;\r\n\r\n            if (cellWidthB === cellWidth)\r\n            {\r\n                cellWidthB--;\r\n            }\r\n\r\n            if (cellHeightB === cellHeight)\r\n            {\r\n                cellHeightB--;\r\n            }\r\n        }\r\n\r\n        if (showCells && src.fillAlpha > 0)\r\n        {\r\n            FillStyleCanvas(ctx, src);\r\n\r\n            for (y = 0; y < gridHeight; y++)\r\n            {\r\n                if (showAltCells)\r\n                {\r\n                    r = y % 2;\r\n                }\r\n\r\n                for (x = 0; x < gridWidth; x++)\r\n                {\r\n                    if (showAltCells && r)\r\n                    {\r\n                        r = 0;\r\n                        continue;\r\n                    }\r\n\r\n                    r++;\r\n\r\n                    cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                    ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                    ctx.fillRect(\r\n                        dx + x * cellWidth,\r\n                        dy + y * cellHeight,\r\n                        cw,\r\n                        ch\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (showAltCells && src.altFillAlpha > 0)\r\n        {\r\n            FillStyleCanvas(ctx, src, src.altFillColor, src.altFillAlpha * alpha);\r\n\r\n            for (y = 0; y < gridHeight; y++)\r\n            {\r\n                if (showAltCells)\r\n                {\r\n                    r = y % 2;\r\n                }\r\n\r\n                for (x = 0; x < gridWidth; x++)\r\n                {\r\n                    if (showAltCells && !r)\r\n                    {\r\n                        r = 1;\r\n                        continue;\r\n                    }\r\n\r\n                    r = 0;\r\n\r\n                    cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                    ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                    ctx.fillRect(\r\n                        dx + x * cellWidth,\r\n                        dy + y * cellHeight,\r\n                        cw,\r\n                        ch\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (showOutline && src.outlineFillAlpha > 0)\r\n        {\r\n            LineStyleCanvas(ctx, src, src.outlineFillColor, src.outlineFillAlpha * alpha);\r\n\r\n            for (x = 1; x < gridWidth; x++)\r\n            {\r\n                var x1 = x * cellWidth;\r\n\r\n                ctx.beginPath();\r\n\r\n                ctx.moveTo(x1 + dx, dy);\r\n                ctx.lineTo(x1 + dx, height + dy);\r\n\r\n                ctx.stroke();\r\n            }\r\n\r\n            for (y = 1; y < gridHeight; y++)\r\n            {\r\n                var y1 = y * cellHeight;\r\n\r\n                ctx.beginPath();\r\n\r\n                ctx.moveTo(dx, y1 + dy);\r\n                ctx.lineTo(dx + width, y1 + dy);\r\n\r\n                ctx.stroke();\r\n            }\r\n        }\r\n\r\n        //  Restore the context saved in SetTransform\r\n        ctx.restore();\r\n    }\r\n};\r\n\r\nmodule.exports = GridCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}