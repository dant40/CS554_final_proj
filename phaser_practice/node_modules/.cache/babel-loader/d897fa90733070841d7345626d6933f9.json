{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n/**\r\n * Provides methods used for setting the blend mode of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.BlendMode\r\n * @since 3.0.0\r\n */\n\n\nvar BlendMode = {\n  /**\r\n   * Private internal value. Holds the current blend mode.\r\n   * \r\n   * @name Phaser.GameObjects.Components.BlendMode#_blendMode\r\n   * @type {integer}\r\n   * @private\r\n   * @default 0\r\n   * @since 3.0.0\r\n   */\n  _blendMode: BlendModes.NORMAL,\n\n  /**\r\n   * Sets the Blend Mode being used by this Game Object.\r\n   *\r\n   * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n   *\r\n   * Under WebGL only the following Blend Modes are available:\r\n   *\r\n   * * ADD\r\n   * * MULTIPLY\r\n   * * SCREEN\r\n   * * ERASE\r\n   *\r\n   * Canvas has more available depending on browser support.\r\n   *\r\n   * You can also create your own custom Blend Modes in WebGL.\r\n   *\r\n   * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n   * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n   * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\r\n   * are used.\r\n   *\r\n   * @name Phaser.GameObjects.Components.BlendMode#blendMode\r\n   * @type {(Phaser.BlendModes|string)}\r\n   * @since 3.0.0\r\n   */\n  blendMode: {\n    get: function () {\n      return this._blendMode;\n    },\n    set: function (value) {\n      if (typeof value === 'string') {\n        value = BlendModes[value];\n      }\n\n      value |= 0;\n\n      if (value >= -1) {\n        this._blendMode = value;\n      }\n    }\n  },\n\n  /**\r\n   * Sets the Blend Mode being used by this Game Object.\r\n   *\r\n   * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n   *\r\n   * Under WebGL only the following Blend Modes are available:\r\n   *\r\n   * * ADD\r\n   * * MULTIPLY\r\n   * * SCREEN\r\n   * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\r\n   *\r\n   * Canvas has more available depending on browser support.\r\n   *\r\n   * You can also create your own custom Blend Modes in WebGL.\r\n   *\r\n   * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n   * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n   * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\r\n   * are used.\r\n   *\r\n   * @method Phaser.GameObjects.Components.BlendMode#setBlendMode\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|Phaser.BlendModes)} value - The BlendMode value. Either a string or a CONST.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setBlendMode: function (value) {\n    this.blendMode = value;\n    return this;\n  }\n};\nmodule.exports = BlendMode;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/BlendMode.js"],"names":["BlendModes","require","BlendMode","_blendMode","NORMAL","blendMode","get","set","value","setBlendMode","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,2BAAD,CAAxB;AAEA;;;;;;;;;AAQA,IAAIC,SAAS,GAAG;AAEZ;;;;;;;;;AASAC,EAAAA,UAAU,EAAEH,UAAU,CAACI,MAXX;;AAaZ;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAC,EAAAA,SAAS,EAAE;AAEPC,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKH,UAAZ;AACH,KALM;AAOPI,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAI,OAAOA,KAAP,KAAiB,QAArB,EACA;AACIA,QAAAA,KAAK,GAAGR,UAAU,CAACQ,KAAD,CAAlB;AACH;;AAEDA,MAAAA,KAAK,IAAI,CAAT;;AAEA,UAAIA,KAAK,IAAI,CAAC,CAAd,EACA;AACI,aAAKL,UAAL,GAAkBK,KAAlB;AACH;AACJ;AApBM,GAtCC;;AA8DZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAC,EAAAA,YAAY,EAAE,UAAUD,KAAV,EACd;AACI,SAAKH,SAAL,GAAiBG,KAAjB;AAEA,WAAO,IAAP;AACH;AA/FW,CAAhB;AAmGAE,MAAM,CAACC,OAAP,GAAiBT,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../../renderer/BlendModes');\r\n\r\n/**\r\n * Provides methods used for setting the blend mode of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.BlendMode\r\n * @since 3.0.0\r\n */\r\n\r\nvar BlendMode = {\r\n\r\n    /**\r\n     * Private internal value. Holds the current blend mode.\r\n     * \r\n     * @name Phaser.GameObjects.Components.BlendMode#_blendMode\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\r\n    _blendMode: BlendModes.NORMAL,\r\n\r\n    /**\r\n     * Sets the Blend Mode being used by this Game Object.\r\n     *\r\n     * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n     *\r\n     * Under WebGL only the following Blend Modes are available:\r\n     *\r\n     * * ADD\r\n     * * MULTIPLY\r\n     * * SCREEN\r\n     * * ERASE\r\n     *\r\n     * Canvas has more available depending on browser support.\r\n     *\r\n     * You can also create your own custom Blend Modes in WebGL.\r\n     *\r\n     * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n     * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n     * reasons try to be careful about the construction of your Scene and the frequency of which blend modes\r\n     * are used.\r\n     *\r\n     * @name Phaser.GameObjects.Components.BlendMode#blendMode\r\n     * @type {(Phaser.BlendModes|string)}\r\n     * @since 3.0.0\r\n     */\r\n    blendMode: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._blendMode;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (typeof value === 'string')\r\n            {\r\n                value = BlendModes[value];\r\n            }\r\n\r\n            value |= 0;\r\n\r\n            if (value >= -1)\r\n            {\r\n                this._blendMode = value;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the Blend Mode being used by this Game Object.\r\n     *\r\n     * This can be a const, such as `Phaser.BlendModes.SCREEN`, or an integer, such as 4 (for Overlay)\r\n     *\r\n     * Under WebGL only the following Blend Modes are available:\r\n     *\r\n     * * ADD\r\n     * * MULTIPLY\r\n     * * SCREEN\r\n     * * ERASE (only works when rendering to a framebuffer, like a Render Texture)\r\n     *\r\n     * Canvas has more available depending on browser support.\r\n     *\r\n     * You can also create your own custom Blend Modes in WebGL.\r\n     *\r\n     * Blend modes have different effects under Canvas and WebGL, and from browser to browser, depending\r\n     * on support. Blend Modes also cause a WebGL batch flush should it encounter a new blend mode. For these\r\n     * reasons try to be careful about the construction of your Scene and the frequency in which blend modes\r\n     * are used.\r\n     *\r\n     * @method Phaser.GameObjects.Components.BlendMode#setBlendMode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|Phaser.BlendModes)} value - The BlendMode value. Either a string or a CONST.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setBlendMode: function (value)\r\n    {\r\n        this.blendMode = value;\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = BlendMode;\r\n"]},"metadata":{},"sourceType":"script"}