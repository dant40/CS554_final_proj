{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A three-dimensional matrix.\r\n *\r\n * Defaults to the identity matrix when instantiated.\r\n *\r\n * @class Matrix3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Matrix3} [m] - Optional Matrix3 to copy values from.\r\n */\n\n\nvar Matrix3 = new Class({\n  initialize: function Matrix3(m) {\n    /**\r\n     * The matrix values.\r\n     *\r\n     * @name Phaser.Math.Matrix3#val\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n    this.val = new Float32Array(9);\n\n    if (m) {\n      //  Assume Matrix3 with val:\n      this.copy(m);\n    } else {\n      //  Default to identity\n      this.identity();\n    }\n  },\n\n  /**\r\n   * Make a clone of this Matrix3.\r\n   *\r\n   * @method Phaser.Math.Matrix3#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} A clone of this Matrix3.\r\n   */\n  clone: function () {\n    return new Matrix3(this);\n  },\n\n  /**\r\n   * This method is an alias for `Matrix3.copy`.\r\n   *\r\n   * @method Phaser.Math.Matrix3#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to set the values of this Matrix's from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  set: function (src) {\n    return this.copy(src);\n  },\n\n  /**\r\n   * Copy the values of a given Matrix into this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  copy: function (src) {\n    var out = this.val;\n    var a = src.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return this;\n  },\n\n  /**\r\n   * Copy the values of a given Matrix4 into this Matrix3.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} m - The Matrix4 to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromMat4: function (m) {\n    var a = m.val;\n    var out = this.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix from the given array.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromArray\r\n   * @since 3.0.0\r\n   *\r\n   * @param {array} a - The array to copy the values from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromArray: function (a) {\n    var out = this.val;\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return this;\n  },\n\n  /**\r\n   * Reset this Matrix to an identity (default) matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#identity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  identity: function () {\n    var out = this.val;\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return this;\n  },\n\n  /**\r\n   * Transpose this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#transpose\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  transpose: function () {\n    var a = this.val;\n    var a01 = a[1];\n    var a02 = a[2];\n    var a12 = a[5];\n    a[1] = a[3];\n    a[2] = a[6];\n    a[3] = a01;\n    a[5] = a[7];\n    a[6] = a02;\n    a[7] = a12;\n    return this;\n  },\n\n  /**\r\n   * Invert this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#invert\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  invert: function () {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1 / det;\n    a[0] = b01 * det;\n    a[1] = (-a22 * a01 + a02 * a21) * det;\n    a[2] = (a12 * a01 - a02 * a11) * det;\n    a[3] = b11 * det;\n    a[4] = (a22 * a00 - a02 * a20) * det;\n    a[5] = (-a12 * a00 + a02 * a10) * det;\n    a[6] = b21 * det;\n    a[7] = (-a21 * a00 + a01 * a20) * det;\n    a[8] = (a11 * a00 - a01 * a10) * det;\n    return this;\n  },\n\n  /**\r\n   * Calculate the adjoint, or adjugate, of this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#adjoint\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  adjoint: function () {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    a[0] = a11 * a22 - a12 * a21;\n    a[1] = a02 * a21 - a01 * a22;\n    a[2] = a01 * a12 - a02 * a11;\n    a[3] = a12 * a20 - a10 * a22;\n    a[4] = a00 * a22 - a02 * a20;\n    a[5] = a02 * a10 - a00 * a12;\n    a[6] = a10 * a21 - a11 * a20;\n    a[7] = a01 * a20 - a00 * a21;\n    a[8] = a00 * a11 - a01 * a10;\n    return this;\n  },\n\n  /**\r\n   * Calculate the determinant of this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#determinant\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The determinant of this Matrix.\r\n   */\n  determinant: function () {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n  },\n\n  /**\r\n   * Multiply this Matrix by the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix3} src - The Matrix to multiply this Matrix by.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  multiply: function (src) {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b = src.val;\n    var b00 = b[0];\n    var b01 = b[1];\n    var b02 = b[2];\n    var b10 = b[3];\n    var b11 = b[4];\n    var b12 = b[5];\n    var b20 = b[6];\n    var b21 = b[7];\n    var b22 = b[8];\n    a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return this;\n  },\n\n  /**\r\n   * Translate this Matrix using the given Vector.\r\n   *\r\n   * @method Phaser.Math.Matrix3#translate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to translate this Matrix with.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  translate: function (v) {\n    var a = this.val;\n    var x = v.x;\n    var y = v.y;\n    a[6] = x * a[0] + y * a[3] + a[6];\n    a[7] = x * a[1] + y * a[4] + a[7];\n    a[8] = x * a[2] + y * a[5] + a[8];\n    return this;\n  },\n\n  /**\r\n   * Apply a rotation transformation to this Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#rotate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} rad - The angle in radians to rotate by.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  rotate: function (rad) {\n    var a = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var s = Math.sin(rad);\n    var c = Math.cos(rad);\n    a[0] = c * a00 + s * a10;\n    a[1] = c * a01 + s * a11;\n    a[2] = c * a02 + s * a12;\n    a[3] = c * a10 - s * a00;\n    a[4] = c * a11 - s * a01;\n    a[5] = c * a12 - s * a02;\n    return this;\n  },\n\n  /**\r\n   * Apply a scale transformation to this Matrix.\r\n   *\r\n   * Uses the `x` and `y` components of the given Vector to scale the Matrix.\r\n   *\r\n   * @method Phaser.Math.Matrix3#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to scale this Matrix with.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  scale: function (v) {\n    var a = this.val;\n    var x = v.x;\n    var y = v.y;\n    a[0] = x * a[0];\n    a[1] = x * a[1];\n    a[2] = x * a[2];\n    a[3] = y * a[3];\n    a[4] = y * a[4];\n    a[5] = y * a[5];\n    return this;\n  },\n\n  /**\r\n   * Set the values of this Matrix from the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Matrix3#fromQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to set the values of this Matrix from.\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  fromQuat: function (q) {\n    var x = q.x;\n    var y = q.y;\n    var z = q.z;\n    var w = q.w;\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n    var xx = x * x2;\n    var xy = x * y2;\n    var xz = x * z2;\n    var yy = y * y2;\n    var yz = y * z2;\n    var zz = z * z2;\n    var wx = w * x2;\n    var wy = w * y2;\n    var wz = w * z2;\n    var out = this.val;\n    out[0] = 1 - (yy + zz);\n    out[3] = xy + wz;\n    out[6] = xz - wy;\n    out[1] = xy - wz;\n    out[4] = 1 - (xx + zz);\n    out[7] = yz + wx;\n    out[2] = xz + wy;\n    out[5] = yz - wx;\n    out[8] = 1 - (xx + yy);\n    return this;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Math.Matrix3#normalFromMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} m - [description]\r\n   *\r\n   * @return {Phaser.Math.Matrix3} This Matrix3.\r\n   */\n  normalFromMat4: function (m) {\n    var a = m.val;\n    var out = this.val;\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a03 = a[3];\n    var a10 = a[4];\n    var a11 = a[5];\n    var a12 = a[6];\n    var a13 = a[7];\n    var a20 = a[8];\n    var a21 = a[9];\n    var a22 = a[10];\n    var a23 = a[11];\n    var a30 = a[12];\n    var a31 = a[13];\n    var a32 = a[14];\n    var a33 = a[15];\n    var b00 = a00 * a11 - a01 * a10;\n    var b01 = a00 * a12 - a02 * a10;\n    var b02 = a00 * a13 - a03 * a10;\n    var b03 = a01 * a12 - a02 * a11;\n    var b04 = a01 * a13 - a03 * a11;\n    var b05 = a02 * a13 - a03 * a12;\n    var b06 = a20 * a31 - a21 * a30;\n    var b07 = a20 * a32 - a22 * a30;\n    var b08 = a20 * a33 - a23 * a30;\n    var b09 = a21 * a32 - a22 * a31;\n    var b10 = a21 * a33 - a23 * a31;\n    var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n      return null;\n    }\n\n    det = 1 / det;\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    return this;\n  }\n});\nmodule.exports = Matrix3;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Matrix3.js"],"names":["Class","require","Matrix3","initialize","m","val","Float32Array","copy","identity","clone","set","src","out","a","fromMat4","fromArray","transpose","a01","a02","a12","invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","adjoint","determinant","multiply","b","b00","b02","b10","b12","b20","b22","translate","v","x","y","rotate","rad","s","Math","sin","c","cos","scale","fromQuat","q","z","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A three-dimensional matrix.\r\n *\r\n * Defaults to the identity matrix when instantiated.\r\n *\r\n * @class Matrix3\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Matrix3} [m] - Optional Matrix3 to copy values from.\r\n */\r\nvar Matrix3 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Matrix3 (m)\r\n    {\r\n        /**\r\n         * The matrix values.\r\n         *\r\n         * @name Phaser.Math.Matrix3#val\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.val = new Float32Array(9);\r\n\r\n        if (m)\r\n        {\r\n            //  Assume Matrix3 with val:\r\n            this.copy(m);\r\n        }\r\n        else\r\n        {\r\n            //  Default to identity\r\n            this.identity();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Matrix3.\r\n     *\r\n     * @method Phaser.Math.Matrix3#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} A clone of this Matrix3.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Matrix3(this);\r\n    },\r\n\r\n    /**\r\n     * This method is an alias for `Matrix3.copy`.\r\n     *\r\n     * @method Phaser.Math.Matrix3#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to set the values of this Matrix's from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    set: function (src)\r\n    {\r\n        return this.copy(src);\r\n    },\r\n\r\n    /**\r\n     * Copy the values of a given Matrix into this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        var out = this.val;\r\n        var a = src.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Copy the values of a given Matrix4 into this Matrix3.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - The Matrix4 to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromMat4: function (m)\r\n    {\r\n        var a = m.val;\r\n        var out = this.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[4];\r\n        out[4] = a[5];\r\n        out[5] = a[6];\r\n        out[6] = a[8];\r\n        out[7] = a[9];\r\n        out[8] = a[10];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given array.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromArray\r\n     * @since 3.0.0\r\n     *\r\n     * @param {array} a - The array to copy the values from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromArray: function (a)\r\n    {\r\n        var out = this.val;\r\n\r\n        out[0] = a[0];\r\n        out[1] = a[1];\r\n        out[2] = a[2];\r\n        out[3] = a[3];\r\n        out[4] = a[4];\r\n        out[5] = a[5];\r\n        out[6] = a[6];\r\n        out[7] = a[7];\r\n        out[8] = a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Reset this Matrix to an identity (default) matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#identity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    identity: function ()\r\n    {\r\n        var out = this.val;\r\n\r\n        out[0] = 1;\r\n        out[1] = 0;\r\n        out[2] = 0;\r\n        out[3] = 0;\r\n        out[4] = 1;\r\n        out[5] = 0;\r\n        out[6] = 0;\r\n        out[7] = 0;\r\n        out[8] = 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transpose this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#transpose\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    transpose: function ()\r\n    {\r\n        var a = this.val;\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a12 = a[5];\r\n\r\n        a[1] = a[3];\r\n        a[2] = a[6];\r\n        a[3] = a01;\r\n        a[5] = a[7];\r\n        a[6] = a02;\r\n        a[7] = a12;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Invert this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#invert\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    invert: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        var b01 = a22 * a11 - a12 * a21;\r\n        var b11 = -a22 * a10 + a12 * a20;\r\n        var b21 = a21 * a10 - a11 * a20;\r\n\r\n        // Calculate the determinant\r\n        var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n        if (!det)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        det = 1 / det;\r\n\r\n        a[0] = b01 * det;\r\n        a[1] = (-a22 * a01 + a02 * a21) * det;\r\n        a[2] = (a12 * a01 - a02 * a11) * det;\r\n        a[3] = b11 * det;\r\n        a[4] = (a22 * a00 - a02 * a20) * det;\r\n        a[5] = (-a12 * a00 + a02 * a10) * det;\r\n        a[6] = b21 * det;\r\n        a[7] = (-a21 * a00 + a01 * a20) * det;\r\n        a[8] = (a11 * a00 - a01 * a10) * det;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the adjoint, or adjugate, of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#adjoint\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    adjoint: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        a[0] = (a11 * a22 - a12 * a21);\r\n        a[1] = (a02 * a21 - a01 * a22);\r\n        a[2] = (a01 * a12 - a02 * a11);\r\n        a[3] = (a12 * a20 - a10 * a22);\r\n        a[4] = (a00 * a22 - a02 * a20);\r\n        a[5] = (a02 * a10 - a00 * a12);\r\n        a[6] = (a10 * a21 - a11 * a20);\r\n        a[7] = (a01 * a20 - a00 * a21);\r\n        a[8] = (a00 * a11 - a01 * a10);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the determinant of this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#determinant\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The determinant of this Matrix.\r\n     */\r\n    determinant: function ()\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n    },\r\n\r\n    /**\r\n     * Multiply this Matrix by the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix3} src - The Matrix to multiply this Matrix by.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    multiply: function (src)\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n        var a20 = a[6];\r\n        var a21 = a[7];\r\n        var a22 = a[8];\r\n\r\n        var b = src.val;\r\n\r\n        var b00 = b[0];\r\n        var b01 = b[1];\r\n        var b02 = b[2];\r\n        var b10 = b[3];\r\n        var b11 = b[4];\r\n        var b12 = b[5];\r\n        var b20 = b[6];\r\n        var b21 = b[7];\r\n        var b22 = b[8];\r\n\r\n        a[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n        a[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n        a[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n        a[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n        a[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n        a[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n        a[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n        a[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n        a[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate this Matrix using the given Vector.\r\n     *\r\n     * @method Phaser.Math.Matrix3#translate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to translate this Matrix with.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    translate: function (v)\r\n    {\r\n        var a = this.val;\r\n        var x = v.x;\r\n        var y = v.y;\r\n\r\n        a[6] = x * a[0] + y * a[3] + a[6];\r\n        a[7] = x * a[1] + y * a[4] + a[7];\r\n        a[8] = x * a[2] + y * a[5] + a[8];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a rotation transformation to this Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#rotate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} rad - The angle in radians to rotate by.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    rotate: function (rad)\r\n    {\r\n        var a = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a10 = a[3];\r\n        var a11 = a[4];\r\n        var a12 = a[5];\r\n\r\n        var s = Math.sin(rad);\r\n        var c = Math.cos(rad);\r\n\r\n        a[0] = c * a00 + s * a10;\r\n        a[1] = c * a01 + s * a11;\r\n        a[2] = c * a02 + s * a12;\r\n\r\n        a[3] = c * a10 - s * a00;\r\n        a[4] = c * a11 - s * a01;\r\n        a[5] = c * a12 - s * a02;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a scale transformation to this Matrix.\r\n     *\r\n     * Uses the `x` and `y` components of the given Vector to scale the Matrix.\r\n     *\r\n     * @method Phaser.Math.Matrix3#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to scale this Matrix with.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    scale: function (v)\r\n    {\r\n        var a = this.val;\r\n        var x = v.x;\r\n        var y = v.y;\r\n\r\n        a[0] = x * a[0];\r\n        a[1] = x * a[1];\r\n        a[2] = x * a[2];\r\n\r\n        a[3] = y * a[3];\r\n        a[4] = y * a[4];\r\n        a[5] = y * a[5];\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the values of this Matrix from the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Matrix3#fromQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to set the values of this Matrix from.\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    fromQuat: function (q)\r\n    {\r\n        var x = q.x;\r\n        var y = q.y;\r\n        var z = q.z;\r\n        var w = q.w;\r\n\r\n        var x2 = x + x;\r\n        var y2 = y + y;\r\n        var z2 = z + z;\r\n\r\n        var xx = x * x2;\r\n        var xy = x * y2;\r\n        var xz = x * z2;\r\n\r\n        var yy = y * y2;\r\n        var yz = y * z2;\r\n        var zz = z * z2;\r\n\r\n        var wx = w * x2;\r\n        var wy = w * y2;\r\n        var wz = w * z2;\r\n\r\n        var out = this.val;\r\n\r\n        out[0] = 1 - (yy + zz);\r\n        out[3] = xy + wz;\r\n        out[6] = xz - wy;\r\n\r\n        out[1] = xy - wz;\r\n        out[4] = 1 - (xx + zz);\r\n        out[7] = yz + wx;\r\n\r\n        out[2] = xz + wy;\r\n        out[5] = yz - wx;\r\n        out[8] = 1 - (xx + yy);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Math.Matrix3#normalFromMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} m - [description]\r\n     *\r\n     * @return {Phaser.Math.Matrix3} This Matrix3.\r\n     */\r\n    normalFromMat4: function (m)\r\n    {\r\n        var a = m.val;\r\n        var out = this.val;\r\n\r\n        var a00 = a[0];\r\n        var a01 = a[1];\r\n        var a02 = a[2];\r\n        var a03 = a[3];\r\n\r\n        var a10 = a[4];\r\n        var a11 = a[5];\r\n        var a12 = a[6];\r\n        var a13 = a[7];\r\n\r\n        var a20 = a[8];\r\n        var a21 = a[9];\r\n        var a22 = a[10];\r\n        var a23 = a[11];\r\n\r\n        var a30 = a[12];\r\n        var a31 = a[13];\r\n        var a32 = a[14];\r\n        var a33 = a[15];\r\n\r\n        var b00 = a00 * a11 - a01 * a10;\r\n        var b01 = a00 * a12 - a02 * a10;\r\n        var b02 = a00 * a13 - a03 * a10;\r\n        var b03 = a01 * a12 - a02 * a11;\r\n\r\n        var b04 = a01 * a13 - a03 * a11;\r\n        var b05 = a02 * a13 - a03 * a12;\r\n        var b06 = a20 * a31 - a21 * a30;\r\n        var b07 = a20 * a32 - a22 * a30;\r\n\r\n        var b08 = a20 * a33 - a23 * a30;\r\n        var b09 = a21 * a32 - a22 * a31;\r\n        var b10 = a21 * a33 - a23 * a31;\r\n        var b11 = a22 * a33 - a23 * a32;\r\n\r\n        // Calculate the determinant\r\n        var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n        if (!det)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        det = 1 / det;\r\n\r\n        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Matrix3;\r\n"]},"metadata":{},"sourceType":"script"}