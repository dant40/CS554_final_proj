{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Searches a pre-sorted array for the closet value to the given number.\r\n *\r\n * If the `key` argument is given it will assume the array contains objects that all have the required `key` property name,\r\n * and will check for the closest value of those to the given number.\r\n *\r\n * @function Phaser.Utils.Array.FindClosestInSorted\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to search for in the array.\r\n * @param {array} array - The array to search, which must be sorted.\r\n * @param {string} [key] - An optional property key. If specified the array elements property will be checked against value.\r\n *\r\n * @return {(number|any)} The nearest value found in the array, or if a `key` was given, the nearest object with the matching property value.\r\n */\nvar FindClosestInSorted = function (value, array, key) {\n  if (!array.length) {\n    return NaN;\n  } else if (array.length === 1) {\n    return array[0];\n  }\n\n  var i = 1;\n  var low;\n  var high;\n\n  if (key) {\n    if (value < array[0][key]) {\n      return array[0];\n    }\n\n    while (array[i][key] < value) {\n      i++;\n    }\n  } else {\n    while (array[i] < value) {\n      i++;\n    }\n  }\n\n  if (i > array.length) {\n    i = array.length;\n  }\n\n  if (key) {\n    low = array[i - 1][key];\n    high = array[i][key];\n    return high - value <= value - low ? array[i] : array[i - 1];\n  } else {\n    low = array[i - 1];\n    high = array[i];\n    return high - value <= value - low ? high : low;\n  }\n};\n\nmodule.exports = FindClosestInSorted;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/FindClosestInSorted.js"],"names":["FindClosestInSorted","value","array","key","length","NaN","i","low","high","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;AAeA,IAAIA,mBAAmB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EAC1B;AACI,MAAI,CAACD,KAAK,CAACE,MAAX,EACA;AACI,WAAOC,GAAP;AACH,GAHD,MAIK,IAAIH,KAAK,CAACE,MAAN,KAAiB,CAArB,EACL;AACI,WAAOF,KAAK,CAAC,CAAD,CAAZ;AACH;;AAED,MAAII,CAAC,GAAG,CAAR;AACA,MAAIC,GAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIL,GAAJ,EACA;AACI,QAAIF,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,GAAT,CAAZ,EACA;AACI,aAAOD,KAAK,CAAC,CAAD,CAAZ;AACH;;AAED,WAAOA,KAAK,CAACI,CAAD,CAAL,CAASH,GAAT,IAAgBF,KAAvB,EACA;AACIK,MAAAA,CAAC;AACJ;AACJ,GAXD,MAaA;AACI,WAAOJ,KAAK,CAACI,CAAD,CAAL,GAAWL,KAAlB,EACA;AACIK,MAAAA,CAAC;AACJ;AACJ;;AAED,MAAIA,CAAC,GAAGJ,KAAK,CAACE,MAAd,EACA;AACIE,IAAAA,CAAC,GAAGJ,KAAK,CAACE,MAAV;AACH;;AAED,MAAID,GAAJ,EACA;AACII,IAAAA,GAAG,GAAGL,KAAK,CAACI,CAAC,GAAG,CAAL,CAAL,CAAaH,GAAb,CAAN;AACAK,IAAAA,IAAI,GAAGN,KAAK,CAACI,CAAD,CAAL,CAASH,GAAT,CAAP;AAEA,WAASK,IAAI,GAAGP,KAAR,IAAmBA,KAAK,GAAGM,GAA5B,GAAoCL,KAAK,CAACI,CAAD,CAAzC,GAA+CJ,KAAK,CAACI,CAAC,GAAG,CAAL,CAA3D;AACH,GAND,MAQA;AACIC,IAAAA,GAAG,GAAGL,KAAK,CAACI,CAAC,GAAG,CAAL,CAAX;AACAE,IAAAA,IAAI,GAAGN,KAAK,CAACI,CAAD,CAAZ;AAEA,WAASE,IAAI,GAAGP,KAAR,IAAmBA,KAAK,GAAGM,GAA5B,GAAoCC,IAApC,GAA2CD,GAAlD;AACH;AACJ,CAtDD;;AAwDAE,MAAM,CAACC,OAAP,GAAiBV,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Searches a pre-sorted array for the closet value to the given number.\r\n *\r\n * If the `key` argument is given it will assume the array contains objects that all have the required `key` property name,\r\n * and will check for the closest value of those to the given number.\r\n *\r\n * @function Phaser.Utils.Array.FindClosestInSorted\r\n * @since 3.0.0\r\n *\r\n * @param {number} value - The value to search for in the array.\r\n * @param {array} array - The array to search, which must be sorted.\r\n * @param {string} [key] - An optional property key. If specified the array elements property will be checked against value.\r\n *\r\n * @return {(number|any)} The nearest value found in the array, or if a `key` was given, the nearest object with the matching property value.\r\n */\r\nvar FindClosestInSorted = function (value, array, key)\r\n{\r\n    if (!array.length)\r\n    {\r\n        return NaN;\r\n    }\r\n    else if (array.length === 1)\r\n    {\r\n        return array[0];\r\n    }\r\n\r\n    var i = 1;\r\n    var low;\r\n    var high;\r\n\r\n    if (key)\r\n    {\r\n        if (value < array[0][key])\r\n        {\r\n            return array[0];\r\n        }\r\n\r\n        while (array[i][key] < value)\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        while (array[i] < value)\r\n        {\r\n            i++;\r\n        }\r\n    }\r\n\r\n    if (i > array.length)\r\n    {\r\n        i = array.length;\r\n    }\r\n\r\n    if (key)\r\n    {\r\n        low = array[i - 1][key];\r\n        high = array[i][key];\r\n\r\n        return ((high - value) <= (value - low)) ? array[i] : array[i - 1];\r\n    }\r\n    else\r\n    {\r\n        low = array[i - 1];\r\n        high = array[i];\r\n\r\n        return ((high - value) <= (value - low)) ? high : low;\r\n    }\r\n};\r\n\r\nmodule.exports = FindClosestInSorted;\r\n"]},"metadata":{},"sourceType":"script"}