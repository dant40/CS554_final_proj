{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar ImpactBody = require('./ImpactBody');\n\nvar ImpactImage = require('./ImpactImage');\n\nvar ImpactSprite = require('./ImpactSprite');\n/**\r\n * @classdesc\r\n * The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - A reference to the Impact Physics world.\r\n */\n\n\nvar Factory = new Class({\n  initialize: function Factory(world) {\n    /**\r\n     * A reference to the Impact Physics world.\r\n     *\r\n     * @name Phaser.Physics.Impact.Factory#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n    this.world = world;\n    /**\r\n     * A reference to the Scene.Systems this Impact Physics instance belongs to.\r\n     *\r\n     * @name Phaser.Physics.Impact.Factory#sys\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.sys = world.scene.sys;\n  },\n\n  /**\r\n   * Creates a new ImpactBody object and adds it to the physics simulation.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#body\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of the body in the physics world.\r\n   * @param {number} y - The vertical position of the body in the physics world.\r\n   * @param {number} width - The width of the body.\r\n   * @param {number} height - The height of the body.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactBody} The ImpactBody object that was created.\r\n   */\n  body: function (x, y, width, height) {\n    return new ImpactBody(this.world, x, y, width, height);\n  },\n\n  /**\r\n   * Adds an Impact Physics Body to the given Game Object.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#existing\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to receive the physics body.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n   */\n  existing: function (gameObject) {\n    var x = gameObject.x - gameObject.frame.centerX;\n    var y = gameObject.y - gameObject.frame.centerY;\n    var w = gameObject.width;\n    var h = gameObject.height;\n    gameObject.body = this.world.create(x, y, w, h);\n    gameObject.body.parent = gameObject;\n    gameObject.body.gameObject = gameObject;\n    return gameObject;\n  },\n\n  /**\r\n   * Creates a new ImpactImage object and adds it to the physics world.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#image\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactImage} The ImpactImage object that was created.\r\n   */\n  image: function (x, y, key, frame) {\n    var image = new ImpactImage(this.world, x, y, key, frame);\n    this.sys.displayList.add(image);\n    return image;\n  },\n\n  /**\r\n   * Creates a new ImpactSprite object and adds it to the physics world.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#sprite\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal position of this Game Object in the world.\r\n   * @param {number} y - The vertical position of this Game Object in the world.\r\n   * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n   *\r\n   * @return {Phaser.Physics.Impact.ImpactSprite} The ImpactSprite object that was created.\r\n   */\n  sprite: function (x, y, key, frame) {\n    var sprite = new ImpactSprite(this.world, x, y, key, frame);\n    this.sys.displayList.add(sprite);\n    this.sys.updateList.add(sprite);\n    return sprite;\n  },\n\n  /**\r\n   * Destroys this Factory.\r\n   *\r\n   * @method Phaser.Physics.Impact.Factory#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    this.world = null;\n    this.sys = null;\n  }\n});\nmodule.exports = Factory;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/Factory.js"],"names":["Class","require","ImpactBody","ImpactImage","ImpactSprite","Factory","initialize","world","sys","scene","body","x","y","width","height","existing","gameObject","frame","centerX","centerY","w","h","create","parent","image","key","displayList","add","sprite","updateList","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;;;;;;;;;;AAYA,IAAII,OAAO,GAAG,IAAIL,KAAJ,CAAU;AAEpBM,EAAAA,UAAU,EAEV,SAASD,OAAT,CAAkBE,KAAlB,EACA;AACI;;;;;;;AAOA,SAAKA,KAAL,GAAaA,KAAb;AAEA;;;;;;;;AAOA,SAAKC,GAAL,GAAWD,KAAK,CAACE,KAAN,CAAYD,GAAvB;AACH,GAvBmB;;AAyBpB;;;;;;;;;;;;;AAaAE,EAAAA,IAAI,EAAE,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuBC,MAAvB,EACN;AACI,WAAO,IAAIZ,UAAJ,CAAe,KAAKK,KAApB,EAA2BI,CAA3B,EAA8BC,CAA9B,EAAiCC,KAAjC,EAAwCC,MAAxC,CAAP;AACH,GAzCmB;;AA2CpB;;;;;;;;;;AAUAC,EAAAA,QAAQ,EAAE,UAAUC,UAAV,EACV;AACI,QAAIL,CAAC,GAAGK,UAAU,CAACL,CAAX,GAAeK,UAAU,CAACC,KAAX,CAAiBC,OAAxC;AACA,QAAIN,CAAC,GAAGI,UAAU,CAACJ,CAAX,GAAeI,UAAU,CAACC,KAAX,CAAiBE,OAAxC;AACA,QAAIC,CAAC,GAAGJ,UAAU,CAACH,KAAnB;AACA,QAAIQ,CAAC,GAAGL,UAAU,CAACF,MAAnB;AAEAE,IAAAA,UAAU,CAACN,IAAX,GAAkB,KAAKH,KAAL,CAAWe,MAAX,CAAkBX,CAAlB,EAAqBC,CAArB,EAAwBQ,CAAxB,EAA2BC,CAA3B,CAAlB;AAEAL,IAAAA,UAAU,CAACN,IAAX,CAAgBa,MAAhB,GAAyBP,UAAzB;AACAA,IAAAA,UAAU,CAACN,IAAX,CAAgBM,UAAhB,GAA6BA,UAA7B;AAEA,WAAOA,UAAP;AACH,GAlEmB;;AAoEpB;;;;;;;;;;;;;AAaAQ,EAAAA,KAAK,EAAE,UAAUb,CAAV,EAAaC,CAAb,EAAgBa,GAAhB,EAAqBR,KAArB,EACP;AACI,QAAIO,KAAK,GAAG,IAAIrB,WAAJ,CAAgB,KAAKI,KAArB,EAA4BI,CAA5B,EAA+BC,CAA/B,EAAkCa,GAAlC,EAAuCR,KAAvC,CAAZ;AAEA,SAAKT,GAAL,CAASkB,WAAT,CAAqBC,GAArB,CAAyBH,KAAzB;AAEA,WAAOA,KAAP;AACH,GAxFmB;;AA0FpB;;;;;;;;;;;;;AAaAI,EAAAA,MAAM,EAAE,UAAUjB,CAAV,EAAaC,CAAb,EAAgBa,GAAhB,EAAqBR,KAArB,EACR;AACI,QAAIW,MAAM,GAAG,IAAIxB,YAAJ,CAAiB,KAAKG,KAAtB,EAA6BI,CAA7B,EAAgCC,CAAhC,EAAmCa,GAAnC,EAAwCR,KAAxC,CAAb;AAEA,SAAKT,GAAL,CAASkB,WAAT,CAAqBC,GAArB,CAAyBC,MAAzB;AACA,SAAKpB,GAAL,CAASqB,UAAT,CAAoBF,GAApB,CAAwBC,MAAxB;AAEA,WAAOA,MAAP;AACH,GA/GmB;;AAiHpB;;;;;;AAMAE,EAAAA,OAAO,EAAE,YACT;AACI,SAAKvB,KAAL,GAAa,IAAb;AACA,SAAKC,GAAL,GAAW,IAAX;AACH;AA3HmB,CAAV,CAAd;AA+HAuB,MAAM,CAACC,OAAP,GAAiB3B,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar ImpactBody = require('./ImpactBody');\r\nvar ImpactImage = require('./ImpactImage');\r\nvar ImpactSprite = require('./ImpactSprite');\r\n\r\n/**\r\n * @classdesc\r\n * The Impact Physics Factory allows you to easily create Impact Physics enabled Game Objects.\r\n * Objects that are created by this Factory are automatically added to the physics world.\r\n *\r\n * @class Factory\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - A reference to the Impact Physics world.\r\n */\r\nvar Factory = new Class({\r\n\r\n    initialize:\r\n\r\n    function Factory (world)\r\n    {\r\n        /**\r\n         * A reference to the Impact Physics world.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * A reference to the Scene.Systems this Impact Physics instance belongs to.\r\n         *\r\n         * @name Phaser.Physics.Impact.Factory#sys\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.sys = world.scene.sys;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactBody object and adds it to the physics simulation.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#body\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of the body in the physics world.\r\n     * @param {number} y - The vertical position of the body in the physics world.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactBody} The ImpactBody object that was created.\r\n     */\r\n    body: function (x, y, width, height)\r\n    {\r\n        return new ImpactBody(this.world, x, y, width, height);\r\n    },\r\n\r\n    /**\r\n     * Adds an Impact Physics Body to the given Game Object.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#existing\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to receive the physics body.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} The Game Object.\r\n     */\r\n    existing: function (gameObject)\r\n    {\r\n        var x = gameObject.x - gameObject.frame.centerX;\r\n        var y = gameObject.y - gameObject.frame.centerY;\r\n        var w = gameObject.width;\r\n        var h = gameObject.height;\r\n\r\n        gameObject.body = this.world.create(x, y, w, h);\r\n\r\n        gameObject.body.parent = gameObject;\r\n        gameObject.body.gameObject = gameObject;\r\n\r\n        return gameObject;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactImage object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#image\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactImage} The ImpactImage object that was created.\r\n     */\r\n    image: function (x, y, key, frame)\r\n    {\r\n        var image = new ImpactImage(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(image);\r\n\r\n        return image;\r\n    },\r\n\r\n    /**\r\n     * Creates a new ImpactSprite object and adds it to the physics world.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#sprite\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal position of this Game Object in the world.\r\n     * @param {number} y - The vertical position of this Game Object in the world.\r\n     * @param {string} key - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n     *\r\n     * @return {Phaser.Physics.Impact.ImpactSprite} The ImpactSprite object that was created.\r\n     */\r\n    sprite: function (x, y, key, frame)\r\n    {\r\n        var sprite = new ImpactSprite(this.world, x, y, key, frame);\r\n\r\n        this.sys.displayList.add(sprite);\r\n        this.sys.updateList.add(sprite);\r\n\r\n        return sprite;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Factory.\r\n     *\r\n     * @method Phaser.Physics.Impact.Factory#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world = null;\r\n        this.sys = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Factory;\r\n"]},"metadata":{},"sourceType":"script"}