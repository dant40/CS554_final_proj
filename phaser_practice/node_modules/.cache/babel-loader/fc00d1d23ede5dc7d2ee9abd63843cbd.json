{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BlendModes = require('../../renderer/BlendModes');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar DeathZone = require('./zones/DeathZone');\n\nvar EdgeZone = require('./zones/EdgeZone');\n\nvar EmitterOp = require('./EmitterOp');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetRandom = require('../../utils/array/GetRandom');\n\nvar HasAny = require('../../utils/object/HasAny');\n\nvar HasValue = require('../../utils/object/HasValue');\n\nvar Particle = require('./Particle');\n\nvar RandomZone = require('./zones/RandomZone');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar StableSort = require('../../utils/array/StableSort');\n\nvar Vector2 = require('../../math/Vector2');\n\nvar Wrap = require('../../math/Wrap');\n/**\r\n * @classdesc\r\n * A particle emitter represents a single particle stream.\r\n * It controls a pool of {@link Phaser.GameObjects.Particles.Particle Particles} and is controlled by a {@link Phaser.GameObjects.Particles.ParticleEmitterManager Particle Emitter Manager}.\r\n *\r\n * @class ParticleEmitter\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} manager - The Emitter Manager this Emitter belongs to.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Settings for this emitter.\r\n */\n\n\nvar ParticleEmitter = new Class({\n  Mixins: [Components.BlendMode, Components.Mask, Components.ScrollFactor, Components.Visible],\n  initialize: function ParticleEmitter(manager, config) {\n    /**\r\n     * The Emitter Manager this Emitter belongs to.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#manager\r\n     * @type {Phaser.GameObjects.Particles.ParticleEmitterManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = manager;\n    /**\r\n     * The texture assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = manager.texture;\n    /**\r\n     * The texture frames assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frames\r\n     * @type {Phaser.Textures.Frame[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.frames = [manager.defaultFrame];\n    /**\r\n     * The default texture frame assigned to particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#defaultFrame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFrame = manager.defaultFrame;\n    /**\r\n     * Names of simple configuration properties.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#configFastMap\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.configFastMap = ['active', 'blendMode', 'collideBottom', 'collideLeft', 'collideRight', 'collideTop', 'deathCallback', 'deathCallbackScope', 'emitCallback', 'emitCallbackScope', 'follow', 'frequency', 'gravityX', 'gravityY', 'maxParticles', 'name', 'on', 'particleBringToTop', 'particleClass', 'radial', 'timeScale', 'trackVisible', 'visible'];\n    /**\r\n     * Names of complex configuration properties.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#configOpMap\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.configOpMap = ['accelerationX', 'accelerationY', 'angle', 'alpha', 'bounce', 'delay', 'lifespan', 'maxVelocityX', 'maxVelocityY', 'moveToX', 'moveToY', 'quantity', 'rotate', 'scaleX', 'scaleY', 'speedX', 'speedY', 'tint', 'x', 'y'];\n    /**\r\n     * The name of this Particle Emitter.\r\n     *\r\n     * Empty by default and never populated by Phaser, this is left for developers to use.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * The Particle Class which will be emitted by this Emitter.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#particleClass\r\n     * @type {Phaser.GameObjects.Particles.Particle}\r\n     * @default Phaser.GameObjects.Particles.Particle\r\n     * @since 3.0.0\r\n     */\n\n    this.particleClass = Particle;\n    /**\r\n     * The x-coordinate of the particle origin (where particles will be emitted).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#x\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     */\n\n    this.x = new EmitterOp(config, 'x', 0, true);\n    /**\r\n     * The y-coordinate of the particle origin (where particles will be emitted).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#y\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     */\n\n    this.y = new EmitterOp(config, 'y', 0, true);\n    /**\r\n     * A radial emitter will emit particles in all directions between angle min and max,\r\n     * using {@link Phaser.GameObjects.Particles.ParticleEmitter#speed} as the value. If set to false then this acts as a point Emitter.\r\n     * A point emitter will emit particles only in the direction derived from the speedX and speedY values.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#radial\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n     */\n\n    this.radial = true;\n    /**\r\n     * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     */\n\n    this.gravityX = 0;\n    /**\r\n     * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     */\n\n    this.gravityY = 0;\n    /**\r\n     * Whether accelerationX and accelerationY are non-zero. Set automatically during configuration.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#acceleration\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.acceleration = false;\n    /**\r\n     * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationX = new EmitterOp(config, 'accelerationX', 0, true);\n    /**\r\n     * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationY = new EmitterOp(config, 'accelerationY', 0, true);\n    /**\r\n     * The maximum horizontal velocity of emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityX = new EmitterOp(config, 'maxVelocityX', 10000, true);\n    /**\r\n     * The maximum vertical velocity of emitted particles, in pixels per second squared.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityY = new EmitterOp(config, 'maxVelocityY', 10000, true);\n    /**\r\n     * The initial horizontal speed of emitted particles, in pixels per second.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#speedX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n     */\n\n    this.speedX = new EmitterOp(config, 'speedX', 0, true);\n    /**\r\n     * The initial vertical speed of emitted particles, in pixels per second.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#speedY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n     */\n\n    this.speedY = new EmitterOp(config, 'speedY', 0, true);\n    /**\r\n     * Whether moveToX and moveToY are nonzero. Set automatically during configuration.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveTo\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.moveTo = false;\n    /**\r\n     * The x-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.moveToX = new EmitterOp(config, 'moveToX', 0, true);\n    /**\r\n     * The y-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.moveToY = new EmitterOp(config, 'moveToY', 0, true);\n    /**\r\n     * Whether particles will rebound when they meet the emitter bounds.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#bounce\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bounce = new EmitterOp(config, 'bounce', 0, true);\n    /**\r\n     * The horizontal scale of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleX\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n     */\n\n    this.scaleX = new EmitterOp(config, 'scaleX', 1);\n    /**\r\n     * The vertical scale of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleY\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n     */\n\n    this.scaleY = new EmitterOp(config, 'scaleY', 1);\n    /**\r\n     * Color tint applied to emitted particles. Any alpha component (0xAA000000) is ignored.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#tint\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0xffffffff\r\n     * @since 3.0.0\r\n     */\n\n    this.tint = new EmitterOp(config, 'tint', 0xffffffff);\n    /**\r\n     * The alpha (transparency) of emitted particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#alpha\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n     */\n\n    this.alpha = new EmitterOp(config, 'alpha', 1);\n    /**\r\n     * The lifespan of emitted particles, in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#lifespan\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n     */\n\n    this.lifespan = new EmitterOp(config, 'lifespan', 1000, true);\n    /**\r\n     * The angle of the initial velocity of emitted particles, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#angle\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default { min: 0, max: 360 }\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n     */\n\n    this.angle = new EmitterOp(config, 'angle', {\n      min: 0,\n      max: 360\n    }, true);\n    /**\r\n     * The rotation of emitted particles, in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#rotate\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rotate = new EmitterOp(config, 'rotate', 0);\n    /**\r\n     * A function to call when a particle is emitted.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallback\r\n     * @type {?Phaser.Types.GameObjects.Particles.ParticleEmitterCallback}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.emitCallback = null;\n    /**\r\n     * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope\r\n     * @type {?*}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.emitCallbackScope = null;\n    /**\r\n     * A function to call when a particle dies.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallback\r\n     * @type {?Phaser.Types.GameObjects.Particles.ParticleDeathCallback}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.deathCallback = null;\n    /**\r\n     * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope\r\n     * @type {?*}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.deathCallbackScope = null;\n    /**\r\n     * Set to hard limit the amount of particle objects this emitter is allowed to create.\r\n     * 0 means unlimited.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#maxParticles\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxParticles = 0;\n    /**\r\n     * How many particles are emitted each time particles are emitted (one explosion or one flow cycle).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#quantity\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n     */\n\n    this.quantity = new EmitterOp(config, 'quantity', 1, true);\n    /**\r\n     * How many ms to wait after emission before the particles start updating.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#delay\r\n     * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delay = new EmitterOp(config, 'delay', 0, true);\n    /**\r\n     * For a flow emitter, the time interval (>= 0) between particle flow cycles in ms.\r\n     * A value of 0 means there is one particle flow cycle for each logic update (the maximum flow frequency). This is the default setting.\r\n     * For an exploding emitter, this value will be -1.\r\n     * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} also puts the emitter in flow mode (frequency >= 0).\r\n     * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} also puts the emitter in explode mode (frequency = -1).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frequency\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     */\n\n    this.frequency = 0;\n    /**\r\n     * Controls if the emitter is currently emitting a particle flow (when frequency >= 0).\r\n     * Already alive particles will continue to update until they expire.\r\n     * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#start} and {@link Phaser.GameObjects.Particles.ParticleEmitter#stop}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#on\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.on = true;\n    /**\r\n     * Newly emitted particles are added to the top of the particle list, i.e. rendered above those already alive.\r\n     * Set to false to send them to the back.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.particleBringToTop = true;\n    /**\r\n     * The time rate applied to active particles, affecting lifespan, movement, and tweens. Values larger than 1 are faster than normal.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * An object describing a shape to emit particles from.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#emitZone\r\n     * @type {?Phaser.GameObjects.Particles.Zones.EdgeZone|Phaser.GameObjects.Particles.Zones.RandomZone}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n     */\n\n    this.emitZone = null;\n    /**\r\n     * An object describing a shape that deactivates particles when they interact with it.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#deathZone\r\n     * @type {?Phaser.GameObjects.Particles.Zones.DeathZone}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n     */\n\n    this.deathZone = null;\n    /**\r\n     * A rectangular boundary constraining particle movement.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#bounds\r\n     * @type {?Phaser.Geom.Rectangle}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n     */\n\n    this.bounds = null;\n    /**\r\n     * Whether particles interact with the left edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideLeft\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideLeft = true;\n    /**\r\n     * Whether particles interact with the right edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideRight\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideRight = true;\n    /**\r\n     * Whether particles interact with the top edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideTop = true;\n    /**\r\n     * Whether particles interact with the bottom edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#collideBottom\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.collideBottom = true;\n    /**\r\n     * Whether this emitter updates itself and its particles.\r\n     *\r\n     * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#pause}\r\n     * and {@link Phaser.GameObjects.Particles.ParticleEmitter#resume}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#active\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.active = true;\n    /**\r\n     * Set this to false to hide any active particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#visible\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setVisible\r\n     */\n\n    this.visible = true;\n    /**\r\n     * The blend mode of this emitter's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#blendMode\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setBlendMode\r\n     */\n\n    this.blendMode = BlendModes.NORMAL;\n    /**\r\n     * A Game Object whose position is used as the particle origin.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#follow\r\n     * @type {?Phaser.GameObjects.GameObject}\r\n     * @default null\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n     */\n\n    this.follow = null;\n    /**\r\n     * The offset of the particle origin from the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#followOffset\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     */\n\n    this.followOffset = new Vector2();\n    /**\r\n     * Whether the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#visible} state will track\r\n     * the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target's visibility state.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#trackVisible\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     */\n\n    this.trackVisible = false;\n    /**\r\n     * The current texture frame, as an index of {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#currentFrame\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.currentFrame = 0;\n    /**\r\n     * Whether texture {@link Phaser.GameObjects.Particles.ParticleEmitter#frames} are selected at random.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#randomFrame\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.randomFrame = true;\n    /**\r\n     * The number of consecutive particles that receive a single texture frame (per frame cycle).\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     */\n\n    this.frameQuantity = 1;\n    /**\r\n     * Inactive particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#dead\r\n     * @type {Phaser.GameObjects.Particles.Particle[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.dead = [];\n    /**\r\n     * Active particles\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#alive\r\n     * @type {Phaser.GameObjects.Particles.Particle[]}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.alive = [];\n    /**\r\n     * The time until the next flow cycle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#_counter\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._counter = 0;\n    /**\r\n     * Counts up to {@link Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity}.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitter#_frameCounter\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._frameCounter = 0;\n\n    if (config) {\n      this.fromJSON(config);\n    }\n  },\n\n  /**\r\n   * Merges configuration settings into the emitter's current settings.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#fromJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Settings for this emitter.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  fromJSON: function (config) {\n    if (!config) {\n      return this;\n    } //  Only update properties from their current state if they exist in the given config\n\n\n    var i = 0;\n    var key = '';\n\n    for (i = 0; i < this.configFastMap.length; i++) {\n      key = this.configFastMap[i];\n\n      if (HasValue(config, key)) {\n        this[key] = GetFastValue(config, key);\n      }\n    }\n\n    for (i = 0; i < this.configOpMap.length; i++) {\n      key = this.configOpMap[i];\n\n      if (HasValue(config, key)) {\n        this[key].loadConfig(config);\n      }\n    }\n\n    this.acceleration = this.accelerationX.propertyValue !== 0 || this.accelerationY.propertyValue !== 0;\n    this.moveTo = this.moveToX.propertyValue !== 0 || this.moveToY.propertyValue !== 0; //  Special 'speed' override\n\n    if (HasValue(config, 'speed')) {\n      this.speedX.loadConfig(config, 'speed');\n      this.speedY = null;\n    } //  If you specify speedX, speedY or moveTo then it changes the emitter from radial to a point emitter\n\n\n    if (HasAny(config, ['speedX', 'speedY']) || this.moveTo) {\n      this.radial = false;\n    } //  Special 'scale' override\n\n\n    if (HasValue(config, 'scale')) {\n      this.scaleX.loadConfig(config, 'scale');\n      this.scaleY = null;\n    }\n\n    if (HasValue(config, 'callbackScope')) {\n      var callbackScope = GetFastValue(config, 'callbackScope', null);\n      this.emitCallbackScope = callbackScope;\n      this.deathCallbackScope = callbackScope;\n    }\n\n    if (HasValue(config, 'emitZone')) {\n      this.setEmitZone(config.emitZone);\n    }\n\n    if (HasValue(config, 'deathZone')) {\n      this.setDeathZone(config.deathZone);\n    }\n\n    if (HasValue(config, 'bounds')) {\n      this.setBounds(config.bounds);\n    }\n\n    if (HasValue(config, 'followOffset')) {\n      this.followOffset.setFromObject(GetFastValue(config, 'followOffset', 0));\n    }\n\n    if (HasValue(config, 'frame')) {\n      this.setFrame(config.frame);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates a description of this emitter suitable for JSON serialization.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} [output] - An object to copy output into.\r\n   *\r\n   * @return {object} - The output object.\r\n   */\n  toJSON: function (output) {\n    if (output === undefined) {\n      output = {};\n    }\n\n    var i = 0;\n    var key = '';\n\n    for (i = 0; i < this.configFastMap.length; i++) {\n      key = this.configFastMap[i];\n      output[key] = this[key];\n    }\n\n    for (i = 0; i < this.configOpMap.length; i++) {\n      key = this.configOpMap[i];\n\n      if (this[key]) {\n        output[key] = this[key].toJSON();\n      }\n    } //  special handlers\n\n\n    if (!this.speedY) {\n      delete output.speedX;\n      output.speed = this.speedX.toJSON();\n    }\n\n    if (!this.scaleY) {\n      delete output.scaleX;\n      output.scale = this.scaleX.toJSON();\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Continuously moves the particle origin to follow a Game Object's position.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} target - The Game Object to follow.\r\n   * @param {number} [offsetX=0] - Horizontal offset of the particle origin from the Game Object.\r\n   * @param {number} [offsetY=0] - Vertical offset of the particle origin from the Game Object.\r\n   * @param {boolean} [trackVisible=false] - Whether the emitter's visible state will track the target's visible state.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  startFollow: function (target, offsetX, offsetY, trackVisible) {\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = 0;\n    }\n\n    if (trackVisible === undefined) {\n      trackVisible = false;\n    }\n\n    this.follow = target;\n    this.followOffset.set(offsetX, offsetY);\n    this.trackVisible = trackVisible;\n    return this;\n  },\n\n  /**\r\n   * Stops following a Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  stopFollow: function () {\n    this.follow = null;\n    this.followOffset.set(0, 0);\n    this.trackVisible = false;\n    return this;\n  },\n\n  /**\r\n   * Chooses a texture frame from {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Textures.Frame} The texture frame.\r\n   */\n  getFrame: function () {\n    if (this.frames.length === 1) {\n      return this.defaultFrame;\n    } else if (this.randomFrame) {\n      return GetRandom(this.frames);\n    } else {\n      var frame = this.frames[this.currentFrame];\n      this._frameCounter++;\n\n      if (this._frameCounter === this.frameQuantity) {\n        this._frameCounter = 0;\n        this.currentFrame = Wrap(this.currentFrame + 1, 0, this._frameLength);\n      }\n\n      return frame;\n    }\n  },\n  // frame: 0\n  // frame: 'red'\n  // frame: [ 0, 1, 2, 3 ]\n  // frame: [ 'red', 'green', 'blue', 'pink', 'white' ]\n  // frame: { frames: [ 'red', 'green', 'blue', 'pink', 'white' ], [cycle: bool], [quantity: int] }\n\n  /**\r\n   * Sets a pattern for assigning texture frames to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|string|integer|Phaser.Types.GameObjects.Particles.ParticleEmitterFrameConfig)} frames - One or more texture frames, or a configuration object.\r\n   * @param {boolean} [pickRandom=true] - Whether frames should be assigned at random from `frames`.\r\n   * @param {integer} [quantity=1] - The number of consecutive particles that will receive each frame.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setFrame: function (frames, pickRandom, quantity) {\n    if (pickRandom === undefined) {\n      pickRandom = true;\n    }\n\n    if (quantity === undefined) {\n      quantity = 1;\n    }\n\n    this.randomFrame = pickRandom;\n    this.frameQuantity = quantity;\n    this.currentFrame = 0;\n    this._frameCounter = 0;\n    var t = typeof frames;\n\n    if (Array.isArray(frames) || t === 'string' || t === 'number') {\n      this.manager.setEmitterFrames(frames, this);\n    } else if (t === 'object') {\n      var frameConfig = frames;\n      frames = GetFastValue(frameConfig, 'frames', null);\n\n      if (frames) {\n        this.manager.setEmitterFrames(frames, this);\n      }\n\n      var isCycle = GetFastValue(frameConfig, 'cycle', false);\n      this.randomFrame = isCycle ? false : true;\n      this.frameQuantity = GetFastValue(frameConfig, 'quantity', quantity);\n    }\n\n    this._frameLength = this.frames.length;\n\n    if (this._frameLength === 1) {\n      this.frameQuantity = 1;\n      this.randomFrame = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle movement on or off.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [value=true] - Radial mode (true) or point mode (true).\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setRadial: function (value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.radial = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of the emitter's particle origin.\r\n   * New particles will be emitted here.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} x - The x-coordinate of the particle origin.\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} y - The y-coordinate of the particle origin.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setPosition: function (x, y) {\n    this.x.onChange(x);\n    this.y.onChange(y);\n    return this;\n  },\n\n  /**\r\n   * Sets or modifies a rectangular boundary constraining the particles.\r\n   *\r\n   * To remove the boundary, set {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds} to null.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|Phaser.Types.GameObjects.Particles.ParticleEmitterBounds|Phaser.Types.GameObjects.Particles.ParticleEmitterBoundsAlt)} x - The x-coordinate of the left edge of the boundary, or an object representing a rectangle.\r\n   * @param {number} y - The y-coordinate of the top edge of the boundary.\r\n   * @param {number} width - The width of the boundary.\r\n   * @param {number} height - The height of the boundary.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setBounds: function (x, y, width, height) {\n    if (typeof x === 'object') {\n      var obj = x;\n      x = obj.x;\n      y = obj.y;\n      width = HasValue(obj, 'w') ? obj.w : obj.width;\n      height = HasValue(obj, 'h') ? obj.h : obj.height;\n    }\n\n    if (this.bounds) {\n      this.bounds.setTo(x, y, width, height);\n    } else {\n      this.bounds = new Rectangle(x, y, width, height);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the initial horizontal speed of emitted particles.\r\n   * Changes the emitter to point mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeedX: function (value) {\n    this.speedX.onChange(value); //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n    this.radial = false;\n    return this;\n  },\n\n  /**\r\n   * Sets the initial vertical speed of emitted particles.\r\n   * Changes the emitter to point mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeedY: function (value) {\n    if (this.speedY) {\n      this.speedY.onChange(value); //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n      this.radial = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the initial radial speed of emitted particles.\r\n   * Changes the emitter to radial mode.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeed\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setSpeed: function (value) {\n    this.speedX.onChange(value);\n    this.speedY = null; //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\n\n    this.radial = true;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScaleX: function (value) {\n    this.scaleX.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScaleY: function (value) {\n    this.scaleY.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the scale of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setScale: function (value) {\n    this.scaleX.onChange(value);\n    this.scaleY = null;\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravityX: function (value) {\n    this.gravityX = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the vertical gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravityY: function (value) {\n    this.gravityY = value;\n    return this;\n  },\n\n  /**\r\n   * Sets the gravity applied to emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - Horizontal acceleration due to gravity, in pixels per second squared.\r\n   * @param {number} y - Vertical acceleration due to gravity, in pixels per second squared.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setGravity: function (x, y) {\n    this.gravityX = x;\n    this.gravityY = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the opacity of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - A value between 0 (transparent) and 1 (opaque).\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setAlpha: function (value) {\n    this.alpha.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the color tint of emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setTint\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - A value between 0 and 0xffffff.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setTint: function (value) {\n    this.tint.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitterAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The angle of the initial velocity of emitted particles.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setEmitterAngle: function (value) {\n    this.angle.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The angle of the initial velocity of emitted particles.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setAngle: function (value) {\n    this.angle.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the lifespan of newly emitted particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The particle lifespan, in ms.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setLifespan: function (value) {\n    this.lifespan.onChange(value);\n    return this;\n  },\n\n  /**\r\n   * Sets the number of particles released at each flow cycle or explosion.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} quantity - The number of particles to release at each flow cycle or explosion.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setQuantity: function (quantity) {\n    this.quantity.onChange(quantity);\n    return this;\n  },\n\n  /**\r\n   * Sets the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}\r\n   * and {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms; or -1 to put the emitter in explosion mode.\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} [quantity] - The number of particles to release at each flow cycle or explosion.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setFrequency: function (frequency, quantity) {\n    this.frequency = frequency;\n    this._counter = 0;\n\n    if (quantity) {\n      this.quantity.onChange(quantity);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#emitZone}.\r\n   *\r\n   * An {@link Phaser.Types.GameObjects.Particles.ParticleEmitterEdgeZoneConfig EdgeZone} places particles on its edges. Its {@link Phaser.Types.GameObjects.Particles.EdgeZoneSource source} can be a Curve, Path, Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link Phaser.Types.GameObjects.Particles.EdgeZoneSourceCallback getPoints} method.\r\n   *\r\n   * A {@link Phaser.Types.GameObjects.Particles.ParticleEmitterRandomZoneConfig RandomZone} places randomly within its interior. Its {@link RandomZoneSource source} can be a Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link Phaser.Types.GameObjects.Particles.RandomZoneSourceCallback getRandomPoint} method.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterEdgeZoneConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterRandomZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current emit zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setEmitZone: function (zoneConfig) {\n    if (zoneConfig === undefined) {\n      this.emitZone = null;\n    } else {\n      //  Where source = Geom like Circle, or a Path or Curve\n      //  emitZone: { type: 'random', source: X }\n      //  emitZone: { type: 'edge', source: X, quantity: 32, [stepRate=0], [yoyo=false], [seamless=true] }\n      var type = GetFastValue(zoneConfig, 'type', 'random');\n      var source = GetFastValue(zoneConfig, 'source', null);\n\n      switch (type) {\n        case 'random':\n          this.emitZone = new RandomZone(source);\n          break;\n\n        case 'edge':\n          var quantity = GetFastValue(zoneConfig, 'quantity', 1);\n          var stepRate = GetFastValue(zoneConfig, 'stepRate', 0);\n          var yoyo = GetFastValue(zoneConfig, 'yoyo', false);\n          var seamless = GetFastValue(zoneConfig, 'seamless', true);\n          this.emitZone = new EdgeZone(source, quantity, stepRate, yoyo, seamless);\n          break;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#deathZone}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterDeathZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current death zone.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  setDeathZone: function (zoneConfig) {\n    if (zoneConfig === undefined) {\n      this.deathZone = null;\n    } else {\n      //  Where source = Geom like Circle or Rect that supports a 'contains' function\n      //  deathZone: { type: 'onEnter', source: X }\n      //  deathZone: { type: 'onLeave', source: X }\n      var type = GetFastValue(zoneConfig, 'type', 'onEnter');\n      var source = GetFastValue(zoneConfig, 'source', null);\n\n      if (source && typeof source.contains === 'function') {\n        var killOnEnter = type === 'onEnter' ? true : false;\n        this.deathZone = new DeathZone(source, killOnEnter);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Creates inactive particles and adds them to this emitter's pool.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#reserve\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} particleCount - The number of particles to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  reserve: function (particleCount) {\n    var dead = this.dead;\n\n    for (var i = 0; i < particleCount; i++) {\n      dead.push(new this.particleClass(this));\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Gets the number of active (in-use) particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getAliveParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles with `active=true`.\r\n   */\n  getAliveParticleCount: function () {\n    return this.alive.length;\n  },\n\n  /**\r\n   * Gets the number of inactive (available) particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getDeadParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles with `active=false`.\r\n   */\n  getDeadParticleCount: function () {\n    return this.dead.length;\n  },\n\n  /**\r\n   * Gets the total number of particles in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#getParticleCount\r\n   * @since 3.0.0\r\n   *\r\n   * @return {integer} The number of particles, including both alive and dead.\r\n   */\n  getParticleCount: function () {\n    return this.getAliveParticleCount() + this.getDeadParticleCount();\n  },\n\n  /**\r\n   * Whether this emitter is at its limit (if set).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#atLimit\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Returns `true` if this Emitter is at its limit, or `false` if no limit, or below the `maxParticles` level.\r\n   */\n  atLimit: function () {\n    return this.maxParticles > 0 && this.getParticleCount() === this.maxParticles;\n  },\n\n  /**\r\n   * Sets a function to call for each newly emitted particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleEmit\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n   * @param {*} [context] - The calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  onParticleEmit: function (callback, context) {\n    if (callback === undefined) {\n      //  Clear any previously set callback\n      this.emitCallback = null;\n      this.emitCallbackScope = null;\n    } else if (typeof callback === 'function') {\n      this.emitCallback = callback;\n\n      if (context) {\n        this.emitCallbackScope = context;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets a function to call for each particle death.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleDeath\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleDeathCallback} callback - The function.\r\n   * @param {*} [context] - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  onParticleDeath: function (callback, context) {\n    if (callback === undefined) {\n      //  Clear any previously set callback\n      this.deathCallback = null;\n      this.deathCallbackScope = null;\n    } else if (typeof callback === 'function') {\n      this.deathCallback = callback;\n\n      if (context) {\n        this.deathCallbackScope = context;\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Deactivates every particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#killAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  killAll: function () {\n    var dead = this.dead;\n    var alive = this.alive;\n\n    while (alive.length > 0) {\n      dead.push(alive.pop());\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calls a function for each active particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachAlive\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n   * @param {*} context - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  forEachAlive: function (callback, context) {\n    var alive = this.alive;\n    var length = alive.length;\n\n    for (var index = 0; index < length; ++index) {\n      //  Sends the Particle and the Emitter\n      callback.call(context, alive[index], this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calls a function for each inactive particle in this emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachDead\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n   * @param {*} context - The function's calling context.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  forEachDead: function (callback, context) {\n    var dead = this.dead;\n    var length = dead.length;\n\n    for (var index = 0; index < length; ++index) {\n      //  Sends the Particle and the Emitter\n      callback.call(context, dead[index], this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on} the emitter and resets the flow counter.\r\n   *\r\n   * If this emitter is in flow mode (frequency >= 0; the default), the particle flow will start (or restart).\r\n   *\r\n   * If this emitter is in explode mode (frequency = -1), nothing will happen.\r\n   * Use {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} or {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} instead.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#start\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  start: function () {\n    this.on = true;\n    this._counter = 0;\n    return this;\n  },\n\n  /**\r\n   * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on off} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#stop\r\n   * @since 3.11.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  stop: function () {\n    this.on = false;\n    return this;\n  },\n\n  /**\r\n   * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Deactivates} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  pause: function () {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Activates} the emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  resume: function () {\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Removes the emitter from its manager and the scene.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#remove\r\n   * @since 3.22.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  remove: function () {\n    this.manager.removeEmitter(this);\n    return this;\n  },\n\n  /**\r\n   * Sorts active particles with {@link Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback}.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSort\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  depthSort: function () {\n    StableSort.inplace(this.alive, this.depthSortCallback);\n    return this;\n  },\n\n  /**\r\n   * Puts the emitter in flow mode (frequency >= 0) and starts (or restarts) a particle flow.\r\n   *\r\n   * To resume a flow at the current frequency and quantity, use {@link Phaser.GameObjects.Particles.ParticleEmitter#start} instead.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#flow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms.\r\n   * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} [count=1] - The number of particles to emit at each flow cycle.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n   */\n  flow: function (frequency, count) {\n    if (count === undefined) {\n      count = 1;\n    }\n\n    this.frequency = frequency;\n    this.quantity.onChange(count);\n    return this.start();\n  },\n\n  /**\r\n   * Puts the emitter in explode mode (frequency = -1), stopping any current particle flow, and emits several particles all at once.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#explode\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} count - The amount of Particles to emit.\r\n   * @param {number} x - The x coordinate to emit the Particles from.\r\n   * @param {number} y - The y coordinate to emit the Particles from.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   */\n  explode: function (count, x, y) {\n    this.frequency = -1;\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Emits particles at a given position (or the emitter's current position).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticleAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n   * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n   * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   */\n  emitParticleAt: function (x, y, count) {\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Emits particles at a given position (or the emitter's current position).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n   * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n   * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n   *\r\n   * @see Phaser.GameObjects.Particles.Particle#fire\r\n   */\n  emitParticle: function (count, x, y) {\n    if (this.atLimit()) {\n      return;\n    }\n\n    if (count === undefined) {\n      count = this.quantity.onEmit();\n    }\n\n    var dead = this.dead;\n\n    for (var i = 0; i < count; i++) {\n      var particle = dead.pop();\n\n      if (!particle) {\n        particle = new this.particleClass(this);\n      }\n\n      particle.fire(x, y);\n\n      if (this.particleBringToTop) {\n        this.alive.push(particle);\n      } else {\n        this.alive.unshift(particle);\n      }\n\n      if (this.emitCallback) {\n        this.emitCallback.call(this.emitCallbackScope, particle, this);\n      }\n\n      if (this.atLimit()) {\n        break;\n      }\n    }\n\n    return particle;\n  },\n\n  /**\r\n   * Updates this emitter and its particles.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#preUpdate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  preUpdate: function (time, delta) {\n    //  Scale the delta\n    delta *= this.timeScale;\n    var step = delta / 1000;\n\n    if (this.trackVisible) {\n      this.visible = this.follow.visible;\n    } //  Any particle processors?\n\n\n    var processors = this.manager.getProcessors();\n    var particles = this.alive;\n    var dead = this.dead;\n    var i = 0;\n    var rip = [];\n    var length = particles.length;\n\n    for (i = 0; i < length; i++) {\n      var particle = particles[i]; //  update returns `true` if the particle is now dead (lifeCurrent <= 0)\n\n      if (particle.update(delta, step, processors)) {\n        rip.push({\n          index: i,\n          particle: particle\n        });\n      }\n    } //  Move dead particles to the dead array\n\n\n    length = rip.length;\n\n    if (length > 0) {\n      var deathCallback = this.deathCallback;\n      var deathCallbackScope = this.deathCallbackScope;\n\n      for (i = length - 1; i >= 0; i--) {\n        var entry = rip[i]; //  Remove from particles array\n\n        particles.splice(entry.index, 1); //  Add to dead array\n\n        dead.push(entry.particle); //  Callback\n\n        if (deathCallback) {\n          deathCallback.call(deathCallbackScope, entry.particle);\n        }\n\n        entry.particle.resetPosition();\n      }\n    }\n\n    if (!this.on) {\n      return;\n    }\n\n    if (this.frequency === 0) {\n      this.emitParticle();\n    } else if (this.frequency > 0) {\n      this._counter -= delta;\n\n      if (this._counter <= 0) {\n        this.emitParticle(); //  counter = frequency - remained from previous delta\n\n        this._counter = this.frequency - Math.abs(this._counter);\n      }\n    }\n  },\n\n  /**\r\n   * Calculates the difference of two particles, for sorting them by depth.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} a - The first particle.\r\n   * @param {object} b - The second particle.\r\n   *\r\n   * @return {integer} The difference of a and b's y coordinates.\r\n   */\n  depthSortCallback: function (a, b) {\n    return a.y - b.y;\n  }\n});\nmodule.exports = ParticleEmitter;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/ParticleEmitter.js"],"names":["BlendModes","require","Class","Components","DeathZone","EdgeZone","EmitterOp","GetFastValue","GetRandom","HasAny","HasValue","Particle","RandomZone","Rectangle","StableSort","Vector2","Wrap","ParticleEmitter","Mixins","BlendMode","Mask","ScrollFactor","Visible","initialize","manager","config","texture","frames","defaultFrame","configFastMap","configOpMap","name","particleClass","x","y","radial","gravityX","gravityY","acceleration","accelerationX","accelerationY","maxVelocityX","maxVelocityY","speedX","speedY","moveTo","moveToX","moveToY","bounce","scaleX","scaleY","tint","alpha","lifespan","angle","min","max","rotate","emitCallback","emitCallbackScope","deathCallback","deathCallbackScope","maxParticles","quantity","delay","frequency","on","particleBringToTop","timeScale","emitZone","deathZone","bounds","collideLeft","collideRight","collideTop","collideBottom","active","visible","blendMode","NORMAL","follow","followOffset","trackVisible","currentFrame","randomFrame","frameQuantity","dead","alive","_counter","_frameCounter","fromJSON","i","key","length","loadConfig","propertyValue","callbackScope","setEmitZone","setDeathZone","setBounds","setFromObject","setFrame","frame","toJSON","output","undefined","speed","scale","startFollow","target","offsetX","offsetY","set","stopFollow","getFrame","_frameLength","pickRandom","t","Array","isArray","setEmitterFrames","frameConfig","isCycle","setRadial","value","setPosition","onChange","width","height","obj","w","h","setTo","setSpeedX","setSpeedY","setSpeed","setScaleX","setScaleY","setScale","setGravityX","setGravityY","setGravity","setAlpha","setTint","setEmitterAngle","setAngle","setLifespan","setQuantity","setFrequency","zoneConfig","type","source","stepRate","yoyo","seamless","contains","killOnEnter","reserve","particleCount","push","getAliveParticleCount","getDeadParticleCount","getParticleCount","atLimit","onParticleEmit","callback","context","onParticleDeath","killAll","pop","forEachAlive","index","call","forEachDead","start","stop","pause","resume","remove","removeEmitter","depthSort","inplace","depthSortCallback","flow","count","explode","emitParticle","emitParticleAt","onEmit","particle","fire","unshift","preUpdate","time","delta","step","processors","getProcessors","particles","rip","update","entry","splice","resetPosition","Math","abs","a","b","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BlendModes = require('../../renderer/BlendModes');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar DeathZone = require('./zones/DeathZone');\r\nvar EdgeZone = require('./zones/EdgeZone');\r\nvar EmitterOp = require('./EmitterOp');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetRandom = require('../../utils/array/GetRandom');\r\nvar HasAny = require('../../utils/object/HasAny');\r\nvar HasValue = require('../../utils/object/HasValue');\r\nvar Particle = require('./Particle');\r\nvar RandomZone = require('./zones/RandomZone');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar StableSort = require('../../utils/array/StableSort');\r\nvar Vector2 = require('../../math/Vector2');\r\nvar Wrap = require('../../math/Wrap');\r\n\r\n/**\r\n * @classdesc\r\n * A particle emitter represents a single particle stream.\r\n * It controls a pool of {@link Phaser.GameObjects.Particles.Particle Particles} and is controlled by a {@link Phaser.GameObjects.Particles.ParticleEmitterManager Particle Emitter Manager}.\r\n *\r\n * @class ParticleEmitter\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitterManager} manager - The Emitter Manager this Emitter belongs to.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Settings for this emitter.\r\n */\r\nvar ParticleEmitter = new Class({\r\n\r\n    Mixins: [\r\n        Components.BlendMode,\r\n        Components.Mask,\r\n        Components.ScrollFactor,\r\n        Components.Visible\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function ParticleEmitter (manager, config)\r\n    {\r\n        /**\r\n         * The Emitter Manager this Emitter belongs to.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#manager\r\n         * @type {Phaser.GameObjects.Particles.ParticleEmitterManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The texture assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = manager.texture;\r\n\r\n        /**\r\n         * The texture frames assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frames\r\n         * @type {Phaser.Textures.Frame[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = [ manager.defaultFrame ];\r\n\r\n        /**\r\n         * The default texture frame assigned to particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#defaultFrame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFrame = manager.defaultFrame;\r\n\r\n        /**\r\n         * Names of simple configuration properties.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#configFastMap\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.configFastMap = [\r\n            'active',\r\n            'blendMode',\r\n            'collideBottom',\r\n            'collideLeft',\r\n            'collideRight',\r\n            'collideTop',\r\n            'deathCallback',\r\n            'deathCallbackScope',\r\n            'emitCallback',\r\n            'emitCallbackScope',\r\n            'follow',\r\n            'frequency',\r\n            'gravityX',\r\n            'gravityY',\r\n            'maxParticles',\r\n            'name',\r\n            'on',\r\n            'particleBringToTop',\r\n            'particleClass',\r\n            'radial',\r\n            'timeScale',\r\n            'trackVisible',\r\n            'visible'\r\n        ];\r\n\r\n        /**\r\n         * Names of complex configuration properties.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#configOpMap\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.configOpMap = [\r\n            'accelerationX',\r\n            'accelerationY',\r\n            'angle',\r\n            'alpha',\r\n            'bounce',\r\n            'delay',\r\n            'lifespan',\r\n            'maxVelocityX',\r\n            'maxVelocityY',\r\n            'moveToX',\r\n            'moveToY',\r\n            'quantity',\r\n            'rotate',\r\n            'scaleX',\r\n            'scaleY',\r\n            'speedX',\r\n            'speedY',\r\n            'tint',\r\n            'x',\r\n            'y'\r\n        ];\r\n\r\n        /**\r\n         * The name of this Particle Emitter.\r\n         *\r\n         * Empty by default and never populated by Phaser, this is left for developers to use.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * The Particle Class which will be emitted by this Emitter.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#particleClass\r\n         * @type {Phaser.GameObjects.Particles.Particle}\r\n         * @default Phaser.GameObjects.Particles.Particle\r\n         * @since 3.0.0\r\n         */\r\n        this.particleClass = Particle;\r\n\r\n        /**\r\n         * The x-coordinate of the particle origin (where particles will be emitted).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#x\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n         */\r\n        this.x = new EmitterOp(config, 'x', 0, true);\r\n\r\n        /**\r\n         * The y-coordinate of the particle origin (where particles will be emitted).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#y\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n         */\r\n        this.y = new EmitterOp(config, 'y', 0, true);\r\n\r\n        /**\r\n         * A radial emitter will emit particles in all directions between angle min and max,\r\n         * using {@link Phaser.GameObjects.Particles.ParticleEmitter#speed} as the value. If set to false then this acts as a point Emitter.\r\n         * A point emitter will emit particles only in the direction derived from the speedX and speedY values.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#radial\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n         */\r\n        this.radial = true;\r\n\r\n        /**\r\n         * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n         */\r\n        this.gravityX = 0;\r\n\r\n        /**\r\n         * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#gravityY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n         */\r\n        this.gravityY = 0;\r\n\r\n        /**\r\n         * Whether accelerationX and accelerationY are non-zero. Set automatically during configuration.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#acceleration\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.acceleration = false;\r\n\r\n        /**\r\n         * Horizontal acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationX = new EmitterOp(config, 'accelerationX', 0, true);\r\n\r\n        /**\r\n         * Vertical acceleration applied to emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#accelerationY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationY = new EmitterOp(config, 'accelerationY', 0, true);\r\n\r\n        /**\r\n         * The maximum horizontal velocity of emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityX = new EmitterOp(config, 'maxVelocityX', 10000, true);\r\n\r\n        /**\r\n         * The maximum vertical velocity of emitted particles, in pixels per second squared.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxVelocityY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityY = new EmitterOp(config, 'maxVelocityY', 10000, true);\r\n\r\n        /**\r\n         * The initial horizontal speed of emitted particles, in pixels per second.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#speedX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n         */\r\n        this.speedX = new EmitterOp(config, 'speedX', 0, true);\r\n\r\n        /**\r\n         * The initial vertical speed of emitted particles, in pixels per second.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#speedY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n         */\r\n        this.speedY = new EmitterOp(config, 'speedY', 0, true);\r\n\r\n        /**\r\n         * Whether moveToX and moveToY are nonzero. Set automatically during configuration.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveTo\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.moveTo = false;\r\n\r\n        /**\r\n         * The x-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveToX = new EmitterOp(config, 'moveToX', 0, true);\r\n\r\n        /**\r\n         * The y-coordinate emitted particles move toward, when {@link Phaser.GameObjects.Particles.ParticleEmitter#moveTo} is true.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#moveToY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveToY = new EmitterOp(config, 'moveToY', 0, true);\r\n\r\n        /**\r\n         * Whether particles will rebound when they meet the emitter bounds.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#bounce\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bounce = new EmitterOp(config, 'bounce', 0, true);\r\n\r\n        /**\r\n         * The horizontal scale of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleX\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n         */\r\n        this.scaleX = new EmitterOp(config, 'scaleX', 1);\r\n\r\n        /**\r\n         * The vertical scale of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#scaleY\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n         */\r\n        this.scaleY = new EmitterOp(config, 'scaleY', 1);\r\n\r\n        /**\r\n         * Color tint applied to emitted particles. Any alpha component (0xAA000000) is ignored.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#tint\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0xffffffff\r\n         * @since 3.0.0\r\n         */\r\n        this.tint = new EmitterOp(config, 'tint', 0xffffffff);\r\n\r\n        /**\r\n         * The alpha (transparency) of emitted particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#alpha\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n         */\r\n        this.alpha = new EmitterOp(config, 'alpha', 1);\r\n\r\n        /**\r\n         * The lifespan of emitted particles, in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#lifespan\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n         */\r\n        this.lifespan = new EmitterOp(config, 'lifespan', 1000, true);\r\n\r\n        /**\r\n         * The angle of the initial velocity of emitted particles, in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#angle\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default { min: 0, max: 360 }\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n         */\r\n        this.angle = new EmitterOp(config, 'angle', { min: 0, max: 360 }, true);\r\n\r\n        /**\r\n         * The rotation of emitted particles, in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#rotate\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rotate = new EmitterOp(config, 'rotate', 0);\r\n\r\n        /**\r\n         * A function to call when a particle is emitted.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallback\r\n         * @type {?Phaser.Types.GameObjects.Particles.ParticleEmitterCallback}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.emitCallback = null;\r\n\r\n        /**\r\n         * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#emitCallback}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitCallbackScope\r\n         * @type {?*}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.emitCallbackScope = null;\r\n\r\n        /**\r\n         * A function to call when a particle dies.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallback\r\n         * @type {?Phaser.Types.GameObjects.Particles.ParticleDeathCallback}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.deathCallback = null;\r\n\r\n        /**\r\n         * The calling context for {@link Phaser.GameObjects.Particles.ParticleEmitter#deathCallback}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathCallbackScope\r\n         * @type {?*}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.deathCallbackScope = null;\r\n\r\n        /**\r\n         * Set to hard limit the amount of particle objects this emitter is allowed to create.\r\n         * 0 means unlimited.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#maxParticles\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxParticles = 0;\r\n\r\n        /**\r\n         * How many particles are emitted each time particles are emitted (one explosion or one flow cycle).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#quantity\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n         */\r\n        this.quantity = new EmitterOp(config, 'quantity', 1, true);\r\n\r\n        /**\r\n         * How many ms to wait after emission before the particles start updating.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#delay\r\n         * @type {Phaser.GameObjects.Particles.EmitterOp}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delay = new EmitterOp(config, 'delay', 0, true);\r\n\r\n        /**\r\n         * For a flow emitter, the time interval (>= 0) between particle flow cycles in ms.\r\n         * A value of 0 means there is one particle flow cycle for each logic update (the maximum flow frequency). This is the default setting.\r\n         * For an exploding emitter, this value will be -1.\r\n         * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} also puts the emitter in flow mode (frequency >= 0).\r\n         * Calling {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} also puts the emitter in explode mode (frequency = -1).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frequency\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n         */\r\n        this.frequency = 0;\r\n\r\n        /**\r\n         * Controls if the emitter is currently emitting a particle flow (when frequency >= 0).\r\n         * Already alive particles will continue to update until they expire.\r\n         * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#start} and {@link Phaser.GameObjects.Particles.ParticleEmitter#stop}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#on\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.on = true;\r\n\r\n        /**\r\n         * Newly emitted particles are added to the top of the particle list, i.e. rendered above those already alive.\r\n         * Set to false to send them to the back.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#particleBringToTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.particleBringToTop = true;\r\n\r\n        /**\r\n         * The time rate applied to active particles, affecting lifespan, movement, and tweens. Values larger than 1 are faster than normal.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * An object describing a shape to emit particles from.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#emitZone\r\n         * @type {?Phaser.GameObjects.Particles.Zones.EdgeZone|Phaser.GameObjects.Particles.Zones.RandomZone}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n         */\r\n        this.emitZone = null;\r\n\r\n        /**\r\n         * An object describing a shape that deactivates particles when they interact with it.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#deathZone\r\n         * @type {?Phaser.GameObjects.Particles.Zones.DeathZone}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n         */\r\n        this.deathZone = null;\r\n\r\n        /**\r\n         * A rectangular boundary constraining particle movement.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#bounds\r\n         * @type {?Phaser.Geom.Rectangle}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n         */\r\n        this.bounds = null;\r\n\r\n        /**\r\n         * Whether particles interact with the left edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideLeft\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideLeft = true;\r\n\r\n        /**\r\n         * Whether particles interact with the right edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideRight\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideRight = true;\r\n\r\n        /**\r\n         * Whether particles interact with the top edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideTop = true;\r\n\r\n        /**\r\n         * Whether particles interact with the bottom edge of the emitter {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#collideBottom\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.collideBottom = true;\r\n\r\n        /**\r\n         * Whether this emitter updates itself and its particles.\r\n         *\r\n         * Controlled by {@link Phaser.GameObjects.Particles.ParticleEmitter#pause}\r\n         * and {@link Phaser.GameObjects.Particles.ParticleEmitter#resume}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#active\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.active = true;\r\n\r\n        /**\r\n         * Set this to false to hide any active particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setVisible\r\n         */\r\n        this.visible = true;\r\n\r\n        /**\r\n         * The blend mode of this emitter's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#blendMode\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setBlendMode\r\n         */\r\n        this.blendMode = BlendModes.NORMAL;\r\n\r\n        /**\r\n         * A Game Object whose position is used as the particle origin.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#follow\r\n         * @type {?Phaser.GameObjects.GameObject}\r\n         * @default null\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n         */\r\n        this.follow = null;\r\n\r\n        /**\r\n         * The offset of the particle origin from the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#followOffset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         */\r\n        this.followOffset = new Vector2();\r\n\r\n        /**\r\n         * Whether the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#visible} state will track\r\n         * the {@link Phaser.GameObjects.Particles.ParticleEmitter#follow} target's visibility state.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#trackVisible\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n         */\r\n        this.trackVisible = false;\r\n\r\n        /**\r\n         * The current texture frame, as an index of {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#currentFrame\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.currentFrame = 0;\r\n\r\n        /**\r\n         * Whether texture {@link Phaser.GameObjects.Particles.ParticleEmitter#frames} are selected at random.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#randomFrame\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.randomFrame = true;\r\n\r\n        /**\r\n         * The number of consecutive particles that receive a single texture frame (per frame cycle).\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         * @see Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n         */\r\n        this.frameQuantity = 1;\r\n\r\n        /**\r\n         * Inactive particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#dead\r\n         * @type {Phaser.GameObjects.Particles.Particle[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.dead = [];\r\n\r\n        /**\r\n         * Active particles\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#alive\r\n         * @type {Phaser.GameObjects.Particles.Particle[]}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.alive = [];\r\n\r\n        /**\r\n         * The time until the next flow cycle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#_counter\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._counter = 0;\r\n\r\n        /**\r\n         * Counts up to {@link Phaser.GameObjects.Particles.ParticleEmitter#frameQuantity}.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitter#_frameCounter\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._frameCounter = 0;\r\n\r\n        if (config)\r\n        {\r\n            this.fromJSON(config);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Merges configuration settings into the emitter's current settings.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#fromJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Settings for this emitter.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    fromJSON: function (config)\r\n    {\r\n        if (!config)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        //  Only update properties from their current state if they exist in the given config\r\n\r\n        var i = 0;\r\n        var key = '';\r\n\r\n        for (i = 0; i < this.configFastMap.length; i++)\r\n        {\r\n            key = this.configFastMap[i];\r\n\r\n            if (HasValue(config, key))\r\n            {\r\n                this[key] = GetFastValue(config, key);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < this.configOpMap.length; i++)\r\n        {\r\n            key = this.configOpMap[i];\r\n\r\n            if (HasValue(config, key))\r\n            {\r\n                this[key].loadConfig(config);\r\n            }\r\n        }\r\n\r\n        this.acceleration = (this.accelerationX.propertyValue !== 0 || this.accelerationY.propertyValue !== 0);\r\n\r\n        this.moveTo = (this.moveToX.propertyValue !== 0 || this.moveToY.propertyValue !== 0);\r\n\r\n        //  Special 'speed' override\r\n\r\n        if (HasValue(config, 'speed'))\r\n        {\r\n            this.speedX.loadConfig(config, 'speed');\r\n            this.speedY = null;\r\n        }\r\n\r\n        //  If you specify speedX, speedY or moveTo then it changes the emitter from radial to a point emitter\r\n        if (HasAny(config, [ 'speedX', 'speedY' ]) || this.moveTo)\r\n        {\r\n            this.radial = false;\r\n        }\r\n\r\n        //  Special 'scale' override\r\n\r\n        if (HasValue(config, 'scale'))\r\n        {\r\n            this.scaleX.loadConfig(config, 'scale');\r\n            this.scaleY = null;\r\n        }\r\n\r\n        if (HasValue(config, 'callbackScope'))\r\n        {\r\n            var callbackScope = GetFastValue(config, 'callbackScope', null);\r\n\r\n            this.emitCallbackScope = callbackScope;\r\n            this.deathCallbackScope = callbackScope;\r\n        }\r\n\r\n        if (HasValue(config, 'emitZone'))\r\n        {\r\n            this.setEmitZone(config.emitZone);\r\n        }\r\n\r\n        if (HasValue(config, 'deathZone'))\r\n        {\r\n            this.setDeathZone(config.deathZone);\r\n        }\r\n\r\n        if (HasValue(config, 'bounds'))\r\n        {\r\n            this.setBounds(config.bounds);\r\n        }\r\n\r\n        if (HasValue(config, 'followOffset'))\r\n        {\r\n            this.followOffset.setFromObject(GetFastValue(config, 'followOffset', 0));\r\n        }\r\n\r\n        if (HasValue(config, 'frame'))\r\n        {\r\n            this.setFrame(config.frame);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a description of this emitter suitable for JSON serialization.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} [output] - An object to copy output into.\r\n     *\r\n     * @return {object} - The output object.\r\n     */\r\n    toJSON: function (output)\r\n    {\r\n        if (output === undefined) { output = {}; }\r\n\r\n        var i = 0;\r\n        var key = '';\r\n\r\n        for (i = 0; i < this.configFastMap.length; i++)\r\n        {\r\n            key = this.configFastMap[i];\r\n\r\n            output[key] = this[key];\r\n        }\r\n\r\n        for (i = 0; i < this.configOpMap.length; i++)\r\n        {\r\n            key = this.configOpMap[i];\r\n\r\n            if (this[key])\r\n            {\r\n                output[key] = this[key].toJSON();\r\n            }\r\n        }\r\n\r\n        //  special handlers\r\n        if (!this.speedY)\r\n        {\r\n            delete output.speedX;\r\n            output.speed = this.speedX.toJSON();\r\n        }\r\n\r\n        if (!this.scaleY)\r\n        {\r\n            delete output.scaleX;\r\n            output.scale = this.scaleX.toJSON();\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Continuously moves the particle origin to follow a Game Object's position.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#startFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} target - The Game Object to follow.\r\n     * @param {number} [offsetX=0] - Horizontal offset of the particle origin from the Game Object.\r\n     * @param {number} [offsetY=0] - Vertical offset of the particle origin from the Game Object.\r\n     * @param {boolean} [trackVisible=false] - Whether the emitter's visible state will track the target's visible state.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    startFollow: function (target, offsetX, offsetY, trackVisible)\r\n    {\r\n        if (offsetX === undefined) { offsetX = 0; }\r\n        if (offsetY === undefined) { offsetY = 0; }\r\n        if (trackVisible === undefined) { trackVisible = false; }\r\n\r\n        this.follow = target;\r\n        this.followOffset.set(offsetX, offsetY);\r\n        this.trackVisible = trackVisible;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops following a Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#stopFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    stopFollow: function ()\r\n    {\r\n        this.follow = null;\r\n        this.followOffset.set(0, 0);\r\n        this.trackVisible = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Chooses a texture frame from {@link Phaser.GameObjects.Particles.ParticleEmitter#frames}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Textures.Frame} The texture frame.\r\n     */\r\n    getFrame: function ()\r\n    {\r\n        if (this.frames.length === 1)\r\n        {\r\n            return this.defaultFrame;\r\n        }\r\n        else if (this.randomFrame)\r\n        {\r\n            return GetRandom(this.frames);\r\n        }\r\n        else\r\n        {\r\n            var frame = this.frames[this.currentFrame];\r\n\r\n            this._frameCounter++;\r\n\r\n            if (this._frameCounter === this.frameQuantity)\r\n            {\r\n                this._frameCounter = 0;\r\n                this.currentFrame = Wrap(this.currentFrame + 1, 0, this._frameLength);\r\n            }\r\n\r\n            return frame;\r\n        }\r\n    },\r\n\r\n    // frame: 0\r\n    // frame: 'red'\r\n    // frame: [ 0, 1, 2, 3 ]\r\n    // frame: [ 'red', 'green', 'blue', 'pink', 'white' ]\r\n    // frame: { frames: [ 'red', 'green', 'blue', 'pink', 'white' ], [cycle: bool], [quantity: int] }\r\n\r\n    /**\r\n     * Sets a pattern for assigning texture frames to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|string|integer|Phaser.Types.GameObjects.Particles.ParticleEmitterFrameConfig)} frames - One or more texture frames, or a configuration object.\r\n     * @param {boolean} [pickRandom=true] - Whether frames should be assigned at random from `frames`.\r\n     * @param {integer} [quantity=1] - The number of consecutive particles that will receive each frame.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setFrame: function (frames, pickRandom, quantity)\r\n    {\r\n        if (pickRandom === undefined) { pickRandom = true; }\r\n        if (quantity === undefined) { quantity = 1; }\r\n\r\n        this.randomFrame = pickRandom;\r\n        this.frameQuantity = quantity;\r\n        this.currentFrame = 0;\r\n        this._frameCounter = 0;\r\n\r\n        var t = typeof (frames);\r\n\r\n        if (Array.isArray(frames) || t === 'string' || t === 'number')\r\n        {\r\n            this.manager.setEmitterFrames(frames, this);\r\n        }\r\n        else if (t === 'object')\r\n        {\r\n            var frameConfig = frames;\r\n\r\n            frames = GetFastValue(frameConfig, 'frames', null);\r\n\r\n            if (frames)\r\n            {\r\n                this.manager.setEmitterFrames(frames, this);\r\n            }\r\n\r\n            var isCycle = GetFastValue(frameConfig, 'cycle', false);\r\n\r\n            this.randomFrame = (isCycle) ? false : true;\r\n\r\n            this.frameQuantity = GetFastValue(frameConfig, 'quantity', quantity);\r\n        }\r\n\r\n        this._frameLength = this.frames.length;\r\n\r\n        if (this._frameLength === 1)\r\n        {\r\n            this.frameQuantity = 1;\r\n            this.randomFrame = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle movement on or off.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setRadial\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [value=true] - Radial mode (true) or point mode (true).\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setRadial: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.radial = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of the emitter's particle origin.\r\n     * New particles will be emitted here.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} x - The x-coordinate of the particle origin.\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} y - The y-coordinate of the particle origin.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        this.x.onChange(x);\r\n        this.y.onChange(y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or modifies a rectangular boundary constraining the particles.\r\n     *\r\n     * To remove the boundary, set {@link Phaser.GameObjects.Particles.ParticleEmitter#bounds} to null.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|Phaser.Types.GameObjects.Particles.ParticleEmitterBounds|Phaser.Types.GameObjects.Particles.ParticleEmitterBoundsAlt)} x - The x-coordinate of the left edge of the boundary, or an object representing a rectangle.\r\n     * @param {number} y - The y-coordinate of the top edge of the boundary.\r\n     * @param {number} width - The width of the boundary.\r\n     * @param {number} height - The height of the boundary.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setBounds: function (x, y, width, height)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            var obj = x;\r\n\r\n            x = obj.x;\r\n            y = obj.y;\r\n            width = (HasValue(obj, 'w')) ? obj.w : obj.width;\r\n            height = (HasValue(obj, 'h')) ? obj.h : obj.height;\r\n        }\r\n\r\n        if (this.bounds)\r\n        {\r\n            this.bounds.setTo(x, y, width, height);\r\n        }\r\n        else\r\n        {\r\n            this.bounds = new Rectangle(x, y, width, height);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial horizontal speed of emitted particles.\r\n     * Changes the emitter to point mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeedX: function (value)\r\n    {\r\n        this.speedX.onChange(value);\r\n\r\n        //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n        this.radial = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial vertical speed of emitted particles.\r\n     * Changes the emitter to point mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeedY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeedY: function (value)\r\n    {\r\n        if (this.speedY)\r\n        {\r\n            this.speedY.onChange(value);\r\n\r\n            //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n            this.radial = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the initial radial speed of emitted particles.\r\n     * Changes the emitter to radial mode.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setSpeed\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The speed, in pixels per second.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setSpeed: function (value)\r\n    {\r\n        this.speedX.onChange(value);\r\n        this.speedY = null;\r\n\r\n        //  If you specify speedX and Y then it changes the emitter from radial to a point emitter\r\n        this.radial = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScaleX: function (value)\r\n    {\r\n        this.scaleX.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScaleY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScaleY: function (value)\r\n    {\r\n        this.scaleY.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the scale of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - The scale, relative to 1.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setScale: function (value)\r\n    {\r\n        this.scaleX.onChange(value);\r\n        this.scaleY = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravityX: function (value)\r\n    {\r\n        this.gravityX = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the vertical gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - Acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravityY: function (value)\r\n    {\r\n        this.gravityY = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the gravity applied to emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setGravity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - Horizontal acceleration due to gravity, in pixels per second squared.\r\n     * @param {number} y - Vertical acceleration due to gravity, in pixels per second squared.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setGravity: function (x, y)\r\n    {\r\n        this.gravityX = x;\r\n        this.gravityY = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the opacity of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - A value between 0 (transparent) and 1 (opaque).\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setAlpha: function (value)\r\n    {\r\n        this.alpha.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the color tint of emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setTint\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType|Phaser.Types.GameObjects.Particles.EmitterOpOnUpdateType)} value - A value between 0 and 0xffffff.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setTint: function (value)\r\n    {\r\n        this.tint.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitterAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The angle of the initial velocity of emitted particles.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setEmitterAngle: function (value)\r\n    {\r\n        this.angle.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angle of a {@link Phaser.GameObjects.Particles.ParticleEmitter#radial} particle stream.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setAngle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The angle of the initial velocity of emitted particles.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setAngle: function (value)\r\n    {\r\n        this.angle.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the lifespan of newly emitted particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setLifespan\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} value - The particle lifespan, in ms.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setLifespan: function (value)\r\n    {\r\n        this.lifespan.onChange(value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the number of particles released at each flow cycle or explosion.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setQuantity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} quantity - The number of particles to release at each flow cycle or explosion.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setQuantity: function (quantity)\r\n    {\r\n        this.quantity.onChange(quantity);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the emitter's {@link Phaser.GameObjects.Particles.ParticleEmitter#frequency}\r\n     * and {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setFrequency\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms; or -1 to put the emitter in explosion mode.\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} [quantity] - The number of particles to release at each flow cycle or explosion.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setFrequency: function (frequency, quantity)\r\n    {\r\n        this.frequency = frequency;\r\n\r\n        this._counter = 0;\r\n\r\n        if (quantity)\r\n        {\r\n            this.quantity.onChange(quantity);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#emitZone}.\r\n     *\r\n     * An {@link Phaser.Types.GameObjects.Particles.ParticleEmitterEdgeZoneConfig EdgeZone} places particles on its edges. Its {@link Phaser.Types.GameObjects.Particles.EdgeZoneSource source} can be a Curve, Path, Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link Phaser.Types.GameObjects.Particles.EdgeZoneSourceCallback getPoints} method.\r\n     *\r\n     * A {@link Phaser.Types.GameObjects.Particles.ParticleEmitterRandomZoneConfig RandomZone} places randomly within its interior. Its {@link RandomZoneSource source} can be a Circle, Ellipse, Line, Polygon, Rectangle, or Triangle; or any object with a suitable {@link Phaser.Types.GameObjects.Particles.RandomZoneSourceCallback getRandomPoint} method.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setEmitZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterEdgeZoneConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterRandomZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current emit zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setEmitZone: function (zoneConfig)\r\n    {\r\n        if (zoneConfig === undefined)\r\n        {\r\n            this.emitZone = null;\r\n        }\r\n        else\r\n        {\r\n            //  Where source = Geom like Circle, or a Path or Curve\r\n            //  emitZone: { type: 'random', source: X }\r\n            //  emitZone: { type: 'edge', source: X, quantity: 32, [stepRate=0], [yoyo=false], [seamless=true] }\r\n\r\n            var type = GetFastValue(zoneConfig, 'type', 'random');\r\n            var source = GetFastValue(zoneConfig, 'source', null);\r\n\r\n            switch (type)\r\n            {\r\n                case 'random':\r\n\r\n                    this.emitZone = new RandomZone(source);\r\n\r\n                    break;\r\n\r\n                case 'edge':\r\n\r\n                    var quantity = GetFastValue(zoneConfig, 'quantity', 1);\r\n                    var stepRate = GetFastValue(zoneConfig, 'stepRate', 0);\r\n                    var yoyo = GetFastValue(zoneConfig, 'yoyo', false);\r\n                    var seamless = GetFastValue(zoneConfig, 'seamless', true);\r\n\r\n                    this.emitZone = new EdgeZone(source, quantity, stepRate, yoyo, seamless);\r\n\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets or removes the {@link Phaser.GameObjects.Particles.ParticleEmitter#deathZone}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#setDeathZone\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterDeathZoneConfig} [zoneConfig] - An object describing the zone, or `undefined` to remove any current death zone.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    setDeathZone: function (zoneConfig)\r\n    {\r\n        if (zoneConfig === undefined)\r\n        {\r\n            this.deathZone = null;\r\n        }\r\n        else\r\n        {\r\n            //  Where source = Geom like Circle or Rect that supports a 'contains' function\r\n            //  deathZone: { type: 'onEnter', source: X }\r\n            //  deathZone: { type: 'onLeave', source: X }\r\n\r\n            var type = GetFastValue(zoneConfig, 'type', 'onEnter');\r\n            var source = GetFastValue(zoneConfig, 'source', null);\r\n\r\n            if (source && typeof source.contains === 'function')\r\n            {\r\n                var killOnEnter = (type === 'onEnter') ? true : false;\r\n\r\n                this.deathZone = new DeathZone(source, killOnEnter);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates inactive particles and adds them to this emitter's pool.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#reserve\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} particleCount - The number of particles to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    reserve: function (particleCount)\r\n    {\r\n        var dead = this.dead;\r\n\r\n        for (var i = 0; i < particleCount; i++)\r\n        {\r\n            dead.push(new this.particleClass(this));\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets the number of active (in-use) particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getAliveParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles with `active=true`.\r\n     */\r\n    getAliveParticleCount: function ()\r\n    {\r\n        return this.alive.length;\r\n    },\r\n\r\n    /**\r\n     * Gets the number of inactive (available) particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getDeadParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles with `active=false`.\r\n     */\r\n    getDeadParticleCount: function ()\r\n    {\r\n        return this.dead.length;\r\n    },\r\n\r\n    /**\r\n     * Gets the total number of particles in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#getParticleCount\r\n     * @since 3.0.0\r\n     *\r\n     * @return {integer} The number of particles, including both alive and dead.\r\n     */\r\n    getParticleCount: function ()\r\n    {\r\n        return this.getAliveParticleCount() + this.getDeadParticleCount();\r\n    },\r\n\r\n    /**\r\n     * Whether this emitter is at its limit (if set).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#atLimit\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Returns `true` if this Emitter is at its limit, or `false` if no limit, or below the `maxParticles` level.\r\n     */\r\n    atLimit: function ()\r\n    {\r\n        return (this.maxParticles > 0 && this.getParticleCount() === this.maxParticles);\r\n    },\r\n\r\n    /**\r\n     * Sets a function to call for each newly emitted particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleEmit\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n     * @param {*} [context] - The calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    onParticleEmit: function (callback, context)\r\n    {\r\n        if (callback === undefined)\r\n        {\r\n            //  Clear any previously set callback\r\n            this.emitCallback = null;\r\n            this.emitCallbackScope = null;\r\n        }\r\n        else if (typeof callback === 'function')\r\n        {\r\n            this.emitCallback = callback;\r\n\r\n            if (context)\r\n            {\r\n                this.emitCallbackScope = context;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a function to call for each particle death.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#onParticleDeath\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleDeathCallback} callback - The function.\r\n     * @param {*} [context] - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    onParticleDeath: function (callback, context)\r\n    {\r\n        if (callback === undefined)\r\n        {\r\n            //  Clear any previously set callback\r\n            this.deathCallback = null;\r\n            this.deathCallbackScope = null;\r\n        }\r\n        else if (typeof callback === 'function')\r\n        {\r\n            this.deathCallback = callback;\r\n\r\n            if (context)\r\n            {\r\n                this.deathCallbackScope = context;\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Deactivates every particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#killAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    killAll: function ()\r\n    {\r\n        var dead = this.dead;\r\n        var alive = this.alive;\r\n\r\n        while (alive.length > 0)\r\n        {\r\n            dead.push(alive.pop());\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calls a function for each active particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachAlive\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n     * @param {*} context - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    forEachAlive: function (callback, context)\r\n    {\r\n        var alive = this.alive;\r\n        var length = alive.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            //  Sends the Particle and the Emitter\r\n            callback.call(context, alive[index], this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calls a function for each inactive particle in this emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#forEachDead\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterCallback} callback - The function.\r\n     * @param {*} context - The function's calling context.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    forEachDead: function (callback, context)\r\n    {\r\n        var dead = this.dead;\r\n        var length = dead.length;\r\n\r\n        for (var index = 0; index < length; ++index)\r\n        {\r\n            //  Sends the Particle and the Emitter\r\n            callback.call(context, dead[index], this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on} the emitter and resets the flow counter.\r\n     *\r\n     * If this emitter is in flow mode (frequency >= 0; the default), the particle flow will start (or restart).\r\n     *\r\n     * If this emitter is in explode mode (frequency = -1), nothing will happen.\r\n     * Use {@link Phaser.GameObjects.Particles.ParticleEmitter#explode} or {@link Phaser.GameObjects.Particles.ParticleEmitter#flow} instead.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#start\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    start: function ()\r\n    {\r\n        this.on = true;\r\n\r\n        this._counter = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Turns {@link Phaser.GameObjects.Particles.ParticleEmitter#on off} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#stop\r\n     * @since 3.11.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.on = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Deactivates} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * {@link Phaser.GameObjects.Particles.ParticleEmitter#active Activates} the emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the emitter from its manager and the scene.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#remove\r\n     * @since 3.22.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    remove: function ()\r\n    {\r\n        this.manager.removeEmitter(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sorts active particles with {@link Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback}.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSort\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    depthSort: function ()\r\n    {\r\n        StableSort.inplace(this.alive, this.depthSortCallback);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Puts the emitter in flow mode (frequency >= 0) and starts (or restarts) a particle flow.\r\n     *\r\n     * To resume a flow at the current frequency and quantity, use {@link Phaser.GameObjects.Particles.ParticleEmitter#start} instead.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#flow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} frequency - The time interval (>= 0) of each flow cycle, in ms.\r\n     * @param {Phaser.Types.GameObjects.Particles.EmitterOpOnEmitType} [count=1] - The number of particles to emit at each flow cycle.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} This Particle Emitter.\r\n     */\r\n    flow: function (frequency, count)\r\n    {\r\n        if (count === undefined) { count = 1; }\r\n\r\n        this.frequency = frequency;\r\n\r\n        this.quantity.onChange(count);\r\n\r\n        return this.start();\r\n    },\r\n\r\n    /**\r\n     * Puts the emitter in explode mode (frequency = -1), stopping any current particle flow, and emits several particles all at once.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#explode\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} count - The amount of Particles to emit.\r\n     * @param {number} x - The x coordinate to emit the Particles from.\r\n     * @param {number} y - The y coordinate to emit the Particles from.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     */\r\n    explode: function (count, x, y)\r\n    {\r\n        this.frequency = -1;\r\n\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Emits particles at a given position (or the emitter's current position).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticleAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n     * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n     * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     */\r\n    emitParticleAt: function (x, y, count)\r\n    {\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Emits particles at a given position (or the emitter's current position).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#emitParticle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [count=this.quantity] - The number of Particles to emit.\r\n     * @param {number} [x=this.x] - The x coordinate to emit the Particles from.\r\n     * @param {number} [y=this.x] - The y coordinate to emit the Particles from.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.Particle} The most recently emitted Particle.\r\n     *\r\n     * @see Phaser.GameObjects.Particles.Particle#fire\r\n     */\r\n    emitParticle: function (count, x, y)\r\n    {\r\n        if (this.atLimit())\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (count === undefined)\r\n        {\r\n            count = this.quantity.onEmit();\r\n        }\r\n\r\n        var dead = this.dead;\r\n\r\n        for (var i = 0; i < count; i++)\r\n        {\r\n            var particle = dead.pop();\r\n\r\n            if (!particle)\r\n            {\r\n                particle = new this.particleClass(this);\r\n            }\r\n\r\n            particle.fire(x, y);\r\n\r\n            if (this.particleBringToTop)\r\n            {\r\n                this.alive.push(particle);\r\n            }\r\n            else\r\n            {\r\n                this.alive.unshift(particle);\r\n            }\r\n\r\n            if (this.emitCallback)\r\n            {\r\n                this.emitCallback.call(this.emitCallbackScope, particle, this);\r\n            }\r\n\r\n            if (this.atLimit())\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return particle;\r\n    },\r\n\r\n    /**\r\n     * Updates this emitter and its particles.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        //  Scale the delta\r\n        delta *= this.timeScale;\r\n\r\n        var step = (delta / 1000);\r\n\r\n        if (this.trackVisible)\r\n        {\r\n            this.visible = this.follow.visible;\r\n        }\r\n\r\n        //  Any particle processors?\r\n        var processors = this.manager.getProcessors();\r\n\r\n        var particles = this.alive;\r\n        var dead = this.dead;\r\n\r\n        var i = 0;\r\n        var rip = [];\r\n        var length = particles.length;\r\n\r\n        for (i = 0; i < length; i++)\r\n        {\r\n            var particle = particles[i];\r\n\r\n            //  update returns `true` if the particle is now dead (lifeCurrent <= 0)\r\n            if (particle.update(delta, step, processors))\r\n            {\r\n                rip.push({ index: i, particle: particle });\r\n            }\r\n        }\r\n\r\n        //  Move dead particles to the dead array\r\n        length = rip.length;\r\n\r\n        if (length > 0)\r\n        {\r\n            var deathCallback = this.deathCallback;\r\n            var deathCallbackScope = this.deathCallbackScope;\r\n\r\n            for (i = length - 1; i >= 0; i--)\r\n            {\r\n                var entry = rip[i];\r\n\r\n                //  Remove from particles array\r\n                particles.splice(entry.index, 1);\r\n\r\n                //  Add to dead array\r\n                dead.push(entry.particle);\r\n\r\n                //  Callback\r\n                if (deathCallback)\r\n                {\r\n                    deathCallback.call(deathCallbackScope, entry.particle);\r\n                }\r\n\r\n                entry.particle.resetPosition();\r\n            }\r\n        }\r\n\r\n        if (!this.on)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (this.frequency === 0)\r\n        {\r\n            this.emitParticle();\r\n        }\r\n        else if (this.frequency > 0)\r\n        {\r\n            this._counter -= delta;\r\n\r\n            if (this._counter <= 0)\r\n            {\r\n                this.emitParticle();\r\n\r\n                //  counter = frequency - remained from previous delta\r\n                this._counter = (this.frequency - Math.abs(this._counter));\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Calculates the difference of two particles, for sorting them by depth.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitter#depthSortCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} a - The first particle.\r\n     * @param {object} b - The second particle.\r\n     *\r\n     * @return {integer} The difference of a and b's y coordinates.\r\n     */\r\n    depthSortCallback: function (a, b)\r\n    {\r\n        return a.y - b.y;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ParticleEmitter;\r\n"]},"metadata":{},"sourceType":"script"}