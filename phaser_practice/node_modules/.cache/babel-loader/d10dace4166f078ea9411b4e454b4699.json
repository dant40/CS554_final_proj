{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar RoundAwayFromZero = require('../../math/RoundAwayFromZero');\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n * \r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @function Phaser.Utils.Array.NumberArrayStep\r\n * @since 3.0.0\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\n\n\nvar NumberArrayStep = function (start, end, step) {\n  if (start === undefined) {\n    start = 0;\n  }\n\n  if (end === undefined) {\n    end = null;\n  }\n\n  if (step === undefined) {\n    step = 1;\n  }\n\n  if (end === null) {\n    end = start;\n    start = 0;\n  }\n\n  var result = [];\n  var total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\n\n  for (var i = 0; i < total; i++) {\n    result.push(start);\n    start += step;\n  }\n\n  return result;\n};\n\nmodule.exports = NumberArrayStep;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/NumberArrayStep.js"],"names":["RoundAwayFromZero","require","NumberArrayStep","start","end","step","undefined","result","total","Math","max","i","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,8BAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,IAAIC,eAAe,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,IAAtB,EACtB;AACI,MAAIF,KAAK,KAAKG,SAAd,EAAyB;AAAEH,IAAAA,KAAK,GAAG,CAAR;AAAY;;AACvC,MAAIC,GAAG,KAAKE,SAAZ,EAAuB;AAAEF,IAAAA,GAAG,GAAG,IAAN;AAAa;;AACtC,MAAIC,IAAI,KAAKC,SAAb,EAAwB;AAAED,IAAAA,IAAI,GAAG,CAAP;AAAW;;AAErC,MAAID,GAAG,KAAK,IAAZ,EACA;AACIA,IAAAA,GAAG,GAAGD,KAAN;AACAA,IAAAA,KAAK,GAAG,CAAR;AACH;;AAED,MAAII,MAAM,GAAG,EAAb;AAEA,MAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASV,iBAAiB,CAAC,CAACI,GAAG,GAAGD,KAAP,KAAiBE,IAAI,IAAI,CAAzB,CAAD,CAA1B,EAAyD,CAAzD,CAAZ;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAApB,EAA2BG,CAAC,EAA5B,EACA;AACIJ,IAAAA,MAAM,CAACK,IAAP,CAAYT,KAAZ;AACAA,IAAAA,KAAK,IAAIE,IAAT;AACH;;AAED,SAAOE,MAAP;AACH,CAvBD;;AAyBAM,MAAM,CAACC,OAAP,GAAiBZ,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RoundAwayFromZero = require('../../math/RoundAwayFromZero');\r\n\r\n/**\r\n * Create an array of numbers (positive and/or negative) progressing from `start`\r\n * up to but not including `end` by advancing by `step`.\r\n *\r\n * If `start` is less than `end` a zero-length range is created unless a negative `step` is specified.\r\n *\r\n * Certain values for `start` and `end` (eg. NaN/undefined/null) are currently coerced to 0;\r\n * for forward compatibility make sure to pass in actual numbers.\r\n * \r\n * @example\r\n * NumberArrayStep(4);\r\n * // => [0, 1, 2, 3]\r\n *\r\n * NumberArrayStep(1, 5);\r\n * // => [1, 2, 3, 4]\r\n *\r\n * NumberArrayStep(0, 20, 5);\r\n * // => [0, 5, 10, 15]\r\n *\r\n * NumberArrayStep(0, -4, -1);\r\n * // => [0, -1, -2, -3]\r\n *\r\n * NumberArrayStep(1, 4, 0);\r\n * // => [1, 1, 1]\r\n *\r\n * NumberArrayStep(0);\r\n * // => []\r\n *\r\n * @function Phaser.Utils.Array.NumberArrayStep\r\n * @since 3.0.0\r\n *\r\n * @param {number} [start=0] - The start of the range.\r\n * @param {number} [end=null] - The end of the range.\r\n * @param {number} [step=1] - The value to increment or decrement by.\r\n *\r\n * @return {number[]} The array of number values.\r\n */\r\nvar NumberArrayStep = function (start, end, step)\r\n{\r\n    if (start === undefined) { start = 0; }\r\n    if (end === undefined) { end = null; }\r\n    if (step === undefined) { step = 1; }\r\n\r\n    if (end === null)\r\n    {\r\n        end = start;\r\n        start = 0;\r\n    }\r\n\r\n    var result = [];\r\n\r\n    var total = Math.max(RoundAwayFromZero((end - start) / (step || 1)), 0);\r\n\r\n    for (var i = 0; i < total; i++)\r\n    {\r\n        result.push(start);\r\n        start += step;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = NumberArrayStep;\r\n"]},"metadata":{},"sourceType":"script"}