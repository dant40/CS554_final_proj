{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SafeRange = require('./SafeRange');\n/**\r\n * Returns all elements in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return only elements that have their visible property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n * the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} All matching elements from the array.\r\n */\n\n\nvar GetAll = function (array, property, value, startIndex, endIndex) {\n  if (startIndex === undefined) {\n    startIndex = 0;\n  }\n\n  if (endIndex === undefined) {\n    endIndex = array.length;\n  }\n\n  var output = [];\n\n  if (SafeRange(array, startIndex, endIndex)) {\n    for (var i = startIndex; i < endIndex; i++) {\n      var child = array[i];\n\n      if (!property || property && value === undefined && child.hasOwnProperty(property) || property && value !== undefined && child[property] === value) {\n        output.push(child);\n      }\n    }\n  }\n\n  return output;\n};\n\nmodule.exports = GetAll;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/GetAll.js"],"names":["SafeRange","require","GetAll","array","property","value","startIndex","endIndex","undefined","length","output","i","child","hasOwnProperty","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAIC,MAAM,GAAG,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8CC,QAA9C,EACb;AACI,MAAID,UAAU,KAAKE,SAAnB,EAA8B;AAAEF,IAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,MAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAAED,IAAAA,QAAQ,GAAGJ,KAAK,CAACM,MAAjB;AAA0B;;AAExD,MAAIC,MAAM,GAAG,EAAb;;AAEA,MAAIV,SAAS,CAACG,KAAD,EAAQG,UAAR,EAAoBC,QAApB,CAAb,EACA;AACI,SAAK,IAAII,CAAC,GAAGL,UAAb,EAAyBK,CAAC,GAAGJ,QAA7B,EAAuCI,CAAC,EAAxC,EACA;AACI,UAAIC,KAAK,GAAGT,KAAK,CAACQ,CAAD,CAAjB;;AAEA,UAAI,CAACP,QAAD,IACCA,QAAQ,IAAIC,KAAK,KAAKG,SAAtB,IAAmCI,KAAK,CAACC,cAAN,CAAqBT,QAArB,CADpC,IAECA,QAAQ,IAAIC,KAAK,KAAKG,SAAtB,IAAmCI,KAAK,CAACR,QAAD,CAAL,KAAoBC,KAF5D,EAGA;AACIK,QAAAA,MAAM,CAACI,IAAP,CAAYF,KAAZ;AACH;AACJ;AACJ;;AAED,SAAOF,MAAP;AACH,CAvBD;;AAyBAK,MAAM,CAACC,OAAP,GAAiBd,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SafeRange = require('./SafeRange');\r\n\r\n/**\r\n * Returns all elements in the array.\r\n *\r\n * You can optionally specify a matching criteria using the `property` and `value` arguments.\r\n *\r\n * For example: `getAll('visible', true)` would return only elements that have their visible property set.\r\n *\r\n * Optionally you can specify a start and end index. For example if the array had 100 elements,\r\n * and you set `startIndex` to 0 and `endIndex` to 50, it would return matches from only\r\n * the first 50 elements.\r\n *\r\n * @function Phaser.Utils.Array.GetAll\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to search.\r\n * @param {string} [property] - The property to test on each array element.\r\n * @param {*} [value] - The value to test the property against. Must pass a strict (`===`) comparison check.\r\n * @param {integer} [startIndex] - An optional start index to search from.\r\n * @param {integer} [endIndex] - An optional end index to search to.\r\n *\r\n * @return {array} All matching elements from the array.\r\n */\r\nvar GetAll = function (array, property, value, startIndex, endIndex)\r\n{\r\n    if (startIndex === undefined) { startIndex = 0; }\r\n    if (endIndex === undefined) { endIndex = array.length; }\r\n\r\n    var output = [];\r\n\r\n    if (SafeRange(array, startIndex, endIndex))\r\n    {\r\n        for (var i = startIndex; i < endIndex; i++)\r\n        {\r\n            var child = array[i];\r\n\r\n            if (!property ||\r\n                (property && value === undefined && child.hasOwnProperty(property)) ||\r\n                (property && value !== undefined && child[property] === value))\r\n            {\r\n                output.push(child);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = GetAll;\r\n"]},"metadata":{},"sourceType":"script"}