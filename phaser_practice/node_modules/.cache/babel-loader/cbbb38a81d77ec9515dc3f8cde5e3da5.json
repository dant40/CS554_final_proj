{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar PutTileAt = require('./PutTileAt');\n/**\r\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n * index at the specified location will be changed. Collision information will be recalculated\r\n * within the region tiles were changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.PutTilesAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar PutTilesAt = function (tilesArray, tileX, tileY, recalculateFaces, layer) {\n  if (!Array.isArray(tilesArray)) {\n    return null;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  } // Force the input array to be a 2D array\n\n\n  if (!Array.isArray(tilesArray[0])) {\n    tilesArray = [tilesArray];\n  }\n\n  var height = tilesArray.length;\n  var width = tilesArray[0].length;\n\n  for (var ty = 0; ty < height; ty++) {\n    for (var tx = 0; tx < width; tx++) {\n      var tile = tilesArray[ty][tx];\n      PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\n    }\n  }\n\n  if (recalculateFaces) {\n    // Recalculate the faces within the destination area and neighboring tiles\n    CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\n  }\n};\n\nmodule.exports = PutTilesAt;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/PutTilesAt.js"],"names":["CalculateFacesWithin","require","PutTileAt","PutTilesAt","tilesArray","tileX","tileY","recalculateFaces","layer","Array","isArray","undefined","height","length","width","ty","tx","tile","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIE,UAAU,GAAG,UAAUC,UAAV,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoCC,gBAApC,EAAsDC,KAAtD,EACjB;AACI,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,UAAd,CAAL,EAAgC;AAAE,WAAO,IAAP;AAAc;;AAChD,MAAIG,gBAAgB,KAAKI,SAAzB,EAAoC;AAAEJ,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B,GAFpE,CAII;;;AACA,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcN,UAAU,CAAC,CAAD,CAAxB,CAAL,EACA;AACIA,IAAAA,UAAU,GAAG,CAAEA,UAAF,CAAb;AACH;;AAED,MAAIQ,MAAM,GAAGR,UAAU,CAACS,MAAxB;AACA,MAAIC,KAAK,GAAGV,UAAU,CAAC,CAAD,CAAV,CAAcS,MAA1B;;AAEA,OAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,MAAtB,EAA8BG,EAAE,EAAhC,EACA;AACI,SAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,KAAtB,EAA6BE,EAAE,EAA/B,EACA;AACI,UAAIC,IAAI,GAAGb,UAAU,CAACW,EAAD,CAAV,CAAeC,EAAf,CAAX;AACAd,MAAAA,SAAS,CAACe,IAAD,EAAOZ,KAAK,GAAGW,EAAf,EAAmBV,KAAK,GAAGS,EAA3B,EAA+B,KAA/B,EAAsCP,KAAtC,CAAT;AACH;AACJ;;AAED,MAAID,gBAAJ,EACA;AACI;AACAP,IAAAA,oBAAoB,CAACK,KAAK,GAAG,CAAT,EAAYC,KAAK,GAAG,CAApB,EAAuBQ,KAAK,GAAG,CAA/B,EAAkCF,MAAM,GAAG,CAA3C,EAA8CJ,KAA9C,CAApB;AACH;AACJ,CA5BD;;AA8BAU,MAAM,CAACC,OAAP,GAAiBhB,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar PutTileAt = require('./PutTileAt');\r\n\r\n/**\r\n * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n * index at the specified location will be changed. Collision information will be recalculated\r\n * within the region tiles were changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.PutTilesAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar PutTilesAt = function (tilesArray, tileX, tileY, recalculateFaces, layer)\r\n{\r\n    if (!Array.isArray(tilesArray)) { return null; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    // Force the input array to be a 2D array\r\n    if (!Array.isArray(tilesArray[0]))\r\n    {\r\n        tilesArray = [ tilesArray ];\r\n    }\r\n\r\n    var height = tilesArray.length;\r\n    var width = tilesArray[0].length;\r\n\r\n    for (var ty = 0; ty < height; ty++)\r\n    {\r\n        for (var tx = 0; tx < width; tx++)\r\n        {\r\n            var tile = tilesArray[ty][tx];\r\n            PutTileAt(tile, tileX + tx, tileY + ty, false, layer);\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the destination area and neighboring tiles\r\n        CalculateFacesWithin(tileX - 1, tileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = PutTilesAt;\r\n\r\n"]},"metadata":{},"sourceType":"script"}