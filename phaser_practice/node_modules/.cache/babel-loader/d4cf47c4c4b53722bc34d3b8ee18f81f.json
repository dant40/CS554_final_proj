{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Return the component parts of a color as an Object with the properties alpha, red, green, blue.\r\n *\r\n * Alpha will only be set if it exists in the given color (0xAARRGGBB)\r\n *\r\n * @function Phaser.Display.Color.IntegerToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {integer} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object with the red, green and blue values set in the r, g and b properties.\r\n */\nvar IntegerToRGB = function (color) {\n  if (color > 16777215) {\n    //  The color value has an alpha component\n    return {\n      a: color >>> 24,\n      r: color >> 16 & 0xFF,\n      g: color >> 8 & 0xFF,\n      b: color & 0xFF\n    };\n  } else {\n    return {\n      a: 255,\n      r: color >> 16 & 0xFF,\n      g: color >> 8 & 0xFF,\n      b: color & 0xFF\n    };\n  }\n};\n\nmodule.exports = IntegerToRGB;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/IntegerToRGB.js"],"names":["IntegerToRGB","color","a","r","g","b","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,YAAY,GAAG,UAAUC,KAAV,EACnB;AACI,MAAIA,KAAK,GAAG,QAAZ,EACA;AACI;AACA,WAAO;AACHC,MAAAA,CAAC,EAAED,KAAK,KAAK,EADV;AAEHE,MAAAA,CAAC,EAAEF,KAAK,IAAI,EAAT,GAAc,IAFd;AAGHG,MAAAA,CAAC,EAAEH,KAAK,IAAI,CAAT,GAAa,IAHb;AAIHI,MAAAA,CAAC,EAAEJ,KAAK,GAAG;AAJR,KAAP;AAMH,GATD,MAWA;AACI,WAAO;AACHC,MAAAA,CAAC,EAAE,GADA;AAEHC,MAAAA,CAAC,EAAEF,KAAK,IAAI,EAAT,GAAc,IAFd;AAGHG,MAAAA,CAAC,EAAEH,KAAK,IAAI,CAAT,GAAa,IAHb;AAIHI,MAAAA,CAAC,EAAEJ,KAAK,GAAG;AAJR,KAAP;AAMH;AACJ,CArBD;;AAuBAK,MAAM,CAACC,OAAP,GAAiBP,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Return the component parts of a color as an Object with the properties alpha, red, green, blue.\r\n *\r\n * Alpha will only be set if it exists in the given color (0xAARRGGBB)\r\n *\r\n * @function Phaser.Display.Color.IntegerToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {integer} input - The color value to convert into a Color object.\r\n *\r\n * @return {Phaser.Types.Display.ColorObject} An object with the red, green and blue values set in the r, g and b properties.\r\n */\r\nvar IntegerToRGB = function (color)\r\n{\r\n    if (color > 16777215)\r\n    {\r\n        //  The color value has an alpha component\r\n        return {\r\n            a: color >>> 24,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n    else\r\n    {\r\n        return {\r\n            a: 255,\r\n            r: color >> 16 & 0xFF,\r\n            g: color >> 8 & 0xFF,\r\n            b: color & 0xFF\r\n        };\r\n    }\r\n};\r\n\r\nmodule.exports = IntegerToRGB;\r\n"]},"metadata":{},"sourceType":"script"}