{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../src/utils/Class');\n\nvar OrthographicCamera = require('./OrthographicCamera');\n\nvar PerspectiveCamera = require('./PerspectiveCamera');\n\nvar PluginCache = require('../../../src/plugins/PluginCache');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\n\nvar CameraManager = new Class({\n  initialize: function CameraManager(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * An Array of the Camera objects being managed by this Camera Manager.\r\n     *\r\n     * @name Phaser.Cameras.Sprite3D.CameraManager#cameras\r\n     * @type {Phaser.Cameras.Sprite3D.Camera[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.cameras = [];\n    scene.sys.events.once('boot', this.boot, this);\n    scene.sys.events.on('start', this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Scene3D.CameraManager#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.systems.events.once('destroy', this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    var eventEmitter = this.systems.events;\n    eventEmitter.on('update', this.update, this);\n    eventEmitter.once('shutdown', this.shutdown, this);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [fieldOfView=80] - [description]\r\n   * @param {number} [width] - [description]\r\n   * @param {number} [height] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  add: function (fieldOfView, width, height) {\n    return this.addPerspectiveCamera(fieldOfView, width, height);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#addOrthographicCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - [description]\r\n   * @param {number} height - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n   */\n  addOrthographicCamera: function (width, height) {\n    var config = this.scene.sys.game.config;\n\n    if (width === undefined) {\n      width = config.width;\n    }\n\n    if (height === undefined) {\n      height = config.height;\n    }\n\n    var camera = new OrthographicCamera(this.scene, width, height);\n    this.cameras.push(camera);\n    return camera;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#addPerspectiveCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [fieldOfView=80] - [description]\r\n   * @param {number} [width] - [description]\r\n   * @param {number} [height] - [description]\r\n   *\r\n   * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n   */\n  addPerspectiveCamera: function (fieldOfView, width, height) {\n    var config = this.scene.sys.game.config;\n\n    if (fieldOfView === undefined) {\n      fieldOfView = 80;\n    }\n\n    if (width === undefined) {\n      width = config.width;\n    }\n\n    if (height === undefined) {\n      height = config.height;\n    }\n\n    var camera = new PerspectiveCamera(this.scene, fieldOfView, width, height);\n    this.cameras.push(camera);\n    return camera;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#getCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - [description]\r\n   *\r\n   * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n   */\n  getCamera: function (name) {\n    for (var i = 0; i < this.cameras.length; i++) {\n      if (this.cameras[i].name === name) {\n        return this.cameras[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#removeCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} camera - [description]\r\n   */\n  removeCamera: function (camera) {\n    var cameraIndex = this.cameras.indexOf(camera);\n\n    if (cameraIndex !== -1) {\n      this.cameras.splice(cameraIndex, 1);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#removeAll\r\n   * @since 3.0.0\r\n   *\r\n   * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n   */\n  removeAll: function () {\n    while (this.cameras.length > 0) {\n      var camera = this.cameras.pop();\n      camera.destroy();\n    }\n\n    return this.main;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestep - [description]\r\n   * @param {number} delta - [description]\r\n   */\n  update: function (timestep, delta) {\n    for (var i = 0, l = this.cameras.length; i < l; ++i) {\n      this.cameras[i].update(timestep, delta);\n    }\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    var eventEmitter = this.systems.events;\n    eventEmitter.off('update', this.update, this);\n    eventEmitter.off('shutdown', this.shutdown, this);\n    this.removeAll();\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Cameras.Sprite3D.CameraManager#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off('start', this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('CameraManager3D', CameraManager, 'cameras3d');\nmodule.exports = CameraManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/camera3d/src/CameraManager.js"],"names":["Class","require","OrthographicCamera","PerspectiveCamera","PluginCache","CameraManager","initialize","scene","systems","sys","cameras","events","once","boot","on","start","destroy","eventEmitter","update","shutdown","add","fieldOfView","width","height","addPerspectiveCamera","addOrthographicCamera","config","game","undefined","camera","push","getCamera","name","i","length","removeCamera","cameraIndex","indexOf","splice","removeAll","pop","main","timestep","delta","l","off","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../src/utils/Class');\r\nvar OrthographicCamera = require('./OrthographicCamera');\r\nvar PerspectiveCamera = require('./PerspectiveCamera');\r\nvar PluginCache = require('../../../src/plugins/PluginCache');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class CameraManager\r\n * @memberOf Phaser.Cameras.Sprite3D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar CameraManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function CameraManager (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * An Array of the Camera objects being managed by this Camera Manager.\r\n         *\r\n         * @name Phaser.Cameras.Sprite3D.CameraManager#cameras\r\n         * @type {Phaser.Cameras.Sprite3D.Camera[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.cameras = [];\r\n\r\n        scene.sys.events.once('boot', this.boot, this);\r\n        scene.sys.events.on('start', this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Scene3D.CameraManager#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.systems.events.once('destroy', this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on('update', this.update, this);\r\n        eventEmitter.once('shutdown', this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    add: function (fieldOfView, width, height)\r\n    {\r\n        return this.addPerspectiveCamera(fieldOfView, width, height);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addOrthographicCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - [description]\r\n     * @param {number} height - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.OrthographicCamera} [description]\r\n     */\r\n    addOrthographicCamera: function (width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new OrthographicCamera(this.scene, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#addPerspectiveCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [fieldOfView=80] - [description]\r\n     * @param {number} [width] - [description]\r\n     * @param {number} [height] - [description]\r\n     *\r\n     * @return {Phaser.Cameras.Sprite3D.PerspectiveCamera} [description]\r\n     */\r\n    addPerspectiveCamera: function (fieldOfView, width, height)\r\n    {\r\n        var config = this.scene.sys.game.config;\r\n\r\n        if (fieldOfView === undefined) { fieldOfView = 80; }\r\n        if (width === undefined) { width = config.width; }\r\n        if (height === undefined) { height = config.height; }\r\n\r\n        var camera = new PerspectiveCamera(this.scene, fieldOfView, width, height);\r\n\r\n        this.cameras.push(camera);\r\n\r\n        return camera;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#getCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - [description]\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    getCamera: function (name)\r\n    {\r\n        for (var i = 0; i < this.cameras.length; i++)\r\n        {\r\n            if (this.cameras[i].name === name)\r\n            {\r\n                return this.cameras[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} camera - [description]\r\n     */\r\n    removeCamera: function (camera)\r\n    {\r\n        var cameraIndex = this.cameras.indexOf(camera);\r\n\r\n        if (cameraIndex !== -1)\r\n        {\r\n            this.cameras.splice(cameraIndex, 1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#removeAll\r\n     * @since 3.0.0\r\n     *\r\n     * @return {(Phaser.Cameras.Sprite3D.OrthographicCamera|Phaser.Cameras.Sprite3D.PerspectiveCamera)} [description]\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        while (this.cameras.length > 0)\r\n        {\r\n            var camera = this.cameras.pop();\r\n\r\n            camera.destroy();\r\n        }\r\n\r\n        return this.main;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestep - [description]\r\n     * @param {number} delta - [description]\r\n     */\r\n    update: function (timestep, delta)\r\n    {\r\n        for (var i = 0, l = this.cameras.length; i < l; ++i)\r\n        {\r\n            this.cameras[i].update(timestep, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off('update', this.update, this);\r\n        eventEmitter.off('shutdown', this.shutdown, this);\r\n\r\n        this.removeAll();\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Cameras.Sprite3D.CameraManager#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off('start', this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('CameraManager3D', CameraManager, 'cameras3d');\r\n\r\nmodule.exports = CameraManager;\r\n"]},"metadata":{},"sourceType":"script"}