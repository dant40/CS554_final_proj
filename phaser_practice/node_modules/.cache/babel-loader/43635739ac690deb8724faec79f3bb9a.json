{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point'); // The three angle bisectors of a triangle meet in one point called the incenter.\n// It is the center of the incircle, the circle inscribed in the triangle.\n\n\nfunction getLength(x1, y1, x2, y2) {\n  var x = x1 - x2;\n  var y = y1 - y2;\n  var magnitude = x * x + y * y;\n  return Math.sqrt(magnitude);\n}\n/**\r\n * Calculates the position of the incenter of a Triangle object. This is the point where its three angle bisectors meet and it's also the center of the incircle, which is the circle inscribed in the triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.InCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to find the incenter of.\r\n * @param {Phaser.Geom.Point} [out] - An optional Point in which to store the coordinates.\r\n *\r\n * @return {Phaser.Geom.Point} Point (x, y) of the center pixel of the triangle.\r\n */\n\n\nvar InCenter = function (triangle, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var x1 = triangle.x1;\n  var y1 = triangle.y1;\n  var x2 = triangle.x2;\n  var y2 = triangle.y2;\n  var x3 = triangle.x3;\n  var y3 = triangle.y3;\n  var d1 = getLength(x3, y3, x2, y2);\n  var d2 = getLength(x1, y1, x3, y3);\n  var d3 = getLength(x2, y2, x1, y1);\n  var p = d1 + d2 + d3;\n  out.x = (x1 * d1 + x2 * d2 + x3 * d3) / p;\n  out.y = (y1 * d1 + y2 * d2 + y3 * d3) / p;\n  return out;\n};\n\nmodule.exports = InCenter;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/InCenter.js"],"names":["Point","require","getLength","x1","y1","x2","y2","x","y","magnitude","Math","sqrt","InCenter","triangle","out","undefined","x3","y3","d1","d2","d3","p","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AAEA,SAASC,SAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EACA;AACI,MAAIC,CAAC,GAAGJ,EAAE,GAAGE,EAAb;AACA,MAAIG,CAAC,GAAGJ,EAAE,GAAGE,EAAb;AACA,MAAIG,SAAS,GAAIF,CAAC,GAAGA,CAAL,GAAWC,CAAC,GAAGA,CAA/B;AAEA,SAAOE,IAAI,CAACC,IAAL,CAAUF,SAAV,CAAP;AACH;AAED;;;;;;;;;;;;;;;AAaA,IAAIG,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EACf;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAId,KAAJ,EAAN;AAAoB;;AAE7C,MAAIG,EAAE,GAAGU,QAAQ,CAACV,EAAlB;AACA,MAAIC,EAAE,GAAGS,QAAQ,CAACT,EAAlB;AAEA,MAAIC,EAAE,GAAGQ,QAAQ,CAACR,EAAlB;AACA,MAAIC,EAAE,GAAGO,QAAQ,CAACP,EAAlB;AAEA,MAAIU,EAAE,GAAGH,QAAQ,CAACG,EAAlB;AACA,MAAIC,EAAE,GAAGJ,QAAQ,CAACI,EAAlB;AAEA,MAAIC,EAAE,GAAGhB,SAAS,CAACc,EAAD,EAAKC,EAAL,EAASZ,EAAT,EAAaC,EAAb,CAAlB;AACA,MAAIa,EAAE,GAAGjB,SAAS,CAACC,EAAD,EAAKC,EAAL,EAASY,EAAT,EAAaC,EAAb,CAAlB;AACA,MAAIG,EAAE,GAAGlB,SAAS,CAACG,EAAD,EAAKC,EAAL,EAASH,EAAT,EAAaC,EAAb,CAAlB;AAEA,MAAIiB,CAAC,GAAGH,EAAE,GAAGC,EAAL,GAAUC,EAAlB;AAEAN,EAAAA,GAAG,CAACP,CAAJ,GAAQ,CAACJ,EAAE,GAAGe,EAAL,GAAUb,EAAE,GAAGc,EAAf,GAAoBH,EAAE,GAAGI,EAA1B,IAAgCC,CAAxC;AACAP,EAAAA,GAAG,CAACN,CAAJ,GAAQ,CAACJ,EAAE,GAAGc,EAAL,GAAUZ,EAAE,GAAGa,EAAf,GAAoBF,EAAE,GAAGG,EAA1B,IAAgCC,CAAxC;AAEA,SAAOP,GAAP;AACH,CAvBD;;AAyBAQ,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n// The three angle bisectors of a triangle meet in one point called the incenter.\r\n// It is the center of the incircle, the circle inscribed in the triangle.\r\n\r\nfunction getLength (x1, y1, x2, y2)\r\n{\r\n    var x = x1 - x2;\r\n    var y = y1 - y2;\r\n    var magnitude = (x * x) + (y * y);\r\n\r\n    return Math.sqrt(magnitude);\r\n}\r\n\r\n/**\r\n * Calculates the position of the incenter of a Triangle object. This is the point where its three angle bisectors meet and it's also the center of the incircle, which is the circle inscribed in the triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.InCenter\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to find the incenter of.\r\n * @param {Phaser.Geom.Point} [out] - An optional Point in which to store the coordinates.\r\n *\r\n * @return {Phaser.Geom.Point} Point (x, y) of the center pixel of the triangle.\r\n */\r\nvar InCenter = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    var x2 = triangle.x2;\r\n    var y2 = triangle.y2;\r\n\r\n    var x3 = triangle.x3;\r\n    var y3 = triangle.y3;\r\n\r\n    var d1 = getLength(x3, y3, x2, y2);\r\n    var d2 = getLength(x1, y1, x3, y3);\r\n    var d3 = getLength(x2, y2, x1, y1);\r\n\r\n    var p = d1 + d2 + d3;\r\n\r\n    out.x = (x1 * d1 + x2 * d2 + x3 * d3) / p;\r\n    out.y = (y1 * d1 + y2 * d2 + y3 * d3) / p;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = InCenter;\r\n"]},"metadata":{},"sourceType":"script"}