{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Arne16 = require('./palettes/Arne16');\n\nvar CanvasPool = require('../display/canvas/CanvasPool');\n\nvar GetValue = require('../utils/object/GetValue');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Create.GenerateTexture\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Create.GenerateTextureConfig} config - [description]\r\n *\r\n * @return {HTMLCanvasElement} [description]\r\n */\n\n\nvar GenerateTexture = function (config) {\n  var data = GetValue(config, 'data', []);\n  var canvas = GetValue(config, 'canvas', null);\n  var palette = GetValue(config, 'palette', Arne16);\n  var pixelWidth = GetValue(config, 'pixelWidth', 1);\n  var pixelHeight = GetValue(config, 'pixelHeight', pixelWidth);\n  var resizeCanvas = GetValue(config, 'resizeCanvas', true);\n  var clearCanvas = GetValue(config, 'clearCanvas', true);\n  var preRender = GetValue(config, 'preRender', null);\n  var postRender = GetValue(config, 'postRender', null);\n  var width = Math.floor(Math.abs(data[0].length * pixelWidth));\n  var height = Math.floor(Math.abs(data.length * pixelHeight));\n\n  if (!canvas) {\n    canvas = CanvasPool.create2D(this, width, height);\n    resizeCanvas = false;\n    clearCanvas = false;\n  }\n\n  if (resizeCanvas) {\n    canvas.width = width;\n    canvas.height = height;\n  }\n\n  var ctx = canvas.getContext('2d');\n\n  if (clearCanvas) {\n    ctx.clearRect(0, 0, width, height);\n  } //  preRender Callback?\n\n\n  if (preRender) {\n    preRender(canvas, ctx);\n  } //  Draw it\n\n\n  for (var y = 0; y < data.length; y++) {\n    var row = data[y];\n\n    for (var x = 0; x < row.length; x++) {\n      var d = row[x];\n\n      if (d !== '.' && d !== ' ') {\n        ctx.fillStyle = palette[d];\n        ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\n      }\n    }\n  } //  postRender Callback?\n\n\n  if (postRender) {\n    postRender(canvas, ctx);\n  }\n\n  return canvas;\n};\n\nmodule.exports = GenerateTexture;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/create/GenerateTexture.js"],"names":["Arne16","require","CanvasPool","GetValue","GenerateTexture","config","data","canvas","palette","pixelWidth","pixelHeight","resizeCanvas","clearCanvas","preRender","postRender","width","Math","floor","abs","length","height","create2D","ctx","getContext","clearRect","y","row","x","d","fillStyle","fillRect","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Arne16 = require('./palettes/Arne16');\r\nvar CanvasPool = require('../display/canvas/CanvasPool');\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Create.GenerateTexture\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Create.GenerateTextureConfig} config - [description]\r\n *\r\n * @return {HTMLCanvasElement} [description]\r\n */\r\nvar GenerateTexture = function (config)\r\n{\r\n    var data = GetValue(config, 'data', []);\r\n    var canvas = GetValue(config, 'canvas', null);\r\n    var palette = GetValue(config, 'palette', Arne16);\r\n    var pixelWidth = GetValue(config, 'pixelWidth', 1);\r\n    var pixelHeight = GetValue(config, 'pixelHeight', pixelWidth);\r\n    var resizeCanvas = GetValue(config, 'resizeCanvas', true);\r\n    var clearCanvas = GetValue(config, 'clearCanvas', true);\r\n    var preRender = GetValue(config, 'preRender', null);\r\n    var postRender = GetValue(config, 'postRender', null);\r\n\r\n    var width = Math.floor(Math.abs(data[0].length * pixelWidth));\r\n    var height = Math.floor(Math.abs(data.length * pixelHeight));\r\n\r\n    if (!canvas)\r\n    {\r\n        canvas = CanvasPool.create2D(this, width, height);\r\n        resizeCanvas = false;\r\n        clearCanvas = false;\r\n    }\r\n\r\n    if (resizeCanvas)\r\n    {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    if (clearCanvas)\r\n    {\r\n        ctx.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    //  preRender Callback?\r\n    if (preRender)\r\n    {\r\n        preRender(canvas, ctx);\r\n    }\r\n\r\n    //  Draw it\r\n    for (var y = 0; y < data.length; y++)\r\n    {\r\n        var row = data[y];\r\n\r\n        for (var x = 0; x < row.length; x++)\r\n        {\r\n            var d = row[x];\r\n\r\n            if (d !== '.' && d !== ' ')\r\n            {\r\n                ctx.fillStyle = palette[d];\r\n                ctx.fillRect(x * pixelWidth, y * pixelHeight, pixelWidth, pixelHeight);\r\n            }\r\n        }\r\n    }\r\n\r\n    //  postRender Callback?\r\n    if (postRender)\r\n    {\r\n        postRender(canvas, ctx);\r\n    }\r\n\r\n    return canvas;\r\n};\r\n\r\nmodule.exports = GenerateTexture;\r\n"]},"metadata":{},"sourceType":"script"}