{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Converts an RGB color value to HSV (hue, saturation and value).\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.RGBToHSV\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} [out] - An object to store the color values in. If not given an HSV Color Object will be created.\r\n *\r\n * @return {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} An object with the properties `h`, `s` and `v` set.\r\n */\nvar RGBToHSV = function (r, g, b, out) {\n  if (out === undefined) {\n    out = {\n      h: 0,\n      s: 0,\n      v: 0\n    };\n  }\n\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  var min = Math.min(r, g, b);\n  var max = Math.max(r, g, b);\n  var d = max - min; // achromatic by default\n\n  var h = 0;\n  var s = max === 0 ? 0 : d / max;\n  var v = max;\n\n  if (max !== min) {\n    if (max === r) {\n      h = (g - b) / d + (g < b ? 6 : 0);\n    } else if (max === g) {\n      h = (b - r) / d + 2;\n    } else if (max === b) {\n      h = (r - g) / d + 4;\n    }\n\n    h /= 6;\n  }\n\n  if (out.hasOwnProperty('_h')) {\n    out._h = h;\n    out._s = s;\n    out._v = v;\n  } else {\n    out.h = h;\n    out.s = s;\n    out.v = v;\n  }\n\n  return out;\n};\n\nmodule.exports = RGBToHSV;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/RGBToHSV.js"],"names":["RGBToHSV","r","g","b","out","undefined","h","s","v","min","Math","max","d","hasOwnProperty","_h","_s","_v","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA,IAAIA,QAAQ,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,GAAnB,EACf;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG;AAAEE,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE,CAAX;AAAcC,MAAAA,CAAC,EAAE;AAAjB,KAAN;AAA6B;;AAEtDP,EAAAA,CAAC,IAAI,GAAL;AACAC,EAAAA,CAAC,IAAI,GAAL;AACAC,EAAAA,CAAC,IAAI,GAAL;AAEA,MAAIM,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASR,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAV;AACA,MAAIQ,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASV,CAAT,EAAYC,CAAZ,EAAeC,CAAf,CAAV;AACA,MAAIS,CAAC,GAAGD,GAAG,GAAGF,GAAd,CATJ,CAWI;;AACA,MAAIH,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAII,GAAG,KAAK,CAAT,GAAc,CAAd,GAAkBC,CAAC,GAAGD,GAA9B;AACA,MAAIH,CAAC,GAAGG,GAAR;;AAEA,MAAIA,GAAG,KAAKF,GAAZ,EACA;AACI,QAAIE,GAAG,KAAKV,CAAZ,EACA;AACIK,MAAAA,CAAC,GAAG,CAACJ,CAAC,GAAGC,CAAL,IAAUS,CAAV,IAAgBV,CAAC,GAAGC,CAAL,GAAU,CAAV,GAAc,CAA7B,CAAJ;AACH,KAHD,MAIK,IAAIQ,GAAG,KAAKT,CAAZ,EACL;AACII,MAAAA,CAAC,GAAG,CAACH,CAAC,GAAGF,CAAL,IAAUW,CAAV,GAAc,CAAlB;AACH,KAHI,MAIA,IAAID,GAAG,KAAKR,CAAZ,EACL;AACIG,MAAAA,CAAC,GAAG,CAACL,CAAC,GAAGC,CAAL,IAAUU,CAAV,GAAc,CAAlB;AACH;;AAEDN,IAAAA,CAAC,IAAI,CAAL;AACH;;AAED,MAAIF,GAAG,CAACS,cAAJ,CAAmB,IAAnB,CAAJ,EACA;AACIT,IAAAA,GAAG,CAACU,EAAJ,GAASR,CAAT;AACAF,IAAAA,GAAG,CAACW,EAAJ,GAASR,CAAT;AACAH,IAAAA,GAAG,CAACY,EAAJ,GAASR,CAAT;AACH,GALD,MAOA;AACIJ,IAAAA,GAAG,CAACE,CAAJ,GAAQA,CAAR;AACAF,IAAAA,GAAG,CAACG,CAAJ,GAAQA,CAAR;AACAH,IAAAA,GAAG,CAACI,CAAJ,GAAQA,CAAR;AACH;;AAED,SAAOJ,GAAP;AACH,CAjDD;;AAmDAa,MAAM,CAACC,OAAP,GAAiBlB,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Converts an RGB color value to HSV (hue, saturation and value).\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes RGB values are contained in the set [0, 255] and returns h, s and v in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.RGBToHSV\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} [out] - An object to store the color values in. If not given an HSV Color Object will be created.\r\n *\r\n * @return {(Phaser.Types.Display.HSVColorObject|Phaser.Display.Color)} An object with the properties `h`, `s` and `v` set.\r\n */\r\nvar RGBToHSV = function (r, g, b, out)\r\n{\r\n    if (out === undefined) { out = { h: 0, s: 0, v: 0 }; }\r\n\r\n    r /= 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    var min = Math.min(r, g, b);\r\n    var max = Math.max(r, g, b);\r\n    var d = max - min;\r\n\r\n    // achromatic by default\r\n    var h = 0;\r\n    var s = (max === 0) ? 0 : d / max;\r\n    var v = max;\r\n\r\n    if (max !== min)\r\n    {\r\n        if (max === r)\r\n        {\r\n            h = (g - b) / d + ((g < b) ? 6 : 0);\r\n        }\r\n        else if (max === g)\r\n        {\r\n            h = (b - r) / d + 2;\r\n        }\r\n        else if (max === b)\r\n        {\r\n            h = (r - g) / d + 4;\r\n        }\r\n\r\n        h /= 6;\r\n    }\r\n\r\n    if (out.hasOwnProperty('_h'))\r\n    {\r\n        out._h = h;\r\n        out._s = s;\r\n        out._v = v;\r\n    }\r\n    else\r\n    {\r\n        out.h = h;\r\n        out.s = s;\r\n        out.v = v;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = RGBToHSV;\r\n"]},"metadata":{},"sourceType":"script"}