{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Plugin Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#plugin method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#plugin.\r\n *\r\n * @class PluginFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.PluginFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {boolean} [start=false] - Automatically start the plugin after loading?\r\n * @param {string} [mapping] - If this plugin is to be injected into the Scene, this is the property key used.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar PluginFile = new Class({\n  Extends: File,\n  initialize: function PluginFile(loader, key, url, start, mapping, xhrSettings) {\n    var extension = 'js';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n      start = GetFastValue(config, 'start');\n      mapping = GetFastValue(config, 'mapping');\n    }\n\n    var fileConfig = {\n      type: 'plugin',\n      cache: false,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings,\n      config: {\n        start: start,\n        mapping: mapping\n      }\n    };\n    File.call(this, loader, fileConfig); // If the url variable refers to a class, add the plugin directly\n\n    if (typeof url === 'function') {\n      this.data = url;\n      this.state = CONST.FILE_POPULATED;\n    }\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.PluginFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function () {\n    var pluginManager = this.loader.systems.plugins;\n    var config = this.config;\n    var start = GetFastValue(config, 'start', false);\n    var mapping = GetFastValue(config, 'mapping', null);\n\n    if (this.state === CONST.FILE_POPULATED) {\n      pluginManager.install(this.key, this.data, start, mapping);\n    } else {\n      //  Plugin added via a js file\n      this.state = CONST.FILE_PROCESSING;\n      this.data = document.createElement('script');\n      this.data.language = 'javascript';\n      this.data.type = 'text/javascript';\n      this.data.defer = false;\n      this.data.text = this.xhrLoader.responseText;\n      document.head.appendChild(this.data);\n      var plugin = pluginManager.install(this.key, window[this.key], start, mapping);\n\n      if (start || mapping) {\n        //  Install into the current Scene Systems and Scene\n        this.loader.systems[mapping] = plugin;\n        this.loader.scene[mapping] = plugin;\n      }\n    }\n\n    this.onProcessComplete();\n  }\n});\n/**\r\n * Adds a Plugin Script file, or array of plugin files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.plugin('modplayer', 'plugins/ModPlayer.js');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.plugin({\r\n *     key: 'modplayer',\r\n *     url: 'plugins/ModPlayer.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.PluginFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will automatically be converted into a script element\r\n * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. It will then be passed to the Phaser PluginCache.register method.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Plugin File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#plugin\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.PluginFileConfig|Phaser.Types.Loader.FileTypes.PluginFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|function)} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, a plugin function.\r\n * @param {boolean} [start] - Automatically start the plugin after loading?\r\n * @param {string} [mapping] - If this plugin is to be injected into the Scene, this is the property key used.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('plugin', function (key, url, start, mapping, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new PluginFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new PluginFile(this, key, url, start, mapping, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = PluginFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/PluginFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","PluginFile","Extends","initialize","loader","key","url","start","mapping","xhrSettings","extension","config","fileConfig","type","cache","responseType","call","data","state","FILE_POPULATED","onProcess","pluginManager","systems","plugins","install","FILE_PROCESSING","document","createElement","language","defer","text","xhrLoader","responseText","head","appendChild","plugin","window","scene","onProcessComplete","register","Array","isArray","i","length","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Plugin Script File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#plugin method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#plugin.\r\n *\r\n * @class PluginFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.PluginFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {boolean} [start=false] - Automatically start the plugin after loading?\r\n * @param {string} [mapping] - If this plugin is to be injected into the Scene, this is the property key used.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar PluginFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function PluginFile (loader, key, url, start, mapping, xhrSettings)\r\n    {\r\n        var extension = 'js';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            start = GetFastValue(config, 'start');\r\n            mapping = GetFastValue(config, 'mapping');\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'plugin',\r\n            cache: false,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                start: start,\r\n                mapping: mapping\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        // If the url variable refers to a class, add the plugin directly\r\n        if (typeof url === 'function')\r\n        {\r\n            this.data = url;\r\n\r\n            this.state = CONST.FILE_POPULATED;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.PluginFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        var pluginManager = this.loader.systems.plugins;\r\n        var config = this.config;\r\n\r\n        var start = GetFastValue(config, 'start', false);\r\n        var mapping = GetFastValue(config, 'mapping', null);\r\n\r\n        if (this.state === CONST.FILE_POPULATED)\r\n        {\r\n            pluginManager.install(this.key, this.data, start, mapping);\r\n        }\r\n        else\r\n        {\r\n            //  Plugin added via a js file\r\n            this.state = CONST.FILE_PROCESSING;\r\n\r\n            this.data = document.createElement('script');\r\n            this.data.language = 'javascript';\r\n            this.data.type = 'text/javascript';\r\n            this.data.defer = false;\r\n            this.data.text = this.xhrLoader.responseText;\r\n\r\n            document.head.appendChild(this.data);\r\n\r\n            var plugin = pluginManager.install(this.key, window[this.key], start, mapping);\r\n\r\n            if (start || mapping)\r\n            {\r\n                //  Install into the current Scene Systems and Scene\r\n                this.loader.systems[mapping] = plugin;\r\n                this.loader.scene[mapping] = plugin;\r\n            }\r\n        }\r\n\r\n        this.onProcessComplete();\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Plugin Script file, or array of plugin files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.plugin('modplayer', 'plugins/ModPlayer.js');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * The key must be a unique String and not already in-use by another file in the Loader.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.plugin({\r\n *     key: 'modplayer',\r\n *     url: 'plugins/ModPlayer.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.PluginFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will automatically be converted into a script element\r\n * via `document.createElement('script')`. It will have its language set to JavaScript, `defer` set to\r\n * false and then the resulting element will be appended to `document.head`. Any code then in the\r\n * script will be executed. It will then be passed to the Phaser PluginCache.register method.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Plugin File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#plugin\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.PluginFileConfig|Phaser.Types.Loader.FileTypes.PluginFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {(string|function)} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\". Or, a plugin function.\r\n * @param {boolean} [start] - Automatically start the plugin after loading?\r\n * @param {string} [mapping] - If this plugin is to be injected into the Scene, this is the property key used.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('plugin', function (key, url, start, mapping, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new PluginFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new PluginFile(this, key, url, start, mapping, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = PluginFile;\r\n"]},"metadata":{},"sourceType":"script"}