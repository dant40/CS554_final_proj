{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar MathSmoothStep = require('../math/SmoothStep');\n/**\r\n * Smoothstep is a sigmoid-like interpolation and clamping function.\r\n * \r\n * The function depends on three parameters, the input x, the \"left edge\" and the \"right edge\", with the left edge being assumed smaller than the right edge. The function receives a real number x as an argument and returns 0 if x is less than or equal to the left edge, 1 if x is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial, between 0 and 1 otherwise. The slope of the smoothstep function is zero at both edges. This is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.\r\n *\r\n * @function Phaser.Actions.SmoothStep\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {string} property - The property of the Game Object to interpolate.\r\n * @param {number} min - The minimum interpolation value.\r\n * @param {number} max - The maximum interpolation value.\r\n * @param {boolean} [inc=false] - Should the values be incremented? `true` or set (`false`)\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of Game Objects that was passed to this Action.\r\n */\n\n\nvar SmoothStep = function (items, property, min, max, inc) {\n  if (inc === undefined) {\n    inc = false;\n  }\n\n  var step = Math.abs(max - min) / items.length;\n  var i;\n\n  if (inc) {\n    for (i = 0; i < items.length; i++) {\n      items[i][property] += MathSmoothStep(i * step, min, max);\n    }\n  } else {\n    for (i = 0; i < items.length; i++) {\n      items[i][property] = MathSmoothStep(i * step, min, max);\n    }\n  }\n\n  return items;\n};\n\nmodule.exports = SmoothStep;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/actions/SmoothStep.js"],"names":["MathSmoothStep","require","SmoothStep","items","property","min","max","inc","undefined","step","Math","abs","length","i","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIC,UAAU,GAAG,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,GAArC,EACjB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,KAAN;AAAc;;AAEvC,MAAIE,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASL,GAAG,GAAGD,GAAf,IAAsBF,KAAK,CAACS,MAAvC;AACA,MAAIC,CAAJ;;AAEA,MAAIN,GAAJ,EACA;AACI,SAAKM,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGV,KAAK,CAACS,MAAtB,EAA8BC,CAAC,EAA/B,EACA;AACIV,MAAAA,KAAK,CAACU,CAAD,CAAL,CAAST,QAAT,KAAsBJ,cAAc,CAACa,CAAC,GAAGJ,IAAL,EAAWJ,GAAX,EAAgBC,GAAhB,CAApC;AACH;AACJ,GAND,MAQA;AACI,SAAKO,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGV,KAAK,CAACS,MAAtB,EAA8BC,CAAC,EAA/B,EACA;AACIV,MAAAA,KAAK,CAACU,CAAD,CAAL,CAAST,QAAT,IAAqBJ,cAAc,CAACa,CAAC,GAAGJ,IAAL,EAAWJ,GAAX,EAAgBC,GAAhB,CAAnC;AACH;AACJ;;AAED,SAAOH,KAAP;AACH,CAvBD;;AAyBAW,MAAM,CAACC,OAAP,GAAiBb,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar MathSmoothStep = require('../math/SmoothStep');\r\n\r\n/**\r\n * Smoothstep is a sigmoid-like interpolation and clamping function.\r\n * \r\n * The function depends on three parameters, the input x, the \"left edge\" and the \"right edge\", with the left edge being assumed smaller than the right edge. The function receives a real number x as an argument and returns 0 if x is less than or equal to the left edge, 1 if x is greater than or equal to the right edge, and smoothly interpolates, using a Hermite polynomial, between 0 and 1 otherwise. The slope of the smoothstep function is zero at both edges. This is convenient for creating a sequence of transitions using smoothstep to interpolate each segment as an alternative to using more sophisticated or expensive interpolation techniques.\r\n *\r\n * @function Phaser.Actions.SmoothStep\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {string} property - The property of the Game Object to interpolate.\r\n * @param {number} min - The minimum interpolation value.\r\n * @param {number} max - The maximum interpolation value.\r\n * @param {boolean} [inc=false] - Should the values be incremented? `true` or set (`false`)\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of Game Objects that was passed to this Action.\r\n */\r\nvar SmoothStep = function (items, property, min, max, inc)\r\n{\r\n    if (inc === undefined) { inc = false; }\r\n\r\n    var step = Math.abs(max - min) / items.length;\r\n    var i;\r\n\r\n    if (inc)\r\n    {\r\n        for (i = 0; i < items.length; i++)\r\n        {\r\n            items[i][property] += MathSmoothStep(i * step, min, max);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (i = 0; i < items.length; i++)\r\n        {\r\n            items[i][property] = MathSmoothStep(i * step, min, max);\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = SmoothStep;\r\n"]},"metadata":{},"sourceType":"script"}