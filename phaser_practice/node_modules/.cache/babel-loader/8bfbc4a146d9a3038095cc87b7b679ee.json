{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar Frame = require('./Frame');\n\nvar TextureSource = require('./TextureSource');\n\nvar TEXTURE_MISSING_ERROR = 'Texture.frame missing: ';\n/**\r\n * @classdesc\r\n * A Texture consists of a source, usually an Image from the Cache, and a collection of Frames.\r\n * The Frames represent the different areas of the Texture. For example a texture atlas\r\n * may have many Frames, one for each element within the atlas. Where-as a single image would have\r\n * just one frame, that encompasses the whole image.\r\n * \r\n * Every Texture, no matter where it comes from, always has at least 1 frame called the `__BASE` frame.\r\n * This frame represents the entirety of the source image.\r\n *\r\n * Textures are managed by the global TextureManager. This is a singleton class that is\r\n * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\r\n *\r\n * Sprites and other Game Objects get the texture data they need from the TextureManager.\r\n *\r\n * @class Texture\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.TextureManager} manager - A reference to the Texture Manager this Texture belongs to.\r\n * @param {string} key - The unique string-based key of this Texture.\r\n * @param {(HTMLImageElement|HTMLCanvasElement|HTMLImageElement[]|HTMLCanvasElement[])} source - An array of sources that are used to create the texture. Usually Images, but can also be a Canvas.\r\n * @param {number} [width] - The width of the Texture. This is optional and automatically derived from the source images.\r\n * @param {number} [height] - The height of the Texture. This is optional and automatically derived from the source images.\r\n */\n\nvar Texture = new Class({\n  initialize: function Texture(manager, key, source, width, height) {\n    if (!Array.isArray(source)) {\n      source = [source];\n    }\n    /**\r\n     * A reference to the Texture Manager this Texture belongs to.\r\n     *\r\n     * @name Phaser.Textures.Texture#manager\r\n     * @type {Phaser.Textures.TextureManager}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.manager = manager;\n    /**\r\n     * The unique string-based key of this Texture.\r\n     *\r\n     * @name Phaser.Textures.Texture#key\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.key = key;\n    /**\r\n     * An array of TextureSource instances.\r\n     * These are unique to this Texture and contain the actual Image (or Canvas) data.\r\n     *\r\n     * @name Phaser.Textures.Texture#source\r\n     * @type {Phaser.Textures.TextureSource[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.source = [];\n    /**\r\n     * An array of TextureSource data instances.\r\n     * Used to store additional data images, such as normal maps or specular maps.\r\n     *\r\n     * @name Phaser.Textures.Texture#dataSource\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.dataSource = [];\n    /**\r\n     * A key-value object pair associating the unique Frame keys with the Frames objects.\r\n     *\r\n     * @name Phaser.Textures.Texture#frames\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.frames = {};\n    /**\r\n     * Any additional data that was set in the source JSON (if any),\r\n     * or any extra data you'd like to store relating to this texture\r\n     *\r\n     * @name Phaser.Textures.Texture#customData\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.customData = {};\n    /**\r\n     * The name of the first frame of the Texture.\r\n     *\r\n     * @name Phaser.Textures.Texture#firstFrame\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.firstFrame = '__BASE';\n    /**\r\n     * The total number of Frames in this Texture, including the `__BASE` frame.\r\n     * \r\n     * A Texture will always contain at least 1 frame because every Texture contains a `__BASE` frame by default,\r\n     * in addition to any extra frames that have been added to it, such as when parsing a Sprite Sheet or Texture Atlas.\r\n     *\r\n     * @name Phaser.Textures.Texture#frameTotal\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.frameTotal = 0; //  Load the Sources\n\n    for (var i = 0; i < source.length; i++) {\n      this.source.push(new TextureSource(this, source[i], width, height));\n    }\n  },\n\n  /**\r\n   * Adds a new Frame to this Texture.\r\n   *\r\n   * A Frame is a rectangular region of a TextureSource with a unique index or string-based key.\r\n   * \r\n   * The name given must be unique within this Texture. If it already exists, this method will return `null`.\r\n   *\r\n   * @method Phaser.Textures.Texture#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|string)} name - The name of this Frame. The name is unique within the Texture.\r\n   * @param {integer} sourceIndex - The index of the TextureSource that this Frame is a part of.\r\n   * @param {number} x - The x coordinate of the top-left of this Frame.\r\n   * @param {number} y - The y coordinate of the top-left of this Frame.\r\n   * @param {number} width - The width of this Frame.\r\n   * @param {number} height - The height of this Frame.\r\n   *\r\n   * @return {?Phaser.Textures.Frame} The Frame that was added to this Texture, or `null` if the given name already exists.\r\n   */\n  add: function (name, sourceIndex, x, y, width, height) {\n    if (this.has(name)) {\n      return null;\n    }\n\n    var frame = new Frame(this, name, sourceIndex, x, y, width, height);\n    this.frames[name] = frame; //  Set the first frame of the Texture (other than __BASE)\n    //  This is used to ensure we don't spam the display with entire\n    //  atlases of sprite sheets, but instead just the first frame of them\n    //  should the dev incorrectly specify the frame index\n\n    if (this.firstFrame === '__BASE') {\n      this.firstFrame = name;\n    }\n\n    this.frameTotal++;\n    return frame;\n  },\n\n  /**\r\n   * Removes the given Frame from this Texture. The Frame is destroyed immediately.\r\n   * \r\n   * Any Game Objects using this Frame should stop using it _before_ you remove it,\r\n   * as it does not happen automatically.\r\n   *\r\n   * @method Phaser.Textures.Texture#remove\r\n   * @since 3.19.0\r\n   *\r\n   * @param {string} name - The key of the Frame to remove.\r\n   *\r\n   * @return {boolean} True if a Frame with the matching key was removed from this Texture.\r\n   */\n  remove: function (name) {\n    if (this.has(name)) {\n      var frame = this.get(name);\n      frame.destroy();\n      delete this.frames[name];\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Checks to see if a Frame matching the given key exists within this Texture.\r\n   *\r\n   * @method Phaser.Textures.Texture#has\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} name - The key of the Frame to check for.\r\n   *\r\n   * @return {boolean} True if a Frame with the matching key exists in this Texture.\r\n   */\n  has: function (name) {\n    return this.frames[name];\n  },\n\n  /**\r\n   * Gets a Frame from this Texture based on either the key or the index of the Frame.\r\n   *\r\n   * In a Texture Atlas Frames are typically referenced by a key.\r\n   * In a Sprite Sheet Frames are referenced by an index.\r\n   * Passing no value for the name returns the base texture.\r\n   *\r\n   * @method Phaser.Textures.Texture#get\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n   *\r\n   * @return {Phaser.Textures.Frame} The Texture Frame.\r\n   */\n  get: function (name) {\n    //  null, undefined, empty string, zero\n    if (!name) {\n      name = this.firstFrame;\n    }\n\n    var frame = this.frames[name];\n\n    if (!frame) {\n      console.warn(TEXTURE_MISSING_ERROR + name);\n      frame = this.frames[this.firstFrame];\n    }\n\n    return frame;\n  },\n\n  /**\r\n   * Takes the given TextureSource and returns the index of it within this Texture.\r\n   * If it's not in this Texture, it returns -1.\r\n   * Unless this Texture has multiple TextureSources, such as with a multi-atlas, this\r\n   * method will always return zero or -1.\r\n   *\r\n   * @method Phaser.Textures.Texture#getTextureSourceIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.TextureSource} source - The TextureSource to check.\r\n   *\r\n   * @return {integer} The index of the TextureSource within this Texture, or -1 if not in this Texture.\r\n   */\n  getTextureSourceIndex: function (source) {\n    for (var i = 0; i < this.source.length; i++) {\n      if (this.source[i] === source) {\n        return i;\n      }\n    }\n\n    return -1;\n  },\n\n  /**\r\n   * Returns an array of all the Frames in the given TextureSource.\r\n   *\r\n   * @method Phaser.Textures.Texture#getFramesFromTextureSource\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} sourceIndex - The index of the TextureSource to get the Frames from.\r\n   * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n   *\r\n   * @return {Phaser.Textures.Frame[]} An array of Texture Frames.\r\n   */\n  getFramesFromTextureSource: function (sourceIndex, includeBase) {\n    if (includeBase === undefined) {\n      includeBase = false;\n    }\n\n    var out = [];\n\n    for (var frameName in this.frames) {\n      if (frameName === '__BASE' && !includeBase) {\n        continue;\n      }\n\n      var frame = this.frames[frameName];\n\n      if (frame.sourceIndex === sourceIndex) {\n        out.push(frame);\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Returns an array with all of the names of the Frames in this Texture.\r\n   *\r\n   * Useful if you want to randomly assign a Frame to a Game Object, as you can\r\n   * pick a random element from the returned array.\r\n   *\r\n   * @method Phaser.Textures.Texture#getFrameNames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n   *\r\n   * @return {string[]} An array of all Frame names in this Texture.\r\n   */\n  getFrameNames: function (includeBase) {\n    if (includeBase === undefined) {\n      includeBase = false;\n    }\n\n    var out = Object.keys(this.frames);\n\n    if (!includeBase) {\n      var idx = out.indexOf('__BASE');\n\n      if (idx !== -1) {\n        out.splice(idx, 1);\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Given a Frame name, return the source image it uses to render with.\r\n   *\r\n   * This will return the actual DOM Image or Canvas element.\r\n   *\r\n   * @method Phaser.Textures.Texture#getSourceImage\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n   *\r\n   * @return {(HTMLImageElement|HTMLCanvasElement|Phaser.GameObjects.RenderTexture)} The DOM Image, Canvas Element or Render Texture.\r\n   */\n  getSourceImage: function (name) {\n    if (name === undefined || name === null || this.frameTotal === 1) {\n      name = '__BASE';\n    }\n\n    var frame = this.frames[name];\n\n    if (frame) {\n      return frame.source.image;\n    } else {\n      console.warn(TEXTURE_MISSING_ERROR + name);\n      return this.frames['__BASE'].source.image;\n    }\n  },\n\n  /**\r\n   * Given a Frame name, return the data source image it uses to render with.\r\n   * You can use this to get the normal map for an image for example.\r\n   *\r\n   * This will return the actual DOM Image.\r\n   *\r\n   * @method Phaser.Textures.Texture#getDataSourceImage\r\n   * @since 3.7.0\r\n   *\r\n   * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n   *\r\n   * @return {(HTMLImageElement|HTMLCanvasElement)} The DOM Image or Canvas Element.\r\n   */\n  getDataSourceImage: function (name) {\n    if (name === undefined || name === null || this.frameTotal === 1) {\n      name = '__BASE';\n    }\n\n    var frame = this.frames[name];\n    var idx;\n\n    if (!frame) {\n      console.warn(TEXTURE_MISSING_ERROR + name);\n      idx = this.frames['__BASE'].sourceIndex;\n    } else {\n      idx = frame.sourceIndex;\n    }\n\n    return this.dataSource[idx].image;\n  },\n\n  /**\r\n   * Adds a data source image to this Texture.\r\n   *\r\n   * An example of a data source image would be a normal map, where all of the Frames for this Texture\r\n   * equally apply to the normal map.\r\n   *\r\n   * @method Phaser.Textures.Texture#setDataSource\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(HTMLImageElement|HTMLCanvasElement|HTMLImageElement[]|HTMLCanvasElement[])} data - The source image.\r\n   */\n  setDataSource: function (data) {\n    if (!Array.isArray(data)) {\n      data = [data];\n    }\n\n    for (var i = 0; i < data.length; i++) {\n      var source = this.source[i];\n      this.dataSource.push(new TextureSource(this, data[i], source.width, source.height));\n    }\n  },\n\n  /**\r\n   * Sets the Filter Mode for this Texture.\r\n   *\r\n   * The mode can be either Linear, the default, or Nearest.\r\n   *\r\n   * For pixel-art you should use Nearest.\r\n   *\r\n   * The mode applies to the entire Texture, not just a specific Frame of it.\r\n   *\r\n   * @method Phaser.Textures.Texture#setFilter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n   */\n  setFilter: function (filterMode) {\n    var i;\n\n    for (i = 0; i < this.source.length; i++) {\n      this.source[i].setFilter(filterMode);\n    }\n\n    for (i = 0; i < this.dataSource.length; i++) {\n      this.dataSource[i].setFilter(filterMode);\n    }\n  },\n\n  /**\r\n   * Destroys this Texture and releases references to its sources and frames.\r\n   *\r\n   * @method Phaser.Textures.Texture#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    var i;\n\n    for (i = 0; i < this.source.length; i++) {\n      this.source[i].destroy();\n    }\n\n    for (i = 0; i < this.dataSource.length; i++) {\n      this.dataSource[i].destroy();\n    }\n\n    for (var frameName in this.frames) {\n      var frame = this.frames[frameName];\n      frame.destroy();\n    }\n\n    this.source = [];\n    this.dataSource = [];\n    this.frames = {};\n    this.manager.removeKey(this.key);\n    this.manager = null;\n  }\n});\nmodule.exports = Texture;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/Texture.js"],"names":["Class","require","Frame","TextureSource","TEXTURE_MISSING_ERROR","Texture","initialize","manager","key","source","width","height","Array","isArray","dataSource","frames","customData","firstFrame","frameTotal","i","length","push","add","name","sourceIndex","x","y","has","frame","remove","get","destroy","console","warn","getTextureSourceIndex","getFramesFromTextureSource","includeBase","undefined","out","frameName","getFrameNames","Object","keys","idx","indexOf","splice","getSourceImage","image","getDataSourceImage","setDataSource","data","setFilter","filterMode","removeKey","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar Frame = require('./Frame');\r\nvar TextureSource = require('./TextureSource');\r\n\r\nvar TEXTURE_MISSING_ERROR = 'Texture.frame missing: ';\r\n\r\n/**\r\n * @classdesc\r\n * A Texture consists of a source, usually an Image from the Cache, and a collection of Frames.\r\n * The Frames represent the different areas of the Texture. For example a texture atlas\r\n * may have many Frames, one for each element within the atlas. Where-as a single image would have\r\n * just one frame, that encompasses the whole image.\r\n * \r\n * Every Texture, no matter where it comes from, always has at least 1 frame called the `__BASE` frame.\r\n * This frame represents the entirety of the source image.\r\n *\r\n * Textures are managed by the global TextureManager. This is a singleton class that is\r\n * responsible for creating and delivering Textures and their corresponding Frames to Game Objects.\r\n *\r\n * Sprites and other Game Objects get the texture data they need from the TextureManager.\r\n *\r\n * @class Texture\r\n * @memberof Phaser.Textures\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.TextureManager} manager - A reference to the Texture Manager this Texture belongs to.\r\n * @param {string} key - The unique string-based key of this Texture.\r\n * @param {(HTMLImageElement|HTMLCanvasElement|HTMLImageElement[]|HTMLCanvasElement[])} source - An array of sources that are used to create the texture. Usually Images, but can also be a Canvas.\r\n * @param {number} [width] - The width of the Texture. This is optional and automatically derived from the source images.\r\n * @param {number} [height] - The height of the Texture. This is optional and automatically derived from the source images.\r\n */\r\nvar Texture = new Class({\r\n\r\n    initialize:\r\n\r\n    function Texture (manager, key, source, width, height)\r\n    {\r\n        if (!Array.isArray(source))\r\n        {\r\n            source = [ source ];\r\n        }\r\n\r\n        /**\r\n         * A reference to the Texture Manager this Texture belongs to.\r\n         *\r\n         * @name Phaser.Textures.Texture#manager\r\n         * @type {Phaser.Textures.TextureManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The unique string-based key of this Texture.\r\n         *\r\n         * @name Phaser.Textures.Texture#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = key;\r\n\r\n        /**\r\n         * An array of TextureSource instances.\r\n         * These are unique to this Texture and contain the actual Image (or Canvas) data.\r\n         *\r\n         * @name Phaser.Textures.Texture#source\r\n         * @type {Phaser.Textures.TextureSource[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.source = [];\r\n\r\n        /**\r\n         * An array of TextureSource data instances.\r\n         * Used to store additional data images, such as normal maps or specular maps.\r\n         *\r\n         * @name Phaser.Textures.Texture#dataSource\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.dataSource = [];\r\n\r\n        /**\r\n         * A key-value object pair associating the unique Frame keys with the Frames objects.\r\n         *\r\n         * @name Phaser.Textures.Texture#frames\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.frames = {};\r\n\r\n        /**\r\n         * Any additional data that was set in the source JSON (if any),\r\n         * or any extra data you'd like to store relating to this texture\r\n         *\r\n         * @name Phaser.Textures.Texture#customData\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.customData = {};\r\n\r\n        /**\r\n         * The name of the first frame of the Texture.\r\n         *\r\n         * @name Phaser.Textures.Texture#firstFrame\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.firstFrame = '__BASE';\r\n\r\n        /**\r\n         * The total number of Frames in this Texture, including the `__BASE` frame.\r\n         * \r\n         * A Texture will always contain at least 1 frame because every Texture contains a `__BASE` frame by default,\r\n         * in addition to any extra frames that have been added to it, such as when parsing a Sprite Sheet or Texture Atlas.\r\n         *\r\n         * @name Phaser.Textures.Texture#frameTotal\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frameTotal = 0;\r\n\r\n        //  Load the Sources\r\n        for (var i = 0; i < source.length; i++)\r\n        {\r\n            this.source.push(new TextureSource(this, source[i], width, height));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds a new Frame to this Texture.\r\n     *\r\n     * A Frame is a rectangular region of a TextureSource with a unique index or string-based key.\r\n     * \r\n     * The name given must be unique within this Texture. If it already exists, this method will return `null`.\r\n     *\r\n     * @method Phaser.Textures.Texture#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|string)} name - The name of this Frame. The name is unique within the Texture.\r\n     * @param {integer} sourceIndex - The index of the TextureSource that this Frame is a part of.\r\n     * @param {number} x - The x coordinate of the top-left of this Frame.\r\n     * @param {number} y - The y coordinate of the top-left of this Frame.\r\n     * @param {number} width - The width of this Frame.\r\n     * @param {number} height - The height of this Frame.\r\n     *\r\n     * @return {?Phaser.Textures.Frame} The Frame that was added to this Texture, or `null` if the given name already exists.\r\n     */\r\n    add: function (name, sourceIndex, x, y, width, height)\r\n    {\r\n        if (this.has(name))\r\n        {\r\n            return null;\r\n        }\r\n\r\n        var frame = new Frame(this, name, sourceIndex, x, y, width, height);\r\n\r\n        this.frames[name] = frame;\r\n\r\n        //  Set the first frame of the Texture (other than __BASE)\r\n        //  This is used to ensure we don't spam the display with entire\r\n        //  atlases of sprite sheets, but instead just the first frame of them\r\n        //  should the dev incorrectly specify the frame index\r\n        if (this.firstFrame === '__BASE')\r\n        {\r\n            this.firstFrame = name;\r\n        }\r\n\r\n        this.frameTotal++;\r\n\r\n        return frame;\r\n    },\r\n\r\n    /**\r\n     * Removes the given Frame from this Texture. The Frame is destroyed immediately.\r\n     * \r\n     * Any Game Objects using this Frame should stop using it _before_ you remove it,\r\n     * as it does not happen automatically.\r\n     *\r\n     * @method Phaser.Textures.Texture#remove\r\n     * @since 3.19.0\r\n     *\r\n     * @param {string} name - The key of the Frame to remove.\r\n     *\r\n     * @return {boolean} True if a Frame with the matching key was removed from this Texture.\r\n     */\r\n    remove: function (name)\r\n    {\r\n        if (this.has(name))\r\n        {\r\n            var frame = this.get(name);\r\n\r\n            frame.destroy();\r\n\r\n            delete this.frames[name];\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if a Frame matching the given key exists within this Texture.\r\n     *\r\n     * @method Phaser.Textures.Texture#has\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} name - The key of the Frame to check for.\r\n     *\r\n     * @return {boolean} True if a Frame with the matching key exists in this Texture.\r\n     */\r\n    has: function (name)\r\n    {\r\n        return (this.frames[name]);\r\n    },\r\n\r\n    /**\r\n     * Gets a Frame from this Texture based on either the key or the index of the Frame.\r\n     *\r\n     * In a Texture Atlas Frames are typically referenced by a key.\r\n     * In a Sprite Sheet Frames are referenced by an index.\r\n     * Passing no value for the name returns the base texture.\r\n     *\r\n     * @method Phaser.Textures.Texture#get\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {Phaser.Textures.Frame} The Texture Frame.\r\n     */\r\n    get: function (name)\r\n    {\r\n        //  null, undefined, empty string, zero\r\n        if (!name)\r\n        {\r\n            name = this.firstFrame;\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            frame = this.frames[this.firstFrame];\r\n        }\r\n\r\n        return frame;\r\n    },\r\n\r\n    /**\r\n     * Takes the given TextureSource and returns the index of it within this Texture.\r\n     * If it's not in this Texture, it returns -1.\r\n     * Unless this Texture has multiple TextureSources, such as with a multi-atlas, this\r\n     * method will always return zero or -1.\r\n     *\r\n     * @method Phaser.Textures.Texture#getTextureSourceIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.TextureSource} source - The TextureSource to check.\r\n     *\r\n     * @return {integer} The index of the TextureSource within this Texture, or -1 if not in this Texture.\r\n     */\r\n    getTextureSourceIndex: function (source)\r\n    {\r\n        for (var i = 0; i < this.source.length; i++)\r\n        {\r\n            if (this.source[i] === source)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all the Frames in the given TextureSource.\r\n     *\r\n     * @method Phaser.Textures.Texture#getFramesFromTextureSource\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} sourceIndex - The index of the TextureSource to get the Frames from.\r\n     * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n     *\r\n     * @return {Phaser.Textures.Frame[]} An array of Texture Frames.\r\n     */\r\n    getFramesFromTextureSource: function (sourceIndex, includeBase)\r\n    {\r\n        if (includeBase === undefined) { includeBase = false; }\r\n\r\n        var out = [];\r\n\r\n        for (var frameName in this.frames)\r\n        {\r\n            if (frameName === '__BASE' && !includeBase)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frame = this.frames[frameName];\r\n\r\n            if (frame.sourceIndex === sourceIndex)\r\n            {\r\n                out.push(frame);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Returns an array with all of the names of the Frames in this Texture.\r\n     *\r\n     * Useful if you want to randomly assign a Frame to a Game Object, as you can\r\n     * pick a random element from the returned array.\r\n     *\r\n     * @method Phaser.Textures.Texture#getFrameNames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [includeBase=false] - Include the `__BASE` Frame in the output array?\r\n     *\r\n     * @return {string[]} An array of all Frame names in this Texture.\r\n     */\r\n    getFrameNames: function (includeBase)\r\n    {\r\n        if (includeBase === undefined) { includeBase = false; }\r\n\r\n        var out = Object.keys(this.frames);\r\n\r\n        if (!includeBase)\r\n        {\r\n            var idx = out.indexOf('__BASE');\r\n\r\n            if (idx !== -1)\r\n            {\r\n                out.splice(idx, 1);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Given a Frame name, return the source image it uses to render with.\r\n     *\r\n     * This will return the actual DOM Image or Canvas element.\r\n     *\r\n     * @method Phaser.Textures.Texture#getSourceImage\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {(HTMLImageElement|HTMLCanvasElement|Phaser.GameObjects.RenderTexture)} The DOM Image, Canvas Element or Render Texture.\r\n     */\r\n    getSourceImage: function (name)\r\n    {\r\n        if (name === undefined || name === null || this.frameTotal === 1)\r\n        {\r\n            name = '__BASE';\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n\r\n        if (frame)\r\n        {\r\n            return frame.source.image;\r\n        }\r\n        else\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            return this.frames['__BASE'].source.image;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Given a Frame name, return the data source image it uses to render with.\r\n     * You can use this to get the normal map for an image for example.\r\n     *\r\n     * This will return the actual DOM Image.\r\n     *\r\n     * @method Phaser.Textures.Texture#getDataSourceImage\r\n     * @since 3.7.0\r\n     *\r\n     * @param {(string|integer)} [name] - The string-based name, or integer based index, of the Frame to get from this Texture.\r\n     *\r\n     * @return {(HTMLImageElement|HTMLCanvasElement)} The DOM Image or Canvas Element.\r\n     */\r\n    getDataSourceImage: function (name)\r\n    {\r\n        if (name === undefined || name === null || this.frameTotal === 1)\r\n        {\r\n            name = '__BASE';\r\n        }\r\n\r\n        var frame = this.frames[name];\r\n        var idx;\r\n\r\n        if (!frame)\r\n        {\r\n            console.warn(TEXTURE_MISSING_ERROR + name);\r\n\r\n            idx = this.frames['__BASE'].sourceIndex;\r\n        }\r\n        else\r\n        {\r\n            idx = frame.sourceIndex;\r\n        }\r\n\r\n        return this.dataSource[idx].image;\r\n    },\r\n\r\n    /**\r\n     * Adds a data source image to this Texture.\r\n     *\r\n     * An example of a data source image would be a normal map, where all of the Frames for this Texture\r\n     * equally apply to the normal map.\r\n     *\r\n     * @method Phaser.Textures.Texture#setDataSource\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(HTMLImageElement|HTMLCanvasElement|HTMLImageElement[]|HTMLCanvasElement[])} data - The source image.\r\n     */\r\n    setDataSource: function (data)\r\n    {\r\n        if (!Array.isArray(data))\r\n        {\r\n            data = [ data ];\r\n        }\r\n        \r\n        for (var i = 0; i < data.length; i++)\r\n        {\r\n            var source = this.source[i];\r\n\r\n            this.dataSource.push(new TextureSource(this, data[i], source.width, source.height));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the Filter Mode for this Texture.\r\n     *\r\n     * The mode can be either Linear, the default, or Nearest.\r\n     *\r\n     * For pixel-art you should use Nearest.\r\n     *\r\n     * The mode applies to the entire Texture, not just a specific Frame of it.\r\n     *\r\n     * @method Phaser.Textures.Texture#setFilter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Textures.FilterMode} filterMode - The Filter Mode.\r\n     */\r\n    setFilter: function (filterMode)\r\n    {\r\n        var i;\r\n\r\n        for (i = 0; i < this.source.length; i++)\r\n        {\r\n            this.source[i].setFilter(filterMode);\r\n        }\r\n\r\n        for (i = 0; i < this.dataSource.length; i++)\r\n        {\r\n            this.dataSource[i].setFilter(filterMode);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Texture and releases references to its sources and frames.\r\n     *\r\n     * @method Phaser.Textures.Texture#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        var i;\r\n\r\n        for (i = 0; i < this.source.length; i++)\r\n        {\r\n            this.source[i].destroy();\r\n        }\r\n\r\n        for (i = 0; i < this.dataSource.length; i++)\r\n        {\r\n            this.dataSource[i].destroy();\r\n        }\r\n\r\n        for (var frameName in this.frames)\r\n        {\r\n            var frame = this.frames[frameName];\r\n\r\n            frame.destroy();\r\n        }\r\n\r\n        this.source = [];\r\n        this.dataSource = [];\r\n        this.frames = {};\r\n\r\n        this.manager.removeKey(this.key);\r\n\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Texture;\r\n"]},"metadata":{},"sourceType":"script"}