{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar MeshRender = require('./MeshRender');\n\nvar NOOP = require('../../utils/NOOP');\n/**\r\n * @classdesc\r\n * A Mesh Game Object.\r\n *\r\n * @class Mesh\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar Mesh = new Class({\n  Extends: GameObject,\n  Mixins: [Components.BlendMode, Components.Depth, Components.Mask, Components.Pipeline, Components.Size, Components.Texture, Components.Transform, Components.Visible, Components.ScrollFactor, MeshRender],\n  initialize: function Mesh(scene, x, y, vertices, uv, colors, alphas, texture, frame) {\n    GameObject.call(this, scene, 'Mesh');\n\n    if (vertices.length !== uv.length) {\n      throw new Error('Mesh Vertex count must match UV count');\n    }\n\n    var verticesUB = vertices.length / 2 | 0;\n\n    if (colors.length > 0 && colors.length < verticesUB) {\n      throw new Error('Mesh Color count must match Vertex count');\n    }\n\n    if (alphas.length > 0 && alphas.length < verticesUB) {\n      throw new Error('Mesh Alpha count must match Vertex count');\n    }\n\n    var i;\n\n    if (colors.length === 0) {\n      for (i = 0; i < verticesUB; ++i) {\n        colors[i] = 0xFFFFFF;\n      }\n    }\n\n    if (alphas.length === 0) {\n      for (i = 0; i < verticesUB; ++i) {\n        alphas[i] = 1.0;\n      }\n    }\n    /**\r\n     * An array containing the vertices data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#vertices\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.vertices = new Float32Array(vertices);\n    /**\r\n     * An array containing the uv data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#uv\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.uv = new Float32Array(uv);\n    /**\r\n     * An array containing the color data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#colors\r\n     * @type {Uint32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.colors = new Uint32Array(colors);\n    /**\r\n     * An array containing the alpha data for this Mesh.\r\n     *\r\n     * @name Phaser.GameObjects.Mesh#alphas\r\n     * @type {Float32Array}\r\n     * @since 3.0.0\r\n     */\n\n    this.alphas = new Float32Array(alphas);\n    /**\r\n     * Fill or additive mode used when blending the color values?\r\n     * \r\n     * @name Phaser.GameObjects.Mesh#tintFill\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.11.0\r\n     */\n\n    this.tintFill = false;\n    this.setTexture(texture, frame);\n    this.setPosition(x, y);\n    this.setSizeToFrame();\n    this.initPipeline();\n  },\n\n  /**\r\n   * This method is left intentionally empty and does not do anything.\r\n   * It is retained to allow a Mesh or Quad to be added to a Container.\r\n   * \r\n   * @method Phaser.GameObjects.Mesh#setAlpha\r\n   * @since 3.17.0\r\n   */\n  setAlpha: NOOP\n});\nmodule.exports = Mesh;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/mesh/Mesh.js"],"names":["Class","require","Components","GameObject","MeshRender","NOOP","Mesh","Extends","Mixins","BlendMode","Depth","Mask","Pipeline","Size","Texture","Transform","Visible","ScrollFactor","initialize","scene","x","y","vertices","uv","colors","alphas","texture","frame","call","length","Error","verticesUB","i","Float32Array","Uint32Array","tintFill","setTexture","setPosition","setSizeToFrame","initPipeline","setAlpha","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar MeshRender = require('./MeshRender');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n/**\r\n * @classdesc\r\n * A Mesh Game Object.\r\n *\r\n * @class Mesh\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @webglOnly\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number[]} vertices - An array containing the vertices data for this Mesh.\r\n * @param {number[]} uv - An array containing the uv data for this Mesh.\r\n * @param {number[]} colors - An array containing the color data for this Mesh.\r\n * @param {number[]} alphas - An array containing the alpha data for this Mesh.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Mesh = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.BlendMode,\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.Size,\r\n        Components.Texture,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        MeshRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Mesh (scene, x, y, vertices, uv, colors, alphas, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Mesh');\r\n\r\n        if (vertices.length !== uv.length)\r\n        {\r\n            throw new Error('Mesh Vertex count must match UV count');\r\n        }\r\n\r\n        var verticesUB = (vertices.length / 2) | 0;\r\n\r\n        if (colors.length > 0 && colors.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Color count must match Vertex count');\r\n        }\r\n\r\n        if (alphas.length > 0 && alphas.length < verticesUB)\r\n        {\r\n            throw new Error('Mesh Alpha count must match Vertex count');\r\n        }\r\n\r\n        var i;\r\n\r\n        if (colors.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                colors[i] = 0xFFFFFF;\r\n            }\r\n        }\r\n\r\n        if (alphas.length === 0)\r\n        {\r\n            for (i = 0; i < verticesUB; ++i)\r\n            {\r\n                alphas[i] = 1.0;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * An array containing the vertices data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#vertices\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.vertices = new Float32Array(vertices);\r\n\r\n        /**\r\n         * An array containing the uv data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#uv\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.uv = new Float32Array(uv);\r\n\r\n        /**\r\n         * An array containing the color data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#colors\r\n         * @type {Uint32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.colors = new Uint32Array(colors);\r\n\r\n        /**\r\n         * An array containing the alpha data for this Mesh.\r\n         *\r\n         * @name Phaser.GameObjects.Mesh#alphas\r\n         * @type {Float32Array}\r\n         * @since 3.0.0\r\n         */\r\n        this.alphas = new Float32Array(alphas);\r\n\r\n        /**\r\n         * Fill or additive mode used when blending the color values?\r\n         * \r\n         * @name Phaser.GameObjects.Mesh#tintFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.tintFill = false;\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setPosition(x, y);\r\n        this.setSizeToFrame();\r\n        this.initPipeline();\r\n    },\r\n\r\n    /**\r\n     * This method is left intentionally empty and does not do anything.\r\n     * It is retained to allow a Mesh or Quad to be added to a Container.\r\n     * \r\n     * @method Phaser.GameObjects.Mesh#setAlpha\r\n     * @since 3.17.0\r\n     */\r\n    setAlpha: NOOP\r\n\r\n});\r\n\r\nmodule.exports = Mesh;\r\n"]},"metadata":{},"sourceType":"script"}