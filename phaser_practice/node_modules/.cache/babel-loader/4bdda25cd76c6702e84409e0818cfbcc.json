{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Color = require('./Color');\n/**\r\n * Converts a CSS 'web' string into a Phaser Color object.\r\n * \r\n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\r\n *\r\n * @function Phaser.Display.Color.RGBStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\n\n\nvar RGBStringToColor = function (rgb) {\n  var color = new Color();\n  var result = /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/.exec(rgb.toLowerCase());\n\n  if (result) {\n    var r = parseInt(result[1], 10);\n    var g = parseInt(result[2], 10);\n    var b = parseInt(result[3], 10);\n    var a = result[4] !== undefined ? parseFloat(result[4]) : 1;\n    color.setTo(r, g, b, a * 255);\n  }\n\n  return color;\n};\n\nmodule.exports = RGBStringToColor;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/RGBStringToColor.js"],"names":["Color","require","RGBStringToColor","rgb","color","result","exec","toLowerCase","r","parseInt","g","b","a","undefined","parseFloat","setTo","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,gBAAgB,GAAG,UAAUC,GAAV,EACvB;AACI,MAAIC,KAAK,GAAG,IAAIJ,KAAJ,EAAZ;AAEA,MAAIK,MAAM,GAAI,2EAAD,CAA8EC,IAA9E,CAAmFH,GAAG,CAACI,WAAJ,EAAnF,CAAb;;AAEA,MAAIF,MAAJ,EACA;AACI,QAAIG,CAAC,GAAGC,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AACA,QAAIK,CAAC,GAAGD,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AACA,QAAIM,CAAC,GAAGF,QAAQ,CAACJ,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAAhB;AACA,QAAIO,CAAC,GAAIP,MAAM,CAAC,CAAD,CAAN,KAAcQ,SAAf,GAA4BC,UAAU,CAACT,MAAM,CAAC,CAAD,CAAP,CAAtC,GAAoD,CAA5D;AAEAD,IAAAA,KAAK,CAACW,KAAN,CAAYP,CAAZ,EAAeE,CAAf,EAAkBC,CAAlB,EAAqBC,CAAC,GAAG,GAAzB;AACH;;AAED,SAAOR,KAAP;AACH,CAjBD;;AAmBAY,MAAM,CAACC,OAAP,GAAiBf,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\n\r\n/**\r\n * Converts a CSS 'web' string into a Phaser Color object.\r\n * \r\n * The web string can be in the format `'rgb(r,g,b)'` or `'rgba(r,g,b,a)'` where r/g/b are in the range [0..255] and a is in the range [0..1].\r\n *\r\n * @function Phaser.Display.Color.RGBStringToColor\r\n * @since 3.0.0\r\n *\r\n * @param {string} rgb - The CSS format color string, using the `rgb` or `rgba` format.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar RGBStringToColor = function (rgb)\r\n{\r\n    var color = new Color();\r\n\r\n    var result = (/^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d+(?:\\.\\d+)?))?\\s*\\)$/).exec(rgb.toLowerCase());\r\n\r\n    if (result)\r\n    {\r\n        var r = parseInt(result[1], 10);\r\n        var g = parseInt(result[2], 10);\r\n        var b = parseInt(result[3], 10);\r\n        var a = (result[4] !== undefined) ? parseFloat(result[4]) : 1;\r\n\r\n        color.setTo(r, g, b, a * 255);\r\n    }\r\n\r\n    return color;\r\n};\r\n\r\nmodule.exports = RGBStringToColor;\r\n"]},"metadata":{},"sourceType":"script"}