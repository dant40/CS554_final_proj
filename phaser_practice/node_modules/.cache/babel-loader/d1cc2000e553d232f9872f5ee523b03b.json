{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Container#renderWebGL\r\n * @since 3.4.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Container} container - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar ContainerWebGLRenderer = function (renderer, container, interpolationPercentage, camera, parentMatrix) {\n  var children = container.list;\n\n  if (children.length === 0) {\n    return;\n  }\n\n  var transformMatrix = container.localTransform;\n\n  if (parentMatrix) {\n    transformMatrix.loadIdentity();\n    transformMatrix.multiply(parentMatrix);\n    transformMatrix.translate(container.x, container.y);\n    transformMatrix.rotate(container.rotation);\n    transformMatrix.scale(container.scaleX, container.scaleY);\n  } else {\n    transformMatrix.applyITRS(container.x, container.y, container.rotation, container.scaleX, container.scaleY);\n  }\n\n  var containerHasBlendMode = container.blendMode !== -1;\n\n  if (!containerHasBlendMode) {\n    //  If Container is SKIP_TEST then set blend mode to be Normal\n    renderer.setBlendMode(0);\n  }\n\n  var alpha = container.alpha;\n  var scrollFactorX = container.scrollFactorX;\n  var scrollFactorY = container.scrollFactorY;\n  var list = children;\n  var childCount = children.length;\n\n  for (var i = 0; i < childCount; i++) {\n    var child = children[i];\n\n    if (!child.willRender(camera)) {\n      continue;\n    }\n\n    var childAlphaTopLeft;\n    var childAlphaTopRight;\n    var childAlphaBottomLeft;\n    var childAlphaBottomRight;\n\n    if (child.alphaTopLeft !== undefined) {\n      childAlphaTopLeft = child.alphaTopLeft;\n      childAlphaTopRight = child.alphaTopRight;\n      childAlphaBottomLeft = child.alphaBottomLeft;\n      childAlphaBottomRight = child.alphaBottomRight;\n    } else {\n      var childAlpha = child.alpha;\n      childAlphaTopLeft = childAlpha;\n      childAlphaTopRight = childAlpha;\n      childAlphaBottomLeft = childAlpha;\n      childAlphaBottomRight = childAlpha;\n    }\n\n    var childScrollFactorX = child.scrollFactorX;\n    var childScrollFactorY = child.scrollFactorY;\n\n    if (!containerHasBlendMode && child.blendMode !== renderer.currentBlendMode) {\n      //  If Container doesn't have its own blend mode, then a child can have one\n      renderer.setBlendMode(child.blendMode);\n    }\n\n    var mask = child.mask;\n\n    if (mask) {\n      mask.preRenderWebGL(renderer, child, camera);\n    }\n\n    var type = child.type;\n\n    if (type !== renderer.currentType) {\n      renderer.newType = true;\n      renderer.currentType = type;\n    }\n\n    renderer.nextTypeMatch = i < childCount - 1 ? list[i + 1].type === renderer.currentType : false; //  Set parent values\n\n    child.setScrollFactor(childScrollFactorX * scrollFactorX, childScrollFactorY * scrollFactorY);\n    child.setAlpha(childAlphaTopLeft * alpha, childAlphaTopRight * alpha, childAlphaBottomLeft * alpha, childAlphaBottomRight * alpha); //  Render\n\n    child.renderWebGL(renderer, child, interpolationPercentage, camera, transformMatrix); //  Restore original values\n\n    child.setAlpha(childAlphaTopLeft, childAlphaTopRight, childAlphaBottomLeft, childAlphaBottomRight);\n    child.setScrollFactor(childScrollFactorX, childScrollFactorY);\n\n    if (mask) {\n      mask.postRenderWebGL(renderer, camera);\n    }\n\n    renderer.newType = false;\n  }\n};\n\nmodule.exports = ContainerWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/container/ContainerWebGLRenderer.js"],"names":["ContainerWebGLRenderer","renderer","container","interpolationPercentage","camera","parentMatrix","children","list","length","transformMatrix","localTransform","loadIdentity","multiply","translate","x","y","rotate","rotation","scale","scaleX","scaleY","applyITRS","containerHasBlendMode","blendMode","setBlendMode","alpha","scrollFactorX","scrollFactorY","childCount","i","child","willRender","childAlphaTopLeft","childAlphaTopRight","childAlphaBottomLeft","childAlphaBottomRight","alphaTopLeft","undefined","alphaTopRight","alphaBottomLeft","alphaBottomRight","childAlpha","childScrollFactorX","childScrollFactorY","currentBlendMode","mask","preRenderWebGL","type","currentType","newType","nextTypeMatch","setScrollFactor","setAlpha","renderWebGL","postRenderWebGL","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Container#renderWebGL\r\n * @since 3.4.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Container} container - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ContainerWebGLRenderer = function (renderer, container, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var children = container.list;\r\n\r\n    if (children.length === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var transformMatrix = container.localTransform;\r\n    \r\n    if (parentMatrix)\r\n    {\r\n        transformMatrix.loadIdentity();\r\n        transformMatrix.multiply(parentMatrix);\r\n        transformMatrix.translate(container.x, container.y);\r\n        transformMatrix.rotate(container.rotation);\r\n        transformMatrix.scale(container.scaleX, container.scaleY);\r\n    }\r\n    else\r\n    {\r\n        transformMatrix.applyITRS(container.x, container.y, container.rotation, container.scaleX, container.scaleY);\r\n    }\r\n\r\n    var containerHasBlendMode = (container.blendMode !== -1);\r\n\r\n    if (!containerHasBlendMode)\r\n    {\r\n        //  If Container is SKIP_TEST then set blend mode to be Normal\r\n        renderer.setBlendMode(0);\r\n    }\r\n\r\n    var alpha = container.alpha;\r\n\r\n    var scrollFactorX = container.scrollFactorX;\r\n    var scrollFactorY = container.scrollFactorY;\r\n\r\n    var list = children;\r\n    var childCount = children.length;\r\n\r\n    for (var i = 0; i < childCount; i++)\r\n    {\r\n        var child = children[i];\r\n\r\n        if (!child.willRender(camera))\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var childAlphaTopLeft;\r\n        var childAlphaTopRight;\r\n        var childAlphaBottomLeft;\r\n        var childAlphaBottomRight;\r\n\r\n        if (child.alphaTopLeft !== undefined)\r\n        {\r\n            childAlphaTopLeft = child.alphaTopLeft;\r\n            childAlphaTopRight = child.alphaTopRight;\r\n            childAlphaBottomLeft = child.alphaBottomLeft;\r\n            childAlphaBottomRight = child.alphaBottomRight;\r\n        }\r\n        else\r\n        {\r\n            var childAlpha = child.alpha;\r\n\r\n            childAlphaTopLeft = childAlpha;\r\n            childAlphaTopRight = childAlpha;\r\n            childAlphaBottomLeft = childAlpha;\r\n            childAlphaBottomRight = childAlpha;\r\n        }\r\n\r\n        var childScrollFactorX = child.scrollFactorX;\r\n        var childScrollFactorY = child.scrollFactorY;\r\n\r\n        if (!containerHasBlendMode && child.blendMode !== renderer.currentBlendMode)\r\n        {\r\n            //  If Container doesn't have its own blend mode, then a child can have one\r\n            renderer.setBlendMode(child.blendMode);\r\n        }\r\n\r\n        var mask = child.mask;\r\n\r\n        if (mask)\r\n        {\r\n            mask.preRenderWebGL(renderer, child, camera);\r\n        }\r\n\r\n        var type = child.type;\r\n\r\n        if (type !== renderer.currentType)\r\n        {\r\n            renderer.newType = true;\r\n            renderer.currentType = type;\r\n        }\r\n\r\n        renderer.nextTypeMatch = (i < childCount - 1) ? (list[i + 1].type === renderer.currentType) : false;\r\n\r\n        //  Set parent values\r\n        child.setScrollFactor(childScrollFactorX * scrollFactorX, childScrollFactorY * scrollFactorY);\r\n\r\n        child.setAlpha(childAlphaTopLeft * alpha, childAlphaTopRight * alpha, childAlphaBottomLeft * alpha, childAlphaBottomRight * alpha);\r\n\r\n        //  Render\r\n        child.renderWebGL(renderer, child, interpolationPercentage, camera, transformMatrix);\r\n\r\n        //  Restore original values\r\n\r\n        child.setAlpha(childAlphaTopLeft, childAlphaTopRight, childAlphaBottomLeft, childAlphaBottomRight);\r\n\r\n        child.setScrollFactor(childScrollFactorX, childScrollFactorY);\r\n\r\n        if (mask)\r\n        {\r\n            mask.postRenderWebGL(renderer, camera);\r\n        }\r\n\r\n        renderer.newType = false;\r\n    }\r\n};\r\n\r\nmodule.exports = ContainerWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}