{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetColor = require('./GetColor');\n/**\r\n * Converts an HSV (hue, saturation and value) color value to RGB.\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes HSV values are contained in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.HSVToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n * @param {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} [out] - A Color object to store the results in. If not given a new ColorObject will be created.\r\n *\r\n * @return {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} An object with the red, green and blue values set in the r, g and b properties.\r\n */\n\n\nvar HSVToRGB = function (h, s, v, out) {\n  if (s === undefined) {\n    s = 1;\n  }\n\n  if (v === undefined) {\n    v = 1;\n  }\n\n  var i = Math.floor(h * 6);\n  var f = h * 6 - i;\n  var p = Math.floor(v * (1 - s) * 255);\n  var q = Math.floor(v * (1 - f * s) * 255);\n  var t = Math.floor(v * (1 - (1 - f) * s) * 255);\n  v = Math.floor(v *= 255);\n  var r = v;\n  var g = v;\n  var b = v;\n  var c = i % 6;\n\n  if (c === 0) {\n    g = t;\n    b = p;\n  } else if (c === 1) {\n    r = q;\n    b = p;\n  } else if (c === 2) {\n    r = p;\n    b = t;\n  } else if (c === 3) {\n    r = p;\n    g = q;\n  } else if (c === 4) {\n    r = t;\n    g = p;\n  } else if (c === 5) {\n    g = p;\n    b = q;\n  }\n\n  if (!out) {\n    return {\n      r: r,\n      g: g,\n      b: b,\n      color: GetColor(r, g, b)\n    };\n  } else if (out.setTo) {\n    return out.setTo(r, g, b, out.alpha, false);\n  } else {\n    out.r = r;\n    out.g = g;\n    out.b = b;\n    out.color = GetColor(r, g, b);\n    return out;\n  }\n};\n\nmodule.exports = HSVToRGB;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/HSVToRGB.js"],"names":["GetColor","require","HSVToRGB","h","s","v","out","undefined","i","Math","floor","f","p","q","t","r","g","b","c","color","setTo","alpha","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetColor = require('./GetColor');\r\n\r\n/**\r\n * Converts an HSV (hue, saturation and value) color value to RGB.\r\n * Conversion formula from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes HSV values are contained in the set [0, 1].\r\n * Based on code by Michael Jackson (https://github.com/mjijackson)\r\n *\r\n * @function Phaser.Display.Color.HSVToRGB\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n * @param {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} [out] - A Color object to store the results in. If not given a new ColorObject will be created.\r\n *\r\n * @return {(Phaser.Types.Display.ColorObject|Phaser.Display.Color)} An object with the red, green and blue values set in the r, g and b properties.\r\n */\r\nvar HSVToRGB = function (h, s, v, out)\r\n{\r\n    if (s === undefined) { s = 1; }\r\n    if (v === undefined) { v = 1; }\r\n\r\n    var i = Math.floor(h * 6);\r\n    var f = h * 6 - i;\r\n\r\n    var p = Math.floor((v * (1 - s)) * 255);\r\n    var q = Math.floor((v * (1 - f * s)) * 255);\r\n    var t = Math.floor((v * (1 - (1 - f) * s)) * 255);\r\n\r\n    v = Math.floor(v *= 255);\r\n\r\n    var r = v;\r\n    var g = v;\r\n    var b = v;\r\n\r\n    var c = i % 6;\r\n\r\n    if (c === 0)\r\n    {\r\n        g = t;\r\n        b = p;\r\n    }\r\n    else if (c === 1)\r\n    {\r\n        r = q;\r\n        b = p;\r\n    }\r\n    else if (c === 2)\r\n    {\r\n        r = p;\r\n        b = t;\r\n    }\r\n    else if (c === 3)\r\n    {\r\n        r = p;\r\n        g = q;\r\n    }\r\n    else if (c === 4)\r\n    {\r\n        r = t;\r\n        g = p;\r\n    }\r\n    else if (c === 5)\r\n    {\r\n        g = p;\r\n        b = q;\r\n    }\r\n\r\n    if (!out)\r\n    {\r\n        return { r: r, g: g, b: b, color: GetColor(r, g, b) };\r\n    }\r\n    else if (out.setTo)\r\n    {\r\n        return out.setTo(r, g, b, out.alpha, false);\r\n    }\r\n    else\r\n    {\r\n        out.r = r;\r\n        out.g = g;\r\n        out.b = b;\r\n        out.color = GetColor(r, g, b);\r\n\r\n        return out;\r\n    }\r\n};\r\n\r\nmodule.exports = HSVToRGB;\r\n"]},"metadata":{},"sourceType":"script"}