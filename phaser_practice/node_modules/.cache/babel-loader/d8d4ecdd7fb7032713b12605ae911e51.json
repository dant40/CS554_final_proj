{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Get the nearest point on a line perpendicular to the given point.\r\n *\r\n * @function Phaser.Geom.Line.GetNearestPoint\r\n * @since 3.16.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to get the nearest point on.\r\n * @param {(Phaser.Geom.Point|object)} point - The point to get the nearest point to.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional point, or point-like object, to store the coordinates of the nearest point on the line.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The nearest point on the line.\r\n */\n\n\nvar GetNearestPoint = function (line, point, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var L2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n  if (L2 === 0) {\n    return out;\n  }\n\n  var r = ((point.x - x1) * (x2 - x1) + (point.y - y1) * (y2 - y1)) / L2;\n  out.x = x1 + r * (x2 - x1);\n  out.y = y1 + r * (y2 - y1);\n  return out;\n};\n\nmodule.exports = GetNearestPoint;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/line/GetNearestPoint.js"],"names":["Point","require","GetNearestPoint","line","point","out","undefined","x1","y1","x2","y2","L2","r","x","y","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,eAAe,GAAG,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,GAAvB,EACtB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIL,KAAJ,EAAN;AAAoB;;AAE7C,MAAIO,EAAE,GAAGJ,IAAI,CAACI,EAAd;AACA,MAAIC,EAAE,GAAGL,IAAI,CAACK,EAAd;AAEA,MAAIC,EAAE,GAAGN,IAAI,CAACM,EAAd;AACA,MAAIC,EAAE,GAAGP,IAAI,CAACO,EAAd;AAEA,MAAIC,EAAE,GAAK,CAACF,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACG,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAArC;;AAEA,MAAIG,EAAE,KAAK,CAAX,EACA;AACI,WAAON,GAAP;AACH;;AAED,MAAIO,CAAC,GAAG,CAAE,CAACR,KAAK,CAACS,CAAN,GAAUN,EAAX,KAAkBE,EAAE,GAAGF,EAAvB,CAAD,GAAgC,CAACH,KAAK,CAACU,CAAN,GAAUN,EAAX,KAAkBE,EAAE,GAAGF,EAAvB,CAAjC,IAAgEG,EAAxE;AAEAN,EAAAA,GAAG,CAACQ,CAAJ,GAAQN,EAAE,GAAIK,CAAC,IAAIH,EAAE,GAAGF,EAAT,CAAf;AACAF,EAAAA,GAAG,CAACS,CAAJ,GAAQN,EAAE,GAAII,CAAC,IAAIF,EAAE,GAAGF,EAAT,CAAf;AAEA,SAAOH,GAAP;AACH,CAvBD;;AAyBAU,MAAM,CAACC,OAAP,GAAiBd,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Get the nearest point on a line perpendicular to the given point.\r\n *\r\n * @function Phaser.Geom.Line.GetNearestPoint\r\n * @since 3.16.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to get the nearest point on.\r\n * @param {(Phaser.Geom.Point|object)} point - The point to get the nearest point to.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional point, or point-like object, to store the coordinates of the nearest point on the line.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The nearest point on the line.\r\n */\r\nvar GetNearestPoint = function (line, point, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    var L2 = (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n    if (L2 === 0)\r\n    {\r\n        return out;\r\n    }\r\n\r\n    var r = (((point.x - x1) * (x2 - x1)) + ((point.y - y1) * (y2 - y1))) / L2;\r\n\r\n    out.x = x1 + (r * (x2 - x1));\r\n    out.y = y1 + (r * (y2 - y1));\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetNearestPoint;\r\n"]},"metadata":{},"sourceType":"script"}