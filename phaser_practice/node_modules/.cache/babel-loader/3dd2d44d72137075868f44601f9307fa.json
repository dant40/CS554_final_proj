{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetValue = require('../../utils/object/GetValue');\n/**\r\n * Parses a Retro Font configuration object so you can pass it to the BitmapText constructor\r\n * and create a BitmapText object using a fixed-width retro font.\r\n *\r\n * @function Phaser.GameObjects.RetroFont.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Phaser Scene.\r\n * @param {Phaser.Types.GameObjects.BitmapText.RetroFontConfig} config - The font configuration object.\r\n *\r\n * @return {object} A parsed Bitmap Font data entry for the Bitmap Font cache.\r\n */\n\n\nvar ParseRetroFont = function (scene, config) {\n  var w = config.width;\n  var h = config.height;\n  var cx = Math.floor(w / 2);\n  var cy = Math.floor(h / 2);\n  var letters = GetValue(config, 'chars', '');\n\n  if (letters === '') {\n    return;\n  }\n\n  var key = GetValue(config, 'image', '');\n  var offsetX = GetValue(config, 'offset.x', 0);\n  var offsetY = GetValue(config, 'offset.y', 0);\n  var spacingX = GetValue(config, 'spacing.x', 0);\n  var spacingY = GetValue(config, 'spacing.y', 0);\n  var lineSpacing = GetValue(config, 'lineSpacing', 0);\n  var charsPerRow = GetValue(config, 'charsPerRow', null);\n\n  if (charsPerRow === null) {\n    charsPerRow = scene.sys.textures.getFrame(key).width / w;\n\n    if (charsPerRow > letters.length) {\n      charsPerRow = letters.length;\n    }\n  }\n\n  var x = offsetX;\n  var y = offsetY;\n  var data = {\n    retroFont: true,\n    font: key,\n    size: w,\n    lineHeight: h + lineSpacing,\n    chars: {}\n  };\n  var r = 0;\n\n  for (var i = 0; i < letters.length; i++) {\n    // var node = letters[i];\n    var charCode = letters.charCodeAt(i);\n    data.chars[charCode] = {\n      x: x,\n      y: y,\n      width: w,\n      height: h,\n      centerX: cx,\n      centerY: cy,\n      xOffset: 0,\n      yOffset: 0,\n      xAdvance: w,\n      data: {},\n      kerning: {}\n    };\n    r++;\n\n    if (r === charsPerRow) {\n      r = 0;\n      x = offsetX;\n      y += h + spacingY;\n    } else {\n      x += w + spacingX;\n    }\n  }\n\n  var entry = {\n    data: data,\n    frame: null,\n    texture: key\n  };\n  return entry;\n};\n\nmodule.exports = ParseRetroFont;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/bitmaptext/ParseRetroFont.js"],"names":["GetValue","require","ParseRetroFont","scene","config","w","width","h","height","cx","Math","floor","cy","letters","key","offsetX","offsetY","spacingX","spacingY","lineSpacing","charsPerRow","sys","textures","getFrame","length","x","y","data","retroFont","font","size","lineHeight","chars","r","i","charCode","charCodeAt","centerX","centerY","xOffset","yOffset","xAdvance","kerning","entry","frame","texture","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetValue = require('../../utils/object/GetValue');\r\n\r\n/**\r\n * Parses a Retro Font configuration object so you can pass it to the BitmapText constructor\r\n * and create a BitmapText object using a fixed-width retro font.\r\n *\r\n * @function Phaser.GameObjects.RetroFont.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Phaser Scene.\r\n * @param {Phaser.Types.GameObjects.BitmapText.RetroFontConfig} config - The font configuration object.\r\n *\r\n * @return {object} A parsed Bitmap Font data entry for the Bitmap Font cache.\r\n */\r\nvar ParseRetroFont = function (scene, config)\r\n{\r\n    var w = config.width;\r\n    var h = config.height;\r\n    var cx = Math.floor(w / 2);\r\n    var cy = Math.floor(h / 2);\r\n    var letters = GetValue(config, 'chars', '');\r\n\r\n    if (letters === '')\r\n    {\r\n        return;\r\n    }\r\n\r\n    var key = GetValue(config, 'image', '');\r\n    var offsetX = GetValue(config, 'offset.x', 0);\r\n    var offsetY = GetValue(config, 'offset.y', 0);\r\n    var spacingX = GetValue(config, 'spacing.x', 0);\r\n    var spacingY = GetValue(config, 'spacing.y', 0);\r\n    var lineSpacing = GetValue(config, 'lineSpacing', 0);\r\n\r\n    var charsPerRow = GetValue(config, 'charsPerRow', null);\r\n\r\n    if (charsPerRow === null)\r\n    {\r\n        charsPerRow = scene.sys.textures.getFrame(key).width / w;\r\n\r\n        if (charsPerRow > letters.length)\r\n        {\r\n            charsPerRow = letters.length;\r\n        }\r\n    }\r\n\r\n    var x = offsetX;\r\n    var y = offsetY;\r\n\r\n    var data = {\r\n        retroFont: true,\r\n        font: key,\r\n        size: w,\r\n        lineHeight: h + lineSpacing,\r\n        chars: {}\r\n    };\r\n\r\n    var r = 0;\r\n\r\n    for (var i = 0; i < letters.length; i++)\r\n    {\r\n        // var node = letters[i];\r\n\r\n        var charCode = letters.charCodeAt(i);\r\n\r\n        data.chars[charCode] =\r\n        {\r\n            x: x,\r\n            y: y,\r\n            width: w,\r\n            height: h,\r\n            centerX: cx,\r\n            centerY: cy,\r\n            xOffset: 0,\r\n            yOffset: 0,\r\n            xAdvance: w,\r\n            data: {},\r\n            kerning: {}\r\n        };\r\n\r\n        r++;\r\n\r\n        if (r === charsPerRow)\r\n        {\r\n            r = 0;\r\n            x = offsetX;\r\n            y += h + spacingY;\r\n        }\r\n        else\r\n        {\r\n            x += w + spacingX;\r\n        }\r\n    }\r\n\r\n    var entry = {\r\n        data: data,\r\n        frame: null,\r\n        texture: key\r\n    };\r\n\r\n    return entry;\r\n};\r\n\r\nmodule.exports = ParseRetroFont;\r\n"]},"metadata":{},"sourceType":"script"}