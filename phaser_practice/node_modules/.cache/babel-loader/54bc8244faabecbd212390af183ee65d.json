{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar GetValue = require('../utils/object/GetValue');\n\nvar NOOP = require('../utils/NOOP');\n\nvar RequestAnimationFrame = require('../dom/RequestAnimationFrame'); // http://www.testufo.com/#test=animation-time-graph\n\n/**\r\n * @classdesc\r\n * The core runner class that Phaser uses to handle the game loop. It can use either Request Animation Frame,\r\n * or SetTimeout, based on browser support and config settings, to create a continuous loop within the browser.\r\n * \r\n * Each time the loop fires, `TimeStep.step` is called and this is then passed onto the core Game update loop,\r\n * it is the core heartbeat of your game. It will fire as often as Request Animation Frame is capable of handling\r\n * on the target device.\r\n * \r\n * Note that there are lots of situations where a browser will stop updating your game. Such as if the player\r\n * switches tabs, or covers up the browser window with another application. In these cases, the 'heartbeat'\r\n * of your game will pause, and only resume when focus is returned to it by the player. There is no way to avoid\r\n * this situation, all you can do is use the visibility events the browser, and Phaser, provide to detect when\r\n * it has happened and then gracefully recover.\r\n *\r\n * @class TimeStep\r\n * @memberof Phaser.Core\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this Time Step.\r\n * @param {Phaser.Types.Core.FPSConfig} config\r\n */\n\n\nvar TimeStep = new Class({\n  initialize: function TimeStep(game, config) {\n    /**\r\n     * A reference to the Phaser.Game instance.\r\n     *\r\n     * @name Phaser.Core.TimeStep#game\r\n     * @type {Phaser.Game}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n    this.game = game;\n    /**\r\n     * The Request Animation Frame DOM Event handler.\r\n     *\r\n     * @name Phaser.Core.TimeStep#raf\r\n     * @type {Phaser.DOM.RequestAnimationFrame}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.raf = new RequestAnimationFrame();\n    /**\r\n     * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n     *\r\n     * @name Phaser.Core.TimeStep#started\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.started = false;\n    /**\r\n     * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n     * The difference between this value and `started` is that `running` is toggled when\r\n     * the TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\r\n     * the TimeStep is actually stopped, not just paused.\r\n     *\r\n     * @name Phaser.Core.TimeStep#running\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.running = false;\n    /**\r\n     * The minimum fps rate you want the Time Step to run at.\r\n     *\r\n     * @name Phaser.Core.TimeStep#minFps\r\n     * @type {integer}\r\n     * @default 5\r\n     * @since 3.0.0\r\n     */\n\n    this.minFps = GetValue(config, 'min', 5);\n    /**\r\n     * The target fps rate for the Time Step to run at.\r\n     *\r\n     * Setting this value will not actually change the speed at which the browser runs, that is beyond\r\n     * the control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\r\n     * is spiraling out of control.\r\n     *\r\n     * @name Phaser.Core.TimeStep#targetFps\r\n     * @type {integer}\r\n     * @default 60\r\n     * @since 3.0.0\r\n     */\n\n    this.targetFps = GetValue(config, 'target', 60);\n    /**\r\n     * The minFps value in ms.\r\n     * Defaults to 200ms between frames (i.e. super slow!)\r\n     *\r\n     * @name Phaser.Core.TimeStep#_min\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._min = 1000 / this.minFps;\n    /**\r\n     * The targetFps value in ms.\r\n     * Defaults to 16.66ms between frames (i.e. normal)\r\n     *\r\n     * @name Phaser.Core.TimeStep#_target\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._target = 1000 / this.targetFps;\n    /**\r\n     * An exponential moving average of the frames per second.\r\n     *\r\n     * @name Phaser.Core.TimeStep#actualFps\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 60\r\n     * @since 3.0.0\r\n     */\n\n    this.actualFps = this.targetFps;\n    /**\r\n     * The time at which the next fps rate update will take place.\r\n     * When an fps update happens, the `framesThisSecond` value is reset.\r\n     *\r\n     * @name Phaser.Core.TimeStep#nextFpsUpdate\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.nextFpsUpdate = 0;\n    /**\r\n     * The number of frames processed this second.\r\n     *\r\n     * @name Phaser.Core.TimeStep#framesThisSecond\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.framesThisSecond = 0;\n    /**\r\n     * A callback to be invoked each time the Time Step steps.\r\n     *\r\n     * @name Phaser.Core.TimeStep#callback\r\n     * @type {Phaser.Types.Core.TimeStepCallback}\r\n     * @default NOOP\r\n     * @since 3.0.0\r\n     */\n\n    this.callback = NOOP;\n    /**\r\n     * You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\r\n     * the `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.\r\n     *\r\n     * @name Phaser.Core.TimeStep#forceSetTimeOut\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.forceSetTimeOut = GetValue(config, 'forceSetTimeOut', false);\n    /**\r\n     * The time, calculated at the start of the current step, as smoothed by the delta value.\r\n     *\r\n     * @name Phaser.Core.TimeStep#time\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.time = 0;\n    /**\r\n     * The time at which the game started running. This value is adjusted if the game is then\r\n     * paused and resumes.\r\n     *\r\n     * @name Phaser.Core.TimeStep#startTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.startTime = 0;\n    /**\r\n     * The time, as returned by `performance.now` of the previous step.\r\n     *\r\n     * @name Phaser.Core.TimeStep#lastTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lastTime = 0;\n    /**\r\n     * The current frame the game is on. This counter is incremented once every game step, regardless of how much\r\n     * time has passed and is unaffected by delta smoothing.\r\n     *\r\n     * @name Phaser.Core.TimeStep#frame\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = 0;\n    /**\r\n     * Is the browser currently considered in focus by the Page Visibility API?\r\n     * This value is set in the `blur` method, which is called automatically by the Game instance.\r\n     *\r\n     * @name Phaser.Core.TimeStep#inFocus\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.inFocus = true;\n    /**\r\n     * The timestamp at which the game became paused, as determined by the Page Visibility API.\r\n     *\r\n     * @name Phaser.Core.TimeStep#_pauseTime\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._pauseTime = 0;\n    /**\r\n     * An internal counter to allow for the browser 'cooling down' after coming back into focus.\r\n     *\r\n     * @name Phaser.Core.TimeStep#_coolDown\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._coolDown = 0;\n    /**\r\n     * The delta time, in ms, since the last game step. This is a clamped and smoothed average value.\r\n     *\r\n     * @name Phaser.Core.TimeStep#delta\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delta = 0;\n    /**\r\n     * Internal index of the delta history position.\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaIndex\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaIndex = 0;\n    /**\r\n     * Internal array holding the previous delta values, used for delta smoothing.\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaHistory\r\n     * @type {integer[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaHistory = [];\n    /**\r\n     * The maximum number of delta values that are retained in order to calculate a smoothed moving average.\r\n     * \r\n     * This can be changed in the Game Config via the `fps.deltaHistory` property. The default is 10.\r\n     *\r\n     * @name Phaser.Core.TimeStep#deltaSmoothingMax\r\n     * @type {integer}\r\n     * @default 10\r\n     * @since 3.0.0\r\n     */\n\n    this.deltaSmoothingMax = GetValue(config, 'deltaHistory', 10);\n    /**\r\n     * The number of frames that the cooldown is set to after the browser panics over the FPS rate, usually\r\n     * as a result of switching tabs and regaining focus.\r\n     * \r\n     * This can be changed in the Game Config via the `fps.panicMax` property. The default is 120.\r\n     *\r\n     * @name Phaser.Core.TimeStep#panicMax\r\n     * @type {integer}\r\n     * @default 120\r\n     * @since 3.0.0\r\n     */\n\n    this.panicMax = GetValue(config, 'panicMax', 120);\n    /**\r\n     * The actual elapsed time in ms between one update and the next.\r\n     * \r\n     * Unlike with `delta`, no smoothing, capping, or averaging is applied to this value.\r\n     * So please be careful when using this value in math calculations.\r\n     *\r\n     * @name Phaser.Core.TimeStep#rawDelta\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rawDelta = 0;\n    /**\r\n     * The time, as returned by `performance.now` at the very start of the current step.\r\n     * This can differ from the `time` value in that it isn't calculated based on the delta value.\r\n     *\r\n     * @name Phaser.Core.TimeStep#now\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.18.0\r\n     */\n\n    this.now = 0;\n    /**\r\n     * Apply smoothing to the delta value used within Phasers internal calculations?\r\n     * \r\n     * This can be changed in the Game Config via the `fps.smoothStep` property. The default is `true`.\r\n     * \r\n     * Smoothing helps settle down the delta values after browser tab switches, or other situations\r\n     * which could cause significant delta spikes or dips. By default it has been enabled in Phaser 3\r\n     * since the first version, but is now exposed under this property (and the corresponding game config\r\n     * `smoothStep` value), to allow you to easily disable it, should you require.\r\n     *\r\n     * @name Phaser.Core.TimeStep#smoothStep\r\n     * @type {boolean}\r\n     * @since 3.22.0\r\n     */\n\n    this.smoothStep = GetValue(config, 'smoothStep', true);\n  },\n\n  /**\r\n   * Called by the Game instance when the DOM window.onBlur event triggers.\r\n   *\r\n   * @method Phaser.Core.TimeStep#blur\r\n   * @since 3.0.0\r\n   */\n  blur: function () {\n    this.inFocus = false;\n  },\n\n  /**\r\n   * Called by the Game instance when the DOM window.onFocus event triggers.\r\n   *\r\n   * @method Phaser.Core.TimeStep#focus\r\n   * @since 3.0.0\r\n   */\n  focus: function () {\n    this.inFocus = true;\n    this.resetDelta();\n  },\n\n  /**\r\n   * Called when the visibility API says the game is 'hidden' (tab switch out of view, etc)\r\n   *\r\n   * @method Phaser.Core.TimeStep#pause\r\n   * @since 3.0.0\r\n   */\n  pause: function () {\n    this._pauseTime = window.performance.now();\n  },\n\n  /**\r\n   * Called when the visibility API says the game is 'visible' again (tab switch back into view, etc)\r\n   *\r\n   * @method Phaser.Core.TimeStep#resume\r\n   * @since 3.0.0\r\n   */\n  resume: function () {\n    this.resetDelta();\n    this.startTime += this.time - this._pauseTime;\n  },\n\n  /**\r\n   * Resets the time, lastTime, fps averages and delta history.\r\n   * Called automatically when a browser sleeps them resumes.\r\n   *\r\n   * @method Phaser.Core.TimeStep#resetDelta\r\n   * @since 3.0.0\r\n   */\n  resetDelta: function () {\n    var now = window.performance.now();\n    this.time = now;\n    this.lastTime = now;\n    this.nextFpsUpdate = now + 1000;\n    this.framesThisSecond = 0; //  Pre-populate smoothing array\n\n    for (var i = 0; i < this.deltaSmoothingMax; i++) {\n      this.deltaHistory[i] = Math.min(this._target, this.deltaHistory[i]);\n    }\n\n    this.delta = 0;\n    this.deltaIndex = 0;\n    this._coolDown = this.panicMax;\n  },\n\n  /**\r\n   * Starts the Time Step running, if it is not already doing so.\r\n   * Called automatically by the Game Boot process.\r\n   *\r\n   * @method Phaser.Core.TimeStep#start\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Core.TimeStepCallback} callback - The callback to be invoked each time the Time Step steps.\r\n   */\n  start: function (callback) {\n    if (this.started) {\n      return this;\n    }\n\n    this.started = true;\n    this.running = true;\n\n    for (var i = 0; i < this.deltaSmoothingMax; i++) {\n      this.deltaHistory[i] = this._target;\n    }\n\n    this.resetDelta();\n    this.startTime = window.performance.now();\n    this.callback = callback;\n    this.raf.start(this.step.bind(this), this.forceSetTimeOut, this._target);\n  },\n\n  /**\r\n   * The main step method. This is called each time the browser updates, either by Request Animation Frame,\r\n   * or by Set Timeout. It is responsible for calculating the delta values, frame totals, cool down history and more.\r\n   * You generally should never call this method directly.\r\n   *\r\n   * @method Phaser.Core.TimeStep#step\r\n   * @since 3.0.0\r\n   */\n  step: function () {\n    //  Because the timestamp passed in from raf represents the beginning of the main thread frame that we’re currently in,\n    //  not the actual time now, and as we want to compare this time value against Event timeStamps and the like, we need a\n    //  more accurate one:\n    var time = window.performance.now();\n    this.now = time;\n    var before = time - this.lastTime;\n\n    if (before < 0) {\n      //  Because, Chrome.\n      before = 0;\n    }\n\n    this.rawDelta = before;\n    var idx = this.deltaIndex;\n    var history = this.deltaHistory;\n    var max = this.deltaSmoothingMax; //  delta time (time is in ms)\n\n    var dt = before; //  Delta Average\n\n    var avg = before; //  When a browser switches tab, then comes back again, it takes around 10 frames before\n    //  the delta time settles down so we employ a 'cooling down' period before we start\n    //  trusting the delta values again, to avoid spikes flooding through our delta average\n\n    if (this.smoothStep) {\n      if (this._coolDown > 0 || !this.inFocus) {\n        this._coolDown--;\n        dt = Math.min(dt, this._target);\n      }\n\n      if (dt > this._min) {\n        //  Probably super bad start time or browser tab context loss,\n        //  so use the last 'sane' dt value\n        dt = history[idx]; //  Clamp delta to min (in case history has become corrupted somehow)\n\n        dt = Math.min(dt, this._min);\n      } //  Smooth out the delta over the previous X frames\n      //  add the delta to the smoothing array\n\n\n      history[idx] = dt; //  adjusts the delta history array index based on the smoothing count\n      //  this stops the array growing beyond the size of deltaSmoothingMax\n\n      this.deltaIndex++;\n\n      if (this.deltaIndex > max) {\n        this.deltaIndex = 0;\n      } //  Loop the history array, adding the delta values together\n\n\n      avg = 0;\n\n      for (var i = 0; i < max; i++) {\n        avg += history[i];\n      } //  Then divide by the array length to get the average delta\n\n\n      avg /= max;\n    } //  Set as the world delta value\n\n\n    this.delta = avg; //  Real-world timer advance\n\n    this.time += this.rawDelta; // Update the estimate of the frame rate, `fps`. Every second, the number\n    // of frames that occurred in that second are included in an exponential\n    // moving average of all frames per second, with an alpha of 0.25. This\n    // means that more recent seconds affect the estimated frame rate more than\n    // older seconds.\n    //\n    // When a browser window is NOT minimized, but is covered up (i.e. you're using\n    // another app which has spawned a window over the top of the browser), then it\n    // will start to throttle the raf callback time. It waits for a while, and then\n    // starts to drop the frame rate at 1 frame per second until it's down to just over 1fps.\n    // So if the game was running at 60fps, and the player opens a new window, then\n    // after 60 seconds (+ the 'buffer time') it'll be down to 1fps, so rafin'g at 1Hz.\n    //\n    // When they make the game visible again, the frame rate is increased at a rate of\n    // approx. 8fps, back up to 60fps (or the max it can obtain)\n    //\n    // There is no easy way to determine if this drop in frame rate is because the\n    // browser is throttling raf, or because the game is struggling with performance\n    // because you're asking it to do too much on the device.\n\n    if (time > this.nextFpsUpdate) {\n      //  Compute the new exponential moving average with an alpha of 0.25.\n      this.actualFps = 0.25 * this.framesThisSecond + 0.75 * this.actualFps;\n      this.nextFpsUpdate = time + 1000;\n      this.framesThisSecond = 0;\n    }\n\n    this.framesThisSecond++; //  Interpolation - how far between what is expected and where we are?\n\n    var interpolation = avg / this._target;\n    this.callback(time, avg, interpolation); //  Shift time value over\n\n    this.lastTime = time;\n    this.frame++;\n  },\n\n  /**\r\n   * Manually calls `TimeStep.step`.\r\n   *\r\n   * @method Phaser.Core.TimeStep#tick\r\n   * @since 3.0.0\r\n   */\n  tick: function () {\n    this.step();\n  },\n\n  /**\r\n   * Sends the TimeStep to sleep, stopping Request Animation Frame (or SetTimeout) and toggling the `running` flag to false.\r\n   *\r\n   * @method Phaser.Core.TimeStep#sleep\r\n   * @since 3.0.0\r\n   */\n  sleep: function () {\n    if (this.running) {\n      this.raf.stop();\n      this.running = false;\n    }\n  },\n\n  /**\r\n   * Wakes-up the TimeStep, restarting Request Animation Frame (or SetTimeout) and toggling the `running` flag to true.\r\n   * The `seamless` argument controls if the wake-up should adjust the start time or not.\r\n   *\r\n   * @method Phaser.Core.TimeStep#wake\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [seamless=false] - Adjust the startTime based on the lastTime values.\r\n   */\n  wake: function (seamless) {\n    if (this.running) {\n      this.sleep();\n    } else if (seamless) {\n      this.startTime += -this.lastTime + (this.lastTime + window.performance.now());\n    }\n\n    this.raf.start(this.step.bind(this), this.useRAF);\n    this.running = true;\n    this.step();\n  },\n\n  /**\r\n   * Gets the duration which the game has been running, in seconds.\r\n   *\r\n   * @method Phaser.Core.TimeStep#getDuration\r\n   * @since 3.17.0\r\n   *\r\n   * @return {number} The duration in seconds.\r\n   */\n  getDuration: function () {\n    return Math.round(this.lastTime - this.startTime) / 1000;\n  },\n\n  /**\r\n   * Gets the duration which the game has been running, in ms.\r\n   *\r\n   * @method Phaser.Core.TimeStep#getDurationMS\r\n   * @since 3.17.0\r\n   *\r\n   * @return {number} The duration in ms.\r\n   */\n  getDurationMS: function () {\n    return Math.round(this.lastTime - this.startTime);\n  },\n\n  /**\r\n   * Stops the TimeStep running.\r\n   *\r\n   * @method Phaser.Core.TimeStep#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} The TimeStep object.\r\n   */\n  stop: function () {\n    this.running = false;\n    this.started = false;\n    this.raf.stop();\n    return this;\n  },\n\n  /**\r\n   * Destroys the TimeStep. This will stop Request Animation Frame, stop the step, clear the callbacks and null\r\n   * any objects.\r\n   *\r\n   * @method Phaser.Core.TimeStep#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.stop();\n    this.callback = NOOP;\n    this.raf = null;\n    this.game = null;\n  }\n});\nmodule.exports = TimeStep;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/core/TimeStep.js"],"names":["Class","require","GetValue","NOOP","RequestAnimationFrame","TimeStep","initialize","game","config","raf","started","running","minFps","targetFps","_min","_target","actualFps","nextFpsUpdate","framesThisSecond","callback","forceSetTimeOut","time","startTime","lastTime","frame","inFocus","_pauseTime","_coolDown","delta","deltaIndex","deltaHistory","deltaSmoothingMax","panicMax","rawDelta","now","smoothStep","blur","focus","resetDelta","pause","window","performance","resume","i","Math","min","start","step","bind","before","idx","history","max","dt","avg","interpolation","tick","sleep","stop","wake","seamless","useRAF","getDuration","round","getDurationMS","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar GetValue = require('../utils/object/GetValue');\r\nvar NOOP = require('../utils/NOOP');\r\nvar RequestAnimationFrame = require('../dom/RequestAnimationFrame');\r\n\r\n// http://www.testufo.com/#test=animation-time-graph\r\n\r\n/**\r\n * @classdesc\r\n * The core runner class that Phaser uses to handle the game loop. It can use either Request Animation Frame,\r\n * or SetTimeout, based on browser support and config settings, to create a continuous loop within the browser.\r\n * \r\n * Each time the loop fires, `TimeStep.step` is called and this is then passed onto the core Game update loop,\r\n * it is the core heartbeat of your game. It will fire as often as Request Animation Frame is capable of handling\r\n * on the target device.\r\n * \r\n * Note that there are lots of situations where a browser will stop updating your game. Such as if the player\r\n * switches tabs, or covers up the browser window with another application. In these cases, the 'heartbeat'\r\n * of your game will pause, and only resume when focus is returned to it by the player. There is no way to avoid\r\n * this situation, all you can do is use the visibility events the browser, and Phaser, provide to detect when\r\n * it has happened and then gracefully recover.\r\n *\r\n * @class TimeStep\r\n * @memberof Phaser.Core\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - A reference to the Phaser.Game instance that owns this Time Step.\r\n * @param {Phaser.Types.Core.FPSConfig} config\r\n */\r\nvar TimeStep = new Class({\r\n\r\n    initialize:\r\n\r\n    function TimeStep (game, config)\r\n    {\r\n        /**\r\n         * A reference to the Phaser.Game instance.\r\n         *\r\n         * @name Phaser.Core.TimeStep#game\r\n         * @type {Phaser.Game}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.game = game;\r\n\r\n        /**\r\n         * The Request Animation Frame DOM Event handler.\r\n         *\r\n         * @name Phaser.Core.TimeStep#raf\r\n         * @type {Phaser.DOM.RequestAnimationFrame}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.raf = new RequestAnimationFrame();\r\n\r\n        /**\r\n         * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n         *\r\n         * @name Phaser.Core.TimeStep#started\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.started = false;\r\n\r\n        /**\r\n         * A flag that is set once the TimeStep has started running and toggled when it stops.\r\n         * The difference between this value and `started` is that `running` is toggled when\r\n         * the TimeStep is sent to sleep, where-as `started` remains `true`, only changing if\r\n         * the TimeStep is actually stopped, not just paused.\r\n         *\r\n         * @name Phaser.Core.TimeStep#running\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.running = false;\r\n\r\n        /**\r\n         * The minimum fps rate you want the Time Step to run at.\r\n         *\r\n         * @name Phaser.Core.TimeStep#minFps\r\n         * @type {integer}\r\n         * @default 5\r\n         * @since 3.0.0\r\n         */\r\n        this.minFps = GetValue(config, 'min', 5);\r\n\r\n        /**\r\n         * The target fps rate for the Time Step to run at.\r\n         *\r\n         * Setting this value will not actually change the speed at which the browser runs, that is beyond\r\n         * the control of Phaser. Instead, it allows you to determine performance issues and if the Time Step\r\n         * is spiraling out of control.\r\n         *\r\n         * @name Phaser.Core.TimeStep#targetFps\r\n         * @type {integer}\r\n         * @default 60\r\n         * @since 3.0.0\r\n         */\r\n        this.targetFps = GetValue(config, 'target', 60);\r\n\r\n        /**\r\n         * The minFps value in ms.\r\n         * Defaults to 200ms between frames (i.e. super slow!)\r\n         *\r\n         * @name Phaser.Core.TimeStep#_min\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._min = 1000 / this.minFps;\r\n\r\n        /**\r\n         * The targetFps value in ms.\r\n         * Defaults to 16.66ms between frames (i.e. normal)\r\n         *\r\n         * @name Phaser.Core.TimeStep#_target\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._target = 1000 / this.targetFps;\r\n\r\n        /**\r\n         * An exponential moving average of the frames per second.\r\n         *\r\n         * @name Phaser.Core.TimeStep#actualFps\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 60\r\n         * @since 3.0.0\r\n         */\r\n        this.actualFps = this.targetFps;\r\n\r\n        /**\r\n         * The time at which the next fps rate update will take place.\r\n         * When an fps update happens, the `framesThisSecond` value is reset.\r\n         *\r\n         * @name Phaser.Core.TimeStep#nextFpsUpdate\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.nextFpsUpdate = 0;\r\n\r\n        /**\r\n         * The number of frames processed this second.\r\n         *\r\n         * @name Phaser.Core.TimeStep#framesThisSecond\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.framesThisSecond = 0;\r\n\r\n        /**\r\n         * A callback to be invoked each time the Time Step steps.\r\n         *\r\n         * @name Phaser.Core.TimeStep#callback\r\n         * @type {Phaser.Types.Core.TimeStepCallback}\r\n         * @default NOOP\r\n         * @since 3.0.0\r\n         */\r\n        this.callback = NOOP;\r\n\r\n        /**\r\n         * You can force the Time Step to use Set Timeout instead of Request Animation Frame by setting\r\n         * the `forceSetTimeOut` property to `true` in the Game Configuration object. It cannot be changed at run-time.\r\n         *\r\n         * @name Phaser.Core.TimeStep#forceSetTimeOut\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.forceSetTimeOut = GetValue(config, 'forceSetTimeOut', false);\r\n\r\n        /**\r\n         * The time, calculated at the start of the current step, as smoothed by the delta value.\r\n         *\r\n         * @name Phaser.Core.TimeStep#time\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.time = 0;\r\n\r\n        /**\r\n         * The time at which the game started running. This value is adjusted if the game is then\r\n         * paused and resumes.\r\n         *\r\n         * @name Phaser.Core.TimeStep#startTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.startTime = 0;\r\n\r\n        /**\r\n         * The time, as returned by `performance.now` of the previous step.\r\n         *\r\n         * @name Phaser.Core.TimeStep#lastTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.lastTime = 0;\r\n\r\n        /**\r\n         * The current frame the game is on. This counter is incremented once every game step, regardless of how much\r\n         * time has passed and is unaffected by delta smoothing.\r\n         *\r\n         * @name Phaser.Core.TimeStep#frame\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = 0;\r\n\r\n        /**\r\n         * Is the browser currently considered in focus by the Page Visibility API?\r\n         * This value is set in the `blur` method, which is called automatically by the Game instance.\r\n         *\r\n         * @name Phaser.Core.TimeStep#inFocus\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.inFocus = true;\r\n\r\n        /**\r\n         * The timestamp at which the game became paused, as determined by the Page Visibility API.\r\n         *\r\n         * @name Phaser.Core.TimeStep#_pauseTime\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._pauseTime = 0;\r\n\r\n        /**\r\n         * An internal counter to allow for the browser 'cooling down' after coming back into focus.\r\n         *\r\n         * @name Phaser.Core.TimeStep#_coolDown\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._coolDown = 0;\r\n\r\n        /**\r\n         * The delta time, in ms, since the last game step. This is a clamped and smoothed average value.\r\n         *\r\n         * @name Phaser.Core.TimeStep#delta\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delta = 0;\r\n\r\n        /**\r\n         * Internal index of the delta history position.\r\n         *\r\n         * @name Phaser.Core.TimeStep#deltaIndex\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaIndex = 0;\r\n\r\n        /**\r\n         * Internal array holding the previous delta values, used for delta smoothing.\r\n         *\r\n         * @name Phaser.Core.TimeStep#deltaHistory\r\n         * @type {integer[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaHistory = [];\r\n\r\n        /**\r\n         * The maximum number of delta values that are retained in order to calculate a smoothed moving average.\r\n         * \r\n         * This can be changed in the Game Config via the `fps.deltaHistory` property. The default is 10.\r\n         *\r\n         * @name Phaser.Core.TimeStep#deltaSmoothingMax\r\n         * @type {integer}\r\n         * @default 10\r\n         * @since 3.0.0\r\n         */\r\n        this.deltaSmoothingMax = GetValue(config, 'deltaHistory', 10);\r\n\r\n        /**\r\n         * The number of frames that the cooldown is set to after the browser panics over the FPS rate, usually\r\n         * as a result of switching tabs and regaining focus.\r\n         * \r\n         * This can be changed in the Game Config via the `fps.panicMax` property. The default is 120.\r\n         *\r\n         * @name Phaser.Core.TimeStep#panicMax\r\n         * @type {integer}\r\n         * @default 120\r\n         * @since 3.0.0\r\n         */\r\n        this.panicMax = GetValue(config, 'panicMax', 120);\r\n\r\n        /**\r\n         * The actual elapsed time in ms between one update and the next.\r\n         * \r\n         * Unlike with `delta`, no smoothing, capping, or averaging is applied to this value.\r\n         * So please be careful when using this value in math calculations.\r\n         *\r\n         * @name Phaser.Core.TimeStep#rawDelta\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rawDelta = 0;\r\n\r\n        /**\r\n         * The time, as returned by `performance.now` at the very start of the current step.\r\n         * This can differ from the `time` value in that it isn't calculated based on the delta value.\r\n         *\r\n         * @name Phaser.Core.TimeStep#now\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.now = 0;\r\n\r\n        /**\r\n         * Apply smoothing to the delta value used within Phasers internal calculations?\r\n         * \r\n         * This can be changed in the Game Config via the `fps.smoothStep` property. The default is `true`.\r\n         * \r\n         * Smoothing helps settle down the delta values after browser tab switches, or other situations\r\n         * which could cause significant delta spikes or dips. By default it has been enabled in Phaser 3\r\n         * since the first version, but is now exposed under this property (and the corresponding game config\r\n         * `smoothStep` value), to allow you to easily disable it, should you require.\r\n         *\r\n         * @name Phaser.Core.TimeStep#smoothStep\r\n         * @type {boolean}\r\n         * @since 3.22.0\r\n         */\r\n        this.smoothStep = GetValue(config, 'smoothStep', true);\r\n    },\r\n\r\n    /**\r\n     * Called by the Game instance when the DOM window.onBlur event triggers.\r\n     *\r\n     * @method Phaser.Core.TimeStep#blur\r\n     * @since 3.0.0\r\n     */\r\n    blur: function ()\r\n    {\r\n        this.inFocus = false;\r\n    },\r\n\r\n    /**\r\n     * Called by the Game instance when the DOM window.onFocus event triggers.\r\n     *\r\n     * @method Phaser.Core.TimeStep#focus\r\n     * @since 3.0.0\r\n     */\r\n    focus: function ()\r\n    {\r\n        this.inFocus = true;\r\n\r\n        this.resetDelta();\r\n    },\r\n\r\n    /**\r\n     * Called when the visibility API says the game is 'hidden' (tab switch out of view, etc)\r\n     *\r\n     * @method Phaser.Core.TimeStep#pause\r\n     * @since 3.0.0\r\n     */\r\n    pause: function ()\r\n    {\r\n        this._pauseTime = window.performance.now();\r\n    },\r\n\r\n    /**\r\n     * Called when the visibility API says the game is 'visible' again (tab switch back into view, etc)\r\n     *\r\n     * @method Phaser.Core.TimeStep#resume\r\n     * @since 3.0.0\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.resetDelta();\r\n\r\n        this.startTime += this.time - this._pauseTime;\r\n    },\r\n\r\n    /**\r\n     * Resets the time, lastTime, fps averages and delta history.\r\n     * Called automatically when a browser sleeps them resumes.\r\n     *\r\n     * @method Phaser.Core.TimeStep#resetDelta\r\n     * @since 3.0.0\r\n     */\r\n    resetDelta: function ()\r\n    {\r\n        var now = window.performance.now();\r\n\r\n        this.time = now;\r\n        this.lastTime = now;\r\n        this.nextFpsUpdate = now + 1000;\r\n        this.framesThisSecond = 0;\r\n\r\n        //  Pre-populate smoothing array\r\n\r\n        for (var i = 0; i < this.deltaSmoothingMax; i++)\r\n        {\r\n            this.deltaHistory[i] = Math.min(this._target, this.deltaHistory[i]);\r\n        }\r\n\r\n        this.delta = 0;\r\n        this.deltaIndex = 0;\r\n\r\n        this._coolDown = this.panicMax;\r\n    },\r\n\r\n    /**\r\n     * Starts the Time Step running, if it is not already doing so.\r\n     * Called automatically by the Game Boot process.\r\n     *\r\n     * @method Phaser.Core.TimeStep#start\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Core.TimeStepCallback} callback - The callback to be invoked each time the Time Step steps.\r\n     */\r\n    start: function (callback)\r\n    {\r\n        if (this.started)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.started = true;\r\n        this.running = true;\r\n\r\n        for (var i = 0; i < this.deltaSmoothingMax; i++)\r\n        {\r\n            this.deltaHistory[i] = this._target;\r\n        }\r\n\r\n        this.resetDelta();\r\n\r\n        this.startTime = window.performance.now();\r\n\r\n        this.callback = callback;\r\n\r\n        this.raf.start(this.step.bind(this), this.forceSetTimeOut, this._target);\r\n    },\r\n\r\n    /**\r\n     * The main step method. This is called each time the browser updates, either by Request Animation Frame,\r\n     * or by Set Timeout. It is responsible for calculating the delta values, frame totals, cool down history and more.\r\n     * You generally should never call this method directly.\r\n     *\r\n     * @method Phaser.Core.TimeStep#step\r\n     * @since 3.0.0\r\n     */\r\n    step: function ()\r\n    {\r\n        //  Because the timestamp passed in from raf represents the beginning of the main thread frame that we’re currently in,\r\n        //  not the actual time now, and as we want to compare this time value against Event timeStamps and the like, we need a\r\n        //  more accurate one:\r\n\r\n        var time = window.performance.now();\r\n\r\n        this.now = time;\r\n\r\n        var before = time - this.lastTime;\r\n\r\n        if (before < 0)\r\n        {\r\n            //  Because, Chrome.\r\n            before = 0;\r\n        }\r\n\r\n        this.rawDelta = before;\r\n\r\n        var idx = this.deltaIndex;\r\n        var history = this.deltaHistory;\r\n        var max = this.deltaSmoothingMax;\r\n\r\n        //  delta time (time is in ms)\r\n        var dt = before;\r\n\r\n        //  Delta Average\r\n        var avg = before;\r\n\r\n        //  When a browser switches tab, then comes back again, it takes around 10 frames before\r\n        //  the delta time settles down so we employ a 'cooling down' period before we start\r\n        //  trusting the delta values again, to avoid spikes flooding through our delta average\r\n\r\n        if (this.smoothStep)\r\n        {\r\n            if (this._coolDown > 0 || !this.inFocus)\r\n            {\r\n                this._coolDown--;\r\n    \r\n                dt = Math.min(dt, this._target);\r\n            }\r\n    \r\n            if (dt > this._min)\r\n            {\r\n                //  Probably super bad start time or browser tab context loss,\r\n                //  so use the last 'sane' dt value\r\n    \r\n                dt = history[idx];\r\n    \r\n                //  Clamp delta to min (in case history has become corrupted somehow)\r\n                dt = Math.min(dt, this._min);\r\n            }\r\n    \r\n            //  Smooth out the delta over the previous X frames\r\n    \r\n            //  add the delta to the smoothing array\r\n            history[idx] = dt;\r\n    \r\n            //  adjusts the delta history array index based on the smoothing count\r\n            //  this stops the array growing beyond the size of deltaSmoothingMax\r\n            this.deltaIndex++;\r\n    \r\n            if (this.deltaIndex > max)\r\n            {\r\n                this.deltaIndex = 0;\r\n            }\r\n    \r\n            //  Loop the history array, adding the delta values together\r\n            avg = 0;\r\n    \r\n            for (var i = 0; i < max; i++)\r\n            {\r\n                avg += history[i];\r\n            }\r\n    \r\n            //  Then divide by the array length to get the average delta\r\n            avg /= max;\r\n        }\r\n\r\n        //  Set as the world delta value\r\n        this.delta = avg;\r\n\r\n        //  Real-world timer advance\r\n        this.time += this.rawDelta;\r\n\r\n        // Update the estimate of the frame rate, `fps`. Every second, the number\r\n        // of frames that occurred in that second are included in an exponential\r\n        // moving average of all frames per second, with an alpha of 0.25. This\r\n        // means that more recent seconds affect the estimated frame rate more than\r\n        // older seconds.\r\n        //\r\n        // When a browser window is NOT minimized, but is covered up (i.e. you're using\r\n        // another app which has spawned a window over the top of the browser), then it\r\n        // will start to throttle the raf callback time. It waits for a while, and then\r\n        // starts to drop the frame rate at 1 frame per second until it's down to just over 1fps.\r\n        // So if the game was running at 60fps, and the player opens a new window, then\r\n        // after 60 seconds (+ the 'buffer time') it'll be down to 1fps, so rafin'g at 1Hz.\r\n        //\r\n        // When they make the game visible again, the frame rate is increased at a rate of\r\n        // approx. 8fps, back up to 60fps (or the max it can obtain)\r\n        //\r\n        // There is no easy way to determine if this drop in frame rate is because the\r\n        // browser is throttling raf, or because the game is struggling with performance\r\n        // because you're asking it to do too much on the device.\r\n\r\n        if (time > this.nextFpsUpdate)\r\n        {\r\n            //  Compute the new exponential moving average with an alpha of 0.25.\r\n            this.actualFps = 0.25 * this.framesThisSecond + 0.75 * this.actualFps;\r\n            this.nextFpsUpdate = time + 1000;\r\n            this.framesThisSecond = 0;\r\n        }\r\n\r\n        this.framesThisSecond++;\r\n\r\n        //  Interpolation - how far between what is expected and where we are?\r\n        var interpolation = avg / this._target;\r\n\r\n        this.callback(time, avg, interpolation);\r\n\r\n        //  Shift time value over\r\n        this.lastTime = time;\r\n\r\n        this.frame++;\r\n    },\r\n\r\n    /**\r\n     * Manually calls `TimeStep.step`.\r\n     *\r\n     * @method Phaser.Core.TimeStep#tick\r\n     * @since 3.0.0\r\n     */\r\n    tick: function ()\r\n    {\r\n        this.step();\r\n    },\r\n\r\n    /**\r\n     * Sends the TimeStep to sleep, stopping Request Animation Frame (or SetTimeout) and toggling the `running` flag to false.\r\n     *\r\n     * @method Phaser.Core.TimeStep#sleep\r\n     * @since 3.0.0\r\n     */\r\n    sleep: function ()\r\n    {\r\n        if (this.running)\r\n        {\r\n            this.raf.stop();\r\n\r\n            this.running = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Wakes-up the TimeStep, restarting Request Animation Frame (or SetTimeout) and toggling the `running` flag to true.\r\n     * The `seamless` argument controls if the wake-up should adjust the start time or not.\r\n     *\r\n     * @method Phaser.Core.TimeStep#wake\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [seamless=false] - Adjust the startTime based on the lastTime values.\r\n     */\r\n    wake: function (seamless)\r\n    {\r\n        if (this.running)\r\n        {\r\n            this.sleep();\r\n        }\r\n        else if (seamless)\r\n        {\r\n            this.startTime += -this.lastTime + (this.lastTime + window.performance.now());\r\n        }\r\n\r\n        this.raf.start(this.step.bind(this), this.useRAF);\r\n\r\n        this.running = true;\r\n\r\n        this.step();\r\n    },\r\n\r\n    /**\r\n     * Gets the duration which the game has been running, in seconds.\r\n     *\r\n     * @method Phaser.Core.TimeStep#getDuration\r\n     * @since 3.17.0\r\n     *\r\n     * @return {number} The duration in seconds.\r\n     */\r\n    getDuration: function ()\r\n    {\r\n        return Math.round(this.lastTime - this.startTime) / 1000;\r\n    },\r\n\r\n    /**\r\n     * Gets the duration which the game has been running, in ms.\r\n     *\r\n     * @method Phaser.Core.TimeStep#getDurationMS\r\n     * @since 3.17.0\r\n     *\r\n     * @return {number} The duration in ms.\r\n     */\r\n    getDurationMS: function ()\r\n    {\r\n        return Math.round(this.lastTime - this.startTime);\r\n    },\r\n\r\n    /**\r\n     * Stops the TimeStep running.\r\n     *\r\n     * @method Phaser.Core.TimeStep#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} The TimeStep object.\r\n     */\r\n    stop: function ()\r\n    {\r\n        this.running = false;\r\n        this.started = false;\r\n\r\n        this.raf.stop();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys the TimeStep. This will stop Request Animation Frame, stop the step, clear the callbacks and null\r\n     * any objects.\r\n     *\r\n     * @method Phaser.Core.TimeStep#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stop();\r\n\r\n        this.callback = NOOP;\r\n\r\n        this.raf = null;\r\n        this.game = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TimeStep;\r\n"]},"metadata":{},"sourceType":"script"}