{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point'); //  The three medians (the lines drawn from the vertices to the bisectors of the opposite sides)\n//  meet in the centroid or center of mass (center of gravity).\n//  The centroid divides each median in a ratio of 2:1\n\n/**\r\n * Calculates the position of a Triangle's centroid, which is also its center of mass (center of gravity).\r\n *\r\n * The centroid is the point in a Triangle at which its three medians (the lines drawn from the vertices to the bisectors of the opposite sides) meet. It divides each one in a 2:1 ratio.\r\n *\r\n * @function Phaser.Geom.Triangle.Centroid\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An object to store the coordinates in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The `out` object with modified `x` and `y` properties, or a new Point if none was provided.\r\n */\n\n\nvar Centroid = function (triangle, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  out.x = (triangle.x1 + triangle.x2 + triangle.x3) / 3;\n  out.y = (triangle.y1 + triangle.y2 + triangle.y3) / 3;\n  return out;\n};\n\nmodule.exports = Centroid;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/Centroid.js"],"names":["Point","require","Centroid","triangle","out","undefined","x","x1","x2","x3","y","y1","y2","y3","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EACf;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7CI,EAAAA,GAAG,CAACE,CAAJ,GAAQ,CAACH,QAAQ,CAACI,EAAT,GAAcJ,QAAQ,CAACK,EAAvB,GAA4BL,QAAQ,CAACM,EAAtC,IAA4C,CAApD;AACAL,EAAAA,GAAG,CAACM,CAAJ,GAAQ,CAACP,QAAQ,CAACQ,EAAT,GAAcR,QAAQ,CAACS,EAAvB,GAA4BT,QAAQ,CAACU,EAAtC,IAA4C,CAApD;AAEA,SAAOT,GAAP;AACH,CARD;;AAUAU,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n//  The three medians (the lines drawn from the vertices to the bisectors of the opposite sides)\r\n//  meet in the centroid or center of mass (center of gravity).\r\n//  The centroid divides each median in a ratio of 2:1\r\n\r\n/**\r\n * Calculates the position of a Triangle's centroid, which is also its center of mass (center of gravity).\r\n *\r\n * The centroid is the point in a Triangle at which its three medians (the lines drawn from the vertices to the bisectors of the opposite sides) meet. It divides each one in a 2:1 ratio.\r\n *\r\n * @function Phaser.Geom.Triangle.Centroid\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An object to store the coordinates in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} The `out` object with modified `x` and `y` properties, or a new Point if none was provided.\r\n */\r\nvar Centroid = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    out.x = (triangle.x1 + triangle.x2 + triangle.x3) / 3;\r\n    out.y = (triangle.y1 + triangle.y2 + triangle.y3) / 3;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Centroid;\r\n"]},"metadata":{},"sourceType":"script"}