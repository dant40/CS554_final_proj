{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Factory = require('./Factory');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Merge = require('../../utils/object/Merge');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar SceneEvents = require('../../scene/events');\n\nvar World = require('./World');\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class ImpactPhysics\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\n\n\nvar ImpactPhysics = new Class({\n  initialize: function ImpactPhysics(scene) {\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#config\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = this.getConfig();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.ImpactPhysics#add\r\n     * @type {Phaser.Physics.Impact.Factory}\r\n     * @since 3.0.0\r\n     */\n\n    this.add;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.world = new World(this.scene, this.config);\n    this.add = new Factory(this.world);\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    if (!this.world) {\n      this.world = new World(this.scene, this.config);\n      this.add = new Factory(this.world);\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#getConfig\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} [description]\r\n   */\n  getConfig: function () {\n    var gameConfig = this.systems.game.config.physics;\n    var sceneConfig = this.systems.settings.physics;\n    var config = Merge(GetFastValue(sceneConfig, 'impact', {}), GetFastValue(gameConfig, 'impact', {}));\n    return config;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n   */\n  pause: function () {\n    return this.world.pause();\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n   */\n  resume: function () {\n    return this.world.resume();\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    var eventEmitter = this.systems.events;\n    eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n    this.add.destroy();\n    this.world.destroy();\n    this.add = null;\n    this.world = null;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Physics.Impact.ImpactPhysics#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('ImpactPhysics', ImpactPhysics, 'impactPhysics');\nmodule.exports = ImpactPhysics;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/ImpactPhysics.js"],"names":["Class","require","Factory","GetFastValue","Merge","PluginCache","SceneEvents","World","ImpactPhysics","initialize","scene","systems","sys","config","getConfig","world","add","events","once","BOOT","boot","on","START","start","DESTROY","destroy","eventEmitter","UPDATE","update","SHUTDOWN","shutdown","gameConfig","game","physics","sceneConfig","settings","pause","resume","off","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar SceneEvents = require('../../scene/events');\r\nvar World = require('./World');\r\n\r\n/**\r\n * @classdesc\r\n * [description]\r\n *\r\n * @class ImpactPhysics\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - [description]\r\n */\r\nvar ImpactPhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function ImpactPhysics (scene)\r\n    {\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#config\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.ImpactPhysics#add\r\n         * @type {Phaser.Physics.Impact.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} [description]\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'impact', {}),\r\n            GetFastValue(gameConfig, 'impact', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Impact.World} The Impact World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        this.add.destroy();\r\n        this.world.destroy();\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Impact.ImpactPhysics#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('ImpactPhysics', ImpactPhysics, 'impactPhysics');\r\n\r\nmodule.exports = ImpactPhysics;\r\n"]},"metadata":{},"sourceType":"script"}