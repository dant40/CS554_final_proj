{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar Length = require('../line/Length');\n/**\r\n * Returns a Point from around the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the point on its perimeter from.\r\n * @param {number} position - The position along the perimeter of the triangle. A value between 0 and 1.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An option Point, or Point-like object to store the value in. If not given a new Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object containing the given position from the perimeter of the triangle.\r\n */\n\n\nvar GetPoint = function (triangle, position, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var line1 = triangle.getLineA();\n  var line2 = triangle.getLineB();\n  var line3 = triangle.getLineC();\n\n  if (position <= 0 || position >= 1) {\n    out.x = line1.x1;\n    out.y = line1.y1;\n    return out;\n  }\n\n  var length1 = Length(line1);\n  var length2 = Length(line2);\n  var length3 = Length(line3);\n  var perimeter = length1 + length2 + length3;\n  var p = perimeter * position;\n  var localPosition = 0; //  Which line is it on?\n\n  if (p < length1) {\n    //  Line 1\n    localPosition = p / length1;\n    out.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\n    out.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\n  } else if (p > length1 + length2) {\n    //  Line 3\n    p -= length1 + length2;\n    localPosition = p / length3;\n    out.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\n    out.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\n  } else {\n    //  Line 2\n    p -= length1;\n    localPosition = p / length2;\n    out.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\n    out.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoint;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/GetPoint.js"],"names":["Point","require","Length","GetPoint","triangle","position","out","undefined","line1","getLineA","line2","getLineB","line3","getLineC","x","x1","y","y1","length1","length2","length3","perimeter","p","localPosition","x2","y2","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,gBAAD,CAApB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIE,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,GAA9B,EACf;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIN,KAAJ,EAAN;AAAoB;;AAE7C,MAAIQ,KAAK,GAAGJ,QAAQ,CAACK,QAAT,EAAZ;AACA,MAAIC,KAAK,GAAGN,QAAQ,CAACO,QAAT,EAAZ;AACA,MAAIC,KAAK,GAAGR,QAAQ,CAACS,QAAT,EAAZ;;AAEA,MAAIR,QAAQ,IAAI,CAAZ,IAAiBA,QAAQ,IAAI,CAAjC,EACA;AACIC,IAAAA,GAAG,CAACQ,CAAJ,GAAQN,KAAK,CAACO,EAAd;AACAT,IAAAA,GAAG,CAACU,CAAJ,GAAQR,KAAK,CAACS,EAAd;AAEA,WAAOX,GAAP;AACH;;AAED,MAAIY,OAAO,GAAGhB,MAAM,CAACM,KAAD,CAApB;AACA,MAAIW,OAAO,GAAGjB,MAAM,CAACQ,KAAD,CAApB;AACA,MAAIU,OAAO,GAAGlB,MAAM,CAACU,KAAD,CAApB;AAEA,MAAIS,SAAS,GAAGH,OAAO,GAAGC,OAAV,GAAoBC,OAApC;AAEA,MAAIE,CAAC,GAAGD,SAAS,GAAGhB,QAApB;AACA,MAAIkB,aAAa,GAAG,CAApB,CAtBJ,CAwBI;;AAEA,MAAID,CAAC,GAAGJ,OAAR,EACA;AACI;AACAK,IAAAA,aAAa,GAAGD,CAAC,GAAGJ,OAApB;AAEAZ,IAAAA,GAAG,CAACQ,CAAJ,GAAQN,KAAK,CAACO,EAAN,GAAW,CAACP,KAAK,CAACgB,EAAN,GAAWhB,KAAK,CAACO,EAAlB,IAAwBQ,aAA3C;AACAjB,IAAAA,GAAG,CAACU,CAAJ,GAAQR,KAAK,CAACS,EAAN,GAAW,CAACT,KAAK,CAACiB,EAAN,GAAWjB,KAAK,CAACS,EAAlB,IAAwBM,aAA3C;AACH,GAPD,MAQK,IAAID,CAAC,GAAGJ,OAAO,GAAGC,OAAlB,EACL;AACI;AACAG,IAAAA,CAAC,IAAIJ,OAAO,GAAGC,OAAf;AACAI,IAAAA,aAAa,GAAGD,CAAC,GAAGF,OAApB;AAEAd,IAAAA,GAAG,CAACQ,CAAJ,GAAQF,KAAK,CAACG,EAAN,GAAW,CAACH,KAAK,CAACY,EAAN,GAAWZ,KAAK,CAACG,EAAlB,IAAwBQ,aAA3C;AACAjB,IAAAA,GAAG,CAACU,CAAJ,GAAQJ,KAAK,CAACK,EAAN,GAAW,CAACL,KAAK,CAACa,EAAN,GAAWb,KAAK,CAACK,EAAlB,IAAwBM,aAA3C;AACH,GARI,MAUL;AACI;AACAD,IAAAA,CAAC,IAAIJ,OAAL;AACAK,IAAAA,aAAa,GAAGD,CAAC,GAAGH,OAApB;AAEAb,IAAAA,GAAG,CAACQ,CAAJ,GAAQJ,KAAK,CAACK,EAAN,GAAW,CAACL,KAAK,CAACc,EAAN,GAAWd,KAAK,CAACK,EAAlB,IAAwBQ,aAA3C;AACAjB,IAAAA,GAAG,CAACU,CAAJ,GAAQN,KAAK,CAACO,EAAN,GAAW,CAACP,KAAK,CAACe,EAAN,GAAWf,KAAK,CAACO,EAAlB,IAAwBM,aAA3C;AACH;;AAED,SAAOjB,GAAP;AACH,CAvDD;;AAyDAoB,MAAM,CAACC,OAAP,GAAiBxB,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar Length = require('../line/Length');\r\n\r\n/**\r\n * Returns a Point from around the perimeter of a Triangle.\r\n *\r\n * @function Phaser.Geom.Triangle.GetPoint\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to get the point on its perimeter from.\r\n * @param {number} position - The position along the perimeter of the triangle. A value between 0 and 1.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An option Point, or Point-like object to store the value in. If not given a new Point will be created.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object containing the given position from the perimeter of the triangle.\r\n */\r\nvar GetPoint = function (triangle, position, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var line1 = triangle.getLineA();\r\n    var line2 = triangle.getLineB();\r\n    var line3 = triangle.getLineC();\r\n\r\n    if (position <= 0 || position >= 1)\r\n    {\r\n        out.x = line1.x1;\r\n        out.y = line1.y1;\r\n\r\n        return out;\r\n    }\r\n\r\n    var length1 = Length(line1);\r\n    var length2 = Length(line2);\r\n    var length3 = Length(line3);\r\n\r\n    var perimeter = length1 + length2 + length3;\r\n\r\n    var p = perimeter * position;\r\n    var localPosition = 0;\r\n\r\n    //  Which line is it on?\r\n\r\n    if (p < length1)\r\n    {\r\n        //  Line 1\r\n        localPosition = p / length1;\r\n\r\n        out.x = line1.x1 + (line1.x2 - line1.x1) * localPosition;\r\n        out.y = line1.y1 + (line1.y2 - line1.y1) * localPosition;\r\n    }\r\n    else if (p > length1 + length2)\r\n    {\r\n        //  Line 3\r\n        p -= length1 + length2;\r\n        localPosition = p / length3;\r\n\r\n        out.x = line3.x1 + (line3.x2 - line3.x1) * localPosition;\r\n        out.y = line3.y1 + (line3.y2 - line3.y1) * localPosition;\r\n    }\r\n    else\r\n    {\r\n        //  Line 2\r\n        p -= length1;\r\n        localPosition = p / length2;\r\n\r\n        out.x = line2.x1 + (line2.x2 - line2.x1) * localPosition;\r\n        out.y = line2.y1 + (line2.y2 - line2.y1) * localPosition;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoint;\r\n"]},"metadata":{},"sourceType":"script"}