{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Events = require('./events');\n/**\r\n * @classdesc\r\n * Contains information about a specific button on a Gamepad.\r\n * Button objects are created automatically by the Gamepad as they are needed.\r\n *\r\n * @class Button\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Gamepad.Gamepad} pad - A reference to the Gamepad that this Button belongs to.\r\n * @param {integer} index - The index of this Button.\r\n */\n\n\nvar Button = new Class({\n  initialize: function Button(pad, index) {\n    /**\r\n     * A reference to the Gamepad that this Button belongs to.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#pad\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.0.0\r\n     */\n    this.pad = pad;\n    /**\r\n     * An event emitter to use to emit the button events.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#events\r\n     * @type {Phaser.Events.EventEmitter}\r\n     * @since 3.0.0\r\n     */\n\n    this.events = pad.manager;\n    /**\r\n     * The index of this Button.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#index\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.index = index;\n    /**\r\n     * Between 0 and 1.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#value\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.value = 0;\n    /**\r\n     * Can be set for analogue buttons to enable a 'pressure' threshold,\r\n     * before a button is considered as being 'pressed'.\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#threshold\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.threshold = 1;\n    /**\r\n     * Is the Button being pressed down or not?\r\n     *\r\n     * @name Phaser.Input.Gamepad.Button#pressed\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.pressed = false;\n  },\n\n  /**\r\n   * Internal update handler for this Button.\r\n   * Called automatically by the Gamepad as part of its update.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Button#update\r\n   * @fires Phaser.Input.Gamepad.Events#BUTTON_DOWN\r\n   * @fires Phaser.Input.Gamepad.Events#BUTTON_UP\r\n   * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_DOWN\r\n   * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_UP\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The value of the button. Between 0 and 1.\r\n   */\n  update: function (value) {\n    this.value = value;\n    var pad = this.pad;\n    var index = this.index;\n\n    if (value >= this.threshold) {\n      if (!this.pressed) {\n        this.pressed = true;\n        this.events.emit(Events.BUTTON_DOWN, pad, this, value);\n        this.pad.emit(Events.GAMEPAD_BUTTON_DOWN, index, value, this);\n      }\n    } else if (this.pressed) {\n      this.pressed = false;\n      this.events.emit(Events.BUTTON_UP, pad, this, value);\n      this.pad.emit(Events.GAMEPAD_BUTTON_UP, index, value, this);\n    }\n  },\n\n  /**\r\n   * Destroys this Button instance and releases external references it holds.\r\n   *\r\n   * @method Phaser.Input.Gamepad.Button#destroy\r\n   * @since 3.10.0\r\n   */\n  destroy: function () {\n    this.pad = null;\n    this.events = null;\n  }\n});\nmodule.exports = Button;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/gamepad/Button.js"],"names":["Class","require","Events","Button","initialize","pad","index","events","manager","value","threshold","pressed","update","emit","BUTTON_DOWN","GAMEPAD_BUTTON_DOWN","BUTTON_UP","GAMEPAD_BUTTON_UP","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,MAAM,GAAG,IAAIH,KAAJ,CAAU;AAEnBI,EAAAA,UAAU,EAEV,SAASD,MAAT,CAAiBE,GAAjB,EAAsBC,KAAtB,EACA;AACI;;;;;;;AAOA,SAAKD,GAAL,GAAWA,GAAX;AAEA;;;;;;;;AAOA,SAAKE,MAAL,GAAcF,GAAG,CAACG,OAAlB;AAEA;;;;;;;;AAOA,SAAKF,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;AAQA,SAAKG,KAAL,GAAa,CAAb;AAEA;;;;;;;;;;AASA,SAAKC,SAAL,GAAiB,CAAjB;AAEA;;;;;;;;;AAQA,SAAKC,OAAL,GAAe,KAAf;AACH,GA/DkB;;AAiEnB;;;;;;;;;;;;;;AAcAC,EAAAA,MAAM,EAAE,UAAUH,KAAV,EACR;AACI,SAAKA,KAAL,GAAaA,KAAb;AAEA,QAAIJ,GAAG,GAAG,KAAKA,GAAf;AACA,QAAIC,KAAK,GAAG,KAAKA,KAAjB;;AAEA,QAAIG,KAAK,IAAI,KAAKC,SAAlB,EACA;AACI,UAAI,CAAC,KAAKC,OAAV,EACA;AACI,aAAKA,OAAL,GAAe,IAAf;AACA,aAAKJ,MAAL,CAAYM,IAAZ,CAAiBX,MAAM,CAACY,WAAxB,EAAqCT,GAArC,EAA0C,IAA1C,EAAgDI,KAAhD;AACA,aAAKJ,GAAL,CAASQ,IAAT,CAAcX,MAAM,CAACa,mBAArB,EAA0CT,KAA1C,EAAiDG,KAAjD,EAAwD,IAAxD;AACH;AACJ,KARD,MASK,IAAI,KAAKE,OAAT,EACL;AACI,WAAKA,OAAL,GAAe,KAAf;AACA,WAAKJ,MAAL,CAAYM,IAAZ,CAAiBX,MAAM,CAACc,SAAxB,EAAmCX,GAAnC,EAAwC,IAAxC,EAA8CI,KAA9C;AACA,WAAKJ,GAAL,CAASQ,IAAT,CAAcX,MAAM,CAACe,iBAArB,EAAwCX,KAAxC,EAA+CG,KAA/C,EAAsD,IAAtD;AACH;AACJ,GArGkB;;AAuGnB;;;;;;AAMAS,EAAAA,OAAO,EAAE,YACT;AACI,SAAKb,GAAL,GAAW,IAAX;AACA,SAAKE,MAAL,GAAc,IAAd;AACH;AAjHkB,CAAV,CAAb;AAqHAY,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('./events');\r\n\r\n/**\r\n * @classdesc\r\n * Contains information about a specific button on a Gamepad.\r\n * Button objects are created automatically by the Gamepad as they are needed.\r\n *\r\n * @class Button\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.Gamepad.Gamepad} pad - A reference to the Gamepad that this Button belongs to.\r\n * @param {integer} index - The index of this Button.\r\n */\r\nvar Button = new Class({\r\n\r\n    initialize:\r\n\r\n    function Button (pad, index)\r\n    {\r\n        /**\r\n         * A reference to the Gamepad that this Button belongs to.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#pad\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @since 3.0.0\r\n         */\r\n        this.pad = pad;\r\n\r\n        /**\r\n         * An event emitter to use to emit the button events.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#events\r\n         * @type {Phaser.Events.EventEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.events = pad.manager;\r\n\r\n        /**\r\n         * The index of this Button.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#index\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.index = index;\r\n\r\n        /**\r\n         * Between 0 and 1.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#value\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.value = 0;\r\n\r\n        /**\r\n         * Can be set for analogue buttons to enable a 'pressure' threshold,\r\n         * before a button is considered as being 'pressed'.\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#threshold\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.threshold = 1;\r\n\r\n        /**\r\n         * Is the Button being pressed down or not?\r\n         *\r\n         * @name Phaser.Input.Gamepad.Button#pressed\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.pressed = false;\r\n    },\r\n\r\n    /**\r\n     * Internal update handler for this Button.\r\n     * Called automatically by the Gamepad as part of its update.\r\n     *\r\n     * @method Phaser.Input.Gamepad.Button#update\r\n     * @fires Phaser.Input.Gamepad.Events#BUTTON_DOWN\r\n     * @fires Phaser.Input.Gamepad.Events#BUTTON_UP\r\n     * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_DOWN\r\n     * @fires Phaser.Input.Gamepad.Events#GAMEPAD_BUTTON_UP\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The value of the button. Between 0 and 1.\r\n     */\r\n    update: function (value)\r\n    {\r\n        this.value = value;\r\n\r\n        var pad = this.pad;\r\n        var index = this.index;\r\n\r\n        if (value >= this.threshold)\r\n        {\r\n            if (!this.pressed)\r\n            {\r\n                this.pressed = true;\r\n                this.events.emit(Events.BUTTON_DOWN, pad, this, value);\r\n                this.pad.emit(Events.GAMEPAD_BUTTON_DOWN, index, value, this);\r\n            }\r\n        }\r\n        else if (this.pressed)\r\n        {\r\n            this.pressed = false;\r\n            this.events.emit(Events.BUTTON_UP, pad, this, value);\r\n            this.pad.emit(Events.GAMEPAD_BUTTON_UP, index, value, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Button instance and releases external references it holds.\r\n     *\r\n     * @method Phaser.Input.Gamepad.Button#destroy\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.pad = null;\r\n        this.events = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Button;\r\n"]},"metadata":{},"sourceType":"script"}