{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar AnimationComponent = require('../../gameobjects/components/Animation');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('./components');\n\nvar GameObject = require('../../gameobjects/GameObject');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Pipeline = require('../../gameobjects/components/Pipeline');\n\nvar Sprite = require('../../gameobjects/sprite/Sprite');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Matter Physics Sprite Game Object.\r\n *\r\n * A Sprite Game Object is used for the display of both static and animated images in your game.\r\n * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\r\n * and animated.\r\n *\r\n * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\r\n * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\r\n * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.\r\n *\r\n * @class Sprite\r\n * @extends Phaser.GameObjects.Sprite\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Physics.Matter.Components.Bounce\r\n * @extends Phaser.Physics.Matter.Components.Collision\r\n * @extends Phaser.Physics.Matter.Components.Force\r\n * @extends Phaser.Physics.Matter.Components.Friction\r\n * @extends Phaser.Physics.Matter.Components.Gravity\r\n * @extends Phaser.Physics.Matter.Components.Mass\r\n * @extends Phaser.Physics.Matter.Components.Sensor\r\n * @extends Phaser.Physics.Matter.Components.SetBody\r\n * @extends Phaser.Physics.Matter.Components.Sleep\r\n * @extends Phaser.Physics.Matter.Components.Static\r\n * @extends Phaser.Physics.Matter.Components.Transform\r\n * @extends Phaser.Physics.Matter.Components.Velocity\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - A reference to the Matter.World instance that this body belongs to.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n */\n\n\nvar MatterSprite = new Class({\n  Extends: Sprite,\n  Mixins: [Components.Bounce, Components.Collision, Components.Force, Components.Friction, Components.Gravity, Components.Mass, Components.Sensor, Components.SetBody, Components.Sleep, Components.Static, Components.Transform, Components.Velocity, Pipeline],\n  initialize: function MatterSprite(world, x, y, texture, frame, options) {\n    GameObject.call(this, world.scene, 'Sprite');\n    this.anims = new AnimationComponent(this);\n    this.setTexture(texture, frame);\n    this.setSizeToFrame();\n    this.setOrigin();\n    /**\r\n     * A reference to the Matter.World instance that this body belongs to.\r\n     *\r\n     * @name Phaser.Physics.Matter.Sprite#world\r\n     * @type {Phaser.Physics.Matter.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world = world;\n    /**\r\n     * An internal temp vector used for velocity and force calculations.\r\n     *\r\n     * @name Phaser.Physics.Matter.Sprite#_tempVec2\r\n     * @type {Phaser.Math.Vector2}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._tempVec2 = new Vector2(x, y);\n    var shape = GetFastValue(options, 'shape', null);\n\n    if (shape) {\n      this.setBody(shape, options);\n    } else {\n      this.setRectangle(this.width, this.height, options);\n    }\n\n    this.setPosition(x, y);\n    this.initPipeline('TextureTintPipeline');\n  }\n});\nmodule.exports = MatterSprite;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/MatterSprite.js"],"names":["AnimationComponent","require","Class","Components","GameObject","GetFastValue","Pipeline","Sprite","Vector2","MatterSprite","Extends","Mixins","Bounce","Collision","Force","Friction","Gravity","Mass","Sensor","SetBody","Sleep","Static","Transform","Velocity","initialize","world","x","y","texture","frame","options","call","scene","anims","setTexture","setSizeToFrame","setOrigin","_tempVec2","shape","setBody","setRectangle","width","height","setPosition","initPipeline","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,wCAAD,CAAhC;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,8BAAD,CAAxB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,iCAAD,CAA1B;;AACA,IAAIK,QAAQ,GAAGL,OAAO,CAAC,uCAAD,CAAtB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,iCAAD,CAApB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,oBAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,IAAIQ,YAAY,GAAG,IAAIP,KAAJ,CAAU;AAEzBQ,EAAAA,OAAO,EAAEH,MAFgB;AAIzBI,EAAAA,MAAM,EAAE,CACJR,UAAU,CAACS,MADP,EAEJT,UAAU,CAACU,SAFP,EAGJV,UAAU,CAACW,KAHP,EAIJX,UAAU,CAACY,QAJP,EAKJZ,UAAU,CAACa,OALP,EAMJb,UAAU,CAACc,IANP,EAOJd,UAAU,CAACe,MAPP,EAQJf,UAAU,CAACgB,OARP,EASJhB,UAAU,CAACiB,KATP,EAUJjB,UAAU,CAACkB,MAVP,EAWJlB,UAAU,CAACmB,SAXP,EAYJnB,UAAU,CAACoB,QAZP,EAaJjB,QAbI,CAJiB;AAoBzBkB,EAAAA,UAAU,EAEV,SAASf,YAAT,CAAuBgB,KAAvB,EAA8BC,CAA9B,EAAiCC,CAAjC,EAAoCC,OAApC,EAA6CC,KAA7C,EAAoDC,OAApD,EACA;AACI1B,IAAAA,UAAU,CAAC2B,IAAX,CAAgB,IAAhB,EAAsBN,KAAK,CAACO,KAA5B,EAAmC,QAAnC;AAEA,SAAKC,KAAL,GAAa,IAAIjC,kBAAJ,CAAuB,IAAvB,CAAb;AAEA,SAAKkC,UAAL,CAAgBN,OAAhB,EAAyBC,KAAzB;AACA,SAAKM,cAAL;AACA,SAAKC,SAAL;AAEA;;;;;;;;AAOA,SAAKX,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;AAQA,SAAKY,SAAL,GAAiB,IAAI7B,OAAJ,CAAYkB,CAAZ,EAAeC,CAAf,CAAjB;AAEA,QAAIW,KAAK,GAAGjC,YAAY,CAACyB,OAAD,EAAU,OAAV,EAAmB,IAAnB,CAAxB;;AAEA,QAAIQ,KAAJ,EACA;AACI,WAAKC,OAAL,CAAaD,KAAb,EAAoBR,OAApB;AACH,KAHD,MAKA;AACI,WAAKU,YAAL,CAAkB,KAAKC,KAAvB,EAA8B,KAAKC,MAAnC,EAA2CZ,OAA3C;AACH;;AAED,SAAKa,WAAL,CAAiBjB,CAAjB,EAAoBC,CAApB;AAEA,SAAKiB,YAAL,CAAkB,qBAAlB;AACH;AAjEwB,CAAV,CAAnB;AAqEAC,MAAM,CAACC,OAAP,GAAiBrC,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar AnimationComponent = require('../../gameobjects/components/Animation');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('./components');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Pipeline = require('../../gameobjects/components/Pipeline');\r\nvar Sprite = require('../../gameobjects/sprite/Sprite');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Matter Physics Sprite Game Object.\r\n *\r\n * A Sprite Game Object is used for the display of both static and animated images in your game.\r\n * Sprites can have input events and physics bodies. They can also be tweened, tinted, scrolled\r\n * and animated.\r\n *\r\n * The main difference between a Sprite and an Image Game Object is that you cannot animate Images.\r\n * As such, Sprites take a fraction longer to process and have a larger API footprint due to the Animation\r\n * Component. If you do not require animation then you can safely use Images to replace Sprites in all cases.\r\n *\r\n * @class Sprite\r\n * @extends Phaser.GameObjects.Sprite\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Physics.Matter.Components.Bounce\r\n * @extends Phaser.Physics.Matter.Components.Collision\r\n * @extends Phaser.Physics.Matter.Components.Force\r\n * @extends Phaser.Physics.Matter.Components.Friction\r\n * @extends Phaser.Physics.Matter.Components.Gravity\r\n * @extends Phaser.Physics.Matter.Components.Mass\r\n * @extends Phaser.Physics.Matter.Components.Sensor\r\n * @extends Phaser.Physics.Matter.Components.SetBody\r\n * @extends Phaser.Physics.Matter.Components.Sleep\r\n * @extends Phaser.Physics.Matter.Components.Static\r\n * @extends Phaser.Physics.Matter.Components.Transform\r\n * @extends Phaser.Physics.Matter.Components.Velocity\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Size\r\n * @extends Phaser.GameObjects.Components.Texture\r\n * @extends Phaser.GameObjects.Components.Tint\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - A reference to the Matter.World instance that this body belongs to.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n * @param {Phaser.Types.Physics.Matter.MatterBodyConfig} [options] - An optional Body configuration object that is used to set initial Body properties on creation.\r\n */\r\nvar MatterSprite = new Class({\r\n\r\n    Extends: Sprite,\r\n\r\n    Mixins: [\r\n        Components.Bounce,\r\n        Components.Collision,\r\n        Components.Force,\r\n        Components.Friction,\r\n        Components.Gravity,\r\n        Components.Mass,\r\n        Components.Sensor,\r\n        Components.SetBody,\r\n        Components.Sleep,\r\n        Components.Static,\r\n        Components.Transform,\r\n        Components.Velocity,\r\n        Pipeline\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function MatterSprite (world, x, y, texture, frame, options)\r\n    {\r\n        GameObject.call(this, world.scene, 'Sprite');\r\n\r\n        this.anims = new AnimationComponent(this);\r\n\r\n        this.setTexture(texture, frame);\r\n        this.setSizeToFrame();\r\n        this.setOrigin();\r\n\r\n        /**\r\n         * A reference to the Matter.World instance that this body belongs to.\r\n         *\r\n         * @name Phaser.Physics.Matter.Sprite#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * An internal temp vector used for velocity and force calculations.\r\n         *\r\n         * @name Phaser.Physics.Matter.Sprite#_tempVec2\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._tempVec2 = new Vector2(x, y);\r\n\r\n        var shape = GetFastValue(options, 'shape', null);\r\n\r\n        if (shape)\r\n        {\r\n            this.setBody(shape, options);\r\n        }\r\n        else\r\n        {\r\n            this.setRectangle(this.width, this.height, options);\r\n        }\r\n\r\n        this.setPosition(x, y);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MatterSprite;\r\n"]},"metadata":{},"sourceType":"script"}