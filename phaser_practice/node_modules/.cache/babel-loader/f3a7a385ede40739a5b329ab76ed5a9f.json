{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n\nvar Line = require('../line/Line');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)\r\n *\r\n * @class Rectangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The X coordinate of the top left corner of the Rectangle.\r\n * @param {number} [y=0] - The Y coordinate of the top left corner of the Rectangle.\r\n * @param {number} [width=0] - The width of the Rectangle.\r\n * @param {number} [height=0] - The height of the Rectangle.\r\n */\n\n\nvar Rectangle = new Class({\n  initialize: function Rectangle(x, y, width, height) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 0;\n    }\n\n    if (height === undefined) {\n      height = 0;\n    }\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.RECTANGLE`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n\n    this.type = GEOM_CONST.RECTANGLE;\n    /**\r\n     * The X coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The Y coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#width\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#height\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n  },\n\n  /**\r\n   * Checks if the given point is inside the Rectangle's bounds.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the point to check.\r\n   * @param {number} y - The Y coordinate of the point to check.\r\n   *\r\n   * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n   */\n  contains: function (x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\r\n   * \r\n   * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\r\n   * \r\n   * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - The normalized distance into the Rectangle's perimeter to return.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - An object to update with the `x` and `y` coordinates of the point.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} The updated `output` object, or a new Point if no `output` object was given.\r\n   */\n  getPoint: function (position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Returns an array of points from the perimeter of the Rectangle, each spaced out based on the quantity or step required.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The number of points to return. Set to `false` or 0 to return an arbitrary number of points (`perimeter / stepRate`) evenly spaced around the Rectangle based on the `stepRate`.\r\n   * @param {number} [stepRate] - If `quantity` is 0, determines the normalized distance between each returned point.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An array to which to append the points.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} The modified `output` array, or a new array if none was provided.\r\n   */\n  getPoints: function (quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a random point within the Rectangle's bounds.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {Phaser.Geom.Point} [point] - The object in which to store the `x` and `y` coordinates of the point.\r\n   *\r\n   * @return {Phaser.Geom.Point} The updated `point`, or a new Point if none was provided.\r\n   */\n  getRandomPoint: function (point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets the position, width, and height of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n   * @param {number} y - The Y coordinate of the top left corner of the Rectangle.\r\n   * @param {number} width - The width of the Rectangle.\r\n   * @param {number} height - The height of the Rectangle.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setTo: function (x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Resets the position, width, and height of the Rectangle to 0.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setEmpty: function () {\n    return this.setTo(0, 0, 0, 0);\n  },\n\n  /**\r\n   * Sets the position of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n   * @param {number} [y=x] - The Y coordinate of the top left corner of the Rectangle.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setPosition: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the width and height of the Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width to set the Rectangle to.\r\n   * @param {number} [height=width] - The height to set the Rectangle to.\r\n   *\r\n   * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n   */\n  setSize: function (width, height) {\n    if (height === undefined) {\n      height = width;\n    }\n\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Determines if the Rectangle is empty. A Rectangle is empty if its width or height is less than or equal to 0.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#isEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Rectangle is empty. A Rectangle object is empty if its width or height is less than or equal to 0.\r\n   */\n  isEmpty: function () {\n    return this.width <= 0 || this.height <= 0;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the top of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the top of this Rectangle.\r\n   */\n  getLineA: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x, this.y, this.right, this.y);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the right of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the right of this Rectangle.\r\n   */\n  getLineB: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.right, this.y, this.right, this.bottom);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the bottom of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineC\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the bottom of this Rectangle.\r\n   */\n  getLineC: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.right, this.bottom, this.x, this.bottom);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to the left of this Rectangle.\r\n   *\r\n   * @method Phaser.Geom.Rectangle#getLineD\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to the left of this Rectangle.\r\n   */\n  getLineD: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x, this.bottom, this.x, this.y);\n    return line;\n  },\n\n  /**\r\n   * The x coordinate of the left of the Rectangle.\r\n   * Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return this.x;\n    },\n    set: function (value) {\n      if (value >= this.right) {\n        this.width = 0;\n      } else {\n        this.width = this.right - value;\n      }\n\n      this.x = value;\n    }\n  },\n\n  /**\r\n   * The sum of the x and width properties.\r\n   * Changing the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return this.x + this.width;\n    },\n    set: function (value) {\n      if (value <= this.x) {\n        this.width = 0;\n      } else {\n        this.width = value - this.x;\n      }\n    }\n  },\n\n  /**\r\n   * The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\r\n   * However it does affect the height property, whereas changing the y value does not affect the height property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return this.y;\n    },\n    set: function (value) {\n      if (value >= this.bottom) {\n        this.height = 0;\n      } else {\n        this.height = this.bottom - value;\n      }\n\n      this.y = value;\n    }\n  },\n\n  /**\r\n   * The sum of the y and height properties.\r\n   * Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return this.y + this.height;\n    },\n    set: function (value) {\n      if (value <= this.y) {\n        this.height = 0;\n      } else {\n        this.height = value - this.y;\n      }\n    }\n  },\n\n  /**\r\n   * The x coordinate of the center of the Rectangle.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#centerX\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  centerX: {\n    get: function () {\n      return this.x + this.width / 2;\n    },\n    set: function (value) {\n      this.x = value - this.width / 2;\n    }\n  },\n\n  /**\r\n   * The y coordinate of the center of the Rectangle.\r\n   *\r\n   * @name Phaser.Geom.Rectangle#centerY\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  centerY: {\n    get: function () {\n      return this.y + this.height / 2;\n    },\n    set: function (value) {\n      this.y = value - this.height / 2;\n    }\n  }\n});\nmodule.exports = Rectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/Rectangle.js"],"names":["Class","require","Contains","GetPoint","GetPoints","GEOM_CONST","Line","Random","Rectangle","initialize","x","y","width","height","undefined","type","RECTANGLE","contains","getPoint","position","output","getPoints","quantity","stepRate","getRandomPoint","point","setTo","setEmpty","setPosition","setSize","isEmpty","getLineA","line","right","getLineB","bottom","getLineC","getLineD","left","get","set","value","top","centerX","centerY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIO,SAAS,GAAG,IAAIR,KAAJ,CAAU;AAEtBS,EAAAA,UAAU,EAEV,SAASD,SAAT,CAAoBE,CAApB,EAAuBC,CAAvB,EAA0BC,KAA1B,EAAiCC,MAAjC,EACA;AACI,QAAIH,CAAC,KAAKI,SAAV,EAAqB;AAAEJ,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,QAAIC,CAAC,KAAKG,SAAV,EAAqB;AAAEH,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,QAAIC,KAAK,KAAKE,SAAd,EAAyB;AAAEF,MAAAA,KAAK,GAAG,CAAR;AAAY;;AACvC,QAAIC,MAAM,KAAKC,SAAf,EAA0B;AAAED,MAAAA,MAAM,GAAG,CAAT;AAAa;AAEzC;;;;;;;;;;;AASA,SAAKE,IAAL,GAAYV,UAAU,CAACW,SAAvB;AAEA;;;;;;;;;AAQA,SAAKN,CAAL,GAASA,CAAT;AAEA;;;;;;;;;AAQA,SAAKC,CAAL,GAASA,CAAT;AAEA;;;;;;;;;AAQA,SAAKC,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;AAQA,SAAKC,MAAL,GAAcA,MAAd;AACH,GA7DqB;;AA+DtB;;;;;;;;;;;AAWAI,EAAAA,QAAQ,EAAE,UAAUP,CAAV,EAAaC,CAAb,EACV;AACI,WAAOT,QAAQ,CAAC,IAAD,EAAOQ,CAAP,EAAUC,CAAV,CAAf;AACH,GA7EqB;;AA+EtB;;;;;;;;;;;;;;;;;AAiBAO,EAAAA,QAAQ,EAAE,UAAUC,QAAV,EAAoBC,MAApB,EACV;AACI,WAAOjB,QAAQ,CAAC,IAAD,EAAOgB,QAAP,EAAiBC,MAAjB,CAAf;AACH,GAnGqB;;AAqGtB;;;;;;;;;;;;;;AAcAC,EAAAA,SAAS,EAAE,UAAUC,QAAV,EAAoBC,QAApB,EAA8BH,MAA9B,EACX;AACI,WAAOhB,SAAS,CAAC,IAAD,EAAOkB,QAAP,EAAiBC,QAAjB,EAA2BH,MAA3B,CAAhB;AACH,GAtHqB;;AAwHtB;;;;;;;;;;;;AAYAI,EAAAA,cAAc,EAAE,UAAUC,KAAV,EAChB;AACI,WAAOlB,MAAM,CAAC,IAAD,EAAOkB,KAAP,CAAb;AACH,GAvIqB;;AAyItB;;;;;;;;;;;;;AAaAC,EAAAA,KAAK,EAAE,UAAUhB,CAAV,EAAaC,CAAb,EAAgBC,KAAhB,EAAuBC,MAAvB,EACP;AACI,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,WAAO,IAAP;AACH,GA9JqB;;AAgKtB;;;;;;;;AAQAc,EAAAA,QAAQ,EAAE,YACV;AACI,WAAO,KAAKD,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,CAAP;AACH,GA3KqB;;AA6KtB;;;;;;;;;;;AAWAE,EAAAA,WAAW,EAAE,UAAUlB,CAAV,EAAaC,CAAb,EACb;AACI,QAAIA,CAAC,KAAKG,SAAV,EAAqB;AAAEH,MAAAA,CAAC,GAAGD,CAAJ;AAAQ;;AAE/B,SAAKA,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AAEA,WAAO,IAAP;AACH,GAhMqB;;AAkMtB;;;;;;;;;;;AAWAkB,EAAAA,OAAO,EAAE,UAAUjB,KAAV,EAAiBC,MAAjB,EACT;AACI,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AAAED,MAAAA,MAAM,GAAGD,KAAT;AAAiB;;AAE7C,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AAEA,WAAO,IAAP;AACH,GArNqB;;AAuNtB;;;;;;;;AAQAiB,EAAAA,OAAO,EAAE,YACT;AACI,WAAQ,KAAKlB,KAAL,IAAc,CAAd,IAAmB,KAAKC,MAAL,IAAe,CAA1C;AACH,GAlOqB;;AAoOtB;;;;;;;;;;;;AAYAkB,EAAAA,QAAQ,EAAE,UAAUC,IAAV,EACV;AACI,QAAIA,IAAI,KAAKlB,SAAb,EAAwB;AAAEkB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACN,KAAL,CAAW,KAAKhB,CAAhB,EAAmB,KAAKC,CAAxB,EAA2B,KAAKsB,KAAhC,EAAuC,KAAKtB,CAA5C;AAEA,WAAOqB,IAAP;AACH,GAvPqB;;AAyPtB;;;;;;;;;;;;AAYAE,EAAAA,QAAQ,EAAE,UAAUF,IAAV,EACV;AACI,QAAIA,IAAI,KAAKlB,SAAb,EAAwB;AAAEkB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACN,KAAL,CAAW,KAAKO,KAAhB,EAAuB,KAAKtB,CAA5B,EAA+B,KAAKsB,KAApC,EAA2C,KAAKE,MAAhD;AAEA,WAAOH,IAAP;AACH,GA5QqB;;AA8QtB;;;;;;;;;;;;AAYAI,EAAAA,QAAQ,EAAE,UAAUJ,IAAV,EACV;AACI,QAAIA,IAAI,KAAKlB,SAAb,EAAwB;AAAEkB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACN,KAAL,CAAW,KAAKO,KAAhB,EAAuB,KAAKE,MAA5B,EAAoC,KAAKzB,CAAzC,EAA4C,KAAKyB,MAAjD;AAEA,WAAOH,IAAP;AACH,GAjSqB;;AAmStB;;;;;;;;;;;;AAYAK,EAAAA,QAAQ,EAAE,UAAUL,IAAV,EACV;AACI,QAAIA,IAAI,KAAKlB,SAAb,EAAwB;AAAEkB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACN,KAAL,CAAW,KAAKhB,CAAhB,EAAmB,KAAKyB,MAAxB,EAAgC,KAAKzB,CAArC,EAAwC,KAAKC,CAA7C;AAEA,WAAOqB,IAAP;AACH,GAtTqB;;AAwTtB;;;;;;;;AAQAM,EAAAA,IAAI,EAAE;AAEFC,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK7B,CAAZ;AACH,KALC;AAOF8B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIA,KAAK,IAAI,KAAKR,KAAlB,EACA;AACI,aAAKrB,KAAL,GAAa,CAAb;AACH,OAHD,MAKA;AACI,aAAKA,KAAL,GAAa,KAAKqB,KAAL,GAAaQ,KAA1B;AACH;;AAED,WAAK/B,CAAL,GAAS+B,KAAT;AACH;AAnBC,GAhUgB;;AAuVtB;;;;;;;;AAQAR,EAAAA,KAAK,EAAE;AAEHM,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK7B,CAAL,GAAS,KAAKE,KAArB;AACH,KALE;AAOH4B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIA,KAAK,IAAI,KAAK/B,CAAlB,EACA;AACI,aAAKE,KAAL,GAAa,CAAb;AACH,OAHD,MAKA;AACI,aAAKA,KAAL,GAAa6B,KAAK,GAAG,KAAK/B,CAA1B;AACH;AACJ;AAjBE,GA/Ve;;AAoXtB;;;;;;;;AAQAgC,EAAAA,GAAG,EAAE;AAEDH,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK5B,CAAZ;AACH,KALA;AAOD6B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIA,KAAK,IAAI,KAAKN,MAAlB,EACA;AACI,aAAKtB,MAAL,GAAc,CAAd;AACH,OAHD,MAKA;AACI,aAAKA,MAAL,GAAe,KAAKsB,MAAL,GAAcM,KAA7B;AACH;;AAED,WAAK9B,CAAL,GAAS8B,KAAT;AACH;AAnBA,GA5XiB;;AAmZtB;;;;;;;;AAQAN,EAAAA,MAAM,EAAE;AAEJI,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK5B,CAAL,GAAS,KAAKE,MAArB;AACH,KALG;AAOJ2B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIA,KAAK,IAAI,KAAK9B,CAAlB,EACA;AACI,aAAKE,MAAL,GAAc,CAAd;AACH,OAHD,MAKA;AACI,aAAKA,MAAL,GAAc4B,KAAK,GAAG,KAAK9B,CAA3B;AACH;AACJ;AAjBG,GA3Zc;;AAgbtB;;;;;;;AAOAgC,EAAAA,OAAO,EAAE;AAELJ,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK7B,CAAL,GAAU,KAAKE,KAAL,GAAa,CAA9B;AACH,KALI;AAOL4B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,WAAK/B,CAAL,GAAS+B,KAAK,GAAI,KAAK7B,KAAL,GAAa,CAA/B;AACH;AAVI,GAvba;;AAqctB;;;;;;;AAOAgC,EAAAA,OAAO,EAAE;AAELL,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAK5B,CAAL,GAAU,KAAKE,MAAL,GAAc,CAA/B;AACH,KALI;AAOL2B,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,WAAK9B,CAAL,GAAS8B,KAAK,GAAI,KAAK5B,MAAL,GAAc,CAAhC;AACH;AAVI;AA5ca,CAAV,CAAhB;AA4dAgC,MAAM,CAACC,OAAP,GAAiBtC,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Line = require('../line/Line');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * Encapsulates a 2D rectangle defined by its corner point in the top-left and its extends in x (width) and y (height)\r\n *\r\n * @class Rectangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The X coordinate of the top left corner of the Rectangle.\r\n * @param {number} [y=0] - The Y coordinate of the top left corner of the Rectangle.\r\n * @param {number} [width=0] - The width of the Rectangle.\r\n * @param {number} [height=0] - The height of the Rectangle.\r\n */\r\nvar Rectangle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Rectangle (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.RECTANGLE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.RECTANGLE;\r\n\r\n        /**\r\n         * The X coordinate of the top left corner of the Rectangle.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The Y coordinate of the top left corner of the Rectangle.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The width of the Rectangle, i.e. the distance between its left side (defined by `x`) and its right side.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#width\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The height of the Rectangle, i.e. the distance between its top side (defined by `y`) and its bottom side.\r\n         *\r\n         * @name Phaser.Geom.Rectangle#height\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n    },\r\n\r\n    /**\r\n     * Checks if the given point is inside the Rectangle's bounds.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the point to check.\r\n     * @param {number} y - The Y coordinate of the point to check.\r\n     *\r\n     * @return {boolean} `true` if the point is within the Rectangle's bounds, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Calculates the coordinates of a point at a certain `position` on the Rectangle's perimeter.\r\n     * \r\n     * The `position` is a fraction between 0 and 1 which defines how far into the perimeter the point is.\r\n     * \r\n     * A value of 0 or 1 returns the point at the top left corner of the rectangle, while a value of 0.5 returns the point at the bottom right corner of the rectangle. Values between 0 and 0.5 are on the top or the right side and values between 0.5 and 1 are on the bottom or the left side.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - The normalized distance into the Rectangle's perimeter to return.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - An object to update with the `x` and `y` coordinates of the point.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} The updated `output` object, or a new Point if no `output` object was given.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of points from the perimeter of the Rectangle, each spaced out based on the quantity or step required.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The number of points to return. Set to `false` or 0 to return an arbitrary number of points (`perimeter / stepRate`) evenly spaced around the Rectangle based on the `stepRate`.\r\n     * @param {number} [stepRate] - If `quantity` is 0, determines the normalized distance between each returned point.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to which to append the points.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} The modified `output` array, or a new array if none was provided.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a random point within the Rectangle's bounds.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {Phaser.Geom.Point} [point] - The object in which to store the `x` and `y` coordinates of the point.\r\n     *\r\n     * @return {Phaser.Geom.Point} The updated `point`, or a new Point if none was provided.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the position, width, and height of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n     * @param {number} y - The Y coordinate of the top left corner of the Rectangle.\r\n     * @param {number} width - The width of the Rectangle.\r\n     * @param {number} height - The height of the Rectangle.\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n     */\r\n    setTo: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets the position, width, and height of the Rectangle to 0.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        return this.setTo(0, 0, 0, 0);\r\n    },\r\n\r\n    /**\r\n     * Sets the position of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The X coordinate of the top left corner of the Rectangle.\r\n     * @param {number} [y=x] - The Y coordinate of the top left corner of the Rectangle.\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the width and height of the Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width to set the Rectangle to.\r\n     * @param {number} [height=width] - The height to set the Rectangle to.\r\n     *\r\n     * @return {Phaser.Geom.Rectangle} This Rectangle object.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Determines if the Rectangle is empty. A Rectangle is empty if its width or height is less than or equal to 0.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Rectangle is empty. A Rectangle object is empty if its width or height is less than or equal to 0.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this.width <= 0 || this.height <= 0);\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the top of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the top of this Rectangle.\r\n     */\r\n    getLineA: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x, this.y, this.right, this.y);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the right of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the right of this Rectangle.\r\n     */\r\n    getLineB: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.right, this.y, this.right, this.bottom);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the bottom of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineC\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the bottom of this Rectangle.\r\n     */\r\n    getLineC: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.right, this.bottom, this.x, this.bottom);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to the left of this Rectangle.\r\n     *\r\n     * @method Phaser.Geom.Rectangle#getLineD\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to the left of this Rectangle.\r\n     */\r\n    getLineD: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x, this.bottom, this.x, this.y);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the left of the Rectangle.\r\n     * Changing the left property of a Rectangle object has no effect on the y and height properties. However it does affect the width property, whereas changing the x value does not affect the width property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value >= this.right)\r\n            {\r\n                this.width = 0;\r\n            }\r\n            else\r\n            {\r\n                this.width = this.right - value;\r\n            }\r\n\r\n            this.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The sum of the x and width properties.\r\n     * Changing the right property of a Rectangle object has no effect on the x, y and height properties, however it does affect the width property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + this.width;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value <= this.x)\r\n            {\r\n                this.width = 0;\r\n            }\r\n            else\r\n            {\r\n                this.width = value - this.x;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the top of the Rectangle. Changing the top property of a Rectangle object has no effect on the x and width properties.\r\n     * However it does affect the height property, whereas changing the y value does not affect the height property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value >= this.bottom)\r\n            {\r\n                this.height = 0;\r\n            }\r\n            else\r\n            {\r\n                this.height = (this.bottom - value);\r\n            }\r\n\r\n            this.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The sum of the y and height properties.\r\n     * Changing the bottom property of a Rectangle object has no effect on the x, y and width properties, but does change the height property.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + this.height;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            if (value <= this.y)\r\n            {\r\n                this.height = 0;\r\n            }\r\n            else\r\n            {\r\n                this.height = value - this.y;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the center of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#centerX\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    centerX: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the center of the Rectangle.\r\n     *\r\n     * @name Phaser.Geom.Rectangle#centerY\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    centerY: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - (this.height / 2);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Rectangle;\r\n"]},"metadata":{},"sourceType":"script"}