{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\nvar Class = require('../../../../src/utils/Class');\n\nvar GameObject = require('../../../../src/gameobjects/GameObject');\n\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\n\nvar Vector2 = require('../../../../src/math/Vector2');\n\nvar Vector4 = require('../../../../src/math/Vector4');\n/**\r\n * @classdesc\r\n * A Sprite 3D Game Object.\r\n *\r\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\r\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\r\n *\r\n * @class Sprite3D\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The x position of this Game Object.\r\n * @param {number} y - The y position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\n\n\nvar Sprite3D = new Class({\n  Extends: GameObject,\n  initialize: function Sprite3D(scene, x, y, z, texture, frame) {\n    GameObject.call(this, scene, 'Sprite3D');\n    /**\r\n     * The encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#gameObject\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.gameObject = new Sprite(scene, 0, 0, texture, frame);\n    /**\r\n     * The position of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#position\r\n     * @type {Phaser.Math.Vector4}\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector4(x, y, z);\n    /**\r\n     * The 2D size of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#size\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = new Vector2(this.gameObject.width, this.gameObject.height);\n    /**\r\n     * The 2D scale of the Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#scale\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\r\n     * Whether to automatically set the horizontal scale of the encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#adjustScaleX\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.adjustScaleX = true;\n    /**\r\n     * Whether to automatically set the vertical scale of the encapsulated Sprite.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#adjustScaleY\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.adjustScaleY = true;\n    /**\r\n     * The visible state of the Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#_visible\r\n     * @type {boolean}\r\n     * @default true\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._visible = true;\n  },\n\n  /**\r\n   * Project this Sprite onto the given 3D Camera.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite3D#project\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\r\n   */\n  project: function (camera) {\n    var pos = this.position;\n    var gameObject = this.gameObject;\n    camera.project(pos, gameObject);\n    camera.getPointSize(pos, this.size, this.scale);\n\n    if (this.scale.x <= 0 || this.scale.y <= 0) {\n      gameObject.setVisible(false);\n    } else {\n      if (!gameObject.visible) {\n        gameObject.setVisible(true);\n      }\n\n      if (this.adjustScaleX) {\n        gameObject.scaleX = this.scale.x;\n      }\n\n      if (this.adjustScaleY) {\n        gameObject.scaleY = this.scale.y;\n      }\n\n      gameObject.setDepth(gameObject.z * -1);\n    }\n  },\n\n  /**\r\n   * Set the visible state of the Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Sprite3D#setVisible\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - The visible state of the Game Object.\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\r\n   */\n  setVisible: function (value) {\n    this.visible = value;\n    return this;\n  },\n\n  /**\r\n   * The visible state of the Game Object.\r\n   *\r\n   * An invisible Game Object will skip rendering, but will still process update logic.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#visible\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  visible: {\n    get: function () {\n      return this._visible;\n    },\n    set: function (value) {\n      this._visible = value;\n      this.gameObject.visible = value;\n    }\n  },\n\n  /**\r\n   * The x position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function () {\n      return this.position.x;\n    },\n    set: function (value) {\n      this.position.x = value;\n    }\n  },\n\n  /**\r\n   * The y position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function () {\n      return this.position.y;\n    },\n    set: function (value) {\n      this.position.y = value;\n    }\n  },\n\n  /**\r\n   * The z position of this Game Object.\r\n   *\r\n   * @name Phaser.GameObjects.Sprite3D#z\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  z: {\n    get: function () {\n      return this.position.z;\n    },\n    set: function (value) {\n      this.position.z = value;\n    }\n  }\n});\nmodule.exports = Sprite3D;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/plugins/camera3d/src/sprite3d/Sprite3D.js"],"names":["Class","require","GameObject","Sprite","Vector2","Vector4","Sprite3D","Extends","initialize","scene","x","y","z","texture","frame","call","gameObject","position","size","width","height","scale","adjustScaleX","adjustScaleY","_visible","project","camera","pos","getPointSize","setVisible","visible","scaleX","scaleY","setDepth","value","get","set","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2018 Photon Storm Ltd.\r\n * @license      {@link https://github.com/photonstorm/phaser/blob/master/license.txt|MIT License}\r\n */\r\n\r\nvar Class = require('../../../../src/utils/Class');\r\nvar GameObject = require('../../../../src/gameobjects/GameObject');\r\nvar Sprite = require('../../../../src/gameobjects/sprite/Sprite');\r\nvar Vector2 = require('../../../../src/math/Vector2');\r\nvar Vector4 = require('../../../../src/math/Vector4');\r\n\r\n/**\r\n * @classdesc\r\n * A Sprite 3D Game Object.\r\n *\r\n * The Sprite 3D object is an encapsulation of a standard Sprite object, with additional methods to allow\r\n * it to be rendered by a 3D Camera. The Sprite can be positioned anywhere within 3D space.\r\n *\r\n * @class Sprite3D\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberOf Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The x position of this Game Object.\r\n * @param {number} y - The y position of this Game Object.\r\n * @param {number} z - The z position of this Game Object.\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n */\r\nvar Sprite3D = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    initialize:\r\n\r\n    function Sprite3D (scene, x, y, z, texture, frame)\r\n    {\r\n        GameObject.call(this, scene, 'Sprite3D');\r\n\r\n        /**\r\n         * The encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = new Sprite(scene, 0, 0, texture, frame);\r\n\r\n        /**\r\n         * The position of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#position\r\n         * @type {Phaser.Math.Vector4}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector4(x, y, z);\r\n\r\n        /**\r\n         * The 2D size of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#size\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = new Vector2(this.gameObject.width, this.gameObject.height);\r\n\r\n        /**\r\n         * The 2D scale of the Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#scale\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.scale = new Vector2(1, 1);\r\n\r\n        /**\r\n         * Whether to automatically set the horizontal scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleX\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleX = true;\r\n\r\n        /**\r\n         * Whether to automatically set the vertical scale of the encapsulated Sprite.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#adjustScaleY\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.adjustScaleY = true;\r\n\r\n        /**\r\n         * The visible state of the Game Object.\r\n         *\r\n         * @name Phaser.GameObjects.Sprite3D#_visible\r\n         * @type {boolean}\r\n         * @default true\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._visible = true;\r\n    },\r\n\r\n    /**\r\n     * Project this Sprite onto the given 3D Camera.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#project\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Sprite3D.Camera} camera - The 3D Camera onto which to project this Sprite.\r\n     */\r\n    project: function (camera)\r\n    {\r\n        var pos = this.position;\r\n\r\n        var gameObject = this.gameObject;\r\n\r\n        camera.project(pos, gameObject);\r\n\r\n        camera.getPointSize(pos, this.size, this.scale);\r\n\r\n        if (this.scale.x <= 0 || this.scale.y <= 0)\r\n        {\r\n            gameObject.setVisible(false);\r\n        }\r\n        else\r\n        {\r\n            if (!gameObject.visible)\r\n            {\r\n                gameObject.setVisible(true);\r\n            }\r\n\r\n            if (this.adjustScaleX)\r\n            {\r\n                gameObject.scaleX = this.scale.x;\r\n            }\r\n\r\n            if (this.adjustScaleY)\r\n            {\r\n                gameObject.scaleY = this.scale.y;\r\n            }\r\n\r\n            gameObject.setDepth(gameObject.z * -1);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the visible state of the Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Sprite3D#setVisible\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - The visible state of the Game Object.\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite3D} This Sprite3D Object.\r\n     */\r\n    setVisible: function (value)\r\n    {\r\n        this.visible = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The visible state of the Game Object.\r\n     *\r\n     * An invisible Game Object will skip rendering, but will still process update logic.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#visible\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    visible: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._visible;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._visible = value;\r\n            this.gameObject.visible = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The x position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The z position of this Game Object.\r\n     *\r\n     * @name Phaser.GameObjects.Sprite3D#z\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    z: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.z;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.z = value;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Sprite3D;\r\n"]},"metadata":{},"sourceType":"script"}