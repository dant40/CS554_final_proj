{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.RenderTexture#renderWebGL\r\n * @since 3.2.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.RenderTexture} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar RenderTextureWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var frame = src.frame;\n  var width = frame.width;\n  var height = frame.height;\n  var getTint = Utils.getTintAppendFloatAlpha;\n  this.pipeline.batchTexture(src, frame.glTexture, width, height, src.x, src.y, width, height, src.scaleX, src.scaleY, src.rotation, src.flipX, !src.flipY, src.scrollFactorX, src.scrollFactorY, src.displayOriginX, src.displayOriginY, 0, 0, width, height, getTint(src._tintTL, camera.alpha * src._alphaTL), getTint(src._tintTR, camera.alpha * src._alphaTR), getTint(src._tintBL, camera.alpha * src._alphaBL), getTint(src._tintBR, camera.alpha * src._alphaBR), src._isTinted && src.tintFill, 0, 0, camera, parentMatrix); //  Force clear the current texture so that items next in the batch (like Graphics) don't try and use it\n\n  renderer.setBlankTexture(true);\n};\n\nmodule.exports = RenderTextureWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/rendertexture/RenderTextureWebGLRenderer.js"],"names":["Utils","require","RenderTextureWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","frame","width","height","getTint","getTintAppendFloatAlpha","pipeline","batchTexture","glTexture","x","y","scaleX","scaleY","rotation","flipX","flipY","scrollFactorX","scrollFactorY","displayOriginX","displayOriginY","_tintTL","alpha","_alphaTL","_tintTR","_alphaTR","_tintBL","_alphaBL","_tintBR","_alphaBR","_isTinted","tintFill","setBlankTexture","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,4BAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,0BAA0B,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EACjC;AACI,MAAIC,KAAK,GAAGJ,GAAG,CAACI,KAAhB;AACA,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAIC,MAAM,GAAGF,KAAK,CAACE,MAAnB;AACA,MAAIC,OAAO,GAAGX,KAAK,CAACY,uBAApB;AAEA,OAAKC,QAAL,CAAcC,YAAd,CACIV,GADJ,EAEII,KAAK,CAACO,SAFV,EAGIN,KAHJ,EAGWC,MAHX,EAIIN,GAAG,CAACY,CAJR,EAIWZ,GAAG,CAACa,CAJf,EAKIR,KALJ,EAKWC,MALX,EAMIN,GAAG,CAACc,MANR,EAMgBd,GAAG,CAACe,MANpB,EAOIf,GAAG,CAACgB,QAPR,EAQIhB,GAAG,CAACiB,KARR,EAQe,CAACjB,GAAG,CAACkB,KARpB,EASIlB,GAAG,CAACmB,aATR,EASuBnB,GAAG,CAACoB,aAT3B,EAUIpB,GAAG,CAACqB,cAVR,EAUwBrB,GAAG,CAACsB,cAV5B,EAWI,CAXJ,EAWO,CAXP,EAWUjB,KAXV,EAWiBC,MAXjB,EAYIC,OAAO,CAACP,GAAG,CAACuB,OAAL,EAAcrB,MAAM,CAACsB,KAAP,GAAexB,GAAG,CAACyB,QAAjC,CAZX,EAaIlB,OAAO,CAACP,GAAG,CAAC0B,OAAL,EAAcxB,MAAM,CAACsB,KAAP,GAAexB,GAAG,CAAC2B,QAAjC,CAbX,EAcIpB,OAAO,CAACP,GAAG,CAAC4B,OAAL,EAAc1B,MAAM,CAACsB,KAAP,GAAexB,GAAG,CAAC6B,QAAjC,CAdX,EAeItB,OAAO,CAACP,GAAG,CAAC8B,OAAL,EAAc5B,MAAM,CAACsB,KAAP,GAAexB,GAAG,CAAC+B,QAAjC,CAfX,EAgBK/B,GAAG,CAACgC,SAAJ,IAAiBhC,GAAG,CAACiC,QAhB1B,EAiBI,CAjBJ,EAiBO,CAjBP,EAkBI/B,MAlBJ,EAmBIC,YAnBJ,EANJ,CA4BI;;AACAJ,EAAAA,QAAQ,CAACmC,eAAT,CAAyB,IAAzB;AACH,CA/BD;;AAiCAC,MAAM,CAACC,OAAP,GAAiBtC,0BAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.RenderTexture#renderWebGL\r\n * @since 3.2.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.RenderTexture} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar RenderTextureWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var frame = src.frame;\r\n    var width = frame.width;\r\n    var height = frame.height;\r\n    var getTint = Utils.getTintAppendFloatAlpha;\r\n\r\n    this.pipeline.batchTexture(\r\n        src,\r\n        frame.glTexture,\r\n        width, height,\r\n        src.x, src.y,\r\n        width, height,\r\n        src.scaleX, src.scaleY,\r\n        src.rotation,\r\n        src.flipX, !src.flipY,\r\n        src.scrollFactorX, src.scrollFactorY,\r\n        src.displayOriginX, src.displayOriginY,\r\n        0, 0, width, height,\r\n        getTint(src._tintTL, camera.alpha * src._alphaTL),\r\n        getTint(src._tintTR, camera.alpha * src._alphaTR),\r\n        getTint(src._tintBL, camera.alpha * src._alphaBL),\r\n        getTint(src._tintBR, camera.alpha * src._alphaBR),\r\n        (src._isTinted && src.tintFill),\r\n        0, 0,\r\n        camera,\r\n        parentMatrix\r\n    );\r\n\r\n    //  Force clear the current texture so that items next in the batch (like Graphics) don't try and use it\r\n    renderer.setBlankTexture(true);\r\n};\r\n\r\nmodule.exports = RenderTextureWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}