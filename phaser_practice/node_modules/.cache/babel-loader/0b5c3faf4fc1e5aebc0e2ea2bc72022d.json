{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Length = require('./Length');\n\nvar Point = require('../point/Point');\n/**\r\n * Get a number of points along a line's length.\r\n *\r\n * Provide a `quantity` to get an exact number of points along the line.\r\n *\r\n * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n * providing a `stepRate`.\r\n *\r\n * @function Phaser.Geom.Line.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n * @param {number} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n */\n\n\nvar GetPoints = function (line, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  } //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n\n  if (!quantity) {\n    quantity = Length(line) / stepRate;\n  }\n\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n\n  for (var i = 0; i < quantity; i++) {\n    var position = i / quantity;\n    var x = x1 + (x2 - x1) * position;\n    var y = y1 + (y2 - y1) * position;\n    out.push(new Point(x, y));\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/line/GetPoints.js"],"names":["Length","require","Point","GetPoints","line","quantity","stepRate","out","undefined","x1","y1","x2","y2","i","position","x","y","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIE,SAAS,GAAG,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,GAApC,EAChB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW,GADxC,CAGI;;;AACA,MAAI,CAACF,QAAL,EACA;AACIA,IAAAA,QAAQ,GAAGL,MAAM,CAACI,IAAD,CAAN,GAAeE,QAA1B;AACH;;AAED,MAAIG,EAAE,GAAGL,IAAI,CAACK,EAAd;AACA,MAAIC,EAAE,GAAGN,IAAI,CAACM,EAAd;AAEA,MAAIC,EAAE,GAAGP,IAAI,CAACO,EAAd;AACA,MAAIC,EAAE,GAAGR,IAAI,CAACQ,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAApB,EAA8BQ,CAAC,EAA/B,EACA;AACI,QAAIC,QAAQ,GAAGD,CAAC,GAAGR,QAAnB;AAEA,QAAIU,CAAC,GAAGN,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAYK,QAAzB;AACA,QAAIE,CAAC,GAAGN,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,IAAYI,QAAzB;AAEAP,IAAAA,GAAG,CAACU,IAAJ,CAAS,IAAIf,KAAJ,CAAUa,CAAV,EAAaC,CAAb,CAAT;AACH;;AAED,SAAOT,GAAP;AACH,CA3BD;;AA6BAW,MAAM,CAACC,OAAP,GAAiBhB,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Length = require('./Length');\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Get a number of points along a line's length.\r\n *\r\n * Provide a `quantity` to get an exact number of points along the line.\r\n *\r\n * Provide a `stepRate` to ensure a specific distance between each point on the line. Set `quantity` to `0` when\r\n * providing a `stepRate`.\r\n *\r\n * @function Phaser.Geom.Line.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line.\r\n * @param {integer} quantity - The number of points to place on the line. Set to `0` to use `stepRate` instead.\r\n * @param {number} [stepRate] - The distance between each point on the line. When set, `quantity` is implied and should be set to `0`.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array of Points, or point-like objects, to store the coordinates of the points on the line.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points, or point-like objects, containing the coordinates of the points on the line.\r\n */\r\nvar GetPoints = function (line, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Length(line) / stepRate;\r\n    }\r\n\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = i / quantity;\r\n\r\n        var x = x1 + (x2 - x1) * position;\r\n        var y = y1 + (y2 - y1) * position;\r\n\r\n        out.push(new Point(x, y));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n"]},"metadata":{},"sourceType":"script"}