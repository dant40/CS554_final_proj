{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Container#renderCanvas\r\n * @since 3.4.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Container} container - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\nvar ContainerCanvasRenderer = function (renderer, container, interpolationPercentage, camera, parentMatrix) {\n  var children = container.list;\n\n  if (children.length === 0) {\n    return;\n  }\n\n  var transformMatrix = container.localTransform;\n\n  if (parentMatrix) {\n    transformMatrix.loadIdentity();\n    transformMatrix.multiply(parentMatrix);\n    transformMatrix.translate(container.x, container.y);\n    transformMatrix.rotate(container.rotation);\n    transformMatrix.scale(container.scaleX, container.scaleY);\n  } else {\n    transformMatrix.applyITRS(container.x, container.y, container.rotation, container.scaleX, container.scaleY);\n  }\n\n  var containerHasBlendMode = container.blendMode !== -1;\n\n  if (!containerHasBlendMode) {\n    //  If Container is SKIP_TEST then set blend mode to be Normal\n    renderer.setBlendMode(0);\n  }\n\n  var alpha = container._alpha;\n  var scrollFactorX = container.scrollFactorX;\n  var scrollFactorY = container.scrollFactorY;\n\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    if (!child.willRender(camera)) {\n      continue;\n    }\n\n    var childAlpha = child.alpha;\n    var childScrollFactorX = child.scrollFactorX;\n    var childScrollFactorY = child.scrollFactorY;\n\n    if (!containerHasBlendMode && child.blendMode !== renderer.currentBlendMode) {\n      //  If Container doesn't have its own blend mode, then a child can have one\n      renderer.setBlendMode(child.blendMode);\n    } //  Set parent values\n\n\n    child.setScrollFactor(childScrollFactorX * scrollFactorX, childScrollFactorY * scrollFactorY);\n    child.setAlpha(childAlpha * alpha); //  Render\n\n    child.renderCanvas(renderer, child, interpolationPercentage, camera, transformMatrix); //  Restore original values\n\n    child.setAlpha(childAlpha);\n    child.setScrollFactor(childScrollFactorX, childScrollFactorY);\n  }\n};\n\nmodule.exports = ContainerCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/container/ContainerCanvasRenderer.js"],"names":["ContainerCanvasRenderer","renderer","container","interpolationPercentage","camera","parentMatrix","children","list","length","transformMatrix","localTransform","loadIdentity","multiply","translate","x","y","rotate","rotation","scale","scaleX","scaleY","applyITRS","containerHasBlendMode","blendMode","setBlendMode","alpha","_alpha","scrollFactorX","scrollFactorY","i","child","willRender","childAlpha","childScrollFactorX","childScrollFactorY","currentBlendMode","setScrollFactor","setAlpha","renderCanvas","module","exports"],"mappings":"AAAA;;;;;;;AAOA;;;;;;;;;;;;;;;AAeA,IAAIA,uBAAuB,GAAG,UAAUC,QAAV,EAAoBC,SAApB,EAA+BC,uBAA/B,EAAwDC,MAAxD,EAAgEC,YAAhE,EAC9B;AACI,MAAIC,QAAQ,GAAGJ,SAAS,CAACK,IAAzB;;AAEA,MAAID,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EACA;AACI;AACH;;AAED,MAAIC,eAAe,GAAGP,SAAS,CAACQ,cAAhC;;AAEA,MAAIL,YAAJ,EACA;AACII,IAAAA,eAAe,CAACE,YAAhB;AACAF,IAAAA,eAAe,CAACG,QAAhB,CAAyBP,YAAzB;AACAI,IAAAA,eAAe,CAACI,SAAhB,CAA0BX,SAAS,CAACY,CAApC,EAAuCZ,SAAS,CAACa,CAAjD;AACAN,IAAAA,eAAe,CAACO,MAAhB,CAAuBd,SAAS,CAACe,QAAjC;AACAR,IAAAA,eAAe,CAACS,KAAhB,CAAsBhB,SAAS,CAACiB,MAAhC,EAAwCjB,SAAS,CAACkB,MAAlD;AACH,GAPD,MASA;AACIX,IAAAA,eAAe,CAACY,SAAhB,CAA0BnB,SAAS,CAACY,CAApC,EAAuCZ,SAAS,CAACa,CAAjD,EAAoDb,SAAS,CAACe,QAA9D,EAAwEf,SAAS,CAACiB,MAAlF,EAA0FjB,SAAS,CAACkB,MAApG;AACH;;AAED,MAAIE,qBAAqB,GAAIpB,SAAS,CAACqB,SAAV,KAAwB,CAAC,CAAtD;;AAEA,MAAI,CAACD,qBAAL,EACA;AACI;AACArB,IAAAA,QAAQ,CAACuB,YAAT,CAAsB,CAAtB;AACH;;AAED,MAAIC,KAAK,GAAGvB,SAAS,CAACwB,MAAtB;AACA,MAAIC,aAAa,GAAGzB,SAAS,CAACyB,aAA9B;AACA,MAAIC,aAAa,GAAG1B,SAAS,CAAC0B,aAA9B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,QAAQ,CAACE,MAA7B,EAAqCqB,CAAC,EAAtC,EACA;AACI,QAAIC,KAAK,GAAGxB,QAAQ,CAACuB,CAAD,CAApB;;AAEA,QAAI,CAACC,KAAK,CAACC,UAAN,CAAiB3B,MAAjB,CAAL,EACA;AACI;AACH;;AAED,QAAI4B,UAAU,GAAGF,KAAK,CAACL,KAAvB;AACA,QAAIQ,kBAAkB,GAAGH,KAAK,CAACH,aAA/B;AACA,QAAIO,kBAAkB,GAAGJ,KAAK,CAACF,aAA/B;;AAEA,QAAI,CAACN,qBAAD,IAA0BQ,KAAK,CAACP,SAAN,KAAoBtB,QAAQ,CAACkC,gBAA3D,EACA;AACI;AACAlC,MAAAA,QAAQ,CAACuB,YAAT,CAAsBM,KAAK,CAACP,SAA5B;AACH,KAhBL,CAkBI;;;AACAO,IAAAA,KAAK,CAACM,eAAN,CAAsBH,kBAAkB,GAAGN,aAA3C,EAA0DO,kBAAkB,GAAGN,aAA/E;AACAE,IAAAA,KAAK,CAACO,QAAN,CAAeL,UAAU,GAAGP,KAA5B,EApBJ,CAsBI;;AACAK,IAAAA,KAAK,CAACQ,YAAN,CAAmBrC,QAAnB,EAA6B6B,KAA7B,EAAoC3B,uBAApC,EAA6DC,MAA7D,EAAqEK,eAArE,EAvBJ,CAyBI;;AACAqB,IAAAA,KAAK,CAACO,QAAN,CAAeL,UAAf;AACAF,IAAAA,KAAK,CAACM,eAAN,CAAsBH,kBAAtB,EAA0CC,kBAA1C;AACH;AACJ,CAlED;;AAoEAK,MAAM,CAACC,OAAP,GAAiBxC,uBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Felipe Alfonso <@bitnenfer>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Container#renderCanvas\r\n * @since 3.4.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Container} container - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar ContainerCanvasRenderer = function (renderer, container, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var children = container.list;\r\n\r\n    if (children.length === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var transformMatrix = container.localTransform;\r\n    \r\n    if (parentMatrix)\r\n    {\r\n        transformMatrix.loadIdentity();\r\n        transformMatrix.multiply(parentMatrix);\r\n        transformMatrix.translate(container.x, container.y);\r\n        transformMatrix.rotate(container.rotation);\r\n        transformMatrix.scale(container.scaleX, container.scaleY);\r\n    }\r\n    else\r\n    {\r\n        transformMatrix.applyITRS(container.x, container.y, container.rotation, container.scaleX, container.scaleY);\r\n    }\r\n\r\n    var containerHasBlendMode = (container.blendMode !== -1);\r\n\r\n    if (!containerHasBlendMode)\r\n    {\r\n        //  If Container is SKIP_TEST then set blend mode to be Normal\r\n        renderer.setBlendMode(0);\r\n    }\r\n\r\n    var alpha = container._alpha;\r\n    var scrollFactorX = container.scrollFactorX;\r\n    var scrollFactorY = container.scrollFactorY;\r\n\r\n    for (var i = 0; i < children.length; i++)\r\n    {\r\n        var child = children[i];\r\n\r\n        if (!child.willRender(camera))\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var childAlpha = child.alpha;\r\n        var childScrollFactorX = child.scrollFactorX;\r\n        var childScrollFactorY = child.scrollFactorY;\r\n\r\n        if (!containerHasBlendMode && child.blendMode !== renderer.currentBlendMode)\r\n        {\r\n            //  If Container doesn't have its own blend mode, then a child can have one\r\n            renderer.setBlendMode(child.blendMode);\r\n        }\r\n\r\n        //  Set parent values\r\n        child.setScrollFactor(childScrollFactorX * scrollFactorX, childScrollFactorY * scrollFactorY);\r\n        child.setAlpha(childAlpha * alpha);\r\n\r\n        //  Render\r\n        child.renderCanvas(renderer, child, interpolationPercentage, camera, transformMatrix);\r\n\r\n        //  Restore original values\r\n        child.setAlpha(childAlpha);\r\n        child.setScrollFactor(childScrollFactorX, childScrollFactorY);\r\n    }\r\n};\r\n\r\nmodule.exports = ContainerCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}