{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n *\r\n * @function Phaser.Geom.Ellipse.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\n\n\nvar Random = function (ellipse, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  var p = Math.random() * Math.PI * 2;\n  var s = Math.sqrt(Math.random());\n  out.x = ellipse.x + s * Math.cos(p) * ellipse.width / 2;\n  out.y = ellipse.y + s * Math.sin(p) * ellipse.height / 2;\n  return out;\n};\n\nmodule.exports = Random;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/ellipse/Random.js"],"names":["Point","require","Random","ellipse","out","undefined","p","Math","random","PI","s","sqrt","x","cos","width","y","sin","height","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,MAAM,GAAG,UAAUC,OAAV,EAAmBC,GAAnB,EACb;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7C,MAAIM,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgBD,IAAI,CAACE,EAArB,GAA0B,CAAlC;AACA,MAAIC,CAAC,GAAGH,IAAI,CAACI,IAAL,CAAUJ,IAAI,CAACC,MAAL,EAAV,CAAR;AAEAJ,EAAAA,GAAG,CAACQ,CAAJ,GAAQT,OAAO,CAACS,CAAR,GAAcF,CAAC,GAAGH,IAAI,CAACM,GAAL,CAASP,CAAT,CAAL,GAAoBH,OAAO,CAACW,KAA5B,GAAoC,CAAzD;AACAV,EAAAA,GAAG,CAACW,CAAJ,GAAQZ,OAAO,CAACY,CAAR,GAAcL,CAAC,GAAGH,IAAI,CAACS,GAAL,CAASV,CAAT,CAAL,GAAoBH,OAAO,CAACc,MAA5B,GAAqC,CAA1D;AAEA,SAAOb,GAAP;AACH,CAXD;;AAaAc,MAAM,CAACC,OAAP,GAAiBjB,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\n\r\n/**\r\n * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n *\r\n * @function Phaser.Geom.Ellipse.Random\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to get a random point from.\r\n * @param {(Phaser.Geom.Point|object)} [out] - A Point or point-like object to set the random `x` and `y` values in.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n */\r\nvar Random = function (ellipse, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    var p = Math.random() * Math.PI * 2;\r\n    var s = Math.sqrt(Math.random());\r\n\r\n    out.x = ellipse.x + ((s * Math.cos(p)) * ellipse.width / 2);\r\n    out.y = ellipse.y + ((s * Math.sin(p)) * ellipse.height / 2);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Random;\r\n"]},"metadata":{},"sourceType":"script"}