{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A Camera Flash effect.\r\n *\r\n * This effect will flash the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Flash\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Flash = new Class({\n  initialize: function Flash(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.5.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The value of the red color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#red\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.red = 0;\n    /**\r\n     * The value of the green color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#green\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.green = 0;\n    /**\r\n     * The value of the blue color channel the camera will use for the fade effect.\r\n     * A value between 0 and 255.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#blue\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.blue = 0;\n    /**\r\n     * The value of the alpha channel used during the fade effect.\r\n     * A value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#alpha\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this.alpha = 0;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#progress\r\n     * @type {number}\r\n     * @since 3.5.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdate\r\n     * @type {?Phaser.Types.Cameras.Scene2D.CameraFlashCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * Flashes the Camera to or from the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraFlashCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function (duration, red, green, blue, force, callback, context) {\n    if (duration === undefined) {\n      duration = 250;\n    }\n\n    if (red === undefined) {\n      red = 255;\n    }\n\n    if (green === undefined) {\n      green = 255;\n    }\n\n    if (blue === undefined) {\n      blue = 255;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    if (!force && this.isRunning) {\n      return this.camera;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = 1;\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.FLASH_START, this.camera, this, duration, red, green, blue);\n    return this.camera;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#update\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._onUpdate) {\n      this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\n    }\n\n    if (this._elapsed < this.duration) {\n      this.alpha = 1 - this.progress;\n    } else {\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally by the Canvas Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderCanvas\r\n   * @since 3.5.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderCanvas: function (ctx) {\n    if (!this.isRunning) {\n      return false;\n    }\n\n    var camera = this.camera;\n    ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\n    ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\n    return true;\n  },\n\n  /**\r\n   * Called internally by the WebGL Renderer.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderWebGL\r\n   * @since 3.5.0\r\n   *\r\n   * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n   * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n   *\r\n   * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n   */\n  postRenderWebGL: function (pipeline, getTintFunction) {\n    if (!this.isRunning) {\n      return false;\n    }\n\n    var camera = this.camera;\n    var red = this.red / 255;\n    var blue = this.blue / 255;\n    var green = this.green / 255;\n    pipeline.drawFillRect(camera._cx, camera._cy, camera._cw, camera._ch, getTintFunction(red, green, blue, 1), this.alpha);\n    return true;\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n   * @since 3.5.0\r\n   */\n  effectComplete: function () {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.FLASH_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#reset\r\n   * @since 3.5.0\r\n   */\n  reset: function () {\n    this.isRunning = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Flash#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.camera = null;\n  }\n});\nmodule.exports = Flash;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/effects/Flash.js"],"names":["Clamp","require","Class","Events","Flash","initialize","camera","isRunning","duration","red","green","blue","alpha","progress","_elapsed","_onUpdate","_onUpdateScope","start","force","callback","context","undefined","scene","emit","FLASH_START","update","time","delta","call","effectComplete","postRenderCanvas","ctx","fillStyle","fillRect","_cx","_cy","_cw","_ch","postRenderWebGL","pipeline","getTintFunction","drawFillRect","FLASH_COMPLETE","reset","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar Events = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Flash effect.\r\n *\r\n * This effect will flash the camera viewport to the given color, over the duration specified.\r\n *\r\n * Only the camera viewport is flashed. None of the objects it is displaying are impacted, i.e. their colors do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect, if required.\r\n *\r\n * @class Flash\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Flash = new Class({\r\n\r\n    initialize:\r\n\r\n    function Flash (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readonly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#duration\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The value of the red color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#red\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.red = 0;\r\n\r\n        /**\r\n         * The value of the green color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#green\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.green = 0;\r\n\r\n        /**\r\n         * The value of the blue color channel the camera will use for the fade effect.\r\n         * A value between 0 and 255.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#blue\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.blue = 0;\r\n\r\n        /**\r\n         * The value of the alpha channel used during the fade effect.\r\n         * A value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#alpha\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this.alpha = 0;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdate\r\n         * @type {?Phaser.Types.Cameras.Scene2D.CameraFlashCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Flash#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * Flashes the Camera to or from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#start\r\n     * @fires Phaser.Cameras.Scene2D.Events#FLASH_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraFlashCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 250; }\r\n        if (red === undefined) { red = 255; }\r\n        if (green === undefined) { green = 255; }\r\n        if (blue === undefined) { blue = 255; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = 1;\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit(Events.FLASH_START, this.camera, this, duration, red, green, blue);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.alpha = 1 - this.progress;\r\n        }\r\n        else\r\n        {\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally by the Canvas Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderCanvas\r\n     * @since 3.5.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} ctx - The Canvas context to render to.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderCanvas: function (ctx)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n\r\n        ctx.fillStyle = 'rgba(' + this.red + ',' + this.green + ',' + this.blue + ',' + this.alpha + ')';\r\n        ctx.fillRect(camera._cx, camera._cy, camera._cw, camera._ch);\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally by the WebGL Renderer.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#postRenderWebGL\r\n     * @since 3.5.0\r\n     *\r\n     * @param {Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline} pipeline - The WebGL Pipeline to render to.\r\n     * @param {function} getTintFunction - A function that will return the gl safe tint colors.\r\n     *\r\n     * @return {boolean} `true` if the effect drew to the renderer, otherwise `false`.\r\n     */\r\n    postRenderWebGL: function (pipeline, getTintFunction)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        var camera = this.camera;\r\n        var red = this.red / 255;\r\n        var blue = this.blue / 255;\r\n        var green = this.green / 255;\r\n\r\n        pipeline.drawFillRect(\r\n            camera._cx, camera._cy, camera._cw, camera._ch,\r\n            getTintFunction(red, green, blue, 1),\r\n            this.alpha\r\n        );\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#effectComplete\r\n     * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit(Events.FLASH_COMPLETE, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Flash#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Flash;\r\n"]},"metadata":{},"sourceType":"script"}