{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ContainsArray = require('../triangle/ContainsArray');\n\nvar Decompose = require('../triangle/Decompose');\n\nvar LineToLine = require('./LineToLine');\n/**\r\n * Checks if two Triangles intersect.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Triangles intersect, otherwise `false`.\r\n */\n\n\nvar TriangleToTriangle = function (triangleA, triangleB) {\n  //  First the cheapest ones:\n  if (triangleA.left > triangleB.right || triangleA.right < triangleB.left || triangleA.top > triangleB.bottom || triangleA.bottom < triangleB.top) {\n    return false;\n  }\n\n  var lineAA = triangleA.getLineA();\n  var lineAB = triangleA.getLineB();\n  var lineAC = triangleA.getLineC();\n  var lineBA = triangleB.getLineA();\n  var lineBB = triangleB.getLineB();\n  var lineBC = triangleB.getLineC(); //  Now check the lines against each line of TriangleB\n\n  if (LineToLine(lineAA, lineBA) || LineToLine(lineAA, lineBB) || LineToLine(lineAA, lineBC)) {\n    return true;\n  }\n\n  if (LineToLine(lineAB, lineBA) || LineToLine(lineAB, lineBB) || LineToLine(lineAB, lineBC)) {\n    return true;\n  }\n\n  if (LineToLine(lineAC, lineBA) || LineToLine(lineAC, lineBB) || LineToLine(lineAC, lineBC)) {\n    return true;\n  } //  Nope, so check to see if any of the points of triangleA are within triangleB\n\n\n  var points = Decompose(triangleA);\n  var within = ContainsArray(triangleB, points, true);\n\n  if (within.length > 0) {\n    return true;\n  } //  Finally check to see if any of the points of triangleB are within triangleA\n\n\n  points = Decompose(triangleB);\n  within = ContainsArray(triangleA, points, true);\n\n  if (within.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = TriangleToTriangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/TriangleToTriangle.js"],"names":["ContainsArray","require","Decompose","LineToLine","TriangleToTriangle","triangleA","triangleB","left","right","top","bottom","lineAA","getLineA","lineAB","getLineB","lineAC","getLineC","lineBA","lineBB","lineBC","points","within","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,aAAa,GAAGC,OAAO,CAAC,2BAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAvB;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIG,kBAAkB,GAAG,UAAUC,SAAV,EAAqBC,SAArB,EACzB;AACI;AAEA,MACID,SAAS,CAACE,IAAV,GAAiBD,SAAS,CAACE,KAA3B,IACAH,SAAS,CAACG,KAAV,GAAkBF,SAAS,CAACC,IAD5B,IAEAF,SAAS,CAACI,GAAV,GAAgBH,SAAS,CAACI,MAF1B,IAGAL,SAAS,CAACK,MAAV,GAAmBJ,SAAS,CAACG,GAJjC,EAKA;AACI,WAAO,KAAP;AACH;;AAED,MAAIE,MAAM,GAAGN,SAAS,CAACO,QAAV,EAAb;AACA,MAAIC,MAAM,GAAGR,SAAS,CAACS,QAAV,EAAb;AACA,MAAIC,MAAM,GAAGV,SAAS,CAACW,QAAV,EAAb;AAEA,MAAIC,MAAM,GAAGX,SAAS,CAACM,QAAV,EAAb;AACA,MAAIM,MAAM,GAAGZ,SAAS,CAACQ,QAAV,EAAb;AACA,MAAIK,MAAM,GAAGb,SAAS,CAACU,QAAV,EAAb,CAlBJ,CAoBI;;AACA,MAAIb,UAAU,CAACQ,MAAD,EAASM,MAAT,CAAV,IAA8Bd,UAAU,CAACQ,MAAD,EAASO,MAAT,CAAxC,IAA4Df,UAAU,CAACQ,MAAD,EAASQ,MAAT,CAA1E,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIhB,UAAU,CAACU,MAAD,EAASI,MAAT,CAAV,IAA8Bd,UAAU,CAACU,MAAD,EAASK,MAAT,CAAxC,IAA4Df,UAAU,CAACU,MAAD,EAASM,MAAT,CAA1E,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIhB,UAAU,CAACY,MAAD,EAASE,MAAT,CAAV,IAA8Bd,UAAU,CAACY,MAAD,EAASG,MAAT,CAAxC,IAA4Df,UAAU,CAACY,MAAD,EAASI,MAAT,CAA1E,EACA;AACI,WAAO,IAAP;AACH,GAlCL,CAoCI;;;AAEA,MAAIC,MAAM,GAAGlB,SAAS,CAACG,SAAD,CAAtB;AACA,MAAIgB,MAAM,GAAGrB,aAAa,CAACM,SAAD,EAAYc,MAAZ,EAAoB,IAApB,CAA1B;;AAEA,MAAIC,MAAM,CAACC,MAAP,GAAgB,CAApB,EACA;AACI,WAAO,IAAP;AACH,GA5CL,CA8CI;;;AAEAF,EAAAA,MAAM,GAAGlB,SAAS,CAACI,SAAD,CAAlB;AACAe,EAAAA,MAAM,GAAGrB,aAAa,CAACK,SAAD,EAAYe,MAAZ,EAAoB,IAApB,CAAtB;;AAEA,MAAIC,MAAM,CAACC,MAAP,GAAgB,CAApB,EACA;AACI,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH,CA1DD;;AA4DAC,MAAM,CAACC,OAAP,GAAiBpB,kBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ContainsArray = require('../triangle/ContainsArray');\r\nvar Decompose = require('../triangle/Decompose');\r\nvar LineToLine = require('./LineToLine');\r\n\r\n/**\r\n * Checks if two Triangles intersect.\r\n *\r\n * A Triangle intersects another Triangle if any pair of their lines intersects or if any point of one Triangle is within the other Triangle. Thus, the Triangles are considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangleA - The first Triangle to check for intersection.\r\n * @param {Phaser.Geom.Triangle} triangleB - The second Triangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Triangles intersect, otherwise `false`.\r\n */\r\nvar TriangleToTriangle = function (triangleA, triangleB)\r\n{\r\n    //  First the cheapest ones:\r\n\r\n    if (\r\n        triangleA.left > triangleB.right ||\r\n        triangleA.right < triangleB.left ||\r\n        triangleA.top > triangleB.bottom ||\r\n        triangleA.bottom < triangleB.top)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var lineAA = triangleA.getLineA();\r\n    var lineAB = triangleA.getLineB();\r\n    var lineAC = triangleA.getLineC();\r\n\r\n    var lineBA = triangleB.getLineA();\r\n    var lineBB = triangleB.getLineB();\r\n    var lineBC = triangleB.getLineC();\r\n\r\n    //  Now check the lines against each line of TriangleB\r\n    if (LineToLine(lineAA, lineBA) || LineToLine(lineAA, lineBB) || LineToLine(lineAA, lineBC))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(lineAB, lineBA) || LineToLine(lineAB, lineBB) || LineToLine(lineAB, lineBC))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(lineAC, lineBA) || LineToLine(lineAC, lineBB) || LineToLine(lineAC, lineBC))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Nope, so check to see if any of the points of triangleA are within triangleB\r\n\r\n    var points = Decompose(triangleA);\r\n    var within = ContainsArray(triangleB, points, true);\r\n\r\n    if (within.length > 0)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Finally check to see if any of the points of triangleB are within triangleA\r\n\r\n    points = Decompose(triangleB);\r\n    within = ContainsArray(triangleA, points, true);\r\n\r\n    if (within.length > 0)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = TriangleToTriangle;\r\n"]},"metadata":{},"sourceType":"script"}