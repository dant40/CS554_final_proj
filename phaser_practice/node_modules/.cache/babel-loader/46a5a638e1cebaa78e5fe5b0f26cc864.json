{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n * not change collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.ReplaceByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} findIndex - The index of the tile to search for.\r\n * @param {integer} newIndex - The index of the tile to replace it with.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar ReplaceByIndex = function (findIndex, newIndex, tileX, tileY, width, height, layer) {\n  var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\n\n  for (var i = 0; i < tiles.length; i++) {\n    if (tiles[i] && tiles[i].index === findIndex) {\n      tiles[i].index = newIndex;\n    }\n  }\n};\n\nmodule.exports = ReplaceByIndex;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/ReplaceByIndex.js"],"names":["GetTilesWithin","require","ReplaceByIndex","findIndex","newIndex","tileX","tileY","width","height","layer","tiles","i","length","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,cAAc,GAAG,UAAUC,SAAV,EAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,KAA7C,EAAoDC,MAApD,EAA4DC,KAA5D,EACrB;AACI,MAAIC,KAAK,GAAGV,cAAc,CAACK,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,MAAtB,EAA8B,IAA9B,EAAoCC,KAApC,CAA1B;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI,QAAID,KAAK,CAACC,CAAD,CAAL,IAAYD,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,KAAmBV,SAAnC,EACA;AACIO,MAAAA,KAAK,CAACC,CAAD,CAAL,CAASE,KAAT,GAAiBT,QAAjB;AACH;AACJ;AACJ,CAXD;;AAaAU,MAAM,CAACC,OAAP,GAAiBb,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\n\r\n/**\r\n * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n * not change collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.ReplaceByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} findIndex - The index of the tile to search for.\r\n * @param {integer} newIndex - The index of the tile to replace it with.\r\n * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar ReplaceByIndex = function (findIndex, newIndex, tileX, tileY, width, height, layer)\r\n{\r\n    var tiles = GetTilesWithin(tileX, tileY, width, height, null, layer);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        if (tiles[i] && tiles[i].index === findIndex)\r\n        {\r\n            tiles[i].index = newIndex;\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = ReplaceByIndex;\r\n"]},"metadata":{},"sourceType":"script"}