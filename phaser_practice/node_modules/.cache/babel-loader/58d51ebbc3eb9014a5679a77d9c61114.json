{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Takes an array of Game Objects and positions them on evenly spaced points around the perimeter of an Ellipse.\r\n * \r\n * If you wish to pass a `Phaser.GameObjects.Ellipse` Shape to this function, you should pass its `geom` property.\r\n *\r\n * @function Phaser.Actions.PlaceOnEllipse\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to position the Game Objects on.\r\n * @param {number} [startAngle=0] - Optional angle to start position from, in radians.\r\n * @param {number} [endAngle=6.28] - Optional angle to stop position at, in radians.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of Game Objects that was passed to this Action.\r\n */\nvar PlaceOnEllipse = function (items, ellipse, startAngle, endAngle) {\n  if (startAngle === undefined) {\n    startAngle = 0;\n  }\n\n  if (endAngle === undefined) {\n    endAngle = 6.28;\n  }\n\n  var angle = startAngle;\n  var angleStep = (endAngle - startAngle) / items.length;\n  var a = ellipse.width / 2;\n  var b = ellipse.height / 2;\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].x = ellipse.x + a * Math.cos(angle);\n    items[i].y = ellipse.y + b * Math.sin(angle);\n    angle += angleStep;\n  }\n\n  return items;\n};\n\nmodule.exports = PlaceOnEllipse;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/actions/PlaceOnEllipse.js"],"names":["PlaceOnEllipse","items","ellipse","startAngle","endAngle","undefined","angle","angleStep","length","a","width","b","height","i","x","Math","cos","y","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;AAiBA,IAAIA,cAAc,GAAG,UAAUC,KAAV,EAAiBC,OAAjB,EAA0BC,UAA1B,EAAsCC,QAAtC,EACrB;AACI,MAAID,UAAU,KAAKE,SAAnB,EAA8B;AAAEF,IAAAA,UAAU,GAAG,CAAb;AAAiB;;AACjD,MAAIC,QAAQ,KAAKC,SAAjB,EAA4B;AAAED,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAEhD,MAAIE,KAAK,GAAGH,UAAZ;AACA,MAAII,SAAS,GAAG,CAACH,QAAQ,GAAGD,UAAZ,IAA0BF,KAAK,CAACO,MAAhD;AAEA,MAAIC,CAAC,GAAGP,OAAO,CAACQ,KAAR,GAAgB,CAAxB;AACA,MAAIC,CAAC,GAAGT,OAAO,CAACU,MAAR,GAAiB,CAAzB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACO,MAA1B,EAAkCK,CAAC,EAAnC,EACA;AACIZ,IAAAA,KAAK,CAACY,CAAD,CAAL,CAASC,CAAT,GAAaZ,OAAO,CAACY,CAAR,GAAYL,CAAC,GAAGM,IAAI,CAACC,GAAL,CAASV,KAAT,CAA7B;AACAL,IAAAA,KAAK,CAACY,CAAD,CAAL,CAASI,CAAT,GAAaf,OAAO,CAACe,CAAR,GAAYN,CAAC,GAAGI,IAAI,CAACG,GAAL,CAASZ,KAAT,CAA7B;AAEAA,IAAAA,KAAK,IAAIC,SAAT;AACH;;AAED,SAAON,KAAP;AACH,CApBD;;AAsBAkB,MAAM,CAACC,OAAP,GAAiBpB,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects and positions them on evenly spaced points around the perimeter of an Ellipse.\r\n * \r\n * If you wish to pass a `Phaser.GameObjects.Ellipse` Shape to this function, you should pass its `geom` property.\r\n *\r\n * @function Phaser.Actions.PlaceOnEllipse\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - An array of Game Objects. The contents of this array are updated by this Action.\r\n * @param {Phaser.Geom.Ellipse} ellipse - The Ellipse to position the Game Objects on.\r\n * @param {number} [startAngle=0] - Optional angle to start position from, in radians.\r\n * @param {number} [endAngle=6.28] - Optional angle to stop position at, in radians.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of Game Objects that was passed to this Action.\r\n */\r\nvar PlaceOnEllipse = function (items, ellipse, startAngle, endAngle)\r\n{\r\n    if (startAngle === undefined) { startAngle = 0; }\r\n    if (endAngle === undefined) { endAngle = 6.28; }\r\n\r\n    var angle = startAngle;\r\n    var angleStep = (endAngle - startAngle) / items.length;\r\n\r\n    var a = ellipse.width / 2;\r\n    var b = ellipse.height / 2;\r\n\r\n    for (var i = 0; i < items.length; i++)\r\n    {\r\n        items[i].x = ellipse.x + a * Math.cos(angle);\r\n        items[i].y = ellipse.y + b * Math.sin(angle);\r\n\r\n        angle += angleStep;\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = PlaceOnEllipse;\r\n"]},"metadata":{},"sourceType":"script"}