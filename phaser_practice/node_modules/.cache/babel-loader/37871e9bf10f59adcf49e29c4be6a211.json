{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('../Formats');\n\nvar Parse2DArray = require('./Parse2DArray');\n/**\r\n * Parses a CSV string of tile indexes into a new MapData object with a single layer.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.ParseCSV\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {string} data - CSV string of tile indexes.\r\n * @param {integer} tileWidth - The width of a tile in pixels.\r\n * @param {integer} tileHeight - The height of a tile in pixels.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The resulting MapData object.\r\n */\n\n\nvar ParseCSV = function (name, data, tileWidth, tileHeight, insertNull) {\n  var array2D = data.trim().split('\\n').map(function (row) {\n    return row.split(',');\n  });\n  var map = Parse2DArray(name, array2D, tileWidth, tileHeight, insertNull);\n  map.format = Formats.CSV;\n  return map;\n};\n\nmodule.exports = ParseCSV;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/ParseCSV.js"],"names":["Formats","require","Parse2DArray","ParseCSV","name","data","tileWidth","tileHeight","insertNull","array2D","trim","split","map","row","format","CSV","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIE,QAAQ,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,UAA7C,EACf;AACI,MAAIC,OAAO,GAAGJ,IAAI,CACbK,IADS,GAETC,KAFS,CAEH,IAFG,EAGTC,GAHS,CAGL,UAAUC,GAAV,EAAe;AAAE,WAAOA,GAAG,CAACF,KAAJ,CAAU,GAAV,CAAP;AAAwB,GAHpC,CAAd;AAKA,MAAIC,GAAG,GAAGV,YAAY,CAACE,IAAD,EAAOK,OAAP,EAAgBH,SAAhB,EAA2BC,UAA3B,EAAuCC,UAAvC,CAAtB;AACAI,EAAAA,GAAG,CAACE,MAAJ,GAAad,OAAO,CAACe,GAArB;AAEA,SAAOH,GAAP;AACH,CAXD;;AAaAI,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../Formats');\r\nvar Parse2DArray = require('./Parse2DArray');\r\n\r\n/**\r\n * Parses a CSV string of tile indexes into a new MapData object with a single layer.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.ParseCSV\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {string} data - CSV string of tile indexes.\r\n * @param {integer} tileWidth - The width of a tile in pixels.\r\n * @param {integer} tileHeight - The height of a tile in pixels.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The resulting MapData object.\r\n */\r\nvar ParseCSV = function (name, data, tileWidth, tileHeight, insertNull)\r\n{\r\n    var array2D = data\r\n        .trim()\r\n        .split('\\n')\r\n        .map(function (row) { return row.split(','); });\r\n\r\n    var map = Parse2DArray(name, array2D, tileWidth, tileHeight, insertNull);\r\n    map.format = Formats.CSV;\r\n\r\n    return map;\r\n};\r\n\r\nmodule.exports = ParseCSV;\r\n"]},"metadata":{},"sourceType":"script"}