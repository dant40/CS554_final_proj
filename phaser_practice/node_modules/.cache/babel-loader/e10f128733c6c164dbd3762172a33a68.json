{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar IsInLayerBounds = require('./IsInLayerBounds');\n/**\r\n * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n * false if there is no tile or if the tile at that location has an index of -1.\r\n *\r\n * @function Phaser.Tilemaps.Components.HasTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n */\n\n\nvar HasTileAt = function (tileX, tileY, layer) {\n  if (IsInLayerBounds(tileX, tileY, layer)) {\n    var tile = layer.data[tileY][tileX];\n    return tile !== null && tile.index > -1;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = HasTileAt;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/HasTileAt.js"],"names":["IsInLayerBounds","require","HasTileAt","tileX","tileY","layer","tile","data","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EAChB;AACI,MAAIL,eAAe,CAACG,KAAD,EAAQC,KAAR,EAAeC,KAAf,CAAnB,EACA;AACI,QAAIC,IAAI,GAAGD,KAAK,CAACE,IAAN,CAAWH,KAAX,EAAkBD,KAAlB,CAAX;AACA,WAAQG,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACE,KAAL,GAAa,CAAC,CAAvC;AACH,GAJD,MAMA;AACI,WAAO,KAAP;AACH;AAEJ,CAZD;;AAcAC,MAAM,CAACC,OAAP,GAAiBR,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar IsInLayerBounds = require('./IsInLayerBounds');\r\n\r\n/**\r\n * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n * false if there is no tile or if the tile at that location has an index of -1.\r\n *\r\n * @function Phaser.Tilemaps.Components.HasTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {?boolean} Returns a boolean, or null if the layer given was invalid.\r\n */\r\nvar HasTileAt = function (tileX, tileY, layer)\r\n{\r\n    if (IsInLayerBounds(tileX, tileY, layer))\r\n    {\r\n        var tile = layer.data[tileY][tileX];\r\n        return (tile !== null && tile.index > -1);\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = HasTileAt;\r\n"]},"metadata":{},"sourceType":"script"}