{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar LineToLine = require('./LineToLine');\n\nvar LineToRectangle = require('./LineToRectangle');\n/**\r\n * Checks for intersection between the Line and a Rectangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetLineToRectangle = function (line, rect, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (LineToRectangle(line, rect)) {\n    var lineA = rect.getLineA();\n    var lineB = rect.getLineB();\n    var lineC = rect.getLineC();\n    var lineD = rect.getLineD();\n    var output = [new Point(), new Point(), new Point(), new Point()];\n    var result = [LineToLine(lineA, line, output[0]), LineToLine(lineB, line, output[1]), LineToLine(lineC, line, output[2]), LineToLine(lineD, line, output[3])];\n\n    for (var i = 0; i < 4; i++) {\n      if (result[i]) {\n        out.push(output[i]);\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetLineToRectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetLineToRectangle.js"],"names":["Point","require","LineToLine","LineToRectangle","GetLineToRectangle","line","rect","out","undefined","lineA","getLineA","lineB","getLineB","lineC","getLineC","lineD","getLineD","output","result","i","push","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;AAaA,IAAIG,kBAAkB,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,GAAtB,EACzB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIJ,eAAe,CAACE,IAAD,EAAOC,IAAP,CAAnB,EACA;AACI,QAAIG,KAAK,GAAGH,IAAI,CAACI,QAAL,EAAZ;AACA,QAAIC,KAAK,GAAGL,IAAI,CAACM,QAAL,EAAZ;AACA,QAAIC,KAAK,GAAGP,IAAI,CAACQ,QAAL,EAAZ;AACA,QAAIC,KAAK,GAAGT,IAAI,CAACU,QAAL,EAAZ;AAEA,QAAIC,MAAM,GAAG,CAAE,IAAIjB,KAAJ,EAAF,EAAe,IAAIA,KAAJ,EAAf,EAA4B,IAAIA,KAAJ,EAA5B,EAAyC,IAAIA,KAAJ,EAAzC,CAAb;AAEA,QAAIkB,MAAM,GAAG,CACThB,UAAU,CAACO,KAAD,EAAQJ,IAAR,EAAcY,MAAM,CAAC,CAAD,CAApB,CADD,EAETf,UAAU,CAACS,KAAD,EAAQN,IAAR,EAAcY,MAAM,CAAC,CAAD,CAApB,CAFD,EAGTf,UAAU,CAACW,KAAD,EAAQR,IAAR,EAAcY,MAAM,CAAC,CAAD,CAApB,CAHD,EAITf,UAAU,CAACa,KAAD,EAAQV,IAAR,EAAcY,MAAM,CAAC,CAAD,CAApB,CAJD,CAAb;;AAOA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACA;AACI,UAAID,MAAM,CAACC,CAAD,CAAV,EAAe;AAAEZ,QAAAA,GAAG,CAACa,IAAJ,CAASH,MAAM,CAACE,CAAD,CAAf;AAAsB;AAC1C;AACJ;;AAED,SAAOZ,GAAP;AACH,CA3BD;;AA6BAc,MAAM,CAACC,OAAP,GAAiBlB,kBAAjB","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar LineToLine = require('./LineToLine');\r\nvar LineToRectangle = require('./LineToRectangle');\r\n\r\n/**\r\n * Checks for intersection between the Line and a Rectangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetLineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetLineToRectangle = function (line, rect, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (LineToRectangle(line, rect))\r\n    {\r\n        var lineA = rect.getLineA();\r\n        var lineB = rect.getLineB();\r\n        var lineC = rect.getLineC();\r\n        var lineD = rect.getLineD();\r\n\r\n        var output = [ new Point(), new Point(), new Point(), new Point() ];\r\n\r\n        var result = [\r\n            LineToLine(lineA, line, output[0]),\r\n            LineToLine(lineB, line, output[1]),\r\n            LineToLine(lineC, line, output[2]),\r\n            LineToLine(lineD, line, output[3])\r\n        ];\r\n\r\n        for (var i = 0; i < 4; i++)\r\n        {\r\n            if (result[i]) { out.push(output[i]); }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetLineToRectangle;\r\n"]},"metadata":{},"sourceType":"script"}