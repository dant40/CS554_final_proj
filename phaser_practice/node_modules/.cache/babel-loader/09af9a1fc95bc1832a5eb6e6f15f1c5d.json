{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTileAt = require('./GetTileAt');\n/**\r\n * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n * internally to optimize recalculating faces when only one tile has been changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesAt\r\n * @private\r\n * @since 3.0.0\r\n * \r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar CalculateFacesAt = function (tileX, tileY, layer) {\n  var tile = GetTileAt(tileX, tileY, true, layer);\n  var above = GetTileAt(tileX, tileY - 1, true, layer);\n  var below = GetTileAt(tileX, tileY + 1, true, layer);\n  var left = GetTileAt(tileX - 1, tileY, true, layer);\n  var right = GetTileAt(tileX + 1, tileY, true, layer);\n  var tileCollides = tile && tile.collides; // Assume the changed tile has all interesting edges\n\n  if (tileCollides) {\n    tile.faceTop = true;\n    tile.faceBottom = true;\n    tile.faceLeft = true;\n    tile.faceRight = true;\n  } // Reset edges that are shared between tile and its neighbors\n\n\n  if (above && above.collides) {\n    if (tileCollides) {\n      tile.faceTop = false;\n    }\n\n    above.faceBottom = !tileCollides;\n  }\n\n  if (below && below.collides) {\n    if (tileCollides) {\n      tile.faceBottom = false;\n    }\n\n    below.faceTop = !tileCollides;\n  }\n\n  if (left && left.collides) {\n    if (tileCollides) {\n      tile.faceLeft = false;\n    }\n\n    left.faceRight = !tileCollides;\n  }\n\n  if (right && right.collides) {\n    if (tileCollides) {\n      tile.faceRight = false;\n    }\n\n    right.faceLeft = !tileCollides;\n  }\n\n  if (tile && !tile.collides) {\n    tile.resetFaces();\n  }\n\n  return tile;\n};\n\nmodule.exports = CalculateFacesAt;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/CalculateFacesAt.js"],"names":["GetTileAt","require","CalculateFacesAt","tileX","tileY","layer","tile","above","below","left","right","tileCollides","collides","faceTop","faceBottom","faceLeft","faceRight","resetFaces","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIC,gBAAgB,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EACvB;AACI,MAAIC,IAAI,GAAGN,SAAS,CAACG,KAAD,EAAQC,KAAR,EAAe,IAAf,EAAqBC,KAArB,CAApB;AACA,MAAIE,KAAK,GAAGP,SAAS,CAACG,KAAD,EAAQC,KAAK,GAAG,CAAhB,EAAmB,IAAnB,EAAyBC,KAAzB,CAArB;AACA,MAAIG,KAAK,GAAGR,SAAS,CAACG,KAAD,EAAQC,KAAK,GAAG,CAAhB,EAAmB,IAAnB,EAAyBC,KAAzB,CAArB;AACA,MAAII,IAAI,GAAGT,SAAS,CAACG,KAAK,GAAG,CAAT,EAAYC,KAAZ,EAAmB,IAAnB,EAAyBC,KAAzB,CAApB;AACA,MAAIK,KAAK,GAAGV,SAAS,CAACG,KAAK,GAAG,CAAT,EAAYC,KAAZ,EAAmB,IAAnB,EAAyBC,KAAzB,CAArB;AACA,MAAIM,YAAY,GAAGL,IAAI,IAAIA,IAAI,CAACM,QAAhC,CANJ,CAQI;;AACA,MAAID,YAAJ,EACA;AACIL,IAAAA,IAAI,CAACO,OAAL,GAAe,IAAf;AACAP,IAAAA,IAAI,CAACQ,UAAL,GAAkB,IAAlB;AACAR,IAAAA,IAAI,CAACS,QAAL,GAAgB,IAAhB;AACAT,IAAAA,IAAI,CAACU,SAAL,GAAiB,IAAjB;AACH,GAfL,CAiBI;;;AACA,MAAIT,KAAK,IAAIA,KAAK,CAACK,QAAnB,EACA;AACI,QAAID,YAAJ,EAAkB;AAAEL,MAAAA,IAAI,CAACO,OAAL,GAAe,KAAf;AAAuB;;AAC3CN,IAAAA,KAAK,CAACO,UAAN,GAAmB,CAACH,YAApB;AACH;;AAED,MAAIH,KAAK,IAAIA,KAAK,CAACI,QAAnB,EACA;AACI,QAAID,YAAJ,EAAkB;AAAEL,MAAAA,IAAI,CAACQ,UAAL,GAAkB,KAAlB;AAA0B;;AAC9CN,IAAAA,KAAK,CAACK,OAAN,GAAgB,CAACF,YAAjB;AACH;;AAED,MAAIF,IAAI,IAAIA,IAAI,CAACG,QAAjB,EACA;AACI,QAAID,YAAJ,EAAkB;AAAEL,MAAAA,IAAI,CAACS,QAAL,GAAgB,KAAhB;AAAwB;;AAC5CN,IAAAA,IAAI,CAACO,SAAL,GAAiB,CAACL,YAAlB;AACH;;AAED,MAAID,KAAK,IAAIA,KAAK,CAACE,QAAnB,EACA;AACI,QAAID,YAAJ,EAAkB;AAAEL,MAAAA,IAAI,CAACU,SAAL,GAAiB,KAAjB;AAAyB;;AAC7CN,IAAAA,KAAK,CAACK,QAAN,GAAiB,CAACJ,YAAlB;AACH;;AAED,MAAIL,IAAI,IAAI,CAACA,IAAI,CAACM,QAAlB,EAA4B;AAAEN,IAAAA,IAAI,CAACW,UAAL;AAAoB;;AAElD,SAAOX,IAAP;AACH,CA9CD;;AAgDAY,MAAM,CAACC,OAAP,GAAiBjB,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTileAt = require('./GetTileAt');\r\n\r\n/**\r\n * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n * internally to optimize recalculating faces when only one tile has been changed.\r\n *\r\n * @function Phaser.Tilemaps.Components.CalculateFacesAt\r\n * @private\r\n * @since 3.0.0\r\n * \r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar CalculateFacesAt = function (tileX, tileY, layer)\r\n{\r\n    var tile = GetTileAt(tileX, tileY, true, layer);\r\n    var above = GetTileAt(tileX, tileY - 1, true, layer);\r\n    var below = GetTileAt(tileX, tileY + 1, true, layer);\r\n    var left = GetTileAt(tileX - 1, tileY, true, layer);\r\n    var right = GetTileAt(tileX + 1, tileY, true, layer);\r\n    var tileCollides = tile && tile.collides;\r\n\r\n    // Assume the changed tile has all interesting edges\r\n    if (tileCollides)\r\n    {\r\n        tile.faceTop = true;\r\n        tile.faceBottom = true;\r\n        tile.faceLeft = true;\r\n        tile.faceRight = true;\r\n    }\r\n\r\n    // Reset edges that are shared between tile and its neighbors\r\n    if (above && above.collides)\r\n    {\r\n        if (tileCollides) { tile.faceTop = false; }\r\n        above.faceBottom = !tileCollides;\r\n    }\r\n\r\n    if (below && below.collides)\r\n    {\r\n        if (tileCollides) { tile.faceBottom = false; }\r\n        below.faceTop = !tileCollides;\r\n    }\r\n\r\n    if (left && left.collides)\r\n    {\r\n        if (tileCollides) { tile.faceLeft = false; }\r\n        left.faceRight = !tileCollides;\r\n    }\r\n\r\n    if (right && right.collides)\r\n    {\r\n        if (tileCollides) { tile.faceRight = false; }\r\n        right.faceLeft = !tileCollides;\r\n    }\r\n\r\n    if (tile && !tile.collides) { tile.resetFaces(); }\r\n\r\n    return tile;\r\n};\r\n\r\nmodule.exports = CalculateFacesAt;\r\n"]},"metadata":{},"sourceType":"script"}