{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Browser = require('./Browser');\n/**\r\n * Determines the audio playback capabilities of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.audio` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Audio\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} audioData - Can this device play HTML Audio tags?\r\n * @property {boolean} dolby - Can this device play EC-3 Dolby Digital Plus files?\r\n * @property {boolean} m4a - Can this device can play m4a files.\r\n * @property {boolean} mp3 - Can this device play mp3 files?\r\n * @property {boolean} ogg - Can this device play ogg files?\r\n * @property {boolean} opus - Can this device play opus files?\r\n * @property {boolean} wav - Can this device play wav files?\r\n * @property {boolean} webAudio - Does this device have the Web Audio API?\r\n * @property {boolean} webm - Can this device play webm files?\r\n */\n\n\nvar Audio = {\n  audioData: false,\n  dolby: false,\n  m4a: false,\n  mp3: false,\n  ogg: false,\n  opus: false,\n  wav: false,\n  webAudio: false,\n  webm: false\n};\n\nfunction init() {\n  Audio.audioData = !!window['Audio'];\n  Audio.webAudio = !!(window['AudioContext'] || window['webkitAudioContext']);\n  var audioElement = document.createElement('audio');\n  var result = !!audioElement.canPlayType;\n\n  try {\n    if (result) {\n      if (audioElement.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, '')) {\n        Audio.ogg = true;\n      }\n\n      if (audioElement.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '') || audioElement.canPlayType('audio/opus;').replace(/^no$/, '')) {\n        Audio.opus = true;\n      }\n\n      if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, '')) {\n        Audio.mp3 = true;\n      } //  Mimetypes accepted:\n      //  developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n      //  bit.ly/iphoneoscodecs\n\n\n      if (audioElement.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, '')) {\n        Audio.wav = true;\n      }\n\n      if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, '')) {\n        Audio.m4a = true;\n      }\n\n      if (audioElement.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')) {\n        Audio.webm = true;\n      }\n\n      if (audioElement.canPlayType('audio/mp4;codecs=\"ec-3\"') !== '') {\n        if (Browser.edge) {\n          Audio.dolby = true;\n        } else if (Browser.safari && Browser.safariVersion >= 9) {\n          if (/Mac OS X (\\d+)_(\\d+)/.test(navigator.userAgent)) {\n            var major = parseInt(RegExp.$1, 10);\n            var minor = parseInt(RegExp.$2, 10);\n\n            if (major === 10 && minor >= 11 || major > 10) {\n              Audio.dolby = true;\n            }\n          }\n        }\n      }\n    }\n  } catch (e) {//  Nothing to do here\n  }\n\n  return Audio;\n}\n\nmodule.exports = init();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/device/Audio.js"],"names":["Browser","require","Audio","audioData","dolby","m4a","mp3","ogg","opus","wav","webAudio","webm","init","window","audioElement","document","createElement","result","canPlayType","replace","edge","safari","safariVersion","test","navigator","userAgent","major","parseInt","RegExp","$1","minor","$2","e","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Browser = require('./Browser');\r\n\r\n/**\r\n * Determines the audio playback capabilities of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.audio` from within any Scene.\r\n * \r\n * @typedef {object} Phaser.Device.Audio\r\n * @since 3.0.0\r\n * \r\n * @property {boolean} audioData - Can this device play HTML Audio tags?\r\n * @property {boolean} dolby - Can this device play EC-3 Dolby Digital Plus files?\r\n * @property {boolean} m4a - Can this device can play m4a files.\r\n * @property {boolean} mp3 - Can this device play mp3 files?\r\n * @property {boolean} ogg - Can this device play ogg files?\r\n * @property {boolean} opus - Can this device play opus files?\r\n * @property {boolean} wav - Can this device play wav files?\r\n * @property {boolean} webAudio - Does this device have the Web Audio API?\r\n * @property {boolean} webm - Can this device play webm files?\r\n */\r\nvar Audio = {\r\n\r\n    audioData: false,\r\n    dolby: false,\r\n    m4a: false,\r\n    mp3: false,\r\n    ogg: false,\r\n    opus: false,\r\n    wav: false,\r\n    webAudio: false,\r\n    webm: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    Audio.audioData = !!(window['Audio']);\r\n\r\n    Audio.webAudio = !!(window['AudioContext'] || window['webkitAudioContext']);\r\n\r\n    var audioElement = document.createElement('audio');\r\n\r\n    var result = !!audioElement.canPlayType;\r\n\r\n    try\r\n    {\r\n        if (result)\r\n        {\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.ogg = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, '') || audioElement.canPlayType('audio/opus;').replace(/^no$/, ''))\r\n            {\r\n                Audio.opus = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mpeg;').replace(/^no$/, ''))\r\n            {\r\n                Audio.mp3 = true;\r\n            }\r\n\r\n            //  Mimetypes accepted:\r\n            //  developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\r\n            //  bit.ly/iphoneoscodecs\r\n            if (audioElement.canPlayType('audio/wav; codecs=\"1\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.wav = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/x-m4a;') || audioElement.canPlayType('audio/aac;').replace(/^no$/, ''))\r\n            {\r\n                Audio.m4a = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''))\r\n            {\r\n                Audio.webm = true;\r\n            }\r\n\r\n            if (audioElement.canPlayType('audio/mp4;codecs=\"ec-3\"') !== '')\r\n            {\r\n                if (Browser.edge)\r\n                {\r\n                    Audio.dolby = true;\r\n                }\r\n                else if (Browser.safari && Browser.safariVersion >= 9)\r\n                {\r\n                    if ((/Mac OS X (\\d+)_(\\d+)/).test(navigator.userAgent))\r\n                    {\r\n                        var major = parseInt(RegExp.$1, 10);\r\n                        var minor = parseInt(RegExp.$2, 10);\r\n\r\n                        if ((major === 10 && minor >= 11) || major > 10)\r\n                        {\r\n                            Audio.dolby = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        //  Nothing to do here\r\n    }\r\n\r\n    return Audio;\r\n}\r\n\r\nmodule.exports = init();\r\n"]},"metadata":{},"sourceType":"script"}