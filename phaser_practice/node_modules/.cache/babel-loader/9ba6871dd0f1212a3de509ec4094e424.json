{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Creates a new Interactive Object.\r\n * \r\n * This is called automatically by the Input Manager when you enable a Game Object for input.\r\n *\r\n * The resulting Interactive Object is mapped to the Game Object's `input` property.\r\n *\r\n * @function Phaser.Input.CreateInteractiveObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to which this Interactive Object is bound.\r\n * @param {any} hitArea - The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\r\n * @param {Phaser.Types.Input.HitAreaCallback} hitAreaCallback - The 'contains' check callback that the hit area shape will use for all hit tests.\r\n *\r\n * @return {Phaser.Types.Input.InteractiveObject} The new Interactive Object.\r\n */\nvar CreateInteractiveObject = function (gameObject, hitArea, hitAreaCallback) {\n  return {\n    gameObject: gameObject,\n    enabled: true,\n    alwaysEnabled: false,\n    draggable: false,\n    dropZone: false,\n    cursor: false,\n    target: null,\n    camera: null,\n    hitArea: hitArea,\n    hitAreaCallback: hitAreaCallback,\n    hitAreaDebug: null,\n    //  Has the dev specified their own shape, or is this bound to the texture size?\n    customHitArea: false,\n    localX: 0,\n    localY: 0,\n    //  0 = Not being dragged\n    //  1 = Being checked for dragging\n    //  2 = Being dragged\n    dragState: 0,\n    dragStartX: 0,\n    dragStartY: 0,\n    dragStartXGlobal: 0,\n    dragStartYGlobal: 0,\n    dragX: 0,\n    dragY: 0\n  };\n};\n\nmodule.exports = CreateInteractiveObject;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/CreateInteractiveObject.js"],"names":["CreateInteractiveObject","gameObject","hitArea","hitAreaCallback","enabled","alwaysEnabled","draggable","dropZone","cursor","target","camera","hitAreaDebug","customHitArea","localX","localY","dragState","dragStartX","dragStartY","dragStartXGlobal","dragStartYGlobal","dragX","dragY","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;AAgBA,IAAIA,uBAAuB,GAAG,UAAUC,UAAV,EAAsBC,OAAtB,EAA+BC,eAA/B,EAC9B;AACI,SAAO;AAEHF,IAAAA,UAAU,EAAEA,UAFT;AAIHG,IAAAA,OAAO,EAAE,IAJN;AAKHC,IAAAA,aAAa,EAAE,KALZ;AAMHC,IAAAA,SAAS,EAAE,KANR;AAOHC,IAAAA,QAAQ,EAAE,KAPP;AAQHC,IAAAA,MAAM,EAAE,KARL;AAUHC,IAAAA,MAAM,EAAE,IAVL;AAYHC,IAAAA,MAAM,EAAE,IAZL;AAcHR,IAAAA,OAAO,EAAEA,OAdN;AAeHC,IAAAA,eAAe,EAAEA,eAfd;AAgBHQ,IAAAA,YAAY,EAAE,IAhBX;AAkBH;AACAC,IAAAA,aAAa,EAAE,KAnBZ;AAqBHC,IAAAA,MAAM,EAAE,CArBL;AAsBHC,IAAAA,MAAM,EAAE,CAtBL;AAwBH;AACA;AACA;AACAC,IAAAA,SAAS,EAAE,CA3BR;AA6BHC,IAAAA,UAAU,EAAE,CA7BT;AA8BHC,IAAAA,UAAU,EAAE,CA9BT;AA+BHC,IAAAA,gBAAgB,EAAE,CA/Bf;AAgCHC,IAAAA,gBAAgB,EAAE,CAhCf;AAkCHC,IAAAA,KAAK,EAAE,CAlCJ;AAmCHC,IAAAA,KAAK,EAAE;AAnCJ,GAAP;AAsCH,CAxCD;;AA0CAC,MAAM,CAACC,OAAP,GAAiBvB,uBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Creates a new Interactive Object.\r\n * \r\n * This is called automatically by the Input Manager when you enable a Game Object for input.\r\n *\r\n * The resulting Interactive Object is mapped to the Game Object's `input` property.\r\n *\r\n * @function Phaser.Input.CreateInteractiveObject\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object to which this Interactive Object is bound.\r\n * @param {any} hitArea - The hit area for this Interactive Object. Typically a geometry shape, like a Rectangle or Circle.\r\n * @param {Phaser.Types.Input.HitAreaCallback} hitAreaCallback - The 'contains' check callback that the hit area shape will use for all hit tests.\r\n *\r\n * @return {Phaser.Types.Input.InteractiveObject} The new Interactive Object.\r\n */\r\nvar CreateInteractiveObject = function (gameObject, hitArea, hitAreaCallback)\r\n{\r\n    return {\r\n\r\n        gameObject: gameObject,\r\n\r\n        enabled: true,\r\n        alwaysEnabled: false,\r\n        draggable: false,\r\n        dropZone: false,\r\n        cursor: false,\r\n\r\n        target: null,\r\n\r\n        camera: null,\r\n\r\n        hitArea: hitArea,\r\n        hitAreaCallback: hitAreaCallback,\r\n        hitAreaDebug: null,\r\n\r\n        //  Has the dev specified their own shape, or is this bound to the texture size?\r\n        customHitArea: false,\r\n\r\n        localX: 0,\r\n        localY: 0,\r\n\r\n        //  0 = Not being dragged\r\n        //  1 = Being checked for dragging\r\n        //  2 = Being dragged\r\n        dragState: 0,\r\n\r\n        dragStartX: 0,\r\n        dragStartY: 0,\r\n        dragStartXGlobal: 0,\r\n        dragStartYGlobal: 0,\r\n\r\n        dragX: 0,\r\n        dragY: 0\r\n\r\n    };\r\n};\r\n\r\nmodule.exports = CreateInteractiveObject;\r\n"]},"metadata":{},"sourceType":"script"}