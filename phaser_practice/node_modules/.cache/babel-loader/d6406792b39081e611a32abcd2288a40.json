{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  http://www.blackpawn.com/texts/pointinpoly/\n\n/**\r\n * Checks if a point (as a pair of coordinates) is inside a Triangle's bounds.\r\n *\r\n * @function Phaser.Geom.Triangle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is inside the Triangle, otherwise `false`.\r\n */\nvar Contains = function (triangle, x, y) {\n  var v0x = triangle.x3 - triangle.x1;\n  var v0y = triangle.y3 - triangle.y1;\n  var v1x = triangle.x2 - triangle.x1;\n  var v1y = triangle.y2 - triangle.y1;\n  var v2x = x - triangle.x1;\n  var v2y = y - triangle.y1;\n  var dot00 = v0x * v0x + v0y * v0y;\n  var dot01 = v0x * v1x + v0y * v1y;\n  var dot02 = v0x * v2x + v0y * v2y;\n  var dot11 = v1x * v1x + v1y * v1y;\n  var dot12 = v1x * v2x + v1y * v2y; // Compute barycentric coordinates\n\n  var b = dot00 * dot11 - dot01 * dot01;\n  var inv = b === 0 ? 0 : 1 / b;\n  var u = (dot11 * dot02 - dot01 * dot12) * inv;\n  var v = (dot00 * dot12 - dot01 * dot02) * inv;\n  return u >= 0 && v >= 0 && u + v < 1;\n};\n\nmodule.exports = Contains;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/Contains.js"],"names":["Contains","triangle","x","y","v0x","x3","x1","v0y","y3","y1","v1x","x2","v1y","y2","v2x","v2y","dot00","dot01","dot02","dot11","dot12","b","inv","u","v","module","exports"],"mappings":"AAAA;;;;;AAMA;;AAEA;;;;;;;;;;;;AAYA,IAAIA,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,CAApB,EAAuBC,CAAvB,EACf;AACI,MAAIC,GAAG,GAAGH,QAAQ,CAACI,EAAT,GAAcJ,QAAQ,CAACK,EAAjC;AACA,MAAIC,GAAG,GAAGN,QAAQ,CAACO,EAAT,GAAcP,QAAQ,CAACQ,EAAjC;AAEA,MAAIC,GAAG,GAAGT,QAAQ,CAACU,EAAT,GAAcV,QAAQ,CAACK,EAAjC;AACA,MAAIM,GAAG,GAAGX,QAAQ,CAACY,EAAT,GAAcZ,QAAQ,CAACQ,EAAjC;AAEA,MAAIK,GAAG,GAAGZ,CAAC,GAAGD,QAAQ,CAACK,EAAvB;AACA,MAAIS,GAAG,GAAGZ,CAAC,GAAGF,QAAQ,CAACQ,EAAvB;AAEA,MAAIO,KAAK,GAAIZ,GAAG,GAAGA,GAAP,GAAeG,GAAG,GAAGA,GAAjC;AACA,MAAIU,KAAK,GAAIb,GAAG,GAAGM,GAAP,GAAeH,GAAG,GAAGK,GAAjC;AACA,MAAIM,KAAK,GAAId,GAAG,GAAGU,GAAP,GAAeP,GAAG,GAAGQ,GAAjC;AACA,MAAII,KAAK,GAAIT,GAAG,GAAGA,GAAP,GAAeE,GAAG,GAAGA,GAAjC;AACA,MAAIQ,KAAK,GAAIV,GAAG,GAAGI,GAAP,GAAeF,GAAG,GAAGG,GAAjC,CAdJ,CAgBI;;AACA,MAAIM,CAAC,GAAKL,KAAK,GAAGG,KAAT,GAAmBF,KAAK,GAAGA,KAApC;AACA,MAAIK,GAAG,GAAID,CAAC,KAAK,CAAP,GAAY,CAAZ,GAAiB,IAAIA,CAA/B;AACA,MAAIE,CAAC,GAAG,CAAEJ,KAAK,GAAGD,KAAT,GAAmBD,KAAK,GAAGG,KAA5B,IAAsCE,GAA9C;AACA,MAAIE,CAAC,GAAG,CAAER,KAAK,GAAGI,KAAT,GAAmBH,KAAK,GAAGC,KAA5B,IAAsCI,GAA9C;AAEA,SAAQC,CAAC,IAAI,CAAL,IAAUC,CAAC,IAAI,CAAf,IAAqBD,CAAC,GAAGC,CAAJ,GAAQ,CAArC;AACH,CAxBD;;AA0BAC,MAAM,CAACC,OAAP,GAAiB1B,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  http://www.blackpawn.com/texts/pointinpoly/\r\n\r\n/**\r\n * Checks if a point (as a pair of coordinates) is inside a Triangle's bounds.\r\n *\r\n * @function Phaser.Geom.Triangle.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is inside the Triangle, otherwise `false`.\r\n */\r\nvar Contains = function (triangle, x, y)\r\n{\r\n    var v0x = triangle.x3 - triangle.x1;\r\n    var v0y = triangle.y3 - triangle.y1;\r\n\r\n    var v1x = triangle.x2 - triangle.x1;\r\n    var v1y = triangle.y2 - triangle.y1;\r\n\r\n    var v2x = x - triangle.x1;\r\n    var v2y = y - triangle.y1;\r\n\r\n    var dot00 = (v0x * v0x) + (v0y * v0y);\r\n    var dot01 = (v0x * v1x) + (v0y * v1y);\r\n    var dot02 = (v0x * v2x) + (v0y * v2y);\r\n    var dot11 = (v1x * v1x) + (v1y * v1y);\r\n    var dot12 = (v1x * v2x) + (v1y * v2y);\r\n\r\n    // Compute barycentric coordinates\r\n    var b = ((dot00 * dot11) - (dot01 * dot01));\r\n    var inv = (b === 0) ? 0 : (1 / b);\r\n    var u = ((dot11 * dot02) - (dot01 * dot12)) * inv;\r\n    var v = ((dot00 * dot12) - (dot01 * dot02)) * inv;\r\n\r\n    return (u >= 0 && v >= 0 && (u + v < 1));\r\n};\r\n\r\nmodule.exports = Contains;\r\n"]},"metadata":{},"sourceType":"script"}