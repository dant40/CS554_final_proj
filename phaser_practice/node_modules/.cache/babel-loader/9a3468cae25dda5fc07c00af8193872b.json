{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Compute a random unit vector.\r\n *\r\n * Computes random values for the given vector between -1 and 1 that can be used to represent a direction.\r\n *\r\n * Optionally accepts a scale value to scale the resulting vector by.\r\n *\r\n * @function Phaser.Math.RandomXY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector2} vector - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector2} The given Vector.\r\n */\nvar RandomXY = function (vector, scale) {\n  if (scale === undefined) {\n    scale = 1;\n  }\n\n  var r = Math.random() * 2 * Math.PI;\n  vector.x = Math.cos(r) * scale;\n  vector.y = Math.sin(r) * scale;\n  return vector;\n};\n\nmodule.exports = RandomXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/RandomXY.js"],"names":["RandomXY","vector","scale","undefined","r","Math","random","PI","x","cos","y","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;AAeA,IAAIA,QAAQ,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EACf;AACI,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AAAED,IAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,MAAIE,CAAC,GAAGC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoBD,IAAI,CAACE,EAAjC;AAEAN,EAAAA,MAAM,CAACO,CAAP,GAAWH,IAAI,CAACI,GAAL,CAASL,CAAT,IAAcF,KAAzB;AACAD,EAAAA,MAAM,CAACS,CAAP,GAAWL,IAAI,CAACM,GAAL,CAASP,CAAT,IAAcF,KAAzB;AAEA,SAAOD,MAAP;AACH,CAVD;;AAYAW,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compute a random unit vector.\r\n *\r\n * Computes random values for the given vector between -1 and 1 that can be used to represent a direction.\r\n *\r\n * Optionally accepts a scale value to scale the resulting vector by.\r\n *\r\n * @function Phaser.Math.RandomXY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Math.Vector2} vector - The Vector to compute random values for.\r\n * @param {number} [scale=1] - The scale of the random values.\r\n *\r\n * @return {Phaser.Math.Vector2} The given Vector.\r\n */\r\nvar RandomXY = function (vector, scale)\r\n{\r\n    if (scale === undefined) { scale = 1; }\r\n\r\n    var r = Math.random() * 2 * Math.PI;\r\n\r\n    vector.x = Math.cos(r) * scale;\r\n    vector.y = Math.sin(r) * scale;\r\n\r\n    return vector;\r\n};\r\n\r\nmodule.exports = RandomXY;\r\n"]},"metadata":{},"sourceType":"script"}