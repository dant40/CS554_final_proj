{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('../Formats');\n\nvar LayerData = require('../mapdata/LayerData');\n\nvar MapData = require('../mapdata/MapData');\n\nvar Tile = require('../Tile');\n/**\r\n * Parses a 2D array of tile indexes into a new MapData object with a single layer.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse2DArray\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer[][]} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels.\r\n * @param {integer} tileHeight - The height of a tile in pixels.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} [description]\r\n */\n\n\nvar Parse2DArray = function (name, data, tileWidth, tileHeight, insertNull) {\n  var layerData = new LayerData({\n    tileWidth: tileWidth,\n    tileHeight: tileHeight\n  });\n  var mapData = new MapData({\n    name: name,\n    tileWidth: tileWidth,\n    tileHeight: tileHeight,\n    format: Formats.ARRAY_2D,\n    layers: [layerData]\n  });\n  var tiles = [];\n  var height = data.length;\n  var width = 0;\n\n  for (var y = 0; y < data.length; y++) {\n    tiles[y] = [];\n    var row = data[y];\n\n    for (var x = 0; x < row.length; x++) {\n      var tileIndex = parseInt(row[x], 10);\n\n      if (isNaN(tileIndex) || tileIndex === -1) {\n        tiles[y][x] = insertNull ? null : new Tile(layerData, -1, x, y, tileWidth, tileHeight);\n      } else {\n        tiles[y][x] = new Tile(layerData, tileIndex, x, y, tileWidth, tileHeight);\n      }\n    }\n\n    if (width === 0) {\n      width = row.length;\n    }\n  }\n\n  mapData.width = layerData.width = width;\n  mapData.height = layerData.height = height;\n  mapData.widthInPixels = layerData.widthInPixels = width * tileWidth;\n  mapData.heightInPixels = layerData.heightInPixels = height * tileHeight;\n  layerData.data = tiles;\n  return mapData;\n};\n\nmodule.exports = Parse2DArray;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/Parse2DArray.js"],"names":["Formats","require","LayerData","MapData","Tile","Parse2DArray","name","data","tileWidth","tileHeight","insertNull","layerData","mapData","format","ARRAY_2D","layers","tiles","height","length","width","y","row","x","tileIndex","parseInt","isNaN","widthInPixels","heightInPixels","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,SAAD,CAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAII,YAAY,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,UAA7C,EACnB;AACI,MAAIC,SAAS,GAAG,IAAIT,SAAJ,CAAc;AAC1BM,IAAAA,SAAS,EAAEA,SADe;AAE1BC,IAAAA,UAAU,EAAEA;AAFc,GAAd,CAAhB;AAKA,MAAIG,OAAO,GAAG,IAAIT,OAAJ,CAAY;AACtBG,IAAAA,IAAI,EAAEA,IADgB;AAEtBE,IAAAA,SAAS,EAAEA,SAFW;AAGtBC,IAAAA,UAAU,EAAEA,UAHU;AAItBI,IAAAA,MAAM,EAAEb,OAAO,CAACc,QAJM;AAKtBC,IAAAA,MAAM,EAAE,CAAEJ,SAAF;AALc,GAAZ,CAAd;AAQA,MAAIK,KAAK,GAAG,EAAZ;AACA,MAAIC,MAAM,GAAGV,IAAI,CAACW,MAAlB;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACW,MAAzB,EAAiCE,CAAC,EAAlC,EACA;AACIJ,IAAAA,KAAK,CAACI,CAAD,CAAL,GAAW,EAAX;AACA,QAAIC,GAAG,GAAGd,IAAI,CAACa,CAAD,CAAd;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACH,MAAxB,EAAgCI,CAAC,EAAjC,EACA;AACI,UAAIC,SAAS,GAAGC,QAAQ,CAACH,GAAG,CAACC,CAAD,CAAJ,EAAS,EAAT,CAAxB;;AAEA,UAAIG,KAAK,CAACF,SAAD,CAAL,IAAoBA,SAAS,KAAK,CAAC,CAAvC,EACA;AACIP,QAAAA,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,IAAcZ,UAAU,GAClB,IADkB,GAElB,IAAIN,IAAJ,CAASO,SAAT,EAAoB,CAAC,CAArB,EAAwBW,CAAxB,EAA2BF,CAA3B,EAA8BZ,SAA9B,EAAyCC,UAAzC,CAFN;AAGH,OALD,MAOA;AACIO,QAAAA,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,IAAc,IAAIlB,IAAJ,CAASO,SAAT,EAAoBY,SAApB,EAA+BD,CAA/B,EAAkCF,CAAlC,EAAqCZ,SAArC,EAAgDC,UAAhD,CAAd;AACH;AACJ;;AAED,QAAIU,KAAK,KAAK,CAAd,EACA;AACIA,MAAAA,KAAK,GAAGE,GAAG,CAACH,MAAZ;AACH;AACJ;;AAEDN,EAAAA,OAAO,CAACO,KAAR,GAAgBR,SAAS,CAACQ,KAAV,GAAkBA,KAAlC;AACAP,EAAAA,OAAO,CAACK,MAAR,GAAiBN,SAAS,CAACM,MAAV,GAAmBA,MAApC;AACAL,EAAAA,OAAO,CAACc,aAAR,GAAwBf,SAAS,CAACe,aAAV,GAA0BP,KAAK,GAAGX,SAA1D;AACAI,EAAAA,OAAO,CAACe,cAAR,GAAyBhB,SAAS,CAACgB,cAAV,GAA2BV,MAAM,GAAGR,UAA7D;AACAE,EAAAA,SAAS,CAACJ,IAAV,GAAiBS,KAAjB;AAEA,SAAOJ,OAAP;AACH,CArDD;;AAuDAgB,MAAM,CAACC,OAAP,GAAiBxB,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../Formats');\r\nvar LayerData = require('../mapdata/LayerData');\r\nvar MapData = require('../mapdata/MapData');\r\nvar Tile = require('../Tile');\r\n\r\n/**\r\n * Parses a 2D array of tile indexes into a new MapData object with a single layer.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse2DArray\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer[][]} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels.\r\n * @param {integer} tileHeight - The height of a tile in pixels.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} [description]\r\n */\r\nvar Parse2DArray = function (name, data, tileWidth, tileHeight, insertNull)\r\n{\r\n    var layerData = new LayerData({\r\n        tileWidth: tileWidth,\r\n        tileHeight: tileHeight\r\n    });\r\n\r\n    var mapData = new MapData({\r\n        name: name,\r\n        tileWidth: tileWidth,\r\n        tileHeight: tileHeight,\r\n        format: Formats.ARRAY_2D,\r\n        layers: [ layerData ]\r\n    });\r\n\r\n    var tiles = [];\r\n    var height = data.length;\r\n    var width = 0;\r\n\r\n    for (var y = 0; y < data.length; y++)\r\n    {\r\n        tiles[y] = [];\r\n        var row = data[y];\r\n\r\n        for (var x = 0; x < row.length; x++)\r\n        {\r\n            var tileIndex = parseInt(row[x], 10);\r\n\r\n            if (isNaN(tileIndex) || tileIndex === -1)\r\n            {\r\n                tiles[y][x] = insertNull\r\n                    ? null\r\n                    : new Tile(layerData, -1, x, y, tileWidth, tileHeight);\r\n            }\r\n            else\r\n            {\r\n                tiles[y][x] = new Tile(layerData, tileIndex, x, y, tileWidth, tileHeight);\r\n            }\r\n        }\r\n\r\n        if (width === 0)\r\n        {\r\n            width = row.length;\r\n        }\r\n    }\r\n\r\n    mapData.width = layerData.width = width;\r\n    mapData.height = layerData.height = height;\r\n    mapData.widthInPixels = layerData.widthInPixels = width * tileWidth;\r\n    mapData.heightInPixels = layerData.heightInPixels = height * tileHeight;\r\n    layerData.data = tiles;\r\n\r\n    return mapData;\r\n};\r\n\r\nmodule.exports = Parse2DArray;\r\n"]},"metadata":{},"sourceType":"script"}