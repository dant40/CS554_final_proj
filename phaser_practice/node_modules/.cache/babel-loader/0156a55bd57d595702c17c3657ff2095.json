{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ComponentToHex = require('./ComponentToHex');\n/**\r\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\r\n *\r\n * @function Phaser.Display.Color.RGBToString\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {integer} [a=255] - The alpha value. A number between 0 and 255.\r\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\r\n *\r\n * @return {string} A string-based representation of the color values.\r\n */\n\n\nvar RGBToString = function (r, g, b, a, prefix) {\n  if (a === undefined) {\n    a = 255;\n  }\n\n  if (prefix === undefined) {\n    prefix = '#';\n  }\n\n  if (prefix === '#') {\n    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n  } else {\n    return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\n  }\n};\n\nmodule.exports = RGBToString;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/RGBToString.js"],"names":["ComponentToHex","require","RGBToString","r","g","b","a","prefix","undefined","toString","slice","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,WAAW,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,EAAsBC,MAAtB,EAClB;AACI,MAAID,CAAC,KAAKE,SAAV,EAAqB;AAAEF,IAAAA,CAAC,GAAG,GAAJ;AAAU;;AACjC,MAAIC,MAAM,KAAKC,SAAf,EAA0B;AAAED,IAAAA,MAAM,GAAG,GAAT;AAAe;;AAE3C,MAAIA,MAAM,KAAK,GAAf,EACA;AACI,WAAO,MAAM,CAAC,CAAC,KAAK,EAAN,KAAaJ,CAAC,IAAI,EAAlB,KAAyBC,CAAC,IAAI,CAA9B,IAAmCC,CAApC,EAAuCI,QAAvC,CAAgD,EAAhD,EAAoDC,KAApD,CAA0D,CAA1D,CAAb;AACH,GAHD,MAKA;AACI,WAAO,OAAOV,cAAc,CAACM,CAAD,CAArB,GAA2BN,cAAc,CAACG,CAAD,CAAzC,GAA+CH,cAAc,CAACI,CAAD,CAA7D,GAAmEJ,cAAc,CAACK,CAAD,CAAxF;AACH;AACJ,CAbD;;AAeAM,MAAM,CAACC,OAAP,GAAiBV,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ComponentToHex = require('./ComponentToHex');\r\n\r\n/**\r\n * Converts the color values into an HTML compatible color string, prefixed with either `#` or `0x`.\r\n *\r\n * @function Phaser.Display.Color.RGBToString\r\n * @since 3.0.0\r\n *\r\n * @param {integer} r - The red color value. A number between 0 and 255.\r\n * @param {integer} g - The green color value. A number between 0 and 255.\r\n * @param {integer} b - The blue color value. A number between 0 and 255.\r\n * @param {integer} [a=255] - The alpha value. A number between 0 and 255.\r\n * @param {string} [prefix=#] - The prefix of the string. Either `#` or `0x`.\r\n *\r\n * @return {string} A string-based representation of the color values.\r\n */\r\nvar RGBToString = function (r, g, b, a, prefix)\r\n{\r\n    if (a === undefined) { a = 255; }\r\n    if (prefix === undefined) { prefix = '#'; }\r\n\r\n    if (prefix === '#')\r\n    {\r\n        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n    }\r\n    else\r\n    {\r\n        return '0x' + ComponentToHex(a) + ComponentToHex(r) + ComponentToHex(g) + ComponentToHex(b);\r\n    }\r\n};\r\n\r\nmodule.exports = RGBToString;\r\n"]},"metadata":{},"sourceType":"script"}