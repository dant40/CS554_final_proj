{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar COLLIDES = require('./COLLIDES');\n\nvar GetVelocity = require('./GetVelocity');\n\nvar TYPE = require('./TYPE');\n\nvar UpdateMotion = require('./UpdateMotion');\n/**\r\n * @callback Phaser.Types.Physics.Impact.BodyUpdateCallback\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n */\n\n/**\r\n * @classdesc\r\n * An Impact.js compatible physics body.\r\n * This re-creates the properties you'd get on an Entity and the math needed to update them.\r\n *\r\n * @class Body\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - [description]\r\n * @param {number} y - [description]\r\n * @param {number} [sx=16] - [description]\r\n * @param {number} [sy=16] - [description]\r\n */\n\n\nvar Body = new Class({\n  initialize: function Body(world, x, y, sx, sy) {\n    if (sx === undefined) {\n      sx = 16;\n    }\n\n    if (sy === undefined) {\n      sy = sx;\n    }\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#world\r\n     * @type {Phaser.Physics.Impact.World}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.world = world;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#gameObject\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.gameObject = null;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#parent\r\n     * @type {?(Phaser.Physics.Impact.ImpactBody|Phaser.Physics.Impact.ImpactImage|Phaser.Physics.Impact.ImpactSprite)}\r\n     * @since 3.0.0\r\n     */\n\n    this.parent;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#id\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.id = world.getNextID();\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#name\r\n     * @type {string}\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this.name = '';\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#size\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.size = {\n      x: sx,\n      y: sy\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#offset\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.offset = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#pos\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.pos = {\n      x: x,\n      y: y\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#last\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.last = {\n      x: x,\n      y: y\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#vel\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.vel = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accel\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.accel = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#friction\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.friction = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#maxVel\r\n     * @type {Phaser.Types.Math.Vector2Like}\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVel = {\n      x: world.defaults.maxVelocityX,\n      y: world.defaults.maxVelocityY\n    };\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#standing\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.standing = false;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#gravityFactor\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.gravityFactor = world.defaults.gravityFactor;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#bounciness\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.bounciness = world.defaults.bounciness;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#minBounceVelocity\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.minBounceVelocity = world.defaults.minBounceVelocity;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accelGround\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelGround = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#accelAir\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelAir = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#jumpSpeed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.jumpSpeed = 0;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#type\r\n     * @type {Phaser.Physics.Impact.TYPE}\r\n     * @since 3.0.0\r\n     */\n\n    this.type = TYPE.NONE;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#checkAgainst\r\n     * @type {Phaser.Physics.Impact.TYPE}\r\n     * @since 3.0.0\r\n     */\n\n    this.checkAgainst = TYPE.NONE;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#collides\r\n     * @type {Phaser.Physics.Impact.COLLIDES}\r\n     * @since 3.0.0\r\n     */\n\n    this.collides = COLLIDES.NEVER;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugShowBody\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugShowBody = world.defaults.debugShowBody;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugShowVelocity\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugShowVelocity = world.defaults.debugShowVelocity;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#debugBodyColor\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugBodyColor = world.defaults.bodyDebugColor;\n    /**\r\n     * [description]\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#updateCallback\r\n     * @type {?Phaser.Types.Physics.Impact.BodyUpdateCallback}\r\n     * @since 3.0.0\r\n     */\n\n    this.updateCallback;\n    /**\r\n     * min 44 deg, max 136 deg\r\n     *\r\n     * @name Phaser.Physics.Impact.Body#slopeStanding\r\n     * @type {{ min: number, max: number }}\r\n     * @since 3.0.0\r\n     */\n\n    this.slopeStanding = {\n      min: 0.767944870877505,\n      max: 2.3736477827122884\n    };\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - [description]\r\n   * @param {number} y - [description]\r\n   */\n  reset: function (x, y) {\n    this.pos = {\n      x: x,\n      y: y\n    };\n    this.last = {\n      x: x,\n      y: y\n    };\n    this.vel = {\n      x: 0,\n      y: 0\n    };\n    this.accel = {\n      x: 0,\n      y: 0\n    };\n    this.friction = {\n      x: 0,\n      y: 0\n    };\n    this.maxVel = {\n      x: 100,\n      y: 100\n    };\n    this.standing = false;\n    this.gravityFactor = 1;\n    this.bounciness = 0;\n    this.minBounceVelocity = 40;\n    this.accelGround = 0;\n    this.accelAir = 0;\n    this.jumpSpeed = 0;\n    this.type = TYPE.NONE;\n    this.checkAgainst = TYPE.NONE;\n    this.collides = COLLIDES.NEVER;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   */\n  update: function (delta) {\n    var pos = this.pos;\n    this.last.x = pos.x;\n    this.last.y = pos.y;\n    this.vel.y += this.world.gravity * delta * this.gravityFactor;\n    this.vel.x = GetVelocity(delta, this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);\n    this.vel.y = GetVelocity(delta, this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);\n    var mx = this.vel.x * delta;\n    var my = this.vel.y * delta;\n    var res = this.world.collisionMap.trace(pos.x, pos.y, mx, my, this.size.x, this.size.y);\n\n    if (this.handleMovementTrace(res)) {\n      UpdateMotion(this, res);\n    }\n\n    var go = this.gameObject;\n\n    if (go) {\n      go.x = pos.x - this.offset.x + go.displayOriginX * go.scaleX;\n      go.y = pos.y - this.offset.y + go.displayOriginY * go.scaleY;\n    }\n\n    if (this.updateCallback) {\n      this.updateCallback(this);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#drawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphic - [description]\r\n   */\n  drawDebug: function (graphic) {\n    var pos = this.pos;\n\n    if (this.debugShowBody) {\n      graphic.lineStyle(1, this.debugBodyColor, 1);\n      graphic.strokeRect(pos.x, pos.y, this.size.x, this.size.y);\n    }\n\n    if (this.debugShowVelocity) {\n      var x = pos.x + this.size.x / 2;\n      var y = pos.y + this.size.y / 2;\n      graphic.lineStyle(1, this.world.defaults.velocityDebugColor, 1);\n      graphic.lineBetween(x, y, x + this.vel.x, y + this.vel.y);\n    }\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#willDrawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  willDrawDebug: function () {\n    return this.debugShowBody || this.debugShowVelocity;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#skipHash\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  skipHash: function () {\n    return !this.enabled || this.type === 0 && this.checkAgainst === 0 && this.collides === 0;\n  },\n\n  /**\r\n   * Determines whether the body collides with the `other` one or not.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#touches\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  touches: function (other) {\n    return !(this.pos.x >= other.pos.x + other.size.x || this.pos.x + this.size.x <= other.pos.x || this.pos.y >= other.pos.y + other.size.y || this.pos.y + this.size.y <= other.pos.y);\n  },\n\n  /**\r\n   * Reset the size and position of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#resetSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to position the body.\r\n   * @param {number} y - The y coordinate to position the body.\r\n   * @param {number} width - The width of the body.\r\n   * @param {number} height - The height of the body.\r\n   *\r\n   * @return {Phaser.Physics.Impact.Body} This Body object.\r\n   */\n  resetSize: function (x, y, width, height) {\n    this.pos.x = x;\n    this.pos.y = y;\n    this.size.x = width;\n    this.size.y = height;\n    return this;\n  },\n\n  /**\r\n   * Export this body object to JSON.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.Physics.Impact.JSONImpactBody} JSON representation of this body object.\r\n   */\n  toJSON: function () {\n    var output = {\n      name: this.name,\n      size: {\n        x: this.size.x,\n        y: this.size.y\n      },\n      pos: {\n        x: this.pos.x,\n        y: this.pos.y\n      },\n      vel: {\n        x: this.vel.x,\n        y: this.vel.y\n      },\n      accel: {\n        x: this.accel.x,\n        y: this.accel.y\n      },\n      friction: {\n        x: this.friction.x,\n        y: this.friction.y\n      },\n      maxVel: {\n        x: this.maxVel.x,\n        y: this.maxVel.y\n      },\n      gravityFactor: this.gravityFactor,\n      bounciness: this.bounciness,\n      minBounceVelocity: this.minBounceVelocity,\n      type: this.type,\n      checkAgainst: this.checkAgainst,\n      collides: this.collides\n    };\n    return output;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#fromJSON\r\n   * @todo Code it!\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} config - [description]\r\n   */\n  fromJSON: function () {},\n\n  /**\r\n   * Can be overridden by user code\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#check\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   */\n  check: function () {},\n\n  /**\r\n   * Can be overridden by user code\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#collideWith\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Physics.Impact.Body} other - [description]\r\n   * @param {string} axis - [description]\r\n   */\n  collideWith: function (other, axis) {\n    if (this.parent && this.parent._collideCallback) {\n      this.parent._collideCallback.call(this.parent._callbackScope, this, other, axis);\n    }\n  },\n\n  /**\r\n   * Can be overridden by user code but must return a boolean.\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#handleMovementTrace\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} res - [description]\r\n   *\r\n   * @return {boolean} [description]\r\n   */\n  handleMovementTrace: function () {\n    return true;\n  },\n\n  /**\r\n   * [description]\r\n   *\r\n   * @method Phaser.Physics.Impact.Body#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.world.remove(this);\n    this.enabled = false;\n    this.world = null;\n    this.gameObject = null;\n    this.parent = null;\n  }\n});\nmodule.exports = Body;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/Body.js"],"names":["Class","require","COLLIDES","GetVelocity","TYPE","UpdateMotion","Body","initialize","world","x","y","sx","sy","undefined","gameObject","enabled","parent","id","getNextID","name","size","offset","pos","last","vel","accel","friction","maxVel","defaults","maxVelocityX","maxVelocityY","standing","gravityFactor","bounciness","minBounceVelocity","accelGround","accelAir","jumpSpeed","type","NONE","checkAgainst","collides","NEVER","debugShowBody","debugShowVelocity","debugBodyColor","bodyDebugColor","updateCallback","slopeStanding","min","max","reset","update","delta","gravity","mx","my","res","collisionMap","trace","handleMovementTrace","go","displayOriginX","scaleX","displayOriginY","scaleY","drawDebug","graphic","lineStyle","strokeRect","velocityDebugColor","lineBetween","willDrawDebug","skipHash","touches","other","resetSize","width","height","toJSON","output","fromJSON","check","collideWith","axis","_collideCallback","call","_callbackScope","destroy","remove","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar COLLIDES = require('./COLLIDES');\r\nvar GetVelocity = require('./GetVelocity');\r\nvar TYPE = require('./TYPE');\r\nvar UpdateMotion = require('./UpdateMotion');\r\n\r\n/**\r\n * @callback Phaser.Types.Physics.Impact.BodyUpdateCallback\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * An Impact.js compatible physics body.\r\n * This re-creates the properties you'd get on an Entity and the math needed to update them.\r\n *\r\n * @class Body\r\n * @memberof Phaser.Physics.Impact\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - [description]\r\n * @param {number} x - [description]\r\n * @param {number} y - [description]\r\n * @param {number} [sx=16] - [description]\r\n * @param {number} [sy=16] - [description]\r\n */\r\nvar Body = new Class({\r\n\r\n    initialize:\r\n\r\n    function Body (world, x, y, sx, sy)\r\n    {\r\n        if (sx === undefined) { sx = 16; }\r\n        if (sy === undefined) { sy = sx; }\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#world\r\n         * @type {Phaser.Physics.Impact.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = null;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The ImpactBody, ImpactSprite or ImpactImage object that owns this Body, if any.\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#parent\r\n         * @type {?(Phaser.Physics.Impact.ImpactBody|Phaser.Physics.Impact.ImpactImage|Phaser.Physics.Impact.ImpactSprite)}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#id\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.id = world.getNextID();\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#name\r\n         * @type {string}\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this.name = '';\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#size\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.size = { x: sx, y: sy };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#offset\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.offset = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#pos\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.pos = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#last\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.last = { x: x, y: y };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#vel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.vel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.accel = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#friction\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.friction = { x: 0, y: 0 };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#maxVel\r\n         * @type {Phaser.Types.Math.Vector2Like}\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVel = { x: world.defaults.maxVelocityX, y: world.defaults.maxVelocityY };\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#standing\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.standing = false;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#gravityFactor\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.gravityFactor = world.defaults.gravityFactor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#bounciness\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.bounciness = world.defaults.bounciness;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#minBounceVelocity\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.minBounceVelocity = world.defaults.minBounceVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelGround\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelGround = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#accelAir\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelAir = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#jumpSpeed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.jumpSpeed = 0;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#type\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#checkAgainst\r\n         * @type {Phaser.Physics.Impact.TYPE}\r\n         * @since 3.0.0\r\n         */\r\n        this.checkAgainst = TYPE.NONE;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#collides\r\n         * @type {Phaser.Physics.Impact.COLLIDES}\r\n         * @since 3.0.0\r\n         */\r\n        this.collides = COLLIDES.NEVER;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowBody\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowBody = world.defaults.debugShowBody;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugShowVelocity\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowVelocity = world.defaults.debugShowVelocity;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#debugBodyColor\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugBodyColor = world.defaults.bodyDebugColor;\r\n\r\n        /**\r\n         * [description]\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#updateCallback\r\n         * @type {?Phaser.Types.Physics.Impact.BodyUpdateCallback}\r\n         * @since 3.0.0\r\n         */\r\n        this.updateCallback;\r\n\r\n        /**\r\n         * min 44 deg, max 136 deg\r\n         *\r\n         * @name Phaser.Physics.Impact.Body#slopeStanding\r\n         * @type {{ min: number, max: number }}\r\n         * @since 3.0.0\r\n         */\r\n        this.slopeStanding = { min: 0.767944870877505, max: 2.3736477827122884 };\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - [description]\r\n     * @param {number} y - [description]\r\n     */\r\n    reset: function (x, y)\r\n    {\r\n        this.pos = { x: x, y: y };\r\n        this.last = { x: x, y: y };\r\n        this.vel = { x: 0, y: 0 };\r\n        this.accel = { x: 0, y: 0 };\r\n        this.friction = { x: 0, y: 0 };\r\n        this.maxVel = { x: 100, y: 100 };\r\n\r\n        this.standing = false;\r\n\r\n        this.gravityFactor = 1;\r\n        this.bounciness = 0;\r\n        this.minBounceVelocity = 40;\r\n\r\n        this.accelGround = 0;\r\n        this.accelAir = 0;\r\n        this.jumpSpeed = 0;\r\n\r\n        this.type = TYPE.NONE;\r\n        this.checkAgainst = TYPE.NONE;\r\n        this.collides = COLLIDES.NEVER;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     */\r\n    update: function (delta)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        this.last.x = pos.x;\r\n        this.last.y = pos.y;\r\n\r\n        this.vel.y += this.world.gravity * delta * this.gravityFactor;\r\n\r\n        this.vel.x = GetVelocity(delta, this.vel.x, this.accel.x, this.friction.x, this.maxVel.x);\r\n        this.vel.y = GetVelocity(delta, this.vel.y, this.accel.y, this.friction.y, this.maxVel.y);\r\n\r\n        var mx = this.vel.x * delta;\r\n        var my = this.vel.y * delta;\r\n\r\n        var res = this.world.collisionMap.trace(pos.x, pos.y, mx, my, this.size.x, this.size.y);\r\n\r\n        if (this.handleMovementTrace(res))\r\n        {\r\n            UpdateMotion(this, res);\r\n        }\r\n\r\n        var go = this.gameObject;\r\n\r\n        if (go)\r\n        {\r\n            go.x = (pos.x - this.offset.x) + go.displayOriginX * go.scaleX;\r\n            go.y = (pos.y - this.offset.y) + go.displayOriginY * go.scaleY;\r\n        }\r\n\r\n        if (this.updateCallback)\r\n        {\r\n            this.updateCallback(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#drawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphic - [description]\r\n     */\r\n    drawDebug: function (graphic)\r\n    {\r\n        var pos = this.pos;\r\n\r\n        if (this.debugShowBody)\r\n        {\r\n            graphic.lineStyle(1, this.debugBodyColor, 1);\r\n            graphic.strokeRect(pos.x, pos.y, this.size.x, this.size.y);\r\n        }\r\n\r\n        if (this.debugShowVelocity)\r\n        {\r\n            var x = pos.x + this.size.x / 2;\r\n            var y = pos.y + this.size.y / 2;\r\n\r\n            graphic.lineStyle(1, this.world.defaults.velocityDebugColor, 1);\r\n            graphic.lineBetween(x, y, x + this.vel.x, y + this.vel.y);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#willDrawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    willDrawDebug: function ()\r\n    {\r\n        return (this.debugShowBody || this.debugShowVelocity);\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#skipHash\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    skipHash: function ()\r\n    {\r\n        return (!this.enabled || (this.type === 0 && this.checkAgainst === 0 && this.collides === 0));\r\n    },\r\n\r\n    /**\r\n     * Determines whether the body collides with the `other` one or not.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#touches\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    touches: function (other)\r\n    {\r\n        return !(\r\n            this.pos.x >= other.pos.x + other.size.x ||\r\n            this.pos.x + this.size.x <= other.pos.x ||\r\n            this.pos.y >= other.pos.y + other.size.y ||\r\n            this.pos.y + this.size.y <= other.pos.y\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Reset the size and position of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#resetSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to position the body.\r\n     * @param {number} y - The y coordinate to position the body.\r\n     * @param {number} width - The width of the body.\r\n     * @param {number} height - The height of the body.\r\n     *\r\n     * @return {Phaser.Physics.Impact.Body} This Body object.\r\n     */\r\n    resetSize: function (x, y, width, height)\r\n    {\r\n        this.pos.x = x;\r\n        this.pos.y = y;\r\n        this.size.x = width;\r\n        this.size.y = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Export this body object to JSON.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Physics.Impact.JSONImpactBody} JSON representation of this body object.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {\r\n            name: this.name,\r\n            size: { x: this.size.x, y: this.size.y },\r\n            pos: { x: this.pos.x, y: this.pos.y },\r\n            vel: { x: this.vel.x, y: this.vel.y },\r\n            accel: { x: this.accel.x, y: this.accel.y },\r\n            friction: { x: this.friction.x, y: this.friction.y },\r\n            maxVel: { x: this.maxVel.x, y: this.maxVel.y },\r\n            gravityFactor: this.gravityFactor,\r\n            bounciness: this.bounciness,\r\n            minBounceVelocity: this.minBounceVelocity,\r\n            type: this.type,\r\n            checkAgainst: this.checkAgainst,\r\n            collides: this.collides\r\n        };\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#fromJSON\r\n     * @todo Code it!\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} config - [description]\r\n     */\r\n    fromJSON: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#check\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     */\r\n    check: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#collideWith\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Physics.Impact.Body} other - [description]\r\n     * @param {string} axis - [description]\r\n     */\r\n    collideWith: function (other, axis)\r\n    {\r\n        if (this.parent && this.parent._collideCallback)\r\n        {\r\n            this.parent._collideCallback.call(this.parent._callbackScope, this, other, axis);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Can be overridden by user code but must return a boolean.\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#handleMovementTrace\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} res - [description]\r\n     *\r\n     * @return {boolean} [description]\r\n     */\r\n    handleMovementTrace: function ()\r\n    {\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * [description]\r\n     *\r\n     * @method Phaser.Physics.Impact.Body#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.world.remove(this);\r\n\r\n        this.enabled = false;\r\n\r\n        this.world = null;\r\n\r\n        this.gameObject = null;\r\n\r\n        this.parent = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Body;\r\n"]},"metadata":{},"sourceType":"script"}