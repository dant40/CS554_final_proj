{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\nvar Class = require('../utils/Class');\n/**\r\n * @classdesc\r\n * A representation of a vector in 4D space.\r\n *\r\n * A four-component vector.\r\n *\r\n * @class Vector4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\n\n\nvar Vector4 = new Class({\n  initialize: function Vector4(x, y, z, w) {\n    /**\r\n     * The x component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n    this.x = 0;\n    /**\r\n     * The y component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The z component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#z\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.z = 0;\n    /**\r\n     * The w component of this Vector.\r\n     *\r\n     * @name Phaser.Math.Vector4#w\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.w = 0;\n\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n  },\n\n  /**\r\n   * Make a clone of this Vector4.\r\n   *\r\n   * @method Phaser.Math.Vector4#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} A clone of this Vector4.\r\n   */\n  clone: function () {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  },\n\n  /**\r\n   * Copy the components of a given Vector into this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} src - The Vector to copy the components from.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  copy: function (src) {\n    this.x = src.x;\n    this.y = src.y;\n    this.z = src.z || 0;\n    this.w = src.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Check whether this Vector is equal to a given Vector.\r\n   *\r\n   * Performs a strict quality check against each Vector's components.\r\n   *\r\n   * @method Phaser.Math.Vector4#equals\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The vector to check equality with.\r\n   *\r\n   * @return {boolean} A boolean indicating whether the two Vectors are equal or not.\r\n   */\n  equals: function (v) {\n    return this.x === v.x && this.y === v.y && this.z === v.z && this.w === v.w;\n  },\n\n  /**\r\n   * Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\r\n   *\r\n   * @method Phaser.Math.Vector4#set\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y, z and w components.\r\n   * @param {number} y - The y value to set for this Vector.\r\n   * @param {number} z - The z value to set for this Vector.\r\n   * @param {number} w - The z value to set for this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  set: function (x, y, z, w) {\n    if (typeof x === 'object') {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n      this.z = x.z || 0;\n      this.w = x.w || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n      this.z = z || 0;\n      this.w = w || 0;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Add a given Vector to this Vector. Addition is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector4#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to add to this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  add: function (v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z || 0;\n    this.w += v.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n   *\r\n   * @method Phaser.Math.Vector4#subtract\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to subtract from this Vector.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  subtract: function (v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z || 0;\n    this.w -= v.w || 0;\n    return this;\n  },\n\n  /**\r\n   * Scale this Vector by the given value.\r\n   *\r\n   * @method Phaser.Math.Vector4#scale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} scale - The value to scale this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  scale: function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    this.w *= scale;\n    return this;\n  },\n\n  /**\r\n   * Calculate the length (or magnitude) of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#length\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector.\r\n   */\n  length: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  },\n\n  /**\r\n   * Calculate the length of this Vector squared.\r\n   *\r\n   * @method Phaser.Math.Vector4#lengthSq\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The length of this Vector, squared.\r\n   */\n  lengthSq: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    return x * x + y * y + z * z + w * w;\n  },\n\n  /**\r\n   * Normalize this Vector.\r\n   *\r\n   * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n   *\r\n   * @method Phaser.Math.Vector4#normalize\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  normalize: function () {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    var len = x * x + y * y + z * z + w * w;\n\n    if (len > 0) {\n      len = 1 / Math.sqrt(len);\n      this.x = x * len;\n      this.y = y * len;\n      this.z = z * len;\n      this.w = w * len;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculate the dot product of this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#dot\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The Vector4 to dot product with this Vector4.\r\n   *\r\n   * @return {number} The dot product of this Vector and the given Vector.\r\n   */\n  dot: function (v) {\n    return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n  },\n\n  /**\r\n   * Linearly interpolate between this Vector and the given Vector.\r\n   *\r\n   * Interpolates this Vector towards the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#lerp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Vector4} v - The Vector4 to interpolate towards.\r\n   * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  lerp: function (v, t) {\n    if (t === undefined) {\n      t = 0;\n    }\n\n    var ax = this.x;\n    var ay = this.y;\n    var az = this.z;\n    var aw = this.w;\n    this.x = ax + t * (v.x - ax);\n    this.y = ay + t * (v.y - ay);\n    this.z = az + t * (v.z - az);\n    this.w = aw + t * (v.w - aw);\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise multiplication between this Vector and the given Vector.\r\n   *\r\n   * Multiplies this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#multiply\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to multiply this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  multiply: function (v) {\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z || 1;\n    this.w *= v.w || 1;\n    return this;\n  },\n\n  /**\r\n   * Perform a component-wise division between this Vector and the given Vector.\r\n   *\r\n   * Divides this Vector by the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#divide\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to divide this Vector by.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  divide: function (v) {\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z || 1;\n    this.w /= v.w || 1;\n    return this;\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#distance\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector.\r\n   */\n  distance: function (v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    var dw = v.w - this.w || 0;\n    return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\n  },\n\n  /**\r\n   * Calculate the distance between this Vector and the given Vector, squared.\r\n   *\r\n   * @method Phaser.Math.Vector4#distanceSq\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n   *\r\n   * @return {number} The distance from this Vector to the given Vector, squared.\r\n   */\n  distanceSq: function (v) {\n    var dx = v.x - this.x;\n    var dy = v.y - this.y;\n    var dz = v.z - this.z || 0;\n    var dw = v.w - this.w || 0;\n    return dx * dx + dy * dy + dz * dz + dw * dw;\n  },\n\n  /**\r\n   * Negate the `x`, `y`, `z` and `w` components of this Vector.\r\n   *\r\n   * @method Phaser.Math.Vector4#negate\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  negate: function () {\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n    this.w = -this.w;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Matrix.\r\n   *\r\n   * @method Phaser.Math.Vector4#transformMat4\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector4 with.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  transformMat4: function (mat) {\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var w = this.w;\n    var m = mat.val;\n    this.x = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    this.y = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    this.z = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    this.w = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return this;\n  },\n\n  /**\r\n   * Transform this Vector with the given Quaternion.\r\n   *\r\n   * @method Phaser.Math.Vector4#transformQuat\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  transformQuat: function (q) {\n    // TODO: is this really the same as Vector3?\n    // Also, what about this: http://molecularmusings.wordpress.com/2013/05/24/a-faster-quaternion-vector-multiplication/\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w; // calculate quat * vec\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return this;\n  },\n\n  /**\r\n   * Make this Vector the zero vector (0, 0, 0, 0).\r\n   *\r\n   * @method Phaser.Math.Vector4#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Math.Vector4} This Vector4.\r\n   */\n  reset: function () {\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.w = 0;\n    return this;\n  }\n}); //  TODO: Check if these are required internally, if not, remove.\n\nVector4.prototype.sub = Vector4.prototype.subtract;\nVector4.prototype.mul = Vector4.prototype.multiply;\nVector4.prototype.div = Vector4.prototype.divide;\nVector4.prototype.dist = Vector4.prototype.distance;\nVector4.prototype.distSq = Vector4.prototype.distanceSq;\nVector4.prototype.len = Vector4.prototype.length;\nVector4.prototype.lenSq = Vector4.prototype.lengthSq;\nmodule.exports = Vector4;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/Vector4.js"],"names":["Class","require","Vector4","initialize","x","y","z","w","clone","copy","src","equals","v","set","add","subtract","scale","length","Math","sqrt","lengthSq","normalize","len","dot","lerp","t","undefined","ax","ay","az","aw","multiply","divide","distance","dx","dy","dz","dw","distanceSq","negate","transformMat4","mat","m","val","transformQuat","q","qx","qy","qz","qw","ix","iy","iz","iw","reset","prototype","sub","mul","div","dist","distSq","lenSq","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Adapted from [gl-matrix](https://github.com/toji/gl-matrix) by toji\r\n//  and [vecmath](https://github.com/mattdesl/vecmath) by mattdesl\r\n\r\nvar Class = require('../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A representation of a vector in 4D space.\r\n *\r\n * A four-component vector.\r\n *\r\n * @class Vector4\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x] - The x component.\r\n * @param {number} [y] - The y component.\r\n * @param {number} [z] - The z component.\r\n * @param {number} [w] - The w component.\r\n */\r\nvar Vector4 = new Class({\r\n\r\n    initialize:\r\n\r\n    function Vector4 (x, y, z, w)\r\n    {\r\n        /**\r\n         * The x component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The z component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#z\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.z = 0;\r\n\r\n        /**\r\n         * The w component of this Vector.\r\n         *\r\n         * @name Phaser.Math.Vector4#w\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.w = 0;\r\n\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Make a clone of this Vector4.\r\n     *\r\n     * @method Phaser.Math.Vector4#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} A clone of this Vector4.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Vector4(this.x, this.y, this.z, this.w);\r\n    },\r\n\r\n    /**\r\n     * Copy the components of a given Vector into this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} src - The Vector to copy the components from.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    copy: function (src)\r\n    {\r\n        this.x = src.x;\r\n        this.y = src.y;\r\n        this.z = src.z || 0;\r\n        this.w = src.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Check whether this Vector is equal to a given Vector.\r\n     *\r\n     * Performs a strict quality check against each Vector's components.\r\n     *\r\n     * @method Phaser.Math.Vector4#equals\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The vector to check equality with.\r\n     *\r\n     * @return {boolean} A boolean indicating whether the two Vectors are equal or not.\r\n     */\r\n    equals: function (v)\r\n    {\r\n        return ((this.x === v.x) && (this.y === v.y) && (this.z === v.z) && (this.w === v.w));\r\n    },\r\n\r\n    /**\r\n     * Set the `x`, `y`, `z` and `w` components of the this Vector to the given `x`, `y`, `z` and `w` values.\r\n     *\r\n     * @method Phaser.Math.Vector4#set\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|object)} x - The x value to set for this Vector, or an object containing x, y, z and w components.\r\n     * @param {number} y - The y value to set for this Vector.\r\n     * @param {number} z - The z value to set for this Vector.\r\n     * @param {number} w - The z value to set for this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    set: function (x, y, z, w)\r\n    {\r\n        if (typeof x === 'object')\r\n        {\r\n            this.x = x.x || 0;\r\n            this.y = x.y || 0;\r\n            this.z = x.z || 0;\r\n            this.w = x.w || 0;\r\n        }\r\n        else\r\n        {\r\n            this.x = x || 0;\r\n            this.y = y || 0;\r\n            this.z = z || 0;\r\n            this.w = w || 0;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Add a given Vector to this Vector. Addition is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to add to this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    add: function (v)\r\n    {\r\n        this.x += v.x;\r\n        this.y += v.y;\r\n        this.z += v.z || 0;\r\n        this.w += v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Subtract the given Vector from this Vector. Subtraction is component-wise.\r\n     *\r\n     * @method Phaser.Math.Vector4#subtract\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to subtract from this Vector.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    subtract: function (v)\r\n    {\r\n        this.x -= v.x;\r\n        this.y -= v.y;\r\n        this.z -= v.z || 0;\r\n        this.w -= v.w || 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale this Vector by the given value.\r\n     *\r\n     * @method Phaser.Math.Vector4#scale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} scale - The value to scale this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    scale: function (scale)\r\n    {\r\n        this.x *= scale;\r\n        this.y *= scale;\r\n        this.z *= scale;\r\n        this.w *= scale;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the length (or magnitude) of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#length\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector.\r\n     */\r\n    length: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return Math.sqrt(x * x + y * y + z * z + w * w);\r\n    },\r\n\r\n    /**\r\n     * Calculate the length of this Vector squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#lengthSq\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The length of this Vector, squared.\r\n     */\r\n    lengthSq: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n\r\n        return x * x + y * y + z * z + w * w;\r\n    },\r\n\r\n    /**\r\n     * Normalize this Vector.\r\n     *\r\n     * Makes the vector a unit length vector (magnitude of 1) in the same direction.\r\n     *\r\n     * @method Phaser.Math.Vector4#normalize\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    normalize: function ()\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var len = x * x + y * y + z * z + w * w;\r\n\r\n        if (len > 0)\r\n        {\r\n            len = 1 / Math.sqrt(len);\r\n\r\n            this.x = x * len;\r\n            this.y = y * len;\r\n            this.z = z * len;\r\n            this.w = w * len;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the dot product of this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#dot\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to dot product with this Vector4.\r\n     *\r\n     * @return {number} The dot product of this Vector and the given Vector.\r\n     */\r\n    dot: function (v)\r\n    {\r\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n    },\r\n\r\n    /**\r\n     * Linearly interpolate between this Vector and the given Vector.\r\n     *\r\n     * Interpolates this Vector towards the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#lerp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Vector4} v - The Vector4 to interpolate towards.\r\n     * @param {number} [t=0] - The interpolation percentage, between 0 and 1.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    lerp: function (v, t)\r\n    {\r\n        if (t === undefined) { t = 0; }\r\n\r\n        var ax = this.x;\r\n        var ay = this.y;\r\n        var az = this.z;\r\n        var aw = this.w;\r\n\r\n        this.x = ax + t * (v.x - ax);\r\n        this.y = ay + t * (v.y - ay);\r\n        this.z = az + t * (v.z - az);\r\n        this.w = aw + t * (v.w - aw);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise multiplication between this Vector and the given Vector.\r\n     *\r\n     * Multiplies this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#multiply\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to multiply this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    multiply: function (v)\r\n    {\r\n        this.x *= v.x;\r\n        this.y *= v.y;\r\n        this.z *= v.z || 1;\r\n        this.w *= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Perform a component-wise division between this Vector and the given Vector.\r\n     *\r\n     * Divides this Vector by the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#divide\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to divide this Vector by.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    divide: function (v)\r\n    {\r\n        this.x /= v.x;\r\n        this.y /= v.y;\r\n        this.z /= v.z || 1;\r\n        this.w /= v.w || 1;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#distance\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector.\r\n     */\r\n    distance: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return Math.sqrt(dx * dx + dy * dy + dz * dz + dw * dw);\r\n    },\r\n\r\n    /**\r\n     * Calculate the distance between this Vector and the given Vector, squared.\r\n     *\r\n     * @method Phaser.Math.Vector4#distanceSq\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Math.Vector2|Phaser.Math.Vector3|Phaser.Math.Vector4)} v - The Vector to calculate the distance to.\r\n     *\r\n     * @return {number} The distance from this Vector to the given Vector, squared.\r\n     */\r\n    distanceSq: function (v)\r\n    {\r\n        var dx = v.x - this.x;\r\n        var dy = v.y - this.y;\r\n        var dz = v.z - this.z || 0;\r\n        var dw = v.w - this.w || 0;\r\n\r\n        return dx * dx + dy * dy + dz * dz + dw * dw;\r\n    },\r\n\r\n    /**\r\n     * Negate the `x`, `y`, `z` and `w` components of this Vector.\r\n     *\r\n     * @method Phaser.Math.Vector4#negate\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    negate: function ()\r\n    {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        this.z = -this.z;\r\n        this.w = -this.w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Matrix.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformMat4\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Matrix4} mat - The Matrix4 to transform this Vector4 with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformMat4: function (mat)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var w = this.w;\r\n        var m = mat.val;\r\n\r\n        this.x = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n        this.y = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n        this.z = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n        this.w = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Transform this Vector with the given Quaternion.\r\n     *\r\n     * @method Phaser.Math.Vector4#transformQuat\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Math.Quaternion} q - The Quaternion to transform this Vector with.\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    transformQuat: function (q)\r\n    {\r\n        // TODO: is this really the same as Vector3?\r\n        // Also, what about this: http://molecularmusings.wordpress.com/2013/05/24/a-faster-quaternion-vector-multiplication/\r\n        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n        var x = this.x;\r\n        var y = this.y;\r\n        var z = this.z;\r\n        var qx = q.x;\r\n        var qy = q.y;\r\n        var qz = q.z;\r\n        var qw = q.w;\r\n\r\n        // calculate quat * vec\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        // calculate result * inverse quat\r\n        this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Make this Vector the zero vector (0, 0, 0, 0).\r\n     *\r\n     * @method Phaser.Math.Vector4#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Math.Vector4} This Vector4.\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.z = 0;\r\n        this.w = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\n//  TODO: Check if these are required internally, if not, remove.\r\nVector4.prototype.sub = Vector4.prototype.subtract;\r\nVector4.prototype.mul = Vector4.prototype.multiply;\r\nVector4.prototype.div = Vector4.prototype.divide;\r\nVector4.prototype.dist = Vector4.prototype.distance;\r\nVector4.prototype.distSq = Vector4.prototype.distanceSq;\r\nVector4.prototype.len = Vector4.prototype.length;\r\nVector4.prototype.lenSq = Vector4.prototype.lengthSq;\r\n\r\nmodule.exports = Vector4;\r\n"]},"metadata":{},"sourceType":"script"}