{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetEaseFunction = require('./GetEaseFunction');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MATH_CONST = require('../../math/const');\n/**\r\n * Creates a Stagger function to be used by a Tween property.\r\n * \r\n * The stagger function will allow you to stagger changes to the value of the property across all targets of the tween.\r\n * \r\n * This is only worth using if the tween has multiple targets.\r\n * \r\n * The following will stagger the delay by 100ms across all targets of the tween, causing them to scale down to 0.2\r\n * over the duration specified:\r\n * \r\n * ```javascript\r\n * this.tweens.add({\r\n *     targets: [ ... ],\r\n *     scale: 0.2,\r\n *     ease: 'linear',\r\n *     duration: 1000,\r\n *     delay: this.tweens.stagger(100)\r\n * });\r\n * ```\r\n * \r\n * The following will stagger the delay by 500ms across all targets of the tween using a 10 x 6 grid, staggering\r\n * from the center out, using a cubic ease.\r\n * \r\n * ```javascript\r\n * this.tweens.add({\r\n *     targets: [ ... ],\r\n *     scale: 0.2,\r\n *     ease: 'linear',\r\n *     duration: 1000,\r\n *     delay: this.tweens.stagger(500, { grid: [ 10, 6 ], from: 'center', ease: 'cubic.out' })\r\n * });\r\n * ```\r\n *\r\n * @function Phaser.Tweens.Builders.StaggerBuilder\r\n * @since 3.19.0\r\n *\r\n * @param {(number|number[])} value - The amount to stagger by, or an array containing two elements representing the min and max values to stagger between.\r\n * @param {Phaser.Types.Tweens.StaggerConfig} [config] - A Stagger Configuration object.\r\n *\r\n * @return {function} The stagger function.\r\n */\n\n\nvar StaggerBuilder = function (value, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  var result;\n  var start = GetValue(options, 'start', 0);\n  var ease = GetValue(options, 'ease', null);\n  var grid = GetValue(options, 'grid', null);\n  var from = GetValue(options, 'from', 0);\n  var fromFirst = from === 'first';\n  var fromCenter = from === 'center';\n  var fromLast = from === 'last';\n  var fromValue = typeof from === 'number';\n  var isRange = Array.isArray(value);\n  var value1 = isRange ? parseFloat(value[0]) : parseFloat(value);\n  var value2 = isRange ? parseFloat(value[1]) : 0;\n  var maxValue = Math.max(value1, value2);\n\n  if (isRange) {\n    start += value1;\n  }\n\n  if (grid) {\n    //  Pre-calc the grid to save doing it for ever tweendata update\n    var gridWidth = grid[0];\n    var gridHeight = grid[1];\n    var fromX = 0;\n    var fromY = 0;\n    var distanceX = 0;\n    var distanceY = 0;\n    var gridValues = [];\n\n    if (fromLast) {\n      fromX = gridWidth - 1;\n      fromY = gridHeight - 1;\n    } else if (fromValue) {\n      fromX = from % gridWidth;\n      fromY = Math.floor(from / gridWidth);\n    } else if (fromCenter) {\n      fromX = (gridWidth - 1) / 2;\n      fromY = (gridHeight - 1) / 2;\n    }\n\n    var gridMax = MATH_CONST.MIN_SAFE_INTEGER;\n\n    for (var toY = 0; toY < gridHeight; toY++) {\n      gridValues[toY] = [];\n\n      for (var toX = 0; toX < gridWidth; toX++) {\n        distanceX = fromX - toX;\n        distanceY = fromY - toY;\n        var dist = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\n\n        if (dist > gridMax) {\n          gridMax = dist;\n        }\n\n        gridValues[toY][toX] = dist;\n      }\n    }\n  }\n\n  var easeFunction = ease ? GetEaseFunction(ease) : null;\n\n  if (grid) {\n    result = function (target, key, value, index) {\n      var gridSpace = 0;\n      var toX = index % gridWidth;\n      var toY = Math.floor(index / gridWidth);\n\n      if (toX >= 0 && toX < gridWidth && toY >= 0 && toY < gridHeight) {\n        gridSpace = gridValues[toY][toX];\n      }\n\n      var output;\n\n      if (isRange) {\n        var diff = value2 - value1;\n\n        if (easeFunction) {\n          output = gridSpace / gridMax * diff * easeFunction(gridSpace / gridMax);\n        } else {\n          output = gridSpace / gridMax * diff;\n        }\n      } else if (easeFunction) {\n        output = gridSpace * value1 * easeFunction(gridSpace / gridMax);\n      } else {\n        output = gridSpace * value1;\n      }\n\n      return output + start;\n    };\n  } else {\n    result = function (target, key, value, index, total) {\n      //  zero offset\n      total--;\n      var fromIndex;\n\n      if (fromFirst) {\n        fromIndex = index;\n      } else if (fromCenter) {\n        fromIndex = Math.abs(total / 2 - index);\n      } else if (fromLast) {\n        fromIndex = total - index;\n      } else if (fromValue) {\n        fromIndex = Math.abs(from - index);\n      }\n\n      var output;\n\n      if (isRange) {\n        var spacing;\n\n        if (fromCenter) {\n          spacing = (value2 - value1) / total * (fromIndex * 2);\n        } else {\n          spacing = (value2 - value1) / total * fromIndex;\n        }\n\n        if (easeFunction) {\n          output = spacing * easeFunction(fromIndex / total);\n        } else {\n          output = spacing;\n        }\n      } else if (easeFunction) {\n        output = total * maxValue * easeFunction(fromIndex / total);\n      } else {\n        output = fromIndex * value1;\n      }\n\n      return output + start;\n    };\n  }\n\n  return result;\n};\n\nmodule.exports = StaggerBuilder;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/builders/StaggerBuilder.js"],"names":["GetEaseFunction","require","GetValue","MATH_CONST","StaggerBuilder","value","options","undefined","result","start","ease","grid","from","fromFirst","fromCenter","fromLast","fromValue","isRange","Array","isArray","value1","parseFloat","value2","maxValue","Math","max","gridWidth","gridHeight","fromX","fromY","distanceX","distanceY","gridValues","floor","gridMax","MIN_SAFE_INTEGER","toY","toX","dist","sqrt","easeFunction","target","key","index","gridSpace","output","diff","total","fromIndex","abs","spacing","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetEaseFunction = require('./GetEaseFunction');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * Creates a Stagger function to be used by a Tween property.\r\n * \r\n * The stagger function will allow you to stagger changes to the value of the property across all targets of the tween.\r\n * \r\n * This is only worth using if the tween has multiple targets.\r\n * \r\n * The following will stagger the delay by 100ms across all targets of the tween, causing them to scale down to 0.2\r\n * over the duration specified:\r\n * \r\n * ```javascript\r\n * this.tweens.add({\r\n *     targets: [ ... ],\r\n *     scale: 0.2,\r\n *     ease: 'linear',\r\n *     duration: 1000,\r\n *     delay: this.tweens.stagger(100)\r\n * });\r\n * ```\r\n * \r\n * The following will stagger the delay by 500ms across all targets of the tween using a 10 x 6 grid, staggering\r\n * from the center out, using a cubic ease.\r\n * \r\n * ```javascript\r\n * this.tweens.add({\r\n *     targets: [ ... ],\r\n *     scale: 0.2,\r\n *     ease: 'linear',\r\n *     duration: 1000,\r\n *     delay: this.tweens.stagger(500, { grid: [ 10, 6 ], from: 'center', ease: 'cubic.out' })\r\n * });\r\n * ```\r\n *\r\n * @function Phaser.Tweens.Builders.StaggerBuilder\r\n * @since 3.19.0\r\n *\r\n * @param {(number|number[])} value - The amount to stagger by, or an array containing two elements representing the min and max values to stagger between.\r\n * @param {Phaser.Types.Tweens.StaggerConfig} [config] - A Stagger Configuration object.\r\n *\r\n * @return {function} The stagger function.\r\n */\r\nvar StaggerBuilder = function (value, options)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n\r\n    var result;\r\n\r\n    var start = GetValue(options, 'start', 0);\r\n    var ease = GetValue(options, 'ease', null);\r\n    var grid = GetValue(options, 'grid', null);\r\n\r\n    var from = GetValue(options, 'from', 0);\r\n\r\n    var fromFirst = (from === 'first');\r\n    var fromCenter = (from === 'center');\r\n    var fromLast = (from === 'last');\r\n    var fromValue = (typeof(from) === 'number');\r\n\r\n    var isRange = (Array.isArray(value));\r\n    var value1 = (isRange) ? parseFloat(value[0]) : parseFloat(value);\r\n    var value2 = (isRange) ? parseFloat(value[1]) : 0;\r\n    var maxValue = Math.max(value1, value2);\r\n\r\n    if (isRange)\r\n    {\r\n        start += value1;\r\n    }\r\n\r\n    if (grid)\r\n    {\r\n        //  Pre-calc the grid to save doing it for ever tweendata update\r\n        var gridWidth = grid[0];\r\n        var gridHeight = grid[1];\r\n\r\n        var fromX = 0;\r\n        var fromY = 0;\r\n\r\n        var distanceX = 0;\r\n        var distanceY = 0;\r\n\r\n        var gridValues = [];\r\n\r\n        if (fromLast)\r\n        {\r\n            fromX = gridWidth - 1;\r\n            fromY = gridHeight - 1;\r\n        }\r\n        else if (fromValue)\r\n        {\r\n            fromX = from % gridWidth;\r\n            fromY = Math.floor(from / gridWidth);\r\n        }\r\n        else if (fromCenter)\r\n        {\r\n            fromX = (gridWidth - 1) / 2;\r\n            fromY = (gridHeight - 1) / 2;\r\n        }\r\n\r\n        var gridMax = MATH_CONST.MIN_SAFE_INTEGER;\r\n\r\n        for (var toY = 0; toY < gridHeight; toY++)\r\n        {\r\n            gridValues[toY] = [];\r\n\r\n            for (var toX = 0; toX < gridWidth; toX++)\r\n            {\r\n                distanceX = fromX - toX;\r\n                distanceY = fromY - toY;\r\n\r\n                var dist = Math.sqrt(distanceX * distanceX + distanceY * distanceY);\r\n\r\n                if (dist > gridMax)\r\n                {\r\n                    gridMax = dist;\r\n                }\r\n\r\n                gridValues[toY][toX] = dist;\r\n            }\r\n        }\r\n    }\r\n\r\n    var easeFunction = (ease) ? GetEaseFunction(ease) : null;\r\n\r\n    if (grid)\r\n    {\r\n        result = function (target, key, value, index)\r\n        {\r\n            var gridSpace = 0;\r\n            var toX = index % gridWidth;\r\n            var toY = Math.floor(index / gridWidth);\r\n    \r\n            if (toX >= 0 && toX < gridWidth && toY >= 0 && toY < gridHeight)\r\n            {\r\n                gridSpace = gridValues[toY][toX];\r\n            }\r\n\r\n            var output;\r\n   \r\n            if (isRange)\r\n            {\r\n                var diff = (value2 - value1);\r\n    \r\n                if (easeFunction)\r\n                {\r\n                    output = ((gridSpace / gridMax) * diff) * easeFunction(gridSpace / gridMax);\r\n                }\r\n                else\r\n                {\r\n                    output = (gridSpace / gridMax) * diff;\r\n                }\r\n            }\r\n            else if (easeFunction)\r\n            {\r\n                output = (gridSpace * value1) * easeFunction(gridSpace / gridMax);\r\n            }\r\n            else\r\n            {\r\n                output = gridSpace * value1;\r\n            }\r\n\r\n            return output + start;\r\n        };\r\n    }\r\n    else\r\n    {\r\n        result = function (target, key, value, index, total)\r\n        {\r\n            //  zero offset\r\n            total--;\r\n    \r\n            var fromIndex;\r\n    \r\n            if (fromFirst)\r\n            {\r\n                fromIndex = index;\r\n            }\r\n            else if (fromCenter)\r\n            {\r\n                fromIndex = Math.abs((total / 2) - index);\r\n            }\r\n            else if (fromLast)\r\n            {\r\n                fromIndex = total - index;\r\n            }\r\n            else if (fromValue)\r\n            {\r\n                fromIndex = Math.abs(from - index);\r\n            }\r\n    \r\n            var output;\r\n        \r\n            if (isRange)\r\n            {\r\n                var spacing;\r\n\r\n                if (fromCenter)\r\n                {\r\n                    spacing = ((value2 - value1) / total) * (fromIndex * 2);\r\n                }\r\n                else\r\n                {\r\n                    spacing = ((value2 - value1) / total) * fromIndex;\r\n                }\r\n                    \r\n                if (easeFunction)\r\n                {\r\n                    output = spacing * easeFunction(fromIndex / total);\r\n                }\r\n                else\r\n                {\r\n                    output = spacing;\r\n                }\r\n            }\r\n            else if (easeFunction)\r\n            {\r\n                output = (total * maxValue) * easeFunction(fromIndex / total);\r\n            }\r\n            else\r\n            {\r\n                output = fromIndex * value1;\r\n            }\r\n    \r\n            return output + start;\r\n        };\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nmodule.exports = StaggerBuilder;\r\n"]},"metadata":{},"sourceType":"script"}