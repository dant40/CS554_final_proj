{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../../gameobjects/components');\n\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\n\nvar GameObject = require('../../gameobjects/GameObject');\n\nvar TilemapComponents = require('../components');\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\n\n\nvar DynamicTilemapLayer = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Alpha, Components.BlendMode, Components.ComputedSize, Components.Depth, Components.Flip, Components.GetBounds, Components.Origin, Components.Pipeline, Components.Transform, Components.Visible, Components.ScrollFactor, DynamicTilemapLayerRender],\n  initialize: function DynamicTilemapLayer(scene, tilemap, layerIndex, tileset, x, y) {\n    GameObject.call(this, scene, 'DynamicTilemapLayer');\n    /**\r\n     * Used internally by physics system to perform fast type checks.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.isTilemap = true;\n    /**\r\n     * The Tilemap that this layer is a part of.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n     * @type {Phaser.Tilemaps.Tilemap}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilemap = tilemap;\n    /**\r\n     * The index of the LayerData associated with this layer.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.layerIndex = layerIndex;\n    /**\r\n     * The LayerData associated with this layer. LayerData can only be associated with one\r\n     * tilemap layer.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n     * @type {Phaser.Tilemaps.LayerData}\r\n     * @since 3.0.0\r\n     */\n\n    this.layer = tilemap.layers[layerIndex]; // Link the LayerData with this static tilemap layer\n\n    this.layer.tilemapLayer = this;\n    /**\r\n     * The Tileset/s associated with this layer.\r\n     * \r\n     * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileset = [];\n    /**\r\n     * Used internally with the canvas render. This holds the tiles that are visible within the\r\n     * camera.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.culledTiles = [];\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n     * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\n\n    this.skipCull = false;\n    /**\r\n     * The total number of tiles drawn by the renderer in the last frame.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.tilesDrawn = 0;\n    /**\r\n     * The total number of tiles in this layer. Updated every frame.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.tilesTotal = this.layer.width * this.layer.height;\n    /**\r\n     * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\n\n    this.cullPaddingX = 1;\n    /**\r\n     * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n     *\r\n     * See the method `setCullPadding` for more details.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n     * @type {integer}\r\n     * @default 1\r\n     * @since 3.11.0\r\n     */\n\n    this.cullPaddingY = 1;\n    /**\r\n     * The callback that is invoked when the tiles are culled.\r\n     *\r\n     * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n     *\r\n     * It will be sent 3 arguments:\r\n     *\r\n     * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n     * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n     * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n     *\r\n     * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n     * @type {function}\r\n     * @since 3.11.0\r\n     */\n\n    this.cullCallback = TilemapComponents.CullTiles;\n    /**\r\n     * The rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * This can be changed via the `setRenderOrder` method.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n     * @type {integer}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.12.0\r\n     */\n\n    this._renderOrder = 0;\n    /**\r\n     * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n     *\r\n     * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.14.0\r\n     */\n\n    this.gidMap = [];\n    this.setTilesets(tileset);\n    this.setAlpha(this.layer.alpha);\n    this.setPosition(x, y);\n    this.setOrigin();\n    this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\n    this.initPipeline('TextureTintPipeline');\n  },\n\n  /**\r\n   * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n   * @private\r\n   * @since 3.14.0\r\n   * \r\n   * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n   */\n  setTilesets: function (tilesets) {\n    var gidMap = [];\n    var setList = [];\n    var map = this.tilemap;\n\n    if (!Array.isArray(tilesets)) {\n      tilesets = [tilesets];\n    }\n\n    for (var i = 0; i < tilesets.length; i++) {\n      var tileset = tilesets[i];\n\n      if (typeof tileset === 'string') {\n        tileset = map.getTileset(tileset);\n      }\n\n      if (tileset) {\n        setList.push(tileset);\n        var s = tileset.firstgid;\n\n        for (var t = 0; t < tileset.total; t++) {\n          gidMap[s + t] = tileset;\n        }\n      }\n    }\n\n    this.gidMap = gidMap;\n    this.tileset = setList;\n  },\n\n  /**\r\n   * Sets the rendering (draw) order of the tiles in this layer.\r\n   * \r\n   * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n   * drawing to the right and then moving down to the next row.\r\n   * \r\n   * The draw orders are:\r\n   * \r\n   * 0 = right-down\r\n   * 1 = left-down\r\n   * 2 = right-up\r\n   * 3 = left-up\r\n   * \r\n   * Setting the render order does not change the tiles or how they are stored in the layer,\r\n   * it purely impacts the order in which they are rendered.\r\n   * \r\n   * You can provide either an integer (0 to 3), or the string version of the order.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n   * @since 3.12.0\r\n   *\r\n   * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setRenderOrder: function (renderOrder) {\n    var orders = ['right-down', 'left-down', 'right-up', 'left-up'];\n\n    if (typeof renderOrder === 'string') {\n      renderOrder = orders.indexOf(renderOrder);\n    }\n\n    if (renderOrder >= 0 && renderOrder < 4) {\n      this._renderOrder = renderOrder;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n   * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n   * internally to optimize recalculating faces when only one tile has been changed.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate.\r\n   * @param {integer} tileY - The y coordinate.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesAt: function (tileX, tileY) {\n    TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n   * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n   * is mostly used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  calculateFacesWithin: function (tileX, tileY, width, height) {\n    TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n   * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n   * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n   * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n   * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n   * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n   * one-to-one mapping with the indexes array.\r\n   * @param {Phaser.Types.GameObjects.Sprite.SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n   * scene.make.sprite).\r\n   * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n   *\r\n   * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n   */\n  createFromTiles: function (indexes, replacements, spriteConfig, scene, camera) {\n    return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\n  },\n\n  /**\r\n   * Returns the tiles in the given layer that are within the cameras viewport.\r\n   * This is used internally.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  cull: function (camera) {\n    return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\n  },\n\n  /**\r\n   * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n   * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n   * information in the destination region.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n   * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n   * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n   * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces) {\n    TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n   * @since 3.0.0\r\n   * \r\n   * @param {boolean} [removeFromTilemap=true] - Remove this layer from the parent Tilemap?\r\n   */\n  destroy: function (removeFromTilemap) {\n    if (removeFromTilemap === undefined) {\n      removeFromTilemap = true;\n    }\n\n    if (!this.tilemap) {\n      //  Abort, we've already been destroyed\n      return;\n    } //  Uninstall this layer only if it is still installed on the LayerData object\n\n\n    if (this.layer.tilemapLayer === this) {\n      this.layer.tilemapLayer = undefined;\n    }\n\n    if (removeFromTilemap) {\n      this.tilemap.removeLayer(this);\n    }\n\n    this.tilemap = undefined;\n    this.layer = undefined;\n    this.culledTiles.length = 0;\n    this.cullCallback = null;\n    this.gidMap = [];\n    this.tileset = [];\n    GameObject.prototype.destroy.call(this);\n  },\n\n  /**\r\n   * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n   * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n   * Collision information in the region will be recalculated.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index to fill the area with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  fill: function (index, tileX, tileY, width, height, recalculateFaces) {\n    TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n   * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n   * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n   * filter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n   * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n   * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n   * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n   * the top-left.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} index - The tile index value to search for.\r\n   * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n   * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n   * bottom-right. Otherwise it scans from the top-left.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  findByIndex: function (findIndex, skip, reverse) {\n    return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\n  },\n\n  /**\r\n   * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n   * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n   * true. Similar to Array.prototype.find in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tile}\r\n   */\n  findTile: function (callback, context, tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n   * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n   * @since 3.0.0\r\n   *\r\n   * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n   * @param {object} [context] - The context under which the callback should be run.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions) {\n    TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Gets a tile at the given tile coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n   * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n   * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n   */\n  getTileAt: function (tileX, tileY, nonNull) {\n    return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\n  },\n\n  /**\r\n   * Gets a tile at the given world coordinates from the given layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - X position to get the tile from (given in pixels)\r\n   * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n   * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n   * were invalid.\r\n   */\n  getTileAtWorldXY: function (worldX, worldY, nonNull, camera) {\n    return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithin: function (tileX, tileY, width, height, filteringOptions) {\n    return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n   * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinShape: function (shape, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n   * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n   * @param {number} width - The width of the area.\r\n   * @param {number} height - The height of the area.\r\n   * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n   */\n  getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera) {\n    return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   *\r\n   * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n   */\n  hasTileAt: function (tileX, tileY) {\n    return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\n  },\n\n  /**\r\n   * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n   * false if there is no tile or if the tile at that location has an index of -1.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n   *\r\n   * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n   */\n  hasTileAtWorldXY: function (worldX, worldY, camera) {\n    return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\n  },\n\n  /**\r\n   * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n   * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n   * location. If you pass in an index, only the index at the specified location will be changed.\r\n   * Collision information will be recalculated at the specified location.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  putTileAt: function (tile, tileX, tileY, recalculateFaces) {\n    return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\n  },\n\n  /**\r\n   * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n   * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n   * specified location. If you pass in an index, only the index at the specified location will be\r\n   * changed. Collision information will be recalculated at the specified location.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera) {\n    return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\n  },\n\n  /**\r\n   * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n   * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n   * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n   * index at the specified location will be changed. Collision information will be recalculated\r\n   * within the region tiles were changed.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces) {\n    TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n   * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n   * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n   * indexes. This method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  randomize: function (tileX, tileY, width, height, indexes) {\n    TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces) {\n    return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\n  },\n\n  /**\r\n   * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n   * collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate, in pixels.\r\n   * @param {number} worldY - The y coordinate, in pixels.\r\n   * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n   * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n   */\n  removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera) {\n    return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\n  },\n\n  /**\r\n   * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n   * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n   * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n   * wherever you want on the screen.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n   * @param {Phaser.Types.Tilemaps.StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  renderDebug: function (graphics, styleConfig) {\n    TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n   * not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} findIndex - The index of the tile to search for.\r\n   * @param {integer} newIndex - The index of the tile to replace it with.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height) {\n    TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * You can control if the Cameras should cull tiles before rendering them or not.\r\n   * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n   *\r\n   * However, there are some instances when you may wish to disable this.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n   * @since 3.11.0\r\n   *\r\n   * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setSkipCull: function (value) {\n    if (value === undefined) {\n      value = true;\n    }\n\n    this.skipCull = value;\n    return this;\n  },\n\n  /**\r\n   * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n   * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n   * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n   * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n   * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n   * @since 3.11.0\r\n   *\r\n   * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n   * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n   *\r\n   * @return {this} This Tilemap Layer object.\r\n   */\n  setCullPadding: function (paddingX, paddingY) {\n    if (paddingX === undefined) {\n      paddingX = 1;\n    }\n\n    if (paddingY === undefined) {\n      paddingY = 1;\n    }\n\n    this.cullPaddingX = paddingX;\n    this.cullPaddingY = paddingY;\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n   * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n   * collision will be enabled (true) or disabled (false).\r\n   *\r\n   * If no layer specified, the map's current layer is used.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   * @param {boolean} [updateLayer=true] - If true, updates the current tiles on the layer. Set to\r\n   * false if no tiles have been placed for significant performance boost.\r\n   *\r\n   * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n   */\n  setCollision: function (indexes, collides, recalculateFaces, updateLayer) {\n    TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer, updateLayer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n   * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n   * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n   * enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} start - The first index of the tile to be set for collision.\r\n   * @param {integer} stop - The last index of the tile to be set for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionBetween: function (start, stop, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n   * that matches the given properties object, its collision flag will be set. The `collides`\r\n   * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n   * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n   * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n   * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n   * \"types\" property that matches any of those values, its collision flag will be updated.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByProperty: function (properties, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n   * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n   * disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionByExclusion: function (indexes, collides, recalculateFaces) {\n    TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n   * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n   * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n   * controls if collision will be enabled (true) or disabled (false).\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n   * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setCollisionFromCollisionGroup: function (collides, recalculateFaces) {\n    TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n   * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n   * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n   * at a specific location on the map then see setTileLocationCallback.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(integer|integer[])} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n   * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} callbackContext - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileIndexCallback: function (indexes, callback, callbackContext) {\n    TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n   * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n   * remove it.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {function} [callback] - The callback that will be invoked when the tile is collided with.\r\n   * @param {object} [callbackContext] - The context under which the callback is called.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext) {\n    TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n   * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n   * appear to have changed! This method only modifies tile indexes and does not change collision\r\n   * information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  shuffle: function (tileX, tileY, width, height) {\n    TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n   * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n   * information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileA - First tile index.\r\n   * @param {integer} tileB - Second tile index.\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  swapByIndex: function (indexA, indexB, tileX, tileY, width, height) {\n    TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldX: function (tileX, camera) {\n    return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  tileToWorldY: function (tileY, camera) {\n    return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n   * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  tileToWorldXY: function (tileX, tileY, point, camera) {\n    return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\n  },\n\n  /**\r\n   * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n   * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n   * weightedIndexes array. An example weighted array:\r\n   *\r\n   * [\r\n   *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n   *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n   *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n   *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n   * ]\r\n   *\r\n   * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n   * method only modifies tile indexes and does not change collision information.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n   * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n   * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n   * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n   * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n   * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n   *\r\n   * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n   */\n  weightedRandomize: function (tileX, tileY, width, height, weightedIndexes) {\n    TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\n    return this;\n  },\n\n  /**\r\n   * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileX: function (worldX, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {number}\r\n   */\n  worldToTileY: function (worldY, snapToFloor, camera) {\n    return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\n  },\n\n  /**\r\n   * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n   * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n   * `point` object.\r\n   *\r\n   * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n   * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n   * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n   * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n   * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n   *\r\n   * @return {Phaser.Math.Vector2}\r\n   */\n  worldToTileXY: function (worldX, worldY, snapToFloor, point, camera) {\n    return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\n  }\n});\nmodule.exports = DynamicTilemapLayer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayer.js"],"names":["Class","require","Components","DynamicTilemapLayerRender","GameObject","TilemapComponents","DynamicTilemapLayer","Extends","Mixins","Alpha","BlendMode","ComputedSize","Depth","Flip","GetBounds","Origin","Pipeline","Transform","Visible","ScrollFactor","initialize","scene","tilemap","layerIndex","tileset","x","y","call","isTilemap","layer","layers","tilemapLayer","culledTiles","skipCull","tilesDrawn","tilesTotal","width","height","cullPaddingX","cullPaddingY","cullCallback","CullTiles","_renderOrder","gidMap","setTilesets","setAlpha","alpha","setPosition","setOrigin","setSize","tileWidth","tileHeight","initPipeline","tilesets","setList","map","Array","isArray","i","length","getTileset","push","s","firstgid","t","total","setRenderOrder","renderOrder","orders","indexOf","calculateFacesAt","tileX","tileY","CalculateFacesAt","calculateFacesWithin","CalculateFacesWithin","createFromTiles","indexes","replacements","spriteConfig","camera","CreateFromTiles","cull","copy","srcTileX","srcTileY","destTileX","destTileY","recalculateFaces","Copy","destroy","removeFromTilemap","undefined","removeLayer","prototype","fill","index","Fill","filterTiles","callback","context","filteringOptions","FilterTiles","findByIndex","findIndex","skip","reverse","FindByIndex","findTile","FindTile","forEachTile","ForEachTile","getTileAt","nonNull","GetTileAt","getTileAtWorldXY","worldX","worldY","GetTileAtWorldXY","getTilesWithin","GetTilesWithin","getTilesWithinShape","shape","GetTilesWithinShape","getTilesWithinWorldXY","GetTilesWithinWorldXY","hasTileAt","HasTileAt","hasTileAtWorldXY","HasTileAtWorldXY","putTileAt","tile","PutTileAt","putTileAtWorldXY","PutTileAtWorldXY","putTilesAt","tilesArray","PutTilesAt","randomize","Randomize","removeTileAt","replaceWithNull","RemoveTileAt","removeTileAtWorldXY","RemoveTileAtWorldXY","renderDebug","graphics","styleConfig","RenderDebug","replaceByIndex","newIndex","ReplaceByIndex","setSkipCull","value","setCullPadding","paddingX","paddingY","setCollision","collides","updateLayer","SetCollision","setCollisionBetween","start","stop","SetCollisionBetween","setCollisionByProperty","properties","SetCollisionByProperty","setCollisionByExclusion","SetCollisionByExclusion","setCollisionFromCollisionGroup","SetCollisionFromCollisionGroup","setTileIndexCallback","callbackContext","SetTileIndexCallback","setTileLocationCallback","SetTileLocationCallback","shuffle","Shuffle","swapByIndex","indexA","indexB","SwapByIndex","tileToWorldX","TileToWorldX","tileToWorldY","TileToWorldY","tileToWorldXY","point","TileToWorldXY","weightedRandomize","weightedIndexes","WeightedRandomize","worldToTileX","snapToFloor","WorldToTileX","worldToTileY","WorldToTileY","worldToTileXY","WorldToTileXY","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar DynamicTilemapLayerRender = require('./DynamicTilemapLayerRender');\r\nvar GameObject = require('../../gameobjects/GameObject');\r\nvar TilemapComponents = require('../components');\r\n\r\n/**\r\n * @classdesc\r\n * A Dynamic Tilemap Layer is a Game Object that renders LayerData from a Tilemap when used in combination\r\n * with one, or more, Tilesets.\r\n *\r\n * A Dynamic Tilemap Layer trades some speed for being able to apply powerful effects. Unlike a\r\n * Static Tilemap Layer, you can apply per-tile effects like tint or alpha, and you can change the\r\n * tiles in a DynamicTilemapLayer.\r\n * \r\n * Use this over a Static Tilemap Layer when you need those features.\r\n *\r\n * @class DynamicTilemapLayer\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Alpha\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.ComputedSize\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.GetBounds\r\n * @extends Phaser.GameObjects.Components.Origin\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs.\r\n * @param {Phaser.Tilemaps.Tilemap} tilemap - The Tilemap this layer is a part of.\r\n * @param {integer} layerIndex - The index of the LayerData associated with this layer.\r\n * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n * @param {number} [x=0] - The world x position where the top left of this layer will be placed.\r\n * @param {number} [y=0] - The world y position where the top left of this layer will be placed.\r\n */\r\nvar DynamicTilemapLayer = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Alpha,\r\n        Components.BlendMode,\r\n        Components.ComputedSize,\r\n        Components.Depth,\r\n        Components.Flip,\r\n        Components.GetBounds,\r\n        Components.Origin,\r\n        Components.Pipeline,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Components.ScrollFactor,\r\n        DynamicTilemapLayerRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function DynamicTilemapLayer (scene, tilemap, layerIndex, tileset, x, y)\r\n    {\r\n        GameObject.call(this, scene, 'DynamicTilemapLayer');\r\n\r\n        /**\r\n         * Used internally by physics system to perform fast type checks.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#isTilemap\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.isTilemap = true;\r\n\r\n        /**\r\n         * The Tilemap that this layer is a part of.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilemap\r\n         * @type {Phaser.Tilemaps.Tilemap}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilemap = tilemap;\r\n\r\n        /**\r\n         * The index of the LayerData associated with this layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layerIndex\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.layerIndex = layerIndex;\r\n\r\n        /**\r\n         * The LayerData associated with this layer. LayerData can only be associated with one\r\n         * tilemap layer.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#layer\r\n         * @type {Phaser.Tilemaps.LayerData}\r\n         * @since 3.0.0\r\n         */\r\n        this.layer = tilemap.layers[layerIndex];\r\n\r\n        // Link the LayerData with this static tilemap layer\r\n        this.layer.tilemapLayer = this;\r\n\r\n        /**\r\n         * The Tileset/s associated with this layer.\r\n         * \r\n         * As of Phaser 3.14 this property is now an array of Tileset objects, previously it was a single reference.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tileset\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileset = [];\r\n\r\n        /**\r\n         * Used internally with the canvas render. This holds the tiles that are visible within the\r\n         * camera.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#culledTiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.culledTiles = [];\r\n\r\n        /**\r\n         * You can control if the Cameras should cull tiles before rendering them or not.\r\n         * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n         *\r\n         * However, there are some instances when you may wish to disable this, and toggling this flag allows\r\n         * you to do so. Also see `setSkipCull` for a chainable method that does the same thing.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#skipCull\r\n         * @type {boolean}\r\n         * @since 3.11.0\r\n         */\r\n        this.skipCull = false;\r\n\r\n        /**\r\n         * The total number of tiles drawn by the renderer in the last frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesDrawn\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesDrawn = 0;\r\n\r\n        /**\r\n         * The total number of tiles in this layer. Updated every frame.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#tilesTotal\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.tilesTotal = this.layer.width * this.layer.height;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its horizontal size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingX\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingX = 1;\r\n\r\n        /**\r\n         * The amount of extra tiles to add into the cull rectangle when calculating its vertical size.\r\n         *\r\n         * See the method `setCullPadding` for more details.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullPaddingY\r\n         * @type {integer}\r\n         * @default 1\r\n         * @since 3.11.0\r\n         */\r\n        this.cullPaddingY = 1;\r\n\r\n        /**\r\n         * The callback that is invoked when the tiles are culled.\r\n         *\r\n         * By default it will call `TilemapComponents.CullTiles` but you can override this to call any function you like.\r\n         *\r\n         * It will be sent 3 arguments:\r\n         *\r\n         * 1. The Phaser.Tilemaps.LayerData object for this Layer\r\n         * 2. The Camera that is culling the layer. You can check its `dirty` property to see if it has changed since the last cull.\r\n         * 3. A reference to the `culledTiles` array, which should be used to store the tiles you want rendered.\r\n         *\r\n         * See the `TilemapComponents.CullTiles` source code for details on implementing your own culling system.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#cullCallback\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.cullCallback = TilemapComponents.CullTiles;\r\n\r\n        /**\r\n         * The rendering (draw) order of the tiles in this layer.\r\n         * \r\n         * The default is 0 which is 'right-down', meaning it will draw the tiles starting from the top-left,\r\n         * drawing to the right and then moving down to the next row.\r\n         * \r\n         * The draw orders are:\r\n         * \r\n         * 0 = right-down\r\n         * 1 = left-down\r\n         * 2 = right-up\r\n         * 3 = left-up\r\n         * \r\n         * This can be changed via the `setRenderOrder` method.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#_renderOrder\r\n         * @type {integer}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.12.0\r\n         */\r\n        this._renderOrder = 0;\r\n\r\n        /**\r\n         * An array holding the mapping between the tile indexes and the tileset they belong to.\r\n         *\r\n         * @name Phaser.Tilemaps.DynamicTilemapLayer#gidMap\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.14.0\r\n         */\r\n        this.gidMap = [];\r\n\r\n        this.setTilesets(tileset);\r\n        this.setAlpha(this.layer.alpha);\r\n        this.setPosition(x, y);\r\n        this.setOrigin();\r\n        this.setSize(tilemap.tileWidth * this.layer.width, tilemap.tileHeight * this.layer.height);\r\n\r\n        this.initPipeline('TextureTintPipeline');\r\n    },\r\n\r\n    /**\r\n     * Populates the internal `tileset` array with the Tileset references this Layer requires for rendering.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTilesets\r\n     * @private\r\n     * @since 3.14.0\r\n     * \r\n     * @param {(string|string[]|Phaser.Tilemaps.Tileset|Phaser.Tilemaps.Tileset[])} tileset - The tileset, or an array of tilesets, used to render this layer. Can be a string or a Tileset object.\r\n     */\r\n    setTilesets: function (tilesets)\r\n    {\r\n        var gidMap = [];\r\n        var setList = [];\r\n        var map = this.tilemap;\r\n\r\n        if (!Array.isArray(tilesets))\r\n        {\r\n            tilesets = [ tilesets ];\r\n        }\r\n\r\n        for (var i = 0; i < tilesets.length; i++)\r\n        {\r\n            var tileset = tilesets[i];\r\n\r\n            if (typeof tileset === 'string')\r\n            {\r\n                tileset = map.getTileset(tileset);\r\n            }\r\n\r\n            if (tileset)\r\n            {\r\n                setList.push(tileset);\r\n\r\n                var s = tileset.firstgid;\r\n\r\n                for (var t = 0; t < tileset.total; t++)\r\n                {\r\n                    gidMap[s + t] = tileset;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.gidMap = gidMap;\r\n        this.tileset = setList;\r\n    },\r\n\r\n    /**\r\n     * Sets the rendering (draw) order of the tiles in this layer.\r\n     * \r\n     * The default is 'right-down', meaning it will order the tiles starting from the top-left,\r\n     * drawing to the right and then moving down to the next row.\r\n     * \r\n     * The draw orders are:\r\n     * \r\n     * 0 = right-down\r\n     * 1 = left-down\r\n     * 2 = right-up\r\n     * 3 = left-up\r\n     * \r\n     * Setting the render order does not change the tiles or how they are stored in the layer,\r\n     * it purely impacts the order in which they are rendered.\r\n     * \r\n     * You can provide either an integer (0 to 3), or the string version of the order.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setRenderOrder\r\n     * @since 3.12.0\r\n     *\r\n     * @param {(integer|string)} renderOrder - The render (draw) order value. Either an integer between 0 and 3, or a string: 'right-down', 'left-down', 'right-up' or 'left-up'.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setRenderOrder: function (renderOrder)\r\n    {\r\n        var orders = [ 'right-down', 'left-down', 'right-up', 'left-up' ];\r\n\r\n        if (typeof renderOrder === 'string')\r\n        {\r\n            renderOrder = orders.indexOf(renderOrder);\r\n        }\r\n\r\n        if (renderOrder >= 0 && renderOrder < 4)\r\n        {\r\n            this._renderOrder = renderOrder;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces at the given tile coordinates of the specified layer. Interesting\r\n     * faces are used internally for optimizing collisions against tiles. This method is mostly used\r\n     * internally to optimize recalculating faces when only one tile has been changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate.\r\n     * @param {integer} tileY - The y coordinate.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesAt: function (tileX, tileY)\r\n    {\r\n        TilemapComponents.CalculateFacesAt(tileX, tileY, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Calculates interesting faces within the rectangular area specified (in tile coordinates) of the\r\n     * layer. Interesting faces are used internally for optimizing collisions against tiles. This method\r\n     * is mostly used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#calculateFacesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    calculateFacesWithin: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.CalculateFacesWithin(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a Sprite for every object matching the given tile indexes in the layer. You can\r\n     * optionally specify if each tile will be replaced with a new tile after the Sprite has been\r\n     * created. This is useful if you want to lay down special tiles in a level that are converted to\r\n     * Sprites, but want to replace the tile itself with a floor tile or similar once converted.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#createFromTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - The tile index, or array of indexes, to create Sprites from.\r\n     * @param {(integer|array)} replacements - The tile index, or array of indexes, to change a converted\r\n     * tile to. Set to `null` to leave the tiles unchanged. If an array is given, it is assumed to be a\r\n     * one-to-one mapping with the indexes array.\r\n     * @param {Phaser.Types.GameObjects.Sprite.SpriteConfig} spriteConfig - The config object to pass into the Sprite creator (i.e.\r\n     * scene.make.sprite).\r\n     * @param {Phaser.Scene} [scene=scene the map is within] - The Scene to create the Sprites within.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when determining the world XY\r\n     *\r\n     * @return {Phaser.GameObjects.Sprite[]} An array of the Sprites that were created.\r\n     */\r\n    createFromTiles: function (indexes, replacements, spriteConfig, scene, camera)\r\n    {\r\n        return TilemapComponents.CreateFromTiles(indexes, replacements, spriteConfig, scene, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Returns the tiles in the given layer that are within the cameras viewport.\r\n     * This is used internally.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#cull\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera] - The Camera to run the cull check against.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    cull: function (camera)\r\n    {\r\n        return this.cullCallback(this.layer, camera, this.culledTiles, this._renderOrder);\r\n    },\r\n\r\n    /**\r\n     * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n     * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n     * information in the destination region.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#copy\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n     * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n     * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n     * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    copy: function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.Copy(srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Destroys this DynamicTilemapLayer and removes its link to the associated LayerData.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#destroy\r\n     * @since 3.0.0\r\n     * \r\n     * @param {boolean} [removeFromTilemap=true] - Remove this layer from the parent Tilemap?\r\n     */\r\n    destroy: function (removeFromTilemap)\r\n    {\r\n        if (removeFromTilemap === undefined) { removeFromTilemap = true; }\r\n\r\n        if (!this.tilemap)\r\n        {\r\n            //  Abort, we've already been destroyed\r\n            return;\r\n        }\r\n\r\n        //  Uninstall this layer only if it is still installed on the LayerData object\r\n        if (this.layer.tilemapLayer === this)\r\n        {\r\n            this.layer.tilemapLayer = undefined;\r\n        }\r\n\r\n        if (removeFromTilemap)\r\n        {\r\n            this.tilemap.removeLayer(this);\r\n        }\r\n\r\n        this.tilemap = undefined;\r\n        this.layer = undefined;\r\n        this.culledTiles.length = 0;\r\n        this.cullCallback = null;\r\n\r\n        this.gidMap = [];\r\n        this.tileset = [];\r\n\r\n        GameObject.prototype.destroy.call(this);\r\n    },\r\n\r\n    /**\r\n     * Sets the tiles in the given rectangular area (in tile coordinates) of the layer with the\r\n     * specified index. Tiles will be set to collide if the given index is a colliding index.\r\n     * Collision information in the region will be recalculated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#fill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index to fill the area with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    fill: function (index, tileX, tileY, width, height, recalculateFaces)\r\n    {\r\n        TilemapComponents.Fill(index, tileX, tileY, width, height, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * filter callback function. Any tiles that pass the filter test (i.e. where the callback returns\r\n     * true) will returned as a new array. Similar to Array.prototype.Filter in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#filterTiles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {function} callback - The callback. Each tile in the given area will be passed to this\r\n     * callback as the first and only parameter. The callback should return true for tiles that pass the\r\n     * filter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to filter.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    filterTiles: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FilterTiles(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n     * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n     * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n     * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n     * the top-left.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} index - The tile index value to search for.\r\n     * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n     * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n     * bottom-right. Otherwise it scans from the top-left.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    findByIndex: function (findIndex, skip, reverse)\r\n    {\r\n        return TilemapComponents.FindByIndex(findIndex, skip, reverse, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Find the first tile in the given rectangular area (in tile coordinates) of the layer that\r\n     * satisfies the provided testing function. I.e. finds the first tile for which `callback` returns\r\n     * true. Similar to Array.prototype.find in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#findTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {FindTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tile}\r\n     */\r\n    findTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.FindTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * For each tile in the given rectangular area (in tile coordinates) of the layer, run the given\r\n     * callback. Similar to Array.prototype.forEach in vanilla JS.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#forEachTile\r\n     * @since 3.0.0\r\n     *\r\n     * @param {EachTileCallback} callback - The callback. Each tile in the given area will be passed to this callback as the first and only parameter.\r\n     * @param {object} [context] - The context under which the callback should be run.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area to search.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    forEachTile: function (callback, context, tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        TilemapComponents.ForEachTile(callback, context, tileX, tileY, width, height, filteringOptions, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given tile coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n     * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n     * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates were invalid.\r\n     */\r\n    getTileAt: function (tileX, tileY, nonNull)\r\n    {\r\n        return TilemapComponents.GetTileAt(tileX, tileY, nonNull, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets a tile at the given world coordinates from the given layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - X position to get the tile from (given in pixels)\r\n     * @param {number} worldY - Y position to get the tile from (given in pixels)\r\n     * @param {boolean} [nonNull=false] - If true, function won't return null for empty tiles, but a Tile object with an index of -1.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n     * were invalid.\r\n     */\r\n    getTileAtWorldXY: function (worldX, worldY, nonNull, camera)\r\n    {\r\n        return TilemapComponents.GetTileAtWorldXY(worldX, worldY, nonNull, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in tile coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithin\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithin: function (tileX, tileY, width, height, filteringOptions)\r\n    {\r\n        return TilemapComponents.GetTilesWithin(tileX, tileY, width, height, filteringOptions, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n     * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinShape: function (shape, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinShape(shape, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Gets the tiles in the given rectangular area (in world coordinates) of the layer.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#getTilesWithinWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The world x coordinate for the top-left of the area.\r\n     * @param {number} worldY - The world y coordinate for the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {Phaser.Types.Tilemaps.FilteringOptions} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile[]} An array of Tile objects.\r\n     */\r\n    getTilesWithinWorldXY: function (worldX, worldY, width, height, filteringOptions, camera)\r\n    {\r\n        return TilemapComponents.GetTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in tile coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAt: function (tileX, tileY)\r\n    {\r\n        return TilemapComponents.HasTileAt(tileX, tileY, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Checks if there is a tile at the given location (in world coordinates) in the given layer. Returns\r\n     * false if there is no tile or if the tile at that location has an index of -1.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#hasTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when factoring in which tiles to return.\r\n     *\r\n     * @return {boolean} `true` if a tile was found at the given location, otherwise `false`.\r\n     */\r\n    hasTileAtWorldXY: function (worldX, worldY, camera)\r\n    {\r\n        return TilemapComponents.HasTileAtWorldXY(worldX, worldY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given tile coordinates in the specified layer. You can pass in either an index\r\n     * or a Tile object. If you pass in a Tile, all attributes will be copied over to the specified\r\n     * location. If you pass in an index, only the index at the specified location will be changed.\r\n     * Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAt: function (tile, tileX, tileY, recalculateFaces)\r\n    {\r\n        return TilemapComponents.PutTileAt(tile, tileX, tileY, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts a tile at the given world coordinates (pixels) in the specified layer. You can pass in either\r\n     * an index or a Tile object. If you pass in a Tile, all attributes will be copied over to the\r\n     * specified location. If you pass in an index, only the index at the specified location will be\r\n     * changed. Collision information will be recalculated at the specified location.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|Phaser.Tilemaps.Tile)} tile - The index of this tile to set or a Tile object.\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    putTileAtWorldXY: function (tile, worldX, worldY, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.PutTileAtWorldXY(tile, worldX, worldY, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Puts an array of tiles or a 2D array of tiles at the given tile coordinates in the specified\r\n     * layer. The array can be composed of either tile indexes or Tile objects. If you pass in a Tile,\r\n     * all attributes will be copied over to the specified location. If you pass in an index, only the\r\n     * index at the specified location will be changed. Collision information will be recalculated\r\n     * within the region tiles were changed.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#putTilesAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer[]|integer[][]|Phaser.Tilemaps.Tile[]|Phaser.Tilemaps.Tile[][])} tile - A row (array) or grid (2D array) of Tiles or tile indexes to place.\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    putTilesAt: function (tilesArray, tileX, tileY, recalculateFaces)\r\n    {\r\n        TilemapComponents.PutTilesAt(tilesArray, tileX, tileY, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. If an array of indexes is passed in, then\r\n     * those will be used for randomly assigning new tile indexes. If an array is not provided, the\r\n     * indexes found within the region (excluding -1) will be used for randomly assigning new tile\r\n     * indexes. This method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#randomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {integer[]} [indexes] - An array of indexes to randomly draw from during randomization.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    randomize: function (tileX, tileY, width, height, indexes)\r\n    {\r\n        TilemapComponents.Randomize(tileX, tileY, width, height, indexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAt: function (tileX, tileY, replaceWithNull, recalculateFaces)\r\n    {\r\n        return TilemapComponents.RemoveTileAt(tileX, tileY, replaceWithNull, recalculateFaces, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Removes the tile at the given world coordinates in the specified layer and updates the layer's\r\n     * collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#removeTileAtWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate, in pixels.\r\n     * @param {number} worldY - The y coordinate, in pixels.\r\n     * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n     * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Tilemaps.Tile} A Tile object.\r\n     */\r\n    removeTileAtWorldXY: function (worldX, worldY, replaceWithNull, recalculateFaces, camera)\r\n    {\r\n        return TilemapComponents.RemoveTileAtWorldXY(worldX, worldY, replaceWithNull, recalculateFaces, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n     * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n     * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n     * wherever you want on the screen.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#renderDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n     * @param {Phaser.Types.Tilemaps.StyleConfig} styleConfig - An object specifying the colors to use for the debug drawing.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    renderDebug: function (graphics, styleConfig)\r\n    {\r\n        TilemapComponents.RenderDebug(graphics, styleConfig, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `findIndex` and updates their index to match `newIndex`. This only modifies the index and does\r\n     * not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#replaceByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} findIndex - The index of the tile to search for.\r\n     * @param {integer} newIndex - The index of the tile to replace it with.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    replaceByIndex: function (findIndex, newIndex, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.ReplaceByIndex(findIndex, newIndex, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * You can control if the Cameras should cull tiles before rendering them or not.\r\n     * By default the camera will try to cull the tiles in this layer, to avoid over-drawing to the renderer.\r\n     *\r\n     * However, there are some instances when you may wish to disable this.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setSkipCull\r\n     * @since 3.11.0\r\n     *\r\n     * @param {boolean} [value=true] - Set to `true` to stop culling tiles. Set to `false` to enable culling again.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setSkipCull: function (value)\r\n    {\r\n        if (value === undefined) { value = true; }\r\n\r\n        this.skipCull = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * When a Camera culls the tiles in this layer it does so using its view into the world, building up a\r\n     * rectangle inside which the tiles must exist or they will be culled. Sometimes you may need to expand the size\r\n     * of this 'cull rectangle', especially if you plan on rotating the Camera viewing the layer. Do so\r\n     * by providing the padding values. The values given are in tiles, not pixels. So if the tile width was 32px\r\n     * and you set `paddingX` to be 4, it would add 32px x 4 to the cull rectangle (adjusted for scale)\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCullPadding\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} [paddingX=1] - The amount of extra horizontal tiles to add to the cull check padding.\r\n     * @param {integer} [paddingY=1] - The amount of extra vertical tiles to add to the cull check padding.\r\n     *\r\n     * @return {this} This Tilemap Layer object.\r\n     */\r\n    setCullPadding: function (paddingX, paddingY)\r\n    {\r\n        if (paddingX === undefined) { paddingX = 1; }\r\n        if (paddingY === undefined) { paddingY = 1; }\r\n\r\n        this.cullPaddingX = paddingX;\r\n        this.cullPaddingY = paddingY;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the given tile or tiles within a layer by index. You can pass in either a\r\n     * single numeric index or an array of indexes: [2, 3, 15, 20]. The `collides` parameter controls if\r\n     * collision will be enabled (true) or disabled (false).\r\n     *\r\n     * If no layer specified, the map's current layer is used.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollision\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|array)} indexes - Either a single tile index, or an array of tile indexes.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     * @param {boolean} [updateLayer=true] - If true, updates the current tiles on the layer. Set to\r\n     * false if no tiles have been placed for significant performance boost.\r\n     *\r\n     * @return {?Phaser.Tilemaps.Tilemap} Return this Tilemap object, or null if the layer given was invalid.\r\n     */\r\n    setCollision: function (indexes, collides, recalculateFaces, updateLayer)\r\n    {\r\n        TilemapComponents.SetCollision(indexes, collides, recalculateFaces, this.layer, updateLayer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n     * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n     * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n     * enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} start - The first index of the tile to be set for collision.\r\n     * @param {integer} stop - The last index of the tile to be set for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionBetween: function (start, stop, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionBetween(start, stop, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n     * that matches the given properties object, its collision flag will be set. The `collides`\r\n     * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n     * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n     * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n     * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n     * \"types\" property that matches any of those values, its collision flag will be updated.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByProperty\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByProperty: function (properties, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByProperty(properties, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n     * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n     * disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionByExclusion\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionByExclusion: function (indexes, collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionByExclusion(indexes, collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets collision on the tiles within a layer by checking each tiles collision group data\r\n     * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n     * a tiles collision group, the tile's colliding information will be set. The `collides` parameter\r\n     * controls if collision will be enabled (true) or disabled (false).\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setCollisionFromCollisionGroup\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n     * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setCollisionFromCollisionGroup: function (collides, recalculateFaces)\r\n    {\r\n        TilemapComponents.SetCollisionFromCollisionGroup(collides, recalculateFaces, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a global collision callback for the given tile index within the layer. This will affect all\r\n     * tiles on this layer that have the same index. If a callback is already set for the tile index it\r\n     * will be replaced. Set the callback to null to remove it. If you want to set a callback for a tile\r\n     * at a specific location on the map then see setTileLocationCallback.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileIndexCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(integer|integer[])} indexes - Either a single tile index, or an array of tile indexes to have a collision callback set for.\r\n     * @param {function} callback - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} callbackContext - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileIndexCallback: function (indexes, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileIndexCallback(indexes, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a collision callback for the given rectangular area (in tile coordinates) within the layer.\r\n     * If a callback is already set for the tile index it will be replaced. Set the callback to null to\r\n     * remove it.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#setTileLocationCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {function} [callback] - The callback that will be invoked when the tile is collided with.\r\n     * @param {object} [callbackContext] - The context under which the callback is called.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    setTileLocationCallback: function (tileX, tileY, width, height, callback, callbackContext)\r\n    {\r\n        TilemapComponents.SetTileLocationCallback(tileX, tileY, width, height, callback, callbackContext, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Shuffles the tiles in a rectangular region (specified in tile coordinates) within the given\r\n     * layer. It will only randomize the tiles in that area, so if they're all the same nothing will\r\n     * appear to have changed! This method only modifies tile indexes and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#shuffle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    shuffle: function (tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.Shuffle(tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scans the given rectangular area (given in tile coordinates) for tiles with an index matching\r\n     * `indexA` and swaps then with `indexB`. This only modifies the index and does not change collision\r\n     * information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#swapByIndex\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileA - First tile index.\r\n     * @param {integer} tileB - Second tile index.\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    swapByIndex: function (indexA, indexB, tileX, tileY, width, height)\r\n    {\r\n        TilemapComponents.SwapByIndex(indexA, indexB, tileX, tileY, width, height, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from tile X coordinates (tile units) to world X coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldX: function (tileX, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldX(tileX, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile Y coordinates (tile units) to world Y coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    tileToWorldY: function (tileY, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldY(tileY, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from tile XY coordinates (tile units) to world XY coordinates (pixels), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#tileToWorldXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} tileX - The x coordinate, in tiles, not pixels.\r\n     * @param {integer} tileY - The y coordinate, in tiles, not pixels.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    tileToWorldXY: function (tileX, tileY, point, camera)\r\n    {\r\n        return TilemapComponents.TileToWorldXY(tileX, tileY, point, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Randomizes the indexes of a rectangular region of tiles (in tile coordinates) within the\r\n     * specified layer. Each tile will receive a new index. New indexes are drawn from the given\r\n     * weightedIndexes array. An example weighted array:\r\n     *\r\n     * [\r\n     *  { index: 6, weight: 4 },    // Probability of index 6 is 4 / 8\r\n     *  { index: 7, weight: 2 },    // Probability of index 7 would be 2 / 8\r\n     *  { index: 8, weight: 1.5 },  // Probability of index 8 would be 1.5 / 8\r\n     *  { index: 26, weight: 0.5 }  // Probability of index 27 would be 0.5 / 8\r\n     * ]\r\n     *\r\n     * The probability of any index being choose is (the index's weight) / (sum of all weights). This\r\n     * method only modifies tile indexes and does not change collision information.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#weightedRandomize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [tileX=0] - The left most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [tileY=0] - The top most tile index (in tile coordinates) to use as the origin of the area.\r\n     * @param {integer} [width=max width based on tileX] - How many tiles wide from the `tileX` index the area will be.\r\n     * @param {integer} [height=max height based on tileY] - How many tiles tall from the `tileY` index the area will be.\r\n     * @param {object[]} [weightedIndexes] - An array of objects to randomly draw from during\r\n     * randomization. They should be in the form: { index: 0, weight: 4 } or\r\n     * { index: [0, 1], weight: 4 } if you wish to draw from multiple tile indexes.\r\n     *\r\n     * @return {Phaser.Tilemaps.DynamicTilemapLayer} This Tilemap Layer object.\r\n     */\r\n    weightedRandomize: function (tileX, tileY, width, height, weightedIndexes)\r\n    {\r\n        TilemapComponents.WeightedRandomize(tileX, tileY, width, height, weightedIndexes, this.layer);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Converts from world X coordinates (pixels) to tile X coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileX: function (worldX, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileX(worldX, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world Y coordinates (pixels) to tile Y coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {number}\r\n     */\r\n    worldToTileY: function (worldY, snapToFloor, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileY(worldY, snapToFloor, camera, this.layer);\r\n    },\r\n\r\n    /**\r\n     * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n     * layers position, scale and scroll. This will return a new Vector2 object or update the given\r\n     * `point` object.\r\n     *\r\n     * @method Phaser.Tilemaps.DynamicTilemapLayer#worldToTileXY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n     * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n     * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n     * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n     * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n     *\r\n     * @return {Phaser.Math.Vector2}\r\n     */\r\n    worldToTileXY: function (worldX, worldY, snapToFloor, point, camera)\r\n    {\r\n        return TilemapComponents.WorldToTileXY(worldX, worldY, snapToFloor, point, camera, this.layer);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = DynamicTilemapLayer;\r\n"]},"metadata":{},"sourceType":"script"}