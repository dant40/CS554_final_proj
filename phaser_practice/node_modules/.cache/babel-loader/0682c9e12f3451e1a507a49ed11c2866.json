{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar WorldToTileX = require('./WorldToTileX');\n\nvar WorldToTileY = require('./WorldToTileY');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n * layer's position, scale and scroll. This will return a new Vector2 object or update the given\r\n * `point` object.\r\n *\r\n * @function Phaser.Tilemaps.Components.WorldToTileXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Math.Vector2} The XY location in tile units.\r\n */\n\n\nvar WorldToTileXY = function (worldX, worldY, snapToFloor, point, camera, layer) {\n  if (point === undefined) {\n    point = new Vector2(0, 0);\n  }\n\n  point.x = WorldToTileX(worldX, snapToFloor, camera, layer);\n  point.y = WorldToTileY(worldY, snapToFloor, camera, layer);\n  return point;\n};\n\nmodule.exports = WorldToTileXY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/WorldToTileXY.js"],"names":["WorldToTileX","require","WorldToTileY","Vector2","WorldToTileXY","worldX","worldY","snapToFloor","point","camera","layer","undefined","x","y","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,oBAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIG,aAAa,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,WAA1B,EAAuCC,KAAvC,EAA8CC,MAA9C,EAAsDC,KAAtD,EACpB;AACI,MAAIF,KAAK,KAAKG,SAAd,EAAyB;AAAEH,IAAAA,KAAK,GAAG,IAAIL,OAAJ,CAAY,CAAZ,EAAe,CAAf,CAAR;AAA4B;;AAEvDK,EAAAA,KAAK,CAACI,CAAN,GAAUZ,YAAY,CAACK,MAAD,EAASE,WAAT,EAAsBE,MAAtB,EAA8BC,KAA9B,CAAtB;AACAF,EAAAA,KAAK,CAACK,CAAN,GAAUX,YAAY,CAACI,MAAD,EAASC,WAAT,EAAsBE,MAAtB,EAA8BC,KAA9B,CAAtB;AAEA,SAAOF,KAAP;AACH,CARD;;AAUAM,MAAM,CAACC,OAAP,GAAiBX,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Converts from world XY coordinates (pixels) to tile XY coordinates (tile units), factoring in the\r\n * layer's position, scale and scroll. This will return a new Vector2 object or update the given\r\n * `point` object.\r\n *\r\n * @function Phaser.Tilemaps.Components.WorldToTileXY\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {number} worldX - The x coordinate to be converted, in pixels, not tiles.\r\n * @param {number} worldY - The y coordinate to be converted, in pixels, not tiles.\r\n * @param {boolean} [snapToFloor=true] - Whether or not to round the tile coordinate down to the nearest integer.\r\n * @param {Phaser.Math.Vector2} [point] - A Vector2 to store the coordinates in. If not given a new Vector2 is created.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Math.Vector2} The XY location in tile units.\r\n */\r\nvar WorldToTileXY = function (worldX, worldY, snapToFloor, point, camera, layer)\r\n{\r\n    if (point === undefined) { point = new Vector2(0, 0); }\r\n\r\n    point.x = WorldToTileX(worldX, snapToFloor, camera, layer);\r\n    point.y = WorldToTileY(worldY, snapToFloor, camera, layer);\r\n\r\n    return point;\r\n};\r\n\r\nmodule.exports = WorldToTileXY;\r\n"]},"metadata":{},"sourceType":"script"}