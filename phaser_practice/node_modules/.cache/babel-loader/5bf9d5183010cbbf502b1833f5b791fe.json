{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Determines the operating system of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.os` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.OS\r\n * @since 3.0.0\r\n *\r\n * @property {boolean} android - Is running on android?\r\n * @property {boolean} chromeOS - Is running on chromeOS?\r\n * @property {boolean} cordova - Is the game running under Apache Cordova?\r\n * @property {boolean} crosswalk - Is the game running under the Intel Crosswalk XDK?\r\n * @property {boolean} desktop - Is running on a desktop?\r\n * @property {boolean} ejecta - Is the game running under Ejecta?\r\n * @property {boolean} electron - Is the game running under GitHub Electron?\r\n * @property {boolean} iOS - Is running on iOS?\r\n * @property {boolean} iPad - Is running on iPad?\r\n * @property {boolean} iPhone - Is running on iPhone?\r\n * @property {boolean} kindle - Is running on an Amazon Kindle?\r\n * @property {boolean} linux - Is running on linux?\r\n * @property {boolean} macOS - Is running on macOS?\r\n * @property {boolean} node - Is the game running under Node.js?\r\n * @property {boolean} nodeWebkit - Is the game running under Node-Webkit?\r\n * @property {boolean} webApp - Set to true if running as a WebApp, i.e. within a WebView\r\n * @property {boolean} windows - Is running on windows?\r\n * @property {boolean} windowsPhone - Is running on a Windows Phone?\r\n * @property {number} iOSVersion - If running in iOS this will contain the major version number.\r\n * @property {number} pixelRatio - PixelRatio of the host device?\r\n */\nvar OS = {\n  android: false,\n  chromeOS: false,\n  cordova: false,\n  crosswalk: false,\n  desktop: false,\n  ejecta: false,\n  electron: false,\n  iOS: false,\n  iOSVersion: 0,\n  iPad: false,\n  iPhone: false,\n  kindle: false,\n  linux: false,\n  macOS: false,\n  node: false,\n  nodeWebkit: false,\n  pixelRatio: 1,\n  webApp: false,\n  windows: false,\n  windowsPhone: false\n};\n\nfunction init() {\n  var ua = navigator.userAgent;\n\n  if (/Windows/.test(ua)) {\n    OS.windows = true;\n  } else if (/Mac OS/.test(ua) && !/like Mac OS/.test(ua)) {\n    OS.macOS = true;\n  } else if (/Android/.test(ua)) {\n    OS.android = true;\n  } else if (/Linux/.test(ua)) {\n    OS.linux = true;\n  } else if (/iP[ao]d|iPhone/i.test(ua)) {\n    OS.iOS = true;\n    navigator.appVersion.match(/OS (\\d+)/);\n    OS.iOSVersion = parseInt(RegExp.$1, 10);\n    OS.iPhone = ua.toLowerCase().indexOf('iphone') !== -1;\n    OS.iPad = ua.toLowerCase().indexOf('ipad') !== -1;\n  } else if (/Kindle/.test(ua) || /\\bKF[A-Z][A-Z]+/.test(ua) || /Silk.*Mobile Safari/.test(ua)) {\n    OS.kindle = true; // This will NOT detect early generations of Kindle Fire, I think there is no reliable way...\n    // E.g. \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\n  } else if (/CrOS/.test(ua)) {\n    OS.chromeOS = true;\n  }\n\n  if (/Windows Phone/i.test(ua) || /IEMobile/i.test(ua)) {\n    OS.android = false;\n    OS.iOS = false;\n    OS.macOS = false;\n    OS.windows = true;\n    OS.windowsPhone = true;\n  }\n\n  var silk = /Silk/.test(ua);\n\n  if (OS.windows || OS.macOS || OS.linux && !silk || OS.chromeOS) {\n    OS.desktop = true;\n  } //  Windows Phone / Table reset\n\n\n  if (OS.windowsPhone || /Windows NT/i.test(ua) && /Touch/i.test(ua)) {\n    OS.desktop = false;\n  } //  WebApp mode in iOS\n\n\n  if (navigator.standalone) {\n    OS.webApp = true;\n  }\n\n  if (window.cordova !== undefined) {\n    OS.cordova = true;\n  }\n\n  if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n    OS.node = true;\n  }\n\n  if (OS.node && typeof process.versions === 'object') {\n    OS.nodeWebkit = !!process.versions['node-webkit'];\n    OS.electron = !!process.versions.electron;\n  }\n\n  if (window.ejecta !== undefined) {\n    OS.ejecta = true;\n  }\n\n  if (/Crosswalk/.test(ua)) {\n    OS.crosswalk = true;\n  }\n\n  OS.pixelRatio = window['devicePixelRatio'] || 1;\n  return OS;\n}\n\nmodule.exports = init();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/device/OS.js"],"names":["OS","android","chromeOS","cordova","crosswalk","desktop","ejecta","electron","iOS","iOSVersion","iPad","iPhone","kindle","linux","macOS","node","nodeWebkit","pixelRatio","webApp","windows","windowsPhone","init","ua","navigator","userAgent","test","appVersion","match","parseInt","RegExp","$1","toLowerCase","indexOf","silk","standalone","window","undefined","process","versions","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Determines the operating system of the device running this Phaser Game instance.\r\n * These values are read-only and populated during the boot sequence of the game.\r\n * They are then referenced by internal game systems and are available for you to access\r\n * via `this.sys.game.device.os` from within any Scene.\r\n *\r\n * @typedef {object} Phaser.Device.OS\r\n * @since 3.0.0\r\n *\r\n * @property {boolean} android - Is running on android?\r\n * @property {boolean} chromeOS - Is running on chromeOS?\r\n * @property {boolean} cordova - Is the game running under Apache Cordova?\r\n * @property {boolean} crosswalk - Is the game running under the Intel Crosswalk XDK?\r\n * @property {boolean} desktop - Is running on a desktop?\r\n * @property {boolean} ejecta - Is the game running under Ejecta?\r\n * @property {boolean} electron - Is the game running under GitHub Electron?\r\n * @property {boolean} iOS - Is running on iOS?\r\n * @property {boolean} iPad - Is running on iPad?\r\n * @property {boolean} iPhone - Is running on iPhone?\r\n * @property {boolean} kindle - Is running on an Amazon Kindle?\r\n * @property {boolean} linux - Is running on linux?\r\n * @property {boolean} macOS - Is running on macOS?\r\n * @property {boolean} node - Is the game running under Node.js?\r\n * @property {boolean} nodeWebkit - Is the game running under Node-Webkit?\r\n * @property {boolean} webApp - Set to true if running as a WebApp, i.e. within a WebView\r\n * @property {boolean} windows - Is running on windows?\r\n * @property {boolean} windowsPhone - Is running on a Windows Phone?\r\n * @property {number} iOSVersion - If running in iOS this will contain the major version number.\r\n * @property {number} pixelRatio - PixelRatio of the host device?\r\n */\r\nvar OS = {\r\n\r\n    android: false,\r\n    chromeOS: false,\r\n    cordova: false,\r\n    crosswalk: false,\r\n    desktop: false,\r\n    ejecta: false,\r\n    electron: false,\r\n    iOS: false,\r\n    iOSVersion: 0,\r\n    iPad: false,\r\n    iPhone: false,\r\n    kindle: false,\r\n    linux: false,\r\n    macOS: false,\r\n    node: false,\r\n    nodeWebkit: false,\r\n    pixelRatio: 1,\r\n    webApp: false,\r\n    windows: false,\r\n    windowsPhone: false\r\n\r\n};\r\n\r\nfunction init ()\r\n{\r\n    var ua = navigator.userAgent;\r\n\r\n    if (/Windows/.test(ua))\r\n    {\r\n        OS.windows = true;\r\n    }\r\n    else if (/Mac OS/.test(ua) && !(/like Mac OS/.test(ua)))\r\n    {\r\n        OS.macOS = true;\r\n    }\r\n    else if (/Android/.test(ua))\r\n    {\r\n        OS.android = true;\r\n    }\r\n    else if (/Linux/.test(ua))\r\n    {\r\n        OS.linux = true;\r\n    }\r\n    else if (/iP[ao]d|iPhone/i.test(ua))\r\n    {\r\n        OS.iOS = true;\r\n\r\n        (navigator.appVersion).match(/OS (\\d+)/);\r\n\r\n        OS.iOSVersion = parseInt(RegExp.$1, 10);\r\n\r\n        OS.iPhone = ua.toLowerCase().indexOf('iphone') !== -1;\r\n        OS.iPad = ua.toLowerCase().indexOf('ipad') !== -1;\r\n    }\r\n    else if (/Kindle/.test(ua) || (/\\bKF[A-Z][A-Z]+/).test(ua) || (/Silk.*Mobile Safari/).test(ua))\r\n    {\r\n        OS.kindle = true;\r\n\r\n        // This will NOT detect early generations of Kindle Fire, I think there is no reliable way...\r\n        // E.g. \"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-us; Silk/1.1.0-80) AppleWebKit/533.16 (KHTML, like Gecko) Version/5.0 Safari/533.16 Silk-Accelerated=true\"\r\n    }\r\n    else if (/CrOS/.test(ua))\r\n    {\r\n        OS.chromeOS = true;\r\n    }\r\n\r\n    if (/Windows Phone/i.test(ua) || (/IEMobile/i).test(ua))\r\n    {\r\n        OS.android = false;\r\n        OS.iOS = false;\r\n        OS.macOS = false;\r\n        OS.windows = true;\r\n        OS.windowsPhone = true;\r\n    }\r\n\r\n    var silk = (/Silk/).test(ua);\r\n\r\n    if (OS.windows || OS.macOS || (OS.linux && !silk) || OS.chromeOS)\r\n    {\r\n        OS.desktop = true;\r\n    }\r\n\r\n    //  Windows Phone / Table reset\r\n    if (OS.windowsPhone || ((/Windows NT/i.test(ua)) && (/Touch/i.test(ua))))\r\n    {\r\n        OS.desktop = false;\r\n    }\r\n\r\n    //  WebApp mode in iOS\r\n    if (navigator.standalone)\r\n    {\r\n        OS.webApp = true;\r\n    }\r\n\r\n    if (window.cordova !== undefined)\r\n    {\r\n        OS.cordova = true;\r\n    }\r\n\r\n    if (typeof process !== 'undefined' && process.versions && process.versions.node)\r\n    {\r\n        OS.node = true;\r\n    }\r\n\r\n    if (OS.node && typeof process.versions === 'object')\r\n    {\r\n        OS.nodeWebkit = !!process.versions['node-webkit'];\r\n\r\n        OS.electron = !!process.versions.electron;\r\n    }\r\n\r\n    if (window.ejecta !== undefined)\r\n    {\r\n        OS.ejecta = true;\r\n    }\r\n\r\n    if ((/Crosswalk/).test(ua))\r\n    {\r\n        OS.crosswalk = true;\r\n    }\r\n\r\n    OS.pixelRatio = window['devicePixelRatio'] || 1;\r\n\r\n    return OS;\r\n}\r\n\r\nmodule.exports = init();\r\n"]},"metadata":{},"sourceType":"script"}