{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseCamera = require('./BaseCamera');\n\nvar CanvasPool = require('../../display/canvas/CanvasPool');\n\nvar CenterOn = require('../../geom/rectangle/CenterOn');\n\nvar Clamp = require('../../math/Clamp');\n\nvar Class = require('../../utils/Class');\n\nvar Components = require('../../gameobjects/components');\n\nvar Effects = require('./effects');\n\nvar Linear = require('../../math/Linear');\n\nvar Rectangle = require('../../geom/rectangle/Rectangle');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash and Camera Shake.\r\n *\r\n * @class Camera\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Cameras.Scene2D.BaseCamera\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.Tint\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\n\n\nvar Camera = new Class({\n  Extends: BaseCamera,\n  Mixins: [Components.Flip, Components.Tint],\n  initialize: function Camera(x, y, width, height) {\n    BaseCamera.call(this, x, y, width, height);\n    /**\r\n     * Does this Camera allow the Game Objects it renders to receive input events?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#inputEnabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.inputEnabled = true;\n    /**\r\n     * The Camera Fade effect handler.\r\n     * To fade this camera see the `Camera.fade` methods.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#fadeEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Fade}\r\n     * @since 3.5.0\r\n     */\n\n    this.fadeEffect = new Effects.Fade(this);\n    /**\r\n     * The Camera Flash effect handler.\r\n     * To flash this camera see the `Camera.flash` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#flashEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Flash}\r\n     * @since 3.5.0\r\n     */\n\n    this.flashEffect = new Effects.Flash(this);\n    /**\r\n     * The Camera Shake effect handler.\r\n     * To shake this camera see the `Camera.shake` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#shakeEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Shake}\r\n     * @since 3.5.0\r\n     */\n\n    this.shakeEffect = new Effects.Shake(this);\n    /**\r\n     * The Camera Pan effect handler.\r\n     * To pan this camera see the `Camera.pan` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#panEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Pan}\r\n     * @since 3.11.0\r\n     */\n\n    this.panEffect = new Effects.Pan(this);\n    /**\r\n     * The Camera Zoom effect handler.\r\n     * To zoom this camera see the `Camera.zoom` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#zoomEffect\r\n     * @type {Phaser.Cameras.Scene2D.Effects.Zoom}\r\n     * @since 3.11.0\r\n     */\n\n    this.zoomEffect = new Effects.Zoom(this);\n    /**\r\n     * The linear interpolation value to use when following a target.\r\n     *\r\n     * Can also be set via `setLerp` or as part of the `startFollow` call.\r\n     *\r\n     * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n     * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n     * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n     * adjust this value in real-time during your game.\r\n     *\r\n     * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#lerp\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.9.0\r\n     */\n\n    this.lerp = new Vector2(1, 1);\n    /**\r\n     * The values stored in this property are subtracted from the Camera targets position, allowing you to\r\n     * offset the camera from the actual target x/y coordinates by this amount.\r\n     * Can also be set via `setFollowOffset` or as part of the `startFollow` call.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#followOffset\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.9.0\r\n     */\n\n    this.followOffset = new Vector2();\n    /**\r\n     * The Camera dead zone.\r\n     *\r\n     * The deadzone is only used when the camera is following a target.\r\n     *\r\n     * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n     * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n     *\r\n     * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n     *\r\n     * You can directly set this property to be an instance of a Rectangle. Or, you can use the\r\n     * `setDeadzone` method for a chainable approach.\r\n     *\r\n     * The rectangle you provide can have its dimensions adjusted dynamically, however, please\r\n     * note that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\r\n     *\r\n     * Calling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\r\n     * to `null`.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#deadzone\r\n     * @type {?Phaser.Geom.Rectangle}\r\n     * @since 3.11.0\r\n     */\n\n    this.deadzone = null;\n    /**\r\n     * Internal follow target reference.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#_follow\r\n     * @type {?any}\r\n     * @private\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this._follow = null;\n    /**\r\n     * Is this Camera rendering directly to the canvas or to a texture?\r\n     *\r\n     * Enable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\r\n     *\r\n     * Once enabled you can toggle it by switching this property.\r\n     *\r\n     * To properly remove a render texture you should call the `clearRenderToTexture()` method.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#renderToTexture\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.13.0\r\n     */\n\n    this.renderToTexture = false;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the HTML Canvas Element that the Camera is drawing to.\r\n     *\r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     *\r\n     * This is only populated if Phaser is running with the Canvas Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#canvas\r\n     * @type {HTMLCanvasElement}\r\n     * @since 3.13.0\r\n     */\n\n    this.canvas = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the Rendering Context belonging to the Canvas element the Camera is drawing to.\r\n     *\r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     *\r\n     * This is only populated if Phaser is running with the Canvas Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#context\r\n     * @type {CanvasRenderingContext2D}\r\n     * @since 3.13.0\r\n     */\n\n    this.context = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the GL Texture belonging the Camera is drawing to.\r\n     *\r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     *\r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#glTexture\r\n     * @type {?WebGLTexture}\r\n     * @since 3.13.0\r\n     */\n\n    this.glTexture = null;\n    /**\r\n     * If this Camera has been set to render to a texture then this holds a reference\r\n     * to the GL Frame Buffer belonging the Camera is drawing to.\r\n     *\r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     *\r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#framebuffer\r\n     * @type {?WebGLFramebuffer}\r\n     * @since 3.13.0\r\n     */\n\n    this.framebuffer = null;\n    /**\r\n     * If this Camera has been set to render to a texture and to use a custom pipeline,\r\n     * then this holds a reference to the pipeline the Camera is drawing with.\r\n     *\r\n     * Enable texture rendering using the method `setRenderToTexture`.\r\n     *\r\n     * This is only set if Phaser is running with the WebGL Renderer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Camera#pipeline\r\n     * @type {any}\r\n     * @since 3.13.0\r\n     */\n\n    this.pipeline = null;\n  },\n\n  /**\r\n   * Sets the Camera to render to a texture instead of to the main canvas.\r\n   *\r\n   * The Camera will redirect all Game Objects it's asked to render to this texture.\r\n   *\r\n   * During the render sequence, the texture itself will then be rendered to the main canvas.\r\n   *\r\n   * Doing this gives you the ability to modify the texture before this happens,\r\n   * allowing for special effects such as Camera specific shaders, or post-processing\r\n   * on the texture.\r\n   *\r\n   * If running under Canvas the Camera will render to its `canvas` property.\r\n   *\r\n   * If running under WebGL the Camera will create a frame buffer, which is stored in its `framebuffer` and `glTexture` properties.\r\n   *\r\n   * If you set a camera to render to a texture then it will emit 2 events during the render loop:\r\n   *\r\n   * First, it will emit the event `prerender`. This happens right before any Game Object's are drawn to the Camera texture.\r\n   *\r\n   * Then, it will emit the event `postrender`. This happens after all Game Object's have been drawn, but right before the\r\n   * Camera texture is rendered to the main game canvas. It's the final point at which you can manipulate the texture before\r\n   * it appears in-game.\r\n   *\r\n   * You should not enable this unless you plan on actually using the texture it creates\r\n   * somehow, otherwise you're just doubling the work required to render your game.\r\n   *\r\n   * To temporarily disable rendering to a texture, toggle the `renderToTexture` boolean.\r\n   *\r\n   * If you no longer require the Camera to render to a texture, call the `clearRenderToTexture` method,\r\n   * which will delete the respective textures and free-up resources.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setRenderToTexture\r\n   * @since 3.13.0\r\n   *\r\n   * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - An optional WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setRenderToTexture: function (pipeline) {\n    var renderer = this.scene.sys.game.renderer;\n\n    if (renderer.gl) {\n      this.glTexture = renderer.createTextureFromSource(null, this.width, this.height, 0);\n      this.framebuffer = renderer.createFramebuffer(this.width, this.height, this.glTexture, false);\n    } else {\n      this.canvas = CanvasPool.create2D(this, this.width, this.height);\n      this.context = this.canvas.getContext('2d');\n    }\n\n    this.renderToTexture = true;\n\n    if (pipeline) {\n      this.setPipeline(pipeline);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the WebGL pipeline this Camera is using when rendering to a texture.\r\n   *\r\n   * You can pass either the string-based name of the pipeline, or a reference to the pipeline itself.\r\n   *\r\n   * Call this method with no arguments to clear any previously set pipeline.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setPipeline\r\n   * @since 3.13.0\r\n   *\r\n   * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - The WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference. Or if left empty it will clear the pipeline.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setPipeline: function (pipeline) {\n    if (typeof pipeline === 'string') {\n      var renderer = this.scene.sys.game.renderer;\n\n      if (renderer.gl && renderer.hasPipeline(pipeline)) {\n        this.pipeline = renderer.getPipeline(pipeline);\n      }\n    } else {\n      this.pipeline = pipeline;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * If this Camera was set to render to a texture, this will clear the resources it was using and\r\n   * redirect it to render back to the primary Canvas again.\r\n   *\r\n   * If you only wish to temporarily disable rendering to a texture then you can toggle the\r\n   * property `renderToTexture` instead.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#clearRenderToTexture\r\n   * @since 3.13.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  clearRenderToTexture: function () {\n    if (!this.scene) {\n      return;\n    }\n\n    var renderer = this.scene.sys.game.renderer;\n\n    if (!renderer) {\n      return;\n    }\n\n    if (renderer.gl) {\n      if (this.framebuffer) {\n        renderer.deleteFramebuffer(this.framebuffer);\n      }\n\n      if (this.glTexture) {\n        renderer.deleteTexture(this.glTexture);\n      }\n\n      this.framebuffer = null;\n      this.glTexture = null;\n      this.pipeline = null;\n    } else {\n      CanvasPool.remove(this);\n      this.canvas = null;\n      this.context = null;\n    }\n\n    this.renderToTexture = false;\n    return this;\n  },\n\n  /**\r\n   * Sets the Camera dead zone.\r\n   *\r\n   * The deadzone is only used when the camera is following a target.\r\n   *\r\n   * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n   * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n   *\r\n   * The deadzone rectangle is re-positioned every frame so that it is centered on the mid-point\r\n   * of the camera. This allows you to use the object for additional game related checks, such as\r\n   * testing if an object is within it or not via a Rectangle.contains call.\r\n   *\r\n   * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n   *\r\n   * Calling this method with no arguments will reset an active deadzone.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setDeadzone\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} [width] - The width of the deadzone rectangle in pixels. If not specified the deadzone is removed.\r\n   * @param {number} [height] - The height of the deadzone rectangle in pixels.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  setDeadzone: function (width, height) {\n    if (width === undefined) {\n      this.deadzone = null;\n    } else {\n      if (this.deadzone) {\n        this.deadzone.width = width;\n        this.deadzone.height = height;\n      } else {\n        this.deadzone = new Rectangle(0, 0, width, height);\n      }\n\n      if (this._follow) {\n        var originX = this.width / 2;\n        var originY = this.height / 2;\n        var fx = this._follow.x - this.followOffset.x;\n        var fy = this._follow.y - this.followOffset.y;\n        this.midPoint.set(fx, fy);\n        this.scrollX = fx - originX;\n        this.scrollY = fy - originY;\n      }\n\n      CenterOn(this.deadzone, this.midPoint.x, this.midPoint.y);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Fades the Camera in from the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeIn\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeIn: function (duration, red, green, blue, callback, context) {\n    return this.fadeEffect.start(false, duration, red, green, blue, true, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera out to the given color over the duration specified.\r\n   * This is an alias for Camera.fade that forces the fade to start, regardless of existing fades.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeOut\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeOut: function (duration, red, green, blue, callback, context) {\n    return this.fadeEffect.start(true, duration, red, green, blue, true, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera from the given color to transparent over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fadeFrom\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fadeFrom: function (duration, red, green, blue, force, callback, context) {\n    return this.fadeEffect.start(false, duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Fades the Camera from transparent to the given color over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#fade\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  fade: function (duration, red, green, blue, force, callback, context) {\n    return this.fadeEffect.start(true, duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Flashes the Camera by setting it to the given color immediately and then fading it away again quickly over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#flash\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n   * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n   * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n   * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n   * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  flash: function (duration, red, green, blue, force, callback, context) {\n    return this.flashEffect.start(duration, red, green, blue, force, callback, context);\n  },\n\n  /**\r\n   * Shakes the Camera by the given intensity over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#shake\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n   * @param {(number|Phaser.Math.Vector2)} [intensity=0.05] - The intensity of the shake.\r\n   * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n   * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  shake: function (duration, intensity, force, callback, context) {\n    return this.shakeEffect.start(duration, intensity, force, callback, context);\n  },\n\n  /**\r\n   * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n   * over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#pan\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n   * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  pan: function (x, y, duration, ease, force, callback, context) {\n    return this.panEffect.start(x, y, duration, ease, force, callback, context);\n  },\n\n  /**\r\n   * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#zoomTo\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} zoom - The target Camera zoom value.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  zoomTo: function (zoom, duration, ease, force, callback, context) {\n    return this.zoomEffect.start(zoom, duration, ease, force, callback, context);\n  },\n\n  /**\r\n   * Internal preRender step.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#preRender\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} resolution - The game resolution, as set in the Scale Manager.\r\n   */\n  preRender: function (resolution) {\n    var width = this.width;\n    var height = this.height;\n    var halfWidth = width * 0.5;\n    var halfHeight = height * 0.5;\n    var zoom = this.zoom * resolution;\n    var matrix = this.matrix;\n    var originX = width * this.originX;\n    var originY = height * this.originY;\n    var follow = this._follow;\n    var deadzone = this.deadzone;\n    var sx = this.scrollX;\n    var sy = this.scrollY;\n\n    if (deadzone) {\n      CenterOn(deadzone, this.midPoint.x, this.midPoint.y);\n    }\n\n    if (follow && !this.panEffect.isRunning) {\n      var fx = follow.x - this.followOffset.x;\n      var fy = follow.y - this.followOffset.y;\n\n      if (deadzone) {\n        if (fx < deadzone.x) {\n          sx = Linear(sx, sx - (deadzone.x - fx), this.lerp.x);\n        } else if (fx > deadzone.right) {\n          sx = Linear(sx, sx + (fx - deadzone.right), this.lerp.x);\n        }\n\n        if (fy < deadzone.y) {\n          sy = Linear(sy, sy - (deadzone.y - fy), this.lerp.y);\n        } else if (fy > deadzone.bottom) {\n          sy = Linear(sy, sy + (fy - deadzone.bottom), this.lerp.y);\n        }\n      } else {\n        sx = Linear(sx, fx - originX, this.lerp.x);\n        sy = Linear(sy, fy - originY, this.lerp.y);\n      }\n    }\n\n    if (this.useBounds) {\n      sx = this.clampX(sx);\n      sy = this.clampY(sy);\n    }\n\n    if (this.roundPixels) {\n      originX = Math.round(originX);\n      originY = Math.round(originY);\n    } //  Values are in pixels and not impacted by zooming the Camera\n\n\n    this.scrollX = sx;\n    this.scrollY = sy;\n    var midX = sx + halfWidth;\n    var midY = sy + halfHeight; //  The center of the camera, in world space, so taking zoom into account\n    //  Basically the pixel value of what it's looking at in the middle of the cam\n\n    this.midPoint.set(midX, midY);\n    var displayWidth = width / zoom;\n    var displayHeight = height / zoom;\n    this.worldView.setTo(midX - displayWidth / 2, midY - displayHeight / 2, displayWidth, displayHeight);\n    matrix.applyITRS(this.x + originX, this.y + originY, this.rotation, zoom, zoom);\n    matrix.translate(-originX, -originY);\n    this.shakeEffect.preRender();\n  },\n\n  /**\r\n   * Sets the linear interpolation value to use when following a target.\r\n   *\r\n   * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n   * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n   * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n   * adjust this value in real-time during your game.\r\n   *\r\n   * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setLerp\r\n   * @since 3.9.0\r\n   *\r\n   * @param {number} [x=1] - The amount added to the horizontal linear interpolation of the follow target.\r\n   * @param {number} [y=1] - The amount added to the vertical linear interpolation of the follow target.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  setLerp: function (x, y) {\n    if (x === undefined) {\n      x = 1;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.lerp.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal and vertical offset of the camera from its follow target.\r\n   * The values are subtracted from the targets position during the Cameras update step.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#setFollowOffset\r\n   * @since 3.9.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal offset from the camera follow target.x position.\r\n   * @param {number} [y=0] - The vertical offset from the camera follow target.y position.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  setFollowOffset: function (x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    this.followOffset.set(x, y);\n    return this;\n  },\n\n  /**\r\n   * Sets the Camera to follow a Game Object.\r\n   *\r\n   * When enabled the Camera will automatically adjust its scroll position to keep the target Game Object\r\n   * in its center.\r\n   *\r\n   * You can set the linear interpolation value used in the follow code.\r\n   * Use low lerp values (such as 0.1) to automatically smooth the camera motion.\r\n   *\r\n   * If you find you're getting a slight \"jitter\" effect when following an object it's probably to do with sub-pixel\r\n   * rendering of the targets position. This can be rounded by setting the `roundPixels` argument to `true` to\r\n   * force full pixel rounding rendering. Note that this can still be broken if you have specified a non-integer zoom\r\n   * value on the camera. So be sure to keep the camera zoom to integers.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#startFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.GameObjects.GameObject|object)} target - The target for the Camera to follow.\r\n   * @param {boolean} [roundPixels=false] - Round the camera position to whole integers to avoid sub-pixel rendering?\r\n   * @param {number} [lerpX=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when horizontally tracking the target. The closer the value to 1, the faster the camera will track.\r\n   * @param {number} [lerpY=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when vertically tracking the target. The closer the value to 1, the faster the camera will track.\r\n   * @param {number} [offsetX=0] - The horizontal offset from the camera follow target.x position.\r\n   * @param {number} [offsetY=0] - The vertical offset from the camera follow target.y position.\r\n   *\r\n   * @return {this} This Camera instance.\r\n   */\n  startFollow: function (target, roundPixels, lerpX, lerpY, offsetX, offsetY) {\n    if (roundPixels === undefined) {\n      roundPixels = false;\n    }\n\n    if (lerpX === undefined) {\n      lerpX = 1;\n    }\n\n    if (lerpY === undefined) {\n      lerpY = lerpX;\n    }\n\n    if (offsetX === undefined) {\n      offsetX = 0;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = offsetX;\n    }\n\n    this._follow = target;\n    this.roundPixels = roundPixels;\n    lerpX = Clamp(lerpX, 0, 1);\n    lerpY = Clamp(lerpY, 0, 1);\n    this.lerp.set(lerpX, lerpY);\n    this.followOffset.set(offsetX, offsetY);\n    var originX = this.width / 2;\n    var originY = this.height / 2;\n    var fx = target.x - offsetX;\n    var fy = target.y - offsetY;\n    this.midPoint.set(fx, fy);\n    this.scrollX = fx - originX;\n    this.scrollY = fy - originY;\n\n    if (this.useBounds) {\n      this.scrollX = this.clampX(this.scrollX);\n      this.scrollY = this.clampY(this.scrollY);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Stops a Camera from following a Game Object, if previously set via `Camera.startFollow`.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#stopFollow\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  stopFollow: function () {\n    this._follow = null;\n    return this;\n  },\n\n  /**\r\n   * Resets any active FX, such as a fade, flash or shake. Useful to call after a fade in order to\r\n   * remove the fade.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#resetFX\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n   */\n  resetFX: function () {\n    this.panEffect.reset();\n    this.shakeEffect.reset();\n    this.flashEffect.reset();\n    this.fadeEffect.reset();\n    return this;\n  },\n\n  /**\r\n   * Internal method called automatically by the Camera Manager.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#update\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (this.visible) {\n      this.panEffect.update(time, delta);\n      this.zoomEffect.update(time, delta);\n      this.shakeEffect.update(time, delta);\n      this.flashEffect.update(time, delta);\n      this.fadeEffect.update(time, delta);\n    }\n  },\n\n  /**\r\n   * Destroys this Camera instance. You rarely need to call this directly.\r\n   *\r\n   * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\r\n   * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Camera#destroy\r\n   * @fires Phaser.Cameras.Scene2D.Events#DESTROY\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.clearRenderToTexture();\n    this.resetFX();\n    BaseCamera.prototype.destroy.call(this);\n    this._follow = null;\n    this.deadzone = null;\n  }\n});\nmodule.exports = Camera;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/Camera.js"],"names":["BaseCamera","require","CanvasPool","CenterOn","Clamp","Class","Components","Effects","Linear","Rectangle","Vector2","Camera","Extends","Mixins","Flip","Tint","initialize","x","y","width","height","call","inputEnabled","fadeEffect","Fade","flashEffect","Flash","shakeEffect","Shake","panEffect","Pan","zoomEffect","Zoom","lerp","followOffset","deadzone","_follow","renderToTexture","canvas","context","glTexture","framebuffer","pipeline","setRenderToTexture","renderer","scene","sys","game","gl","createTextureFromSource","createFramebuffer","create2D","getContext","setPipeline","hasPipeline","getPipeline","clearRenderToTexture","deleteFramebuffer","deleteTexture","remove","setDeadzone","undefined","originX","originY","fx","fy","midPoint","set","scrollX","scrollY","fadeIn","duration","red","green","blue","callback","start","fadeOut","fadeFrom","force","fade","flash","shake","intensity","pan","ease","zoomTo","zoom","preRender","resolution","halfWidth","halfHeight","matrix","follow","sx","sy","isRunning","right","bottom","useBounds","clampX","clampY","roundPixels","Math","round","midX","midY","displayWidth","displayHeight","worldView","setTo","applyITRS","rotation","translate","setLerp","setFollowOffset","startFollow","target","lerpX","lerpY","offsetX","offsetY","stopFollow","resetFX","reset","update","time","delta","visible","destroy","prototype","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseCamera = require('./BaseCamera');\r\nvar CanvasPool = require('../../display/canvas/CanvasPool');\r\nvar CenterOn = require('../../geom/rectangle/CenterOn');\r\nvar Clamp = require('../../math/Clamp');\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../../gameobjects/components');\r\nvar Effects = require('./effects');\r\nvar Linear = require('../../math/Linear');\r\nvar Rectangle = require('../../geom/rectangle/Rectangle');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera.\r\n *\r\n * The Camera is the way in which all games are rendered in Phaser. They provide a view into your game world,\r\n * and can be positioned, rotated, zoomed and scrolled accordingly.\r\n *\r\n * A Camera consists of two elements: The viewport and the scroll values.\r\n *\r\n * The viewport is the physical position and size of the Camera within your game. Cameras, by default, are\r\n * created the same size as your game, but their position and size can be set to anything. This means if you\r\n * wanted to create a camera that was 320x200 in size, positioned in the bottom-right corner of your game,\r\n * you'd adjust the viewport to do that (using methods like `setViewport` and `setSize`).\r\n *\r\n * If you wish to change where the Camera is looking in your game, then you scroll it. You can do this\r\n * via the properties `scrollX` and `scrollY` or the method `setScroll`. Scrolling has no impact on the\r\n * viewport, and changing the viewport has no impact on the scrolling.\r\n *\r\n * By default a Camera will render all Game Objects it can see. You can change this using the `ignore` method,\r\n * allowing you to filter Game Objects out on a per-Camera basis.\r\n *\r\n * A Camera also has built-in special effects including Fade, Flash and Camera Shake.\r\n *\r\n * @class Camera\r\n * @memberof Phaser.Cameras.Scene2D\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.Cameras.Scene2D.BaseCamera\r\n * @extends Phaser.GameObjects.Components.Flip\r\n * @extends Phaser.GameObjects.Components.Tint\r\n *\r\n * @param {number} x - The x position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} y - The y position of the Camera, relative to the top-left of the game canvas.\r\n * @param {number} width - The width of the Camera, in pixels.\r\n * @param {number} height - The height of the Camera, in pixels.\r\n */\r\nvar Camera = new Class({\r\n\r\n    Extends: BaseCamera,\r\n\r\n    Mixins: [\r\n        Components.Flip,\r\n        Components.Tint\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Camera (x, y, width, height)\r\n    {\r\n        BaseCamera.call(this, x, y, width, height);\r\n\r\n        /**\r\n         * Does this Camera allow the Game Objects it renders to receive input events?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#inputEnabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.inputEnabled = true;\r\n\r\n        /**\r\n         * The Camera Fade effect handler.\r\n         * To fade this camera see the `Camera.fade` methods.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#fadeEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Fade}\r\n         * @since 3.5.0\r\n         */\r\n        this.fadeEffect = new Effects.Fade(this);\r\n\r\n        /**\r\n         * The Camera Flash effect handler.\r\n         * To flash this camera see the `Camera.flash` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#flashEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Flash}\r\n         * @since 3.5.0\r\n         */\r\n        this.flashEffect = new Effects.Flash(this);\r\n\r\n        /**\r\n         * The Camera Shake effect handler.\r\n         * To shake this camera see the `Camera.shake` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#shakeEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Shake}\r\n         * @since 3.5.0\r\n         */\r\n        this.shakeEffect = new Effects.Shake(this);\r\n\r\n        /**\r\n         * The Camera Pan effect handler.\r\n         * To pan this camera see the `Camera.pan` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#panEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Pan}\r\n         * @since 3.11.0\r\n         */\r\n        this.panEffect = new Effects.Pan(this);\r\n\r\n        /**\r\n         * The Camera Zoom effect handler.\r\n         * To zoom this camera see the `Camera.zoom` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#zoomEffect\r\n         * @type {Phaser.Cameras.Scene2D.Effects.Zoom}\r\n         * @since 3.11.0\r\n         */\r\n        this.zoomEffect = new Effects.Zoom(this);\r\n\r\n        /**\r\n         * The linear interpolation value to use when following a target.\r\n         *\r\n         * Can also be set via `setLerp` or as part of the `startFollow` call.\r\n         *\r\n         * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n         * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n         * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n         * adjust this value in real-time during your game.\r\n         *\r\n         * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#lerp\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.9.0\r\n         */\r\n        this.lerp = new Vector2(1, 1);\r\n\r\n        /**\r\n         * The values stored in this property are subtracted from the Camera targets position, allowing you to\r\n         * offset the camera from the actual target x/y coordinates by this amount.\r\n         * Can also be set via `setFollowOffset` or as part of the `startFollow` call.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#followOffset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.9.0\r\n         */\r\n        this.followOffset = new Vector2();\r\n\r\n        /**\r\n         * The Camera dead zone.\r\n         *\r\n         * The deadzone is only used when the camera is following a target.\r\n         *\r\n         * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n         * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n         *\r\n         * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n         *\r\n         * You can directly set this property to be an instance of a Rectangle. Or, you can use the\r\n         * `setDeadzone` method for a chainable approach.\r\n         *\r\n         * The rectangle you provide can have its dimensions adjusted dynamically, however, please\r\n         * note that its position is updated every frame, as it is constantly re-centered on the cameras mid point.\r\n         *\r\n         * Calling `setDeadzone` with no arguments will reset an active deadzone, as will setting this property\r\n         * to `null`.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#deadzone\r\n         * @type {?Phaser.Geom.Rectangle}\r\n         * @since 3.11.0\r\n         */\r\n        this.deadzone = null;\r\n\r\n        /**\r\n         * Internal follow target reference.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#_follow\r\n         * @type {?any}\r\n         * @private\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this._follow = null;\r\n\r\n        /**\r\n         * Is this Camera rendering directly to the canvas or to a texture?\r\n         *\r\n         * Enable rendering to texture with the method `setRenderToTexture` (just enabling this boolean won't be enough)\r\n         *\r\n         * Once enabled you can toggle it by switching this property.\r\n         *\r\n         * To properly remove a render texture you should call the `clearRenderToTexture()` method.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#renderToTexture\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.13.0\r\n         */\r\n        this.renderToTexture = false;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the HTML Canvas Element that the Camera is drawing to.\r\n         *\r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         *\r\n         * This is only populated if Phaser is running with the Canvas Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#canvas\r\n         * @type {HTMLCanvasElement}\r\n         * @since 3.13.0\r\n         */\r\n        this.canvas = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the Rendering Context belonging to the Canvas element the Camera is drawing to.\r\n         *\r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         *\r\n         * This is only populated if Phaser is running with the Canvas Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#context\r\n         * @type {CanvasRenderingContext2D}\r\n         * @since 3.13.0\r\n         */\r\n        this.context = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the GL Texture belonging the Camera is drawing to.\r\n         *\r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         *\r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#glTexture\r\n         * @type {?WebGLTexture}\r\n         * @since 3.13.0\r\n         */\r\n        this.glTexture = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture then this holds a reference\r\n         * to the GL Frame Buffer belonging the Camera is drawing to.\r\n         *\r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         *\r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#framebuffer\r\n         * @type {?WebGLFramebuffer}\r\n         * @since 3.13.0\r\n         */\r\n        this.framebuffer = null;\r\n\r\n        /**\r\n         * If this Camera has been set to render to a texture and to use a custom pipeline,\r\n         * then this holds a reference to the pipeline the Camera is drawing with.\r\n         *\r\n         * Enable texture rendering using the method `setRenderToTexture`.\r\n         *\r\n         * This is only set if Phaser is running with the WebGL Renderer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Camera#pipeline\r\n         * @type {any}\r\n         * @since 3.13.0\r\n         */\r\n        this.pipeline = null;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera to render to a texture instead of to the main canvas.\r\n     *\r\n     * The Camera will redirect all Game Objects it's asked to render to this texture.\r\n     *\r\n     * During the render sequence, the texture itself will then be rendered to the main canvas.\r\n     *\r\n     * Doing this gives you the ability to modify the texture before this happens,\r\n     * allowing for special effects such as Camera specific shaders, or post-processing\r\n     * on the texture.\r\n     *\r\n     * If running under Canvas the Camera will render to its `canvas` property.\r\n     *\r\n     * If running under WebGL the Camera will create a frame buffer, which is stored in its `framebuffer` and `glTexture` properties.\r\n     *\r\n     * If you set a camera to render to a texture then it will emit 2 events during the render loop:\r\n     *\r\n     * First, it will emit the event `prerender`. This happens right before any Game Object's are drawn to the Camera texture.\r\n     *\r\n     * Then, it will emit the event `postrender`. This happens after all Game Object's have been drawn, but right before the\r\n     * Camera texture is rendered to the main game canvas. It's the final point at which you can manipulate the texture before\r\n     * it appears in-game.\r\n     *\r\n     * You should not enable this unless you plan on actually using the texture it creates\r\n     * somehow, otherwise you're just doubling the work required to render your game.\r\n     *\r\n     * To temporarily disable rendering to a texture, toggle the `renderToTexture` boolean.\r\n     *\r\n     * If you no longer require the Camera to render to a texture, call the `clearRenderToTexture` method,\r\n     * which will delete the respective textures and free-up resources.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setRenderToTexture\r\n     * @since 3.13.0\r\n     *\r\n     * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - An optional WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setRenderToTexture: function (pipeline)\r\n    {\r\n        var renderer = this.scene.sys.game.renderer;\r\n\r\n        if (renderer.gl)\r\n        {\r\n            this.glTexture = renderer.createTextureFromSource(null, this.width, this.height, 0);\r\n            this.framebuffer = renderer.createFramebuffer(this.width, this.height, this.glTexture, false);\r\n        }\r\n        else\r\n        {\r\n            this.canvas = CanvasPool.create2D(this, this.width, this.height);\r\n            this.context = this.canvas.getContext('2d');\r\n        }\r\n\r\n        this.renderToTexture = true;\r\n\r\n        if (pipeline)\r\n        {\r\n            this.setPipeline(pipeline);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the WebGL pipeline this Camera is using when rendering to a texture.\r\n     *\r\n     * You can pass either the string-based name of the pipeline, or a reference to the pipeline itself.\r\n     *\r\n     * Call this method with no arguments to clear any previously set pipeline.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setPipeline\r\n     * @since 3.13.0\r\n     *\r\n     * @param {(string|Phaser.Renderer.WebGL.WebGLPipeline)} [pipeline] - The WebGL Pipeline to render with, can be either a string which is the name of the pipeline, or a pipeline reference. Or if left empty it will clear the pipeline.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setPipeline: function (pipeline)\r\n    {\r\n        if (typeof pipeline === 'string')\r\n        {\r\n            var renderer = this.scene.sys.game.renderer;\r\n\r\n            if (renderer.gl && renderer.hasPipeline(pipeline))\r\n            {\r\n                this.pipeline = renderer.getPipeline(pipeline);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.pipeline = pipeline;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If this Camera was set to render to a texture, this will clear the resources it was using and\r\n     * redirect it to render back to the primary Canvas again.\r\n     *\r\n     * If you only wish to temporarily disable rendering to a texture then you can toggle the\r\n     * property `renderToTexture` instead.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#clearRenderToTexture\r\n     * @since 3.13.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    clearRenderToTexture: function ()\r\n    {\r\n        if (!this.scene)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var renderer = this.scene.sys.game.renderer;\r\n\r\n        if (!renderer)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if (renderer.gl)\r\n        {\r\n            if (this.framebuffer)\r\n            {\r\n                renderer.deleteFramebuffer(this.framebuffer);\r\n            }\r\n\r\n            if (this.glTexture)\r\n            {\r\n                renderer.deleteTexture(this.glTexture);\r\n            }\r\n\r\n            this.framebuffer = null;\r\n            this.glTexture = null;\r\n            this.pipeline = null;\r\n        }\r\n        else\r\n        {\r\n            CanvasPool.remove(this);\r\n\r\n            this.canvas = null;\r\n            this.context = null;\r\n        }\r\n\r\n        this.renderToTexture = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera dead zone.\r\n     *\r\n     * The deadzone is only used when the camera is following a target.\r\n     *\r\n     * It defines a rectangular region within which if the target is present, the camera will not scroll.\r\n     * If the target moves outside of this area, the camera will begin scrolling in order to follow it.\r\n     *\r\n     * The deadzone rectangle is re-positioned every frame so that it is centered on the mid-point\r\n     * of the camera. This allows you to use the object for additional game related checks, such as\r\n     * testing if an object is within it or not via a Rectangle.contains call.\r\n     *\r\n     * The `lerp` values that you can set for a follower target also apply when using a deadzone.\r\n     *\r\n     * Calling this method with no arguments will reset an active deadzone.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setDeadzone\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} [width] - The width of the deadzone rectangle in pixels. If not specified the deadzone is removed.\r\n     * @param {number} [height] - The height of the deadzone rectangle in pixels.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    setDeadzone: function (width, height)\r\n    {\r\n        if (width === undefined)\r\n        {\r\n            this.deadzone = null;\r\n        }\r\n        else\r\n        {\r\n            if (this.deadzone)\r\n            {\r\n                this.deadzone.width = width;\r\n                this.deadzone.height = height;\r\n            }\r\n            else\r\n            {\r\n                this.deadzone = new Rectangle(0, 0, width, height);\r\n            }\r\n\r\n            if (this._follow)\r\n            {\r\n                var originX = this.width / 2;\r\n                var originY = this.height / 2;\r\n\r\n                var fx = this._follow.x - this.followOffset.x;\r\n                var fy = this._follow.y - this.followOffset.y;\r\n\r\n                this.midPoint.set(fx, fy);\r\n\r\n                this.scrollX = fx - originX;\r\n                this.scrollY = fy - originY;\r\n            }\r\n\r\n            CenterOn(this.deadzone, this.midPoint.x, this.midPoint.y);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera in from the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeIn\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeIn: function (duration, red, green, blue, callback, context)\r\n    {\r\n        return this.fadeEffect.start(false, duration, red, green, blue, true, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera out to the given color over the duration specified.\r\n     * This is an alias for Camera.fade that forces the fade to start, regardless of existing fades.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeOut\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeOut: function (duration, red, green, blue, callback, context)\r\n    {\r\n        return this.fadeEffect.start(true, duration, red, green, blue, true, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera from the given color to transparent over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fadeFrom\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_IN_COMPLETE\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fadeFrom: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.fadeEffect.start(false, duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Fades the Camera from transparent to the given color over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#fade\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FADE_OUT_COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=0] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=0] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=0] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    fade: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.fadeEffect.start(true, duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Flashes the Camera by setting it to the given color immediately and then fading it away again quickly over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#flash\r\n     * @fires Phaser.Cameras.Scene2D.Events#FLASH_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#FLASH_COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=250] - The duration of the effect in milliseconds.\r\n     * @param {integer} [red=255] - The amount to fade the red channel towards. A value between 0 and 255.\r\n     * @param {integer} [green=255] - The amount to fade the green channel towards. A value between 0 and 255.\r\n     * @param {integer} [blue=255] - The amount to fade the blue channel towards. A value between 0 and 255.\r\n     * @param {boolean} [force=false] - Force the effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    flash: function (duration, red, green, blue, force, callback, context)\r\n    {\r\n        return this.flashEffect.start(duration, red, green, blue, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Shakes the Camera by the given intensity over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#shake\r\n     * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n     * @param {(number|Phaser.Math.Vector2)} [intensity=0.05] - The intensity of the shake.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {function} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    shake: function (duration, intensity, force, callback, context)\r\n    {\r\n        return this.shakeEffect.start(duration, intensity, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * This effect will scroll the Camera so that the center of its viewport finishes at the given destination,\r\n     * over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#pan\r\n     * @fires Phaser.Cameras.Scene2D.Events#PAN_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#PAN_COMPLETE\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The destination x coordinate to scroll the center of the Camera viewport to.\r\n     * @param {number} y - The destination y coordinate to scroll the center of the Camera viewport to.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    pan: function (x, y, duration, ease, force, callback, context)\r\n    {\r\n        return this.panEffect.start(x, y, duration, ease, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#zoomTo\r\n     * @fires Phaser.Cameras.Scene2D.Events#ZOOM_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} zoom - The target Camera zoom value.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the pan. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the pan effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraPanCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent four arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * the current camera scroll x coordinate and the current camera scroll y coordinate.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    zoomTo: function (zoom, duration, ease, force, callback, context)\r\n    {\r\n        return this.zoomEffect.start(zoom, duration, ease, force, callback, context);\r\n    },\r\n\r\n    /**\r\n     * Internal preRender step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#preRender\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} resolution - The game resolution, as set in the Scale Manager.\r\n     */\r\n    preRender: function (resolution)\r\n    {\r\n        var width = this.width;\r\n        var height = this.height;\r\n\r\n        var halfWidth = width * 0.5;\r\n        var halfHeight = height * 0.5;\r\n\r\n        var zoom = this.zoom * resolution;\r\n        var matrix = this.matrix;\r\n\r\n        var originX = width * this.originX;\r\n        var originY = height * this.originY;\r\n\r\n        var follow = this._follow;\r\n        var deadzone = this.deadzone;\r\n\r\n        var sx = this.scrollX;\r\n        var sy = this.scrollY;\r\n\r\n        if (deadzone)\r\n        {\r\n            CenterOn(deadzone, this.midPoint.x, this.midPoint.y);\r\n        }\r\n\r\n        if (follow && !this.panEffect.isRunning)\r\n        {\r\n            var fx = (follow.x - this.followOffset.x);\r\n            var fy = (follow.y - this.followOffset.y);\r\n\r\n            if (deadzone)\r\n            {\r\n                if (fx < deadzone.x)\r\n                {\r\n                    sx = Linear(sx, sx - (deadzone.x - fx), this.lerp.x);\r\n                }\r\n                else if (fx > deadzone.right)\r\n                {\r\n                    sx = Linear(sx, sx + (fx - deadzone.right), this.lerp.x);\r\n                }\r\n\r\n                if (fy < deadzone.y)\r\n                {\r\n                    sy = Linear(sy, sy - (deadzone.y - fy), this.lerp.y);\r\n                }\r\n                else if (fy > deadzone.bottom)\r\n                {\r\n                    sy = Linear(sy, sy + (fy - deadzone.bottom), this.lerp.y);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                sx = Linear(sx, fx - originX, this.lerp.x);\r\n                sy = Linear(sy, fy - originY, this.lerp.y);\r\n            }\r\n        }\r\n\r\n        if (this.useBounds)\r\n        {\r\n            sx = this.clampX(sx);\r\n            sy = this.clampY(sy);\r\n        }\r\n\r\n        if (this.roundPixels)\r\n        {\r\n            originX = Math.round(originX);\r\n            originY = Math.round(originY);\r\n        }\r\n\r\n        //  Values are in pixels and not impacted by zooming the Camera\r\n        this.scrollX = sx;\r\n        this.scrollY = sy;\r\n\r\n        var midX = sx + halfWidth;\r\n        var midY = sy + halfHeight;\r\n\r\n        //  The center of the camera, in world space, so taking zoom into account\r\n        //  Basically the pixel value of what it's looking at in the middle of the cam\r\n        this.midPoint.set(midX, midY);\r\n\r\n        var displayWidth = width / zoom;\r\n        var displayHeight = height / zoom;\r\n\r\n        this.worldView.setTo(\r\n            midX - (displayWidth / 2),\r\n            midY - (displayHeight / 2),\r\n            displayWidth,\r\n            displayHeight\r\n        );\r\n\r\n        matrix.applyITRS(this.x + originX, this.y + originY, this.rotation, zoom, zoom);\r\n        matrix.translate(-originX, -originY);\r\n\r\n        this.shakeEffect.preRender();\r\n    },\r\n\r\n    /**\r\n     * Sets the linear interpolation value to use when following a target.\r\n     *\r\n     * The default values of 1 means the camera will instantly snap to the target coordinates.\r\n     * A lower value, such as 0.1 means the camera will more slowly track the target, giving\r\n     * a smooth transition. You can set the horizontal and vertical values independently, and also\r\n     * adjust this value in real-time during your game.\r\n     *\r\n     * Be sure to keep the value between 0 and 1. A value of zero will disable tracking on that axis.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setLerp\r\n     * @since 3.9.0\r\n     *\r\n     * @param {number} [x=1] - The amount added to the horizontal linear interpolation of the follow target.\r\n     * @param {number} [y=1] - The amount added to the vertical linear interpolation of the follow target.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setLerp: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 1; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.lerp.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal and vertical offset of the camera from its follow target.\r\n     * The values are subtracted from the targets position during the Cameras update step.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#setFollowOffset\r\n     * @since 3.9.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal offset from the camera follow target.x position.\r\n     * @param {number} [y=0] - The vertical offset from the camera follow target.y position.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    setFollowOffset: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n\r\n        this.followOffset.set(x, y);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Camera to follow a Game Object.\r\n     *\r\n     * When enabled the Camera will automatically adjust its scroll position to keep the target Game Object\r\n     * in its center.\r\n     *\r\n     * You can set the linear interpolation value used in the follow code.\r\n     * Use low lerp values (such as 0.1) to automatically smooth the camera motion.\r\n     *\r\n     * If you find you're getting a slight \"jitter\" effect when following an object it's probably to do with sub-pixel\r\n     * rendering of the targets position. This can be rounded by setting the `roundPixels` argument to `true` to\r\n     * force full pixel rounding rendering. Note that this can still be broken if you have specified a non-integer zoom\r\n     * value on the camera. So be sure to keep the camera zoom to integers.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#startFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.GameObjects.GameObject|object)} target - The target for the Camera to follow.\r\n     * @param {boolean} [roundPixels=false] - Round the camera position to whole integers to avoid sub-pixel rendering?\r\n     * @param {number} [lerpX=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when horizontally tracking the target. The closer the value to 1, the faster the camera will track.\r\n     * @param {number} [lerpY=1] - A value between 0 and 1. This value specifies the amount of linear interpolation to use when vertically tracking the target. The closer the value to 1, the faster the camera will track.\r\n     * @param {number} [offsetX=0] - The horizontal offset from the camera follow target.x position.\r\n     * @param {number} [offsetY=0] - The vertical offset from the camera follow target.y position.\r\n     *\r\n     * @return {this} This Camera instance.\r\n     */\r\n    startFollow: function (target, roundPixels, lerpX, lerpY, offsetX, offsetY)\r\n    {\r\n        if (roundPixels === undefined) { roundPixels = false; }\r\n        if (lerpX === undefined) { lerpX = 1; }\r\n        if (lerpY === undefined) { lerpY = lerpX; }\r\n        if (offsetX === undefined) { offsetX = 0; }\r\n        if (offsetY === undefined) { offsetY = offsetX; }\r\n\r\n        this._follow = target;\r\n\r\n        this.roundPixels = roundPixels;\r\n\r\n        lerpX = Clamp(lerpX, 0, 1);\r\n        lerpY = Clamp(lerpY, 0, 1);\r\n\r\n        this.lerp.set(lerpX, lerpY);\r\n\r\n        this.followOffset.set(offsetX, offsetY);\r\n\r\n        var originX = this.width / 2;\r\n        var originY = this.height / 2;\r\n\r\n        var fx = target.x - offsetX;\r\n        var fy = target.y - offsetY;\r\n\r\n        this.midPoint.set(fx, fy);\r\n\r\n        this.scrollX = fx - originX;\r\n        this.scrollY = fy - originY;\r\n\r\n        if (this.useBounds)\r\n        {\r\n            this.scrollX = this.clampX(this.scrollX);\r\n            this.scrollY = this.clampY(this.scrollY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops a Camera from following a Game Object, if previously set via `Camera.startFollow`.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#stopFollow\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    stopFollow: function ()\r\n    {\r\n        this._follow = null;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resets any active FX, such as a fade, flash or shake. Useful to call after a fade in order to\r\n     * remove the fade.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#resetFX\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} This Camera instance.\r\n     */\r\n    resetFX: function ()\r\n    {\r\n        this.panEffect.reset();\r\n        this.shakeEffect.reset();\r\n        this.flashEffect.reset();\r\n        this.fadeEffect.reset();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method called automatically by the Camera Manager.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#update\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (this.visible)\r\n        {\r\n            this.panEffect.update(time, delta);\r\n            this.zoomEffect.update(time, delta);\r\n            this.shakeEffect.update(time, delta);\r\n            this.flashEffect.update(time, delta);\r\n            this.fadeEffect.update(time, delta);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Camera instance. You rarely need to call this directly.\r\n     *\r\n     * Called by the Camera Manager. If you wish to destroy a Camera please use `CameraManager.remove` as\r\n     * cameras are stored in a pool, ready for recycling later, and calling this directly will prevent that.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Camera#destroy\r\n     * @fires Phaser.Cameras.Scene2D.Events#DESTROY\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.clearRenderToTexture();\r\n\r\n        this.resetFX();\r\n\r\n        BaseCamera.prototype.destroy.call(this);\r\n\r\n        this._follow = null;\r\n\r\n        this.deadzone = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Camera;\r\n"]},"metadata":{},"sourceType":"script"}