{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar GeomRectangle = require('../../../geom/rectangle/Rectangle');\n\nvar Shape = require('../Shape');\n\nvar RectangleRender = require('./RectangleRender');\n/**\r\n * @classdesc\r\n * The Rectangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * You can change the size of the rectangle by changing the `width` and `height` properties.\r\n *\r\n * @class Rectangle\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the rectangle.\r\n * @param {number} [height=128] - The height of the rectangle.\r\n * @param {number} [fillColor] - The color the rectangle will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the rectangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Rectangle = new Class({\n  Extends: Shape,\n  Mixins: [RectangleRender],\n  initialize: function Rectangle(scene, x, y, width, height, fillColor, fillAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 128;\n    }\n\n    if (height === undefined) {\n      height = 128;\n    }\n\n    Shape.call(this, scene, 'Rectangle', new GeomRectangle(0, 0, width, height));\n    this.setPosition(x, y);\n    this.setSize(width, height);\n\n    if (fillColor !== undefined) {\n      this.setFillStyle(fillColor, fillAlpha);\n    }\n\n    this.updateDisplayOrigin();\n    this.updateData();\n  },\n\n  /**\r\n   * Internal method that updates the data and path values.\r\n   *\r\n   * @method Phaser.GameObjects.Rectangle#updateData\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  updateData: function () {\n    var path = [];\n    var rect = this.geom;\n    var line = this._tempLine;\n    rect.getLineA(line);\n    path.push(line.x1, line.y1, line.x2, line.y2);\n    rect.getLineB(line);\n    path.push(line.x2, line.y2);\n    rect.getLineC(line);\n    path.push(line.x2, line.y2);\n    rect.getLineD(line);\n    path.push(line.x2, line.y2);\n    this.pathData = path;\n    return this;\n  }\n});\nmodule.exports = Rectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/rectangle/Rectangle.js"],"names":["Class","require","GeomRectangle","Shape","RectangleRender","Rectangle","Extends","Mixins","initialize","scene","x","y","width","height","fillColor","fillAlpha","undefined","call","setPosition","setSize","setFillStyle","updateDisplayOrigin","updateData","path","rect","geom","line","_tempLine","getLineA","push","x1","y1","x2","y2","getLineB","getLineC","getLineD","pathData","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,sBAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,mCAAD,CAA3B;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAII,SAAS,GAAG,IAAIL,KAAJ,CAAU;AAEtBM,EAAAA,OAAO,EAAEH,KAFa;AAItBI,EAAAA,MAAM,EAAE,CACJH,eADI,CAJc;AAQtBI,EAAAA,UAAU,EAEV,SAASH,SAAT,CAAoBI,KAApB,EAA2BC,CAA3B,EAA8BC,CAA9B,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,SAAhD,EAA2DC,SAA3D,EACA;AACI,QAAIL,CAAC,KAAKM,SAAV,EAAqB;AAAEN,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,QAAIC,CAAC,KAAKK,SAAV,EAAqB;AAAEL,MAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,QAAIC,KAAK,KAAKI,SAAd,EAAyB;AAAEJ,MAAAA,KAAK,GAAG,GAAR;AAAc;;AACzC,QAAIC,MAAM,KAAKG,SAAf,EAA0B;AAAEH,MAAAA,MAAM,GAAG,GAAT;AAAe;;AAE3CV,IAAAA,KAAK,CAACc,IAAN,CAAW,IAAX,EAAiBR,KAAjB,EAAwB,WAAxB,EAAqC,IAAIP,aAAJ,CAAkB,CAAlB,EAAqB,CAArB,EAAwBU,KAAxB,EAA+BC,MAA/B,CAArC;AAEA,SAAKK,WAAL,CAAiBR,CAAjB,EAAoBC,CAApB;AACA,SAAKQ,OAAL,CAAaP,KAAb,EAAoBC,MAApB;;AAEA,QAAIC,SAAS,KAAKE,SAAlB,EACA;AACI,WAAKI,YAAL,CAAkBN,SAAlB,EAA6BC,SAA7B;AACH;;AAED,SAAKM,mBAAL;AACA,SAAKC,UAAL;AACH,GA7BqB;;AA+BtB;;;;;;;;;AASAA,EAAAA,UAAU,EAAE,YACZ;AACI,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAhB;AACA,QAAIC,IAAI,GAAG,KAAKC,SAAhB;AAEAH,IAAAA,IAAI,CAACI,QAAL,CAAcF,IAAd;AAEAH,IAAAA,IAAI,CAACM,IAAL,CAAUH,IAAI,CAACI,EAAf,EAAmBJ,IAAI,CAACK,EAAxB,EAA4BL,IAAI,CAACM,EAAjC,EAAqCN,IAAI,CAACO,EAA1C;AAEAT,IAAAA,IAAI,CAACU,QAAL,CAAcR,IAAd;AAEAH,IAAAA,IAAI,CAACM,IAAL,CAAUH,IAAI,CAACM,EAAf,EAAmBN,IAAI,CAACO,EAAxB;AAEAT,IAAAA,IAAI,CAACW,QAAL,CAAcT,IAAd;AAEAH,IAAAA,IAAI,CAACM,IAAL,CAAUH,IAAI,CAACM,EAAf,EAAmBN,IAAI,CAACO,EAAxB;AAEAT,IAAAA,IAAI,CAACY,QAAL,CAAcV,IAAd;AAEAH,IAAAA,IAAI,CAACM,IAAL,CAAUH,IAAI,CAACM,EAAf,EAAmBN,IAAI,CAACO,EAAxB;AAEA,SAAKI,QAAL,GAAgBd,IAAhB;AAEA,WAAO,IAAP;AACH;AAjEqB,CAAV,CAAhB;AAqEAe,MAAM,CAACC,OAAP,GAAiBlC,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar GeomRectangle = require('../../../geom/rectangle/Rectangle');\r\nvar Shape = require('../Shape');\r\nvar RectangleRender = require('./RectangleRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Rectangle Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * You can change the size of the rectangle by changing the `width` and `height` properties.\r\n *\r\n * @class Rectangle\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} x - The horizontal position of this Game Object in the world.\r\n * @param {number} y - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the rectangle.\r\n * @param {number} [height=128] - The height of the rectangle.\r\n * @param {number} [fillColor] - The color the rectangle will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the rectangle will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Rectangle = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        RectangleRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Rectangle (scene, x, y, width, height, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 128; }\r\n        if (height === undefined) { height = 128; }\r\n\r\n        Shape.call(this, scene, 'Rectangle', new GeomRectangle(0, 0, width, height));\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Rectangle#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var path = [];\r\n        var rect = this.geom;\r\n        var line = this._tempLine;\r\n\r\n        rect.getLineA(line);\r\n\r\n        path.push(line.x1, line.y1, line.x2, line.y2);\r\n\r\n        rect.getLineB(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        rect.getLineC(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        rect.getLineD(line);\r\n\r\n        path.push(line.x2, line.y2);\r\n\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Rectangle;\r\n"]},"metadata":{},"sourceType":"script"}