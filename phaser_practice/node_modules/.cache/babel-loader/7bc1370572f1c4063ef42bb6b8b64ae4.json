{"ast":null,"code":"var Matter = require('../../CustomMain');\n/**\r\n * An attractors plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterAttractors\r\n */\n\n\nvar MatterAttractors = {\n  // plugin meta\n  name: 'matter-attractors',\n  // PLUGIN_NAME\n  version: '0.1.7',\n  // PLUGIN_VERSION\n  for: 'matter-js@^0.14.2',\n  silent: true,\n  // no console log please\n  // installs the plugin where `base` is `Matter`\n  // you should not need to call this directly.\n  install: function (base) {\n    base.after('Body.create', function () {\n      MatterAttractors.Body.init(this);\n    });\n    base.before('Engine.update', function (engine) {\n      MatterAttractors.Engine.update(engine);\n    });\n  },\n  Body: {\n    /**\r\n     * Initialises the `body` to support attractors.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Body.init\r\n     * @param {Matter.Body} body The body to init.\r\n     * @returns {void} No return value.\r\n     */\n    init: function (body) {\n      body.plugin.attractors = body.plugin.attractors || [];\n    }\n  },\n  Engine: {\n    /**\r\n     * Applies all attractors for all bodies in the `engine`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\n    update: function (engine) {\n      var world = engine.world,\n          bodies = Matter.Composite.allBodies(world);\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var bodyA = bodies[i],\n            attractors = bodyA.plugin.attractors;\n\n        if (attractors && attractors.length > 0) {\n          for (var j = i + 1; j < bodies.length; j += 1) {\n            var bodyB = bodies[j];\n\n            for (var k = 0; k < attractors.length; k += 1) {\n              var attractor = attractors[k],\n                  forceVector = attractor;\n\n              if (Matter.Common.isFunction(attractor)) {\n                forceVector = attractor(bodyA, bodyB);\n              }\n\n              if (forceVector) {\n                Matter.Body.applyForce(bodyB, bodyB.position, forceVector);\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Defines some useful common attractor functions that can be used\r\n   * by pushing them to your body's `body.plugin.attractors` array.\r\n   * @namespace MatterAttractors.Attractors\r\n   * @property {number} gravityConstant The gravitational constant used by the gravity attractor.\r\n   */\n  Attractors: {\n    gravityConstant: 0.001,\n\n    /**\r\n     * An attractor function that applies Newton's law of gravitation.\r\n     * Use this by pushing `MatterAttractors.Attractors.gravity` to your body's `body.plugin.attractors` array.\r\n     * The gravitational constant defaults to `0.001` which you can change\r\n     * at `MatterAttractors.Attractors.gravityConstant`.\r\n     * @function MatterAttractors.Attractors.gravity\r\n     * @param {Matter.Body} bodyA The first body.\r\n     * @param {Matter.Body} bodyB The second body.\r\n     * @returns {void} No return value.\r\n     */\n    gravity: function (bodyA, bodyB) {\n      // use Newton's law of gravitation\n      var bToA = Matter.Vector.sub(bodyB.position, bodyA.position),\n          distanceSq = Matter.Vector.magnitudeSquared(bToA) || 0.0001,\n          normal = Matter.Vector.normalise(bToA),\n          magnitude = -MatterAttractors.Attractors.gravityConstant * (bodyA.mass * bodyB.mass / distanceSq),\n          force = Matter.Vector.mult(normal, magnitude); // to apply forces to both bodies\n\n      Matter.Body.applyForce(bodyA, bodyA.position, Matter.Vector.neg(force));\n      Matter.Body.applyForce(bodyB, bodyB.position, force);\n    }\n  }\n};\nmodule.exports = MatterAttractors;\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\n\n/**\r\n * This plugin adds a new property `body.plugin.attractors` to instances of `Matter.Body`.\r\n * This is an array of callback functions that will be called automatically\r\n * for every pair of bodies, on every engine update.\r\n * @property {Function[]} body.plugin.attractors\r\n * @memberof Matter.Body\r\n */\n\n/**\r\n * An attractor function calculates the force to be applied\r\n * to `bodyB`, it should either:\r\n * - return the force vector to be applied to `bodyB`\r\n * - or apply the force to the body(s) itself\r\n * @callback AttractorFunction\r\n * @param {Matter.Body} bodyA\r\n * @param {Matter.Body} bodyB\r\n * @returns {(Vector|undefined)} a force vector (optional)\r\n */","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/plugins/MatterAttractors.js"],"names":["Matter","require","MatterAttractors","name","version","for","silent","install","base","after","Body","init","before","engine","Engine","update","body","plugin","attractors","world","bodies","Composite","allBodies","i","length","bodyA","j","bodyB","k","attractor","forceVector","Common","isFunction","applyForce","position","Attractors","gravityConstant","gravity","bToA","Vector","sub","distanceSq","magnitudeSquared","normal","normalise","magnitude","mass","force","mult","neg","module","exports"],"mappings":"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","sourcesContent":["var Matter = require('../../CustomMain');\r\n\r\n/**\r\n * An attractors plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterAttractors\r\n */\r\nvar MatterAttractors = {\r\n  // plugin meta\r\n  name: 'matter-attractors', // PLUGIN_NAME\r\n  version: '0.1.7', // PLUGIN_VERSION\r\n  for: 'matter-js@^0.14.2',\r\n  silent: true, // no console log please\r\n\r\n  // installs the plugin where `base` is `Matter`\r\n  // you should not need to call this directly.\r\n  install: function(base) {\r\n    base.after('Body.create', function() {\r\n      MatterAttractors.Body.init(this);\r\n    });\r\n\r\n    base.before('Engine.update', function(engine) {\r\n      MatterAttractors.Engine.update(engine);\r\n    });\r\n  },\r\n\r\n  Body: {\r\n    /**\r\n     * Initialises the `body` to support attractors.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Body.init\r\n     * @param {Matter.Body} body The body to init.\r\n     * @returns {void} No return value.\r\n     */\r\n    init: function(body) {\r\n      body.plugin.attractors = body.plugin.attractors || [];\r\n    }\r\n  },\r\n\r\n  Engine: {\r\n    /**\r\n     * Applies all attractors for all bodies in the `engine`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterAttractors.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\r\n    update: function(engine) {\r\n      var world = engine.world,\r\n        bodies = Matter.Composite.allBodies(world);\r\n\r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var bodyA = bodies[i],\r\n          attractors = bodyA.plugin.attractors;\r\n\r\n        if (attractors && attractors.length > 0) {\r\n          for (var j = i + 1; j < bodies.length; j += 1) {\r\n            var bodyB = bodies[j];\r\n\r\n            for (var k = 0; k < attractors.length; k += 1) {\r\n              var attractor = attractors[k],\r\n                forceVector = attractor;\r\n\r\n              if (Matter.Common.isFunction(attractor)) {\r\n                forceVector = attractor(bodyA, bodyB);\r\n              }\r\n\r\n              if (forceVector) {\r\n                Matter.Body.applyForce(bodyB, bodyB.position, forceVector);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Defines some useful common attractor functions that can be used\r\n   * by pushing them to your body's `body.plugin.attractors` array.\r\n   * @namespace MatterAttractors.Attractors\r\n   * @property {number} gravityConstant The gravitational constant used by the gravity attractor.\r\n   */\r\n  Attractors: {\r\n    gravityConstant: 0.001,\r\n\r\n    /**\r\n     * An attractor function that applies Newton's law of gravitation.\r\n     * Use this by pushing `MatterAttractors.Attractors.gravity` to your body's `body.plugin.attractors` array.\r\n     * The gravitational constant defaults to `0.001` which you can change\r\n     * at `MatterAttractors.Attractors.gravityConstant`.\r\n     * @function MatterAttractors.Attractors.gravity\r\n     * @param {Matter.Body} bodyA The first body.\r\n     * @param {Matter.Body} bodyB The second body.\r\n     * @returns {void} No return value.\r\n     */\r\n    gravity: function(bodyA, bodyB) {\r\n      // use Newton's law of gravitation\r\n      var bToA = Matter.Vector.sub(bodyB.position, bodyA.position),\r\n        distanceSq = Matter.Vector.magnitudeSquared(bToA) || 0.0001,\r\n        normal = Matter.Vector.normalise(bToA),\r\n        magnitude = -MatterAttractors.Attractors.gravityConstant * (bodyA.mass * bodyB.mass / distanceSq),\r\n        force = Matter.Vector.mult(normal, magnitude);\r\n\r\n      // to apply forces to both bodies\r\n      Matter.Body.applyForce(bodyA, bodyA.position, Matter.Vector.neg(force));\r\n      Matter.Body.applyForce(bodyB, bodyB.position, force);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = MatterAttractors;\r\n\r\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `body.plugin.attractors` to instances of `Matter.Body`.\r\n * This is an array of callback functions that will be called automatically\r\n * for every pair of bodies, on every engine update.\r\n * @property {Function[]} body.plugin.attractors\r\n * @memberof Matter.Body\r\n */\r\n\r\n/**\r\n * An attractor function calculates the force to be applied\r\n * to `bodyB`, it should either:\r\n * - return the force vector to be applied to `bodyB`\r\n * - or apply the force to the body(s) itself\r\n * @callback AttractorFunction\r\n * @param {Matter.Body} bodyA\r\n * @param {Matter.Body} bodyB\r\n * @returns {(Vector|undefined)} a force vector (optional)\r\n */\r\n"]},"metadata":{},"sourceType":"script"}