{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetValue = require('../object/GetValue');\n\nvar Shuffle = require('./Shuffle');\n\nvar BuildChunk = function (a, b, qty) {\n  var out = [];\n\n  for (var aIndex = 0; aIndex < a.length; aIndex++) {\n    for (var bIndex = 0; bIndex < b.length; bIndex++) {\n      for (var i = 0; i < qty; i++) {\n        out.push({\n          a: a[aIndex],\n          b: b[bIndex]\n        });\n      }\n    }\n  }\n\n  return out;\n};\n/**\r\n * Creates an array populated with a range of values, based on the given arguments and configuration object.\r\n *\r\n * Range ([a,b,c], [1,2,3]) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2,3], qty = 3) =\r\n * a1, a1, a1, a2, a2, a2, a3, a3, a3, b1, b1, b1, b2, b2, b2, b3, b3, b3\r\n * \r\n * Range ([a,b,c], [1,2,3], repeat x1) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3, a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2], repeat -1 = endless, max = 14) =\r\n * Maybe if max is set then repeat goes to -1 automatically?\r\n * a1, a2, b1, b2, a1, a2, b1, b2, a1, a2, b1, b2, a1, a2 (capped at 14 elements)\r\n * \r\n * Range ([a], [1,2,3,4,5], random = true) =\r\n * a4, a1, a5, a2, a3\r\n * \r\n * Range ([a, b], [1,2,3], random = true) =\r\n * b3, a2, a1, b1, a3, b2\r\n * \r\n * Range ([a, b, c], [1,2,3], randomB = true) =\r\n * a3, a1, a2, b2, b3, b1, c1, c3, c2\r\n * \r\n * Range ([a], [1,2,3,4,5], yoyo = true) =\r\n * a1, a2, a3, a4, a5, a5, a4, a3, a2, a1\r\n * \r\n * Range ([a, b], [1,2,3], yoyo = true) =\r\n * a1, a2, a3, b1, b2, b3, b3, b2, b1, a3, a2, a1\r\n *\r\n * @function Phaser.Utils.Array.Range\r\n * @since 3.0.0\r\n *\r\n * @param {array} a - The first array of range elements.\r\n * @param {array} b - The second array of range elements.\r\n * @param {object} [options] - A range configuration object. Can contain: repeat, random, randomB, yoyo, max, qty.\r\n *\r\n * @return {array} An array of arranged elements.\r\n */\n\n\nvar Range = function (a, b, options) {\n  var max = GetValue(options, 'max', 0);\n  var qty = GetValue(options, 'qty', 1);\n  var random = GetValue(options, 'random', false);\n  var randomB = GetValue(options, 'randomB', false);\n  var repeat = GetValue(options, 'repeat', 0);\n  var yoyo = GetValue(options, 'yoyo', false);\n  var out = [];\n\n  if (randomB) {\n    Shuffle(b);\n  } //  Endless repeat, so limit by max\n\n\n  if (repeat === -1) {\n    if (max === 0) {\n      repeat = 0;\n    } else {\n      //  Work out how many repeats we need\n      var total = a.length * b.length * qty;\n\n      if (yoyo) {\n        total *= 2;\n      }\n\n      repeat = Math.ceil(max / total);\n    }\n  }\n\n  for (var i = 0; i <= repeat; i++) {\n    var chunk = BuildChunk(a, b, qty);\n\n    if (random) {\n      Shuffle(chunk);\n    }\n\n    out = out.concat(chunk);\n\n    if (yoyo) {\n      chunk.reverse();\n      out = out.concat(chunk);\n    }\n  }\n\n  if (max) {\n    out.splice(max);\n  }\n\n  return out;\n};\n\nmodule.exports = Range;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/Range.js"],"names":["GetValue","require","Shuffle","BuildChunk","a","b","qty","out","aIndex","length","bIndex","i","push","Range","options","max","random","randomB","repeat","yoyo","total","Math","ceil","chunk","concat","reverse","splice","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetValue = require('../object/GetValue');\r\nvar Shuffle = require('./Shuffle');\r\n\r\nvar BuildChunk = function (a, b, qty)\r\n{\r\n    var out = [];\r\n\r\n    for (var aIndex = 0; aIndex < a.length; aIndex++)\r\n    {\r\n        for (var bIndex = 0; bIndex < b.length; bIndex++)\r\n        {\r\n            for (var i = 0; i < qty; i++)\r\n            {\r\n                out.push({ a: a[aIndex], b: b[bIndex] });\r\n            }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\n/**\r\n * Creates an array populated with a range of values, based on the given arguments and configuration object.\r\n *\r\n * Range ([a,b,c], [1,2,3]) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2,3], qty = 3) =\r\n * a1, a1, a1, a2, a2, a2, a3, a3, a3, b1, b1, b1, b2, b2, b2, b3, b3, b3\r\n * \r\n * Range ([a,b,c], [1,2,3], repeat x1) =\r\n * a1, a2, a3, b1, b2, b3, c1, c2, c3, a1, a2, a3, b1, b2, b3, c1, c2, c3\r\n * \r\n * Range ([a,b], [1,2], repeat -1 = endless, max = 14) =\r\n * Maybe if max is set then repeat goes to -1 automatically?\r\n * a1, a2, b1, b2, a1, a2, b1, b2, a1, a2, b1, b2, a1, a2 (capped at 14 elements)\r\n * \r\n * Range ([a], [1,2,3,4,5], random = true) =\r\n * a4, a1, a5, a2, a3\r\n * \r\n * Range ([a, b], [1,2,3], random = true) =\r\n * b3, a2, a1, b1, a3, b2\r\n * \r\n * Range ([a, b, c], [1,2,3], randomB = true) =\r\n * a3, a1, a2, b2, b3, b1, c1, c3, c2\r\n * \r\n * Range ([a], [1,2,3,4,5], yoyo = true) =\r\n * a1, a2, a3, a4, a5, a5, a4, a3, a2, a1\r\n * \r\n * Range ([a, b], [1,2,3], yoyo = true) =\r\n * a1, a2, a3, b1, b2, b3, b3, b2, b1, a3, a2, a1\r\n *\r\n * @function Phaser.Utils.Array.Range\r\n * @since 3.0.0\r\n *\r\n * @param {array} a - The first array of range elements.\r\n * @param {array} b - The second array of range elements.\r\n * @param {object} [options] - A range configuration object. Can contain: repeat, random, randomB, yoyo, max, qty.\r\n *\r\n * @return {array} An array of arranged elements.\r\n */\r\nvar Range = function (a, b, options)\r\n{\r\n    var max = GetValue(options, 'max', 0);\r\n    var qty = GetValue(options, 'qty', 1);\r\n    var random = GetValue(options, 'random', false);\r\n    var randomB = GetValue(options, 'randomB', false);\r\n    var repeat = GetValue(options, 'repeat', 0);\r\n    var yoyo = GetValue(options, 'yoyo', false);\r\n\r\n    var out = [];\r\n\r\n    if (randomB)\r\n    {\r\n        Shuffle(b);\r\n    }\r\n\r\n    //  Endless repeat, so limit by max\r\n    if (repeat === -1)\r\n    {\r\n        if (max === 0)\r\n        {\r\n            repeat = 0;\r\n        }\r\n        else\r\n        {\r\n            //  Work out how many repeats we need\r\n            var total = (a.length * b.length) * qty;\r\n\r\n            if (yoyo)\r\n            {\r\n                total *= 2;\r\n            }\r\n\r\n            repeat = Math.ceil(max / total);\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i <= repeat; i++)\r\n    {\r\n        var chunk = BuildChunk(a, b, qty);\r\n\r\n        if (random)\r\n        {\r\n            Shuffle(chunk);\r\n        }\r\n\r\n        out = out.concat(chunk);\r\n\r\n        if (yoyo)\r\n        {\r\n            chunk.reverse();\r\n\r\n            out = out.concat(chunk);\r\n        }\r\n    }\r\n\r\n    if (max)\r\n    {\r\n        out.splice(max);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Range;\r\n"]},"metadata":{},"sourceType":"script"}