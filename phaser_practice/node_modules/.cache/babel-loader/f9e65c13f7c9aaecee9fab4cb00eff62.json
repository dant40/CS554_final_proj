{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar HexStringToColor = require('./HexStringToColor');\n\nvar IntegerToColor = require('./IntegerToColor');\n\nvar ObjectToColor = require('./ObjectToColor');\n\nvar RGBStringToColor = require('./RGBStringToColor');\n/**\r\n * Converts the given source color value into an instance of a Color class.\r\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\r\n *\r\n * @function Phaser.Display.Color.ValueToColor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\n\n\nvar ValueToColor = function (input) {\n  var t = typeof input;\n\n  switch (t) {\n    case 'string':\n      if (input.substr(0, 3).toLowerCase() === 'rgb') {\n        return RGBStringToColor(input);\n      } else {\n        return HexStringToColor(input);\n      }\n\n    case 'number':\n      return IntegerToColor(input);\n\n    case 'object':\n      return ObjectToColor(input);\n  }\n};\n\nmodule.exports = ValueToColor;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/ValueToColor.js"],"names":["HexStringToColor","require","IntegerToColor","ObjectToColor","RGBStringToColor","ValueToColor","input","t","substr","toLowerCase","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;AAWA,IAAII,YAAY,GAAG,UAAUC,KAAV,EACnB;AACI,MAAIC,CAAC,GAAG,OAAOD,KAAf;;AAEA,UAAQC,CAAR;AAEI,SAAK,QAAL;AAEI,UAAID,KAAK,CAACE,MAAN,CAAa,CAAb,EAAgB,CAAhB,EAAmBC,WAAnB,OAAqC,KAAzC,EACA;AACI,eAAOL,gBAAgB,CAACE,KAAD,CAAvB;AACH,OAHD,MAKA;AACI,eAAON,gBAAgB,CAACM,KAAD,CAAvB;AACH;;AAEL,SAAK,QAAL;AAEI,aAAOJ,cAAc,CAACI,KAAD,CAArB;;AAEJ,SAAK,QAAL;AAEI,aAAOH,aAAa,CAACG,KAAD,CAApB;AAnBR;AAqBH,CAzBD;;AA2BAI,MAAM,CAACC,OAAP,GAAiBN,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar HexStringToColor = require('./HexStringToColor');\r\nvar IntegerToColor = require('./IntegerToColor');\r\nvar ObjectToColor = require('./ObjectToColor');\r\nvar RGBStringToColor = require('./RGBStringToColor');\r\n\r\n/**\r\n * Converts the given source color value into an instance of a Color class.\r\n * The value can be either a string, prefixed with `rgb` or a hex string, a number or an Object.\r\n *\r\n * @function Phaser.Display.Color.ValueToColor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|number|Phaser.Types.Display.InputColorObject)} input - The source color value to convert.\r\n *\r\n * @return {Phaser.Display.Color} A Color object.\r\n */\r\nvar ValueToColor = function (input)\r\n{\r\n    var t = typeof input;\r\n\r\n    switch (t)\r\n    {\r\n        case 'string':\r\n\r\n            if (input.substr(0, 3).toLowerCase() === 'rgb')\r\n            {\r\n                return RGBStringToColor(input);\r\n            }\r\n            else\r\n            {\r\n                return HexStringToColor(input);\r\n            }\r\n\r\n        case 'number':\r\n\r\n            return IntegerToColor(input);\r\n\r\n        case 'object':\r\n\r\n            return ObjectToColor(input);\r\n    }\r\n};\r\n\r\nmodule.exports = ValueToColor;\r\n"]},"metadata":{},"sourceType":"script"}