{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar RectangleToTriangle = require('./RectangleToTriangle');\n\nvar GetLineToRectangle = require('./GetLineToRectangle');\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetRectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetRectangleToTriangle = function (rect, triangle, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (RectangleToTriangle(rect, triangle)) {\n    var lineA = triangle.getLineA();\n    var lineB = triangle.getLineB();\n    var lineC = triangle.getLineC();\n    GetLineToRectangle(lineA, rect, out);\n    GetLineToRectangle(lineB, rect, out);\n    GetLineToRectangle(lineC, rect, out);\n  }\n\n  return out;\n};\n\nmodule.exports = GetRectangleToTriangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetRectangleToTriangle.js"],"names":["RectangleToTriangle","require","GetLineToRectangle","GetRectangleToTriangle","rect","triangle","out","undefined","lineA","getLineA","lineB","getLineB","lineC","getLineC","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAhC;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,sBAAsB,GAAG,UAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,GAA1B,EAC7B;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIN,mBAAmB,CAACI,IAAD,EAAOC,QAAP,CAAvB,EACA;AACI,QAAIG,KAAK,GAAGH,QAAQ,CAACI,QAAT,EAAZ;AACA,QAAIC,KAAK,GAAGL,QAAQ,CAACM,QAAT,EAAZ;AACA,QAAIC,KAAK,GAAGP,QAAQ,CAACQ,QAAT,EAAZ;AAEAX,IAAAA,kBAAkB,CAACM,KAAD,EAAQJ,IAAR,EAAcE,GAAd,CAAlB;AACAJ,IAAAA,kBAAkB,CAACQ,KAAD,EAAQN,IAAR,EAAcE,GAAd,CAAlB;AACAJ,IAAAA,kBAAkB,CAACU,KAAD,EAAQR,IAAR,EAAcE,GAAd,CAAlB;AACH;;AAED,SAAOA,GAAP;AACH,CAhBD;;AAkBAQ,MAAM,CAACC,OAAP,GAAiBZ,sBAAjB","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar RectangleToTriangle = require('./RectangleToTriangle');\r\nvar GetLineToRectangle = require('./GetLineToRectangle');\r\n\r\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape,\r\n * and returns the intersection points as a Point object array.\r\n *\r\n * @function Phaser.Geom.Intersects.GetRectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetRectangleToTriangle = function (rect, triangle, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (RectangleToTriangle(rect, triangle))\r\n    {\r\n        var lineA = triangle.getLineA();\r\n        var lineB = triangle.getLineB();\r\n        var lineC = triangle.getLineC();\r\n\r\n        GetLineToRectangle(lineA, rect, out);\r\n        GetLineToRectangle(lineB, rect, out);\r\n        GetLineToRectangle(lineC, rect, out);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetRectangleToTriangle;\r\n"]},"metadata":{},"sourceType":"script"}