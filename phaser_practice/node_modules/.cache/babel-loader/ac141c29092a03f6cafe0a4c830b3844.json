{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GameObjectFactory = require('../GameObjectFactory');\n\nvar ParticleEmitterManager = require('./ParticleEmitterManager');\n/**\r\n * Creates a new Particle Emitter Manager Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Particles Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#particles\r\n * @since 3.0.0\r\n *\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer|object)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n *\r\n * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} The Game Object that was created.\r\n */\n\n\nGameObjectFactory.register('particles', function (key, frame, emitters) {\n  var manager = new ParticleEmitterManager(this.scene, key, frame, emitters);\n  this.displayList.add(manager);\n  this.updateList.add(manager);\n  return manager;\n}); //  When registering a factory function 'this' refers to the GameObjectFactory context.\n//\n//  There are several properties available to use:\n//\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\n//  this.displayList - a reference to the Display List the Scene owns\n//  this.updateList - a reference to the Update List the Scene owns","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/ParticleManagerFactory.js"],"names":["GameObjectFactory","require","ParticleEmitterManager","register","key","frame","emitters","manager","scene","displayList","add","updateList"],"mappings":"AAAA;;;;;AAMA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,sBAAD,CAA/B;;AACA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;AAcAD,iBAAiB,CAACG,QAAlB,CAA2B,WAA3B,EAAwC,UAAUC,GAAV,EAAeC,KAAf,EAAsBC,QAAtB,EACxC;AACI,MAAIC,OAAO,GAAG,IAAIL,sBAAJ,CAA2B,KAAKM,KAAhC,EAAuCJ,GAAvC,EAA4CC,KAA5C,EAAmDC,QAAnD,CAAd;AAEA,OAAKG,WAAL,CAAiBC,GAAjB,CAAqBH,OAArB;AACA,OAAKI,UAAL,CAAgBD,GAAhB,CAAoBH,OAApB;AAEA,SAAOA,OAAP;AACH,CARD,E,CAUA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GameObjectFactory = require('../GameObjectFactory');\r\nvar ParticleEmitterManager = require('./ParticleEmitterManager');\r\n\r\n/**\r\n * Creates a new Particle Emitter Manager Game Object and adds it to the Scene.\r\n *\r\n * Note: This method will only be available if the Particles Game Object has been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#particles\r\n * @since 3.0.0\r\n *\r\n * @param {string} texture - The key of the Texture this Game Object will use to render with, as stored in the Texture Manager.\r\n * @param {(string|integer|object)} [frame] - An optional frame from the Texture this Game Object is rendering with.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n *\r\n * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} The Game Object that was created.\r\n */\r\nGameObjectFactory.register('particles', function (key, frame, emitters)\r\n{\r\n    var manager = new ParticleEmitterManager(this.scene, key, frame, emitters);\r\n\r\n    this.displayList.add(manager);\r\n    this.updateList.add(manager);\r\n\r\n    return manager;\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n"]},"metadata":{},"sourceType":"script"}