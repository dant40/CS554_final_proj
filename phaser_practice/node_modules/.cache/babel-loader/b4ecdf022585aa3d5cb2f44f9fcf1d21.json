{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('./Point');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Point.Interpolate\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point} pointA - The starting `Point` for the interpolation.\r\n * @param {Phaser.Geom.Point} pointB - The target `Point` for the interpolation.\r\n * @param {number} [t=0] - The amount to interpolate between the two points. Generally, a value between 0 (returns the starting `Point`) and 1 (returns the target `Point`). If omitted, 0 is used.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional `Point` object whose `x` and `y` values will be set to the result of the interpolation (can also be any object with `x` and `y` properties). If omitted, a new `Point` created and returned.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} Either the object from the `out` argument with the properties `x` and `y` set to the result of the interpolation or a newly created `Point` object.\r\n */\n\n\nvar Interpolate = function (pointA, pointB, t, out) {\n  if (t === undefined) {\n    t = 0;\n  }\n\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  out.x = pointA.x + (pointB.x - pointA.x) * t;\n  out.y = pointA.y + (pointB.y - pointA.y) * t;\n  return out;\n};\n\nmodule.exports = Interpolate;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/point/Interpolate.js"],"names":["Point","require","Interpolate","pointA","pointB","t","out","undefined","x","y","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,WAAW,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,CAA1B,EAA6BC,GAA7B,EAClB;AACI,MAAID,CAAC,KAAKE,SAAV,EAAqB;AAAEF,IAAAA,CAAC,GAAG,CAAJ;AAAQ;;AAC/B,MAAIC,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIN,KAAJ,EAAN;AAAoB;;AAE7CM,EAAAA,GAAG,CAACE,CAAJ,GAAQL,MAAM,CAACK,CAAP,GAAY,CAACJ,MAAM,CAACI,CAAP,GAAWL,MAAM,CAACK,CAAnB,IAAwBH,CAA5C;AACAC,EAAAA,GAAG,CAACG,CAAJ,GAAQN,MAAM,CAACM,CAAP,GAAY,CAACL,MAAM,CAACK,CAAP,GAAWN,MAAM,CAACM,CAAnB,IAAwBJ,CAA5C;AAEA,SAAOC,GAAP;AACH,CATD;;AAWAI,MAAM,CAACC,OAAP,GAAiBT,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('./Point');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Point.Interpolate\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point} pointA - The starting `Point` for the interpolation.\r\n * @param {Phaser.Geom.Point} pointB - The target `Point` for the interpolation.\r\n * @param {number} [t=0] - The amount to interpolate between the two points. Generally, a value between 0 (returns the starting `Point`) and 1 (returns the target `Point`). If omitted, 0 is used.\r\n * @param {(Phaser.Geom.Point|object)} [out] - An optional `Point` object whose `x` and `y` values will be set to the result of the interpolation (can also be any object with `x` and `y` properties). If omitted, a new `Point` created and returned.\r\n *\r\n * @return {(Phaser.Geom.Point|object)} Either the object from the `out` argument with the properties `x` and `y` set to the result of the interpolation or a newly created `Point` object.\r\n */\r\nvar Interpolate = function (pointA, pointB, t, out)\r\n{\r\n    if (t === undefined) { t = 0; }\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    out.x = pointA.x + ((pointB.x - pointA.x) * t);\r\n    out.y = pointA.y + ((pointB.y - pointA.y) * t);\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Interpolate;\r\n"]},"metadata":{},"sourceType":"script"}