{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * @classdesc\r\n * A class for representing data about a map. Maps are parsed from CSV, Tiled, etc. into this\r\n * format. A Tilemap object get a copy of this data and then unpacks the needed properties into\r\n * itself.\r\n *\r\n * @class MapData\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tilemaps.MapDataConfig} [config] - The Map configuration object.\r\n */\n\n\nvar MapData = new Class({\n  initialize: function MapData(config) {\n    if (config === undefined) {\n      config = {};\n    }\n    /**\r\n     * The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#name\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.name = GetFastValue(config, 'name', 'map');\n    /**\r\n     * The width of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = GetFastValue(config, 'width', 0);\n    /**\r\n     * The height of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = GetFastValue(config, 'height', 0);\n    /**\r\n     * If the map is infinite or not.\r\n     *\r\n     * @name Phaser.Tilemaps.MapData#infinite\r\n     * @type {boolean}\r\n     * @since 3.17.0\r\n     */\n\n    this.infinite = GetFastValue(config, 'infinite', false);\n    /**\r\n     * The width of the tiles.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tileWidth\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileWidth = GetFastValue(config, 'tileWidth', 0);\n    /**\r\n     * The height of the tiles.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tileHeight\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.tileHeight = GetFastValue(config, 'tileHeight', 0);\n    /**\r\n     * The width in pixels of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#widthInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.widthInPixels = GetFastValue(config, 'widthInPixels', this.width * this.tileWidth);\n    /**\r\n     * The height in pixels of the entire tilemap.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#heightInPixels\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.heightInPixels = GetFastValue(config, 'heightInPixels', this.height * this.tileHeight);\n    /**\r\n     * [description]\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#format\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.format = GetFastValue(config, 'format', null);\n    /**\r\n     * The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#orientation\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.orientation = GetFastValue(config, 'orientation', 'orthogonal');\n    /**\r\n     * Determines the draw order of tilemap. Default is right-down\r\n     * \r\n     * 0, or 'right-down'\r\n     * 1, or 'left-down'\r\n     * 2, or 'right-up'\r\n     * 3, or 'left-up'\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#renderOrder\r\n     * @type {string}\r\n     * @since 3.12.0\r\n     */\n\n    this.renderOrder = GetFastValue(config, 'renderOrder', 'right-down');\n    /**\r\n     * The version of the map data (as specified in Tiled).\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#version\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.version = GetFastValue(config, 'version', '1');\n    /**\r\n     * Map specific properties (can be specified in Tiled)\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#properties\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.properties = GetFastValue(config, 'properties', {});\n    /**\r\n     * An array with all the layers configured to the MapData.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#layers\r\n     * @type {(Phaser.Tilemaps.LayerData[]|Phaser.Tilemaps.ObjectLayer)}\r\n     * @since 3.0.0\r\n     */\n\n    this.layers = GetFastValue(config, 'layers', []);\n    /**\r\n     * An array of Tiled Image Layers.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#images\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.images = GetFastValue(config, 'images', []);\n    /**\r\n     * An object of Tiled Object Layers.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#objects\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.objects = GetFastValue(config, 'objects', {});\n    /**\r\n      * An object of collision data. Must be created as physics object or will return undefined.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#collision\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.collision = GetFastValue(config, 'collision', {});\n    /**\r\n     * An array of Tilesets.\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tilesets\r\n     * @type {Phaser.Tilemaps.Tileset[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.tilesets = GetFastValue(config, 'tilesets', []);\n    /**\r\n     * The collection of images the map uses(specified in Tiled)\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#imageCollections\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.imageCollections = GetFastValue(config, 'imageCollections', []);\n    /**\r\n     * [description]\r\n     * \r\n     * @name Phaser.Tilemaps.MapData#tiles\r\n     * @type {array}\r\n     * @since 3.0.0\r\n     */\n\n    this.tiles = GetFastValue(config, 'tiles', []);\n  }\n});\nmodule.exports = MapData;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/mapdata/MapData.js"],"names":["Class","require","GetFastValue","MapData","initialize","config","undefined","name","width","height","infinite","tileWidth","tileHeight","widthInPixels","heightInPixels","format","orientation","renderOrder","version","properties","layers","images","objects","collision","tilesets","imageCollections","tiles","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,iCAAD,CAA1B;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,OAAO,GAAG,IAAIH,KAAJ,CAAU;AAEpBI,EAAAA,UAAU,EAEV,SAASD,OAAT,CAAkBE,MAAlB,EACA;AACI,QAAIA,MAAM,KAAKC,SAAf,EAA0B;AAAED,MAAAA,MAAM,GAAG,EAAT;AAAc;AAE1C;;;;;;;;;AAOA,SAAKE,IAAL,GAAYL,YAAY,CAACG,MAAD,EAAS,MAAT,EAAiB,KAAjB,CAAxB;AAEA;;;;;;;;AAOA,SAAKG,KAAL,GAAaN,YAAY,CAACG,MAAD,EAAS,OAAT,EAAkB,CAAlB,CAAzB;AAEA;;;;;;;;AAOA,SAAKI,MAAL,GAAcP,YAAY,CAACG,MAAD,EAAS,QAAT,EAAmB,CAAnB,CAA1B;AAEA;;;;;;;;AAOA,SAAKK,QAAL,GAAgBR,YAAY,CAACG,MAAD,EAAS,UAAT,EAAqB,KAArB,CAA5B;AAEA;;;;;;;;AAOA,SAAKM,SAAL,GAAiBT,YAAY,CAACG,MAAD,EAAS,WAAT,EAAsB,CAAtB,CAA7B;AAEA;;;;;;;;AAOA,SAAKO,UAAL,GAAkBV,YAAY,CAACG,MAAD,EAAS,YAAT,EAAuB,CAAvB,CAA9B;AAEA;;;;;;;;AAOA,SAAKQ,aAAL,GAAqBX,YAAY,CAACG,MAAD,EAAS,eAAT,EAA0B,KAAKG,KAAL,GAAa,KAAKG,SAA5C,CAAjC;AAEA;;;;;;;;AAOA,SAAKG,cAAL,GAAsBZ,YAAY,CAACG,MAAD,EAAS,gBAAT,EAA2B,KAAKI,MAAL,GAAc,KAAKG,UAA9C,CAAlC;AAEA;;;;;;;;AAOA,SAAKG,MAAL,GAAcb,YAAY,CAACG,MAAD,EAAS,QAAT,EAAmB,IAAnB,CAA1B;AAEA;;;;;;;;AAOA,SAAKW,WAAL,GAAmBd,YAAY,CAACG,MAAD,EAAS,aAAT,EAAwB,YAAxB,CAA/B;AAEA;;;;;;;;;;;;;AAYA,SAAKY,WAAL,GAAmBf,YAAY,CAACG,MAAD,EAAS,aAAT,EAAwB,YAAxB,CAA/B;AAEA;;;;;;;;AAOA,SAAKa,OAAL,GAAehB,YAAY,CAACG,MAAD,EAAS,SAAT,EAAoB,GAApB,CAA3B;AAEA;;;;;;;;AAOA,SAAKc,UAAL,GAAkBjB,YAAY,CAACG,MAAD,EAAS,YAAT,EAAuB,EAAvB,CAA9B;AAEA;;;;;;;;AAOA,SAAKe,MAAL,GAAclB,YAAY,CAACG,MAAD,EAAS,QAAT,EAAmB,EAAnB,CAA1B;AAEA;;;;;;;;AAOA,SAAKgB,MAAL,GAAcnB,YAAY,CAACG,MAAD,EAAS,QAAT,EAAmB,EAAnB,CAA1B;AAEA;;;;;;;;AAOA,SAAKiB,OAAL,GAAepB,YAAY,CAACG,MAAD,EAAS,SAAT,EAAoB,EAApB,CAA3B;AAEA;;;;;;;;AAOA,SAAKkB,SAAL,GAAiBrB,YAAY,CAACG,MAAD,EAAS,WAAT,EAAsB,EAAtB,CAA7B;AAEA;;;;;;;;AAOA,SAAKmB,QAAL,GAAgBtB,YAAY,CAACG,MAAD,EAAS,UAAT,EAAqB,EAArB,CAA5B;AAEA;;;;;;;;AAOA,SAAKoB,gBAAL,GAAwBvB,YAAY,CAACG,MAAD,EAAS,kBAAT,EAA6B,EAA7B,CAApC;AAEA;;;;;;;;AAOA,SAAKqB,KAAL,GAAaxB,YAAY,CAACG,MAAD,EAAS,OAAT,EAAkB,EAAlB,CAAzB;AACH;AAhMmB,CAAV,CAAd;AAoMAsB,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * @classdesc\r\n * A class for representing data about a map. Maps are parsed from CSV, Tiled, etc. into this\r\n * format. A Tilemap object get a copy of this data and then unpacks the needed properties into\r\n * itself.\r\n *\r\n * @class MapData\r\n * @memberof Phaser.Tilemaps\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tilemaps.MapDataConfig} [config] - The Map configuration object.\r\n */\r\nvar MapData = new Class({\r\n\r\n    initialize:\r\n\r\n    function MapData (config)\r\n    {\r\n        if (config === undefined) { config = {}; }\r\n\r\n        /**\r\n         * The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#name\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.name = GetFastValue(config, 'name', 'map');\r\n\r\n        /**\r\n         * The width of the entire tilemap.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = GetFastValue(config, 'width', 0);\r\n\r\n        /**\r\n         * The height of the entire tilemap.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = GetFastValue(config, 'height', 0);\r\n\r\n        /**\r\n         * If the map is infinite or not.\r\n         *\r\n         * @name Phaser.Tilemaps.MapData#infinite\r\n         * @type {boolean}\r\n         * @since 3.17.0\r\n         */\r\n        this.infinite = GetFastValue(config, 'infinite', false);\r\n\r\n        /**\r\n         * The width of the tiles.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#tileWidth\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileWidth = GetFastValue(config, 'tileWidth', 0);\r\n\r\n        /**\r\n         * The height of the tiles.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#tileHeight\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.tileHeight = GetFastValue(config, 'tileHeight', 0);\r\n\r\n        /**\r\n         * The width in pixels of the entire tilemap.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#widthInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.widthInPixels = GetFastValue(config, 'widthInPixels', this.width * this.tileWidth);\r\n\r\n        /**\r\n         * The height in pixels of the entire tilemap.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#heightInPixels\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.heightInPixels = GetFastValue(config, 'heightInPixels', this.height * this.tileHeight);\r\n\r\n        /**\r\n         * [description]\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#format\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.format = GetFastValue(config, 'format', null);\r\n\r\n        /**\r\n         * The orientation of the map data (i.e. orthogonal, isometric, hexagonal), default 'orthogonal'.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#orientation\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.orientation = GetFastValue(config, 'orientation', 'orthogonal');\r\n\r\n        /**\r\n         * Determines the draw order of tilemap. Default is right-down\r\n         * \r\n         * 0, or 'right-down'\r\n         * 1, or 'left-down'\r\n         * 2, or 'right-up'\r\n         * 3, or 'left-up'\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#renderOrder\r\n         * @type {string}\r\n         * @since 3.12.0\r\n         */\r\n        this.renderOrder = GetFastValue(config, 'renderOrder', 'right-down');\r\n\r\n        /**\r\n         * The version of the map data (as specified in Tiled).\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#version\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.version = GetFastValue(config, 'version', '1');\r\n\r\n        /**\r\n         * Map specific properties (can be specified in Tiled)\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#properties\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.properties = GetFastValue(config, 'properties', {});\r\n\r\n        /**\r\n         * An array with all the layers configured to the MapData.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#layers\r\n         * @type {(Phaser.Tilemaps.LayerData[]|Phaser.Tilemaps.ObjectLayer)}\r\n         * @since 3.0.0\r\n         */\r\n        this.layers = GetFastValue(config, 'layers', []);\r\n\r\n        /**\r\n         * An array of Tiled Image Layers.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#images\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.images = GetFastValue(config, 'images', []);\r\n\r\n        /**\r\n         * An object of Tiled Object Layers.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#objects\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.objects = GetFastValue(config, 'objects', {});\r\n\r\n        /**\r\n          * An object of collision data. Must be created as physics object or will return undefined.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#collision\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.collision = GetFastValue(config, 'collision', {});\r\n\r\n        /**\r\n         * An array of Tilesets.\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#tilesets\r\n         * @type {Phaser.Tilemaps.Tileset[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.tilesets = GetFastValue(config, 'tilesets', []);\r\n\r\n        /**\r\n         * The collection of images the map uses(specified in Tiled)\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#imageCollections\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.imageCollections = GetFastValue(config, 'imageCollections', []);\r\n\r\n        /**\r\n         * [description]\r\n         * \r\n         * @name Phaser.Tilemaps.MapData#tiles\r\n         * @type {array}\r\n         * @since 3.0.0\r\n         */\r\n        this.tiles = GetFastValue(config, 'tiles', []);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = MapData;\r\n"]},"metadata":{},"sourceType":"script"}