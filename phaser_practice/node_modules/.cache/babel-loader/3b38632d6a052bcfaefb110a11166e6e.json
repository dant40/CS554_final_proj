{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MeasureText = require('./MeasureText'); //  Key: [ Object Key, Default Value ]\n\n\nvar propertyMap = {\n  fontFamily: ['fontFamily', 'Courier'],\n  fontSize: ['fontSize', '16px'],\n  fontStyle: ['fontStyle', ''],\n  backgroundColor: ['backgroundColor', null],\n  color: ['color', '#fff'],\n  stroke: ['stroke', '#fff'],\n  strokeThickness: ['strokeThickness', 0],\n  shadowOffsetX: ['shadow.offsetX', 0],\n  shadowOffsetY: ['shadow.offsetY', 0],\n  shadowColor: ['shadow.color', '#000'],\n  shadowBlur: ['shadow.blur', 0],\n  shadowStroke: ['shadow.stroke', false],\n  shadowFill: ['shadow.fill', false],\n  align: ['align', 'left'],\n  maxLines: ['maxLines', 0],\n  fixedWidth: ['fixedWidth', 0],\n  fixedHeight: ['fixedHeight', 0],\n  resolution: ['resolution', 0],\n  rtl: ['rtl', false],\n  testString: ['testString', '|MÃ‰qgy'],\n  baselineX: ['baselineX', 1.2],\n  baselineY: ['baselineY', 1.4],\n  wordWrapWidth: ['wordWrap.width', null],\n  wordWrapCallback: ['wordWrap.callback', null],\n  wordWrapCallbackScope: ['wordWrap.callbackScope', null],\n  wordWrapUseAdvanced: ['wordWrap.useAdvancedWrap', false]\n};\n/**\r\n * @classdesc\r\n * A TextStyle class manages all of the style settings for a Text object.\r\n * \r\n * Text Game Objects create a TextStyle instance automatically, which is\r\n * accessed via the `Text.style` property. You do not normally need to\r\n * instantiate one yourself.\r\n *\r\n * @class TextStyle\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object that this TextStyle is styling.\r\n * @param {Phaser.Types.GameObjects.Text.TextStyle} style - The style settings to set.\r\n */\n\nvar TextStyle = new Class({\n  initialize: function TextStyle(text, style) {\n    /**\r\n     * The Text object that this TextStyle is styling.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#parent\r\n     * @type {Phaser.GameObjects.Text}\r\n     * @since 3.0.0\r\n     */\n    this.parent = text;\n    /**\r\n     * The font family.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontFamily\r\n     * @type {string}\r\n     * @default 'Courier'\r\n     * @since 3.0.0\r\n     */\n\n    this.fontFamily;\n    /**\r\n     * The font size.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontSize\r\n     * @type {string}\r\n     * @default '16px'\r\n     * @since 3.0.0\r\n     */\n\n    this.fontSize;\n    /**\r\n     * The font style.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fontStyle\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.fontStyle;\n    /**\r\n     * The background color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#backgroundColor\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.backgroundColor;\n    /**\r\n     * The text fill color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#color\r\n     * @type {string}\r\n     * @default '#fff'\r\n     * @since 3.0.0\r\n     */\n\n    this.color;\n    /**\r\n     * The text stroke color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#stroke\r\n     * @type {string}\r\n     * @default '#fff'\r\n     * @since 3.0.0\r\n     */\n\n    this.stroke;\n    /**\r\n     * The text stroke thickness.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#strokeThickness\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.strokeThickness;\n    /**\r\n     * The horizontal shadow offset.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowOffsetX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowOffsetX;\n    /**\r\n     * The vertical shadow offset.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowOffsetY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowOffsetY;\n    /**\r\n     * The shadow color.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowColor\r\n     * @type {string}\r\n     * @default '#000'\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowColor;\n    /**\r\n     * The shadow blur radius.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowBlur\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowBlur;\n    /**\r\n     * Whether shadow stroke is enabled or not.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowStroke\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowStroke;\n    /**\r\n     * Whether shadow fill is enabled or not.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#shadowFill\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.shadowFill;\n    /**\r\n     * The text alignment.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#align\r\n     * @type {string}\r\n     * @default 'left'\r\n     * @since 3.0.0\r\n     */\n\n    this.align;\n    /**\r\n     * The maximum number of lines to draw.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#maxLines\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.maxLines;\n    /**\r\n     * The fixed width of the text.\r\n     *\r\n     * `0` means no fixed with.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fixedWidth\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.fixedWidth;\n    /**\r\n     * The fixed height of the text.\r\n     *\r\n     * `0` means no fixed height.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#fixedHeight\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.fixedHeight;\n    /**\r\n     * The resolution the text is rendered to its internal canvas at.\r\n     * The default is 0, which means it will use the resolution set in the Game Config.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#resolution\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.12.0\r\n     */\n\n    this.resolution;\n    /**\r\n     * Whether the text should render right to left.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#rtl\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.rtl;\n    /**\r\n     * The test string to use when measuring the font.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#testString\r\n     * @type {string}\r\n     * @default '|MÉqgy'\r\n     * @since 3.0.0\r\n     */\n\n    this.testString;\n    /**\r\n     * The amount of horizontal padding added to the width of the text when calculating the font metrics.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#baselineX\r\n     * @type {number}\r\n     * @default 1.2\r\n     * @since 3.3.0\r\n     */\n\n    this.baselineX;\n    /**\r\n     * The amount of vertical padding added to the height of the text when calculating the font metrics.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#baselineY\r\n     * @type {number}\r\n     * @default 1.4\r\n     * @since 3.3.0\r\n     */\n\n    this.baselineY;\n    /**\r\n     * The font style, size and family.\r\n     *\r\n     * @name Phaser.GameObjects.TextStyle#_font\r\n     * @type {string}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._font; //  Set to defaults + user style\n\n    this.setStyle(style, false, true);\n    var metrics = GetValue(style, 'metrics', false); //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning\n    //  Doing this is reset if you then change the font of this TextStyle after creation\n\n    if (metrics) {\n      this.metrics = {\n        ascent: GetValue(metrics, 'ascent', 0),\n        descent: GetValue(metrics, 'descent', 0),\n        fontSize: GetValue(metrics, 'fontSize', 0)\n      };\n    } else {\n      this.metrics = MeasureText(this);\n    }\n  },\n\n  /**\r\n   * Set the text style.\r\n   *\r\n   * @example\r\n   * text.setStyle({\r\n   *     fontSize: '64px',\r\n   *     fontFamily: 'Arial',\r\n   *     color: '#ffffff',\r\n   *     align: 'center',\r\n   *     backgroundColor: '#ff00ff'\r\n   * });\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Text.TextStyle} style - The style settings to set.\r\n   * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n   * @param {boolean} [setDefaults=false] - Use the default values is not set, or the local values.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setStyle: function (style, updateText, setDefaults) {\n    if (updateText === undefined) {\n      updateText = true;\n    }\n\n    if (setDefaults === undefined) {\n      setDefaults = false;\n    } //  Avoid type mutation\n\n\n    if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number') {\n      style.fontSize = style.fontSize.toString() + 'px';\n    }\n\n    for (var key in propertyMap) {\n      var value = setDefaults ? propertyMap[key][1] : this[key];\n\n      if (key === 'wordWrapCallback' || key === 'wordWrapCallbackScope') {\n        // Callback & scope should be set without processing the values\n        this[key] = GetValue(style, propertyMap[key][0], value);\n      } else {\n        this[key] = GetAdvancedValue(style, propertyMap[key][0], value);\n      }\n    } //  Allow for 'font' override\n\n\n    var font = GetValue(style, 'font', null);\n\n    if (font !== null) {\n      this.setFont(font, false);\n    }\n\n    this._font = [this.fontStyle, this.fontSize, this.fontFamily].join(' ').trim(); //  Allow for 'fill' to be used in place of 'color'\n\n    var fill = GetValue(style, 'fill', null);\n\n    if (fill !== null) {\n      this.color = fill;\n    }\n\n    if (updateText) {\n      return this.update(true);\n    } else {\n      return this.parent;\n    }\n  },\n\n  /**\r\n   * Synchronize the font settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncFont\r\n   * @since 3.0.0\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   */\n  syncFont: function (canvas, context) {\n    context.font = this._font;\n  },\n\n  /**\r\n   * Synchronize the text style settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   */\n  syncStyle: function (canvas, context) {\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = this.color;\n    context.strokeStyle = this.stroke;\n    context.lineWidth = this.strokeThickness;\n    context.lineCap = 'round';\n    context.lineJoin = 'round';\n  },\n\n  /**\r\n   * Synchronize the shadow settings to the given Canvas Rendering Context.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#syncShadow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n   * @param {boolean} enabled - Whether shadows are enabled or not.\r\n   */\n  syncShadow: function (context, enabled) {\n    if (enabled) {\n      context.shadowOffsetX = this.shadowOffsetX;\n      context.shadowOffsetY = this.shadowOffsetY;\n      context.shadowColor = this.shadowColor;\n      context.shadowBlur = this.shadowBlur;\n    } else {\n      context.shadowOffsetX = 0;\n      context.shadowOffsetY = 0;\n      context.shadowColor = 0;\n      context.shadowBlur = 0;\n    }\n  },\n\n  /**\r\n   * Update the style settings for the parent Text object.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} recalculateMetrics - Whether to recalculate font and text metrics.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  update: function (recalculateMetrics) {\n    if (recalculateMetrics) {\n      this._font = [this.fontStyle, this.fontSize, this.fontFamily].join(' ').trim();\n      this.metrics = MeasureText(this);\n    }\n\n    return this.parent.updateText();\n  },\n\n  /**\r\n   * Set the font.\r\n   *\r\n   * If a string is given, the font family is set.\r\n   *\r\n   * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n   * properties of that object are set.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFont\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|object)} font - The font family or font settings to set.\r\n   * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFont: function (font, updateText) {\n    if (updateText === undefined) {\n      updateText = true;\n    }\n\n    var fontFamily = font;\n    var fontSize = '';\n    var fontStyle = '';\n\n    if (typeof font !== 'string') {\n      fontFamily = GetValue(font, 'fontFamily', 'Courier');\n      fontSize = GetValue(font, 'fontSize', '16px');\n      fontStyle = GetValue(font, 'fontStyle', '');\n    } else {\n      var fontSplit = font.split(' ');\n      var i = 0;\n      fontStyle = fontSplit.length > 2 ? fontSplit[i++] : '';\n      fontSize = fontSplit[i++] || '16px';\n      fontFamily = fontSplit[i++] || 'Courier';\n    }\n\n    if (fontFamily !== this.fontFamily || fontSize !== this.fontSize || fontStyle !== this.fontStyle) {\n      this.fontFamily = fontFamily;\n      this.fontSize = fontSize;\n      this.fontStyle = fontStyle;\n\n      if (updateText) {\n        this.update(true);\n      }\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font family.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontFamily\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} family - The font family.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontFamily: function (family) {\n    if (this.fontFamily !== family) {\n      this.fontFamily = family;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} style - The font style.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontStyle: function (style) {\n    if (this.fontStyle !== style) {\n      this.fontStyle = style;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the font size.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFontSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(number|string)} size - The font size.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFontSize: function (size) {\n    if (typeof size === 'number') {\n      size = size.toString() + 'px';\n    }\n\n    if (this.fontSize !== size) {\n      this.fontSize = size;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the test string to use when measuring the font.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setTestString\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} string - The test string to use when measuring the font.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setTestString: function (string) {\n    this.testString = string;\n    return this.update(true);\n  },\n\n  /**\r\n   * Set a fixed width and height for the text.\r\n   *\r\n   * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFixedSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The fixed width to set.\r\n   * @param {number} height - The fixed height to set.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFixedSize: function (width, height) {\n    this.fixedWidth = width;\n    this.fixedHeight = height;\n\n    if (width) {\n      this.parent.width = width;\n    }\n\n    if (height) {\n      this.parent.height = height;\n    }\n\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the background color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setBackgroundColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The background color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setBackgroundColor: function (color) {\n    this.backgroundColor = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the text fill color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setFill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The text fill color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setFill: function (color) {\n    this.color = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the text fill color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The text fill color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setColor: function (color) {\n    this.color = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the resolution used by the Text object.\r\n   *\r\n   * By default it will be set to match the resolution set in the Game Config,\r\n   * but you can override it via this method. It allows for much clearer text on High DPI devices,\r\n   * at the cost of memory because it uses larger internal Canvas textures for the Text.\r\n   * \r\n   * Please use with caution, as the more high res Text you have, the more memory it uses up.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setResolution\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} value - The resolution for this Text object to use.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setResolution: function (value) {\n    this.resolution = value;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the stroke settings.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setStroke\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} color - The stroke color.\r\n   * @param {number} thickness - The stroke thickness.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setStroke: function (color, thickness) {\n    if (thickness === undefined) {\n      thickness = this.strokeThickness;\n    }\n\n    if (color === undefined && this.strokeThickness !== 0) {\n      //  Reset the stroke to zero (disabling it)\n      this.strokeThickness = 0;\n      this.update(true);\n    } else if (this.stroke !== color || this.strokeThickness !== thickness) {\n      this.stroke = color;\n      this.strokeThickness = thickness;\n      this.update(true);\n    }\n\n    return this.parent;\n  },\n\n  /**\r\n   * Set the shadow settings.\r\n   * \r\n   * Calling this method always re-measures the parent Text object,\r\n   * so only call it when you actually change the shadow settings.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal shadow offset.\r\n   * @param {number} [y=0] - The vertical shadow offset.\r\n   * @param {string} [color='#000'] - The shadow color.\r\n   * @param {number} [blur=0] - The shadow blur radius.\r\n   * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n   * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadow: function (x, y, color, blur, shadowStroke, shadowFill) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (color === undefined) {\n      color = '#000';\n    }\n\n    if (blur === undefined) {\n      blur = 0;\n    }\n\n    if (shadowStroke === undefined) {\n      shadowStroke = false;\n    }\n\n    if (shadowFill === undefined) {\n      shadowFill = true;\n    }\n\n    this.shadowOffsetX = x;\n    this.shadowOffsetY = y;\n    this.shadowColor = color;\n    this.shadowBlur = blur;\n    this.shadowStroke = shadowStroke;\n    this.shadowFill = shadowFill;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow offset.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowOffset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The horizontal shadow offset.\r\n   * @param {number} [y=0] - The vertical shadow offset.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowOffset: function (x, y) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.shadowOffsetX = x;\n    this.shadowOffsetY = y;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow color.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowColor\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [color='#000'] - The shadow color.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowColor: function (color) {\n    if (color === undefined) {\n      color = '#000';\n    }\n\n    this.shadowColor = color;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the shadow blur radius.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowBlur\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [blur=0] - The shadow blur radius.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowBlur: function (blur) {\n    if (blur === undefined) {\n      blur = 0;\n    }\n\n    this.shadowBlur = blur;\n    return this.update(false);\n  },\n\n  /**\r\n   * Enable or disable shadow stroke.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowStroke\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowStroke: function (enabled) {\n    this.shadowStroke = enabled;\n    return this.update(false);\n  },\n\n  /**\r\n   * Enable or disable shadow fill.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setShadowFill\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setShadowFill: function (enabled) {\n    this.shadowFill = enabled;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the width (in pixels) to use for wrapping lines.\r\n   *\r\n   * Pass in null to remove wrapping by width.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setWordWrapWidth\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n   * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n   * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n   * spaces and whitespace are left as is.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setWordWrapWidth: function (width, useAdvancedWrap) {\n    if (useAdvancedWrap === undefined) {\n      useAdvancedWrap = false;\n    }\n\n    this.wordWrapWidth = width;\n    this.wordWrapUseAdvanced = useAdvancedWrap;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set a custom callback for wrapping lines.\r\n   *\r\n   * Pass in null to remove wrapping by callback.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setWordWrapCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n   * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n   * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n   * newline characters in place to indicate where breaks should happen.\r\n   * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setWordWrapCallback: function (callback, scope) {\n    if (scope === undefined) {\n      scope = null;\n    }\n\n    this.wordWrapCallback = callback;\n    this.wordWrapCallbackScope = scope;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the alignment of the text in this Text object.\r\n   * \r\n   * The argument can be one of: `left`, `right`, `center` or `justify`.\r\n   * \r\n   * Alignment only works if the Text object has more than one line of text.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setAlign\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [align='left'] - The text alignment for multi-line text.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setAlign: function (align) {\n    if (align === undefined) {\n      align = 'left';\n    }\n\n    this.align = align;\n    return this.update(false);\n  },\n\n  /**\r\n   * Set the maximum number of lines to draw.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#setMaxLines\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [max=0] - The maximum number of lines to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Text} The parent Text object.\r\n   */\n  setMaxLines: function (max) {\n    if (max === undefined) {\n      max = 0;\n    }\n\n    this.maxLines = max;\n    return this.update(false);\n  },\n\n  /**\r\n   * Get the current text metrics.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#getTextMetrics\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.GameObjects.Text.TextMetrics} The text metrics.\r\n   */\n  getTextMetrics: function () {\n    var metrics = this.metrics;\n    return {\n      ascent: metrics.ascent,\n      descent: metrics.descent,\n      fontSize: metrics.fontSize\n    };\n  },\n\n  /**\r\n   * Build a JSON representation of this Text Style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#toJSON\r\n   * @since 3.0.0\r\n   *\r\n   * @return {object} A JSON representation of this Text Style.\r\n   */\n  toJSON: function () {\n    var output = {};\n\n    for (var key in propertyMap) {\n      output[key] = this[key];\n    }\n\n    output.metrics = this.getTextMetrics();\n    return output;\n  },\n\n  /**\r\n   * Destroy this Text Style.\r\n   *\r\n   * @method Phaser.GameObjects.TextStyle#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.parent = undefined;\n  }\n});\nmodule.exports = TextStyle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/text/TextStyle.js"],"names":["Class","require","GetAdvancedValue","GetValue","MeasureText","propertyMap","fontFamily","fontSize","fontStyle","backgroundColor","color","stroke","strokeThickness","shadowOffsetX","shadowOffsetY","shadowColor","shadowBlur","shadowStroke","shadowFill","align","maxLines","fixedWidth","fixedHeight","resolution","rtl","testString","baselineX","baselineY","wordWrapWidth","wordWrapCallback","wordWrapCallbackScope","wordWrapUseAdvanced","TextStyle","initialize","text","style","parent","_font","setStyle","metrics","ascent","descent","updateText","setDefaults","undefined","hasOwnProperty","toString","key","value","font","setFont","join","trim","fill","update","syncFont","canvas","context","syncStyle","textBaseline","fillStyle","strokeStyle","lineWidth","lineCap","lineJoin","syncShadow","enabled","recalculateMetrics","fontSplit","split","i","length","setFontFamily","family","setFontStyle","setFontSize","size","setTestString","string","setFixedSize","width","height","setBackgroundColor","setFill","setColor","setResolution","setStroke","thickness","setShadow","x","y","blur","setShadowOffset","setShadowColor","setShadowBlur","setShadowStroke","setShadowFill","setWordWrapWidth","useAdvancedWrap","setWordWrapCallback","callback","scope","setAlign","setMaxLines","max","getTextMetrics","toJSON","output","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MeasureText = require('./MeasureText');\r\n\r\n//  Key: [ Object Key, Default Value ]\r\n\r\nvar propertyMap = {\r\n    fontFamily: [ 'fontFamily', 'Courier' ],\r\n    fontSize: [ 'fontSize', '16px' ],\r\n    fontStyle: [ 'fontStyle', '' ],\r\n    backgroundColor: [ 'backgroundColor', null ],\r\n    color: [ 'color', '#fff' ],\r\n    stroke: [ 'stroke', '#fff' ],\r\n    strokeThickness: [ 'strokeThickness', 0 ],\r\n    shadowOffsetX: [ 'shadow.offsetX', 0 ],\r\n    shadowOffsetY: [ 'shadow.offsetY', 0 ],\r\n    shadowColor: [ 'shadow.color', '#000' ],\r\n    shadowBlur: [ 'shadow.blur', 0 ],\r\n    shadowStroke: [ 'shadow.stroke', false ],\r\n    shadowFill: [ 'shadow.fill', false ],\r\n    align: [ 'align', 'left' ],\r\n    maxLines: [ 'maxLines', 0 ],\r\n    fixedWidth: [ 'fixedWidth', 0 ],\r\n    fixedHeight: [ 'fixedHeight', 0 ],\r\n    resolution: [ 'resolution', 0 ],\r\n    rtl: [ 'rtl', false ],\r\n    testString: [ 'testString', '|MÃ‰qgy' ],\r\n    baselineX: [ 'baselineX', 1.2 ],\r\n    baselineY: [ 'baselineY', 1.4 ],\r\n    wordWrapWidth: [ 'wordWrap.width', null ],\r\n    wordWrapCallback: [ 'wordWrap.callback', null ],\r\n    wordWrapCallbackScope: [ 'wordWrap.callbackScope', null ],\r\n    wordWrapUseAdvanced: [ 'wordWrap.useAdvancedWrap', false ]\r\n};\r\n\r\n/**\r\n * @classdesc\r\n * A TextStyle class manages all of the style settings for a Text object.\r\n * \r\n * Text Game Objects create a TextStyle instance automatically, which is\r\n * accessed via the `Text.style` property. You do not normally need to\r\n * instantiate one yourself.\r\n *\r\n * @class TextStyle\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object that this TextStyle is styling.\r\n * @param {Phaser.Types.GameObjects.Text.TextStyle} style - The style settings to set.\r\n */\r\nvar TextStyle = new Class({\r\n\r\n    initialize:\r\n\r\n    function TextStyle (text, style)\r\n    {\r\n        /**\r\n         * The Text object that this TextStyle is styling.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#parent\r\n         * @type {Phaser.GameObjects.Text}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = text;\r\n\r\n        /**\r\n         * The font family.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontFamily\r\n         * @type {string}\r\n         * @default 'Courier'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontFamily;\r\n\r\n        /**\r\n         * The font size.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontSize\r\n         * @type {string}\r\n         * @default '16px'\r\n         * @since 3.0.0\r\n         */\r\n        this.fontSize;\r\n\r\n        /**\r\n         * The font style.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fontStyle\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.fontStyle;\r\n\r\n        /**\r\n         * The background color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#backgroundColor\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.backgroundColor;\r\n\r\n        /**\r\n         * The text fill color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#color\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.color;\r\n\r\n        /**\r\n         * The text stroke color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#stroke\r\n         * @type {string}\r\n         * @default '#fff'\r\n         * @since 3.0.0\r\n         */\r\n        this.stroke;\r\n\r\n        /**\r\n         * The text stroke thickness.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#strokeThickness\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.strokeThickness;\r\n\r\n        /**\r\n         * The horizontal shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowOffsetX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetX;\r\n\r\n        /**\r\n         * The vertical shadow offset.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowOffsetY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowOffsetY;\r\n\r\n        /**\r\n         * The shadow color.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowColor\r\n         * @type {string}\r\n         * @default '#000'\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowColor;\r\n\r\n        /**\r\n         * The shadow blur radius.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowBlur\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowBlur;\r\n\r\n        /**\r\n         * Whether shadow stroke is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowStroke\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowStroke;\r\n\r\n        /**\r\n         * Whether shadow fill is enabled or not.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#shadowFill\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.shadowFill;\r\n\r\n        /**\r\n         * The text alignment.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#align\r\n         * @type {string}\r\n         * @default 'left'\r\n         * @since 3.0.0\r\n         */\r\n        this.align;\r\n\r\n        /**\r\n         * The maximum number of lines to draw.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#maxLines\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.maxLines;\r\n\r\n        /**\r\n         * The fixed width of the text.\r\n         *\r\n         * `0` means no fixed with.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fixedWidth\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedWidth;\r\n\r\n        /**\r\n         * The fixed height of the text.\r\n         *\r\n         * `0` means no fixed height.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#fixedHeight\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.fixedHeight;\r\n\r\n        /**\r\n         * The resolution the text is rendered to its internal canvas at.\r\n         * The default is 0, which means it will use the resolution set in the Game Config.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#resolution\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.12.0\r\n         */\r\n        this.resolution;\r\n\r\n        /**\r\n         * Whether the text should render right to left.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#rtl\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.rtl;\r\n\r\n        /**\r\n         * The test string to use when measuring the font.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#testString\r\n         * @type {string}\r\n         * @default '|MÉqgy'\r\n         * @since 3.0.0\r\n         */\r\n        this.testString;\r\n\r\n        /**\r\n         * The amount of horizontal padding added to the width of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#baselineX\r\n         * @type {number}\r\n         * @default 1.2\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineX;\r\n\r\n        /**\r\n         * The amount of vertical padding added to the height of the text when calculating the font metrics.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#baselineY\r\n         * @type {number}\r\n         * @default 1.4\r\n         * @since 3.3.0\r\n         */\r\n        this.baselineY;\r\n\r\n        /**\r\n         * The font style, size and family.\r\n         *\r\n         * @name Phaser.GameObjects.TextStyle#_font\r\n         * @type {string}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._font;\r\n\r\n        //  Set to defaults + user style\r\n        this.setStyle(style, false, true);\r\n\r\n        var metrics = GetValue(style, 'metrics', false);\r\n\r\n        //  Provide optional TextMetrics in the style object to avoid the canvas look-up / scanning\r\n        //  Doing this is reset if you then change the font of this TextStyle after creation\r\n        if (metrics)\r\n        {\r\n            this.metrics = {\r\n                ascent: GetValue(metrics, 'ascent', 0),\r\n                descent: GetValue(metrics, 'descent', 0),\r\n                fontSize: GetValue(metrics, 'fontSize', 0)\r\n            };\r\n        }\r\n        else\r\n        {\r\n            this.metrics = MeasureText(this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set the text style.\r\n     *\r\n     * @example\r\n     * text.setStyle({\r\n     *     fontSize: '64px',\r\n     *     fontFamily: 'Arial',\r\n     *     color: '#ffffff',\r\n     *     align: 'center',\r\n     *     backgroundColor: '#ff00ff'\r\n     * });\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Text.TextStyle} style - The style settings to set.\r\n     * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n     * @param {boolean} [setDefaults=false] - Use the default values is not set, or the local values.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStyle: function (style, updateText, setDefaults)\r\n    {\r\n        if (updateText === undefined) { updateText = true; }\r\n        if (setDefaults === undefined) { setDefaults = false; }\r\n\r\n        //  Avoid type mutation\r\n        if (style && style.hasOwnProperty('fontSize') && typeof style.fontSize === 'number')\r\n        {\r\n            style.fontSize = style.fontSize.toString() + 'px';\r\n        }\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            var value = (setDefaults) ? propertyMap[key][1] : this[key];\r\n\r\n            if (key === 'wordWrapCallback' || key === 'wordWrapCallbackScope')\r\n            {\r\n                // Callback & scope should be set without processing the values\r\n                this[key] = GetValue(style, propertyMap[key][0], value);\r\n            }\r\n            else\r\n            {\r\n                this[key] = GetAdvancedValue(style, propertyMap[key][0], value);\r\n            }\r\n        }\r\n\r\n        //  Allow for 'font' override\r\n        var font = GetValue(style, 'font', null);\r\n\r\n        if (font !== null)\r\n        {\r\n            this.setFont(font, false);\r\n        }\r\n\r\n        this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n\r\n        //  Allow for 'fill' to be used in place of 'color'\r\n        var fill = GetValue(style, 'fill', null);\r\n\r\n        if (fill !== null)\r\n        {\r\n            this.color = fill;\r\n        }\r\n\r\n        if (updateText)\r\n        {\r\n            return this.update(true);\r\n        }\r\n        else\r\n        {\r\n            return this.parent;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Synchronize the font settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncFont: function (canvas, context)\r\n    {\r\n        context.font = this._font;\r\n    },\r\n\r\n    /**\r\n     * Synchronize the text style settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {HTMLCanvasElement} canvas - The Canvas Element.\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     */\r\n    syncStyle: function (canvas, context)\r\n    {\r\n        context.textBaseline = 'alphabetic';\r\n\r\n        context.fillStyle = this.color;\r\n        context.strokeStyle = this.stroke;\r\n\r\n        context.lineWidth = this.strokeThickness;\r\n        context.lineCap = 'round';\r\n        context.lineJoin = 'round';\r\n    },\r\n\r\n    /**\r\n     * Synchronize the shadow settings to the given Canvas Rendering Context.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#syncShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {CanvasRenderingContext2D} context - The Canvas Rendering Context.\r\n     * @param {boolean} enabled - Whether shadows are enabled or not.\r\n     */\r\n    syncShadow: function (context, enabled)\r\n    {\r\n        if (enabled)\r\n        {\r\n            context.shadowOffsetX = this.shadowOffsetX;\r\n            context.shadowOffsetY = this.shadowOffsetY;\r\n            context.shadowColor = this.shadowColor;\r\n            context.shadowBlur = this.shadowBlur;\r\n        }\r\n        else\r\n        {\r\n            context.shadowOffsetX = 0;\r\n            context.shadowOffsetY = 0;\r\n            context.shadowColor = 0;\r\n            context.shadowBlur = 0;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Update the style settings for the parent Text object.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} recalculateMetrics - Whether to recalculate font and text metrics.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    update: function (recalculateMetrics)\r\n    {\r\n        if (recalculateMetrics)\r\n        {\r\n            this._font = [ this.fontStyle, this.fontSize, this.fontFamily ].join(' ').trim();\r\n\r\n            this.metrics = MeasureText(this);\r\n        }\r\n\r\n        return this.parent.updateText();\r\n    },\r\n\r\n    /**\r\n     * Set the font.\r\n     *\r\n     * If a string is given, the font family is set.\r\n     *\r\n     * If an object is given, the `fontFamily`, `fontSize` and `fontStyle`\r\n     * properties of that object are set.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFont\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|object)} font - The font family or font settings to set.\r\n     * @param {boolean} [updateText=true] - Whether to update the text immediately.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFont: function (font, updateText)\r\n    {\r\n        if (updateText === undefined) { updateText = true; }\r\n\r\n        var fontFamily = font;\r\n        var fontSize = '';\r\n        var fontStyle = '';\r\n\r\n        if (typeof font !== 'string')\r\n        {\r\n            fontFamily = GetValue(font, 'fontFamily', 'Courier');\r\n            fontSize = GetValue(font, 'fontSize', '16px');\r\n            fontStyle = GetValue(font, 'fontStyle', '');\r\n        }\r\n        else\r\n        {\r\n            var fontSplit = font.split(' ');\r\n\r\n            var i = 0;\r\n\r\n            fontStyle = (fontSplit.length > 2) ? fontSplit[i++] : '';\r\n            fontSize = fontSplit[i++] || '16px';\r\n            fontFamily = fontSplit[i++] || 'Courier';\r\n        }\r\n\r\n        if (fontFamily !== this.fontFamily || fontSize !== this.fontSize || fontStyle !== this.fontStyle)\r\n        {\r\n            this.fontFamily = fontFamily;\r\n            this.fontSize = fontSize;\r\n            this.fontStyle = fontStyle;\r\n\r\n            if (updateText)\r\n            {\r\n                this.update(true);\r\n            }\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font family.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontFamily\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} family - The font family.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontFamily: function (family)\r\n    {\r\n        if (this.fontFamily !== family)\r\n        {\r\n            this.fontFamily = family;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} style - The font style.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontStyle: function (style)\r\n    {\r\n        if (this.fontStyle !== style)\r\n        {\r\n            this.fontStyle = style;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the font size.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFontSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(number|string)} size - The font size.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFontSize: function (size)\r\n    {\r\n        if (typeof size === 'number')\r\n        {\r\n            size = size.toString() + 'px';\r\n        }\r\n\r\n        if (this.fontSize !== size)\r\n        {\r\n            this.fontSize = size;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the test string to use when measuring the font.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setTestString\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} string - The test string to use when measuring the font.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setTestString: function (string)\r\n    {\r\n        this.testString = string;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Set a fixed width and height for the text.\r\n     *\r\n     * Pass in `0` for either of these parameters to disable fixed width or height respectively.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFixedSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The fixed width to set.\r\n     * @param {number} height - The fixed height to set.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFixedSize: function (width, height)\r\n    {\r\n        this.fixedWidth = width;\r\n        this.fixedHeight = height;\r\n\r\n        if (width)\r\n        {\r\n            this.parent.width = width;\r\n        }\r\n\r\n        if (height)\r\n        {\r\n            this.parent.height = height;\r\n        }\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the background color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setBackgroundColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The background color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setBackgroundColor: function (color)\r\n    {\r\n        this.backgroundColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setFill: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the text fill color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The text fill color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setColor: function (color)\r\n    {\r\n        this.color = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the resolution used by the Text object.\r\n     *\r\n     * By default it will be set to match the resolution set in the Game Config,\r\n     * but you can override it via this method. It allows for much clearer text on High DPI devices,\r\n     * at the cost of memory because it uses larger internal Canvas textures for the Text.\r\n     * \r\n     * Please use with caution, as the more high res Text you have, the more memory it uses up.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setResolution\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} value - The resolution for this Text object to use.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setResolution: function (value)\r\n    {\r\n        this.resolution = value;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the stroke settings.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} color - The stroke color.\r\n     * @param {number} thickness - The stroke thickness.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setStroke: function (color, thickness)\r\n    {\r\n        if (thickness === undefined) { thickness = this.strokeThickness; }\r\n\r\n        if (color === undefined && this.strokeThickness !== 0)\r\n        {\r\n            //  Reset the stroke to zero (disabling it)\r\n            this.strokeThickness = 0;\r\n\r\n            this.update(true);\r\n        }\r\n        else if (this.stroke !== color || this.strokeThickness !== thickness)\r\n        {\r\n            this.stroke = color;\r\n            this.strokeThickness = thickness;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n        return this.parent;\r\n    },\r\n\r\n    /**\r\n     * Set the shadow settings.\r\n     * \r\n     * Calling this method always re-measures the parent Text object,\r\n     * so only call it when you actually change the shadow settings.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     * @param {boolean} [shadowStroke=false] - Whether to stroke the shadow.\r\n     * @param {boolean} [shadowFill=true] - Whether to fill the shadow.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadow: function (x, y, color, blur, shadowStroke, shadowFill)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (color === undefined) { color = '#000'; }\r\n        if (blur === undefined) { blur = 0; }\r\n        if (shadowStroke === undefined) { shadowStroke = false; }\r\n        if (shadowFill === undefined) { shadowFill = true; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n        this.shadowColor = color;\r\n        this.shadowBlur = blur;\r\n        this.shadowStroke = shadowStroke;\r\n        this.shadowFill = shadowFill;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow offset.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowOffset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The horizontal shadow offset.\r\n     * @param {number} [y=0] - The vertical shadow offset.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowOffset: function (x, y)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.shadowOffsetX = x;\r\n        this.shadowOffsetY = y;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow color.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowColor\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [color='#000'] - The shadow color.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowColor: function (color)\r\n    {\r\n        if (color === undefined) { color = '#000'; }\r\n\r\n        this.shadowColor = color;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the shadow blur radius.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowBlur\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [blur=0] - The shadow blur radius.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowBlur: function (blur)\r\n    {\r\n        if (blur === undefined) { blur = 0; }\r\n\r\n        this.shadowBlur = blur;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow stroke.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowStroke\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow stroke is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowStroke: function (enabled)\r\n    {\r\n        this.shadowStroke = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Enable or disable shadow fill.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setShadowFill\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} enabled - Whether shadow fill is enabled or not.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setShadowFill: function (enabled)\r\n    {\r\n        this.shadowFill = enabled;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the width (in pixels) to use for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by width.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setWordWrapWidth\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The maximum width of a line in pixels. Set to null to remove wrapping.\r\n     * @param {boolean} [useAdvancedWrap=false] - Whether or not to use the advanced wrapping\r\n     * algorithm. If true, spaces are collapsed and whitespace is trimmed from lines. If false,\r\n     * spaces and whitespace are left as is.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapWidth: function (width, useAdvancedWrap)\r\n    {\r\n        if (useAdvancedWrap === undefined) { useAdvancedWrap = false; }\r\n\r\n        this.wordWrapWidth = width;\r\n        this.wordWrapUseAdvanced = useAdvancedWrap;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set a custom callback for wrapping lines.\r\n     *\r\n     * Pass in null to remove wrapping by callback.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setWordWrapCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {TextStyleWordWrapCallback} callback - A custom function that will be responsible for wrapping the\r\n     * text. It will receive two arguments: text (the string to wrap), textObject (this Text\r\n     * instance). It should return the wrapped lines either as an array of lines or as a string with\r\n     * newline characters in place to indicate where breaks should happen.\r\n     * @param {object} [scope=null] - The scope that will be applied when the callback is invoked.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setWordWrapCallback: function (callback, scope)\r\n    {\r\n        if (scope === undefined) { scope = null; }\r\n\r\n        this.wordWrapCallback = callback;\r\n        this.wordWrapCallbackScope = scope;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the alignment of the text in this Text object.\r\n     * \r\n     * The argument can be one of: `left`, `right`, `center` or `justify`.\r\n     * \r\n     * Alignment only works if the Text object has more than one line of text.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setAlign\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [align='left'] - The text alignment for multi-line text.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setAlign: function (align)\r\n    {\r\n        if (align === undefined) { align = 'left'; }\r\n\r\n        this.align = align;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Set the maximum number of lines to draw.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#setMaxLines\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [max=0] - The maximum number of lines to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Text} The parent Text object.\r\n     */\r\n    setMaxLines: function (max)\r\n    {\r\n        if (max === undefined) { max = 0; }\r\n\r\n        this.maxLines = max;\r\n\r\n        return this.update(false);\r\n    },\r\n\r\n    /**\r\n     * Get the current text metrics.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#getTextMetrics\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.GameObjects.Text.TextMetrics} The text metrics.\r\n     */\r\n    getTextMetrics: function ()\r\n    {\r\n        var metrics = this.metrics;\r\n\r\n        return {\r\n            ascent: metrics.ascent,\r\n            descent: metrics.descent,\r\n            fontSize: metrics.fontSize\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Build a JSON representation of this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#toJSON\r\n     * @since 3.0.0\r\n     *\r\n     * @return {object} A JSON representation of this Text Style.\r\n     */\r\n    toJSON: function ()\r\n    {\r\n        var output = {};\r\n\r\n        for (var key in propertyMap)\r\n        {\r\n            output[key] = this[key];\r\n        }\r\n\r\n        output.metrics = this.getTextMetrics();\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Destroy this Text Style.\r\n     *\r\n     * @method Phaser.GameObjects.TextStyle#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.parent = undefined;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TextStyle;\r\n"]},"metadata":{},"sourceType":"script"}