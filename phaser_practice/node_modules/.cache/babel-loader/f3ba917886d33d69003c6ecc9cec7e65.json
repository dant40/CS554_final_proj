{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Read an integer value from an XML Node.\r\n *\r\n * @function getValue\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Node} node - The XML Node.\r\n * @param {string} attribute - The attribute to read.\r\n *\r\n * @return {integer} The parsed value.\r\n */\nfunction getValue(node, attribute) {\n  return parseInt(node.getAttribute(attribute), 10);\n}\n/**\r\n * Parse an XML font to Bitmap Font data for the Bitmap Font cache.\r\n *\r\n * @function ParseXMLBitmapFont\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {XMLDocument} xml - The XML Document to parse the font from.\r\n * @param {integer} [xSpacing=0] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing=0] - The y-axis spacing to add to the line height.\r\n * @param {Phaser.Textures.Frame} [frame] - The texture frame to take into account while parsing.\r\n *\r\n * @return {Phaser.Types.GameObjects.BitmapText.BitmapFontData} The parsed Bitmap Font data.\r\n */\n\n\nvar ParseXMLBitmapFont = function (xml, xSpacing, ySpacing, frame) {\n  if (xSpacing === undefined) {\n    xSpacing = 0;\n  }\n\n  if (ySpacing === undefined) {\n    ySpacing = 0;\n  }\n\n  var data = {};\n  var info = xml.getElementsByTagName('info')[0];\n  var common = xml.getElementsByTagName('common')[0];\n  data.font = info.getAttribute('face');\n  data.size = getValue(info, 'size');\n  data.lineHeight = getValue(common, 'lineHeight') + ySpacing;\n  data.chars = {};\n  var letters = xml.getElementsByTagName('char');\n  var adjustForTrim = frame !== undefined && frame.trimmed;\n\n  if (adjustForTrim) {\n    var top = frame.height;\n    var left = frame.width;\n  }\n\n  for (var i = 0; i < letters.length; i++) {\n    var node = letters[i];\n    var charCode = getValue(node, 'id');\n    var gx = getValue(node, 'x');\n    var gy = getValue(node, 'y');\n    var gw = getValue(node, 'width');\n    var gh = getValue(node, 'height'); //  Handle frame trim issues\n\n    if (adjustForTrim) {\n      if (gx < left) {\n        left = gx;\n      }\n\n      if (gy < top) {\n        top = gy;\n      }\n    }\n\n    data.chars[charCode] = {\n      x: gx,\n      y: gy,\n      width: gw,\n      height: gh,\n      centerX: Math.floor(gw / 2),\n      centerY: Math.floor(gh / 2),\n      xOffset: getValue(node, 'xoffset'),\n      yOffset: getValue(node, 'yoffset'),\n      xAdvance: getValue(node, 'xadvance') + xSpacing,\n      data: {},\n      kerning: {}\n    };\n  }\n\n  if (adjustForTrim && top !== 0 && left !== 0) {\n    //  Now we know the top and left coordinates of the glyphs in the original data\n    //  so we can work out how much to adjust the glyphs by\n    for (var code in data.chars) {\n      var glyph = data.chars[code];\n      glyph.x -= frame.x;\n      glyph.y -= frame.y;\n    }\n  }\n\n  var kernings = xml.getElementsByTagName('kerning');\n\n  for (i = 0; i < kernings.length; i++) {\n    var kern = kernings[i];\n    var first = getValue(kern, 'first');\n    var second = getValue(kern, 'second');\n    var amount = getValue(kern, 'amount');\n    data.chars[second].kerning[first] = amount;\n  }\n\n  return data;\n};\n\nmodule.exports = ParseXMLBitmapFont;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/bitmaptext/ParseXMLBitmapFont.js"],"names":["getValue","node","attribute","parseInt","getAttribute","ParseXMLBitmapFont","xml","xSpacing","ySpacing","frame","undefined","data","info","getElementsByTagName","common","font","size","lineHeight","chars","letters","adjustForTrim","trimmed","top","height","left","width","i","length","charCode","gx","gy","gw","gh","x","y","centerX","Math","floor","centerY","xOffset","yOffset","xAdvance","kerning","code","glyph","kernings","kern","first","second","amount","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Read an integer value from an XML Node.\r\n *\r\n * @function getValue\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Node} node - The XML Node.\r\n * @param {string} attribute - The attribute to read.\r\n *\r\n * @return {integer} The parsed value.\r\n */\r\nfunction getValue (node, attribute)\r\n{\r\n    return parseInt(node.getAttribute(attribute), 10);\r\n}\r\n\r\n/**\r\n * Parse an XML font to Bitmap Font data for the Bitmap Font cache.\r\n *\r\n * @function ParseXMLBitmapFont\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {XMLDocument} xml - The XML Document to parse the font from.\r\n * @param {integer} [xSpacing=0] - The x-axis spacing to add between each letter.\r\n * @param {integer} [ySpacing=0] - The y-axis spacing to add to the line height.\r\n * @param {Phaser.Textures.Frame} [frame] - The texture frame to take into account while parsing.\r\n *\r\n * @return {Phaser.Types.GameObjects.BitmapText.BitmapFontData} The parsed Bitmap Font data.\r\n */\r\nvar ParseXMLBitmapFont = function (xml, xSpacing, ySpacing, frame)\r\n{\r\n    if (xSpacing === undefined) { xSpacing = 0; }\r\n    if (ySpacing === undefined) { ySpacing = 0; }\r\n\r\n    var data = {};\r\n    var info = xml.getElementsByTagName('info')[0];\r\n    var common = xml.getElementsByTagName('common')[0];\r\n\r\n    data.font = info.getAttribute('face');\r\n    data.size = getValue(info, 'size');\r\n    data.lineHeight = getValue(common, 'lineHeight') + ySpacing;\r\n    data.chars = {};\r\n\r\n    var letters = xml.getElementsByTagName('char');\r\n\r\n    var adjustForTrim = (frame !== undefined && frame.trimmed);\r\n\r\n    if (adjustForTrim)\r\n    {\r\n        var top = frame.height;\r\n        var left = frame.width;\r\n    }\r\n\r\n    for (var i = 0; i < letters.length; i++)\r\n    {\r\n        var node = letters[i];\r\n\r\n        var charCode = getValue(node, 'id');\r\n        var gx = getValue(node, 'x');\r\n        var gy = getValue(node, 'y');\r\n        var gw = getValue(node, 'width');\r\n        var gh = getValue(node, 'height');\r\n\r\n        //  Handle frame trim issues\r\n\r\n        if (adjustForTrim)\r\n        {\r\n            if (gx < left)\r\n            {\r\n                left = gx;\r\n            }\r\n\r\n            if (gy < top)\r\n            {\r\n                top = gy;\r\n            }\r\n        }\r\n\r\n        data.chars[charCode] =\r\n        {\r\n            x: gx,\r\n            y: gy,\r\n            width: gw,\r\n            height: gh,\r\n            centerX: Math.floor(gw / 2),\r\n            centerY: Math.floor(gh / 2),\r\n            xOffset: getValue(node, 'xoffset'),\r\n            yOffset: getValue(node, 'yoffset'),\r\n            xAdvance: getValue(node, 'xadvance') + xSpacing,\r\n            data: {},\r\n            kerning: {}\r\n        };\r\n    }\r\n\r\n    if (adjustForTrim && top !== 0 && left !== 0)\r\n    {\r\n        //  Now we know the top and left coordinates of the glyphs in the original data\r\n        //  so we can work out how much to adjust the glyphs by\r\n\r\n        for (var code in data.chars)\r\n        {\r\n            var glyph = data.chars[code];\r\n\r\n            glyph.x -= frame.x;\r\n            glyph.y -= frame.y;\r\n        }\r\n    }\r\n\r\n    var kernings = xml.getElementsByTagName('kerning');\r\n\r\n    for (i = 0; i < kernings.length; i++)\r\n    {\r\n        var kern = kernings[i];\r\n\r\n        var first = getValue(kern, 'first');\r\n        var second = getValue(kern, 'second');\r\n        var amount = getValue(kern, 'amount');\r\n\r\n        data.chars[second].kerning[first] = amount;\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nmodule.exports = ParseXMLBitmapFont;\r\n"]},"metadata":{},"sourceType":"script"}