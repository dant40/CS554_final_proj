{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('./Point');\n/**\r\n * Get the centroid or geometric center of a plane figure (the arithmetic mean position of all the points in the figure).\r\n * Informally, it is the point at which a cutout of the shape could be perfectly balanced on the tip of a pin.\r\n *\r\n * @function Phaser.Geom.Point.GetCentroid\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point[]} points - [description]\r\n * @param {Phaser.Geom.Point} [out] - [description]\r\n *\r\n * @return {Phaser.Geom.Point} [description]\r\n */\n\n\nvar GetCentroid = function (points, out) {\n  if (out === undefined) {\n    out = new Point();\n  }\n\n  if (!Array.isArray(points)) {\n    throw new Error('GetCentroid points argument must be an array');\n  }\n\n  var len = points.length;\n\n  if (len < 1) {\n    throw new Error('GetCentroid points array must not be empty');\n  } else if (len === 1) {\n    out.x = points[0].x;\n    out.y = points[0].y;\n  } else {\n    for (var i = 0; i < len; i++) {\n      out.x += points[i].x;\n      out.y += points[i].y;\n    }\n\n    out.x /= len;\n    out.y /= len;\n  }\n\n  return out;\n};\n\nmodule.exports = GetCentroid;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/point/GetCentroid.js"],"names":["Point","require","GetCentroid","points","out","undefined","Array","isArray","Error","len","length","x","y","i","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,WAAW,GAAG,UAAUC,MAAV,EAAkBC,GAAlB,EAClB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIJ,KAAJ,EAAN;AAAoB;;AAE7C,MAAI,CAACM,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAL,EACA;AACI,UAAM,IAAIK,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,MAAIC,GAAG,GAAGN,MAAM,CAACO,MAAjB;;AAEA,MAAID,GAAG,GAAG,CAAV,EACA;AACI,UAAM,IAAID,KAAJ,CAAU,4CAAV,CAAN;AACH,GAHD,MAIK,IAAIC,GAAG,KAAK,CAAZ,EACL;AACIL,IAAAA,GAAG,CAACO,CAAJ,GAAQR,MAAM,CAAC,CAAD,CAAN,CAAUQ,CAAlB;AACAP,IAAAA,GAAG,CAACQ,CAAJ,GAAQT,MAAM,CAAC,CAAD,CAAN,CAAUS,CAAlB;AACH,GAJI,MAML;AACI,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EACA;AACIT,MAAAA,GAAG,CAACO,CAAJ,IAASR,MAAM,CAACU,CAAD,CAAN,CAAUF,CAAnB;AACAP,MAAAA,GAAG,CAACQ,CAAJ,IAAST,MAAM,CAACU,CAAD,CAAN,CAAUD,CAAnB;AACH;;AAEDR,IAAAA,GAAG,CAACO,CAAJ,IAASF,GAAT;AACAL,IAAAA,GAAG,CAACQ,CAAJ,IAASH,GAAT;AACH;;AAED,SAAOL,GAAP;AACH,CAjCD;;AAmCAU,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('./Point');\r\n\r\n/**\r\n * Get the centroid or geometric center of a plane figure (the arithmetic mean position of all the points in the figure).\r\n * Informally, it is the point at which a cutout of the shape could be perfectly balanced on the tip of a pin.\r\n *\r\n * @function Phaser.Geom.Point.GetCentroid\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Point[]} points - [description]\r\n * @param {Phaser.Geom.Point} [out] - [description]\r\n *\r\n * @return {Phaser.Geom.Point} [description]\r\n */\r\nvar GetCentroid = function (points, out)\r\n{\r\n    if (out === undefined) { out = new Point(); }\r\n\r\n    if (!Array.isArray(points))\r\n    {\r\n        throw new Error('GetCentroid points argument must be an array');\r\n    }\r\n\r\n    var len = points.length;\r\n\r\n    if (len < 1)\r\n    {\r\n        throw new Error('GetCentroid points array must not be empty');\r\n    }\r\n    else if (len === 1)\r\n    {\r\n        out.x = points[0].x;\r\n        out.y = points[0].y;\r\n    }\r\n    else\r\n    {\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            out.x += points[i].x;\r\n            out.y += points[i].y;\r\n        }\r\n\r\n        out.x /= len;\r\n        out.y /= len;\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetCentroid;\r\n"]},"metadata":{},"sourceType":"script"}