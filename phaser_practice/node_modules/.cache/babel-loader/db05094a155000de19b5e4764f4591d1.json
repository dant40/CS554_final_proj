{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n/**\r\n * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n * enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionBetween\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} start - The first index of the tile to be set for collision.\r\n * @param {integer} stop - The last index of the tile to be set for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * @param {boolean} [updateLayer=true] - If true, updates the current tiles on the layer. Set to\r\n * false if no tiles have been placed for significant performance boost.\r\n */\n\n\nvar SetCollisionBetween = function (start, stop, collides, recalculateFaces, layer, updateLayer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (updateLayer === undefined) {\n    updateLayer = true;\n  }\n\n  if (start > stop) {\n    return;\n  } // Update the array of colliding indexes\n\n\n  for (var index = start; index <= stop; index++) {\n    SetLayerCollisionIndex(index, collides, layer);\n  } // Update the tiles\n\n\n  if (updateLayer) {\n    for (var ty = 0; ty < layer.height; ty++) {\n      for (var tx = 0; tx < layer.width; tx++) {\n        var tile = layer.data[ty][tx];\n\n        if (tile) {\n          if (tile.index >= start && tile.index <= stop) {\n            SetTileCollision(tile, collides);\n          }\n        }\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionBetween;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetCollisionBetween.js"],"names":["SetTileCollision","require","CalculateFacesWithin","SetLayerCollisionIndex","SetCollisionBetween","start","stop","collides","recalculateFaces","layer","updateLayer","undefined","index","ty","height","tx","width","tile","data","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIG,mBAAmB,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,gBAAjC,EAAmDC,KAAnD,EAA0DC,WAA1D,EAC1B;AACI,MAAIH,QAAQ,KAAKI,SAAjB,EAA4B;AAAEJ,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,MAAIC,gBAAgB,KAAKG,SAAzB,EAAoC;AAAEH,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAChE,MAAIE,WAAW,KAAKC,SAApB,EAA+B;AAAED,IAAAA,WAAW,GAAG,IAAd;AAAqB;;AAEtD,MAAIL,KAAK,GAAGC,IAAZ,EAAkB;AAAE;AAAS,GALjC,CAOI;;;AACA,OAAK,IAAIM,KAAK,GAAGP,KAAjB,EAAwBO,KAAK,IAAIN,IAAjC,EAAuCM,KAAK,EAA5C,EACA;AACIT,IAAAA,sBAAsB,CAACS,KAAD,EAAQL,QAAR,EAAkBE,KAAlB,CAAtB;AACH,GAXL,CAaI;;;AACA,MAAIC,WAAJ,EACA;AACI,SAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,KAAK,CAACK,MAA5B,EAAoCD,EAAE,EAAtC,EACA;AACI,WAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGN,KAAK,CAACO,KAA5B,EAAmCD,EAAE,EAArC,EACA;AACI,YAAIE,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAWL,EAAX,EAAeE,EAAf,CAAX;;AAEA,YAAIE,IAAJ,EACA;AACI,cAAIA,IAAI,CAACL,KAAL,IAAcP,KAAd,IAAuBY,IAAI,CAACL,KAAL,IAAcN,IAAzC,EACA;AACIN,YAAAA,gBAAgB,CAACiB,IAAD,EAAOV,QAAP,CAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,MAAIC,gBAAJ,EACA;AACIN,IAAAA,oBAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOO,KAAK,CAACO,KAAb,EAAoBP,KAAK,CAACK,MAA1B,EAAkCL,KAAlC,CAApB;AACH;AACJ,CAtCD;;AAwCAU,MAAM,CAACC,OAAP,GAAiBhB,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\r\n\r\n/**\r\n * Sets collision on a range of tiles in a layer whose index is between the specified `start` and\r\n * `stop` (inclusive). Calling this with a start value of 10 and a stop value of 14 would set\r\n * collision for tiles 10, 11, 12, 13 and 14. The `collides` parameter controls if collision will be\r\n * enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionBetween\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} start - The first index of the tile to be set for collision.\r\n * @param {integer} stop - The last index of the tile to be set for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * @param {boolean} [updateLayer=true] - If true, updates the current tiles on the layer. Set to\r\n * false if no tiles have been placed for significant performance boost.\r\n */\r\nvar SetCollisionBetween = function (start, stop, collides, recalculateFaces, layer, updateLayer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n    if (updateLayer === undefined) { updateLayer = true; }\r\n\r\n    if (start > stop) { return; }\r\n\r\n    // Update the array of colliding indexes\r\n    for (var index = start; index <= stop; index++)\r\n    {\r\n        SetLayerCollisionIndex(index, collides, layer);\r\n    }\r\n\r\n    // Update the tiles\r\n    if (updateLayer)\r\n    {\r\n        for (var ty = 0; ty < layer.height; ty++)\r\n        {\r\n            for (var tx = 0; tx < layer.width; tx++)\r\n            {\r\n                var tile = layer.data[ty][tx];\r\n              \r\n                if (tile)\r\n                {\r\n                    if (tile.index >= start && tile.index <= stop)\r\n                    {\r\n                        SetTileCollision(tile, collides);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionBetween;\r\n"]},"metadata":{},"sourceType":"script"}