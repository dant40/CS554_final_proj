{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar Events = require('../events');\n\nvar Vector2 = require('../../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Camera Shake effect.\r\n *\r\n * This effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\r\n *\r\n * Only the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Shake\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Shake = new Class({\n  initialize: function Shake(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.5.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.5.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.5.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\r\n     * This is a Vector2 object, allowing you to control the shake intensity independently across x and y.\r\n     * You can modify this value while the effect is active to create more varied shake effects.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#intensity\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.5.0\r\n     */\n\n    this.intensity = new Vector2();\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#progress\r\n     * @type {number}\r\n     * @since 3.5.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * How much to offset the camera by horizontally.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetX\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._offsetX = 0;\n    /**\r\n     * How much to offset the camera by vertically.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetY\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._offsetY = 0;\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdate\r\n     * @type {?Phaser.Types.Cameras.Scene2D.CameraShakeCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.5.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * Shakes the Camera by the given intensity over the duration specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n   * @param {(number|Phaser.Math.Vector2)} [intensity=0.05] - The intensity of the shake.\r\n   * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraShakeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function (duration, intensity, force, callback, context) {\n    if (duration === undefined) {\n      duration = 100;\n    }\n\n    if (intensity === undefined) {\n      intensity = 0.05;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    if (!force && this.isRunning) {\n      return this.camera;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0;\n\n    if (typeof intensity === 'number') {\n      this.intensity.set(intensity);\n    } else {\n      this.intensity.set(intensity.x, intensity.y);\n    }\n\n    this._elapsed = 0;\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.SHAKE_START, this.camera, this, duration, intensity);\n    return this.camera;\n  },\n\n  /**\r\n   * The pre-render step for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#preRender\r\n   * @since 3.5.0\r\n   */\n  preRender: function () {\n    if (this.isRunning) {\n      this.camera.matrix.translate(this._offsetX, this._offsetY);\n    }\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#update\r\n   * @since 3.5.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._onUpdate) {\n      this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\n    }\n\n    if (this._elapsed < this.duration) {\n      var intensity = this.intensity;\n      var width = this.camera._cw;\n      var height = this.camera._ch;\n      var zoom = this.camera.zoom;\n      this._offsetX = (Math.random() * intensity.x * width * 2 - intensity.x * width) * zoom;\n      this._offsetY = (Math.random() * intensity.y * height * 2 - intensity.y * height) * zoom;\n\n      if (this.camera.roundPixels) {\n        this._offsetX = Math.round(this._offsetX);\n        this._offsetY = Math.round(this._offsetY);\n      }\n    } else {\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n   * @since 3.5.0\r\n   */\n  effectComplete: function () {\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.SHAKE_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#reset\r\n   * @since 3.5.0\r\n   */\n  reset: function () {\n    this.isRunning = false;\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Shake#destroy\r\n   * @since 3.5.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.camera = null;\n    this.intensity = null;\n  }\n});\nmodule.exports = Shake;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/effects/Shake.js"],"names":["Clamp","require","Class","Events","Vector2","Shake","initialize","camera","isRunning","duration","intensity","progress","_elapsed","_offsetX","_offsetY","_onUpdate","_onUpdateScope","start","force","callback","context","undefined","scene","set","x","y","emit","SHAKE_START","preRender","matrix","translate","update","time","delta","call","width","_cw","height","_ch","zoom","Math","random","roundPixels","round","effectComplete","SHAKE_COMPLETE","reset","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,qBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,sBAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,uBAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAII,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAElBI,EAAAA,UAAU,EAEV,SAASD,KAAT,CAAgBE,MAAhB,EACA;AACI;;;;;;;;AAQA,SAAKA,MAAL,GAAcA,MAAd;AAEA;;;;;;;;;;AASA,SAAKC,SAAL,GAAiB,KAAjB;AAEA;;;;;;;;;;AASA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,SAAL,GAAiB,IAAIN,OAAJ,EAAjB;AAEA;;;;;;;;AAOA,SAAKO,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;AAQA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,QAAL,GAAgB,CAAhB;AAEA;;;;;;;;;;AASA,SAAKC,SAAL;AAEA;;;;;;;;;AAQA,SAAKC,cAAL;AACH,GA9GiB;;AAgHlB;;;;;;;;;;;;;;;;;AAiBAC,EAAAA,KAAK,EAAE,UAAUR,QAAV,EAAoBC,SAApB,EAA+BQ,KAA/B,EAAsCC,QAAtC,EAAgDC,OAAhD,EACP;AACI,QAAIX,QAAQ,KAAKY,SAAjB,EAA4B;AAAEZ,MAAAA,QAAQ,GAAG,GAAX;AAAiB;;AAC/C,QAAIC,SAAS,KAAKW,SAAlB,EAA6B;AAAEX,MAAAA,SAAS,GAAG,IAAZ;AAAmB;;AAClD,QAAIQ,KAAK,KAAKG,SAAd,EAAyB;AAAEH,MAAAA,KAAK,GAAG,KAAR;AAAgB;;AAC3C,QAAIC,QAAQ,KAAKE,SAAjB,EAA4B;AAAEF,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,QAAIC,OAAO,KAAKC,SAAhB,EAA2B;AAAED,MAAAA,OAAO,GAAG,KAAKb,MAAL,CAAYe,KAAtB;AAA8B;;AAE3D,QAAI,CAACJ,KAAD,IAAU,KAAKV,SAAnB,EACA;AACI,aAAO,KAAKD,MAAZ;AACH;;AAED,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKE,QAAL,GAAgB,CAAhB;;AAEA,QAAI,OAAOD,SAAP,KAAqB,QAAzB,EACA;AACI,WAAKA,SAAL,CAAea,GAAf,CAAmBb,SAAnB;AACH,KAHD,MAKA;AACI,WAAKA,SAAL,CAAea,GAAf,CAAmBb,SAAS,CAACc,CAA7B,EAAgCd,SAAS,CAACe,CAA1C;AACH;;AAED,SAAKb,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AAEA,SAAKC,SAAL,GAAiBI,QAAjB;AACA,SAAKH,cAAL,GAAsBI,OAAtB;AAEA,SAAKb,MAAL,CAAYmB,IAAZ,CAAiBvB,MAAM,CAACwB,WAAxB,EAAqC,KAAKpB,MAA1C,EAAkD,IAAlD,EAAwDE,QAAxD,EAAkEC,SAAlE;AAEA,WAAO,KAAKH,MAAZ;AACH,GArKiB;;AAuKlB;;;;;;AAMAqB,EAAAA,SAAS,EAAE,YACX;AACI,QAAI,KAAKpB,SAAT,EACA;AACI,WAAKD,MAAL,CAAYsB,MAAZ,CAAmBC,SAAnB,CAA6B,KAAKjB,QAAlC,EAA4C,KAAKC,QAAjD;AACH;AACJ,GAnLiB;;AAqLlB;;;;;;;;;AASAiB,EAAAA,MAAM,EAAE,UAAUC,IAAV,EAAgBC,KAAhB,EACR;AACI,QAAI,CAAC,KAAKzB,SAAV,EACA;AACI;AACH;;AAED,SAAKI,QAAL,IAAiBqB,KAAjB;AAEA,SAAKtB,QAAL,GAAgBX,KAAK,CAAC,KAAKY,QAAL,GAAgB,KAAKH,QAAtB,EAAgC,CAAhC,EAAmC,CAAnC,CAArB;;AAEA,QAAI,KAAKM,SAAT,EACA;AACI,WAAKA,SAAL,CAAemB,IAAf,CAAoB,KAAKlB,cAAzB,EAAyC,KAAKT,MAA9C,EAAsD,KAAKI,QAA3D;AACH;;AAED,QAAI,KAAKC,QAAL,GAAgB,KAAKH,QAAzB,EACA;AACI,UAAIC,SAAS,GAAG,KAAKA,SAArB;AACA,UAAIyB,KAAK,GAAG,KAAK5B,MAAL,CAAY6B,GAAxB;AACA,UAAIC,MAAM,GAAG,KAAK9B,MAAL,CAAY+B,GAAzB;AACA,UAAIC,IAAI,GAAG,KAAKhC,MAAL,CAAYgC,IAAvB;AAEA,WAAK1B,QAAL,GAAgB,CAAC2B,IAAI,CAACC,MAAL,KAAgB/B,SAAS,CAACc,CAA1B,GAA8BW,KAA9B,GAAsC,CAAtC,GAA0CzB,SAAS,CAACc,CAAV,GAAcW,KAAzD,IAAkEI,IAAlF;AACA,WAAKzB,QAAL,GAAgB,CAAC0B,IAAI,CAACC,MAAL,KAAgB/B,SAAS,CAACe,CAA1B,GAA8BY,MAA9B,GAAuC,CAAvC,GAA2C3B,SAAS,CAACe,CAAV,GAAcY,MAA1D,IAAoEE,IAApF;;AAEA,UAAI,KAAKhC,MAAL,CAAYmC,WAAhB,EACA;AACI,aAAK7B,QAAL,GAAgB2B,IAAI,CAACG,KAAL,CAAW,KAAK9B,QAAhB,CAAhB;AACA,aAAKC,QAAL,GAAgB0B,IAAI,CAACG,KAAL,CAAW,KAAK7B,QAAhB,CAAhB;AACH;AACJ,KAfD,MAiBA;AACI,WAAK8B,cAAL;AACH;AACJ,GAlOiB;;AAoOlB;;;;;;;AAOAA,EAAAA,cAAc,EAAE,YAChB;AACI,SAAK/B,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AAEA,SAAKR,SAAL,GAAiB,KAAjB;AAEA,SAAKD,MAAL,CAAYmB,IAAZ,CAAiBvB,MAAM,CAAC0C,cAAxB,EAAwC,KAAKtC,MAA7C,EAAqD,IAArD;AACH,GAtPiB;;AAwPlB;;;;;;;AAOAuC,EAAAA,KAAK,EAAE,YACP;AACI,SAAKtC,SAAL,GAAiB,KAAjB;AAEA,SAAKK,QAAL,GAAgB,CAAhB;AACA,SAAKC,QAAL,GAAgB,CAAhB;AAEA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACH,GAxQiB;;AA0QlB;;;;;;AAMA+B,EAAAA,OAAO,EAAE,YACT;AACI,SAAKD,KAAL;AAEA,SAAKvC,MAAL,GAAc,IAAd;AACA,SAAKG,SAAL,GAAiB,IAAjB;AACH;AAtRiB,CAAV,CAAZ;AA0RAsC,MAAM,CAACC,OAAP,GAAiB5C,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar Events = require('../events');\r\nvar Vector2 = require('../../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Shake effect.\r\n *\r\n * This effect will shake the camera viewport by a random amount, bounded by the specified intensity, each frame.\r\n *\r\n * Only the camera viewport is moved. None of the objects it is displaying are impacted, i.e. their positions do\r\n * not change.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Shake\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.5.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Shake = new Class({\r\n\r\n    initialize:\r\n\r\n    function Shake (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readonly\r\n         * @since 3.5.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.5.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#duration\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.5.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The intensity of the effect. Use small float values. The default when the effect starts is 0.05.\r\n         * This is a Vector2 object, allowing you to control the shake intensity independently across x and y.\r\n         * You can modify this value while the effect is active to create more varied shake effects.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#intensity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.5.0\r\n         */\r\n        this.intensity = new Vector2();\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#progress\r\n         * @type {number}\r\n         * @since 3.5.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * How much to offset the camera by horizontally.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetX\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._offsetX = 0;\r\n\r\n        /**\r\n         * How much to offset the camera by vertically.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_offsetY\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._offsetY = 0;\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdate\r\n         * @type {?Phaser.Types.Cameras.Scene2D.CameraShakeCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Shake#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.5.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * Shakes the Camera by the given intensity over the duration specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#start\r\n     * @fires Phaser.Cameras.Scene2D.Events#SHAKE_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} [duration=100] - The duration of the effect in milliseconds.\r\n     * @param {(number|Phaser.Math.Vector2)} [intensity=0.05] - The intensity of the shake.\r\n     * @param {boolean} [force=false] - Force the shake effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraShakeCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent two arguments: A reference to the camera and a progress amount between 0 and 1 indicating how complete the effect is.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (duration, intensity, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 100; }\r\n        if (intensity === undefined) { intensity = 0.05; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return this.camera;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        if (typeof intensity === 'number')\r\n        {\r\n            this.intensity.set(intensity);\r\n        }\r\n        else\r\n        {\r\n            this.intensity.set(intensity.x, intensity.y);\r\n        }\r\n\r\n        this._elapsed = 0;\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit(Events.SHAKE_START, this.camera, this, duration, intensity);\r\n\r\n        return this.camera;\r\n    },\r\n\r\n    /**\r\n     * The pre-render step for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#preRender\r\n     * @since 3.5.0\r\n     */\r\n    preRender: function ()\r\n    {\r\n        if (this.isRunning)\r\n        {\r\n            this.camera.matrix.translate(this._offsetX, this._offsetY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#update\r\n     * @since 3.5.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._onUpdate)\r\n        {\r\n            this._onUpdate.call(this._onUpdateScope, this.camera, this.progress);\r\n        }\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            var intensity = this.intensity;\r\n            var width = this.camera._cw;\r\n            var height = this.camera._ch;\r\n            var zoom = this.camera.zoom;\r\n\r\n            this._offsetX = (Math.random() * intensity.x * width * 2 - intensity.x * width) * zoom;\r\n            this._offsetY = (Math.random() * intensity.y * height * 2 - intensity.y * height) * zoom;\r\n\r\n            if (this.camera.roundPixels)\r\n            {\r\n                this._offsetX = Math.round(this._offsetX);\r\n                this._offsetY = Math.round(this._offsetY);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#effectComplete\r\n     * @fires Phaser.Cameras.Scene2D.Events#SHAKE_COMPLETE\r\n     * @since 3.5.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit(Events.SHAKE_COMPLETE, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#reset\r\n     * @since 3.5.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._offsetX = 0;\r\n        this._offsetY = 0;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Shake#destroy\r\n     * @since 3.5.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n        this.intensity = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Shake;\r\n"]},"metadata":{},"sourceType":"script"}