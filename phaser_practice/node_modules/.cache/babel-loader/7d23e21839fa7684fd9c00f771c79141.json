{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\n/**\r\n * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n * disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByExclusion\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SetCollisionByExclusion = function (indexes, collides, recalculateFaces, layer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (!Array.isArray(indexes)) {\n    indexes = [indexes];\n  } // Note: this only updates layer.collideIndexes for tile indexes found currently in the layer\n\n\n  for (var ty = 0; ty < layer.height; ty++) {\n    for (var tx = 0; tx < layer.width; tx++) {\n      var tile = layer.data[ty][tx];\n\n      if (tile && indexes.indexOf(tile.index) === -1) {\n        SetTileCollision(tile, collides);\n        SetLayerCollisionIndex(tile.index, collides, layer);\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionByExclusion;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetCollisionByExclusion.js"],"names":["SetTileCollision","require","CalculateFacesWithin","SetLayerCollisionIndex","SetCollisionByExclusion","indexes","collides","recalculateFaces","layer","undefined","Array","isArray","ty","height","tx","width","tile","data","indexOf","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIG,uBAAuB,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,gBAA7B,EAA+CC,KAA/C,EAC9B;AACI,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AAAEH,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,MAAIC,gBAAgB,KAAKE,SAAzB,EAAoC;AAAEF,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAChE,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcN,OAAd,CAAL,EAA6B;AAAEA,IAAAA,OAAO,GAAG,CAAEA,OAAF,CAAV;AAAwB,GAH3D,CAKI;;;AACA,OAAK,IAAIO,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,KAAK,CAACK,MAA5B,EAAoCD,EAAE,EAAtC,EACA;AACI,SAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGN,KAAK,CAACO,KAA5B,EAAmCD,EAAE,EAArC,EACA;AACI,UAAIE,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAWL,EAAX,EAAeE,EAAf,CAAX;;AACA,UAAIE,IAAI,IAAIX,OAAO,CAACa,OAAR,CAAgBF,IAAI,CAACG,KAArB,MAAgC,CAAC,CAA7C,EACA;AACInB,QAAAA,gBAAgB,CAACgB,IAAD,EAAOV,QAAP,CAAhB;AACAH,QAAAA,sBAAsB,CAACa,IAAI,CAACG,KAAN,EAAab,QAAb,EAAuBE,KAAvB,CAAtB;AACH;AACJ;AACJ;;AAED,MAAID,gBAAJ,EACA;AACIL,IAAAA,oBAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOM,KAAK,CAACO,KAAb,EAAoBP,KAAK,CAACK,MAA1B,EAAkCL,KAAlC,CAApB;AACH;AACJ,CAxBD;;AA0BAY,MAAM,CAACC,OAAP,GAAiBjB,uBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar SetLayerCollisionIndex = require('./SetLayerCollisionIndex');\r\n\r\n/**\r\n * Sets collision on all tiles in the given layer, except for tiles that have an index specified in\r\n * the given array. The `collides` parameter controls if collision will be enabled (true) or\r\n * disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByExclusion\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer[]} indexes - An array of the tile indexes to not be counted for collision.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionByExclusion = function (indexes, collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n    if (!Array.isArray(indexes)) { indexes = [ indexes ]; }\r\n\r\n    // Note: this only updates layer.collideIndexes for tile indexes found currently in the layer\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n            if (tile && indexes.indexOf(tile.index) === -1)\r\n            {\r\n                SetTileCollision(tile, collides);\r\n                SetLayerCollisionIndex(tile.index, collides, layer);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionByExclusion;\r\n"]},"metadata":{},"sourceType":"script"}