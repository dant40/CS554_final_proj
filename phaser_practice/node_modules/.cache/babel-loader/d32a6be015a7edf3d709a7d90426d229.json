{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../math/Clamp');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Impact.GetVelocity\r\n * @since 3.0.0\r\n *\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n * @param {number} vel - [description]\r\n * @param {number} accel - [description]\r\n * @param {number} friction - [description]\r\n * @param {number} max - [description]\r\n *\r\n * @return {number} [description]\r\n */\n\n\nvar GetVelocity = function (delta, vel, accel, friction, max) {\n  if (accel) {\n    return Clamp(vel + accel * delta, -max, max);\n  } else if (friction) {\n    var frictionDelta = friction * delta;\n\n    if (vel - frictionDelta > 0) {\n      return vel - frictionDelta;\n    } else if (vel + frictionDelta < 0) {\n      return vel + frictionDelta;\n    } else {\n      return 0;\n    }\n  }\n\n  return Clamp(vel, -max, max);\n};\n\nmodule.exports = GetVelocity;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/GetVelocity.js"],"names":["Clamp","require","GetVelocity","delta","vel","accel","friction","max","frictionDelta","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,WAAW,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,GAAvC,EAClB;AACI,MAAIF,KAAJ,EACA;AACI,WAAOL,KAAK,CAACI,GAAG,GAAGC,KAAK,GAAGF,KAAf,EAAsB,CAACI,GAAvB,EAA4BA,GAA5B,CAAZ;AACH,GAHD,MAIK,IAAID,QAAJ,EACL;AACI,QAAIE,aAAa,GAAGF,QAAQ,GAAGH,KAA/B;;AAEA,QAAIC,GAAG,GAAGI,aAAN,GAAsB,CAA1B,EACA;AACI,aAAOJ,GAAG,GAAGI,aAAb;AACH,KAHD,MAIK,IAAIJ,GAAG,GAAGI,aAAN,GAAsB,CAA1B,EACL;AACI,aAAOJ,GAAG,GAAGI,aAAb;AACH,KAHI,MAKL;AACI,aAAO,CAAP;AACH;AACJ;;AAED,SAAOR,KAAK,CAACI,GAAD,EAAM,CAACG,GAAP,EAAYA,GAAZ,CAAZ;AACH,CAzBD;;AA2BAE,MAAM,CAACC,OAAP,GAAiBR,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../math/Clamp');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Physics.Impact.GetVelocity\r\n * @since 3.0.0\r\n *\r\n * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n * @param {number} vel - [description]\r\n * @param {number} accel - [description]\r\n * @param {number} friction - [description]\r\n * @param {number} max - [description]\r\n *\r\n * @return {number} [description]\r\n */\r\nvar GetVelocity = function (delta, vel, accel, friction, max)\r\n{\r\n    if (accel)\r\n    {\r\n        return Clamp(vel + accel * delta, -max, max);\r\n    }\r\n    else if (friction)\r\n    {\r\n        var frictionDelta = friction * delta;\r\n        \r\n        if (vel - frictionDelta > 0)\r\n        {\r\n            return vel - frictionDelta;\r\n        }\r\n        else if (vel + frictionDelta < 0)\r\n        {\r\n            return vel + frictionDelta;\r\n        }\r\n        else\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    return Clamp(vel, -max, max);\r\n};\r\n\r\nmodule.exports = GetVelocity;\r\n"]},"metadata":{},"sourceType":"script"}