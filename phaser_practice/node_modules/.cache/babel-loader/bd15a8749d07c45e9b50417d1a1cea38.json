{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar LineToLine = require('./LineToLine');\n\nvar Contains = require('../rectangle/Contains');\n\nvar ContainsArray = require('../triangle/ContainsArray');\n\nvar Decompose = require('../rectangle/Decompose');\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape.\r\n *\r\n * @function Phaser.Geom.Intersects.RectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n *\r\n * @return {boolean} A value of `true` if objects intersect; otherwise `false`.\r\n */\n\n\nvar RectangleToTriangle = function (rect, triangle) {\n  //  First the cheapest ones:\n  if (triangle.left > rect.right || triangle.right < rect.left || triangle.top > rect.bottom || triangle.bottom < rect.top) {\n    return false;\n  }\n\n  var triA = triangle.getLineA();\n  var triB = triangle.getLineB();\n  var triC = triangle.getLineC(); //  Are any of the triangle points within the rectangle?\n\n  if (Contains(rect, triA.x1, triA.y1) || Contains(rect, triA.x2, triA.y2)) {\n    return true;\n  }\n\n  if (Contains(rect, triB.x1, triB.y1) || Contains(rect, triB.x2, triB.y2)) {\n    return true;\n  }\n\n  if (Contains(rect, triC.x1, triC.y1) || Contains(rect, triC.x2, triC.y2)) {\n    return true;\n  } //  Cheap tests over, now to see if any of the lines intersect ...\n\n\n  var rectA = rect.getLineA();\n  var rectB = rect.getLineB();\n  var rectC = rect.getLineC();\n  var rectD = rect.getLineD();\n\n  if (LineToLine(triA, rectA) || LineToLine(triA, rectB) || LineToLine(triA, rectC) || LineToLine(triA, rectD)) {\n    return true;\n  }\n\n  if (LineToLine(triB, rectA) || LineToLine(triB, rectB) || LineToLine(triB, rectC) || LineToLine(triB, rectD)) {\n    return true;\n  }\n\n  if (LineToLine(triC, rectA) || LineToLine(triC, rectB) || LineToLine(triC, rectC) || LineToLine(triC, rectD)) {\n    return true;\n  } //  None of the lines intersect, so are any rectangle points within the triangle?\n\n\n  var points = Decompose(rect);\n  var within = ContainsArray(triangle, points, true);\n  return within.length > 0;\n};\n\nmodule.exports = RectangleToTriangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/RectangleToTriangle.js"],"names":["LineToLine","require","Contains","ContainsArray","Decompose","RectangleToTriangle","rect","triangle","left","right","top","bottom","triA","getLineA","triB","getLineB","triC","getLineC","x1","y1","x2","y2","rectA","rectB","rectC","rectD","getLineD","points","within","length","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar LineToLine = require('./LineToLine');\r\nvar Contains = require('../rectangle/Contains');\r\nvar ContainsArray = require('../triangle/ContainsArray');\r\nvar Decompose = require('../rectangle/Decompose');\r\n\r\n/**\r\n * Checks for intersection between Rectangle shape and Triangle shape.\r\n *\r\n * @function Phaser.Geom.Intersects.RectangleToTriangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Rectangle} rect - Rectangle object to test.\r\n * @param {Phaser.Geom.Triangle} triangle - Triangle object to test.\r\n *\r\n * @return {boolean} A value of `true` if objects intersect; otherwise `false`.\r\n */\r\nvar RectangleToTriangle = function (rect, triangle)\r\n{\r\n    //  First the cheapest ones:\r\n\r\n    if (\r\n        triangle.left > rect.right ||\r\n        triangle.right < rect.left ||\r\n        triangle.top > rect.bottom ||\r\n        triangle.bottom < rect.top)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var triA = triangle.getLineA();\r\n    var triB = triangle.getLineB();\r\n    var triC = triangle.getLineC();\r\n\r\n    //  Are any of the triangle points within the rectangle?\r\n\r\n    if (Contains(rect, triA.x1, triA.y1) || Contains(rect, triA.x2, triA.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triB.x1, triB.y1) || Contains(rect, triB.x2, triB.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (Contains(rect, triC.x1, triC.y1) || Contains(rect, triC.x2, triC.y2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Cheap tests over, now to see if any of the lines intersect ...\r\n\r\n    var rectA = rect.getLineA();\r\n    var rectB = rect.getLineB();\r\n    var rectC = rect.getLineC();\r\n    var rectD = rect.getLineD();\r\n\r\n    if (LineToLine(triA, rectA) || LineToLine(triA, rectB) || LineToLine(triA, rectC) || LineToLine(triA, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triB, rectA) || LineToLine(triB, rectB) || LineToLine(triB, rectC) || LineToLine(triB, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triC, rectA) || LineToLine(triC, rectB) || LineToLine(triC, rectC) || LineToLine(triC, rectD))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  None of the lines intersect, so are any rectangle points within the triangle?\r\n\r\n    var points = Decompose(rect);\r\n    var within = ContainsArray(triangle, points, true);\r\n\r\n    return (within.length > 0);\r\n};\r\n\r\nmodule.exports = RectangleToTriangle;\r\n"]},"metadata":{},"sourceType":"script"}