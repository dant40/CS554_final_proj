{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Angle = require('../math/angle/Between');\n\nvar Class = require('../utils/Class');\n\nvar Distance = require('../math/distance/DistanceBetween');\n\nvar FuzzyEqual = require('../math/fuzzy/Equal');\n\nvar SmoothStepInterpolation = require('../math/interpolation/SmoothStepInterpolation');\n\nvar Vector2 = require('../math/Vector2');\n/**\r\n * @classdesc\r\n * A Pointer object encapsulates both mouse and touch input within Phaser.\r\n *\r\n * By default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\r\n * game, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\r\n * otherwise it won't be managed by the input system.\r\n *\r\n * You can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\r\n * `InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\r\n *\r\n * The properties of this object are set by the Input Plugin during processing. This object is then sent in all\r\n * input related events that the Input Plugin emits, so you can reference properties from it directly in your\r\n * callbacks.\r\n *\r\n * @class Pointer\r\n * @memberof Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} manager - A reference to the Input Manager.\r\n * @param {integer} id - The internal ID of this Pointer.\r\n */\n\n\nvar Pointer = new Class({\n  initialize: function Pointer(manager, id) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Pointer#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = manager;\n    /**\r\n     * The internal ID of this Pointer.\r\n     *\r\n     * @name Phaser.Input.Pointer#id\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.id = id;\n    /**\r\n     * The most recent native DOM Event this Pointer has processed.\r\n     *\r\n     * @name Phaser.Input.Pointer#event\r\n     * @type {(TouchEvent|MouseEvent)}\r\n     * @since 3.0.0\r\n     */\n\n    this.event;\n    /**\r\n     * The DOM element the Pointer was pressed down on, taken from the DOM event.\r\n     * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n     *\r\n     * @name Phaser.Input.Pointer#downElement\r\n     * @type {any}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\n\n    this.downElement;\n    /**\r\n     * The DOM element the Pointer was released on, taken from the DOM event.\r\n     * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n     *\r\n     * @name Phaser.Input.Pointer#upElement\r\n     * @type {any}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\n\n    this.upElement;\n    /**\r\n     * The camera the Pointer interacted with during its last update.\r\n     * \r\n     * A Pointer can only ever interact with one camera at once, which will be the top-most camera\r\n     * in the list should multiple cameras be positioned on-top of each other.\r\n     *\r\n     * @name Phaser.Input.Pointer#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.camera = null;\n    /**\r\n     * A read-only property that indicates which button was pressed, or released, on the pointer\r\n     * during the most recent event. It is only set during `up` and `down` events.\r\n     * \r\n     * On Touch devices the value is always 0.\r\n     * \r\n     * Users may change the configuration of buttons on their pointing device so that if an event's button property\r\n     * is zero, it may not have been caused by the button that is physically leftâ€“most on the pointing device;\r\n     * however, it should behave as if the left button was clicked in the standard button layout.\r\n     *\r\n     * @name Phaser.Input.Pointer#button\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.18.0\r\n     */\n\n    this.button = 0;\n    /**\r\n     * 0: No button or un-initialized\r\n     * 1: Left button\r\n     * 2: Right button\r\n     * 4: Wheel button or middle button\r\n     * 8: 4th button (typically the \"Browser Back\" button)\r\n     * 16: 5th button (typically the \"Browser Forward\" button)\r\n     * \r\n     * For a mouse configured for left-handed use, the button actions are reversed.\r\n     * In this case, the values are read from right to left.\r\n     *\r\n     * @name Phaser.Input.Pointer#buttons\r\n     * @type {integer}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.buttons = 0;\n    /**\r\n     * The position of the Pointer in screen space.\r\n     *\r\n     * @name Phaser.Input.Pointer#position\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector2();\n    /**\r\n     * The previous position of the Pointer in screen space.\r\n     * \r\n     * The old x and y values are stored in here during the InputManager.transformPointer call.\r\n     * \r\n     * Use the properties `velocity`, `angle` and `distance` to create your own gesture recognition.\r\n     *\r\n     * @name Phaser.Input.Pointer#prevPosition\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n\n    this.prevPosition = new Vector2();\n    /**\r\n     * An internal vector used for calculations of the pointer speed and angle.\r\n     *\r\n     * @name Phaser.Input.Pointer#midPoint\r\n     * @type {Phaser.Math.Vector2}\r\n     * @private\r\n     * @since 3.16.0\r\n     */\n\n    this.midPoint = new Vector2(-1, -1);\n    /**\r\n     * The current velocity of the Pointer, based on its current and previous positions.\r\n     * \r\n     * This value is smoothed out each frame, according to the `motionFactor` property.\r\n     * \r\n     * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n     * it changes based on movement alone - a button doesn't have to be pressed first.\r\n     *\r\n     * @name Phaser.Input.Pointer#velocity\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\n\n    this.velocity = new Vector2();\n    /**\r\n     * The current angle the Pointer is moving, in radians, based on its previous and current position.\r\n     * \r\n     * The angle is based on the old position facing to the current position.\r\n     * \r\n     * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n     * it changes based on movement alone - a button doesn't have to be pressed first.\r\n     *\r\n     * @name Phaser.Input.Pointer#angle\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\n\n    this.angle = 0;\n    /**\r\n     * The distance the Pointer has moved, based on its previous and current position.\r\n     * \r\n     * This value is smoothed out each frame, according to the `motionFactor` property.\r\n     * \r\n     * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n     * it changes based on movement alone - a button doesn't have to be pressed first.\r\n     * \r\n     * If you need the total distance travelled since the primary buttons was pressed down,\r\n     * then use the `Pointer.getDistance` method.\r\n     *\r\n     * @name Phaser.Input.Pointer#distance\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\n\n    this.distance = 0;\n    /**\r\n     * The smoothing factor to apply to the Pointer position.\r\n     * \r\n     * Due to their nature, pointer positions are inherently noisy. While this is fine for lots of games, if you need cleaner positions\r\n     * then you can set this value to apply an automatic smoothing to the positions as they are recorded.\r\n     * \r\n     * The default value of zero means 'no smoothing'.\r\n     * Set to a small value, such as 0.2, to apply an average level of smoothing between positions. You can do this by changing this\r\n     * value directly, or by setting the `input.smoothFactor` property in the Game Config.\r\n     * \r\n     * Positions are only smoothed when the pointer moves. If the primary button on this Pointer enters an Up or Down state, then the position\r\n     * is always precise, and not smoothed.\r\n     *\r\n     * @name Phaser.Input.Pointer#smoothFactor\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.16.0\r\n     */\n\n    this.smoothFactor = 0;\n    /**\r\n     * The factor applied to the motion smoothing each frame.\r\n     * \r\n     * This value is passed to the Smooth Step Interpolation that is used to calculate the velocity,\r\n     * angle and distance of the Pointer. It's applied every frame, until the midPoint reaches the current\r\n     * position of the Pointer. 0.2 provides a good average but can be increased if you need a\r\n     * quicker update and are working in a high performance environment. Never set this value to\r\n     * zero.\r\n     *\r\n     * @name Phaser.Input.Pointer#motionFactor\r\n     * @type {number}\r\n     * @default 0.2\r\n     * @since 3.16.0\r\n     */\n\n    this.motionFactor = 0.2;\n    /**\r\n     * The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n     * \r\n     * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n     * the `Pointer.updateWorldPoint` method.\r\n     *\r\n     * @name Phaser.Input.Pointer#worldX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.10.0\r\n     */\n\n    this.worldX = 0;\n    /**\r\n     * The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n     * \r\n     * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n     * the `Pointer.updateWorldPoint` method.\r\n     *\r\n     * @name Phaser.Input.Pointer#worldY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.10.0\r\n     */\n\n    this.worldY = 0;\n    /**\r\n     * Time when this Pointer was most recently moved (regardless of the state of its buttons, if any)\r\n     *\r\n     * @name Phaser.Input.Pointer#moveTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.moveTime = 0;\n    /**\r\n     * X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#downX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.downX = 0;\n    /**\r\n     * Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#downY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.downY = 0;\n    /**\r\n     * Time when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#downTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.downTime = 0;\n    /**\r\n     * X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#upX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.upX = 0;\n    /**\r\n     * Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#upY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.upY = 0;\n    /**\r\n     * Time when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n     *\r\n     * @name Phaser.Input.Pointer#upTime\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.upTime = 0;\n    /**\r\n     * Is the primary button down? (usually button 0, the left mouse button)\r\n     *\r\n     * @name Phaser.Input.Pointer#primaryDown\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.primaryDown = false;\n    /**\r\n     * Is _any_ button on this pointer considered as being down?\r\n     *\r\n     * @name Phaser.Input.Pointer#isDown\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isDown = false;\n    /**\r\n     * Did the previous input event come from a Touch input (true) or Mouse? (false)\r\n     *\r\n     * @name Phaser.Input.Pointer#wasTouch\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.wasTouch = false;\n    /**\r\n     * Did this Pointer get canceled by a touchcancel event?\r\n     * \r\n     * Note: \"canceled\" is the American-English spelling of \"cancelled\". Please don't submit PRs correcting it!\r\n     *\r\n     * @name Phaser.Input.Pointer#wasCanceled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.15.0\r\n     */\n\n    this.wasCanceled = false;\n    /**\r\n     * If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.\r\n     *\r\n     * @name Phaser.Input.Pointer#movementX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.movementX = 0;\n    /**\r\n     * If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.\r\n     *\r\n     * @name Phaser.Input.Pointer#movementY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.movementY = 0;\n    /**\r\n     * The identifier property of the Pointer as set by the DOM event when this Pointer is started.\r\n     *\r\n     * @name Phaser.Input.Pointer#identifier\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\n\n    this.identifier = 0;\n    /**\r\n     * The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\r\n     * The browser can and will recycle this value.\r\n     *\r\n     * @name Phaser.Input.Pointer#pointerId\r\n     * @type {number}\r\n     * @since 3.10.0\r\n     */\n\n    this.pointerId = null;\n    /**\r\n     * An active Pointer is one that is currently pressed down on the display.\r\n     * A Mouse is always considered as active.\r\n     *\r\n     * @name Phaser.Input.Pointer#active\r\n     * @type {boolean}\r\n     * @since 3.10.0\r\n     */\n\n    this.active = id === 0 ? true : false;\n    /**\r\n     * Is this pointer Pointer Locked?\r\n     * \r\n     * Only a mouse pointer can be locked and it only becomes locked when requested via\r\n     * the browsers Pointer Lock API.\r\n     * \r\n     * You can request this by calling the `this.input.mouse.requestPointerLock()` method from\r\n     * a `pointerdown` or `pointerup` event handler.\r\n     *\r\n     * @name Phaser.Input.Pointer#locked\r\n     * @readonly\r\n     * @type {boolean}\r\n     * @since 3.19.0\r\n     */\n\n    this.locked = false;\n    /**\r\n     * The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n     *\r\n     * @name Phaser.Input.Pointer#deltaX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.18.0\r\n     */\n\n    this.deltaX = 0;\n    /**\r\n     * The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n     * This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n     *\r\n     * @name Phaser.Input.Pointer#deltaY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.18.0\r\n     */\n\n    this.deltaY = 0;\n    /**\r\n     * The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n     *\r\n     * @name Phaser.Input.Pointer#deltaZ\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.18.0\r\n     */\n\n    this.deltaZ = 0;\n  },\n\n  /**\r\n   * Takes a Camera and updates this Pointer's `worldX` and `worldY` values so they are\r\n   * the result of a translation through the given Camera.\r\n   * \r\n   * Note that the values will be automatically replaced the moment the Pointer is\r\n   * updated by an input event, such as a mouse move, so should be used immediately.\r\n   *\r\n   * @method Phaser.Input.Pointer#updateWorldPoint\r\n   * @since 3.19.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n   *\r\n   * @return {this} This Pointer object.\r\n   */\n  updateWorldPoint: function (camera) {\n    var x = this.x;\n    var y = this.y;\n\n    if (camera.resolution !== 1) {\n      x += camera._x;\n      y += camera._y;\n    } //  Stores the world point inside of tempPoint\n\n\n    var temp = camera.getWorldPoint(x, y);\n    this.worldX = temp.x;\n    this.worldY = temp.y;\n    return this;\n  },\n\n  /**\r\n   * Takes a Camera and returns a Vector2 containing the translated position of this Pointer\r\n   * within that Camera. This can be used to convert this Pointers position into camera space.\r\n   *\r\n   * @method Phaser.Input.Pointer#positionToCamera\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the translation.\r\n   * @param {(Phaser.Math.Vector2|object)} [output] - A Vector2-like object in which to store the translated position.\r\n   *\r\n   * @return {(Phaser.Math.Vector2|object)} A Vector2 containing the translated coordinates of this Pointer, based on the given camera.\r\n   */\n  positionToCamera: function (camera, output) {\n    return camera.getWorldPoint(this.x, this.y, output);\n  },\n\n  /**\r\n   * Calculates the motion of this Pointer, including its velocity and angle of movement.\r\n   * This method is called automatically each frame by the Input Manager.\r\n   *\r\n   * @method Phaser.Input.Pointer#updateMotion\r\n   * @private\r\n   * @since 3.16.0\r\n   */\n  updateMotion: function () {\n    var cx = this.position.x;\n    var cy = this.position.y;\n    var mx = this.midPoint.x;\n    var my = this.midPoint.y;\n\n    if (cx === mx && cy === my) {\n      //  Nothing to do here\n      return;\n    } //  Moving towards our goal ...\n\n\n    var vx = SmoothStepInterpolation(this.motionFactor, mx, cx);\n    var vy = SmoothStepInterpolation(this.motionFactor, my, cy);\n\n    if (FuzzyEqual(vx, cx, 0.1)) {\n      vx = cx;\n    }\n\n    if (FuzzyEqual(vy, cy, 0.1)) {\n      vy = cy;\n    }\n\n    this.midPoint.set(vx, vy);\n    var dx = cx - vx;\n    var dy = cy - vy;\n    this.velocity.set(dx, dy);\n    this.angle = Angle(vx, vy, cx, cy);\n    this.distance = Math.sqrt(dx * dx + dy * dy);\n  },\n\n  /**\r\n   * Internal method to handle a Mouse Up Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#up\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {MouseEvent} event - The Mouse Event to process.\r\n   */\n  up: function (event) {\n    if ('buttons' in event) {\n      this.buttons = event.buttons;\n    }\n\n    this.event = event;\n    this.button = event.button;\n    this.upElement = event.target; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, event.pageX, event.pageY, false); //  0: Main button pressed, usually the left button or the un-initialized state\n\n    if (event.button === 0) {\n      this.primaryDown = false;\n      this.upX = this.x;\n      this.upY = this.y;\n      this.upTime = event.timeStamp;\n    }\n\n    this.isDown = false;\n    this.wasTouch = false;\n  },\n\n  /**\r\n   * Internal method to handle a Mouse Down Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#down\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {MouseEvent} event - The Mouse Event to process.\r\n   */\n  down: function (event) {\n    if ('buttons' in event) {\n      this.buttons = event.buttons;\n    }\n\n    this.event = event;\n    this.button = event.button;\n    this.downElement = event.target; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, event.pageX, event.pageY, false); //  0: Main button pressed, usually the left button or the un-initialized state\n\n    if (event.button === 0) {\n      this.primaryDown = true;\n      this.downX = this.x;\n      this.downY = this.y;\n      this.downTime = event.timeStamp;\n    }\n\n    this.isDown = true;\n    this.wasTouch = false;\n  },\n\n  /**\r\n   * Internal method to handle a Mouse Move Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#move\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {MouseEvent} event - The Mouse Event to process.\r\n   */\n  move: function (event) {\n    if ('buttons' in event) {\n      this.buttons = event.buttons;\n    }\n\n    this.event = event; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, event.pageX, event.pageY, true);\n\n    if (this.locked) {\n      //  Multiple DOM events may occur within one frame, but only one Phaser event will fire\n      this.movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\n      this.movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\n    }\n\n    this.moveTime = event.timeStamp;\n    this.wasTouch = false;\n  },\n\n  /**\r\n   * Internal method to handle a Mouse Wheel Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#wheel\r\n   * @private\r\n   * @since 3.18.0\r\n   *\r\n   * @param {WheelEvent} event - The Wheel Event to process.\r\n   */\n  wheel: function (event) {\n    if ('buttons' in event) {\n      this.buttons = event.buttons;\n    }\n\n    this.event = event; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, event.pageX, event.pageY, false);\n    this.deltaX = event.deltaX;\n    this.deltaY = event.deltaY;\n    this.deltaZ = event.deltaZ;\n    this.wasTouch = false;\n  },\n\n  /**\r\n   * Internal method to handle a Touch Start Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#touchstart\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n   * @param {TouchEvent} event - The full Touch Event.\r\n   */\n  touchstart: function (touch, event) {\n    if (touch['pointerId']) {\n      this.pointerId = touch.pointerId;\n    }\n\n    this.identifier = touch.identifier;\n    this.target = touch.target;\n    this.active = true;\n    this.buttons = 1;\n    this.event = event;\n    this.downElement = touch.target; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\n    this.primaryDown = true;\n    this.downX = this.x;\n    this.downY = this.y;\n    this.downTime = event.timeStamp;\n    this.isDown = true;\n    this.wasTouch = true;\n    this.wasCanceled = false;\n    this.updateMotion();\n  },\n\n  /**\r\n   * Internal method to handle a Touch Move Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#touchmove\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n   * @param {TouchEvent} event - The full Touch Event.\r\n   */\n  touchmove: function (touch, event) {\n    this.event = event; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, touch.pageX, touch.pageY, true);\n    this.moveTime = event.timeStamp;\n    this.wasTouch = true;\n    this.updateMotion();\n  },\n\n  /**\r\n   * Internal method to handle a Touch End Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#touchend\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n   * @param {TouchEvent} event - The full Touch Event.\r\n   */\n  touchend: function (touch, event) {\n    this.buttons = 0;\n    this.event = event;\n    this.upElement = touch.target; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\n    this.primaryDown = false;\n    this.upX = this.x;\n    this.upY = this.y;\n    this.upTime = event.timeStamp;\n    this.isDown = false;\n    this.wasTouch = true;\n    this.wasCanceled = false;\n    this.active = false;\n    this.updateMotion();\n  },\n\n  /**\r\n   * Internal method to handle a Touch Cancel Event.\r\n   *\r\n   * @method Phaser.Input.Pointer#touchcancel\r\n   * @private\r\n   * @since 3.15.0\r\n   *\r\n   * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n   * @param {TouchEvent} event - The full Touch Event.\r\n   */\n  touchcancel: function (touch, event) {\n    this.buttons = 0;\n    this.event = event;\n    this.upElement = touch.target; //  Sets the local x/y properties\n\n    this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\n    this.primaryDown = false;\n    this.upX = this.x;\n    this.upY = this.y;\n    this.upTime = event.timeStamp;\n    this.isDown = false;\n    this.wasTouch = true;\n    this.wasCanceled = true;\n    this.active = false;\n  },\n\n  /**\r\n   * Checks to see if any buttons are being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#noButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if no buttons are being held down.\r\n   */\n  noButtonDown: function () {\n    return this.buttons === 0;\n  },\n\n  /**\r\n   * Checks to see if the left button is being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#leftButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the left button is being held down.\r\n   */\n  leftButtonDown: function () {\n    return this.buttons & 1 ? true : false;\n  },\n\n  /**\r\n   * Checks to see if the right button is being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#rightButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the right button is being held down.\r\n   */\n  rightButtonDown: function () {\n    return this.buttons & 2 ? true : false;\n  },\n\n  /**\r\n   * Checks to see if the middle button is being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#middleButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the middle button is being held down.\r\n   */\n  middleButtonDown: function () {\n    return this.buttons & 4 ? true : false;\n  },\n\n  /**\r\n   * Checks to see if the back button is being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#backButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the back button is being held down.\r\n   */\n  backButtonDown: function () {\n    return this.buttons & 8 ? true : false;\n  },\n\n  /**\r\n   * Checks to see if the forward button is being held down on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#forwardButtonDown\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the forward button is being held down.\r\n   */\n  forwardButtonDown: function () {\n    return this.buttons & 16 ? true : false;\n  },\n\n  /**\r\n   * Checks to see if the left button was just released on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#leftButtonReleased\r\n   * @since 3.18.0\r\n   *\r\n   * @return {boolean} `true` if the left button was just released.\r\n   */\n  leftButtonReleased: function () {\n    return this.button === 0 && !this.isDown;\n  },\n\n  /**\r\n   * Checks to see if the right button was just released on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#rightButtonReleased\r\n   * @since 3.18.0\r\n   *\r\n   * @return {boolean} `true` if the right button was just released.\r\n   */\n  rightButtonReleased: function () {\n    return this.button === 2 && !this.isDown;\n  },\n\n  /**\r\n   * Checks to see if the middle button was just released on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#middleButtonReleased\r\n   * @since 3.18.0\r\n   *\r\n   * @return {boolean} `true` if the middle button was just released.\r\n   */\n  middleButtonReleased: function () {\n    return this.button === 1 && !this.isDown;\n  },\n\n  /**\r\n   * Checks to see if the back button was just released on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#backButtonReleased\r\n   * @since 3.18.0\r\n   *\r\n   * @return {boolean} `true` if the back button was just released.\r\n   */\n  backButtonReleased: function () {\n    return this.button === 3 && !this.isDown;\n  },\n\n  /**\r\n   * Checks to see if the forward button was just released on this Pointer.\r\n   *\r\n   * @method Phaser.Input.Pointer#forwardButtonReleased\r\n   * @since 3.18.0\r\n   *\r\n   * @return {boolean} `true` if the forward button was just released.\r\n   */\n  forwardButtonReleased: function () {\n    return this.button === 4 && !this.isDown;\n  },\n\n  /**\r\n   * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n   * distance between the Pointer's `downX` and `downY` values and the current position.\r\n   * \r\n   * If no button is held down, it will return the last recorded distance, based on where\r\n   * the Pointer was when the button was released.\r\n   * \r\n   * If you wish to get the distance being travelled currently, based on the velocity of the Pointer,\r\n   * then see the `Pointer.distance` property.\r\n   *\r\n   * @method Phaser.Input.Pointer#getDistance\r\n   * @since 3.13.0\r\n   *\r\n   * @return {number} The distance the Pointer moved.\r\n   */\n  getDistance: function () {\n    if (this.isDown) {\n      return Distance(this.downX, this.downY, this.x, this.y);\n    } else {\n      return Distance(this.downX, this.downY, this.upX, this.upY);\n    }\n  },\n\n  /**\r\n   * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n   * horizontal distance between the Pointer's `downX` and `downY` values and the current position.\r\n   * \r\n   * If no button is held down, it will return the last recorded horizontal distance, based on where\r\n   * the Pointer was when the button was released.\r\n   *\r\n   * @method Phaser.Input.Pointer#getDistanceX\r\n   * @since 3.16.0\r\n   *\r\n   * @return {number} The horizontal distance the Pointer moved.\r\n   */\n  getDistanceX: function () {\n    if (this.isDown) {\n      return Math.abs(this.downX - this.x);\n    } else {\n      return Math.abs(this.downX - this.upX);\n    }\n  },\n\n  /**\r\n   * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n   * vertical distance between the Pointer's `downX` and `downY` values and the current position.\r\n   * \r\n   * If no button is held down, it will return the last recorded vertical distance, based on where\r\n   * the Pointer was when the button was released.\r\n   *\r\n   * @method Phaser.Input.Pointer#getDistanceY\r\n   * @since 3.16.0\r\n   *\r\n   * @return {number} The vertical distance the Pointer moved.\r\n   */\n  getDistanceY: function () {\n    if (this.isDown) {\n      return Math.abs(this.downY - this.y);\n    } else {\n      return Math.abs(this.downY - this.upY);\n    }\n  },\n\n  /**\r\n   * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n   * duration since the button was pressed down.\r\n   * \r\n   * If no button is held down, it will return the last recorded duration, based on the time\r\n   * the Pointer button was released.\r\n   *\r\n   * @method Phaser.Input.Pointer#getDuration\r\n   * @since 3.16.0\r\n   *\r\n   * @return {number} The duration the Pointer was held down for in milliseconds.\r\n   */\n  getDuration: function () {\n    if (this.isDown) {\n      return this.manager.time - this.downTime;\n    } else {\n      return this.upTime - this.downTime;\n    }\n  },\n\n  /**\r\n   * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n   * angle between the Pointer's `downX` and `downY` values and the current position.\r\n   * \r\n   * If no button is held down, it will return the last recorded angle, based on where\r\n   * the Pointer was when the button was released.\r\n   * \r\n   * The angle is based on the old position facing to the current position.\r\n   * \r\n   * If you wish to get the current angle, based on the velocity of the Pointer, then\r\n   * see the `Pointer.angle` property.\r\n   *\r\n   * @method Phaser.Input.Pointer#getAngle\r\n   * @since 3.16.0\r\n   *\r\n   * @return {number} The angle between the Pointer's coordinates in radians.\r\n   */\n  getAngle: function () {\n    if (this.isDown) {\n      return Angle(this.downX, this.downY, this.x, this.y);\n    } else {\n      return Angle(this.downX, this.downY, this.upX, this.upY);\n    }\n  },\n\n  /**\r\n   * Takes the previous and current Pointer positions and then generates an array of interpolated values between\r\n   * the two. The array will be populated up to the size of the `steps` argument.\r\n   * \r\n   * ```javaScript\r\n   * var points = pointer.getInterpolatedPosition(4);\r\n   * \r\n   * // points[0] = { x: 0, y: 0 }\r\n   * // points[1] = { x: 2, y: 1 }\r\n   * // points[2] = { x: 3, y: 2 }\r\n   * // points[3] = { x: 6, y: 3 }\r\n   * ```\r\n   * \r\n   * Use this if you need to get smoothed values between the previous and current pointer positions. DOM pointer\r\n   * events can often fire faster than the main browser loop, and this will help you avoid janky movement\r\n   * especially if you have an object following a Pointer.\r\n   * \r\n   * Note that if you provide an output array it will only be populated up to the number of steps provided.\r\n   * It will not clear any previous data that may have existed beyond the range of the steps count.\r\n   * \r\n   * Internally it uses the Smooth Step interpolation calculation.\r\n   *\r\n   * @method Phaser.Input.Pointer#getInterpolatedPosition\r\n   * @since 3.11.0\r\n   * \r\n   * @param {integer} [steps=10] - The number of interpolation steps to use.\r\n   * @param {array} [out] - An array to store the results in. If not provided a new one will be created.\r\n   * \r\n   * @return {array} An array of interpolated values.\r\n   */\n  getInterpolatedPosition: function (steps, out) {\n    if (steps === undefined) {\n      steps = 10;\n    }\n\n    if (out === undefined) {\n      out = [];\n    }\n\n    var prevX = this.prevPosition.x;\n    var prevY = this.prevPosition.y;\n    var curX = this.position.x;\n    var curY = this.position.y;\n\n    for (var i = 0; i < steps; i++) {\n      var t = 1 / steps * i;\n      out[i] = {\n        x: SmoothStepInterpolation(t, prevX, curX),\n        y: SmoothStepInterpolation(t, prevY, curY)\n      };\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Destroys this Pointer instance and resets its external references.\r\n   *\r\n   * @method Phaser.Input.Pointer#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.camera = null;\n    this.manager = null;\n    this.position = null;\n  },\n\n  /**\r\n   * The x position of this Pointer.\r\n   * The value is in screen space.\r\n   * See `worldX` to get a camera converted position.\r\n   *\r\n   * @name Phaser.Input.Pointer#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function () {\n      return this.position.x;\n    },\n    set: function (value) {\n      this.position.x = value;\n    }\n  },\n\n  /**\r\n   * The y position of this Pointer.\r\n   * The value is in screen space.\r\n   * See `worldY` to get a camera converted position.\r\n   *\r\n   * @name Phaser.Input.Pointer#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function () {\n      return this.position.y;\n    },\n    set: function (value) {\n      this.position.y = value;\n    }\n  },\n\n  /**\r\n   * Time when this Pointer was most recently updated by a DOM Event.\r\n   * This comes directly from the `event.timeStamp` property.\r\n   * If no event has yet taken place, it will return zero.\r\n   *\r\n   * @name Phaser.Input.Pointer#time\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.16.0\r\n   */\n  time: {\n    get: function () {\n      return this.event ? this.event.timeStamp : 0;\n    }\n  }\n});\nmodule.exports = Pointer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/Pointer.js"],"names":["Angle","require","Class","Distance","FuzzyEqual","SmoothStepInterpolation","Vector2","Pointer","initialize","manager","id","event","downElement","upElement","camera","button","buttons","position","prevPosition","midPoint","velocity","angle","distance","smoothFactor","motionFactor","worldX","worldY","moveTime","downX","downY","downTime","upX","upY","upTime","primaryDown","isDown","wasTouch","wasCanceled","movementX","movementY","identifier","pointerId","active","locked","deltaX","deltaY","deltaZ","updateWorldPoint","x","y","resolution","_x","_y","temp","getWorldPoint","positionToCamera","output","updateMotion","cx","cy","mx","my","vx","vy","set","dx","dy","Math","sqrt","up","target","transformPointer","pageX","pageY","timeStamp","down","move","mozMovementX","webkitMovementX","mozMovementY","webkitMovementY","wheel","touchstart","touch","touchmove","touchend","touchcancel","noButtonDown","leftButtonDown","rightButtonDown","middleButtonDown","backButtonDown","forwardButtonDown","leftButtonReleased","rightButtonReleased","middleButtonReleased","backButtonReleased","forwardButtonReleased","getDistance","getDistanceX","abs","getDistanceY","getDuration","time","getAngle","getInterpolatedPosition","steps","out","undefined","prevX","prevY","curX","curY","i","t","destroy","get","value","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Angle = require('../math/angle/Between');\r\nvar Class = require('../utils/Class');\r\nvar Distance = require('../math/distance/DistanceBetween');\r\nvar FuzzyEqual = require('../math/fuzzy/Equal');\r\nvar SmoothStepInterpolation = require('../math/interpolation/SmoothStepInterpolation');\r\nvar Vector2 = require('../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Pointer object encapsulates both mouse and touch input within Phaser.\r\n *\r\n * By default, Phaser will create 2 pointers for your game to use. If you require more, i.e. for a multi-touch\r\n * game, then use the `InputPlugin.addPointer` method to do so, rather than instantiating this class directly,\r\n * otherwise it won't be managed by the input system.\r\n *\r\n * You can reference the current active pointer via `InputPlugin.activePointer`. You can also use the properties\r\n * `InputPlugin.pointer1` through to `pointer10`, for each pointer you have enabled in your game.\r\n *\r\n * The properties of this object are set by the Input Plugin during processing. This object is then sent in all\r\n * input related events that the Input Plugin emits, so you can reference properties from it directly in your\r\n * callbacks.\r\n *\r\n * @class Pointer\r\n * @memberof Phaser.Input\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} manager - A reference to the Input Manager.\r\n * @param {integer} id - The internal ID of this Pointer.\r\n */\r\nvar Pointer = new Class({\r\n\r\n    initialize:\r\n\r\n    function Pointer (manager, id)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Pointer#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = manager;\r\n\r\n        /**\r\n         * The internal ID of this Pointer.\r\n         *\r\n         * @name Phaser.Input.Pointer#id\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.id = id;\r\n\r\n        /**\r\n         * The most recent native DOM Event this Pointer has processed.\r\n         *\r\n         * @name Phaser.Input.Pointer#event\r\n         * @type {(TouchEvent|MouseEvent)}\r\n         * @since 3.0.0\r\n         */\r\n        this.event;\r\n\r\n        /**\r\n         * The DOM element the Pointer was pressed down on, taken from the DOM event.\r\n         * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n         *\r\n         * @name Phaser.Input.Pointer#downElement\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.downElement;\r\n\r\n        /**\r\n         * The DOM element the Pointer was released on, taken from the DOM event.\r\n         * In a default set-up this will be the Canvas that Phaser is rendering to, or the Window element.\r\n         *\r\n         * @name Phaser.Input.Pointer#upElement\r\n         * @type {any}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.upElement;\r\n\r\n        /**\r\n         * The camera the Pointer interacted with during its last update.\r\n         * \r\n         * A Pointer can only ever interact with one camera at once, which will be the top-most camera\r\n         * in the list should multiple cameras be positioned on-top of each other.\r\n         *\r\n         * @name Phaser.Input.Pointer#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.camera = null;\r\n\r\n        /**\r\n         * A read-only property that indicates which button was pressed, or released, on the pointer\r\n         * during the most recent event. It is only set during `up` and `down` events.\r\n         * \r\n         * On Touch devices the value is always 0.\r\n         * \r\n         * Users may change the configuration of buttons on their pointing device so that if an event's button property\r\n         * is zero, it may not have been caused by the button that is physically leftâ€“most on the pointing device;\r\n         * however, it should behave as if the left button was clicked in the standard button layout.\r\n         *\r\n         * @name Phaser.Input.Pointer#button\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.button = 0;\r\n\r\n        /**\r\n         * 0: No button or un-initialized\r\n         * 1: Left button\r\n         * 2: Right button\r\n         * 4: Wheel button or middle button\r\n         * 8: 4th button (typically the \"Browser Back\" button)\r\n         * 16: 5th button (typically the \"Browser Forward\" button)\r\n         * \r\n         * For a mouse configured for left-handed use, the button actions are reversed.\r\n         * In this case, the values are read from right to left.\r\n         *\r\n         * @name Phaser.Input.Pointer#buttons\r\n         * @type {integer}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.buttons = 0;\r\n\r\n        /**\r\n         * The position of the Pointer in screen space.\r\n         *\r\n         * @name Phaser.Input.Pointer#position\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector2();\r\n\r\n        /**\r\n         * The previous position of the Pointer in screen space.\r\n         * \r\n         * The old x and y values are stored in here during the InputManager.transformPointer call.\r\n         * \r\n         * Use the properties `velocity`, `angle` and `distance` to create your own gesture recognition.\r\n         *\r\n         * @name Phaser.Input.Pointer#prevPosition\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.prevPosition = new Vector2();\r\n\r\n        /**\r\n         * An internal vector used for calculations of the pointer speed and angle.\r\n         *\r\n         * @name Phaser.Input.Pointer#midPoint\r\n         * @type {Phaser.Math.Vector2}\r\n         * @private\r\n         * @since 3.16.0\r\n         */\r\n        this.midPoint = new Vector2(-1, -1);\r\n\r\n        /**\r\n         * The current velocity of the Pointer, based on its current and previous positions.\r\n         * \r\n         * This value is smoothed out each frame, according to the `motionFactor` property.\r\n         * \r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         *\r\n         * @name Phaser.Input.Pointer#velocity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.velocity = new Vector2();\r\n\r\n        /**\r\n         * The current angle the Pointer is moving, in radians, based on its previous and current position.\r\n         * \r\n         * The angle is based on the old position facing to the current position.\r\n         * \r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         *\r\n         * @name Phaser.Input.Pointer#angle\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.angle = 0;\r\n\r\n        /**\r\n         * The distance the Pointer has moved, based on its previous and current position.\r\n         * \r\n         * This value is smoothed out each frame, according to the `motionFactor` property.\r\n         * \r\n         * This property is updated whenever the Pointer moves, regardless of any button states. In other words,\r\n         * it changes based on movement alone - a button doesn't have to be pressed first.\r\n         * \r\n         * If you need the total distance travelled since the primary buttons was pressed down,\r\n         * then use the `Pointer.getDistance` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#distance\r\n         * @type {number}\r\n         * @readonly\r\n         * @since 3.16.0\r\n         */\r\n        this.distance = 0;\r\n\r\n        /**\r\n         * The smoothing factor to apply to the Pointer position.\r\n         * \r\n         * Due to their nature, pointer positions are inherently noisy. While this is fine for lots of games, if you need cleaner positions\r\n         * then you can set this value to apply an automatic smoothing to the positions as they are recorded.\r\n         * \r\n         * The default value of zero means 'no smoothing'.\r\n         * Set to a small value, such as 0.2, to apply an average level of smoothing between positions. You can do this by changing this\r\n         * value directly, or by setting the `input.smoothFactor` property in the Game Config.\r\n         * \r\n         * Positions are only smoothed when the pointer moves. If the primary button on this Pointer enters an Up or Down state, then the position\r\n         * is always precise, and not smoothed.\r\n         *\r\n         * @name Phaser.Input.Pointer#smoothFactor\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.16.0\r\n         */\r\n        this.smoothFactor = 0;\r\n\r\n        /**\r\n         * The factor applied to the motion smoothing each frame.\r\n         * \r\n         * This value is passed to the Smooth Step Interpolation that is used to calculate the velocity,\r\n         * angle and distance of the Pointer. It's applied every frame, until the midPoint reaches the current\r\n         * position of the Pointer. 0.2 provides a good average but can be increased if you need a\r\n         * quicker update and are working in a high performance environment. Never set this value to\r\n         * zero.\r\n         *\r\n         * @name Phaser.Input.Pointer#motionFactor\r\n         * @type {number}\r\n         * @default 0.2\r\n         * @since 3.16.0\r\n         */\r\n        this.motionFactor = 0.2;\r\n\r\n        /**\r\n         * The x position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         * \r\n         * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n         * the `Pointer.updateWorldPoint` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldX = 0;\r\n\r\n        /**\r\n         * The y position of this Pointer, translated into the coordinate space of the most recent Camera it interacted with.\r\n         * \r\n         * If you wish to use this value _outside_ of an input event handler then you should update it first by calling\r\n         * the `Pointer.updateWorldPoint` method.\r\n         *\r\n         * @name Phaser.Input.Pointer#worldY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this.worldY = 0;\r\n\r\n        /**\r\n         * Time when this Pointer was most recently moved (regardless of the state of its buttons, if any)\r\n         *\r\n         * @name Phaser.Input.Pointer#moveTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.moveTime = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downY = 0;\r\n\r\n        /**\r\n         * Time when Button 1 (left button), or Touch, was pressed, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#downTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.downTime = 0;\r\n\r\n        /**\r\n         * X coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upX = 0;\r\n\r\n        /**\r\n         * Y coordinate of the Pointer when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upY = 0;\r\n\r\n        /**\r\n         * Time when Button 1 (left button), or Touch, was released, used for dragging objects.\r\n         *\r\n         * @name Phaser.Input.Pointer#upTime\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.upTime = 0;\r\n\r\n        /**\r\n         * Is the primary button down? (usually button 0, the left mouse button)\r\n         *\r\n         * @name Phaser.Input.Pointer#primaryDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.primaryDown = false;\r\n\r\n        /**\r\n         * Is _any_ button on this pointer considered as being down?\r\n         *\r\n         * @name Phaser.Input.Pointer#isDown\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isDown = false;\r\n\r\n        /**\r\n         * Did the previous input event come from a Touch input (true) or Mouse? (false)\r\n         *\r\n         * @name Phaser.Input.Pointer#wasTouch\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.wasTouch = false;\r\n\r\n        /**\r\n         * Did this Pointer get canceled by a touchcancel event?\r\n         * \r\n         * Note: \"canceled\" is the American-English spelling of \"cancelled\". Please don't submit PRs correcting it!\r\n         *\r\n         * @name Phaser.Input.Pointer#wasCanceled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.15.0\r\n         */\r\n        this.wasCanceled = false;\r\n\r\n        /**\r\n         * If the mouse is locked, the horizontal relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementX = 0;\r\n\r\n        /**\r\n         * If the mouse is locked, the vertical relative movement of the Pointer in pixels since last frame.\r\n         *\r\n         * @name Phaser.Input.Pointer#movementY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.movementY = 0;\r\n\r\n        /**\r\n         * The identifier property of the Pointer as set by the DOM event when this Pointer is started.\r\n         *\r\n         * @name Phaser.Input.Pointer#identifier\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.identifier = 0;\r\n\r\n        /**\r\n         * The pointerId property of the Pointer as set by the DOM event when this Pointer is started.\r\n         * The browser can and will recycle this value.\r\n         *\r\n         * @name Phaser.Input.Pointer#pointerId\r\n         * @type {number}\r\n         * @since 3.10.0\r\n         */\r\n        this.pointerId = null;\r\n\r\n        /**\r\n         * An active Pointer is one that is currently pressed down on the display.\r\n         * A Mouse is always considered as active.\r\n         *\r\n         * @name Phaser.Input.Pointer#active\r\n         * @type {boolean}\r\n         * @since 3.10.0\r\n         */\r\n        this.active = (id === 0) ? true : false;\r\n\r\n        /**\r\n         * Is this pointer Pointer Locked?\r\n         * \r\n         * Only a mouse pointer can be locked and it only becomes locked when requested via\r\n         * the browsers Pointer Lock API.\r\n         * \r\n         * You can request this by calling the `this.input.mouse.requestPointerLock()` method from\r\n         * a `pointerdown` or `pointerup` event handler.\r\n         *\r\n         * @name Phaser.Input.Pointer#locked\r\n         * @readonly\r\n         * @type {boolean}\r\n         * @since 3.19.0\r\n         */\r\n        this.locked = false;\r\n\r\n        /**\r\n         * The horizontal scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaX = 0;\r\n\r\n        /**\r\n         * The vertical scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         * This value will typically be less than 0 if the user scrolls up and greater than zero if scrolling down.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaY = 0;\r\n\r\n        /**\r\n         * The z-axis scroll amount that occurred due to the user moving a mouse wheel or similar input device.\r\n         *\r\n         * @name Phaser.Input.Pointer#deltaZ\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.18.0\r\n         */\r\n        this.deltaZ = 0;\r\n    },\r\n\r\n    /**\r\n     * Takes a Camera and updates this Pointer's `worldX` and `worldY` values so they are\r\n     * the result of a translation through the given Camera.\r\n     * \r\n     * Note that the values will be automatically replaced the moment the Pointer is\r\n     * updated by an input event, such as a mouse move, so should be used immediately.\r\n     *\r\n     * @method Phaser.Input.Pointer#updateWorldPoint\r\n     * @since 3.19.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera which is being tested against.\r\n     *\r\n     * @return {this} This Pointer object.\r\n     */\r\n    updateWorldPoint: function (camera)\r\n    {\r\n        var x = this.x;\r\n        var y = this.y;\r\n\r\n        if (camera.resolution !== 1)\r\n        {\r\n            x += camera._x;\r\n            y += camera._y;\r\n        }\r\n\r\n        //  Stores the world point inside of tempPoint\r\n        var temp = camera.getWorldPoint(x, y);\r\n\r\n        this.worldX = temp.x;\r\n        this.worldY = temp.y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes a Camera and returns a Vector2 containing the translated position of this Pointer\r\n     * within that Camera. This can be used to convert this Pointers position into camera space.\r\n     *\r\n     * @method Phaser.Input.Pointer#positionToCamera\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera to use for the translation.\r\n     * @param {(Phaser.Math.Vector2|object)} [output] - A Vector2-like object in which to store the translated position.\r\n     *\r\n     * @return {(Phaser.Math.Vector2|object)} A Vector2 containing the translated coordinates of this Pointer, based on the given camera.\r\n     */\r\n    positionToCamera: function (camera, output)\r\n    {\r\n        return camera.getWorldPoint(this.x, this.y, output);\r\n    },\r\n\r\n    /**\r\n     * Calculates the motion of this Pointer, including its velocity and angle of movement.\r\n     * This method is called automatically each frame by the Input Manager.\r\n     *\r\n     * @method Phaser.Input.Pointer#updateMotion\r\n     * @private\r\n     * @since 3.16.0\r\n     */\r\n    updateMotion: function ()\r\n    {\r\n        var cx = this.position.x;\r\n        var cy = this.position.y;\r\n\r\n        var mx = this.midPoint.x;\r\n        var my = this.midPoint.y;\r\n\r\n        if (cx === mx && cy === my)\r\n        {\r\n            //  Nothing to do here\r\n            return;\r\n        }\r\n\r\n        //  Moving towards our goal ...\r\n        var vx = SmoothStepInterpolation(this.motionFactor, mx, cx);\r\n        var vy = SmoothStepInterpolation(this.motionFactor, my, cy);\r\n\r\n        if (FuzzyEqual(vx, cx, 0.1))\r\n        {\r\n            vx = cx;\r\n        }\r\n\r\n        if (FuzzyEqual(vy, cy, 0.1))\r\n        {\r\n            vy = cy;\r\n        }\r\n\r\n        this.midPoint.set(vx, vy);\r\n\r\n        var dx = cx - vx;\r\n        var dy = cy - vy;\r\n\r\n        this.velocity.set(dx, dy);\r\n\r\n        this.angle = Angle(vx, vy, cx, cy);\r\n\r\n        this.distance = Math.sqrt(dx * dx + dy * dy);\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Up Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#up\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    up: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        this.button = event.button;\r\n\r\n        this.upElement = event.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = false;\r\n            this.upX = this.x;\r\n            this.upY = this.y;\r\n            this.upTime = event.timeStamp;\r\n        }\r\n\r\n        this.isDown = false;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Down Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#down\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    down: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        this.button = event.button;\r\n\r\n        this.downElement = event.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        //  0: Main button pressed, usually the left button or the un-initialized state\r\n        if (event.button === 0)\r\n        {\r\n            this.primaryDown = true;\r\n            this.downX = this.x;\r\n            this.downY = this.y;\r\n            this.downTime = event.timeStamp;\r\n        }\r\n\r\n        this.isDown = true;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#move\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {MouseEvent} event - The Mouse Event to process.\r\n     */\r\n    move: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, true);\r\n\r\n        if (this.locked)\r\n        {\r\n            //  Multiple DOM events may occur within one frame, but only one Phaser event will fire\r\n            this.movementX = event.movementX || event.mozMovementX || event.webkitMovementX || 0;\r\n            this.movementY = event.movementY || event.mozMovementY || event.webkitMovementY || 0;\r\n        }\r\n\r\n        this.moveTime = event.timeStamp;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Mouse Wheel Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#wheel\r\n     * @private\r\n     * @since 3.18.0\r\n     *\r\n     * @param {WheelEvent} event - The Wheel Event to process.\r\n     */\r\n    wheel: function (event)\r\n    {\r\n        if ('buttons' in event)\r\n        {\r\n            this.buttons = event.buttons;\r\n        }\r\n\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, event.pageX, event.pageY, false);\r\n\r\n        this.deltaX = event.deltaX;\r\n        this.deltaY = event.deltaY;\r\n        this.deltaZ = event.deltaZ;\r\n\r\n        this.wasTouch = false;\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Start Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchstart\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchstart: function (touch, event)\r\n    {\r\n        if (touch['pointerId'])\r\n        {\r\n            this.pointerId = touch.pointerId;\r\n        }\r\n\r\n        this.identifier = touch.identifier;\r\n        this.target = touch.target;\r\n        this.active = true;\r\n\r\n        this.buttons = 1;\r\n\r\n        this.event = event;\r\n\r\n        this.downElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = true;\r\n        this.downX = this.x;\r\n        this.downY = this.y;\r\n        this.downTime = event.timeStamp;\r\n\r\n        this.isDown = true;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = false;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Move Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchmove\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchmove: function (touch, event)\r\n    {\r\n        this.event = event;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, true);\r\n\r\n        this.moveTime = event.timeStamp;\r\n\r\n        this.wasTouch = true;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch End Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchend\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchend: function (touch, event)\r\n    {\r\n        this.buttons = 0;\r\n\r\n        this.event = event;\r\n\r\n        this.upElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = false;\r\n        this.upX = this.x;\r\n        this.upY = this.y;\r\n        this.upTime = event.timeStamp;\r\n\r\n        this.isDown = false;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = false;\r\n        \r\n        this.active = false;\r\n\r\n        this.updateMotion();\r\n    },\r\n\r\n    /**\r\n     * Internal method to handle a Touch Cancel Event.\r\n     *\r\n     * @method Phaser.Input.Pointer#touchcancel\r\n     * @private\r\n     * @since 3.15.0\r\n     *\r\n     * @param {Touch} touch - The Changed Touch from the Touch Event.\r\n     * @param {TouchEvent} event - The full Touch Event.\r\n     */\r\n    touchcancel: function (touch, event)\r\n    {\r\n        this.buttons = 0;\r\n\r\n        this.event = event;\r\n\r\n        this.upElement = touch.target;\r\n\r\n        //  Sets the local x/y properties\r\n        this.manager.transformPointer(this, touch.pageX, touch.pageY, false);\r\n\r\n        this.primaryDown = false;\r\n        this.upX = this.x;\r\n        this.upY = this.y;\r\n        this.upTime = event.timeStamp;\r\n\r\n        this.isDown = false;\r\n\r\n        this.wasTouch = true;\r\n        this.wasCanceled = true;\r\n        \r\n        this.active = false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if any buttons are being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#noButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if no buttons are being held down.\r\n     */\r\n    noButtonDown: function ()\r\n    {\r\n        return (this.buttons === 0);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the left button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#leftButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the left button is being held down.\r\n     */\r\n    leftButtonDown: function ()\r\n    {\r\n        return (this.buttons & 1) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the right button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#rightButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the right button is being held down.\r\n     */\r\n    rightButtonDown: function ()\r\n    {\r\n        return (this.buttons & 2) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the middle button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#middleButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the middle button is being held down.\r\n     */\r\n    middleButtonDown: function ()\r\n    {\r\n        return (this.buttons & 4) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the back button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#backButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the back button is being held down.\r\n     */\r\n    backButtonDown: function ()\r\n    {\r\n        return (this.buttons & 8) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the forward button is being held down on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#forwardButtonDown\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the forward button is being held down.\r\n     */\r\n    forwardButtonDown: function ()\r\n    {\r\n        return (this.buttons & 16) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the left button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#leftButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the left button was just released.\r\n     */\r\n    leftButtonReleased: function ()\r\n    {\r\n        return (this.button === 0 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the right button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#rightButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the right button was just released.\r\n     */\r\n    rightButtonReleased: function ()\r\n    {\r\n        return (this.button === 2 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the middle button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#middleButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the middle button was just released.\r\n     */\r\n    middleButtonReleased: function ()\r\n    {\r\n        return (this.button === 1 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the back button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#backButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the back button was just released.\r\n     */\r\n    backButtonReleased: function ()\r\n    {\r\n        return (this.button === 3 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the forward button was just released on this Pointer.\r\n     *\r\n     * @method Phaser.Input.Pointer#forwardButtonReleased\r\n     * @since 3.18.0\r\n     *\r\n     * @return {boolean} `true` if the forward button was just released.\r\n     */\r\n    forwardButtonReleased: function ()\r\n    {\r\n        return (this.button === 4 && !this.isDown);\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * distance between the Pointer's `downX` and `downY` values and the current position.\r\n     * \r\n     * If no button is held down, it will return the last recorded distance, based on where\r\n     * the Pointer was when the button was released.\r\n     * \r\n     * If you wish to get the distance being travelled currently, based on the velocity of the Pointer,\r\n     * then see the `Pointer.distance` property.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistance\r\n     * @since 3.13.0\r\n     *\r\n     * @return {number} The distance the Pointer moved.\r\n     */\r\n    getDistance: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Distance(this.downX, this.downY, this.x, this.y);\r\n        }\r\n        else\r\n        {\r\n            return Distance(this.downX, this.downY, this.upX, this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * horizontal distance between the Pointer's `downX` and `downY` values and the current position.\r\n     * \r\n     * If no button is held down, it will return the last recorded horizontal distance, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistanceX\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The horizontal distance the Pointer moved.\r\n     */\r\n    getDistanceX: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Math.abs(this.downX - this.x);\r\n        }\r\n        else\r\n        {\r\n            return Math.abs(this.downX - this.upX);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * vertical distance between the Pointer's `downX` and `downY` values and the current position.\r\n     * \r\n     * If no button is held down, it will return the last recorded vertical distance, based on where\r\n     * the Pointer was when the button was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDistanceY\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The vertical distance the Pointer moved.\r\n     */\r\n    getDistanceY: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Math.abs(this.downY - this.y);\r\n        }\r\n        else\r\n        {\r\n            return Math.abs(this.downY - this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * duration since the button was pressed down.\r\n     * \r\n     * If no button is held down, it will return the last recorded duration, based on the time\r\n     * the Pointer button was released.\r\n     *\r\n     * @method Phaser.Input.Pointer#getDuration\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The duration the Pointer was held down for in milliseconds.\r\n     */\r\n    getDuration: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return (this.manager.time - this.downTime);\r\n        }\r\n        else\r\n        {\r\n            return (this.upTime - this.downTime);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * If the Pointer has a button pressed down at the time this method is called, it will return the\r\n     * angle between the Pointer's `downX` and `downY` values and the current position.\r\n     * \r\n     * If no button is held down, it will return the last recorded angle, based on where\r\n     * the Pointer was when the button was released.\r\n     * \r\n     * The angle is based on the old position facing to the current position.\r\n     * \r\n     * If you wish to get the current angle, based on the velocity of the Pointer, then\r\n     * see the `Pointer.angle` property.\r\n     *\r\n     * @method Phaser.Input.Pointer#getAngle\r\n     * @since 3.16.0\r\n     *\r\n     * @return {number} The angle between the Pointer's coordinates in radians.\r\n     */\r\n    getAngle: function ()\r\n    {\r\n        if (this.isDown)\r\n        {\r\n            return Angle(this.downX, this.downY, this.x, this.y);\r\n        }\r\n        else\r\n        {\r\n            return Angle(this.downX, this.downY, this.upX, this.upY);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Takes the previous and current Pointer positions and then generates an array of interpolated values between\r\n     * the two. The array will be populated up to the size of the `steps` argument.\r\n     * \r\n     * ```javaScript\r\n     * var points = pointer.getInterpolatedPosition(4);\r\n     * \r\n     * // points[0] = { x: 0, y: 0 }\r\n     * // points[1] = { x: 2, y: 1 }\r\n     * // points[2] = { x: 3, y: 2 }\r\n     * // points[3] = { x: 6, y: 3 }\r\n     * ```\r\n     * \r\n     * Use this if you need to get smoothed values between the previous and current pointer positions. DOM pointer\r\n     * events can often fire faster than the main browser loop, and this will help you avoid janky movement\r\n     * especially if you have an object following a Pointer.\r\n     * \r\n     * Note that if you provide an output array it will only be populated up to the number of steps provided.\r\n     * It will not clear any previous data that may have existed beyond the range of the steps count.\r\n     * \r\n     * Internally it uses the Smooth Step interpolation calculation.\r\n     *\r\n     * @method Phaser.Input.Pointer#getInterpolatedPosition\r\n     * @since 3.11.0\r\n     * \r\n     * @param {integer} [steps=10] - The number of interpolation steps to use.\r\n     * @param {array} [out] - An array to store the results in. If not provided a new one will be created.\r\n     * \r\n     * @return {array} An array of interpolated values.\r\n     */\r\n    getInterpolatedPosition: function (steps, out)\r\n    {\r\n        if (steps === undefined) { steps = 10; }\r\n        if (out === undefined) { out = []; }\r\n\r\n        var prevX = this.prevPosition.x;\r\n        var prevY = this.prevPosition.y;\r\n\r\n        var curX = this.position.x;\r\n        var curY = this.position.y;\r\n\r\n        for (var i = 0; i < steps; i++)\r\n        {\r\n            var t = (1 / steps) * i;\r\n\r\n            out[i] = { x: SmoothStepInterpolation(t, prevX, curX), y: SmoothStepInterpolation(t, prevY, curY) };\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Destroys this Pointer instance and resets its external references.\r\n     *\r\n     * @method Phaser.Input.Pointer#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.camera = null;\r\n        this.manager = null;\r\n        this.position = null;\r\n    },\r\n\r\n    /**\r\n     * The x position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldX` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.x = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y position of this Pointer.\r\n     * The value is in screen space.\r\n     * See `worldY` to get a camera converted position.\r\n     *\r\n     * @name Phaser.Input.Pointer#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.position.y = value;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Time when this Pointer was most recently updated by a DOM Event.\r\n     * This comes directly from the `event.timeStamp` property.\r\n     * If no event has yet taken place, it will return zero.\r\n     *\r\n     * @name Phaser.Input.Pointer#time\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.16.0\r\n     */\r\n    time: {\r\n\r\n        get: function ()\r\n        {\r\n            return (this.event) ? this.event.timeStamp : 0;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Pointer;\r\n"]},"metadata":{},"sourceType":"script"}