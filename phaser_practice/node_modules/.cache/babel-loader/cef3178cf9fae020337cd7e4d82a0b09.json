{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Elastic ease-out.\r\n *\r\n * @function Phaser.Math.Easing.Elastic.Out\r\n * @since 3.0.0\r\n *\r\n * @param {number} v - The value to be tweened.\r\n * @param {number} [amplitude=0.1] - The amplitude of the elastic ease.\r\n * @param {number} [period=0.1] - Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles.\r\n *\r\n * @return {number} The tweened value.\r\n */\nvar Out = function (v, amplitude, period) {\n  if (amplitude === undefined) {\n    amplitude = 0.1;\n  }\n\n  if (period === undefined) {\n    period = 0.1;\n  }\n\n  if (v === 0) {\n    return 0;\n  } else if (v === 1) {\n    return 1;\n  } else {\n    var s = period / 4;\n\n    if (amplitude < 1) {\n      amplitude = 1;\n    } else {\n      s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\n    }\n\n    return amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1;\n  }\n};\n\nmodule.exports = Out;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/easing/elastic/Out.js"],"names":["Out","v","amplitude","period","undefined","s","Math","asin","PI","pow","sin","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,GAAG,GAAG,UAAUC,CAAV,EAAaC,SAAb,EAAwBC,MAAxB,EACV;AACI,MAAID,SAAS,KAAKE,SAAlB,EAA6B;AAAEF,IAAAA,SAAS,GAAG,GAAZ;AAAkB;;AACjD,MAAIC,MAAM,KAAKC,SAAf,EAA0B;AAAED,IAAAA,MAAM,GAAG,GAAT;AAAe;;AAE3C,MAAIF,CAAC,KAAK,CAAV,EACA;AACI,WAAO,CAAP;AACH,GAHD,MAIK,IAAIA,CAAC,KAAK,CAAV,EACL;AACI,WAAO,CAAP;AACH,GAHI,MAKL;AACI,QAAII,CAAC,GAAGF,MAAM,GAAG,CAAjB;;AAEA,QAAID,SAAS,GAAG,CAAhB,EACA;AACIA,MAAAA,SAAS,GAAG,CAAZ;AACH,KAHD,MAKA;AACIG,MAAAA,CAAC,GAAGF,MAAM,GAAGG,IAAI,CAACC,IAAL,CAAU,IAAIL,SAAd,CAAT,IAAqC,IAAII,IAAI,CAACE,EAA9C,CAAJ;AACH;;AAED,WAAQN,SAAS,GAAGI,IAAI,CAACG,GAAL,CAAS,CAAT,EAAY,CAAC,EAAD,GAAMR,CAAlB,CAAZ,GAAmCK,IAAI,CAACI,GAAL,CAAS,CAACT,CAAC,GAAGI,CAAL,KAAW,IAAIC,IAAI,CAACE,EAApB,IAA0BL,MAAnC,CAAnC,GAAgF,CAAxF;AACH;AACJ,CA5BD;;AA8BAQ,MAAM,CAACC,OAAP,GAAiBZ,GAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Elastic ease-out.\r\n *\r\n * @function Phaser.Math.Easing.Elastic.Out\r\n * @since 3.0.0\r\n *\r\n * @param {number} v - The value to be tweened.\r\n * @param {number} [amplitude=0.1] - The amplitude of the elastic ease.\r\n * @param {number} [period=0.1] - Sets how tight the sine-wave is, where smaller values are tighter waves, which result in more cycles.\r\n *\r\n * @return {number} The tweened value.\r\n */\r\nvar Out = function (v, amplitude, period)\r\n{\r\n    if (amplitude === undefined) { amplitude = 0.1; }\r\n    if (period === undefined) { period = 0.1; }\r\n\r\n    if (v === 0)\r\n    {\r\n        return 0;\r\n    }\r\n    else if (v === 1)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        var s = period / 4;\r\n\r\n        if (amplitude < 1)\r\n        {\r\n            amplitude = 1;\r\n        }\r\n        else\r\n        {\r\n            s = period * Math.asin(1 / amplitude) / (2 * Math.PI);\r\n        }\r\n\r\n        return (amplitude * Math.pow(2, -10 * v) * Math.sin((v - s) * (2 * Math.PI) / period) + 1);\r\n    }\r\n};\r\n\r\nmodule.exports = Out;\r\n"]},"metadata":{},"sourceType":"script"}