{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar GetColor = require('./GetColor');\n\nvar GetColor32 = require('./GetColor32');\n\nvar HSVToRGB = require('./HSVToRGB');\n\nvar RGBToHSV = require('./RGBToHSV');\n/**\r\n * @namespace Phaser.Display.Color\r\n */\n\n/**\r\n * @classdesc\r\n * The Color class holds a single color value and allows for easy modification and reading of it.\r\n *\r\n * @class Color\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [red=0] - The red color value. A number between 0 and 255.\r\n * @param {integer} [green=0] - The green color value. A number between 0 and 255.\r\n * @param {integer} [blue=0] - The blue color value. A number between 0 and 255.\r\n * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n */\n\n\nvar Color = new Class({\n  initialize: function Color(red, green, blue, alpha) {\n    if (red === undefined) {\n      red = 0;\n    }\n\n    if (green === undefined) {\n      green = 0;\n    }\n\n    if (blue === undefined) {\n      blue = 0;\n    }\n\n    if (alpha === undefined) {\n      alpha = 255;\n    }\n    /**\r\n     * The internal red color value.\r\n     *\r\n     * @name Phaser.Display.Color#r\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n\n    this.r = 0;\n    /**\r\n     * The internal green color value.\r\n     *\r\n     * @name Phaser.Display.Color#g\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.g = 0;\n    /**\r\n     * The internal blue color value.\r\n     *\r\n     * @name Phaser.Display.Color#b\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.b = 0;\n    /**\r\n     * The internal alpha color value.\r\n     *\r\n     * @name Phaser.Display.Color#a\r\n     * @type {number}\r\n     * @private\r\n     * @default 255\r\n     * @since 3.0.0\r\n     */\n\n    this.a = 255;\n    /**\r\n     * The hue color value. A number between 0 and 1.\r\n     * This is the base color.\r\n     *\r\n     * @name Phaser.Display.Color#_h\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._h = 0;\n    /**\r\n     * The saturation color value. A number between 0 and 1.\r\n     * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     *\r\n     * @name Phaser.Display.Color#_s\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._s = 0;\n    /**\r\n     * The lightness color value. A number between 0 and 1.\r\n     * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @name Phaser.Display.Color#_v\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._v = 0;\n    /**\r\n     * Is this color update locked?\r\n     *\r\n     * @name Phaser.Display.Color#_locked\r\n     * @type {boolean}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._locked = false;\n    /**\r\n     * An array containing the calculated color values for WebGL use.\r\n     *\r\n     * @name Phaser.Display.Color#gl\r\n     * @type {number[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.gl = [0, 0, 0, 1];\n    /**\r\n     * Pre-calculated internal color value.\r\n     *\r\n     * @name Phaser.Display.Color#_color\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._color = 0;\n    /**\r\n     * Pre-calculated internal color32 value.\r\n     *\r\n     * @name Phaser.Display.Color#_color32\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._color32 = 0;\n    /**\r\n     * Pre-calculated internal color rgb string value.\r\n     *\r\n     * @name Phaser.Display.Color#_rgba\r\n     * @type {string}\r\n     * @private\r\n     * @default ''\r\n     * @since 3.0.0\r\n     */\n\n    this._rgba = '';\n    this.setTo(red, green, blue, alpha);\n  },\n\n  /**\r\n   * Sets this color to be transparent. Sets all values to zero.\r\n   *\r\n   * @method Phaser.Display.Color#transparent\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  transparent: function () {\n    this._locked = true;\n    this.red = 0;\n    this.green = 0;\n    this.blue = 0;\n    this.alpha = 0;\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color of this Color component.\r\n   *\r\n   * @method Phaser.Display.Color#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} red - The red color value. A number between 0 and 255.\r\n   * @param {integer} green - The green color value. A number between 0 and 255.\r\n   * @param {integer} blue - The blue color value. A number between 0 and 255.\r\n   * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n   * @param {boolean} [updateHSV=true] - Update the HSV values after setting the RGB values?\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setTo: function (red, green, blue, alpha, updateHSV) {\n    if (alpha === undefined) {\n      alpha = 255;\n    }\n\n    if (updateHSV === undefined) {\n      updateHSV = true;\n    }\n\n    this._locked = true;\n    this.red = red;\n    this.green = green;\n    this.blue = blue;\n    this.alpha = alpha;\n    this._locked = false;\n    return this.update(updateHSV);\n  },\n\n  /**\r\n   * Sets the red, green, blue and alpha GL values of this Color component.\r\n   *\r\n   * @method Phaser.Display.Color#setGLTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} red - The red color value. A number between 0 and 1.\r\n   * @param {number} green - The green color value. A number between 0 and 1.\r\n   * @param {number} blue - The blue color value. A number between 0 and 1.\r\n   * @param {number} [alpha=1] - The alpha value. A number between 0 and 1.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setGLTo: function (red, green, blue, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this._locked = true;\n    this.redGL = red;\n    this.greenGL = green;\n    this.blueGL = blue;\n    this.alphaGL = alpha;\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color based on the color object given.\r\n   *\r\n   * @method Phaser.Display.Color#setFromRGB\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Display.InputColorObject} color - An object containing `r`, `g`, `b` and optionally `a` values in the range 0 to 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setFromRGB: function (color) {\n    this._locked = true;\n    this.red = color.r;\n    this.green = color.g;\n    this.blue = color.b;\n\n    if (color.hasOwnProperty('a')) {\n      this.alpha = color.a;\n    }\n\n    this._locked = false;\n    return this.update(true);\n  },\n\n  /**\r\n   * Sets the color based on the hue, saturation and lightness values given.\r\n   *\r\n   * @method Phaser.Display.Color#setFromHSV\r\n   * @since 3.13.0\r\n   *\r\n   * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n   * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n   * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  setFromHSV: function (h, s, v) {\n    return HSVToRGB(h, s, v, this);\n  },\n\n  /**\r\n   * Updates the internal cache values.\r\n   *\r\n   * @method Phaser.Display.Color#update\r\n   * @private\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  update: function (updateHSV) {\n    if (updateHSV === undefined) {\n      updateHSV = false;\n    }\n\n    if (this._locked) {\n      return this;\n    }\n\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    var a = this.a;\n    this._color = GetColor(r, g, b);\n    this._color32 = GetColor32(r, g, b, a);\n    this._rgba = 'rgba(' + r + ',' + g + ',' + b + ',' + a / 255 + ')';\n\n    if (updateHSV) {\n      RGBToHSV(r, g, b, this);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Updates the internal hsv cache values.\r\n   *\r\n   * @method Phaser.Display.Color#updateHSV\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  updateHSV: function () {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    RGBToHSV(r, g, b, this);\n    return this;\n  },\n\n  /**\r\n   * Returns a new Color component using the values from this one.\r\n   *\r\n   * @method Phaser.Display.Color#clone\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Display.Color} A new Color object.\r\n   */\n  clone: function () {\n    return new Color(this.r, this.g, this.b, this.a);\n  },\n\n  /**\r\n   * Sets this Color object to be grayscaled based on the shade value given.\r\n   *\r\n   * @method Phaser.Display.Color#gray\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} shade - A value between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  gray: function (shade) {\n    return this.setTo(shade, shade, shade);\n  },\n\n  /**\r\n   * Sets this Color object to be a random color between the `min` and `max` values given.\r\n   *\r\n   * @method Phaser.Display.Color#random\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n   * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  random: function (min, max) {\n    if (min === undefined) {\n      min = 0;\n    }\n\n    if (max === undefined) {\n      max = 255;\n    }\n\n    var r = Math.floor(min + Math.random() * (max - min));\n    var g = Math.floor(min + Math.random() * (max - min));\n    var b = Math.floor(min + Math.random() * (max - min));\n    return this.setTo(r, g, b);\n  },\n\n  /**\r\n   * Sets this Color object to be a random grayscale color between the `min` and `max` values given.\r\n   *\r\n   * @method Phaser.Display.Color#randomGray\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n   * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  randomGray: function (min, max) {\n    if (min === undefined) {\n      min = 0;\n    }\n\n    if (max === undefined) {\n      max = 255;\n    }\n\n    var s = Math.floor(min + Math.random() * (max - min));\n    return this.setTo(s, s, s);\n  },\n\n  /**\r\n   * Increase the saturation of this Color by the percentage amount given.\r\n   * The saturation is the amount of the base color in the hue.\r\n   *\r\n   * @method Phaser.Display.Color#saturate\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  saturate: function (amount) {\n    this.s += amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Decrease the saturation of this Color by the percentage amount given.\r\n   * The saturation is the amount of the base color in the hue.\r\n   *\r\n   * @method Phaser.Display.Color#desaturate\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  desaturate: function (amount) {\n    this.s -= amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Increase the lightness of this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#lighten\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  lighten: function (amount) {\n    this.v += amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Decrease the lightness of this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#darken\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  darken: function (amount) {\n    this.v -= amount / 100;\n    return this;\n  },\n\n  /**\r\n   * Brighten this Color by the percentage amount given.\r\n   *\r\n   * @method Phaser.Display.Color#brighten\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n   *\r\n   * @return {Phaser.Display.Color} This Color object.\r\n   */\n  brighten: function (amount) {\n    var r = this.r;\n    var g = this.g;\n    var b = this.b;\n    r = Math.max(0, Math.min(255, r - Math.round(255 * -(amount / 100))));\n    g = Math.max(0, Math.min(255, g - Math.round(255 * -(amount / 100))));\n    b = Math.max(0, Math.min(255, b - Math.round(255 * -(amount / 100))));\n    return this.setTo(r, g, b);\n  },\n\n  /**\r\n   * The color of this Color component, not including the alpha channel.\r\n   *\r\n   * @name Phaser.Display.Color#color\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  color: {\n    get: function () {\n      return this._color;\n    }\n  },\n\n  /**\r\n   * The color of this Color component, including the alpha channel.\r\n   *\r\n   * @name Phaser.Display.Color#color32\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  color32: {\n    get: function () {\n      return this._color32;\n    }\n  },\n\n  /**\r\n   * The color of this Color component as a string which can be used in CSS color values.\r\n   *\r\n   * @name Phaser.Display.Color#rgba\r\n   * @type {string}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  rgba: {\n    get: function () {\n      return this._rgba;\n    }\n  },\n\n  /**\r\n   * The red color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#redGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  redGL: {\n    get: function () {\n      return this.gl[0];\n    },\n    set: function (value) {\n      this.gl[0] = Math.min(Math.abs(value), 1);\n      this.r = Math.floor(this.gl[0] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The green color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#greenGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  greenGL: {\n    get: function () {\n      return this.gl[1];\n    },\n    set: function (value) {\n      this.gl[1] = Math.min(Math.abs(value), 1);\n      this.g = Math.floor(this.gl[1] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The blue color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#blueGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  blueGL: {\n    get: function () {\n      return this.gl[2];\n    },\n    set: function (value) {\n      this.gl[2] = Math.min(Math.abs(value), 1);\n      this.b = Math.floor(this.gl[2] * 255);\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The alpha color value, normalized to the range 0 to 1.\r\n   *\r\n   * @name Phaser.Display.Color#alphaGL\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alphaGL: {\n    get: function () {\n      return this.gl[3];\n    },\n    set: function (value) {\n      this.gl[3] = Math.min(Math.abs(value), 1);\n      this.a = Math.floor(this.gl[3] * 255);\n      this.update();\n    }\n  },\n\n  /**\r\n   * The red color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#red\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  red: {\n    get: function () {\n      return this.r;\n    },\n    set: function (value) {\n      value = Math.floor(Math.abs(value));\n      this.r = Math.min(value, 255);\n      this.gl[0] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The green color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#green\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  green: {\n    get: function () {\n      return this.g;\n    },\n    set: function (value) {\n      value = Math.floor(Math.abs(value));\n      this.g = Math.min(value, 255);\n      this.gl[1] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The blue color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#blue\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  blue: {\n    get: function () {\n      return this.b;\n    },\n    set: function (value) {\n      value = Math.floor(Math.abs(value));\n      this.b = Math.min(value, 255);\n      this.gl[2] = value / 255;\n      this.update(true);\n    }\n  },\n\n  /**\r\n   * The alpha color value, normalized to the range 0 to 255.\r\n   *\r\n   * @name Phaser.Display.Color#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function () {\n      return this.a;\n    },\n    set: function (value) {\n      value = Math.floor(Math.abs(value));\n      this.a = Math.min(value, 255);\n      this.gl[3] = value / 255;\n      this.update();\n    }\n  },\n\n  /**\r\n   * The hue color value. A number between 0 and 1.\r\n   * This is the base color.\r\n   *\r\n   * @name Phaser.Display.Color#h\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  h: {\n    get: function () {\n      return this._h;\n    },\n    set: function (value) {\n      this._h = value;\n      HSVToRGB(value, this._s, this._v, this);\n    }\n  },\n\n  /**\r\n   * The saturation color value. A number between 0 and 1.\r\n   * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n   *\r\n   * @name Phaser.Display.Color#s\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  s: {\n    get: function () {\n      return this._s;\n    },\n    set: function (value) {\n      this._s = value;\n      HSVToRGB(this._h, value, this._v, this);\n    }\n  },\n\n  /**\r\n   * The lightness color value. A number between 0 and 1.\r\n   * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n   *\r\n   * @name Phaser.Display.Color#v\r\n   * @type {number}\r\n   * @since 3.13.0\r\n   */\n  v: {\n    get: function () {\n      return this._v;\n    },\n    set: function (value) {\n      this._v = value;\n      HSVToRGB(this._h, this._s, value, this);\n    }\n  }\n});\nmodule.exports = Color;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/Color.js"],"names":["Class","require","GetColor","GetColor32","HSVToRGB","RGBToHSV","Color","initialize","red","green","blue","alpha","undefined","r","g","b","a","_h","_s","_v","_locked","gl","_color","_color32","_rgba","setTo","transparent","update","updateHSV","setGLTo","redGL","greenGL","blueGL","alphaGL","setFromRGB","color","hasOwnProperty","setFromHSV","h","s","v","clone","gray","shade","random","min","max","Math","floor","randomGray","saturate","amount","desaturate","lighten","darken","brighten","round","get","color32","rgba","set","value","abs","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar GetColor = require('./GetColor');\r\nvar GetColor32 = require('./GetColor32');\r\nvar HSVToRGB = require('./HSVToRGB');\r\nvar RGBToHSV = require('./RGBToHSV');\r\n\r\n/**\r\n * @namespace Phaser.Display.Color\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * The Color class holds a single color value and allows for easy modification and reading of it.\r\n *\r\n * @class Color\r\n * @memberof Phaser.Display\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {integer} [red=0] - The red color value. A number between 0 and 255.\r\n * @param {integer} [green=0] - The green color value. A number between 0 and 255.\r\n * @param {integer} [blue=0] - The blue color value. A number between 0 and 255.\r\n * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n */\r\nvar Color = new Class({\r\n\r\n    initialize:\r\n\r\n    function Color (red, green, blue, alpha)\r\n    {\r\n        if (red === undefined) { red = 0; }\r\n        if (green === undefined) { green = 0; }\r\n        if (blue === undefined) { blue = 0; }\r\n        if (alpha === undefined) { alpha = 255; }\r\n\r\n        /**\r\n         * The internal red color value.\r\n         *\r\n         * @name Phaser.Display.Color#r\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.r = 0;\r\n\r\n        /**\r\n         * The internal green color value.\r\n         *\r\n         * @name Phaser.Display.Color#g\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.g = 0;\r\n\r\n        /**\r\n         * The internal blue color value.\r\n         *\r\n         * @name Phaser.Display.Color#b\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.b = 0;\r\n\r\n        /**\r\n         * The internal alpha color value.\r\n         *\r\n         * @name Phaser.Display.Color#a\r\n         * @type {number}\r\n         * @private\r\n         * @default 255\r\n         * @since 3.0.0\r\n         */\r\n        this.a = 255;\r\n\r\n        /**\r\n         * The hue color value. A number between 0 and 1.\r\n         * This is the base color.\r\n         *\r\n         * @name Phaser.Display.Color#_h\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._h = 0;\r\n\r\n        /**\r\n         * The saturation color value. A number between 0 and 1.\r\n         * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n         *\r\n         * @name Phaser.Display.Color#_s\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._s = 0;\r\n\r\n        /**\r\n         * The lightness color value. A number between 0 and 1.\r\n         * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n         *\r\n         * @name Phaser.Display.Color#_v\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._v = 0;\r\n\r\n        /**\r\n         * Is this color update locked?\r\n         *\r\n         * @name Phaser.Display.Color#_locked\r\n         * @type {boolean}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._locked = false;\r\n\r\n        /**\r\n         * An array containing the calculated color values for WebGL use.\r\n         *\r\n         * @name Phaser.Display.Color#gl\r\n         * @type {number[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.gl = [ 0, 0, 0, 1 ];\r\n\r\n        /**\r\n         * Pre-calculated internal color value.\r\n         *\r\n         * @name Phaser.Display.Color#_color\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._color = 0;\r\n\r\n        /**\r\n         * Pre-calculated internal color32 value.\r\n         *\r\n         * @name Phaser.Display.Color#_color32\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._color32 = 0;\r\n\r\n        /**\r\n         * Pre-calculated internal color rgb string value.\r\n         *\r\n         * @name Phaser.Display.Color#_rgba\r\n         * @type {string}\r\n         * @private\r\n         * @default ''\r\n         * @since 3.0.0\r\n         */\r\n        this._rgba = '';\r\n\r\n        this.setTo(red, green, blue, alpha);\r\n    },\r\n\r\n    /**\r\n     * Sets this color to be transparent. Sets all values to zero.\r\n     *\r\n     * @method Phaser.Display.Color#transparent\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    transparent: function ()\r\n    {\r\n        this._locked = true;\r\n\r\n        this.red = 0;\r\n        this.green = 0;\r\n        this.blue = 0;\r\n        this.alpha = 0;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color of this Color component.\r\n     *\r\n     * @method Phaser.Display.Color#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} red - The red color value. A number between 0 and 255.\r\n     * @param {integer} green - The green color value. A number between 0 and 255.\r\n     * @param {integer} blue - The blue color value. A number between 0 and 255.\r\n     * @param {integer} [alpha=255] - The alpha value. A number between 0 and 255.\r\n     * @param {boolean} [updateHSV=true] - Update the HSV values after setting the RGB values?\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setTo: function (red, green, blue, alpha, updateHSV)\r\n    {\r\n        if (alpha === undefined) { alpha = 255; }\r\n        if (updateHSV === undefined) { updateHSV = true; }\r\n\r\n        this._locked = true;\r\n\r\n        this.red = red;\r\n        this.green = green;\r\n        this.blue = blue;\r\n        this.alpha = alpha;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(updateHSV);\r\n    },\r\n\r\n    /**\r\n     * Sets the red, green, blue and alpha GL values of this Color component.\r\n     *\r\n     * @method Phaser.Display.Color#setGLTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} red - The red color value. A number between 0 and 1.\r\n     * @param {number} green - The green color value. A number between 0 and 1.\r\n     * @param {number} blue - The blue color value. A number between 0 and 1.\r\n     * @param {number} [alpha=1] - The alpha value. A number between 0 and 1.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setGLTo: function (red, green, blue, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this._locked = true;\r\n\r\n        this.redGL = red;\r\n        this.greenGL = green;\r\n        this.blueGL = blue;\r\n        this.alphaGL = alpha;\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color based on the color object given.\r\n     *\r\n     * @method Phaser.Display.Color#setFromRGB\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Display.InputColorObject} color - An object containing `r`, `g`, `b` and optionally `a` values in the range 0 to 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setFromRGB: function (color)\r\n    {\r\n        this._locked = true;\r\n\r\n        this.red = color.r;\r\n        this.green = color.g;\r\n        this.blue = color.b;\r\n\r\n        if (color.hasOwnProperty('a'))\r\n        {\r\n            this.alpha = color.a;\r\n        }\r\n\r\n        this._locked = false;\r\n\r\n        return this.update(true);\r\n    },\r\n\r\n    /**\r\n     * Sets the color based on the hue, saturation and lightness values given.\r\n     *\r\n     * @method Phaser.Display.Color#setFromHSV\r\n     * @since 3.13.0\r\n     *\r\n     * @param {number} h - The hue, in the range 0 - 1. This is the base color.\r\n     * @param {number} s - The saturation, in the range 0 - 1. This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     * @param {number} v - The value, in the range 0 - 1. This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    setFromHSV: function (h, s, v)\r\n    {\r\n        return HSVToRGB(h, s, v, this);\r\n    },\r\n\r\n    /**\r\n     * Updates the internal cache values.\r\n     *\r\n     * @method Phaser.Display.Color#update\r\n     * @private\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    update: function (updateHSV)\r\n    {\r\n        if (updateHSV === undefined) { updateHSV = false; }\r\n\r\n        if (this._locked)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n        var a = this.a;\r\n\r\n        this._color = GetColor(r, g, b);\r\n        this._color32 = GetColor32(r, g, b, a);\r\n        this._rgba = 'rgba(' + r + ',' + g + ',' + b + ',' + (a / 255) + ')';\r\n\r\n        if (updateHSV)\r\n        {\r\n            RGBToHSV(r, g, b, this);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the internal hsv cache values.\r\n     *\r\n     * @method Phaser.Display.Color#updateHSV\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    updateHSV: function ()\r\n    {\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n\r\n        RGBToHSV(r, g, b, this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a new Color component using the values from this one.\r\n     *\r\n     * @method Phaser.Display.Color#clone\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Display.Color} A new Color object.\r\n     */\r\n    clone: function ()\r\n    {\r\n        return new Color(this.r, this.g, this.b, this.a);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be grayscaled based on the shade value given.\r\n     *\r\n     * @method Phaser.Display.Color#gray\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} shade - A value between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    gray: function (shade)\r\n    {\r\n        return this.setTo(shade, shade, shade);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be a random color between the `min` and `max` values given.\r\n     *\r\n     * @method Phaser.Display.Color#random\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n     * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    random: function (min, max)\r\n    {\r\n        if (min === undefined) { min = 0; }\r\n        if (max === undefined) { max = 255; }\r\n\r\n        var r = Math.floor(min + Math.random() * (max - min));\r\n        var g = Math.floor(min + Math.random() * (max - min));\r\n        var b = Math.floor(min + Math.random() * (max - min));\r\n\r\n        return this.setTo(r, g, b);\r\n    },\r\n\r\n    /**\r\n     * Sets this Color object to be a random grayscale color between the `min` and `max` values given.\r\n     *\r\n     * @method Phaser.Display.Color#randomGray\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} [min=0] - The minimum random color value. Between 0 and 255.\r\n     * @param {integer} [max=255] - The maximum random color value. Between 0 and 255.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    randomGray: function (min, max)\r\n    {\r\n        if (min === undefined) { min = 0; }\r\n        if (max === undefined) { max = 255; }\r\n\r\n        var s = Math.floor(min + Math.random() * (max - min));\r\n\r\n        return this.setTo(s, s, s);\r\n    },\r\n\r\n    /**\r\n     * Increase the saturation of this Color by the percentage amount given.\r\n     * The saturation is the amount of the base color in the hue.\r\n     *\r\n     * @method Phaser.Display.Color#saturate\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    saturate: function (amount)\r\n    {\r\n        this.s += amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decrease the saturation of this Color by the percentage amount given.\r\n     * The saturation is the amount of the base color in the hue.\r\n     *\r\n     * @method Phaser.Display.Color#desaturate\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    desaturate: function (amount)\r\n    {\r\n        this.s -= amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Increase the lightness of this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#lighten\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    lighten: function (amount)\r\n    {\r\n        this.v += amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Decrease the lightness of this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#darken\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    darken: function (amount)\r\n    {\r\n        this.v -= amount / 100;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Brighten this Color by the percentage amount given.\r\n     *\r\n     * @method Phaser.Display.Color#brighten\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} amount - The percentage amount to change this color by. A value between 0 and 100.\r\n     *\r\n     * @return {Phaser.Display.Color} This Color object.\r\n     */\r\n    brighten: function (amount)\r\n    {\r\n        var r = this.r;\r\n        var g = this.g;\r\n        var b = this.b;\r\n\r\n        r = Math.max(0, Math.min(255, r - Math.round(255 * - (amount / 100))));\r\n        g = Math.max(0, Math.min(255, g - Math.round(255 * - (amount / 100))));\r\n        b = Math.max(0, Math.min(255, b - Math.round(255 * - (amount / 100))));\r\n\r\n        return this.setTo(r, g, b);\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component, not including the alpha channel.\r\n     *\r\n     * @name Phaser.Display.Color#color\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    color: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._color;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component, including the alpha channel.\r\n     *\r\n     * @name Phaser.Display.Color#color32\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    color32: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._color32;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The color of this Color component as a string which can be used in CSS color values.\r\n     *\r\n     * @name Phaser.Display.Color#rgba\r\n     * @type {string}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    rgba: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._rgba;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The red color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#redGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    redGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[0];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[0] = Math.min(Math.abs(value), 1);\r\n\r\n            this.r = Math.floor(this.gl[0] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The green color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#greenGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    greenGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[1];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[1] = Math.min(Math.abs(value), 1);\r\n\r\n            this.g = Math.floor(this.gl[1] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The blue color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#blueGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    blueGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[2];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[2] = Math.min(Math.abs(value), 1);\r\n\r\n            this.b = Math.floor(this.gl[2] * 255);\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha color value, normalized to the range 0 to 1.\r\n     *\r\n     * @name Phaser.Display.Color#alphaGL\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alphaGL: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gl[3];\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.gl[3] = Math.min(Math.abs(value), 1);\r\n\r\n            this.a = Math.floor(this.gl[3] * 255);\r\n\r\n            this.update();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The red color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#red\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    red: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.r;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.r = Math.min(value, 255);\r\n\r\n            this.gl[0] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The green color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#green\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    green: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.g;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.g = Math.min(value, 255);\r\n\r\n            this.gl[1] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The blue color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#blue\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    blue: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.b;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.b = Math.min(value, 255);\r\n\r\n            this.gl[2] = value / 255;\r\n\r\n            this.update(true);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The alpha color value, normalized to the range 0 to 255.\r\n     *\r\n     * @name Phaser.Display.Color#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.a;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            value = Math.floor(Math.abs(value));\r\n\r\n            this.a = Math.min(value, 255);\r\n\r\n            this.gl[3] = value / 255;\r\n\r\n            this.update();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The hue color value. A number between 0 and 1.\r\n     * This is the base color.\r\n     *\r\n     * @name Phaser.Display.Color#h\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    h: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._h;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._h = value;\r\n\r\n            HSVToRGB(value, this._s, this._v, this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The saturation color value. A number between 0 and 1.\r\n     * This controls how much of the hue will be in the final color, where 1 is fully saturated and 0 will give you white.\r\n     *\r\n     * @name Phaser.Display.Color#s\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    s: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._s;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._s = value;\r\n\r\n            HSVToRGB(this._h, value, this._v, this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The lightness color value. A number between 0 and 1.\r\n     * This controls how dark the color is. Where 1 is as bright as possible and 0 is black.\r\n     *\r\n     * @name Phaser.Display.Color#v\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\r\n    v: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._v;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._v = value;\r\n\r\n            HSVToRGB(this._h, this._s, value, this);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Color;\r\n"]},"metadata":{},"sourceType":"script"}