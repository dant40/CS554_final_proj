{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Rectangle = require('./Rectangle');\n/**\r\n * Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\r\n *\r\n * @function Phaser.Geom.Rectangle.Union\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} [out] - The Rectangle to store the union in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified `out` Rectangle, or a new Rectangle if none was provided.\r\n */\n\n\nvar Union = function (rectA, rectB, out) {\n  if (out === undefined) {\n    out = new Rectangle();\n  } //  Cache vars so we can use one of the input rects as the output rect\n\n\n  var x = Math.min(rectA.x, rectB.x);\n  var y = Math.min(rectA.y, rectB.y);\n  var w = Math.max(rectA.right, rectB.right) - x;\n  var h = Math.max(rectA.bottom, rectB.bottom) - y;\n  return out.setTo(x, y, w, h);\n};\n\nmodule.exports = Union;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/Union.js"],"names":["Rectangle","require","Union","rectA","rectB","out","undefined","x","Math","min","y","w","max","right","h","bottom","setTo","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIC,KAAK,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EACZ;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIL,SAAJ,EAAN;AAAwB,GADrD,CAGI;;;AACA,MAAIO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASN,KAAK,CAACI,CAAf,EAAkBH,KAAK,CAACG,CAAxB,CAAR;AACA,MAAIG,CAAC,GAAGF,IAAI,CAACC,GAAL,CAASN,KAAK,CAACO,CAAf,EAAkBN,KAAK,CAACM,CAAxB,CAAR;AACA,MAAIC,CAAC,GAAGH,IAAI,CAACI,GAAL,CAAST,KAAK,CAACU,KAAf,EAAsBT,KAAK,CAACS,KAA5B,IAAqCN,CAA7C;AACA,MAAIO,CAAC,GAAGN,IAAI,CAACI,GAAL,CAAST,KAAK,CAACY,MAAf,EAAuBX,KAAK,CAACW,MAA7B,IAAuCL,CAA/C;AAEA,SAAOL,GAAG,CAACW,KAAJ,CAAUT,CAAV,EAAaG,CAAb,EAAgBC,CAAhB,EAAmBG,CAAnB,CAAP;AACH,CAXD;;AAaAG,MAAM,CAACC,OAAP,GAAiBhB,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Rectangle = require('./Rectangle');\r\n\r\n/**\r\n * Creates a new Rectangle or repositions and/or resizes an existing Rectangle so that it encompasses the two given Rectangles, i.e. calculates their union.\r\n *\r\n * @function Phaser.Geom.Rectangle.Union\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to use.\r\n * @param {Phaser.Geom.Rectangle} [out] - The Rectangle to store the union in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The modified `out` Rectangle, or a new Rectangle if none was provided.\r\n */\r\nvar Union = function (rectA, rectB, out)\r\n{\r\n    if (out === undefined) { out = new Rectangle(); }\r\n\r\n    //  Cache vars so we can use one of the input rects as the output rect\r\n    var x = Math.min(rectA.x, rectB.x);\r\n    var y = Math.min(rectA.y, rectB.y);\r\n    var w = Math.max(rectA.right, rectB.right) - x;\r\n    var h = Math.max(rectA.bottom, rectB.bottom) - y;\r\n\r\n    return out.setTo(x, y, w, h);\r\n};\r\n\r\nmodule.exports = Union;\r\n"]},"metadata":{},"sourceType":"script"}