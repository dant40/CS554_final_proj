{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar ParseObject = require('./ParseObject');\n\nvar ObjectLayer = require('../../mapdata/ObjectLayer');\n\nvar CreateGroupLayer = require('./CreateGroupLayer');\n/**\r\n * Parses a Tiled JSON object into an array of ObjectLayer objects.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObjectLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n *\r\n * @return {array} An array of all object layers in the tilemap as `ObjectLayer`s.\r\n */\n\n\nvar ParseObjectLayers = function (json) {\n  var objectLayers = []; // State inherited from a parent group\n\n  var groupStack = [];\n  var curGroupState = CreateGroupLayer(json);\n\n  while (curGroupState.i < curGroupState.layers.length || groupStack.length > 0) {\n    if (curGroupState.i >= curGroupState.layers.length) {\n      // Ensure recursion stack is not empty first\n      if (groupStack.length < 1) {\n        console.warn('TilemapParser.parseTiledJSON - Invalid layer group hierarchy');\n        break;\n      } // Return to previous recursive state\n\n\n      curGroupState = groupStack.pop();\n      continue;\n    } // Get current layer and advance iterator\n\n\n    var curo = curGroupState.layers[curGroupState.i];\n    curGroupState.i++; // Modify inherited properties\n\n    curo.opacity *= curGroupState.opacity;\n    curo.visible = curGroupState.visible && curo.visible;\n\n    if (curo.type !== 'objectgroup') {\n      if (curo.type === 'group') {\n        // Compute next state inherited from group\n        var nextGroupState = CreateGroupLayer(json, curo, curGroupState); // Preserve current state before recursing\n\n        groupStack.push(curGroupState);\n        curGroupState = nextGroupState;\n      } // Skip this layer OR 'recurse' (iterative style) into the group\n\n\n      continue;\n    }\n\n    curo.name = curGroupState.name + curo.name;\n    var offsetX = curGroupState.x + GetFastValue(curo, 'startx', 0) + GetFastValue(curo, 'offsetx', 0);\n    var offsetY = curGroupState.y + GetFastValue(curo, 'starty', 0) + GetFastValue(curo, 'offsety', 0);\n    var objects = [];\n\n    for (var j = 0; j < curo.objects.length; j++) {\n      var parsedObject = ParseObject(curo.objects[j], offsetX, offsetY);\n      objects.push(parsedObject);\n    }\n\n    var objectLayer = new ObjectLayer(curo);\n    objectLayer.objects = objects;\n    objectLayers.push(objectLayer);\n  }\n\n  return objectLayers;\n};\n\nmodule.exports = ParseObjectLayers;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/ParseObjectLayers.js"],"names":["GetFastValue","require","ParseObject","ObjectLayer","CreateGroupLayer","ParseObjectLayers","json","objectLayers","groupStack","curGroupState","i","layers","length","console","warn","pop","curo","opacity","visible","type","nextGroupState","push","name","offsetX","x","offsetY","y","objects","j","parsedObject","objectLayer","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar ParseObject = require('./ParseObject');\r\nvar ObjectLayer = require('../../mapdata/ObjectLayer');\r\nvar CreateGroupLayer = require('./CreateGroupLayer');\r\n\r\n/**\r\n * Parses a Tiled JSON object into an array of ObjectLayer objects.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseObjectLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n *\r\n * @return {array} An array of all object layers in the tilemap as `ObjectLayer`s.\r\n */\r\nvar ParseObjectLayers = function (json)\r\n{\r\n    var objectLayers = [];\r\n\r\n    // State inherited from a parent group\r\n    var groupStack = [];\r\n    var curGroupState = CreateGroupLayer(json);\r\n\r\n    while (curGroupState.i < curGroupState.layers.length || groupStack.length > 0)\r\n    {\r\n        if (curGroupState.i >= curGroupState.layers.length)\r\n        {\r\n            // Ensure recursion stack is not empty first\r\n            if (groupStack.length < 1)\r\n            {\r\n                console.warn(\r\n                    'TilemapParser.parseTiledJSON - Invalid layer group hierarchy'\r\n                );\r\n                break;\r\n            }\r\n\r\n            // Return to previous recursive state\r\n            curGroupState = groupStack.pop();\r\n            continue;\r\n        }\r\n\r\n        // Get current layer and advance iterator\r\n        var curo = curGroupState.layers[curGroupState.i];\r\n        curGroupState.i++;\r\n\r\n        // Modify inherited properties\r\n        curo.opacity *= curGroupState.opacity;\r\n        curo.visible = curGroupState.visible && curo.visible;\r\n\r\n        if (curo.type !== 'objectgroup')\r\n        {\r\n            if (curo.type === 'group')\r\n            {\r\n                // Compute next state inherited from group\r\n                var nextGroupState = CreateGroupLayer(json, curo, curGroupState);\r\n\r\n                // Preserve current state before recursing\r\n                groupStack.push(curGroupState);\r\n                curGroupState = nextGroupState;\r\n            }\r\n\r\n            // Skip this layer OR 'recurse' (iterative style) into the group\r\n            continue;\r\n        }\r\n\r\n        curo.name = curGroupState.name + curo.name;\r\n        var offsetX = curGroupState.x + GetFastValue(curo, 'startx', 0) + GetFastValue(curo, 'offsetx', 0);\r\n        var offsetY = curGroupState.y + GetFastValue(curo, 'starty', 0) + GetFastValue(curo, 'offsety', 0);\r\n\r\n        var objects = [];\r\n        for (var j = 0; j < curo.objects.length; j++)\r\n        {\r\n            var parsedObject = ParseObject(curo.objects[j], offsetX, offsetY);\r\n\r\n            objects.push(parsedObject);\r\n        }\r\n\r\n        var objectLayer = new ObjectLayer(curo);\r\n        objectLayer.objects = objects;\r\n\r\n        objectLayers.push(objectLayer);\r\n    }\r\n\r\n    return objectLayers;\r\n};\r\n\r\nmodule.exports = ParseObjectLayers;\r\n"]},"metadata":{},"sourceType":"script"}