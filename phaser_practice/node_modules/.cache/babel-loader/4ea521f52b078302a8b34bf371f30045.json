{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Events = require('../events');\n\nvar Sleeping = require('../lib/core/Sleeping');\n\nvar MatterEvents = require('../lib/core/Events');\n/**\r\n * Enables a Matter-enabled Game Object to be able to go to sleep. Should be used as a mixin and not directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Sleep\r\n * @since 3.0.0\r\n */\n\n\nvar Sleep = {\n  /**\r\n   * Sets this Body to sleep.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setToSleep\r\n   * @since 3.22.0\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setToSleep: function () {\n    Sleeping.set(this.body, true);\n  },\n\n  /**\r\n   * Wakes this Body if asleep.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setAwake\r\n   * @since 3.22.0\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setAwake: function () {\n    Sleeping.set(this.body, false);\n  },\n\n  /**\r\n   * Sets the number of updates in which this body must have near-zero velocity before it is set as sleeping (if sleeping is enabled by the engine).\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setSleepThreshold\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=60] - A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setSleepThreshold: function (value) {\n    if (value === undefined) {\n      value = 60;\n    }\n\n    this.body.sleepThreshold = value;\n    return this;\n  },\n\n  /**\r\n   * Enable sleep and wake events for this body.\r\n   * \r\n   * By default when a body goes to sleep, or wakes up, it will not emit any events.\r\n   * \r\n   * The events are emitted by the Matter World instance and can be listened to via\r\n   * the `SLEEP_START` and `SLEEP_END` events.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setSleepEvents\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} start - `true` if you want the sleep start event to be emitted for this body.\r\n   * @param {boolean} end - `true` if you want the sleep end event to be emitted for this body.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setSleepEvents: function (start, end) {\n    this.setSleepStartEvent(start);\n    this.setSleepEndEvent(end);\n    return this;\n  },\n\n  /**\r\n   * Enables or disables the Sleep Start event for this body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setSleepStartEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - `true` to enable the sleep event, or `false` to disable it.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setSleepStartEvent: function (value) {\n    if (value) {\n      var world = this.world;\n      MatterEvents.on(this.body, 'sleepStart', function (event) {\n        world.emit(Events.SLEEP_START, event, this);\n      });\n    } else {\n      MatterEvents.off(this.body, 'sleepStart');\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Enables or disables the Sleep End event for this body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Sleep#setSleepEndEvent\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - `true` to enable the sleep event, or `false` to disable it.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setSleepEndEvent: function (value) {\n    if (value) {\n      var world = this.world;\n      MatterEvents.on(this.body, 'sleepEnd', function (event) {\n        world.emit(Events.SLEEP_END, event, this);\n      });\n    } else {\n      MatterEvents.off(this.body, 'sleepEnd');\n    }\n\n    return this;\n  }\n};\nmodule.exports = Sleep;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/components/Sleep.js"],"names":["Events","require","Sleeping","MatterEvents","Sleep","setToSleep","set","body","setAwake","setSleepThreshold","value","undefined","sleepThreshold","setSleepEvents","start","end","setSleepStartEvent","setSleepEndEvent","world","on","event","emit","SLEEP_START","off","SLEEP_END","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,oBAAD,CAA1B;AAEA;;;;;;;;AAMA,IAAIG,KAAK,GAAG;AAER;;;;;;;;AAQAC,EAAAA,UAAU,EAAE,YACZ;AACIH,IAAAA,QAAQ,CAACI,GAAT,CAAa,KAAKC,IAAlB,EAAwB,IAAxB;AACH,GAbO;;AAeR;;;;;;;;AAQAC,EAAAA,QAAQ,EAAE,YACV;AACIN,IAAAA,QAAQ,CAACI,GAAT,CAAa,KAAKC,IAAlB,EAAwB,KAAxB;AACH,GA1BO;;AA4BR;;;;;;;;;;AAUAE,EAAAA,iBAAiB,EAAE,UAAUC,KAAV,EACnB;AACI,QAAIA,KAAK,KAAKC,SAAd,EAAyB;AAAED,MAAAA,KAAK,GAAG,EAAR;AAAa;;AAExC,SAAKH,IAAL,CAAUK,cAAV,GAA2BF,KAA3B;AAEA,WAAO,IAAP;AACH,GA7CO;;AA+CR;;;;;;;;;;;;;;;;AAgBAG,EAAAA,cAAc,EAAE,UAAUC,KAAV,EAAiBC,GAAjB,EAChB;AACI,SAAKC,kBAAL,CAAwBF,KAAxB;AACA,SAAKG,gBAAL,CAAsBF,GAAtB;AAEA,WAAO,IAAP;AACH,GArEO;;AAuER;;;;;;;;;;AAUAC,EAAAA,kBAAkB,EAAE,UAAUN,KAAV,EACpB;AACI,QAAIA,KAAJ,EACA;AACI,UAAIQ,KAAK,GAAG,KAAKA,KAAjB;AAEAf,MAAAA,YAAY,CAACgB,EAAb,CAAgB,KAAKZ,IAArB,EAA2B,YAA3B,EAAyC,UAAUa,KAAV,EACzC;AACIF,QAAAA,KAAK,CAACG,IAAN,CAAWrB,MAAM,CAACsB,WAAlB,EAA+BF,KAA/B,EAAsC,IAAtC;AACH,OAHD;AAIH,KARD,MAUA;AACIjB,MAAAA,YAAY,CAACoB,GAAb,CAAiB,KAAKhB,IAAtB,EAA4B,YAA5B;AACH;;AAED,WAAO,IAAP;AACH,GAlGO;;AAoGR;;;;;;;;;;AAUAU,EAAAA,gBAAgB,EAAE,UAAUP,KAAV,EAClB;AACI,QAAIA,KAAJ,EACA;AACI,UAAIQ,KAAK,GAAG,KAAKA,KAAjB;AAEAf,MAAAA,YAAY,CAACgB,EAAb,CAAgB,KAAKZ,IAArB,EAA2B,UAA3B,EAAuC,UAAUa,KAAV,EACvC;AACIF,QAAAA,KAAK,CAACG,IAAN,CAAWrB,MAAM,CAACwB,SAAlB,EAA6BJ,KAA7B,EAAoC,IAApC;AACH,OAHD;AAIH,KARD,MAUA;AACIjB,MAAAA,YAAY,CAACoB,GAAb,CAAiB,KAAKhB,IAAtB,EAA4B,UAA5B;AACH;;AAED,WAAO,IAAP;AACH;AA/HO,CAAZ;AAmIAkB,MAAM,CAACC,OAAP,GAAiBtB,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Events = require('../events');\r\nvar Sleeping = require('../lib/core/Sleeping');\r\nvar MatterEvents = require('../lib/core/Events');\r\n\r\n/**\r\n * Enables a Matter-enabled Game Object to be able to go to sleep. Should be used as a mixin and not directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Sleep\r\n * @since 3.0.0\r\n */\r\nvar Sleep = {\r\n\r\n    /**\r\n     * Sets this Body to sleep.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setToSleep\r\n     * @since 3.22.0\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setToSleep: function ()\r\n    {\r\n        Sleeping.set(this.body, true);\r\n    },\r\n\r\n    /**\r\n     * Wakes this Body if asleep.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setAwake\r\n     * @since 3.22.0\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setAwake: function ()\r\n    {\r\n        Sleeping.set(this.body, false);\r\n    },\r\n\r\n    /**\r\n     * Sets the number of updates in which this body must have near-zero velocity before it is set as sleeping (if sleeping is enabled by the engine).\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepThreshold\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=60] - A `Number` that defines the number of updates in which this body must have near-zero velocity before it is set as sleeping.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setSleepThreshold: function (value)\r\n    {\r\n        if (value === undefined) { value = 60; }\r\n\r\n        this.body.sleepThreshold = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enable sleep and wake events for this body.\r\n     * \r\n     * By default when a body goes to sleep, or wakes up, it will not emit any events.\r\n     * \r\n     * The events are emitted by the Matter World instance and can be listened to via\r\n     * the `SLEEP_START` and `SLEEP_END` events.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepEvents\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} start - `true` if you want the sleep start event to be emitted for this body.\r\n     * @param {boolean} end - `true` if you want the sleep end event to be emitted for this body.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setSleepEvents: function (start, end)\r\n    {\r\n        this.setSleepStartEvent(start);\r\n        this.setSleepEndEvent(end);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables or disables the Sleep Start event for this body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepStartEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to enable the sleep event, or `false` to disable it.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setSleepStartEvent: function (value)\r\n    {\r\n        if (value)\r\n        {\r\n            var world = this.world;\r\n\r\n            MatterEvents.on(this.body, 'sleepStart', function (event)\r\n            {\r\n                world.emit(Events.SLEEP_START, event, this);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            MatterEvents.off(this.body, 'sleepStart');\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables or disables the Sleep End event for this body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Sleep#setSleepEndEvent\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to enable the sleep event, or `false` to disable it.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setSleepEndEvent: function (value)\r\n    {\r\n        if (value)\r\n        {\r\n            var world = this.world;\r\n\r\n            MatterEvents.on(this.body, 'sleepEnd', function (event)\r\n            {\r\n                world.emit(Events.SLEEP_END, event, this);\r\n            });\r\n        }\r\n        else\r\n        {\r\n            MatterEvents.off(this.body, 'sleepEnd');\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Sleep;\r\n"]},"metadata":{},"sourceType":"script"}