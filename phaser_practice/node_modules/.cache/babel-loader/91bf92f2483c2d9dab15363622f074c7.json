{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n/**\r\n * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n * information in the destination region.\r\n *\r\n * @function Phaser.Tilemaps.Components.Copy\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar Copy = function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer) {\n  if (srcTileX < 0) {\n    srcTileX = 0;\n  }\n\n  if (srcTileY < 0) {\n    srcTileY = 0;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  var srcTiles = GetTilesWithin(srcTileX, srcTileY, width, height, null, layer);\n  var offsetX = destTileX - srcTileX;\n  var offsetY = destTileY - srcTileY;\n\n  for (var i = 0; i < srcTiles.length; i++) {\n    var tileX = srcTiles[i].x + offsetX;\n    var tileY = srcTiles[i].y + offsetY;\n\n    if (tileX >= 0 && tileX < layer.width && tileY >= 0 && tileY < layer.height) {\n      if (layer.data[tileY][tileX]) {\n        layer.data[tileY][tileX].copy(srcTiles[i]);\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    // Recalculate the faces within the destination area and neighboring tiles\n    CalculateFacesWithin(destTileX - 1, destTileY - 1, width + 2, height + 2, layer);\n  }\n};\n\nmodule.exports = Copy;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/Copy.js"],"names":["GetTilesWithin","require","CalculateFacesWithin","Copy","srcTileX","srcTileY","width","height","destTileX","destTileY","recalculateFaces","layer","undefined","srcTiles","offsetX","offsetY","i","length","tileX","x","tileY","y","data","copy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIE,IAAI,GAAG,UAAUC,QAAV,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,MAArC,EAA6CC,SAA7C,EAAwDC,SAAxD,EAAmEC,gBAAnE,EAAqFC,KAArF,EACX;AACI,MAAIP,QAAQ,GAAG,CAAf,EAAkB;AAAEA,IAAAA,QAAQ,GAAG,CAAX;AAAe;;AACnC,MAAIC,QAAQ,GAAG,CAAf,EAAkB;AAAEA,IAAAA,QAAQ,GAAG,CAAX;AAAe;;AACnC,MAAIK,gBAAgB,KAAKE,SAAzB,EAAoC;AAAEF,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAEhE,MAAIG,QAAQ,GAAGb,cAAc,CAACI,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,MAA5B,EAAoC,IAApC,EAA0CI,KAA1C,CAA7B;AAEA,MAAIG,OAAO,GAAGN,SAAS,GAAGJ,QAA1B;AACA,MAAIW,OAAO,GAAGN,SAAS,GAAGJ,QAA1B;;AAEA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EACA;AACI,QAAIE,KAAK,GAAGL,QAAQ,CAACG,CAAD,CAAR,CAAYG,CAAZ,GAAgBL,OAA5B;AACA,QAAIM,KAAK,GAAGP,QAAQ,CAACG,CAAD,CAAR,CAAYK,CAAZ,GAAgBN,OAA5B;;AACA,QAAIG,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGP,KAAK,CAACL,KAA5B,IAAqCc,KAAK,IAAI,CAA9C,IAAmDA,KAAK,GAAGT,KAAK,CAACJ,MAArE,EACA;AACI,UAAII,KAAK,CAACW,IAAN,CAAWF,KAAX,EAAkBF,KAAlB,CAAJ,EACA;AACIP,QAAAA,KAAK,CAACW,IAAN,CAAWF,KAAX,EAAkBF,KAAlB,EAAyBK,IAAzB,CAA8BV,QAAQ,CAACG,CAAD,CAAtC;AACH;AACJ;AACJ;;AAED,MAAIN,gBAAJ,EACA;AACI;AACAR,IAAAA,oBAAoB,CAACM,SAAS,GAAG,CAAb,EAAgBC,SAAS,GAAG,CAA5B,EAA+BH,KAAK,GAAG,CAAvC,EAA0CC,MAAM,GAAG,CAAnD,EAAsDI,KAAtD,CAApB;AACH;AACJ,CA7BD;;AA+BAa,MAAM,CAACC,OAAP,GAAiBtB,IAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\n\r\n/**\r\n * Copies the tiles in the source rectangular area to a new destination (all specified in tile\r\n * coordinates) within the layer. This copies all tile properties & recalculates collision\r\n * information in the destination region.\r\n *\r\n * @function Phaser.Tilemaps.Components.Copy\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} srcTileX - The x coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} srcTileY - The y coordinate of the area to copy from, in tiles, not pixels.\r\n * @param {integer} width - The width of the area to copy, in tiles, not pixels.\r\n * @param {integer} height - The height of the area to copy, in tiles, not pixels.\r\n * @param {integer} destTileX - The x coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {integer} destTileY - The y coordinate of the area to copy to, in tiles, not pixels.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar Copy = function (srcTileX, srcTileY, width, height, destTileX, destTileY, recalculateFaces, layer)\r\n{\r\n    if (srcTileX < 0) { srcTileX = 0; }\r\n    if (srcTileY < 0) { srcTileY = 0; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    var srcTiles = GetTilesWithin(srcTileX, srcTileY, width, height, null, layer);\r\n\r\n    var offsetX = destTileX - srcTileX;\r\n    var offsetY = destTileY - srcTileY;\r\n\r\n    for (var i = 0; i < srcTiles.length; i++)\r\n    {\r\n        var tileX = srcTiles[i].x + offsetX;\r\n        var tileY = srcTiles[i].y + offsetY;\r\n        if (tileX >= 0 && tileX < layer.width && tileY >= 0 && tileY < layer.height)\r\n        {\r\n            if (layer.data[tileY][tileX])\r\n            {\r\n                layer.data[tileY][tileX].copy(srcTiles[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        // Recalculate the faces within the destination area and neighboring tiles\r\n        CalculateFacesWithin(destTileX - 1, destTileY - 1, width + 2, height + 2, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = Copy;\r\n"]},"metadata":{},"sourceType":"script"}