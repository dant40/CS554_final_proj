{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n * the top-left.\r\n *\r\n * @function Phaser.Tilemaps.Components.FindByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} index - The tile index value to search for.\r\n * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n * bottom-right. Otherwise it scans from the top-left.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {?Phaser.Tilemaps.Tile} The first (or n skipped) tile with the matching index.\r\n */\nvar FindByIndex = function (findIndex, skip, reverse, layer) {\n  if (skip === undefined) {\n    skip = 0;\n  }\n\n  if (reverse === undefined) {\n    reverse = false;\n  }\n\n  var count = 0;\n  var tx;\n  var ty;\n  var tile;\n\n  if (reverse) {\n    for (ty = layer.height - 1; ty >= 0; ty--) {\n      for (tx = layer.width - 1; tx >= 0; tx--) {\n        tile = layer.data[ty][tx];\n\n        if (tile && tile.index === findIndex) {\n          if (count === skip) {\n            return tile;\n          } else {\n            count += 1;\n          }\n        }\n      }\n    }\n  } else {\n    for (ty = 0; ty < layer.height; ty++) {\n      for (tx = 0; tx < layer.width; tx++) {\n        tile = layer.data[ty][tx];\n\n        if (tile && tile.index === findIndex) {\n          if (count === skip) {\n            return tile;\n          } else {\n            count += 1;\n          }\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = FindByIndex;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/FindByIndex.js"],"names":["FindByIndex","findIndex","skip","reverse","layer","undefined","count","tx","ty","tile","height","width","data","index","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBA,IAAIA,WAAW,GAAG,UAAUC,SAAV,EAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,KAApC,EAClB;AACI,MAAIF,IAAI,KAAKG,SAAb,EAAwB;AAAEH,IAAAA,IAAI,GAAG,CAAP;AAAW;;AACrC,MAAIC,OAAO,KAAKE,SAAhB,EAA2B;AAAEF,IAAAA,OAAO,GAAG,KAAV;AAAkB;;AAE/C,MAAIG,KAAK,GAAG,CAAZ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAIN,OAAJ,EACA;AACI,SAAKK,EAAE,GAAGJ,KAAK,CAACM,MAAN,GAAe,CAAzB,EAA4BF,EAAE,IAAI,CAAlC,EAAqCA,EAAE,EAAvC,EACA;AACI,WAAKD,EAAE,GAAGH,KAAK,CAACO,KAAN,GAAc,CAAxB,EAA2BJ,EAAE,IAAI,CAAjC,EAAoCA,EAAE,EAAtC,EACA;AACIE,QAAAA,IAAI,GAAGL,KAAK,CAACQ,IAAN,CAAWJ,EAAX,EAAeD,EAAf,CAAP;;AACA,YAAIE,IAAI,IAAIA,IAAI,CAACI,KAAL,KAAeZ,SAA3B,EACA;AACI,cAAIK,KAAK,KAAKJ,IAAd,EACA;AACI,mBAAOO,IAAP;AACH,WAHD,MAKA;AACIH,YAAAA,KAAK,IAAI,CAAT;AACH;AACJ;AACJ;AACJ;AACJ,GApBD,MAsBA;AACI,SAAKE,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGJ,KAAK,CAACM,MAAxB,EAAgCF,EAAE,EAAlC,EACA;AACI,WAAKD,EAAE,GAAG,CAAV,EAAaA,EAAE,GAAGH,KAAK,CAACO,KAAxB,EAA+BJ,EAAE,EAAjC,EACA;AACIE,QAAAA,IAAI,GAAGL,KAAK,CAACQ,IAAN,CAAWJ,EAAX,EAAeD,EAAf,CAAP;;AACA,YAAIE,IAAI,IAAIA,IAAI,CAACI,KAAL,KAAeZ,SAA3B,EACA;AACI,cAAIK,KAAK,KAAKJ,IAAd,EACA;AACI,mBAAOO,IAAP;AACH,WAHD,MAKA;AACIH,YAAAA,KAAK,IAAI,CAAT;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,SAAO,IAAP;AACH,CAtDD;;AAwDAQ,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Searches the entire map layer for the first tile matching the given index, then returns that Tile\r\n * object. If no match is found, it returns null. The search starts from the top-left tile and\r\n * continues horizontally until it hits the end of the row, then it drops down to the next column.\r\n * If the reverse boolean is true, it scans starting from the bottom-right corner traveling up to\r\n * the top-left.\r\n *\r\n * @function Phaser.Tilemaps.Components.FindByIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} index - The tile index value to search for.\r\n * @param {integer} [skip=0] - The number of times to skip a matching tile before returning.\r\n * @param {boolean} [reverse=false] - If true it will scan the layer in reverse, starting at the\r\n * bottom-right. Otherwise it scans from the top-left.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {?Phaser.Tilemaps.Tile} The first (or n skipped) tile with the matching index.\r\n */\r\nvar FindByIndex = function (findIndex, skip, reverse, layer)\r\n{\r\n    if (skip === undefined) { skip = 0; }\r\n    if (reverse === undefined) { reverse = false; }\r\n\r\n    var count = 0;\r\n    var tx;\r\n    var ty;\r\n    var tile;\r\n\r\n    if (reverse)\r\n    {\r\n        for (ty = layer.height - 1; ty >= 0; ty--)\r\n        {\r\n            for (tx = layer.width - 1; tx >= 0; tx--)\r\n            {\r\n                tile = layer.data[ty][tx];\r\n                if (tile && tile.index === findIndex)\r\n                {\r\n                    if (count === skip)\r\n                    {\r\n                        return tile;\r\n                    }\r\n                    else\r\n                    {\r\n                        count += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (ty = 0; ty < layer.height; ty++)\r\n        {\r\n            for (tx = 0; tx < layer.width; tx++)\r\n            {\r\n                tile = layer.data[ty][tx];\r\n                if (tile && tile.index === findIndex)\r\n                {\r\n                    if (count === skip)\r\n                    {\r\n                        return tile;\r\n                    }\r\n                    else\r\n                    {\r\n                        count += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\nmodule.exports = FindByIndex;\r\n"]},"metadata":{},"sourceType":"script"}