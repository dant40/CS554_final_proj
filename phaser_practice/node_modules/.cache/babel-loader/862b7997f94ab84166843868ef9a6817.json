{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n\nvar Gamepad = require('./Gamepad');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar InputPluginCache = require('../InputPluginCache');\n\nvar InputEvents = require('../events');\n/**\r\n * @classdesc\r\n * The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n *\r\n * Its role is to listen for native DOM Gamepad Events and then process them.\r\n *\r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n *\r\n * You can access it from within a Scene using `this.input.gamepad`.\r\n *\r\n * To listen for a gamepad being connected:\r\n *\r\n * ```javascript\r\n * this.input.gamepad.once('connected', function (pad) {\r\n *     //   'pad' is a reference to the gamepad that was just connected\r\n * });\r\n * ```\r\n *\r\n * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\r\n * this is for security reasons. However, it may also trust the page already, in which case you won't get the\r\n * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\r\n * already connected.\r\n *\r\n * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\r\n * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\r\n * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\r\n * the `Gamepad` class for more details.\r\n *\r\n * For more information about Gamepad support in browsers see the following resources:\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\r\n * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\r\n * http://html5gamepad.com/\r\n *\r\n * @class GamepadPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\n\n\nvar GamepadPlugin = new Class({\n  Extends: EventEmitter,\n  initialize: function GamepadPlugin(sceneInputPlugin) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the Scene that this Input Plugin is responsible for.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.10.0\r\n     */\n\n    this.scene = sceneInputPlugin.scene;\n    /**\r\n     * A reference to the Scene Systems Settings.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#settings\r\n     * @type {Phaser.Types.Scenes.SettingsObject}\r\n     * @since 3.10.0\r\n     */\n\n    this.settings = this.scene.sys.settings;\n    /**\r\n     * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#sceneInputPlugin\r\n     * @type {Phaser.Input.InputPlugin}\r\n     * @since 3.10.0\r\n     */\n\n    this.sceneInputPlugin = sceneInputPlugin;\n    /**\r\n     * A boolean that controls if the Gamepad Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#enabled\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.10.0\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * The Gamepad Event target, as defined in the Game Config.\r\n     * Typically the browser window, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#target\r\n     * @type {any}\r\n     * @since 3.10.0\r\n     */\n\n    this.target;\n    /**\r\n     * An array of the connected Gamepads.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#gamepads\r\n     * @type {Phaser.Input.Gamepad.Gamepad[]}\r\n     * @default []\r\n     * @since 3.10.0\r\n     */\n\n    this.gamepads = [];\n    /**\r\n     * An internal event queue.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#queue\r\n     * @type {GamepadEvent[]}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this.queue = [];\n    /**\r\n     * Internal event handler.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#onGamepadHandler\r\n     * @type {function}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this.onGamepadHandler;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad1\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad1;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad2\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad2;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad3\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad3;\n    /**\r\n     * Internal Gamepad reference.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#_pad4\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @private\r\n     * @since 3.10.0\r\n     */\n\n    this._pad4;\n    sceneInputPlugin.pluginEvents.once(InputEvents.BOOT, this.boot, this);\n    sceneInputPlugin.pluginEvents.on(InputEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#boot\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  boot: function () {\n    var game = this.scene.sys.game;\n    var settings = this.settings.input;\n    var config = game.config;\n    this.enabled = GetValue(settings, 'gamepad', config.inputGamepad) && game.device.input.gamepads;\n    this.target = GetValue(settings, 'gamepad.target', config.inputGamepadEventTarget);\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#start\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  start: function () {\n    if (this.enabled) {\n      this.startListeners();\n    }\n\n    this.sceneInputPlugin.pluginEvents.once(InputEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#isActive\r\n   * @since 3.10.0\r\n   *\r\n   * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n   */\n  isActive: function () {\n    return this.enabled && this.scene.sys.isActive();\n  },\n\n  /**\r\n   * Starts the Gamepad Event listeners running.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#startListeners\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  startListeners: function () {\n    var _this = this;\n\n    var target = this.target;\n\n    var handler = function (event) {\n      if (event.defaultPrevented || !_this.isActive()) {\n        // Do nothing if event already handled\n        return;\n      }\n\n      _this.refreshPads();\n\n      _this.queue.push(event);\n    };\n\n    this.onGamepadHandler = handler;\n    target.addEventListener('gamepadconnected', handler, false);\n    target.addEventListener('gamepaddisconnected', handler, false); //  FF also supports gamepadbuttondown, gamepadbuttonup and gamepadaxismove but\n    //  nothing else does, and we can get those values via the gamepads anyway, so we will\n    //  until more browsers support this\n    //  Finally, listen for an update event from the Input Plugin\n\n    this.sceneInputPlugin.pluginEvents.on(InputEvents.UPDATE, this.update, this);\n  },\n\n  /**\r\n   * Stops the Gamepad Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#stopListeners\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  stopListeners: function () {\n    this.target.removeEventListener('gamepadconnected', this.onGamepadHandler);\n    this.target.removeEventListener('gamepaddisconnected', this.onGamepadHandler);\n    this.sceneInputPlugin.pluginEvents.off(InputEvents.UPDATE, this.update);\n  },\n\n  /**\r\n   * Disconnects all current Gamepads.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#disconnectAll\r\n   * @since 3.10.0\r\n   */\n  disconnectAll: function () {\n    for (var i = 0; i < this.gamepads.length; i++) {\n      this.gamepads.connected = false;\n    }\n  },\n\n  /**\r\n   * Refreshes the list of connected Gamepads.\r\n   *\r\n   * This is called automatically when a gamepad is connected or disconnected,\r\n   * and during the update loop.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#refreshPads\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  refreshPads: function () {\n    var connectedPads = navigator.getGamepads();\n\n    if (!connectedPads) {\n      this.disconnectAll();\n    } else {\n      var currentPads = this.gamepads;\n\n      for (var i = 0; i < connectedPads.length; i++) {\n        var livePad = connectedPads[i]; //  Because sometimes they're null (yes, really)\n\n        if (!livePad) {\n          continue;\n        }\n\n        var id = livePad.id;\n        var index = livePad.index;\n        var currentPad = currentPads[index];\n\n        if (!currentPad) {\n          //  A new Gamepad, not currently stored locally\n          var newPad = new Gamepad(this, livePad);\n          currentPads[index] = newPad;\n\n          if (!this._pad1) {\n            this._pad1 = newPad;\n          } else if (!this._pad2) {\n            this._pad2 = newPad;\n          } else if (!this._pad3) {\n            this._pad3 = newPad;\n          } else if (!this._pad4) {\n            this._pad4 = newPad;\n          }\n        } else if (currentPad.id !== id) {\n          //  A new Gamepad with a different vendor string, but it has got the same index as an old one\n          currentPad.destroy();\n          currentPads[index] = new Gamepad(this, livePad);\n        } else {\n          //  If neither of these, it's a pad we've already got, so update it\n          currentPad.update(livePad);\n        }\n      }\n    }\n  },\n\n  /**\r\n   * Returns an array of all currently connected Gamepads.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#getAll\r\n   * @since 3.10.0\r\n   *\r\n   * @return {Phaser.Input.Gamepad.Gamepad[]} An array of all currently connected Gamepads.\r\n   */\n  getAll: function () {\n    var out = [];\n    var pads = this.gamepads;\n\n    for (var i = 0; i < pads.length; i++) {\n      if (pads[i]) {\n        out.push(pads[i]);\n      }\n    }\n\n    return out;\n  },\n\n  /**\r\n   * Looks-up a single Gamepad based on the given index value.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#getPad\r\n   * @since 3.10.0\r\n   *\r\n   * @param {number} index - The index of the Gamepad to get.\r\n   *\r\n   * @return {Phaser.Input.Gamepad.Gamepad} The Gamepad matching the given index, or undefined if none were found.\r\n   */\n  getPad: function (index) {\n    var pads = this.gamepads;\n\n    for (var i = 0; i < pads.length; i++) {\n      if (pads[i] && pads[i].index === index) {\n        return pads[i];\n      }\n    }\n  },\n\n  /**\r\n   * The internal update loop. Refreshes all connected gamepads and processes their events.\r\n   *\r\n   * Called automatically by the Input Manager, invoked from the Game step.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#update\r\n   * @private\r\n   * @fires Phaser.Input.Gamepad.Events#CONNECTED\r\n   * @fires Phaser.Input.Gamepad.Events#DISCONNECTED\r\n   * @since 3.10.0\r\n   */\n  update: function () {\n    if (!this.enabled) {\n      return;\n    }\n\n    this.refreshPads();\n    var len = this.queue.length;\n\n    if (len === 0) {\n      return;\n    }\n\n    var queue = this.queue.splice(0, len); //  Process the event queue, dispatching all of the events that have stored up\n\n    for (var i = 0; i < len; i++) {\n      var event = queue[i];\n      var pad = this.getPad(event.gamepad.index);\n\n      if (event.type === 'gamepadconnected') {\n        this.emit(Events.CONNECTED, pad, event);\n      } else if (event.type === 'gamepaddisconnected') {\n        this.emit(Events.DISCONNECTED, pad, event);\n      }\n    }\n  },\n\n  /**\r\n   * Shuts the Gamepad Plugin down.\r\n   * All this does is remove any listeners bound to it.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#shutdown\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  shutdown: function () {\n    this.stopListeners();\n    this.disconnectAll();\n    this.removeAllListeners();\n  },\n\n  /**\r\n   * Destroys this Gamepad Plugin, disconnecting all Gamepads and releasing internal references.\r\n   *\r\n   * @method Phaser.Input.Gamepad.GamepadPlugin#destroy\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n\n    for (var i = 0; i < this.gamepads.length; i++) {\n      if (this.gamepads[i]) {\n        this.gamepads[i].destroy();\n      }\n    }\n\n    this.gamepads = [];\n    this.scene = null;\n    this.settings = null;\n    this.sceneInputPlugin = null;\n    this.target = null;\n  },\n\n  /**\r\n   * The total number of connected game pads.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#total\r\n   * @type {integer}\r\n   * @since 3.10.0\r\n   */\n  total: {\n    get: function () {\n      return this.gamepads.length;\n    }\n  },\n\n  /**\r\n   * A reference to the first connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad1\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad1: {\n    get: function () {\n      return this._pad1;\n    }\n  },\n\n  /**\r\n   * A reference to the second connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad2\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad2: {\n    get: function () {\n      return this._pad2;\n    }\n  },\n\n  /**\r\n   * A reference to the third connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad3\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad3: {\n    get: function () {\n      return this._pad3;\n    }\n  },\n\n  /**\r\n   * A reference to the fourth connected Gamepad.\r\n   *\r\n   * This will be undefined if either no pads are connected, or the browser\r\n   * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n   * is plugged in, but hasn't yet had any buttons pressed on it.\r\n   *\r\n   * @name Phaser.Input.Gamepad.GamepadPlugin#pad4\r\n   * @type {Phaser.Input.Gamepad.Gamepad}\r\n   * @since 3.10.0\r\n   */\n  pad4: {\n    get: function () {\n      return this._pad4;\n    }\n  }\n});\n/**\r\n * An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\r\n * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.\r\n *\r\n * @name Phaser.Input.InputPlugin#gamepad\r\n * @type {?Phaser.Input.Gamepad.GamepadPlugin}\r\n * @since 3.10.0\r\n */\n\nInputPluginCache.register('GamepadPlugin', GamepadPlugin, 'gamepad', 'gamepad', 'inputGamepad');\nmodule.exports = GamepadPlugin;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/gamepad/GamepadPlugin.js"],"names":["Class","require","EventEmitter","Events","Gamepad","GetValue","InputPluginCache","InputEvents","GamepadPlugin","Extends","initialize","sceneInputPlugin","call","scene","settings","sys","enabled","target","gamepads","queue","onGamepadHandler","_pad1","_pad2","_pad3","_pad4","pluginEvents","once","BOOT","boot","on","START","start","game","input","config","inputGamepad","device","inputGamepadEventTarget","DESTROY","destroy","startListeners","SHUTDOWN","shutdown","isActive","_this","handler","event","defaultPrevented","refreshPads","push","addEventListener","UPDATE","update","stopListeners","removeEventListener","off","disconnectAll","i","length","connected","connectedPads","navigator","getGamepads","currentPads","livePad","id","index","currentPad","newPad","getAll","out","pads","getPad","len","splice","pad","gamepad","type","emit","CONNECTED","DISCONNECTED","removeAllListeners","total","get","pad1","pad2","pad3","pad4","register","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\nvar Gamepad = require('./Gamepad');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar InputPluginCache = require('../InputPluginCache');\r\nvar InputEvents = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * The Gamepad Plugin is an input plugin that belongs to the Scene-owned Input system.\r\n *\r\n * Its role is to listen for native DOM Gamepad Events and then process them.\r\n *\r\n * You do not need to create this class directly, the Input system will create an instance of it automatically.\r\n *\r\n * You can access it from within a Scene using `this.input.gamepad`.\r\n *\r\n * To listen for a gamepad being connected:\r\n *\r\n * ```javascript\r\n * this.input.gamepad.once('connected', function (pad) {\r\n *     //   'pad' is a reference to the gamepad that was just connected\r\n * });\r\n * ```\r\n *\r\n * Note that the browser may require you to press a button on a gamepad before it will allow you to access it,\r\n * this is for security reasons. However, it may also trust the page already, in which case you won't get the\r\n * 'connected' event and instead should check `GamepadPlugin.total` to see if it thinks there are any gamepads\r\n * already connected.\r\n *\r\n * Once you have received the connected event, or polled the gamepads and found them enabled, you can access\r\n * them via the built-in properties `GamepadPlugin.pad1` to `pad4`, for up to 4 game pads. With a reference\r\n * to the gamepads you can poll its buttons and axis sticks. See the properties and methods available on\r\n * the `Gamepad` class for more details.\r\n *\r\n * For more information about Gamepad support in browsers see the following resources:\r\n *\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\r\n * https://www.smashingmagazine.com/2015/11/gamepad-api-in-web-games/\r\n * http://html5gamepad.com/\r\n *\r\n * @class GamepadPlugin\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Input.Gamepad\r\n * @constructor\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} sceneInputPlugin - A reference to the Scene Input Plugin that the KeyboardPlugin belongs to.\r\n */\r\nvar GamepadPlugin = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function GamepadPlugin (sceneInputPlugin)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the Scene that this Input Plugin is responsible for.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.10.0\r\n         */\r\n        this.scene = sceneInputPlugin.scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems Settings.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#settings\r\n         * @type {Phaser.Types.Scenes.SettingsObject}\r\n         * @since 3.10.0\r\n         */\r\n        this.settings = this.scene.sys.settings;\r\n\r\n        /**\r\n         * A reference to the Scene Input Plugin that created this Keyboard Plugin.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#sceneInputPlugin\r\n         * @type {Phaser.Input.InputPlugin}\r\n         * @since 3.10.0\r\n         */\r\n        this.sceneInputPlugin = sceneInputPlugin;\r\n\r\n        /**\r\n         * A boolean that controls if the Gamepad Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#enabled\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.10.0\r\n         */\r\n        this.enabled = true;\r\n\r\n        /**\r\n         * The Gamepad Event target, as defined in the Game Config.\r\n         * Typically the browser window, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#target\r\n         * @type {any}\r\n         * @since 3.10.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * An array of the connected Gamepads.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#gamepads\r\n         * @type {Phaser.Input.Gamepad.Gamepad[]}\r\n         * @default []\r\n         * @since 3.10.0\r\n         */\r\n        this.gamepads = [];\r\n\r\n        /**\r\n         * An internal event queue.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#queue\r\n         * @type {GamepadEvent[]}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.queue = [];\r\n\r\n        /**\r\n         * Internal event handler.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#onGamepadHandler\r\n         * @type {function}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this.onGamepadHandler;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad1\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad1;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad2\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad2;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad3\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad3;\r\n\r\n        /**\r\n         * Internal Gamepad reference.\r\n         *\r\n         * @name Phaser.Input.Gamepad.GamepadPlugin#_pad4\r\n         * @type {Phaser.Input.Gamepad.Gamepad}\r\n         * @private\r\n         * @since 3.10.0\r\n         */\r\n        this._pad4;\r\n\r\n        sceneInputPlugin.pluginEvents.once(InputEvents.BOOT, this.boot, this);\r\n        sceneInputPlugin.pluginEvents.on(InputEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#boot\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var game = this.scene.sys.game;\r\n        var settings = this.settings.input;\r\n        var config = game.config;\r\n\r\n        this.enabled = GetValue(settings, 'gamepad', config.inputGamepad) && game.device.input.gamepads;\r\n        this.target = GetValue(settings, 'gamepad.target', config.inputGamepadEventTarget);\r\n\r\n        this.sceneInputPlugin.pluginEvents.once(InputEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#start\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (this.enabled)\r\n        {\r\n            this.startListeners();\r\n        }\r\n\r\n        this.sceneInputPlugin.pluginEvents.once(InputEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * Checks to see if both this plugin and the Scene to which it belongs is active.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#isActive\r\n     * @since 3.10.0\r\n     *\r\n     * @return {boolean} `true` if the plugin and the Scene it belongs to is active.\r\n     */\r\n    isActive: function ()\r\n    {\r\n        return (this.enabled && this.scene.sys.isActive());\r\n    },\r\n\r\n    /**\r\n     * Starts the Gamepad Event listeners running.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#startListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var target = this.target;\r\n\r\n        var handler = function (event)\r\n        {\r\n            if (event.defaultPrevented || !_this.isActive())\r\n            {\r\n                // Do nothing if event already handled\r\n                return;\r\n            }\r\n\r\n            _this.refreshPads();\r\n\r\n            _this.queue.push(event);\r\n        };\r\n\r\n        this.onGamepadHandler = handler;\r\n\r\n        target.addEventListener('gamepadconnected', handler, false);\r\n        target.addEventListener('gamepaddisconnected', handler, false);\r\n\r\n        //  FF also supports gamepadbuttondown, gamepadbuttonup and gamepadaxismove but\r\n        //  nothing else does, and we can get those values via the gamepads anyway, so we will\r\n        //  until more browsers support this\r\n\r\n        //  Finally, listen for an update event from the Input Plugin\r\n        this.sceneInputPlugin.pluginEvents.on(InputEvents.UPDATE, this.update, this);\r\n    },\r\n\r\n    /**\r\n     * Stops the Gamepad Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#stopListeners\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        this.target.removeEventListener('gamepadconnected', this.onGamepadHandler);\r\n        this.target.removeEventListener('gamepaddisconnected', this.onGamepadHandler);\r\n\r\n        this.sceneInputPlugin.pluginEvents.off(InputEvents.UPDATE, this.update);\r\n    },\r\n\r\n    /**\r\n     * Disconnects all current Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#disconnectAll\r\n     * @since 3.10.0\r\n     */\r\n    disconnectAll: function ()\r\n    {\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            this.gamepads.connected = false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Refreshes the list of connected Gamepads.\r\n     *\r\n     * This is called automatically when a gamepad is connected or disconnected,\r\n     * and during the update loop.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#refreshPads\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    refreshPads: function ()\r\n    {\r\n        var connectedPads = navigator.getGamepads();\r\n\r\n        if (!connectedPads)\r\n        {\r\n            this.disconnectAll();\r\n        }\r\n        else\r\n        {\r\n            var currentPads = this.gamepads;\r\n\r\n            for (var i = 0; i < connectedPads.length; i++)\r\n            {\r\n                var livePad = connectedPads[i];\r\n\r\n                //  Because sometimes they're null (yes, really)\r\n                if (!livePad)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var id = livePad.id;\r\n                var index = livePad.index;\r\n                var currentPad = currentPads[index];\r\n\r\n                if (!currentPad)\r\n                {\r\n                    //  A new Gamepad, not currently stored locally\r\n                    var newPad = new Gamepad(this, livePad);\r\n\r\n                    currentPads[index] = newPad;\r\n\r\n                    if (!this._pad1)\r\n                    {\r\n                        this._pad1 = newPad;\r\n                    }\r\n                    else if (!this._pad2)\r\n                    {\r\n                        this._pad2 = newPad;\r\n                    }\r\n                    else if (!this._pad3)\r\n                    {\r\n                        this._pad3 = newPad;\r\n                    }\r\n                    else if (!this._pad4)\r\n                    {\r\n                        this._pad4 = newPad;\r\n                    }\r\n                }\r\n                else if (currentPad.id !== id)\r\n                {\r\n                    //  A new Gamepad with a different vendor string, but it has got the same index as an old one\r\n                    currentPad.destroy();\r\n\r\n                    currentPads[index] = new Gamepad(this, livePad);\r\n                }\r\n                else\r\n                {\r\n                    //  If neither of these, it's a pad we've already got, so update it\r\n                    currentPad.update(livePad);\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns an array of all currently connected Gamepads.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getAll\r\n     * @since 3.10.0\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad[]} An array of all currently connected Gamepads.\r\n     */\r\n    getAll: function ()\r\n    {\r\n        var out = [];\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i])\r\n            {\r\n                out.push(pads[i]);\r\n            }\r\n        }\r\n\r\n        return out;\r\n    },\r\n\r\n    /**\r\n     * Looks-up a single Gamepad based on the given index value.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#getPad\r\n     * @since 3.10.0\r\n     *\r\n     * @param {number} index - The index of the Gamepad to get.\r\n     *\r\n     * @return {Phaser.Input.Gamepad.Gamepad} The Gamepad matching the given index, or undefined if none were found.\r\n     */\r\n    getPad: function (index)\r\n    {\r\n        var pads = this.gamepads;\r\n\r\n        for (var i = 0; i < pads.length; i++)\r\n        {\r\n            if (pads[i] && pads[i].index === index)\r\n            {\r\n                return pads[i];\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The internal update loop. Refreshes all connected gamepads and processes their events.\r\n     *\r\n     * Called automatically by the Input Manager, invoked from the Game step.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#update\r\n     * @private\r\n     * @fires Phaser.Input.Gamepad.Events#CONNECTED\r\n     * @fires Phaser.Input.Gamepad.Events#DISCONNECTED\r\n     * @since 3.10.0\r\n     */\r\n    update: function ()\r\n    {\r\n        if (!this.enabled)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.refreshPads();\r\n\r\n        var len = this.queue.length;\r\n\r\n        if (len === 0)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var queue = this.queue.splice(0, len);\r\n\r\n        //  Process the event queue, dispatching all of the events that have stored up\r\n        for (var i = 0; i < len; i++)\r\n        {\r\n            var event = queue[i];\r\n            var pad = this.getPad(event.gamepad.index);\r\n\r\n            if (event.type === 'gamepadconnected')\r\n            {\r\n                this.emit(Events.CONNECTED, pad, event);\r\n            }\r\n            else if (event.type === 'gamepaddisconnected')\r\n            {\r\n                this.emit(Events.DISCONNECTED, pad, event);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Shuts the Gamepad Plugin down.\r\n     * All this does is remove any listeners bound to it.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#shutdown\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.disconnectAll();\r\n\r\n        this.removeAllListeners();\r\n    },\r\n\r\n    /**\r\n     * Destroys this Gamepad Plugin, disconnecting all Gamepads and releasing internal references.\r\n     *\r\n     * @method Phaser.Input.Gamepad.GamepadPlugin#destroy\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        for (var i = 0; i < this.gamepads.length; i++)\r\n        {\r\n            if (this.gamepads[i])\r\n            {\r\n                this.gamepads[i].destroy();\r\n            }\r\n        }\r\n\r\n        this.gamepads = [];\r\n\r\n        this.scene = null;\r\n        this.settings = null;\r\n        this.sceneInputPlugin = null;\r\n        this.target = null;\r\n    },\r\n\r\n    /**\r\n     * The total number of connected game pads.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#total\r\n     * @type {integer}\r\n     * @since 3.10.0\r\n     */\r\n    total: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.gamepads.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the first connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad1\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad1: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad1;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the second connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad2\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad2: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the third connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad3\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad3: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad3;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * A reference to the fourth connected Gamepad.\r\n     *\r\n     * This will be undefined if either no pads are connected, or the browser\r\n     * has not yet issued a gamepadconnect, which can happen even if a Gamepad\r\n     * is plugged in, but hasn't yet had any buttons pressed on it.\r\n     *\r\n     * @name Phaser.Input.Gamepad.GamepadPlugin#pad4\r\n     * @type {Phaser.Input.Gamepad.Gamepad}\r\n     * @since 3.10.0\r\n     */\r\n    pad4: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._pad4;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * An instance of the Gamepad Plugin class, if enabled via the `input.gamepad` Scene or Game Config property.\r\n * Use this to create access Gamepads connected to the browser and respond to gamepad buttons.\r\n *\r\n * @name Phaser.Input.InputPlugin#gamepad\r\n * @type {?Phaser.Input.Gamepad.GamepadPlugin}\r\n * @since 3.10.0\r\n */\r\nInputPluginCache.register('GamepadPlugin', GamepadPlugin, 'gamepad', 'gamepad', 'inputGamepad');\r\n\r\nmodule.exports = GamepadPlugin;\r\n"]},"metadata":{},"sourceType":"script"}