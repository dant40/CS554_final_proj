{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.DynamicTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.DynamicTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\n\n\nvar DynamicTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera) {\n  src.cull(camera);\n  var renderTiles = src.culledTiles;\n  var tileCount = renderTiles.length;\n  var alpha = camera.alpha * src.alpha;\n\n  if (tileCount === 0 || alpha <= 0) {\n    return;\n  }\n\n  var gidMap = src.gidMap;\n  var pipeline = src.pipeline;\n  var getTint = Utils.getTintAppendFloatAlphaAndSwap;\n  var scrollFactorX = src.scrollFactorX;\n  var scrollFactorY = src.scrollFactorY;\n  var x = src.x;\n  var y = src.y;\n  var sx = src.scaleX;\n  var sy = src.scaleY;\n  var tilesets = src.tileset; //  Loop through each tileset in this layer, drawing just the tiles that are in that set each time\n  //  Doing it this way around allows us to batch tiles using the same tileset\n\n  for (var c = 0; c < tilesets.length; c++) {\n    var currentSet = tilesets[c];\n    var texture = currentSet.glTexture;\n\n    for (var i = 0; i < tileCount; i++) {\n      var tile = renderTiles[i];\n      var tileset = gidMap[tile.index];\n\n      if (tileset !== currentSet) {\n        //  Skip tiles that aren't in this set\n        continue;\n      }\n\n      var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\n\n      if (tileTexCoords === null) {\n        continue;\n      }\n\n      var frameWidth = tile.width;\n      var frameHeight = tile.height;\n      var frameX = tileTexCoords.x;\n      var frameY = tileTexCoords.y;\n      var tw = tile.width * 0.5;\n      var th = tile.height * 0.5;\n      var tint = getTint(tile.tint, alpha * tile.alpha);\n      pipeline.batchTexture(src, texture, texture.width, texture.height, x + (tw + tile.pixelX) * sx, y + (th + tile.pixelY) * sy, tile.width, tile.height, sx, sy, tile.rotation, tile.flipX, tile.flipY, scrollFactorX, scrollFactorY, tw, th, frameX, frameY, frameWidth, frameHeight, tint, tint, tint, tint, false, 0, 0, camera, null, true);\n    }\n  }\n};\n\nmodule.exports = DynamicTilemapLayerWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/dynamiclayer/DynamicTilemapLayerWebGLRenderer.js"],"names":["Utils","require","DynamicTilemapLayerWebGLRenderer","renderer","src","interpolationPercentage","camera","cull","renderTiles","culledTiles","tileCount","length","alpha","gidMap","pipeline","getTint","getTintAppendFloatAlphaAndSwap","scrollFactorX","scrollFactorY","x","y","sx","scaleX","sy","scaleY","tilesets","tileset","c","currentSet","texture","glTexture","i","tile","index","tileTexCoords","getTileTextureCoordinates","frameWidth","width","frameHeight","height","frameX","frameY","tw","th","tint","batchTexture","pixelX","pixelY","rotation","flipX","flipY","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.Tilemaps.DynamicTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.DynamicTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\r\nvar DynamicTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera)\r\n{\r\n    src.cull(camera);\r\n\r\n    var renderTiles = src.culledTiles;\r\n    var tileCount = renderTiles.length;\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (tileCount === 0 || alpha <= 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var gidMap = src.gidMap;\r\n    var pipeline = src.pipeline;\r\n\r\n    var getTint = Utils.getTintAppendFloatAlphaAndSwap;\r\n\r\n    var scrollFactorX = src.scrollFactorX;\r\n    var scrollFactorY = src.scrollFactorY;\r\n\r\n    var x = src.x;\r\n    var y = src.y;\r\n\r\n    var sx = src.scaleX;\r\n    var sy = src.scaleY;\r\n\r\n    var tilesets = src.tileset;\r\n\r\n    //  Loop through each tileset in this layer, drawing just the tiles that are in that set each time\r\n    //  Doing it this way around allows us to batch tiles using the same tileset\r\n    for (var c = 0; c < tilesets.length; c++)\r\n    {\r\n        var currentSet = tilesets[c];\r\n        var texture = currentSet.glTexture;\r\n\r\n        for (var i = 0; i < tileCount; i++)\r\n        {\r\n            var tile = renderTiles[i];\r\n\r\n            var tileset = gidMap[tile.index];\r\n\r\n            if (tileset !== currentSet)\r\n            {\r\n                //  Skip tiles that aren't in this set\r\n                continue;\r\n            }\r\n       \r\n            var tileTexCoords = tileset.getTileTextureCoordinates(tile.index);\r\n\r\n            if (tileTexCoords === null)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var frameWidth = tile.width;\r\n            var frameHeight = tile.height;\r\n\r\n            var frameX = tileTexCoords.x;\r\n            var frameY = tileTexCoords.y;\r\n\r\n            var tw = tile.width * 0.5;\r\n            var th = tile.height * 0.5;\r\n\r\n            var tint = getTint(tile.tint, alpha * tile.alpha);\r\n\r\n            pipeline.batchTexture(\r\n                src,\r\n                texture,\r\n                texture.width, texture.height,\r\n                x + ((tw + tile.pixelX) * sx), y + ((th + tile.pixelY) * sy),\r\n                tile.width, tile.height,\r\n                sx, sy,\r\n                tile.rotation,\r\n                tile.flipX, tile.flipY,\r\n                scrollFactorX, scrollFactorY,\r\n                tw, th,\r\n                frameX, frameY, frameWidth, frameHeight,\r\n                tint, tint, tint, tint, false,\r\n                0, 0,\r\n                camera,\r\n                null,\r\n                true\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = DynamicTilemapLayerWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}