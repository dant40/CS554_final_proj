{"ast":null,"code":"/**\r\n * @author       Seth Berrier <berriers@uwstout.edu>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n/**\r\n * Parse a Tiled group layer and create a state object for inheriting.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.CreateGroupLayer\r\n * @since 3.21.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {object} [currentl] - The current group layer from the Tiled JSON file.\r\n * @param {object} [parentstate] - The state of the parent group (if any).\r\n *\r\n * @return {object} A group state object with proper values for updating children layers.\r\n */\n\n\nvar CreateGroupLayer = function (json, groupl, parentstate) {\n  if (!groupl) {\n    // Return a default group state object\n    return {\n      i: 0,\n      // Current layer array iterator\n      layers: json.layers,\n      // Current array of layers\n      // Values inherited from parent group\n      name: '',\n      opacity: 1,\n      visible: true,\n      x: 0,\n      y: 0\n    };\n  } // Compute group layer x, y\n\n\n  var layerX = groupl.x + GetFastValue(groupl, 'startx', 0) * json.tilewidth + GetFastValue(groupl, 'offsetx', 0);\n  var layerY = groupl.y + GetFastValue(groupl, 'starty', 0) * json.tileheight + GetFastValue(groupl, 'offsety', 0); // Compute next state inherited from group\n\n  return {\n    i: 0,\n    layers: groupl.layers,\n    name: parentstate.name + groupl.name + '/',\n    opacity: parentstate.opacity * groupl.opacity,\n    visible: parentstate.visible && groupl.visible,\n    x: parentstate.x + layerX,\n    y: parentstate.y + layerY\n  };\n};\n\nmodule.exports = CreateGroupLayer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/CreateGroupLayer.js"],"names":["GetFastValue","require","CreateGroupLayer","json","groupl","parentstate","i","layers","name","opacity","visible","x","y","layerX","tilewidth","layerY","tileheight","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,YAAY,GAAGC,OAAO,CAAC,oCAAD,CAA1B;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,gBAAgB,GAAG,UAAUC,IAAV,EAAgBC,MAAhB,EAAwBC,WAAxB,EACvB;AACI,MAAI,CAACD,MAAL,EACA;AACI;AACA,WAAO;AACHE,MAAAA,CAAC,EAAE,CADA;AACG;AACNC,MAAAA,MAAM,EAAEJ,IAAI,CAACI,MAFV;AAEkB;AAErB;AACAC,MAAAA,IAAI,EAAE,EALH;AAMHC,MAAAA,OAAO,EAAE,CANN;AAOHC,MAAAA,OAAO,EAAE,IAPN;AAQHC,MAAAA,CAAC,EAAE,CARA;AASHC,MAAAA,CAAC,EAAE;AATA,KAAP;AAWH,GAfL,CAiBI;;;AACA,MAAIC,MAAM,GAAGT,MAAM,CAACO,CAAP,GAAWX,YAAY,CAACI,MAAD,EAAS,QAAT,EAAmB,CAAnB,CAAZ,GAAoCD,IAAI,CAACW,SAApD,GAAgEd,YAAY,CAACI,MAAD,EAAS,SAAT,EAAoB,CAApB,CAAzF;AACA,MAAIW,MAAM,GAAGX,MAAM,CAACQ,CAAP,GAAWZ,YAAY,CAACI,MAAD,EAAS,QAAT,EAAmB,CAAnB,CAAZ,GAAoCD,IAAI,CAACa,UAApD,GAAiEhB,YAAY,CAACI,MAAD,EAAS,SAAT,EAAoB,CAApB,CAA1F,CAnBJ,CAqBI;;AACA,SAAO;AACHE,IAAAA,CAAC,EAAE,CADA;AAEHC,IAAAA,MAAM,EAAEH,MAAM,CAACG,MAFZ;AAGHC,IAAAA,IAAI,EAAEH,WAAW,CAACG,IAAZ,GAAmBJ,MAAM,CAACI,IAA1B,GAAiC,GAHpC;AAIHC,IAAAA,OAAO,EAAEJ,WAAW,CAACI,OAAZ,GAAsBL,MAAM,CAACK,OAJnC;AAKHC,IAAAA,OAAO,EAAEL,WAAW,CAACK,OAAZ,IAAuBN,MAAM,CAACM,OALpC;AAMHC,IAAAA,CAAC,EAAEN,WAAW,CAACM,CAAZ,GAAgBE,MANhB;AAOHD,IAAAA,CAAC,EAAEP,WAAW,CAACO,CAAZ,GAAgBG;AAPhB,GAAP;AASH,CAhCD;;AAkCAE,MAAM,CAACC,OAAP,GAAiBhB,gBAAjB","sourcesContent":["/**\r\n * @author       Seth Berrier <berriers@uwstout.edu>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Parse a Tiled group layer and create a state object for inheriting.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.CreateGroupLayer\r\n * @since 3.21.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {object} [currentl] - The current group layer from the Tiled JSON file.\r\n * @param {object} [parentstate] - The state of the parent group (if any).\r\n *\r\n * @return {object} A group state object with proper values for updating children layers.\r\n */\r\nvar CreateGroupLayer = function (json, groupl, parentstate)\r\n{\r\n    if (!groupl)\r\n    {\r\n        // Return a default group state object\r\n        return {\r\n            i: 0, // Current layer array iterator\r\n            layers: json.layers, // Current array of layers\r\n\r\n            // Values inherited from parent group\r\n            name: '',\r\n            opacity: 1,\r\n            visible: true,\r\n            x: 0,\r\n            y: 0\r\n        };\r\n    }\r\n\r\n    // Compute group layer x, y\r\n    var layerX = groupl.x + GetFastValue(groupl, 'startx', 0) * json.tilewidth + GetFastValue(groupl, 'offsetx', 0);\r\n    var layerY = groupl.y + GetFastValue(groupl, 'starty', 0) * json.tileheight + GetFastValue(groupl, 'offsety', 0);\r\n\r\n    // Compute next state inherited from group\r\n    return {\r\n        i: 0,\r\n        layers: groupl.layers,\r\n        name: parentstate.name + groupl.name + '/',\r\n        opacity: parentstate.opacity * groupl.opacity,\r\n        visible: parentstate.visible && groupl.visible,\r\n        x: parentstate.x + layerX,\r\n        y: parentstate.y + layerY\r\n    };\r\n};\r\n\r\nmodule.exports = CreateGroupLayer;\r\n"]},"metadata":{},"sourceType":"script"}