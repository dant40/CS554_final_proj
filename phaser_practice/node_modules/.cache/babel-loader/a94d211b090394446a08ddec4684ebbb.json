{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar DegToRad = require('../../math/DegToRad');\n\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\n/**\r\n * @classdesc\r\n * A Particle is a simple Game Object controlled by a Particle Emitter and Manager, and rendered by the Manager.\r\n * It uses its own lightweight physics system, and can interact only with its Emitter's bounds and zones.\r\n *\r\n * @class Particle\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to which this Particle belongs.\r\n */\n\n\nvar Particle = new Class({\n  initialize: function Particle(emitter) {\n    /**\r\n     * The Emitter to which this Particle belongs.\r\n     *\r\n     * A Particle can only belong to a single Emitter and is created, updated and destroyed via it.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#emitter\r\n     * @type {Phaser.GameObjects.Particles.ParticleEmitter}\r\n     * @since 3.0.0\r\n     */\n    this.emitter = emitter;\n    /**\r\n     * The texture frame used to render this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = null;\n    /**\r\n     * The x coordinate of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x = 0;\n    /**\r\n     * The y coordinate of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = 0;\n    /**\r\n     * The x velocity of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#velocityX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.velocityX = 0;\n    /**\r\n     * The y velocity of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#velocityY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.velocityY = 0;\n    /**\r\n     * The x acceleration of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#accelerationX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationX = 0;\n    /**\r\n     * The y acceleration of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#accelerationY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.accelerationY = 0;\n    /**\r\n     * The maximum horizontal velocity this Particle can travel at.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#maxVelocityX\r\n     * @type {number}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityX = 10000;\n    /**\r\n     * The maximum vertical velocity this Particle can travel at.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#maxVelocityY\r\n     * @type {number}\r\n     * @default 10000\r\n     * @since 3.0.0\r\n     */\n\n    this.maxVelocityY = 10000;\n    /**\r\n     * The bounciness, or restitution, of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#bounce\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bounce = 0;\n    /**\r\n     * The horizontal scale of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#scaleX\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleX = 1;\n    /**\r\n     * The vertical scale of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#scaleY\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.scaleY = 1;\n    /**\r\n     * The alpha value of this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#alpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.alpha = 1;\n    /**\r\n     * The angle of this Particle in degrees.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#angle\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.angle = 0;\n    /**\r\n     * The angle of this Particle in radians.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#rotation\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.rotation = 0;\n    /**\r\n     * The tint applied to this Particle.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#tint\r\n     * @type {integer}\r\n     * @webglOnly\r\n     * @since 3.0.0\r\n     */\n\n    this.tint = 0xffffff;\n    /**\r\n     * The lifespan of this Particle in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#life\r\n     * @type {number}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     */\n\n    this.life = 1000;\n    /**\r\n     * The current life of this Particle in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#lifeCurrent\r\n     * @type {number}\r\n     * @default 1000\r\n     * @since 3.0.0\r\n     */\n\n    this.lifeCurrent = 1000;\n    /**\r\n     * The delay applied to this Particle upon emission, in ms.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#delayCurrent\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.delayCurrent = 0;\n    /**\r\n     * The normalized lifespan T value, where 0 is the start and 1 is the end.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#lifeT\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.lifeT = 0;\n    /**\r\n     * The data used by the ease equation.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.Particle#data\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = {\n      tint: {\n        min: 0xffffff,\n        max: 0xffffff,\n        current: 0xffffff\n      },\n      alpha: {\n        min: 1,\n        max: 1\n      },\n      rotate: {\n        min: 0,\n        max: 0\n      },\n      scaleX: {\n        min: 1,\n        max: 1\n      },\n      scaleY: {\n        min: 1,\n        max: 1\n      }\n    };\n  },\n\n  /**\r\n   * Checks to see if this Particle is alive and updating.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#isAlive\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if this Particle is alive and updating, otherwise `false`.\r\n   */\n  isAlive: function () {\n    return this.lifeCurrent > 0;\n  },\n\n  /**\r\n   * Resets the position of this particle back to zero.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#resetPosition\r\n   * @since 3.16.0\r\n   */\n  resetPosition: function () {\n    this.x = 0;\n    this.y = 0;\n  },\n\n  /**\r\n   * Starts this Particle from the given coordinates.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#fire\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to launch this Particle from.\r\n   * @param {number} y - The y coordinate to launch this Particle from.\r\n   */\n  fire: function (x, y) {\n    var emitter = this.emitter;\n    this.frame = emitter.getFrame();\n\n    if (emitter.emitZone) {\n      //  Updates particle.x and particle.y during this call\n      emitter.emitZone.getPoint(this);\n    }\n\n    if (x === undefined) {\n      if (emitter.follow) {\n        this.x += emitter.follow.x + emitter.followOffset.x;\n      }\n\n      this.x += emitter.x.onEmit(this, 'x');\n    } else {\n      this.x += x;\n    }\n\n    if (y === undefined) {\n      if (emitter.follow) {\n        this.y += emitter.follow.y + emitter.followOffset.y;\n      }\n\n      this.y += emitter.y.onEmit(this, 'y');\n    } else {\n      this.y += y;\n    }\n\n    this.life = emitter.lifespan.onEmit(this, 'lifespan');\n    this.lifeCurrent = this.life;\n    this.lifeT = 0;\n    var sx = emitter.speedX.onEmit(this, 'speedX');\n    var sy = emitter.speedY ? emitter.speedY.onEmit(this, 'speedY') : sx;\n\n    if (emitter.radial) {\n      var rad = DegToRad(emitter.angle.onEmit(this, 'angle'));\n      this.velocityX = Math.cos(rad) * Math.abs(sx);\n      this.velocityY = Math.sin(rad) * Math.abs(sy);\n    } else if (emitter.moveTo) {\n      var mx = emitter.moveToX.onEmit(this, 'moveToX');\n      var my = emitter.moveToY ? emitter.moveToY.onEmit(this, 'moveToY') : mx;\n      var angle = Math.atan2(my - this.y, mx - this.x);\n      var speed = DistanceBetween(this.x, this.y, mx, my) / (this.life / 1000); //  We know how many pixels we need to move, but how fast?\n      // var speed = this.distanceToXY(displayObject, x, y) / (maxTime / 1000);\n\n      this.velocityX = Math.cos(angle) * speed;\n      this.velocityY = Math.sin(angle) * speed;\n    } else {\n      this.velocityX = sx;\n      this.velocityY = sy;\n    }\n\n    if (emitter.acceleration) {\n      this.accelerationX = emitter.accelerationX.onEmit(this, 'accelerationX');\n      this.accelerationY = emitter.accelerationY.onEmit(this, 'accelerationY');\n    }\n\n    this.maxVelocityX = emitter.maxVelocityX.onEmit(this, 'maxVelocityX');\n    this.maxVelocityY = emitter.maxVelocityY.onEmit(this, 'maxVelocityY');\n    this.delayCurrent = emitter.delay.onEmit(this, 'delay');\n    this.scaleX = emitter.scaleX.onEmit(this, 'scaleX');\n    this.scaleY = emitter.scaleY ? emitter.scaleY.onEmit(this, 'scaleY') : this.scaleX;\n    this.angle = emitter.rotate.onEmit(this, 'rotate');\n    this.rotation = DegToRad(this.angle);\n    this.bounce = emitter.bounce.onEmit(this, 'bounce');\n    this.alpha = emitter.alpha.onEmit(this, 'alpha');\n    this.tint = emitter.tint.onEmit(this, 'tint');\n  },\n\n  /**\r\n   * An internal method that calculates the velocity of the Particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#computeVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter that is updating this Particle.\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   * @param {array} processors - Particle processors (gravity wells).\r\n   */\n  computeVelocity: function (emitter, delta, step, processors) {\n    var vx = this.velocityX;\n    var vy = this.velocityY;\n    var ax = this.accelerationX;\n    var ay = this.accelerationY;\n    var mx = this.maxVelocityX;\n    var my = this.maxVelocityY;\n    vx += emitter.gravityX * step;\n    vy += emitter.gravityY * step;\n\n    if (ax) {\n      vx += ax * step;\n    }\n\n    if (ay) {\n      vy += ay * step;\n    }\n\n    if (vx > mx) {\n      vx = mx;\n    } else if (vx < -mx) {\n      vx = -mx;\n    }\n\n    if (vy > my) {\n      vy = my;\n    } else if (vy < -my) {\n      vy = -my;\n    }\n\n    this.velocityX = vx;\n    this.velocityY = vy; //  Apply any additional processors\n\n    for (var i = 0; i < processors.length; i++) {\n      processors[i].update(this, delta, step);\n    }\n  },\n\n  /**\r\n   * Checks if this Particle is still within the bounds defined by the given Emitter.\r\n   *\r\n   * If not, and depending on the Emitter collision flags, the Particle may either stop or rebound.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#checkBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to check the bounds against.\r\n   */\n  checkBounds: function (emitter) {\n    var bounds = emitter.bounds;\n    var bounce = -this.bounce;\n\n    if (this.x < bounds.x && emitter.collideLeft) {\n      this.x = bounds.x;\n      this.velocityX *= bounce;\n    } else if (this.x > bounds.right && emitter.collideRight) {\n      this.x = bounds.right;\n      this.velocityX *= bounce;\n    }\n\n    if (this.y < bounds.y && emitter.collideTop) {\n      this.y = bounds.y;\n      this.velocityY *= bounce;\n    } else if (this.y > bounds.bottom && emitter.collideBottom) {\n      this.y = bounds.bottom;\n      this.velocityY *= bounce;\n    }\n  },\n\n  /**\r\n   * The main update method for this Particle.\r\n   *\r\n   * Updates its life values, computes the velocity and repositions the Particle.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.Particle#update\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} delta - The delta time in ms.\r\n   * @param {number} step - The delta value divided by 1000.\r\n   * @param {array} processors - An optional array of update processors.\r\n   *\r\n   * @return {boolean} Returns `true` if this Particle has now expired and should be removed, otherwise `false` if still active.\r\n   */\n  update: function (delta, step, processors) {\n    if (this.delayCurrent > 0) {\n      this.delayCurrent -= delta;\n      return false;\n    }\n\n    var emitter = this.emitter; //  How far along in life is this particle? (t = 0 to 1)\n\n    var t = 1 - this.lifeCurrent / this.life;\n    this.lifeT = t;\n    this.computeVelocity(emitter, delta, step, processors);\n    this.x += this.velocityX * step;\n    this.y += this.velocityY * step;\n\n    if (emitter.bounds) {\n      this.checkBounds(emitter);\n    }\n\n    if (emitter.deathZone && emitter.deathZone.willKill(this)) {\n      this.lifeCurrent = 0; //  No need to go any further, particle has been killed\n\n      return true;\n    }\n\n    this.scaleX = emitter.scaleX.onUpdate(this, 'scaleX', t, this.scaleX);\n\n    if (emitter.scaleY) {\n      this.scaleY = emitter.scaleY.onUpdate(this, 'scaleY', t, this.scaleY);\n    } else {\n      this.scaleY = this.scaleX;\n    }\n\n    this.angle = emitter.rotate.onUpdate(this, 'rotate', t, this.angle);\n    this.rotation = DegToRad(this.angle);\n    this.alpha = emitter.alpha.onUpdate(this, 'alpha', t, this.alpha);\n    this.tint = emitter.tint.onUpdate(this, 'tint', t, this.tint);\n    this.lifeCurrent -= delta;\n    return this.lifeCurrent <= 0;\n  }\n});\nmodule.exports = Particle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/Particle.js"],"names":["Class","require","DegToRad","DistanceBetween","Particle","initialize","emitter","frame","x","y","velocityX","velocityY","accelerationX","accelerationY","maxVelocityX","maxVelocityY","bounce","scaleX","scaleY","alpha","angle","rotation","tint","life","lifeCurrent","delayCurrent","lifeT","data","min","max","current","rotate","isAlive","resetPosition","fire","getFrame","emitZone","getPoint","undefined","follow","followOffset","onEmit","lifespan","sx","speedX","sy","speedY","radial","rad","Math","cos","abs","sin","moveTo","mx","moveToX","my","moveToY","atan2","speed","acceleration","delay","computeVelocity","delta","step","processors","vx","vy","ax","ay","gravityX","gravityY","i","length","update","checkBounds","bounds","collideLeft","right","collideRight","collideTop","bottom","collideBottom","t","deathZone","willKill","onUpdate","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar DegToRad = require('../../math/DegToRad');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\n\r\n/**\r\n * @classdesc\r\n * A Particle is a simple Game Object controlled by a Particle Emitter and Manager, and rendered by the Manager.\r\n * It uses its own lightweight physics system, and can interact only with its Emitter's bounds and zones.\r\n *\r\n * @class Particle\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to which this Particle belongs.\r\n */\r\nvar Particle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Particle (emitter)\r\n    {\r\n        /**\r\n         * The Emitter to which this Particle belongs.\r\n         *\r\n         * A Particle can only belong to a single Emitter and is created, updated and destroyed via it.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#emitter\r\n         * @type {Phaser.GameObjects.Particles.ParticleEmitter}\r\n         * @since 3.0.0\r\n         */\r\n        this.emitter = emitter;\r\n\r\n        /**\r\n         * The texture frame used to render this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = null;\r\n\r\n        /**\r\n         * The x coordinate of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = 0;\r\n\r\n        /**\r\n         * The y coordinate of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = 0;\r\n\r\n        /**\r\n         * The x velocity of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#velocityX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.velocityX = 0;\r\n\r\n        /**\r\n         * The y velocity of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#velocityY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.velocityY = 0;\r\n\r\n        /**\r\n         * The x acceleration of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#accelerationX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationX = 0;\r\n\r\n        /**\r\n         * The y acceleration of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#accelerationY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.accelerationY = 0;\r\n\r\n        /**\r\n         * The maximum horizontal velocity this Particle can travel at.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#maxVelocityX\r\n         * @type {number}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityX = 10000;\r\n\r\n        /**\r\n         * The maximum vertical velocity this Particle can travel at.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#maxVelocityY\r\n         * @type {number}\r\n         * @default 10000\r\n         * @since 3.0.0\r\n         */\r\n        this.maxVelocityY = 10000;\r\n\r\n        /**\r\n         * The bounciness, or restitution, of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#bounce\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bounce = 0;\r\n\r\n        /**\r\n         * The horizontal scale of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#scaleX\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleX = 1;\r\n\r\n        /**\r\n         * The vertical scale of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#scaleY\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.scaleY = 1;\r\n\r\n        /**\r\n         * The alpha value of this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#alpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.alpha = 1;\r\n\r\n        /**\r\n         * The angle of this Particle in degrees.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#angle\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.angle = 0;\r\n\r\n        /**\r\n         * The angle of this Particle in radians.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#rotation\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.rotation = 0;\r\n\r\n        /**\r\n         * The tint applied to this Particle.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#tint\r\n         * @type {integer}\r\n         * @webglOnly\r\n         * @since 3.0.0\r\n         */\r\n        this.tint = 0xffffff;\r\n\r\n        /**\r\n         * The lifespan of this Particle in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#life\r\n         * @type {number}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         */\r\n        this.life = 1000;\r\n\r\n        /**\r\n         * The current life of this Particle in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#lifeCurrent\r\n         * @type {number}\r\n         * @default 1000\r\n         * @since 3.0.0\r\n         */\r\n        this.lifeCurrent = 1000;\r\n\r\n        /**\r\n         * The delay applied to this Particle upon emission, in ms.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#delayCurrent\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.delayCurrent = 0;\r\n\r\n        /**\r\n         * The normalized lifespan T value, where 0 is the start and 1 is the end.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#lifeT\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.lifeT = 0;\r\n\r\n        /**\r\n         * The data used by the ease equation.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.Particle#data\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = {\r\n            tint: { min: 0xffffff, max: 0xffffff, current: 0xffffff },\r\n            alpha: { min: 1, max: 1 },\r\n            rotate: { min: 0, max: 0 },\r\n            scaleX: { min: 1, max: 1 },\r\n            scaleY: { min: 1, max: 1 }\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Checks to see if this Particle is alive and updating.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#isAlive\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if this Particle is alive and updating, otherwise `false`.\r\n     */\r\n    isAlive: function ()\r\n    {\r\n        return (this.lifeCurrent > 0);\r\n    },\r\n\r\n    /**\r\n     * Resets the position of this particle back to zero.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#resetPosition\r\n     * @since 3.16.0\r\n     */\r\n    resetPosition: function ()\r\n    {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    },\r\n\r\n    /**\r\n     * Starts this Particle from the given coordinates.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#fire\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to launch this Particle from.\r\n     * @param {number} y - The y coordinate to launch this Particle from.\r\n     */\r\n    fire: function (x, y)\r\n    {\r\n        var emitter = this.emitter;\r\n\r\n        this.frame = emitter.getFrame();\r\n\r\n        if (emitter.emitZone)\r\n        {\r\n            //  Updates particle.x and particle.y during this call\r\n            emitter.emitZone.getPoint(this);\r\n        }\r\n\r\n        if (x === undefined)\r\n        {\r\n            if (emitter.follow)\r\n            {\r\n                this.x += emitter.follow.x + emitter.followOffset.x;\r\n            }\r\n\r\n            this.x += emitter.x.onEmit(this, 'x');\r\n        }\r\n        else\r\n        {\r\n            this.x += x;\r\n        }\r\n\r\n        if (y === undefined)\r\n        {\r\n            if (emitter.follow)\r\n            {\r\n                this.y += emitter.follow.y + emitter.followOffset.y;\r\n            }\r\n\r\n            this.y += emitter.y.onEmit(this, 'y');\r\n        }\r\n        else\r\n        {\r\n            this.y += y;\r\n        }\r\n\r\n        this.life = emitter.lifespan.onEmit(this, 'lifespan');\r\n        this.lifeCurrent = this.life;\r\n        this.lifeT = 0;\r\n\r\n        var sx = emitter.speedX.onEmit(this, 'speedX');\r\n        var sy = (emitter.speedY) ? emitter.speedY.onEmit(this, 'speedY') : sx;\r\n\r\n        if (emitter.radial)\r\n        {\r\n            var rad = DegToRad(emitter.angle.onEmit(this, 'angle'));\r\n\r\n            this.velocityX = Math.cos(rad) * Math.abs(sx);\r\n            this.velocityY = Math.sin(rad) * Math.abs(sy);\r\n        }\r\n        else if (emitter.moveTo)\r\n        {\r\n            var mx = emitter.moveToX.onEmit(this, 'moveToX');\r\n            var my = (emitter.moveToY) ? emitter.moveToY.onEmit(this, 'moveToY') : mx;\r\n\r\n            var angle = Math.atan2(my - this.y, mx - this.x);\r\n\r\n            var speed = DistanceBetween(this.x, this.y, mx, my) / (this.life / 1000);\r\n\r\n            //  We know how many pixels we need to move, but how fast?\r\n            // var speed = this.distanceToXY(displayObject, x, y) / (maxTime / 1000);\r\n\r\n            this.velocityX = Math.cos(angle) * speed;\r\n            this.velocityY = Math.sin(angle) * speed;\r\n        }\r\n        else\r\n        {\r\n            this.velocityX = sx;\r\n            this.velocityY = sy;\r\n        }\r\n\r\n        if (emitter.acceleration)\r\n        {\r\n            this.accelerationX = emitter.accelerationX.onEmit(this, 'accelerationX');\r\n            this.accelerationY = emitter.accelerationY.onEmit(this, 'accelerationY');\r\n        }\r\n\r\n        this.maxVelocityX = emitter.maxVelocityX.onEmit(this, 'maxVelocityX');\r\n        this.maxVelocityY = emitter.maxVelocityY.onEmit(this, 'maxVelocityY');\r\n\r\n        this.delayCurrent = emitter.delay.onEmit(this, 'delay');\r\n\r\n        this.scaleX = emitter.scaleX.onEmit(this, 'scaleX');\r\n        this.scaleY = (emitter.scaleY) ? emitter.scaleY.onEmit(this, 'scaleY') : this.scaleX;\r\n\r\n        this.angle = emitter.rotate.onEmit(this, 'rotate');\r\n        this.rotation = DegToRad(this.angle);\r\n\r\n        this.bounce = emitter.bounce.onEmit(this, 'bounce');\r\n\r\n        this.alpha = emitter.alpha.onEmit(this, 'alpha');\r\n\r\n        this.tint = emitter.tint.onEmit(this, 'tint');\r\n    },\r\n\r\n    /**\r\n     * An internal method that calculates the velocity of the Particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#computeVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter that is updating this Particle.\r\n     * @param {number} delta - The delta time in ms.\r\n     * @param {number} step - The delta value divided by 1000.\r\n     * @param {array} processors - Particle processors (gravity wells).\r\n     */\r\n    computeVelocity: function (emitter, delta, step, processors)\r\n    {\r\n        var vx = this.velocityX;\r\n        var vy = this.velocityY;\r\n\r\n        var ax = this.accelerationX;\r\n        var ay = this.accelerationY;\r\n\r\n        var mx = this.maxVelocityX;\r\n        var my = this.maxVelocityY;\r\n\r\n        vx += (emitter.gravityX * step);\r\n        vy += (emitter.gravityY * step);\r\n\r\n        if (ax)\r\n        {\r\n            vx += (ax * step);\r\n        }\r\n\r\n        if (ay)\r\n        {\r\n            vy += (ay * step);\r\n        }\r\n\r\n        if (vx > mx)\r\n        {\r\n            vx = mx;\r\n        }\r\n        else if (vx < -mx)\r\n        {\r\n            vx = -mx;\r\n        }\r\n\r\n        if (vy > my)\r\n        {\r\n            vy = my;\r\n        }\r\n        else if (vy < -my)\r\n        {\r\n            vy = -my;\r\n        }\r\n\r\n        this.velocityX = vx;\r\n        this.velocityY = vy;\r\n\r\n        //  Apply any additional processors\r\n        for (var i = 0; i < processors.length; i++)\r\n        {\r\n            processors[i].update(this, delta, step);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Checks if this Particle is still within the bounds defined by the given Emitter.\r\n     *\r\n     * If not, and depending on the Emitter collision flags, the Particle may either stop or rebound.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#checkBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Emitter to check the bounds against.\r\n     */\r\n    checkBounds: function (emitter)\r\n    {\r\n        var bounds = emitter.bounds;\r\n        var bounce = -this.bounce;\r\n\r\n        if (this.x < bounds.x && emitter.collideLeft)\r\n        {\r\n            this.x = bounds.x;\r\n            this.velocityX *= bounce;\r\n        }\r\n        else if (this.x > bounds.right && emitter.collideRight)\r\n        {\r\n            this.x = bounds.right;\r\n            this.velocityX *= bounce;\r\n        }\r\n\r\n        if (this.y < bounds.y && emitter.collideTop)\r\n        {\r\n            this.y = bounds.y;\r\n            this.velocityY *= bounce;\r\n        }\r\n        else if (this.y > bounds.bottom && emitter.collideBottom)\r\n        {\r\n            this.y = bounds.bottom;\r\n            this.velocityY *= bounce;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * The main update method for this Particle.\r\n     *\r\n     * Updates its life values, computes the velocity and repositions the Particle.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.Particle#update\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} delta - The delta time in ms.\r\n     * @param {number} step - The delta value divided by 1000.\r\n     * @param {array} processors - An optional array of update processors.\r\n     *\r\n     * @return {boolean} Returns `true` if this Particle has now expired and should be removed, otherwise `false` if still active.\r\n     */\r\n    update: function (delta, step, processors)\r\n    {\r\n        if (this.delayCurrent > 0)\r\n        {\r\n            this.delayCurrent -= delta;\r\n\r\n            return false;\r\n        }\r\n\r\n        var emitter = this.emitter;\r\n\r\n        //  How far along in life is this particle? (t = 0 to 1)\r\n        var t = 1 - (this.lifeCurrent / this.life);\r\n\r\n        this.lifeT = t;\r\n\r\n        this.computeVelocity(emitter, delta, step, processors);\r\n\r\n        this.x += this.velocityX * step;\r\n        this.y += this.velocityY * step;\r\n\r\n        if (emitter.bounds)\r\n        {\r\n            this.checkBounds(emitter);\r\n        }\r\n\r\n        if (emitter.deathZone && emitter.deathZone.willKill(this))\r\n        {\r\n            this.lifeCurrent = 0;\r\n\r\n            //  No need to go any further, particle has been killed\r\n            return true;\r\n        }\r\n\r\n        this.scaleX = emitter.scaleX.onUpdate(this, 'scaleX', t, this.scaleX);\r\n\r\n        if (emitter.scaleY)\r\n        {\r\n            this.scaleY = emitter.scaleY.onUpdate(this, 'scaleY', t, this.scaleY);\r\n        }\r\n        else\r\n        {\r\n            this.scaleY = this.scaleX;\r\n        }\r\n\r\n        this.angle = emitter.rotate.onUpdate(this, 'rotate', t, this.angle);\r\n        this.rotation = DegToRad(this.angle);\r\n\r\n        this.alpha = emitter.alpha.onUpdate(this, 'alpha', t, this.alpha);\r\n\r\n        this.tint = emitter.tint.onUpdate(this, 'tint', t, this.tint);\r\n\r\n        this.lifeCurrent -= delta;\r\n\r\n        return (this.lifeCurrent <= 0);\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Particle;\r\n"]},"metadata":{},"sourceType":"script"}