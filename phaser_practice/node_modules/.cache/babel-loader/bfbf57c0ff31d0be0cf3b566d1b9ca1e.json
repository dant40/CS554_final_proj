{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar Color = require('../../display/color');\n\nvar defaultTileColor = new Color(105, 210, 231, 150);\nvar defaultCollidingTileColor = new Color(243, 134, 48, 200);\nvar defaultFaceColor = new Color(40, 39, 37, 150);\n/**\r\n * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n * wherever you want on the screen.\r\n *\r\n * @function Phaser.Tilemaps.Components.RenderDebug\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n * @param {?Phaser.Display.Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n * tile faces. If set to null, interesting tile faces will not be drawn.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\nvar RenderDebug = function (graphics, styleConfig, layer) {\n  if (styleConfig === undefined) {\n    styleConfig = {};\n  } // Default colors without needlessly creating Color objects\n\n\n  var tileColor = styleConfig.tileColor !== undefined ? styleConfig.tileColor : defaultTileColor;\n  var collidingTileColor = styleConfig.collidingTileColor !== undefined ? styleConfig.collidingTileColor : defaultCollidingTileColor;\n  var faceColor = styleConfig.faceColor !== undefined ? styleConfig.faceColor : defaultFaceColor;\n  var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\n  graphics.translateCanvas(layer.tilemapLayer.x, layer.tilemapLayer.y);\n  graphics.scaleCanvas(layer.tilemapLayer.scaleX, layer.tilemapLayer.scaleY);\n\n  for (var i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n    var tw = tile.width;\n    var th = tile.height;\n    var x = tile.pixelX;\n    var y = tile.pixelY;\n    var color = tile.collides ? collidingTileColor : tileColor;\n\n    if (color !== null) {\n      graphics.fillStyle(color.color, color.alpha / 255);\n      graphics.fillRect(x, y, tw, th);\n    } // Inset the face line to prevent neighboring tile's lines from overlapping\n\n\n    x += 1;\n    y += 1;\n    tw -= 2;\n    th -= 2;\n\n    if (faceColor !== null) {\n      graphics.lineStyle(1, faceColor.color, faceColor.alpha / 255);\n\n      if (tile.faceTop) {\n        graphics.lineBetween(x, y, x + tw, y);\n      }\n\n      if (tile.faceRight) {\n        graphics.lineBetween(x + tw, y, x + tw, y + th);\n      }\n\n      if (tile.faceBottom) {\n        graphics.lineBetween(x, y + th, x + tw, y + th);\n      }\n\n      if (tile.faceLeft) {\n        graphics.lineBetween(x, y, x, y + th);\n      }\n    }\n  }\n};\n\nmodule.exports = RenderDebug;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/RenderDebug.js"],"names":["GetTilesWithin","require","Color","defaultTileColor","defaultCollidingTileColor","defaultFaceColor","RenderDebug","graphics","styleConfig","layer","undefined","tileColor","collidingTileColor","faceColor","tiles","width","height","translateCanvas","tilemapLayer","x","y","scaleCanvas","scaleX","scaleY","i","length","tile","tw","th","pixelX","pixelY","color","collides","fillStyle","alpha","fillRect","lineStyle","faceTop","lineBetween","faceRight","faceBottom","faceLeft","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Color = require('../../display/color');\r\n\r\nvar defaultTileColor = new Color(105, 210, 231, 150);\r\nvar defaultCollidingTileColor = new Color(243, 134, 48, 200);\r\nvar defaultFaceColor = new Color(40, 39, 37, 150);\r\n\r\n/**\r\n * Draws a debug representation of the layer to the given Graphics. This is helpful when you want to\r\n * get a quick idea of which of your tiles are colliding and which have interesting faces. The tiles\r\n * are drawn starting at (0, 0) in the Graphics, allowing you to place the debug representation\r\n * wherever you want on the screen.\r\n *\r\n * @function Phaser.Tilemaps.Components.RenderDebug\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Graphics} graphics - The target Graphics object to draw upon.\r\n * @param {object} styleConfig - An object specifying the colors to use for the debug drawing.\r\n * @param {?Phaser.Display.Color} [styleConfig.tileColor=blue] - Color to use for drawing a filled rectangle at\r\n * non-colliding tile locations. If set to null, non-colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.collidingTileColor=orange] - Color to use for drawing a filled\r\n * rectangle at colliding tile locations. If set to null, colliding tiles will not be drawn.\r\n * @param {?Phaser.Display.Color} [styleConfig.faceColor=grey] - Color to use for drawing a line at interesting\r\n * tile faces. If set to null, interesting tile faces will not be drawn.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar RenderDebug = function (graphics, styleConfig, layer)\r\n{\r\n    if (styleConfig === undefined) { styleConfig = {}; }\r\n\r\n    // Default colors without needlessly creating Color objects\r\n    var tileColor = (styleConfig.tileColor !== undefined) ? styleConfig.tileColor : defaultTileColor;\r\n    var collidingTileColor = (styleConfig.collidingTileColor !== undefined) ? styleConfig.collidingTileColor : defaultCollidingTileColor;\r\n    var faceColor = (styleConfig.faceColor !== undefined) ? styleConfig.faceColor : defaultFaceColor;\r\n\r\n    var tiles = GetTilesWithin(0, 0, layer.width, layer.height, null, layer);\r\n\r\n    graphics.translateCanvas(layer.tilemapLayer.x, layer.tilemapLayer.y);\r\n    graphics.scaleCanvas(layer.tilemapLayer.scaleX, layer.tilemapLayer.scaleY);\r\n\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n\r\n        var tw = tile.width;\r\n        var th = tile.height;\r\n        var x = tile.pixelX;\r\n        var y = tile.pixelY;\r\n\r\n        var color = tile.collides ? collidingTileColor : tileColor;\r\n\r\n        if (color !== null)\r\n        {\r\n            graphics.fillStyle(color.color, color.alpha / 255);\r\n            graphics.fillRect(x, y, tw, th);\r\n        }\r\n\r\n        // Inset the face line to prevent neighboring tile's lines from overlapping\r\n        x += 1;\r\n        y += 1;\r\n        tw -= 2;\r\n        th -= 2;\r\n\r\n        if (faceColor !== null)\r\n        {\r\n            graphics.lineStyle(1, faceColor.color, faceColor.alpha / 255);\r\n\r\n            if (tile.faceTop) { graphics.lineBetween(x, y, x + tw, y); }\r\n            if (tile.faceRight) { graphics.lineBetween(x + tw, y, x + tw, y + th); }\r\n            if (tile.faceBottom) { graphics.lineBetween(x, y + th, x + tw, y + th); }\r\n            if (tile.faceLeft) { graphics.lineBetween(x, y, x, y + th); }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = RenderDebug;\r\n"]},"metadata":{},"sourceType":"script"}