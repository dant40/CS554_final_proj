{"ast":null,"code":"/**\r\n* @author       Richard Davey <rich@photonstorm.com>\r\n* @copyright    2020 Photon Storm Ltd.\r\n* @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n*/\nvar BasePlugin = require('./BasePlugin');\n\nvar Class = require('../utils/Class');\n\nvar SceneEvents = require('../scene/events');\n/**\r\n * @classdesc\r\n * A Scene Level Plugin is installed into every Scene and belongs to that Scene.\r\n * It can listen for Scene events and respond to them.\r\n * It can map itself to a Scene property, or into the Scene Systems, or both.\r\n *\r\n * @class ScenePlugin\r\n * @memberof Phaser.Plugins\r\n * @extends Phaser.Plugins.BasePlugin\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that has installed this plugin.\r\n * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the Plugin Manager.\r\n */\n\n\nvar ScenePlugin = new Class({\n  Extends: BasePlugin,\n  initialize: function ScenePlugin(scene, pluginManager) {\n    BasePlugin.call(this, pluginManager);\n    /**\r\n     * A reference to the Scene that has installed this plugin.\r\n     * Only set if it's a Scene Plugin, otherwise `null`.\r\n     * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n     * You can use it during the `boot` method.\r\n     *\r\n     * @name Phaser.Plugins.ScenePlugin#scene\r\n     * @type {?Phaser.Scene}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene Systems of the Scene that has installed this plugin.\r\n     * Only set if it's a Scene Plugin, otherwise `null`.\r\n     * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n     * You can use it during the `boot` method.\r\n     *\r\n     * @name Phaser.Plugins.ScenePlugin#systems\r\n     * @type {?Phaser.Scenes.Systems}\r\n     * @protected\r\n     * @since 3.8.0\r\n     */\n\n    this.systems = scene.sys;\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n  },\n\n  /**\r\n   * This method is called when the Scene boots. It is only ever called once.\r\n   *\r\n   * By this point the plugin properties `scene` and `systems` will have already been set.\r\n   *\r\n   * In here you can listen for {@link Phaser.Scenes.Events Scene events} and set-up whatever you need for this plugin to run.\r\n   * Here are the Scene events you can listen to:\r\n   *\r\n   * - start\r\n   * - ready\r\n   * - preupdate\r\n   * - update\r\n   * - postupdate\r\n   * - resize\r\n   * - pause\r\n   * - resume\r\n   * - sleep\r\n   * - wake\r\n   * - transitioninit\r\n   * - transitionstart\r\n   * - transitioncomplete\r\n   * - transitionout\r\n   * - shutdown\r\n   * - destroy\r\n   *\r\n   * At the very least you should offer a destroy handler for when the Scene closes down, i.e:\r\n   *\r\n   * ```javascript\r\n   * var eventEmitter = this.systems.events;\r\n   * eventEmitter.once('destroy', this.sceneDestroy, this);\r\n   * ```\r\n   *\r\n   * @method Phaser.Plugins.ScenePlugin#boot\r\n   * @since 3.8.0\r\n   */\n  boot: function () {},\n\n  /**\r\n   * Game instance has been destroyed.\r\n   * \r\n   * You must release everything in here, all references, all objects, free it all up.\r\n   *\r\n   * @method Phaser.Plugins.ScenePlugin#destroy\r\n   * @since 3.8.0\r\n   */\n  destroy: function () {\n    this.pluginManager = null;\n    this.game = null;\n    this.scene = null;\n    this.systems = null;\n  }\n});\nmodule.exports = ScenePlugin;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/plugins/ScenePlugin.js"],"names":["BasePlugin","require","Class","SceneEvents","ScenePlugin","Extends","initialize","scene","pluginManager","call","systems","sys","events","once","BOOT","boot","destroy","game","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,iBAAD,CAAzB;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIG,WAAW,GAAG,IAAIF,KAAJ,CAAU;AAExBG,EAAAA,OAAO,EAAEL,UAFe;AAIxBM,EAAAA,UAAU,EAEV,SAASF,WAAT,CAAsBG,KAAtB,EAA6BC,aAA7B,EACA;AACIR,IAAAA,UAAU,CAACS,IAAX,CAAgB,IAAhB,EAAsBD,aAAtB;AAEA;;;;;;;;;;;;AAWA,SAAKD,KAAL,GAAaA,KAAb;AAEA;;;;;;;;;;;;AAWA,SAAKG,OAAL,GAAeH,KAAK,CAACI,GAArB;AAEAJ,IAAAA,KAAK,CAACI,GAAN,CAAUC,MAAV,CAAiBC,IAAjB,CAAsBV,WAAW,CAACW,IAAlC,EAAwC,KAAKC,IAA7C,EAAmD,IAAnD;AACH,GArCuB;;AAuCxB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCAA,EAAAA,IAAI,EAAE,YACN,CACC,CA5EuB;;AA8ExB;;;;;;;;AAQAC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKR,aAAL,GAAqB,IAArB;AACA,SAAKS,IAAL,GAAY,IAAZ;AACA,SAAKV,KAAL,GAAa,IAAb;AACA,SAAKG,OAAL,GAAe,IAAf;AACH;AA5FuB,CAAV,CAAlB;AAgGAQ,MAAM,CAACC,OAAP,GAAiBf,WAAjB","sourcesContent":["/**\r\n* @author       Richard Davey <rich@photonstorm.com>\r\n* @copyright    2020 Photon Storm Ltd.\r\n* @license      {@link https://github.com/photonstorm/phaser3-plugin-template/blob/master/LICENSE|MIT License}\r\n*/\r\n\r\nvar BasePlugin = require('./BasePlugin');\r\nvar Class = require('../utils/Class');\r\nvar SceneEvents = require('../scene/events');\r\n\r\n/**\r\n * @classdesc\r\n * A Scene Level Plugin is installed into every Scene and belongs to that Scene.\r\n * It can listen for Scene events and respond to them.\r\n * It can map itself to a Scene property, or into the Scene Systems, or both.\r\n *\r\n * @class ScenePlugin\r\n * @memberof Phaser.Plugins\r\n * @extends Phaser.Plugins.BasePlugin\r\n * @constructor\r\n * @since 3.8.0\r\n *\r\n * @param {Phaser.Scene} scene - A reference to the Scene that has installed this plugin.\r\n * @param {Phaser.Plugins.PluginManager} pluginManager - A reference to the Plugin Manager.\r\n */\r\nvar ScenePlugin = new Class({\r\n\r\n    Extends: BasePlugin,\r\n\r\n    initialize:\r\n\r\n    function ScenePlugin (scene, pluginManager)\r\n    {\r\n        BasePlugin.call(this, pluginManager);\r\n\r\n        /**\r\n         * A reference to the Scene that has installed this plugin.\r\n         * Only set if it's a Scene Plugin, otherwise `null`.\r\n         * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n         * You can use it during the `boot` method.\r\n         *\r\n         * @name Phaser.Plugins.ScenePlugin#scene\r\n         * @type {?Phaser.Scene}\r\n         * @protected\r\n         * @since 3.8.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems of the Scene that has installed this plugin.\r\n         * Only set if it's a Scene Plugin, otherwise `null`.\r\n         * This property is only set when the plugin is instantiated and added to the Scene, not before.\r\n         * You can use it during the `boot` method.\r\n         *\r\n         * @name Phaser.Plugins.ScenePlugin#systems\r\n         * @type {?Phaser.Scenes.Systems}\r\n         * @protected\r\n         * @since 3.8.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called when the Scene boots. It is only ever called once.\r\n     *\r\n     * By this point the plugin properties `scene` and `systems` will have already been set.\r\n     *\r\n     * In here you can listen for {@link Phaser.Scenes.Events Scene events} and set-up whatever you need for this plugin to run.\r\n     * Here are the Scene events you can listen to:\r\n     *\r\n     * - start\r\n     * - ready\r\n     * - preupdate\r\n     * - update\r\n     * - postupdate\r\n     * - resize\r\n     * - pause\r\n     * - resume\r\n     * - sleep\r\n     * - wake\r\n     * - transitioninit\r\n     * - transitionstart\r\n     * - transitioncomplete\r\n     * - transitionout\r\n     * - shutdown\r\n     * - destroy\r\n     *\r\n     * At the very least you should offer a destroy handler for when the Scene closes down, i.e:\r\n     *\r\n     * ```javascript\r\n     * var eventEmitter = this.systems.events;\r\n     * eventEmitter.once('destroy', this.sceneDestroy, this);\r\n     * ```\r\n     *\r\n     * @method Phaser.Plugins.ScenePlugin#boot\r\n     * @since 3.8.0\r\n     */\r\n    boot: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * Game instance has been destroyed.\r\n     * \r\n     * You must release everything in here, all references, all objects, free it all up.\r\n     *\r\n     * @method Phaser.Plugins.ScenePlugin#destroy\r\n     * @since 3.8.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.pluginManager = null;\r\n        this.game = null;\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ScenePlugin;\r\n"]},"metadata":{},"sourceType":"script"}