{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Pad = require('../../string/Pad');\n\nvar CheckMatrix = require('./CheckMatrix');\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.MatrixToString\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix]\r\n *\r\n * @param {T[][]} [matrix] - A 2-dimensional array.\r\n *\r\n * @return {string} A string representing the matrix.\r\n */\n\n\nvar MatrixToString = function (matrix) {\n  var str = '';\n\n  if (!CheckMatrix(matrix)) {\n    return str;\n  }\n\n  for (var r = 0; r < matrix.length; r++) {\n    for (var c = 0; c < matrix[r].length; c++) {\n      var cell = matrix[r][c].toString();\n\n      if (cell !== 'undefined') {\n        str += Pad(cell, 2);\n      } else {\n        str += '?';\n      }\n\n      if (c < matrix[r].length - 1) {\n        str += ' |';\n      }\n    }\n\n    if (r < matrix.length - 1) {\n      str += '\\n';\n\n      for (var i = 0; i < matrix[r].length; i++) {\n        str += '---';\n\n        if (i < matrix[r].length - 1) {\n          str += '+';\n        }\n      }\n\n      str += '\\n';\n    }\n  }\n\n  return str;\n};\n\nmodule.exports = MatrixToString;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/matrix/MatrixToString.js"],"names":["Pad","require","CheckMatrix","MatrixToString","matrix","str","r","length","c","cell","toString","i","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,cAAc,GAAG,UAAUC,MAAV,EACrB;AACI,MAAIC,GAAG,GAAG,EAAV;;AAEA,MAAI,CAACH,WAAW,CAACE,MAAD,CAAhB,EACA;AACI,WAAOC,GAAP;AACH;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACI,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACE,CAAD,CAAN,CAAUC,MAA9B,EAAsCC,CAAC,EAAvC,EACA;AACI,UAAIC,IAAI,GAAGL,MAAM,CAACE,CAAD,CAAN,CAAUE,CAAV,EAAaE,QAAb,EAAX;;AAEA,UAAID,IAAI,KAAK,WAAb,EACA;AACIJ,QAAAA,GAAG,IAAIL,GAAG,CAACS,IAAD,EAAO,CAAP,CAAV;AACH,OAHD,MAKA;AACIJ,QAAAA,GAAG,IAAI,GAAP;AACH;;AAED,UAAIG,CAAC,GAAGJ,MAAM,CAACE,CAAD,CAAN,CAAUC,MAAV,GAAmB,CAA3B,EACA;AACIF,QAAAA,GAAG,IAAI,IAAP;AACH;AACJ;;AAED,QAAIC,CAAC,GAAGF,MAAM,CAACG,MAAP,GAAgB,CAAxB,EACA;AACIF,MAAAA,GAAG,IAAI,IAAP;;AAEA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACE,CAAD,CAAN,CAAUC,MAA9B,EAAsCI,CAAC,EAAvC,EACA;AACIN,QAAAA,GAAG,IAAI,KAAP;;AAEA,YAAIM,CAAC,GAAGP,MAAM,CAACE,CAAD,CAAN,CAAUC,MAAV,GAAmB,CAA3B,EACA;AACIF,UAAAA,GAAG,IAAI,GAAP;AACH;AACJ;;AAEDA,MAAAA,GAAG,IAAI,IAAP;AACH;AAEJ;;AAED,SAAOA,GAAP;AACH,CAlDD;;AAoDAO,MAAM,CAACC,OAAP,GAAiBV,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Pad = require('../../string/Pad');\r\nvar CheckMatrix = require('./CheckMatrix');\r\n\r\n/**\r\n * Generates a string (which you can pass to console.log) from the given Array Matrix.\r\n *\r\n * @function Phaser.Utils.Array.Matrix.MatrixToString\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n * @genericUse {T[][]} - [matrix]\r\n *\r\n * @param {T[][]} [matrix] - A 2-dimensional array.\r\n *\r\n * @return {string} A string representing the matrix.\r\n */\r\nvar MatrixToString = function (matrix)\r\n{\r\n    var str = '';\r\n\r\n    if (!CheckMatrix(matrix))\r\n    {\r\n        return str;\r\n    }\r\n\r\n    for (var r = 0; r < matrix.length; r++)\r\n    {\r\n        for (var c = 0; c < matrix[r].length; c++)\r\n        {\r\n            var cell = matrix[r][c].toString();\r\n\r\n            if (cell !== 'undefined')\r\n            {\r\n                str += Pad(cell, 2);\r\n            }\r\n            else\r\n            {\r\n                str += '?';\r\n            }\r\n\r\n            if (c < matrix[r].length - 1)\r\n            {\r\n                str += ' |';\r\n            }\r\n        }\r\n\r\n        if (r < matrix.length - 1)\r\n        {\r\n            str += '\\n';\r\n\r\n            for (var i = 0; i < matrix[r].length; i++)\r\n            {\r\n                str += '---';\r\n\r\n                if (i < matrix[r].length - 1)\r\n                {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            str += '\\n';\r\n        }\r\n\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\nmodule.exports = MatrixToString;\r\n"]},"metadata":{},"sourceType":"script"}