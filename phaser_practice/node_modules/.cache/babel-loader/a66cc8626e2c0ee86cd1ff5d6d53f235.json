{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Compares the `x`, `y`, `width` and `height` properties of the two given Ellipses.\r\n * Returns `true` if they all match, otherwise returns `false`.\r\n *\r\n * @function Phaser.Geom.Ellipse.Equals\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The first Ellipse to compare.\r\n * @param {Phaser.Geom.Ellipse} toCompare - The second Ellipse to compare.\r\n *\r\n * @return {boolean} `true` if the two Ellipse equal each other, otherwise `false`.\r\n */\nvar Equals = function (ellipse, toCompare) {\n  return ellipse.x === toCompare.x && ellipse.y === toCompare.y && ellipse.width === toCompare.width && ellipse.height === toCompare.height;\n};\n\nmodule.exports = Equals;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/ellipse/Equals.js"],"names":["Equals","ellipse","toCompare","x","y","width","height","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,MAAM,GAAG,UAAUC,OAAV,EAAmBC,SAAnB,EACb;AACI,SACID,OAAO,CAACE,CAAR,KAAcD,SAAS,CAACC,CAAxB,IACAF,OAAO,CAACG,CAAR,KAAcF,SAAS,CAACE,CADxB,IAEAH,OAAO,CAACI,KAAR,KAAkBH,SAAS,CAACG,KAF5B,IAGAJ,OAAO,CAACK,MAAR,KAAmBJ,SAAS,CAACI,MAJjC;AAMH,CARD;;AAUAC,MAAM,CAACC,OAAP,GAAiBR,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Compares the `x`, `y`, `width` and `height` properties of the two given Ellipses.\r\n * Returns `true` if they all match, otherwise returns `false`.\r\n *\r\n * @function Phaser.Geom.Ellipse.Equals\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Ellipse} ellipse - The first Ellipse to compare.\r\n * @param {Phaser.Geom.Ellipse} toCompare - The second Ellipse to compare.\r\n *\r\n * @return {boolean} `true` if the two Ellipse equal each other, otherwise `false`.\r\n */\r\nvar Equals = function (ellipse, toCompare)\r\n{\r\n    return (\r\n        ellipse.x === toCompare.x &&\r\n        ellipse.y === toCompare.y &&\r\n        ellipse.width === toCompare.width &&\r\n        ellipse.height === toCompare.height\r\n    );\r\n};\r\n\r\nmodule.exports = Equals;\r\n"]},"metadata":{},"sourceType":"script"}