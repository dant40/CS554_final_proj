{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Body = require('../lib/body/Body');\n/**\r\n * Contains methods for changing the velocity of a Matter Body. Should be used as a mixin and not called directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Velocity\r\n * @since 3.0.0\r\n */\n\n\nvar Velocity = {\n  /**\r\n   * Sets the angular velocity of the body instantly.\r\n   * Position, angle, force etc. are unchanged.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Velocity#setAngularVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The angular velocity.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setAngularVelocity: function (value) {\n    Body.setAngularVelocity(this.body, value);\n    return this;\n  },\n\n  /**\r\n   * Sets the horizontal velocity of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Velocity#setVelocityX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity value.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setVelocityX: function (x) {\n    this._tempVec2.set(x, this.body.velocity.y);\n\n    Body.setVelocity(this.body, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Sets vertical velocity of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Velocity#setVelocityY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} y - The vertical velocity value.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setVelocityY: function (y) {\n    this._tempVec2.set(this.body.velocity.x, y);\n\n    Body.setVelocity(this.body, this._tempVec2);\n    return this;\n  },\n\n  /**\r\n   * Sets both the horizontal and vertical velocity of the physics body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Velocity#setVelocity\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal velocity value.\r\n   * @param {number} [y=x] - The vertical velocity value, it can be either positive or negative. If not given, it will be the same as the `x` value.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setVelocity: function (x, y) {\n    this._tempVec2.set(x, y);\n\n    Body.setVelocity(this.body, this._tempVec2);\n    return this;\n  }\n};\nmodule.exports = Velocity;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/components/Velocity.js"],"names":["Body","require","Velocity","setAngularVelocity","value","body","setVelocityX","x","_tempVec2","set","velocity","y","setVelocity","setVelocityY","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAlB;AAEA;;;;;;;;AAMA,IAAIC,QAAQ,GAAG;AAEX;;;;;;;;;;;AAWAC,EAAAA,kBAAkB,EAAE,UAAUC,KAAV,EACpB;AACIJ,IAAAA,IAAI,CAACG,kBAAL,CAAwB,KAAKE,IAA7B,EAAmCD,KAAnC;AAEA,WAAO,IAAP;AACH,GAlBU;;AAoBX;;;;;;;;;;AAUAE,EAAAA,YAAY,EAAE,UAAUC,CAAV,EACd;AACI,SAAKC,SAAL,CAAeC,GAAf,CAAmBF,CAAnB,EAAsB,KAAKF,IAAL,CAAUK,QAAV,CAAmBC,CAAzC;;AAEAX,IAAAA,IAAI,CAACY,WAAL,CAAiB,KAAKP,IAAtB,EAA4B,KAAKG,SAAjC;AAEA,WAAO,IAAP;AACH,GArCU;;AAuCX;;;;;;;;;;AAUAK,EAAAA,YAAY,EAAE,UAAUF,CAAV,EACd;AACI,SAAKH,SAAL,CAAeC,GAAf,CAAmB,KAAKJ,IAAL,CAAUK,QAAV,CAAmBH,CAAtC,EAAyCI,CAAzC;;AAEAX,IAAAA,IAAI,CAACY,WAAL,CAAiB,KAAKP,IAAtB,EAA4B,KAAKG,SAAjC;AAEA,WAAO,IAAP;AACH,GAxDU;;AA0DX;;;;;;;;;;;AAWAI,EAAAA,WAAW,EAAE,UAAUL,CAAV,EAAaI,CAAb,EACb;AACI,SAAKH,SAAL,CAAeC,GAAf,CAAmBF,CAAnB,EAAsBI,CAAtB;;AAEAX,IAAAA,IAAI,CAACY,WAAL,CAAiB,KAAKP,IAAtB,EAA4B,KAAKG,SAAjC;AAEA,WAAO,IAAP;AACH;AA5EU,CAAf;AAgFAM,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\n\r\n/**\r\n * Contains methods for changing the velocity of a Matter Body. Should be used as a mixin and not called directly.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Velocity\r\n * @since 3.0.0\r\n */\r\nvar Velocity = {\r\n\r\n    /**\r\n     * Sets the angular velocity of the body instantly.\r\n     * Position, angle, force etc. are unchanged.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Velocity#setAngularVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The angular velocity.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setAngularVelocity: function (value)\r\n    {\r\n        Body.setAngularVelocity(this.body, value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the horizontal velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Velocity#setVelocityX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setVelocityX: function (x)\r\n    {\r\n        this._tempVec2.set(x, this.body.velocity.y);\r\n\r\n        Body.setVelocity(this.body, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets vertical velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Velocity#setVelocityY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} y - The vertical velocity value.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setVelocityY: function (y)\r\n    {\r\n        this._tempVec2.set(this.body.velocity.x, y);\r\n\r\n        Body.setVelocity(this.body, this._tempVec2);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets both the horizontal and vertical velocity of the physics body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Velocity#setVelocity\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal velocity value.\r\n     * @param {number} [y=x] - The vertical velocity value, it can be either positive or negative. If not given, it will be the same as the `x` value.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setVelocity: function (x, y)\r\n    {\r\n        this._tempVec2.set(x, y);\r\n\r\n        Body.setVelocity(this.body, this._tempVec2);\r\n\r\n        return this;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Velocity;\r\n"]},"metadata":{},"sourceType":"script"}