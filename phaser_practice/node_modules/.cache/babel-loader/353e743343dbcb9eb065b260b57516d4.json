{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Given a File and a baseURL value this returns the URL the File will use to download from.\r\n *\r\n * @function Phaser.Loader.GetURL\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File object.\r\n * @param {string} baseURL - A default base URL.\r\n *\r\n * @return {string} The URL the File will use.\r\n */\nvar GetURL = function (file, baseURL) {\n  if (!file.url) {\n    return false;\n  }\n\n  if (file.url.match(/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/)) {\n    return file.url;\n  } else {\n    return baseURL + file.url;\n  }\n};\n\nmodule.exports = GetURL;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/GetURL.js"],"names":["GetURL","file","baseURL","url","match","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;AAWA,IAAIA,MAAM,GAAG,UAAUC,IAAV,EAAgBC,OAAhB,EACb;AACI,MAAI,CAACD,IAAI,CAACE,GAAV,EACA;AACI,WAAO,KAAP;AACH;;AAED,MAAIF,IAAI,CAACE,GAAL,CAASC,KAAT,CAAe,4CAAf,CAAJ,EACA;AACI,WAAOH,IAAI,CAACE,GAAZ;AACH,GAHD,MAKA;AACI,WAAOD,OAAO,GAAGD,IAAI,CAACE,GAAtB;AACH;AACJ,CAfD;;AAiBAE,MAAM,CAACC,OAAP,GAAiBN,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Given a File and a baseURL value this returns the URL the File will use to download from.\r\n *\r\n * @function Phaser.Loader.GetURL\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.File} file - The File object.\r\n * @param {string} baseURL - A default base URL.\r\n *\r\n * @return {string} The URL the File will use.\r\n */\r\nvar GetURL = function (file, baseURL)\r\n{\r\n    if (!file.url)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    if (file.url.match(/^(?:blob:|data:|http:\\/\\/|https:\\/\\/|\\/\\/)/))\r\n    {\r\n        return file.url;\r\n    }\r\n    else\r\n    {\r\n        return baseURL + file.url;\r\n    }\r\n};\r\n\r\nmodule.exports = GetURL;\r\n"]},"metadata":{},"sourceType":"script"}