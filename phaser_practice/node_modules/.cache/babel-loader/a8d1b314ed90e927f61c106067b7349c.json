{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Set up the trace-result\r\n * var res = {\r\n *     collision: {x: false, y: false, slope: false},\r\n *     pos: {x: x, y: y},\r\n *     tile: {x: 0, y: 0}\r\n * };\r\n *\r\n * @function Phaser.Physics.Impact.UpdateMotion\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n * @param {object} res - [description]\r\n */\nvar UpdateMotion = function (body, res) {\n  body.standing = false; //  Y\n\n  if (res.collision.y) {\n    if (body.bounciness > 0 && Math.abs(body.vel.y) > body.minBounceVelocity) {\n      body.vel.y *= -body.bounciness;\n    } else {\n      if (body.vel.y > 0) {\n        body.standing = true;\n      }\n\n      body.vel.y = 0;\n    }\n  } //  X\n\n\n  if (res.collision.x) {\n    if (body.bounciness > 0 && Math.abs(body.vel.x) > body.minBounceVelocity) {\n      body.vel.x *= -body.bounciness;\n    } else {\n      body.vel.x = 0;\n    }\n  } //  SLOPE\n\n\n  if (res.collision.slope) {\n    var s = res.collision.slope;\n\n    if (body.bounciness > 0) {\n      var proj = body.vel.x * s.nx + body.vel.y * s.ny;\n      body.vel.x = (body.vel.x - s.nx * proj * 2) * body.bounciness;\n      body.vel.y = (body.vel.y - s.ny * proj * 2) * body.bounciness;\n    } else {\n      var lengthSquared = s.x * s.x + s.y * s.y;\n      var dot = (body.vel.x * s.x + body.vel.y * s.y) / lengthSquared;\n      body.vel.x = s.x * dot;\n      body.vel.y = s.y * dot;\n      var angle = Math.atan2(s.x, s.y);\n\n      if (angle > body.slopeStanding.min && angle < body.slopeStanding.max) {\n        body.standing = true;\n      }\n    }\n  }\n\n  body.pos.x = res.pos.x;\n  body.pos.y = res.pos.y;\n};\n\nmodule.exports = UpdateMotion;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/UpdateMotion.js"],"names":["UpdateMotion","body","res","standing","collision","y","bounciness","Math","abs","vel","minBounceVelocity","x","slope","s","proj","nx","ny","lengthSquared","dot","angle","atan2","slopeStanding","min","max","pos","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Set up the trace-result\r\n * var res = {\r\n *     collision: {x: false, y: false, slope: false},\r\n *     pos: {x: x, y: y},\r\n *     tile: {x: 0, y: 0}\r\n * };\r\n *\r\n * @function Phaser.Physics.Impact.UpdateMotion\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.Body} body - [description]\r\n * @param {object} res - [description]\r\n */\r\nvar UpdateMotion = function (body, res)\r\n{\r\n    body.standing = false;\r\n\r\n    //  Y\r\n    if (res.collision.y)\r\n    {\r\n        if (body.bounciness > 0 && Math.abs(body.vel.y) > body.minBounceVelocity)\r\n        {\r\n            body.vel.y *= -body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            if (body.vel.y > 0)\r\n            {\r\n                body.standing = true;\r\n            }\r\n\r\n            body.vel.y = 0;\r\n        }\r\n    }\r\n\r\n    //  X\r\n    if (res.collision.x)\r\n    {\r\n        if (body.bounciness > 0 && Math.abs(body.vel.x) > body.minBounceVelocity)\r\n        {\r\n            body.vel.x *= -body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            body.vel.x = 0;\r\n        }\r\n    }\r\n\r\n    //  SLOPE\r\n    if (res.collision.slope)\r\n    {\r\n        var s = res.collision.slope;\r\n       \r\n        if (body.bounciness > 0)\r\n        {\r\n            var proj = body.vel.x * s.nx + body.vel.y * s.ny;\r\n\r\n            body.vel.x = (body.vel.x - s.nx * proj * 2) * body.bounciness;\r\n            body.vel.y = (body.vel.y - s.ny * proj * 2) * body.bounciness;\r\n        }\r\n        else\r\n        {\r\n            var lengthSquared = s.x * s.x + s.y * s.y;\r\n            var dot = (body.vel.x * s.x + body.vel.y * s.y) / lengthSquared;\r\n            \r\n            body.vel.x = s.x * dot;\r\n            body.vel.y = s.y * dot;\r\n            \r\n            var angle = Math.atan2(s.x, s.y);\r\n\r\n            if (angle > body.slopeStanding.min && angle < body.slopeStanding.max)\r\n            {\r\n                body.standing = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    body.pos.x = res.pos.x;\r\n    body.pos.y = res.pos.y;\r\n};\r\n\r\nmodule.exports = UpdateMotion;\r\n"]},"metadata":{},"sourceType":"script"}