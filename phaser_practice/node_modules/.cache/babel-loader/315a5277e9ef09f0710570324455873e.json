{"ast":null,"code":"/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\r\n * Converts an ArrayBuffer into a base64 string.\r\n * \r\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\r\n * \r\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\r\n *\r\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\r\n * @since 3.18.0\r\n * \r\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\r\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\r\n * \r\n * @return {string} The base64 encoded Array Buffer.\r\n */\n\nvar ArrayBufferToBase64 = function (arrayBuffer, mediaType) {\n  var bytes = new Uint8Array(arrayBuffer);\n  var len = bytes.length;\n  var base64 = mediaType ? 'data:' + mediaType + ';base64,' : '';\n\n  for (var i = 0; i < len; i += 3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n    base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n\n  if (len % 3 === 2) {\n    base64 = base64.substring(0, base64.length - 1) + '=';\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + '==';\n  }\n\n  return base64;\n};\n\nmodule.exports = ArrayBufferToBase64;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/base64/ArrayBufferToBase64.js"],"names":["chars","ArrayBufferToBase64","arrayBuffer","mediaType","bytes","Uint8Array","len","length","base64","i","substring","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,KAAK,GAAG,kEAAZ;AAEA;;;;;;;;;;;;;;;;AAeA,IAAIC,mBAAmB,GAAG,UAAUC,WAAV,EAAuBC,SAAvB,EAC1B;AACI,MAAIC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,WAAf,CAAZ;AACA,MAAII,GAAG,GAAGF,KAAK,CAACG,MAAhB;AAEA,MAAIC,MAAM,GAAIL,SAAD,GAAc,UAAUA,SAAV,GAAsB,UAApC,GAAiD,EAA9D;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,IAAI,CAA9B,EACA;AACID,IAAAA,MAAM,IAAIR,KAAK,CAACI,KAAK,CAACK,CAAD,CAAL,IAAY,CAAb,CAAf;AACAD,IAAAA,MAAM,IAAIR,KAAK,CAAE,CAACI,KAAK,CAACK,CAAD,CAAL,GAAW,CAAZ,KAAkB,CAAnB,GAAyBL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,IAAgB,CAA1C,CAAf;AACAD,IAAAA,MAAM,IAAIR,KAAK,CAAE,CAACI,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAe,EAAhB,KAAuB,CAAxB,GAA8BL,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,IAAgB,CAA/C,CAAf;AACAD,IAAAA,MAAM,IAAIR,KAAK,CAACI,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAe,EAAhB,CAAf;AACH;;AAED,MAAKH,GAAG,GAAG,CAAP,KAAc,CAAlB,EACA;AACIE,IAAAA,MAAM,GAAGA,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBF,MAAM,CAACD,MAAP,GAAgB,CAApC,IAAyC,GAAlD;AACH,GAHD,MAIK,IAAID,GAAG,GAAG,CAAN,KAAY,CAAhB,EACL;AACIE,IAAAA,MAAM,GAAGA,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBF,MAAM,CAACD,MAAP,GAAgB,CAApC,IAAyC,IAAlD;AACH;;AAED,SAAOC,MAAP;AACH,CAzBD;;AA2BAG,MAAM,CAACC,OAAP,GAAiBX,mBAAjB","sourcesContent":["/**\r\n * @author       Niklas von Hertzen (https://github.com/niklasvh/base64-arraybuffer)\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\r\n\r\n/**\r\n * Converts an ArrayBuffer into a base64 string.\r\n * \r\n * The resulting string can optionally be a data uri if the `mediaType` argument is provided.\r\n * \r\n * See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs for more details.\r\n *\r\n * @function Phaser.Utils.Base64.ArrayBufferToBase64\r\n * @since 3.18.0\r\n * \r\n * @param {ArrayBuffer} arrayBuffer - The Array Buffer to encode.\r\n * @param {string} [mediaType] - An optional media type, i.e. `audio/ogg` or `image/jpeg`. If included the resulting string will be a data URI.\r\n * \r\n * @return {string} The base64 encoded Array Buffer.\r\n */\r\nvar ArrayBufferToBase64 = function (arrayBuffer, mediaType)\r\n{\r\n    var bytes = new Uint8Array(arrayBuffer);\r\n    var len = bytes.length;\r\n\r\n    var base64 = (mediaType) ? 'data:' + mediaType + ';base64,' : '';\r\n\r\n    for (var i = 0; i < len; i += 3)\r\n    {\r\n        base64 += chars[bytes[i] >> 2];\r\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\r\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\r\n        base64 += chars[bytes[i + 2] & 63];\r\n    }\r\n\r\n    if ((len % 3) === 2)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 1) + '=';\r\n    }\r\n    else if (len % 3 === 1)\r\n    {\r\n        base64 = base64.substring(0, base64.length - 2) + '==';\r\n    }\r\n  \r\n    return base64;\r\n};\r\n\r\nmodule.exports = ArrayBufferToBase64;\r\n"]},"metadata":{},"sourceType":"script"}