{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar EarCut = require('../polygon/Earcut');\n\nvar Triangle = require('./Triangle');\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Triangle.BuildFromPolygon\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Triangle[]} O - [out,$return]\r\n *\r\n * @param {array} data - A flat array of vertex coordinates like [x0,y0, x1,y1, x2,y2, ...]\r\n * @param {array} [holes=null] - An array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5–7 and another with 8–11).\r\n * @param {number} [scaleX=1] - [description]\r\n * @param {number} [scaleY=1] - [description]\r\n * @param {(array|Phaser.Geom.Triangle[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Triangle[])} [description]\r\n */\n\n\nvar BuildFromPolygon = function (data, holes, scaleX, scaleY, out) {\n  if (holes === undefined) {\n    holes = null;\n  }\n\n  if (scaleX === undefined) {\n    scaleX = 1;\n  }\n\n  if (scaleY === undefined) {\n    scaleY = 1;\n  }\n\n  if (out === undefined) {\n    out = [];\n  }\n\n  var tris = EarCut(data, holes);\n  var a;\n  var b;\n  var c;\n  var x1;\n  var y1;\n  var x2;\n  var y2;\n  var x3;\n  var y3;\n\n  for (var i = 0; i < tris.length; i += 3) {\n    a = tris[i];\n    b = tris[i + 1];\n    c = tris[i + 2];\n    x1 = data[a * 2] * scaleX;\n    y1 = data[a * 2 + 1] * scaleY;\n    x2 = data[b * 2] * scaleX;\n    y2 = data[b * 2 + 1] * scaleY;\n    x3 = data[c * 2] * scaleX;\n    y3 = data[c * 2 + 1] * scaleY;\n    out.push(new Triangle(x1, y1, x2, y2, x3, y3));\n  }\n\n  return out;\n};\n\nmodule.exports = BuildFromPolygon;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/BuildFromPolygon.js"],"names":["EarCut","require","Triangle","BuildFromPolygon","data","holes","scaleX","scaleY","out","undefined","tris","a","b","c","x1","y1","x2","y2","x3","y3","i","length","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIE,gBAAgB,GAAG,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,MAA/B,EAAuCC,GAAvC,EACvB;AACI,MAAIH,KAAK,KAAKI,SAAd,EAAyB;AAAEJ,IAAAA,KAAK,GAAG,IAAR;AAAe;;AAC1C,MAAIC,MAAM,KAAKG,SAAf,EAA0B;AAAEH,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACzC,MAAIC,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,CAAT;AAAa;;AACzC,MAAIC,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIE,IAAI,GAAGV,MAAM,CAACI,IAAD,EAAOC,KAAP,CAAjB;AAEA,MAAIM,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AAEA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AAEA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AAEA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EACA;AACIT,IAAAA,CAAC,GAAGD,IAAI,CAACU,CAAD,CAAR;AACAR,IAAAA,CAAC,GAAGF,IAAI,CAACU,CAAC,GAAG,CAAL,CAAR;AACAP,IAAAA,CAAC,GAAGH,IAAI,CAACU,CAAC,GAAG,CAAL,CAAR;AAEAN,IAAAA,EAAE,GAAGV,IAAI,CAACO,CAAC,GAAG,CAAL,CAAJ,GAAcL,MAAnB;AACAS,IAAAA,EAAE,GAAGX,IAAI,CAAEO,CAAC,GAAG,CAAL,GAAU,CAAX,CAAJ,GAAoBJ,MAAzB;AAEAS,IAAAA,EAAE,GAAGZ,IAAI,CAACQ,CAAC,GAAG,CAAL,CAAJ,GAAcN,MAAnB;AACAW,IAAAA,EAAE,GAAGb,IAAI,CAAEQ,CAAC,GAAG,CAAL,GAAU,CAAX,CAAJ,GAAoBL,MAAzB;AAEAW,IAAAA,EAAE,GAAGd,IAAI,CAACS,CAAC,GAAG,CAAL,CAAJ,GAAcP,MAAnB;AACAa,IAAAA,EAAE,GAAGf,IAAI,CAAES,CAAC,GAAG,CAAL,GAAU,CAAX,CAAJ,GAAoBN,MAAzB;AAEAC,IAAAA,GAAG,CAACc,IAAJ,CAAS,IAAIpB,QAAJ,CAAaY,EAAb,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,CAAT;AACH;;AAED,SAAOX,GAAP;AACH,CAzCD;;AA2CAe,MAAM,CAACC,OAAP,GAAiBrB,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar EarCut = require('../polygon/Earcut');\r\nvar Triangle = require('./Triangle');\r\n\r\n/**\r\n * [description]\r\n *\r\n * @function Phaser.Geom.Triangle.BuildFromPolygon\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Triangle[]} O - [out,$return]\r\n *\r\n * @param {array} data - A flat array of vertex coordinates like [x0,y0, x1,y1, x2,y2, ...]\r\n * @param {array} [holes=null] - An array of hole indices if any (e.g. [5, 8] for a 12-vertex input would mean one hole with vertices 5–7 and another with 8–11).\r\n * @param {number} [scaleX=1] - [description]\r\n * @param {number} [scaleY=1] - [description]\r\n * @param {(array|Phaser.Geom.Triangle[])} [out] - [description]\r\n *\r\n * @return {(array|Phaser.Geom.Triangle[])} [description]\r\n */\r\nvar BuildFromPolygon = function (data, holes, scaleX, scaleY, out)\r\n{\r\n    if (holes === undefined) { holes = null; }\r\n    if (scaleX === undefined) { scaleX = 1; }\r\n    if (scaleY === undefined) { scaleY = 1; }\r\n    if (out === undefined) { out = []; }\r\n\r\n    var tris = EarCut(data, holes);\r\n\r\n    var a;\r\n    var b;\r\n    var c;\r\n\r\n    var x1;\r\n    var y1;\r\n\r\n    var x2;\r\n    var y2;\r\n\r\n    var x3;\r\n    var y3;\r\n\r\n    for (var i = 0; i < tris.length; i += 3)\r\n    {\r\n        a = tris[i];\r\n        b = tris[i + 1];\r\n        c = tris[i + 2];\r\n\r\n        x1 = data[a * 2] * scaleX;\r\n        y1 = data[(a * 2) + 1] * scaleY;\r\n\r\n        x2 = data[b * 2] * scaleX;\r\n        y2 = data[(b * 2) + 1] * scaleY;\r\n\r\n        x3 = data[c * 2] * scaleX;\r\n        y3 = data[(c * 2) + 1] * scaleY;\r\n\r\n        out.push(new Triangle(x1, y1, x2, y2, x3, y3));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = BuildFromPolygon;\r\n"]},"metadata":{},"sourceType":"script"}