{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CatmullRom = require('../CatmullRom');\n/**\r\n * A Catmull-Rom interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.CatmullRom\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\n\n\nvar CatmullRomInterpolation = function (v, k) {\n  var m = v.length - 1;\n  var f = m * k;\n  var i = Math.floor(f);\n\n  if (v[0] === v[m]) {\n    if (k < 0) {\n      i = Math.floor(f = m * (1 + k));\n    }\n\n    return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\n  } else {\n    if (k < 0) {\n      return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\n    }\n\n    if (k > 1) {\n      return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\n    }\n\n    return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\n  }\n};\n\nmodule.exports = CatmullRomInterpolation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/interpolation/CatmullRomInterpolation.js"],"names":["CatmullRom","require","CatmullRomInterpolation","v","k","m","length","f","i","Math","floor","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;AAEA;;;;;;;;;;;;;AAWA,IAAIC,uBAAuB,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAC9B;AACI,MAAIC,CAAC,GAAGF,CAAC,CAACG,MAAF,GAAW,CAAnB;AACA,MAAIC,CAAC,GAAGF,CAAC,GAAGD,CAAZ;AACA,MAAII,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAX,CAAR;;AAEA,MAAIJ,CAAC,CAAC,CAAD,CAAD,KAASA,CAAC,CAACE,CAAD,CAAd,EACA;AACI,QAAID,CAAC,GAAG,CAAR,EACA;AACII,MAAAA,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGF,CAAC,IAAI,IAAID,CAAR,CAAhB,CAAJ;AACH;;AAED,WAAOJ,UAAU,CAACO,CAAC,GAAGC,CAAL,EAAQL,CAAC,CAAC,CAACK,CAAC,GAAG,CAAJ,GAAQH,CAAT,IAAcA,CAAf,CAAT,EAA4BF,CAAC,CAACK,CAAD,CAA7B,EAAkCL,CAAC,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUH,CAAX,CAAnC,EAAkDF,CAAC,CAAC,CAACK,CAAC,GAAG,CAAL,IAAUH,CAAX,CAAnD,CAAjB;AACH,GARD,MAUA;AACI,QAAID,CAAC,GAAG,CAAR,EACA;AACI,aAAOD,CAAC,CAAC,CAAD,CAAD,IAAQH,UAAU,CAAC,CAACO,CAAF,EAAKJ,CAAC,CAAC,CAAD,CAAN,EAAWA,CAAC,CAAC,CAAD,CAAZ,EAAiBA,CAAC,CAAC,CAAD,CAAlB,EAAuBA,CAAC,CAAC,CAAD,CAAxB,CAAV,GAAyCA,CAAC,CAAC,CAAD,CAAlD,CAAP;AACH;;AAED,QAAIC,CAAC,GAAG,CAAR,EACA;AACI,aAAOD,CAAC,CAACE,CAAD,CAAD,IAAQL,UAAU,CAACO,CAAC,GAAGF,CAAL,EAAQF,CAAC,CAACE,CAAD,CAAT,EAAcF,CAAC,CAACE,CAAD,CAAf,EAAoBF,CAAC,CAACE,CAAC,GAAG,CAAL,CAArB,EAA8BF,CAAC,CAACE,CAAC,GAAG,CAAL,CAA/B,CAAV,GAAoDF,CAAC,CAACE,CAAD,CAA7D,CAAP;AACH;;AAED,WAAOL,UAAU,CAACO,CAAC,GAAGC,CAAL,EAAQL,CAAC,CAACK,CAAC,GAAGA,CAAC,GAAG,CAAP,GAAW,CAAb,CAAT,EAA0BL,CAAC,CAACK,CAAD,CAA3B,EAAgCL,CAAC,CAACE,CAAC,GAAGG,CAAC,GAAG,CAAR,GAAYH,CAAZ,GAAgBG,CAAC,GAAG,CAArB,CAAjC,EAA0DL,CAAC,CAACE,CAAC,GAAGG,CAAC,GAAG,CAAR,GAAYH,CAAZ,GAAgBG,CAAC,GAAG,CAArB,CAA3D,CAAjB;AACH;AACJ,CA7BD;;AA+BAG,MAAM,CAACC,OAAP,GAAiBV,uBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CatmullRom = require('../CatmullRom');\r\n\r\n/**\r\n * A Catmull-Rom interpolation method.\r\n *\r\n * @function Phaser.Math.Interpolation.CatmullRom\r\n * @since 3.0.0\r\n *\r\n * @param {number[]} v - The input array of values to interpolate between.\r\n * @param {number} k - The percentage of interpolation, between 0 and 1.\r\n *\r\n * @return {number} The interpolated value.\r\n */\r\nvar CatmullRomInterpolation = function (v, k)\r\n{\r\n    var m = v.length - 1;\r\n    var f = m * k;\r\n    var i = Math.floor(f);\r\n\r\n    if (v[0] === v[m])\r\n    {\r\n        if (k < 0)\r\n        {\r\n            i = Math.floor(f = m * (1 + k));\r\n        }\r\n\r\n        return CatmullRom(f - i, v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m]);\r\n    }\r\n    else\r\n    {\r\n        if (k < 0)\r\n        {\r\n            return v[0] - (CatmullRom(-f, v[0], v[0], v[1], v[1]) - v[0]);\r\n        }\r\n\r\n        if (k > 1)\r\n        {\r\n            return v[m] - (CatmullRom(f - m, v[m], v[m], v[m - 1], v[m - 1]) - v[m]);\r\n        }\r\n\r\n        return CatmullRom(f - i, v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2]);\r\n    }\r\n};\r\n\r\nmodule.exports = CatmullRomInterpolation;\r\n"]},"metadata":{},"sourceType":"script"}