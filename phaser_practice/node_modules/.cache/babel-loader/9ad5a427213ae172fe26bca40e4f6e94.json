{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Extend = require('../../../utils/object/Extend');\n/**\r\n * Copy properties from tileset to tiles.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.AssignTileProperties\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.MapData} mapData - [description]\r\n */\n\n\nvar AssignTileProperties = function (mapData) {\n  var layerData;\n  var tile;\n  var sid;\n  var set;\n  var row; // go through each of the map data layers\n\n  for (var i = 0; i < mapData.layers.length; i++) {\n    layerData = mapData.layers[i];\n    set = null; // rows of tiles\n\n    for (var j = 0; j < layerData.data.length; j++) {\n      row = layerData.data[j]; // individual tiles\n\n      for (var k = 0; k < row.length; k++) {\n        tile = row[k];\n\n        if (tile === null || tile.index < 0) {\n          continue;\n        } // find the relevant tileset\n\n\n        sid = mapData.tiles[tile.index][2];\n        set = mapData.tilesets[sid]; // Ensure that a tile's size matches its tileset\n\n        tile.width = set.tileWidth;\n        tile.height = set.tileHeight; // if that tile type has any properties, add them to the tile object\n\n        if (set.tileProperties && set.tileProperties[tile.index - set.firstgid]) {\n          tile.properties = Extend(tile.properties, set.tileProperties[tile.index - set.firstgid]);\n        }\n      }\n    }\n  }\n};\n\nmodule.exports = AssignTileProperties;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/AssignTileProperties.js"],"names":["Extend","require","AssignTileProperties","mapData","layerData","tile","sid","set","row","i","layers","length","j","data","k","index","tiles","tilesets","width","tileWidth","height","tileHeight","tileProperties","firstgid","properties","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,8BAAD,CAApB;AAEA;;;;;;;;;;AAQA,IAAIC,oBAAoB,GAAG,UAAUC,OAAV,EAC3B;AACI,MAAIC,SAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ;AACA,MAAIC,GAAJ,CALJ,CAOI;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACO,MAAR,CAAeC,MAAnC,EAA2CF,CAAC,EAA5C,EACA;AACIL,IAAAA,SAAS,GAAGD,OAAO,CAACO,MAAR,CAAeD,CAAf,CAAZ;AAEAF,IAAAA,GAAG,GAAG,IAAN,CAHJ,CAKI;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACS,IAAV,CAAeF,MAAnC,EAA2CC,CAAC,EAA5C,EACA;AACIJ,MAAAA,GAAG,GAAGJ,SAAS,CAACS,IAAV,CAAeD,CAAf,CAAN,CADJ,CAGI;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACG,MAAxB,EAAgCG,CAAC,EAAjC,EACA;AACIT,QAAAA,IAAI,GAAGG,GAAG,CAACM,CAAD,CAAV;;AAEA,YAAIT,IAAI,KAAK,IAAT,IAAiBA,IAAI,CAACU,KAAL,GAAa,CAAlC,EACA;AACI;AACH,SANL,CAQI;;;AACAT,QAAAA,GAAG,GAAGH,OAAO,CAACa,KAAR,CAAcX,IAAI,CAACU,KAAnB,EAA0B,CAA1B,CAAN;AACAR,QAAAA,GAAG,GAAGJ,OAAO,CAACc,QAAR,CAAiBX,GAAjB,CAAN,CAVJ,CAYI;;AACAD,QAAAA,IAAI,CAACa,KAAL,GAAaX,GAAG,CAACY,SAAjB;AACAd,QAAAA,IAAI,CAACe,MAAL,GAAcb,GAAG,CAACc,UAAlB,CAdJ,CAgBI;;AACA,YAAId,GAAG,CAACe,cAAJ,IAAsBf,GAAG,CAACe,cAAJ,CAAmBjB,IAAI,CAACU,KAAL,GAAaR,GAAG,CAACgB,QAApC,CAA1B,EACA;AACIlB,UAAAA,IAAI,CAACmB,UAAL,GAAkBxB,MAAM,CACpBK,IAAI,CAACmB,UADe,EACHjB,GAAG,CAACe,cAAJ,CAAmBjB,IAAI,CAACU,KAAL,GAAaR,GAAG,CAACgB,QAApC,CADG,CAAxB;AAGH;AACJ;AACJ;AACJ;AACJ,CAhDD;;AAkDAE,MAAM,CAACC,OAAP,GAAiBxB,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Extend = require('../../../utils/object/Extend');\r\n\r\n/**\r\n * Copy properties from tileset to tiles.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.AssignTileProperties\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.MapData} mapData - [description]\r\n */\r\nvar AssignTileProperties = function (mapData)\r\n{\r\n    var layerData;\r\n    var tile;\r\n    var sid;\r\n    var set;\r\n    var row;\r\n\r\n    // go through each of the map data layers\r\n    for (var i = 0; i < mapData.layers.length; i++)\r\n    {\r\n        layerData = mapData.layers[i];\r\n\r\n        set = null;\r\n\r\n        // rows of tiles\r\n        for (var j = 0; j < layerData.data.length; j++)\r\n        {\r\n            row = layerData.data[j];\r\n\r\n            // individual tiles\r\n            for (var k = 0; k < row.length; k++)\r\n            {\r\n                tile = row[k];\r\n\r\n                if (tile === null || tile.index < 0)\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                // find the relevant tileset\r\n                sid = mapData.tiles[tile.index][2];\r\n                set = mapData.tilesets[sid];\r\n\r\n                // Ensure that a tile's size matches its tileset\r\n                tile.width = set.tileWidth;\r\n                tile.height = set.tileHeight;\r\n\r\n                // if that tile type has any properties, add them to the tile object\r\n                if (set.tileProperties && set.tileProperties[tile.index - set.firstgid])\r\n                {\r\n                    tile.properties = Extend(\r\n                        tile.properties, set.tileProperties[tile.index - set.firstgid]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = AssignTileProperties;\r\n"]},"metadata":{},"sourceType":"script"}