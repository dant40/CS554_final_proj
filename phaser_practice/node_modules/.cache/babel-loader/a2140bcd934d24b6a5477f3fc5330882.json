{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetFastValue = require('../../utils/object/GetFastValue');\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture, where the Sprite Sheet is stored as a frame within an Atlas.\r\n *\r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheetFromAtlas\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {Phaser.Textures.Frame} frame - The Frame that contains the Sprite Sheet.\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - Index of the start frame in the sprite sheet\r\n * @param {number} [config.endFrame=-1] - Index of the end frame in the sprite sheet. -1 mean all the rest of the frames\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\n\n\nvar SpriteSheetFromAtlas = function (texture, frame, config) {\n  var frameWidth = GetFastValue(config, 'frameWidth', null);\n  var frameHeight = GetFastValue(config, 'frameHeight', frameWidth); //  If missing we can't proceed\n\n  if (!frameWidth) {\n    throw new Error('TextureManager.SpriteSheetFromAtlas: Invalid frameWidth given.');\n  } //  Add in a __BASE entry (for the entire atlas frame)\n\n\n  var source = texture.source[0];\n  texture.add('__BASE', 0, 0, 0, source.width, source.height);\n  var startFrame = GetFastValue(config, 'startFrame', 0);\n  var endFrame = GetFastValue(config, 'endFrame', -1);\n  var margin = GetFastValue(config, 'margin', 0);\n  var spacing = GetFastValue(config, 'spacing', 0);\n  var x = frame.cutX;\n  var y = frame.cutY;\n  var cutWidth = frame.cutWidth;\n  var cutHeight = frame.cutHeight;\n  var sheetWidth = frame.realWidth;\n  var sheetHeight = frame.realHeight;\n  var row = Math.floor((sheetWidth - margin + spacing) / (frameWidth + spacing));\n  var column = Math.floor((sheetHeight - margin + spacing) / (frameHeight + spacing));\n  var total = row * column; //  trim offsets\n\n  var leftPad = frame.x;\n  var leftWidth = frameWidth - leftPad;\n  var rightWidth = frameWidth - (sheetWidth - cutWidth - leftPad);\n  var topPad = frame.y;\n  var topHeight = frameHeight - topPad;\n  var bottomHeight = frameHeight - (sheetHeight - cutHeight - topPad);\n\n  if (startFrame > total || startFrame < -total) {\n    startFrame = 0;\n  }\n\n  if (startFrame < 0) {\n    //  Allow negative skipframes.\n    startFrame = total + startFrame;\n  }\n\n  if (endFrame !== -1) {\n    total = startFrame + (endFrame + 1);\n  }\n\n  var sheetFrame;\n  var frameX = margin;\n  var frameY = margin;\n  var frameIndex = 0;\n  var sourceIndex = frame.sourceIndex;\n\n  for (var sheetY = 0; sheetY < column; sheetY++) {\n    var topRow = sheetY === 0;\n    var bottomRow = sheetY === column - 1;\n\n    for (var sheetX = 0; sheetX < row; sheetX++) {\n      var leftRow = sheetX === 0;\n      var rightRow = sheetX === row - 1;\n      sheetFrame = texture.add(frameIndex, sourceIndex, x + frameX, y + frameY, frameWidth, frameHeight);\n\n      if (leftRow || topRow || rightRow || bottomRow) {\n        var destX = leftRow ? leftPad : 0;\n        var destY = topRow ? topPad : 0;\n        var trimWidth = 0;\n        var trimHeight = 0;\n\n        if (leftRow) {\n          trimWidth += frameWidth - leftWidth;\n        }\n\n        if (rightRow) {\n          trimWidth += frameWidth - rightWidth;\n        }\n\n        if (topRow) {\n          trimHeight += frameHeight - topHeight;\n        }\n\n        if (bottomRow) {\n          trimHeight += frameHeight - bottomHeight;\n        }\n\n        var destWidth = frameWidth - trimWidth;\n        var destHeight = frameHeight - trimHeight;\n        sheetFrame.cutWidth = destWidth;\n        sheetFrame.cutHeight = destHeight;\n        sheetFrame.setTrim(frameWidth, frameHeight, destX, destY, destWidth, destHeight);\n      }\n\n      frameX += spacing;\n\n      if (leftRow) {\n        frameX += leftWidth;\n      } else if (rightRow) {\n        frameX += rightWidth;\n      } else {\n        frameX += frameWidth;\n      }\n\n      frameIndex++;\n    }\n\n    frameX = margin;\n    frameY += spacing;\n\n    if (topRow) {\n      frameY += topHeight;\n    } else if (bottomRow) {\n      frameY += bottomHeight;\n    } else {\n      frameY += frameHeight;\n    }\n  }\n\n  return texture;\n};\n\nmodule.exports = SpriteSheetFromAtlas;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/parsers/SpriteSheetFromAtlas.js"],"names":["GetFastValue","require","SpriteSheetFromAtlas","texture","frame","config","frameWidth","frameHeight","Error","source","add","width","height","startFrame","endFrame","margin","spacing","x","cutX","y","cutY","cutWidth","cutHeight","sheetWidth","realWidth","sheetHeight","realHeight","row","Math","floor","column","total","leftPad","leftWidth","rightWidth","topPad","topHeight","bottomHeight","sheetFrame","frameX","frameY","frameIndex","sourceIndex","sheetY","topRow","bottomRow","sheetX","leftRow","rightRow","destX","destY","trimWidth","trimHeight","destWidth","destHeight","setTrim","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\n\r\n/**\r\n * Parses a Sprite Sheet and adds the Frames to the Texture, where the Sprite Sheet is stored as a frame within an Atlas.\r\n *\r\n * In Phaser terminology a Sprite Sheet is a texture containing different frames, but each frame is the exact\r\n * same size and cannot be trimmed or rotated.\r\n *\r\n * @function Phaser.Textures.Parsers.SpriteSheetFromAtlas\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {Phaser.Textures.Frame} frame - The Frame that contains the Sprite Sheet.\r\n * @param {object} config - An object describing how to parse the Sprite Sheet.\r\n * @param {number} config.frameWidth - Width in pixels of a single frame in the sprite sheet.\r\n * @param {number} [config.frameHeight] - Height in pixels of a single frame in the sprite sheet. Defaults to frameWidth if not provided.\r\n * @param {number} [config.startFrame=0] - Index of the start frame in the sprite sheet\r\n * @param {number} [config.endFrame=-1] - Index of the end frame in the sprite sheet. -1 mean all the rest of the frames\r\n * @param {number} [config.margin=0] - If the frames have been drawn with a margin, specify the amount here.\r\n * @param {number} [config.spacing=0] - If the frames have been drawn with spacing between them, specify the amount here.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar SpriteSheetFromAtlas = function (texture, frame, config)\r\n{\r\n    var frameWidth = GetFastValue(config, 'frameWidth', null);\r\n    var frameHeight = GetFastValue(config, 'frameHeight', frameWidth);\r\n\r\n    //  If missing we can't proceed\r\n    if (!frameWidth)\r\n    {\r\n        throw new Error('TextureManager.SpriteSheetFromAtlas: Invalid frameWidth given.');\r\n    }\r\n\r\n    //  Add in a __BASE entry (for the entire atlas frame)\r\n    var source = texture.source[0];\r\n    texture.add('__BASE', 0, 0, 0, source.width, source.height);\r\n\r\n    var startFrame = GetFastValue(config, 'startFrame', 0);\r\n    var endFrame = GetFastValue(config, 'endFrame', -1);\r\n    var margin = GetFastValue(config, 'margin', 0);\r\n    var spacing = GetFastValue(config, 'spacing', 0);\r\n\r\n    var x = frame.cutX;\r\n    var y = frame.cutY;\r\n\r\n    var cutWidth = frame.cutWidth;\r\n    var cutHeight = frame.cutHeight;\r\n    var sheetWidth = frame.realWidth;\r\n    var sheetHeight = frame.realHeight;\r\n\r\n    var row = Math.floor((sheetWidth - margin + spacing) / (frameWidth + spacing));\r\n    var column = Math.floor((sheetHeight - margin + spacing) / (frameHeight + spacing));\r\n    var total = row * column;\r\n\r\n    //  trim offsets\r\n\r\n    var leftPad = frame.x;\r\n    var leftWidth = frameWidth - leftPad;\r\n\r\n    var rightWidth = frameWidth - ((sheetWidth - cutWidth) - leftPad);\r\n\r\n    var topPad = frame.y;\r\n    var topHeight = frameHeight - topPad;\r\n\r\n    var bottomHeight = frameHeight - ((sheetHeight - cutHeight) - topPad);\r\n\r\n    if (startFrame > total || startFrame < -total)\r\n    {\r\n        startFrame = 0;\r\n    }\r\n\r\n    if (startFrame < 0)\r\n    {\r\n        //  Allow negative skipframes.\r\n        startFrame = total + startFrame;\r\n    }\r\n\r\n    if (endFrame !== -1)\r\n    {\r\n        total = startFrame + (endFrame + 1);\r\n    }\r\n\r\n    var sheetFrame;\r\n    var frameX = margin;\r\n    var frameY = margin;\r\n    var frameIndex = 0;\r\n    var sourceIndex = frame.sourceIndex;\r\n\r\n    for (var sheetY = 0; sheetY < column; sheetY++)\r\n    {\r\n        var topRow = (sheetY === 0);\r\n        var bottomRow = (sheetY === column - 1);\r\n\r\n        for (var sheetX = 0; sheetX < row; sheetX++)\r\n        {\r\n            var leftRow = (sheetX === 0);\r\n            var rightRow = (sheetX === row - 1);\r\n\r\n            sheetFrame = texture.add(frameIndex, sourceIndex, x + frameX, y + frameY, frameWidth, frameHeight);\r\n\r\n            if (leftRow || topRow || rightRow || bottomRow)\r\n            {\r\n                var destX = (leftRow) ? leftPad : 0;\r\n                var destY = (topRow) ? topPad : 0;\r\n\r\n                var trimWidth = 0;\r\n                var trimHeight = 0;\r\n\r\n                if (leftRow)\r\n                {\r\n                    trimWidth += (frameWidth - leftWidth);\r\n                }\r\n\r\n                if (rightRow)\r\n                {\r\n                    trimWidth += (frameWidth - rightWidth);\r\n                }\r\n\r\n                if (topRow)\r\n                {\r\n                    trimHeight += (frameHeight - topHeight);\r\n                }\r\n\r\n                if (bottomRow)\r\n                {\r\n                    trimHeight += (frameHeight - bottomHeight);\r\n                }\r\n\r\n                var destWidth = frameWidth - trimWidth;\r\n                var destHeight = frameHeight - trimHeight;\r\n\r\n                sheetFrame.cutWidth = destWidth;\r\n                sheetFrame.cutHeight = destHeight;\r\n\r\n                sheetFrame.setTrim(frameWidth, frameHeight, destX, destY, destWidth, destHeight);\r\n            }\r\n\r\n            frameX += spacing;\r\n\r\n            if (leftRow)\r\n            {\r\n                frameX += leftWidth;\r\n            }\r\n            else if (rightRow)\r\n            {\r\n                frameX += rightWidth;\r\n            }\r\n            else\r\n            {\r\n                frameX += frameWidth;\r\n            }\r\n\r\n            frameIndex++;\r\n        }\r\n\r\n        frameX = margin;\r\n        frameY += spacing;\r\n\r\n        if (topRow)\r\n        {\r\n            frameY += topHeight;\r\n        }\r\n        else if (bottomRow)\r\n        {\r\n            frameY += bottomHeight;\r\n        }\r\n        else\r\n        {\r\n            frameY += frameHeight;\r\n        }\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = SpriteSheetFromAtlas;\r\n"]},"metadata":{},"sourceType":"script"}