{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BuildGameObject = require('../BuildGameObject');\n\nvar GameObjectCreator = require('../GameObjectCreator');\n\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\n\nvar Shader = require('./Shader');\n/**\r\n * Creates a new Shader Game Object and returns it.\r\n *\r\n * Note: This method will only be available if the Shader Game Object and WebGL support have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator#shader\r\n * @since 3.17.0\r\n *\r\n * @param {object} config - The configuration object this Game Object will use to create itself.\r\n * @param {boolean} [addToScene] - Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.\r\n *\r\n * @return {Phaser.GameObjects.Shader} The Game Object that was created.\r\n */\n\n\nGameObjectCreator.register('shader', function (config, addToScene) {\n  if (config === undefined) {\n    config = {};\n  }\n\n  var key = GetAdvancedValue(config, 'key', null);\n  var x = GetAdvancedValue(config, 'x', 0);\n  var y = GetAdvancedValue(config, 'y', 0);\n  var width = GetAdvancedValue(config, 'width', 128);\n  var height = GetAdvancedValue(config, 'height', 128);\n  var shader = new Shader(this.scene, key, x, y, width, height);\n\n  if (addToScene !== undefined) {\n    config.add = addToScene;\n  }\n\n  BuildGameObject(this.scene, shader, config);\n  return shader;\n}); //  When registering a factory function 'this' refers to the GameObjectCreator context.","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shader/ShaderCreator.js"],"names":["BuildGameObject","require","GameObjectCreator","GetAdvancedValue","Shader","register","config","addToScene","undefined","key","x","y","width","height","shader","scene","add"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,sBAAD,CAA/B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,qCAAD,CAA9B;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;AAaAC,iBAAiB,CAACG,QAAlB,CAA2B,QAA3B,EAAqC,UAAUC,MAAV,EAAkBC,UAAlB,EACrC;AACI,MAAID,MAAM,KAAKE,SAAf,EAA0B;AAAEF,IAAAA,MAAM,GAAG,EAAT;AAAc;;AAE1C,MAAIG,GAAG,GAAGN,gBAAgB,CAACG,MAAD,EAAS,KAAT,EAAgB,IAAhB,CAA1B;AACA,MAAII,CAAC,GAAGP,gBAAgB,CAACG,MAAD,EAAS,GAAT,EAAc,CAAd,CAAxB;AACA,MAAIK,CAAC,GAAGR,gBAAgB,CAACG,MAAD,EAAS,GAAT,EAAc,CAAd,CAAxB;AACA,MAAIM,KAAK,GAAGT,gBAAgB,CAACG,MAAD,EAAS,OAAT,EAAkB,GAAlB,CAA5B;AACA,MAAIO,MAAM,GAAGV,gBAAgB,CAACG,MAAD,EAAS,QAAT,EAAmB,GAAnB,CAA7B;AAEA,MAAIQ,MAAM,GAAG,IAAIV,MAAJ,CAAW,KAAKW,KAAhB,EAAuBN,GAAvB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,KAAlC,EAAyCC,MAAzC,CAAb;;AAEA,MAAIN,UAAU,KAAKC,SAAnB,EACA;AACIF,IAAAA,MAAM,CAACU,GAAP,GAAaT,UAAb;AACH;;AAEDP,EAAAA,eAAe,CAAC,KAAKe,KAAN,EAAaD,MAAb,EAAqBR,MAArB,CAAf;AAEA,SAAOQ,MAAP;AACH,CApBD,E,CAsBA","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BuildGameObject = require('../BuildGameObject');\r\nvar GameObjectCreator = require('../GameObjectCreator');\r\nvar GetAdvancedValue = require('../../utils/object/GetAdvancedValue');\r\nvar Shader = require('./Shader');\r\n\r\n/**\r\n * Creates a new Shader Game Object and returns it.\r\n *\r\n * Note: This method will only be available if the Shader Game Object and WebGL support have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator#shader\r\n * @since 3.17.0\r\n *\r\n * @param {object} config - The configuration object this Game Object will use to create itself.\r\n * @param {boolean} [addToScene] - Add this Game Object to the Scene after creating it? If set this argument overrides the `add` property in the config object.\r\n *\r\n * @return {Phaser.GameObjects.Shader} The Game Object that was created.\r\n */\r\nGameObjectCreator.register('shader', function (config, addToScene)\r\n{\r\n    if (config === undefined) { config = {}; }\r\n\r\n    var key = GetAdvancedValue(config, 'key', null);\r\n    var x = GetAdvancedValue(config, 'x', 0);\r\n    var y = GetAdvancedValue(config, 'y', 0);\r\n    var width = GetAdvancedValue(config, 'width', 128);\r\n    var height = GetAdvancedValue(config, 'height', 128);\r\n\r\n    var shader = new Shader(this.scene, key, x, y, width, height);\r\n\r\n    if (addToScene !== undefined)\r\n    {\r\n        config.add = addToScene;\r\n    }\r\n\r\n    BuildGameObject(this.scene, shader, config);\r\n\r\n    return shader;\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectCreator context.\r\n"]},"metadata":{},"sourceType":"script"}