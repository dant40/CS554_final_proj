{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * A Circle object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Circle you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Circle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the circle.\r\n * @param {number} [y=0] - The y position of the center of the circle.\r\n * @param {number} [radius=0] - The radius of the circle.\r\n */\n\n\nvar Circle = new Class({\n  initialize: function Circle(x, y, radius) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (radius === undefined) {\n      radius = 0;\n    }\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.CIRCLE`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Circle#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n\n    this.type = GEOM_CONST.CIRCLE;\n    /**\r\n     * The x position of the center of the circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The y position of the center of the circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The internal radius of the circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#_radius\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._radius = radius;\n    /**\r\n     * The internal diameter of the circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#_diameter\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._diameter = radius * 2;\n  },\n\n  /**\r\n   * Check to see if the Circle contains the given x / y coordinates.\r\n   *\r\n   * @method Phaser.Geom.Circle#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check within the circle.\r\n   * @param {number} y - The y coordinate to check within the circle.\r\n   *\r\n   * @return {boolean} True if the coordinates are within the circle, otherwise false.\r\n   */\n  contains: function (x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n   * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n   * at 180 degrees around the circle.\r\n   *\r\n   * @method Phaser.Geom.Circle#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [out,$return]\r\n   *\r\n   * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\r\n   * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the circle.\r\n   */\n  getPoint: function (position, point) {\n    return GetPoint(this, position, point);\n  },\n\n  /**\r\n   * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n   * based on the given quantity or stepRate values.\r\n   *\r\n   * @method Phaser.Geom.Circle#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n   * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the circle.\r\n   */\n  getPoints: function (quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a uniformly distributed random point from anywhere within the Circle.\r\n   *\r\n   * @method Phaser.Geom.Circle#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n   */\n  getRandomPoint: function (point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets the x, y and radius of this circle.\r\n   *\r\n   * @method Phaser.Geom.Circle#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The x position of the center of the circle.\r\n   * @param {number} [y=0] - The y position of the center of the circle.\r\n   * @param {number} [radius=0] - The radius of the circle.\r\n   *\r\n   * @return {Phaser.Geom.Circle} This Circle object.\r\n   */\n  setTo: function (x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this._radius = radius;\n    this._diameter = radius * 2;\n    return this;\n  },\n\n  /**\r\n   * Sets this Circle to be empty with a radius of zero.\r\n   * Does not change its position.\r\n   *\r\n   * @method Phaser.Geom.Circle#setEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Geom.Circle} This Circle object.\r\n   */\n  setEmpty: function () {\n    this._radius = 0;\n    this._diameter = 0;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of this Circle.\r\n   *\r\n   * @method Phaser.Geom.Circle#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x=0] - The x position of the center of the circle.\r\n   * @param {number} [y=0] - The y position of the center of the circle.\r\n   *\r\n   * @return {Phaser.Geom.Circle} This Circle object.\r\n   */\n  setPosition: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Checks to see if the Circle is empty: has a radius of zero.\r\n   *\r\n   * @method Phaser.Geom.Circle#isEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} True if the Circle is empty, otherwise false.\r\n   */\n  isEmpty: function () {\n    return this._radius <= 0;\n  },\n\n  /**\r\n   * The radius of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#radius\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  radius: {\n    get: function () {\n      return this._radius;\n    },\n    set: function (value) {\n      this._radius = value;\n      this._diameter = value * 2;\n    }\n  },\n\n  /**\r\n   * The diameter of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#diameter\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  diameter: {\n    get: function () {\n      return this._diameter;\n    },\n    set: function (value) {\n      this._diameter = value;\n      this._radius = value * 0.5;\n    }\n  },\n\n  /**\r\n   * The left position of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return this.x - this._radius;\n    },\n    set: function (value) {\n      this.x = value + this._radius;\n    }\n  },\n\n  /**\r\n   * The right position of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return this.x + this._radius;\n    },\n    set: function (value) {\n      this.x = value - this._radius;\n    }\n  },\n\n  /**\r\n   * The top position of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return this.y - this._radius;\n    },\n    set: function (value) {\n      this.y = value + this._radius;\n    }\n  },\n\n  /**\r\n   * The bottom position of the Circle.\r\n   *\r\n   * @name Phaser.Geom.Circle#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return this.y + this._radius;\n    },\n    set: function (value) {\n      this.y = value - this._radius;\n    }\n  }\n});\nmodule.exports = Circle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/circle/Circle.js"],"names":["Class","require","Contains","GetPoint","GetPoints","GEOM_CONST","Random","Circle","initialize","x","y","radius","undefined","type","CIRCLE","_radius","_diameter","contains","getPoint","position","point","getPoints","quantity","stepRate","output","getRandomPoint","setTo","setEmpty","setPosition","isEmpty","get","set","value","diameter","left","right","top","bottom","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * A Circle object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render a Circle you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Circle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the circle.\r\n * @param {number} [y=0] - The y position of the center of the circle.\r\n * @param {number} [radius=0] - The radius of the circle.\r\n */\r\nvar Circle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Circle (x, y, radius)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (radius === undefined) { radius = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.CIRCLE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Circle#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.CIRCLE;\r\n\r\n        /**\r\n         * The x position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of the center of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The internal radius of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_radius\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._radius = radius;\r\n\r\n        /**\r\n         * The internal diameter of the circle.\r\n         *\r\n         * @name Phaser.Geom.Circle#_diameter\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._diameter = radius * 2;\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Circle contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Circle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the circle.\r\n     * @param {number} y - The y coordinate to check within the circle.\r\n     *\r\n     * @return {boolean} True if the coordinates are within the circle, otherwise false.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a Point object containing the coordinates of a point on the circumference of the Circle\r\n     * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n     * at 180 degrees around the circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [out,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the circle.\r\n     * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the circle.\r\n     */\r\n    getPoint: function (position, point)\r\n    {\r\n        return GetPoint(this, position, point);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the circumference of the Circle,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Circle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the circumference of the circle and dividing it by the stepRate.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the circle.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a uniformly distributed random point from anywhere within the Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the x, y and radius of this circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     * @param {number} [radius=0] - The radius of the circle.\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setTo: function (x, y, radius)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this._radius = radius;\r\n        this._diameter = radius * 2;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Circle to be empty with a radius of zero.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Circle#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        this._radius = 0;\r\n        this._diameter = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Circle.\r\n     *\r\n     * @method Phaser.Geom.Circle#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x=0] - The x position of the center of the circle.\r\n     * @param {number} [y=0] - The y position of the center of the circle.\r\n     *\r\n     * @return {Phaser.Geom.Circle} This Circle object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the Circle is empty: has a radius of zero.\r\n     *\r\n     * @method Phaser.Geom.Circle#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the Circle is empty, otherwise false.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this._radius <= 0);\r\n    },\r\n\r\n    /**\r\n     * The radius of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#radius\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    radius: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._radius = value;\r\n            this._diameter = value * 2;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The diameter of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#diameter\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    diameter: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._diameter;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._diameter = value;\r\n            this._radius = value * 0.5;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The left position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y - this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value + this._radius;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Circle.\r\n     *\r\n     * @name Phaser.Geom.Circle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + this._radius;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - this._radius;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Circle;\r\n"]},"metadata":{},"sourceType":"script"}