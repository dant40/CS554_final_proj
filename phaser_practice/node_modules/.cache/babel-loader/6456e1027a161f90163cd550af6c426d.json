{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Takes an array of Game Objects, or any objects that have a public property as defined in `key`,\r\n * and then adds the given value to it.\r\n *\r\n * The optional `step` property is applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `PropertyValueInc(group.getChildren(), key, value, step)`\r\n *\r\n * @function Phaser.Actions.PropertyValueInc\r\n * @since 3.3.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {string} key - The property to be updated.\r\n * @param {number} value - The amount to be added to the property.\r\n * @param {number} [step=0] - This is added to the `value` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\nvar PropertyValueInc = function (items, key, value, step, index, direction) {\n  if (step === undefined) {\n    step = 0;\n  }\n\n  if (index === undefined) {\n    index = 0;\n  }\n\n  if (direction === undefined) {\n    direction = 1;\n  }\n\n  var i;\n  var t = 0;\n  var end = items.length;\n\n  if (direction === 1) {\n    //  Start to End\n    for (i = index; i < end; i++) {\n      items[i][key] += value + t * step;\n      t++;\n    }\n  } else {\n    //  End to Start\n    for (i = index; i >= 0; i--) {\n      items[i][key] += value + t * step;\n      t++;\n    }\n  }\n\n  return items;\n};\n\nmodule.exports = PropertyValueInc;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/actions/PropertyValueInc.js"],"names":["PropertyValueInc","items","key","value","step","index","direction","undefined","i","t","end","length","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;AAsBA,IAAIA,gBAAgB,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,SAA1C,EACvB;AACI,MAAIF,IAAI,KAAKG,SAAb,EAAwB;AAAEH,IAAAA,IAAI,GAAG,CAAP;AAAW;;AACrC,MAAIC,KAAK,KAAKE,SAAd,EAAyB;AAAEF,IAAAA,KAAK,GAAG,CAAR;AAAY;;AACvC,MAAIC,SAAS,KAAKC,SAAlB,EAA6B;AAAED,IAAAA,SAAS,GAAG,CAAZ;AAAgB;;AAE/C,MAAIE,CAAJ;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,GAAG,GAAGT,KAAK,CAACU,MAAhB;;AAEA,MAAIL,SAAS,KAAK,CAAlB,EACA;AACI;AACA,SAAKE,CAAC,GAAGH,KAAT,EAAgBG,CAAC,GAAGE,GAApB,EAAyBF,CAAC,EAA1B,EACA;AACIP,MAAAA,KAAK,CAACO,CAAD,CAAL,CAASN,GAAT,KAAiBC,KAAK,GAAIM,CAAC,GAAGL,IAA9B;AACAK,MAAAA,CAAC;AACJ;AACJ,GARD,MAUA;AACI;AACA,SAAKD,CAAC,GAAGH,KAAT,EAAgBG,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EACA;AACIP,MAAAA,KAAK,CAACO,CAAD,CAAL,CAASN,GAAT,KAAiBC,KAAK,GAAIM,CAAC,GAAGL,IAA9B;AACAK,MAAAA,CAAC;AACJ;AACJ;;AAED,SAAOR,KAAP;AACH,CA9BD;;AAgCAW,MAAM,CAACC,OAAP,GAAiBb,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes an array of Game Objects, or any objects that have a public property as defined in `key`,\r\n * and then adds the given value to it.\r\n *\r\n * The optional `step` property is applied incrementally, multiplied by each item in the array.\r\n *\r\n * To use this with a Group: `PropertyValueInc(group.getChildren(), key, value, step)`\r\n *\r\n * @function Phaser.Actions.PropertyValueInc\r\n * @since 3.3.0\r\n *\r\n * @generic {Phaser.GameObjects.GameObject[]} G - [items,$return]\r\n *\r\n * @param {(array|Phaser.GameObjects.GameObject[])} items - The array of items to be updated by this action.\r\n * @param {string} key - The property to be updated.\r\n * @param {number} value - The amount to be added to the property.\r\n * @param {number} [step=0] - This is added to the `value` amount, multiplied by the iteration counter.\r\n * @param {integer} [index=0] - An optional offset to start searching from within the items array.\r\n * @param {integer} [direction=1] - The direction to iterate through the array. 1 is from beginning to end, -1 from end to beginning.\r\n *\r\n * @return {(array|Phaser.GameObjects.GameObject[])} The array of objects that were passed to this Action.\r\n */\r\nvar PropertyValueInc = function (items, key, value, step, index, direction)\r\n{\r\n    if (step === undefined) { step = 0; }\r\n    if (index === undefined) { index = 0; }\r\n    if (direction === undefined) { direction = 1; }\r\n\r\n    var i;\r\n    var t = 0;\r\n    var end = items.length;\r\n\r\n    if (direction === 1)\r\n    {\r\n        //  Start to End\r\n        for (i = index; i < end; i++)\r\n        {\r\n            items[i][key] += value + (t * step);\r\n            t++;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        //  End to Start\r\n        for (i = index; i >= 0; i--)\r\n        {\r\n            items[i][key] += value + (t * step);\r\n            t++;\r\n        }\r\n    }\r\n\r\n    return items;\r\n};\r\n\r\nmodule.exports = PropertyValueInc;\r\n"]},"metadata":{},"sourceType":"script"}