{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Rectangle = require('./Rectangle');\n\nvar MATH_CONST = require('../../math/const'); //  points is an array of Point-like objects,\n//  either 2 dimensional arrays, or objects with public x/y properties:\n//  var points = [\n//      [100, 200],\n//      [200, 400],\n//      { x: 30, y: 60 }\n//  ]\n\n/**\r\n * Constructs new Rectangle or repositions and resizes an existing Rectangle so that all of the given points are on or within its bounds.\r\n *\r\n * @function Phaser.Geom.Rectangle.FromPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {array} points - An array of points (either arrays with two elements corresponding to the X and Y coordinate or an object with public `x` and `y` properties) which should be surrounded by the Rectangle.\r\n * @param {Phaser.Geom.Rectangle} [out] - Optional Rectangle to adjust.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The adjusted `out` Rectangle, or a new Rectangle if none was provided.\r\n */\n\n\nvar FromPoints = function (points, out) {\n  if (out === undefined) {\n    out = new Rectangle();\n  }\n\n  if (points.length === 0) {\n    return out;\n  }\n\n  var minX = Number.MAX_VALUE;\n  var minY = Number.MAX_VALUE;\n  var maxX = MATH_CONST.MIN_SAFE_INTEGER;\n  var maxY = MATH_CONST.MIN_SAFE_INTEGER;\n  var p;\n  var px;\n  var py;\n\n  for (var i = 0; i < points.length; i++) {\n    p = points[i];\n\n    if (Array.isArray(p)) {\n      px = p[0];\n      py = p[1];\n    } else {\n      px = p.x;\n      py = p.y;\n    }\n\n    minX = Math.min(minX, px);\n    minY = Math.min(minY, py);\n    maxX = Math.max(maxX, px);\n    maxY = Math.max(maxY, py);\n  }\n\n  out.x = minX;\n  out.y = minY;\n  out.width = maxX - minX;\n  out.height = maxY - minY;\n  return out;\n};\n\nmodule.exports = FromPoints;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/FromPoints.js"],"names":["Rectangle","require","MATH_CONST","FromPoints","points","out","undefined","length","minX","Number","MAX_VALUE","minY","maxX","MIN_SAFE_INTEGER","maxY","p","px","py","i","Array","isArray","x","y","Math","min","max","width","height","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,kBAAD,CAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,UAAU,GAAG,UAAUC,MAAV,EAAkBC,GAAlB,EACjB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIL,SAAJ,EAAN;AAAwB;;AAEjD,MAAII,MAAM,CAACG,MAAP,KAAkB,CAAtB,EACA;AACI,WAAOF,GAAP;AACH;;AAED,MAAIG,IAAI,GAAGC,MAAM,CAACC,SAAlB;AACA,MAAIC,IAAI,GAAGF,MAAM,CAACC,SAAlB;AAEA,MAAIE,IAAI,GAAGV,UAAU,CAACW,gBAAtB;AACA,MAAIC,IAAI,GAAGZ,UAAU,CAACW,gBAAtB;AAEA,MAAIE,CAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACG,MAA3B,EAAmCW,CAAC,EAApC,EACA;AACIH,IAAAA,CAAC,GAAGX,MAAM,CAACc,CAAD,CAAV;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcL,CAAd,CAAJ,EACA;AACIC,MAAAA,EAAE,GAAGD,CAAC,CAAC,CAAD,CAAN;AACAE,MAAAA,EAAE,GAAGF,CAAC,CAAC,CAAD,CAAN;AACH,KAJD,MAMA;AACIC,MAAAA,EAAE,GAAGD,CAAC,CAACM,CAAP;AACAJ,MAAAA,EAAE,GAAGF,CAAC,CAACO,CAAP;AACH;;AAEDd,IAAAA,IAAI,GAAGe,IAAI,CAACC,GAAL,CAAShB,IAAT,EAAeQ,EAAf,CAAP;AACAL,IAAAA,IAAI,GAAGY,IAAI,CAACC,GAAL,CAASb,IAAT,EAAeM,EAAf,CAAP;AAEAL,IAAAA,IAAI,GAAGW,IAAI,CAACE,GAAL,CAASb,IAAT,EAAeI,EAAf,CAAP;AACAF,IAAAA,IAAI,GAAGS,IAAI,CAACE,GAAL,CAASX,IAAT,EAAeG,EAAf,CAAP;AACH;;AAEDZ,EAAAA,GAAG,CAACgB,CAAJ,GAAQb,IAAR;AACAH,EAAAA,GAAG,CAACiB,CAAJ,GAAQX,IAAR;AACAN,EAAAA,GAAG,CAACqB,KAAJ,GAAYd,IAAI,GAAGJ,IAAnB;AACAH,EAAAA,GAAG,CAACsB,MAAJ,GAAab,IAAI,GAAGH,IAApB;AAEA,SAAON,GAAP;AACH,CA/CD;;AAiDAuB,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Rectangle = require('./Rectangle');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n//  points is an array of Point-like objects,\r\n//  either 2 dimensional arrays, or objects with public x/y properties:\r\n//  var points = [\r\n//      [100, 200],\r\n//      [200, 400],\r\n//      { x: 30, y: 60 }\r\n//  ]\r\n\r\n/**\r\n * Constructs new Rectangle or repositions and resizes an existing Rectangle so that all of the given points are on or within its bounds.\r\n *\r\n * @function Phaser.Geom.Rectangle.FromPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [out,$return]\r\n *\r\n * @param {array} points - An array of points (either arrays with two elements corresponding to the X and Y coordinate or an object with public `x` and `y` properties) which should be surrounded by the Rectangle.\r\n * @param {Phaser.Geom.Rectangle} [out] - Optional Rectangle to adjust.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The adjusted `out` Rectangle, or a new Rectangle if none was provided.\r\n */\r\nvar FromPoints = function (points, out)\r\n{\r\n    if (out === undefined) { out = new Rectangle(); }\r\n\r\n    if (points.length === 0)\r\n    {\r\n        return out;\r\n    }\r\n\r\n    var minX = Number.MAX_VALUE;\r\n    var minY = Number.MAX_VALUE;\r\n\r\n    var maxX = MATH_CONST.MIN_SAFE_INTEGER;\r\n    var maxY = MATH_CONST.MIN_SAFE_INTEGER;\r\n\r\n    var p;\r\n    var px;\r\n    var py;\r\n\r\n    for (var i = 0; i < points.length; i++)\r\n    {\r\n        p = points[i];\r\n\r\n        if (Array.isArray(p))\r\n        {\r\n            px = p[0];\r\n            py = p[1];\r\n        }\r\n        else\r\n        {\r\n            px = p.x;\r\n            py = p.y;\r\n        }\r\n\r\n        minX = Math.min(minX, px);\r\n        minY = Math.min(minY, py);\r\n\r\n        maxX = Math.max(maxX, px);\r\n        maxY = Math.max(maxY, py);\r\n    }\r\n\r\n    out.x = minX;\r\n    out.y = minY;\r\n    out.width = maxX - minX;\r\n    out.height = maxY - minY;\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = FromPoints;\r\n"]},"metadata":{},"sourceType":"script"}