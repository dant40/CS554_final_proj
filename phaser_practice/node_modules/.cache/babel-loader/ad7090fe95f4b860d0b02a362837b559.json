{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar FillStyleCanvas = require('../FillStyleCanvas');\n\nvar LineStyleCanvas = require('../LineStyleCanvas');\n\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Curve#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Curve} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar CurveCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var ctx = renderer.currentContext;\n\n  if (SetTransform(renderer, ctx, src, camera, parentMatrix)) {\n    var dx = src._displayOriginX + src._curveBounds.x;\n    var dy = src._displayOriginY + src._curveBounds.y;\n    var path = src.pathData;\n    var pathLength = path.length - 1;\n    var px1 = path[0] - dx;\n    var py1 = path[1] - dy;\n    ctx.beginPath();\n    ctx.moveTo(px1, py1);\n\n    if (!src.closePath) {\n      pathLength -= 2;\n    }\n\n    for (var i = 2; i < pathLength; i += 2) {\n      var px2 = path[i] - dx;\n      var py2 = path[i + 1] - dy;\n      ctx.lineTo(px2, py2);\n    }\n\n    if (src.closePath) {\n      ctx.closePath();\n    }\n\n    if (src.isFilled) {\n      FillStyleCanvas(ctx, src);\n      ctx.fill();\n    }\n\n    if (src.isStroked) {\n      LineStyleCanvas(ctx, src);\n      ctx.stroke();\n    } //  Restore the context saved in SetTransform\n\n\n    ctx.restore();\n  }\n};\n\nmodule.exports = CurveCanvasRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/curve/CurveCanvasRenderer.js"],"names":["FillStyleCanvas","require","LineStyleCanvas","SetTransform","CurveCanvasRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","ctx","currentContext","dx","_displayOriginX","_curveBounds","x","dy","_displayOriginY","y","path","pathData","pathLength","length","px1","py1","beginPath","moveTo","closePath","i","px2","py2","lineTo","isFilled","fill","isStroked","stroke","restore","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA7B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,6CAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIG,mBAAmB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EAC1B;AACI,MAAIC,GAAG,GAAGL,QAAQ,CAACM,cAAnB;;AAEA,MAAIR,YAAY,CAACE,QAAD,EAAWK,GAAX,EAAgBJ,GAAhB,EAAqBE,MAArB,EAA6BC,YAA7B,CAAhB,EACA;AACI,QAAIG,EAAE,GAAGN,GAAG,CAACO,eAAJ,GAAsBP,GAAG,CAACQ,YAAJ,CAAiBC,CAAhD;AACA,QAAIC,EAAE,GAAGV,GAAG,CAACW,eAAJ,GAAsBX,GAAG,CAACQ,YAAJ,CAAiBI,CAAhD;AAEA,QAAIC,IAAI,GAAGb,GAAG,CAACc,QAAf;AACA,QAAIC,UAAU,GAAGF,IAAI,CAACG,MAAL,GAAc,CAA/B;AAEA,QAAIC,GAAG,GAAGJ,IAAI,CAAC,CAAD,CAAJ,GAAUP,EAApB;AACA,QAAIY,GAAG,GAAGL,IAAI,CAAC,CAAD,CAAJ,GAAUH,EAApB;AAEAN,IAAAA,GAAG,CAACe,SAAJ;AAEAf,IAAAA,GAAG,CAACgB,MAAJ,CAAWH,GAAX,EAAgBC,GAAhB;;AAEA,QAAI,CAAClB,GAAG,CAACqB,SAAT,EACA;AACIN,MAAAA,UAAU,IAAI,CAAd;AACH;;AAED,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAApB,EAAgCO,CAAC,IAAI,CAArC,EACA;AACI,UAAIC,GAAG,GAAGV,IAAI,CAACS,CAAD,CAAJ,GAAUhB,EAApB;AACA,UAAIkB,GAAG,GAAGX,IAAI,CAACS,CAAC,GAAG,CAAL,CAAJ,GAAcZ,EAAxB;AAEAN,MAAAA,GAAG,CAACqB,MAAJ,CAAWF,GAAX,EAAgBC,GAAhB;AACH;;AAED,QAAIxB,GAAG,CAACqB,SAAR,EACA;AACIjB,MAAAA,GAAG,CAACiB,SAAJ;AACH;;AAED,QAAIrB,GAAG,CAAC0B,QAAR,EACA;AACIhC,MAAAA,eAAe,CAACU,GAAD,EAAMJ,GAAN,CAAf;AAEAI,MAAAA,GAAG,CAACuB,IAAJ;AACH;;AAED,QAAI3B,GAAG,CAAC4B,SAAR,EACA;AACIhC,MAAAA,eAAe,CAACQ,GAAD,EAAMJ,GAAN,CAAf;AAEAI,MAAAA,GAAG,CAACyB,MAAJ;AACH,KA5CL,CA8CI;;;AACAzB,IAAAA,GAAG,CAAC0B,OAAJ;AACH;AACJ,CAtDD;;AAwDAC,MAAM,CAACC,OAAP,GAAiBlC,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar FillStyleCanvas = require('../FillStyleCanvas');\r\nvar LineStyleCanvas = require('../LineStyleCanvas');\r\nvar SetTransform = require('../../../renderer/canvas/utils/SetTransform');\r\n\r\n/**\r\n * Renders this Game Object with the Canvas Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Curve#renderCanvas\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.Canvas.CanvasRenderer} renderer - A reference to the current active Canvas renderer.\r\n * @param {Phaser.GameObjects.Curve} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar CurveCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var ctx = renderer.currentContext;\r\n\r\n    if (SetTransform(renderer, ctx, src, camera, parentMatrix))\r\n    {\r\n        var dx = src._displayOriginX + src._curveBounds.x;\r\n        var dy = src._displayOriginY + src._curveBounds.y;\r\n    \r\n        var path = src.pathData;\r\n        var pathLength = path.length - 1;\r\n    \r\n        var px1 = path[0] - dx;\r\n        var py1 = path[1] - dy;\r\n\r\n        ctx.beginPath();\r\n\r\n        ctx.moveTo(px1, py1);\r\n    \r\n        if (!src.closePath)\r\n        {\r\n            pathLength -= 2;\r\n        }\r\n    \r\n        for (var i = 2; i < pathLength; i += 2)\r\n        {\r\n            var px2 = path[i] - dx;\r\n            var py2 = path[i + 1] - dy;\r\n    \r\n            ctx.lineTo(px2, py2);\r\n        }\r\n\r\n        if (src.closePath)\r\n        {\r\n            ctx.closePath();\r\n        }\r\n\r\n        if (src.isFilled)\r\n        {\r\n            FillStyleCanvas(ctx, src);\r\n\r\n            ctx.fill();\r\n        }\r\n\r\n        if (src.isStroked)\r\n        {\r\n            LineStyleCanvas(ctx, src);\r\n\r\n            ctx.stroke();\r\n        }\r\n\r\n        //  Restore the context saved in SetTransform\r\n        ctx.restore();\r\n    }\r\n};\r\n\r\nmodule.exports = CurveCanvasRenderer;\r\n"]},"metadata":{},"sourceType":"script"}