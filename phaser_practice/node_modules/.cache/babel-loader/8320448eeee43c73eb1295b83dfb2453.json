{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('../events');\n\nvar GameObjectCreator = require('../../gameobjects/GameObjectCreator');\n\nvar GameObjectFactory = require('../../gameobjects/GameObjectFactory');\n\nvar TWEEN_CONST = require('./const');\n\nvar MATH_CONST = require('../../math/const');\n/**\r\n * @classdesc\r\n * A Tween is able to manipulate the properties of one or more objects to any given value, based\r\n * on a duration and type of ease. They are rarely instantiated directly and instead should be\r\n * created via the TweenManager.\r\n *\r\n * @class Tween\r\n * @memberof Phaser.Tweens\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)} parent - A reference to the parent of this Tween. Either the Tween Manager or a Tween Timeline instance.\r\n * @param {Phaser.Types.Tweens.TweenDataConfig[]} data - An array of TweenData objects, each containing a unique property to be tweened.\r\n * @param {array} targets - An array of targets to be tweened.\r\n */\n\n\nvar Tween = new Class({\n  Extends: EventEmitter,\n  initialize: function Tween(parent, data, targets) {\n    EventEmitter.call(this);\n    /**\r\n     * A reference to the parent of this Tween.\r\n     * Either the Tween Manager or a Tween Timeline instance.\r\n     *\r\n     * @name Phaser.Tweens.Tween#parent\r\n     * @type {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)}\r\n     * @since 3.0.0\r\n     */\n\n    this.parent = parent;\n    /**\r\n     * Is the parent of this Tween a Timeline?\r\n     *\r\n     * @name Phaser.Tweens.Tween#parentIsTimeline\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.parentIsTimeline = parent.hasOwnProperty('isTimeline');\n    /**\r\n     * An array of TweenData objects, each containing a unique property and target being tweened.\r\n     *\r\n     * @name Phaser.Tweens.Tween#data\r\n     * @type {Phaser.Types.Tweens.TweenDataConfig[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = data;\n    /**\r\n     * The cached length of the data array.\r\n     *\r\n     * @name Phaser.Tweens.Tween#totalData\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.totalData = data.length;\n    /**\r\n     * An array of references to the target/s this Tween is operating on.\r\n     *\r\n     * @name Phaser.Tweens.Tween#targets\r\n     * @type {object[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.targets = targets;\n    /**\r\n     * Cached target total (not necessarily the same as the data total)\r\n     *\r\n     * @name Phaser.Tweens.Tween#totalTargets\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.totalTargets = targets.length;\n    /**\r\n     * If `true` then duration, delay, etc values are all frame totals.\r\n     *\r\n     * @name Phaser.Tweens.Tween#useFrames\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.useFrames = false;\n    /**\r\n     * Scales the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n     * Value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.\r\n     *\r\n     * @name Phaser.Tweens.Tween#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * Loop this tween? Can be -1 for an infinite loop, or an integer.\r\n     * When enabled it will play through ALL TweenDatas again. Use TweenData.repeat to loop a single element.\r\n     *\r\n     * @name Phaser.Tweens.Tween#loop\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loop = 0;\n    /**\r\n     * Time in ms/frames before the tween loops.\r\n     *\r\n     * @name Phaser.Tweens.Tween#loopDelay\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loopDelay = 0;\n    /**\r\n     * How many loops are left to run?\r\n     *\r\n     * @name Phaser.Tweens.Tween#loopCounter\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.loopCounter = 0;\n    /**\r\n     * Time in ms/frames before the 'onStart' event fires.\r\n     * This is the shortest `delay` value across all of the TweenDatas of this Tween.\r\n     *\r\n     * @name Phaser.Tweens.Tween#startDelay\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.19.0\r\n     */\n\n    this.startDelay = 0;\n    /**\r\n     * Has this Tween started playback yet?\r\n     * This boolean is toggled when the Tween leaves the 'delayed' state and starts running.\r\n     *\r\n     * @name Phaser.Tweens.Tween#hasStarted\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n    this.hasStarted = false;\n    /**\r\n     * Is this Tween currently seeking?\r\n     * This boolean is toggled in the `Tween.seek` method.\r\n     * When a tween is seeking it will not dispatch any events or callbacks.\r\n     *\r\n     * @name Phaser.Tweens.Tween#isSeeking\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n    this.isSeeking = false;\n    /**\r\n     * Time in ms/frames before the 'onComplete' event fires. This never fires if loop = -1 (as it never completes)\r\n     *\r\n     * @name Phaser.Tweens.Tween#completeDelay\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.completeDelay = 0;\n    /**\r\n     * Countdown timer (used by timeline offset, loopDelay and completeDelay)\r\n     *\r\n     * @name Phaser.Tweens.Tween#countdown\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.countdown = 0;\n    /**\r\n     * Set only if this Tween is part of a Timeline.\r\n     *\r\n     * @name Phaser.Tweens.Tween#offset\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.offset = 0;\n    /**\r\n     * Set only if this Tween is part of a Timeline. The calculated offset amount.\r\n     *\r\n     * @name Phaser.Tweens.Tween#calculatedOffset\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.calculatedOffset = 0;\n    /**\r\n     * The current state of the tween\r\n     *\r\n     * @name Phaser.Tweens.Tween#state\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.state = TWEEN_CONST.PENDING_ADD;\n    /**\r\n     * The state of the tween when it was paused (used by Resume)\r\n     *\r\n     * @name Phaser.Tweens.Tween#_pausedState\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._pausedState = TWEEN_CONST.INIT;\n    /**\r\n     * Does the Tween start off paused? (if so it needs to be started with Tween.play)\r\n     *\r\n     * @name Phaser.Tweens.Tween#paused\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.paused = false;\n    /**\r\n     * Elapsed time in ms/frames of this run through the Tween.\r\n     *\r\n     * @name Phaser.Tweens.Tween#elapsed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.elapsed = 0;\n    /**\r\n     * Total elapsed time in ms/frames of the entire Tween, including looping.\r\n     *\r\n     * @name Phaser.Tweens.Tween#totalElapsed\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalElapsed = 0;\n    /**\r\n     * Time in ms/frames for the whole Tween to play through once, excluding loop amounts and loop delays.\r\n     *\r\n     * @name Phaser.Tweens.Tween#duration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * Value between 0 and 1. The amount through the Tween, excluding loops.\r\n     *\r\n     * @name Phaser.Tweens.Tween#progress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Time in ms/frames for the Tween to complete (including looping)\r\n     *\r\n     * @name Phaser.Tweens.Tween#totalDuration\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalDuration = 0;\n    /**\r\n     * Value between 0 and 1. The amount through the entire Tween, including looping.\r\n     *\r\n     * @name Phaser.Tweens.Tween#totalProgress\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.totalProgress = 0;\n    /**\r\n     * An object containing the different Tween callback functions.\r\n     * \r\n     * You can either set these in the Tween config, or by calling the `Tween.setCallback` method.\r\n     * \r\n     * `onActive` When the Tween is moved from the pending to the active list in the Tween Manager, even if playback paused.\r\n     * `onStart` When the Tween starts playing after a delayed state. Will happen at the same time as `onActive` if it has no delay.\r\n     * `onYoyo` When a TweenData starts a yoyo. This happens _after_ the `hold` delay expires, if set.\r\n     * `onRepeat` When a TweenData repeats playback. This happens _after_ the `repeatDelay` expires, if set.\r\n     * `onComplete` When the Tween finishes playback fully or `Tween.stop` is called. Never invoked if tween is set to repeat infinitely.\r\n     * `onUpdate` When a TweenData updates a property on a source target during playback.\r\n     * `onLoop` When a Tween loops. This happens _after_ the `loopDelay` expires, if set.\r\n     *\r\n     * @name Phaser.Tweens.Tween#callbacks\r\n     * @type {object}\r\n     * @since 3.0.0\r\n     */\n\n    this.callbacks = {\n      onActive: null,\n      onComplete: null,\n      onLoop: null,\n      onRepeat: null,\n      onStart: null,\n      onUpdate: null,\n      onYoyo: null\n    };\n    /**\r\n     * The context in which all callbacks are invoked.\r\n     *\r\n     * @name Phaser.Tweens.Tween#callbackScope\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.callbackScope;\n  },\n\n  /**\t\r\n   * Returns the current value of the specified Tween Data.\r\n   *\r\n   * @method Phaser.Tweens.Tween#getValue\r\n   * @since 3.0.0\r\n   * \r\n   * @param {integer} [index=0] - The Tween Data to return the value from.\r\n   *\r\n   * @return {number} The value of the requested Tween Data.\r\n   */\n  getValue: function (index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    return this.data[index].current;\n  },\n\n  /**\r\n   * Set the scale the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n   *\r\n   * @method Phaser.Tweens.Tween#setTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The scale factor for timescale.\r\n   *\r\n   * @return {this} - This Tween instance.\r\n   */\n  setTimeScale: function (value) {\n    this.timeScale = value;\n    return this;\n  },\n\n  /**\r\n   * Returns the scale of the time applied to this Tween.\r\n   *\r\n   * @method Phaser.Tweens.Tween#getTimeScale\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The timescale of this tween (between 0 and 1)\r\n   */\n  getTimeScale: function () {\n    return this.timeScale;\n  },\n\n  /**\r\n   * Checks if the Tween is currently active.\r\n   *\r\n   * @method Phaser.Tweens.Tween#isPlaying\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Tween is active, otherwise `false`.\r\n   */\n  isPlaying: function () {\n    return this.state === TWEEN_CONST.ACTIVE;\n  },\n\n  /**\r\n   * Checks if the Tween is currently paused.\r\n   *\r\n   * @method Phaser.Tweens.Tween#isPaused\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the Tween is paused, otherwise `false`.\r\n   */\n  isPaused: function () {\n    return this.state === TWEEN_CONST.PAUSED;\n  },\n\n  /**\r\n   * See if this Tween is currently acting upon the given target.\r\n   *\r\n   * @method Phaser.Tweens.Tween#hasTarget\r\n   * @since 3.0.0\r\n   *\r\n   * @param {object} target - The target to check against this Tween.\r\n   *\r\n   * @return {boolean} `true` if the given target is a target of this Tween, otherwise `false`.\r\n   */\n  hasTarget: function (target) {\n    return this.targets.indexOf(target) !== -1;\n  },\n\n  /**\r\n   * Updates the 'end' value of the given property across all matching targets.\r\n   * \r\n   * Calling this does not adjust the duration of the tween, or the current progress.\r\n   * \r\n   * You can optionally tell it to set the 'start' value to be the current value (before the change).\r\n   *\r\n   * @method Phaser.Tweens.Tween#updateTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The property to set the new value for.\r\n   * @param {*} value - The new value of the property.\r\n   * @param {boolean} [startToCurrent=false] - Should this change set the start value to be the current value?\r\n   *\r\n   * @return {this} - This Tween instance.\r\n   */\n  updateTo: function (key, value, startToCurrent) {\n    if (startToCurrent === undefined) {\n      startToCurrent = false;\n    }\n\n    for (var i = 0; i < this.totalData; i++) {\n      var tweenData = this.data[i];\n\n      if (tweenData.key === key) {\n        tweenData.end = value;\n\n        if (startToCurrent) {\n          tweenData.start = tweenData.current;\n        }\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Restarts the tween from the beginning.\r\n   *\r\n   * @method Phaser.Tweens.Tween#restart\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  restart: function () {\n    //  Reset these so they're ready for the next update\n    this.elapsed = 0;\n    this.progress = 0;\n    this.totalElapsed = 0;\n    this.totalProgress = 0;\n\n    if (this.state === TWEEN_CONST.ACTIVE) {\n      return this.seek(0);\n    } else if (this.state === TWEEN_CONST.REMOVED) {\n      this.seek(0);\n      this.parent.makeActive(this);\n      return this;\n    } else if (this.state === TWEEN_CONST.PENDING_ADD) {\n      return this;\n    } else {\n      return this.play();\n    }\n  },\n\n  /**\r\n   * Internal method that calculates the overall duration of the Tween.\r\n   *\r\n   * @method Phaser.Tweens.Tween#calcDuration\r\n   * @since 3.0.0\r\n   */\n  calcDuration: function () {\n    var maxDuration = 0;\n    var minDelay = MATH_CONST.MAX_SAFE_INTEGER;\n    var data = this.data;\n\n    for (var i = 0; i < this.totalData; i++) {\n      var tweenData = data[i]; //  Set t1 (duration + hold + yoyo)\n\n      tweenData.t1 = tweenData.duration + tweenData.hold;\n\n      if (tweenData.yoyo) {\n        tweenData.t1 += tweenData.duration;\n      } //  Set t2 (repeatDelay + duration + hold + yoyo)\n\n\n      tweenData.t2 = tweenData.t1 + tweenData.repeatDelay; //  Total Duration\n\n      tweenData.totalDuration = tweenData.delay + tweenData.t1;\n\n      if (tweenData.repeat === -1) {\n        tweenData.totalDuration += tweenData.t2 * 999999999999;\n      } else if (tweenData.repeat > 0) {\n        tweenData.totalDuration += tweenData.t2 * tweenData.repeat;\n      }\n\n      if (tweenData.totalDuration > maxDuration) {\n        //  Get the longest TweenData from the Tween, used to calculate the Tween TD\n        maxDuration = tweenData.totalDuration;\n      }\n\n      if (tweenData.delay < minDelay) {\n        minDelay = tweenData.delay;\n      }\n    } //  Excludes loop values\n    //  If duration has been set to 0 then we give it a super-low value so that it always\n    //  renders at least 1 frame, but no more, without causing divided by zero errors elsewhere.\n\n\n    this.duration = Math.max(maxDuration, 0.001);\n    this.loopCounter = this.loop === -1 ? 999999999999 : this.loop;\n\n    if (this.loopCounter > 0) {\n      this.totalDuration = this.duration + this.completeDelay + (this.duration + this.loopDelay) * this.loopCounter;\n    } else {\n      this.totalDuration = this.duration + this.completeDelay;\n    } //  How long before this Tween starts playback?\n\n\n    this.startDelay = minDelay;\n  },\n\n  /**\r\n   * Called by TweenManager.preUpdate as part of its loop to check pending and active tweens.\r\n   * Should not be called directly.\r\n   *\r\n   * @method Phaser.Tweens.Tween#init\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Returns `true` if this Tween should be moved from the pending list to the active list by the Tween Manager.\r\n   */\n  init: function () {\n    //  You can't have a paused Tween if it's part of a Timeline\n    if (this.paused && !this.parentIsTimeline) {\n      this.state = TWEEN_CONST.PENDING_ADD;\n      this._pausedState = TWEEN_CONST.INIT;\n      return false;\n    }\n\n    var data = this.data;\n    var totalTargets = this.totalTargets;\n\n    for (var i = 0; i < this.totalData; i++) {\n      var tweenData = data[i];\n      var target = tweenData.target;\n      var gen = tweenData.gen;\n      var key = tweenData.key;\n      var targetIndex = tweenData.index; //  Old function signature: i, totalTargets, target\n      //  New function signature: target, key, value, index, total, tween\n\n      tweenData.delay = gen.delay(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.duration = Math.max(gen.duration(target, key, 0, targetIndex, totalTargets, this), 0.001);\n      tweenData.hold = gen.hold(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.repeat = gen.repeat(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.repeatDelay = gen.repeatDelay(target, key, 0, targetIndex, totalTargets, this);\n    }\n\n    this.calcDuration();\n    this.progress = 0;\n    this.totalProgress = 0;\n    this.elapsed = 0;\n    this.totalElapsed = 0;\n    this.state = TWEEN_CONST.INIT;\n    return true;\n  },\n\n  /**\r\n   * Internal method that makes this Tween active within the TweenManager\r\n   * and emits the onActive event and callback.\r\n   *\r\n   * @method Phaser.Tweens.Tween#makeActive\r\n   * @fires Phaser.Tweens.Events#TWEEN_ACTIVE\r\n   * @since 3.19.0\r\n   */\n  makeActive: function () {\n    this.parent.makeActive(this);\n    this.dispatchTweenEvent(Events.TWEEN_ACTIVE, this.callbacks.onActive);\n  },\n\n  /**\r\n   * Internal method that advances to the next state of the Tween during playback.\r\n   *\r\n   * @method Phaser.Tweens.Tween#nextState\r\n   * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n   * @fires Phaser.Tweens.Events#TWEEN_LOOP\r\n   * @since 3.0.0\r\n   */\n  nextState: function () {\n    if (this.loopCounter > 0) {\n      this.elapsed = 0;\n      this.progress = 0;\n      this.loopCounter--;\n      this.resetTweenData(true);\n\n      if (this.loopDelay > 0) {\n        this.countdown = this.loopDelay;\n        this.state = TWEEN_CONST.LOOP_DELAY;\n      } else {\n        this.state = TWEEN_CONST.ACTIVE;\n        this.dispatchTweenEvent(Events.TWEEN_LOOP, this.callbacks.onLoop);\n      }\n    } else if (this.completeDelay > 0) {\n      this.state = TWEEN_CONST.COMPLETE_DELAY;\n      this.countdown = this.completeDelay;\n    } else {\n      this.state = TWEEN_CONST.PENDING_REMOVE;\n      this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\n    }\n  },\n\n  /**\r\n   * Pauses the Tween immediately. Use `resume` to continue playback.\r\n   *\r\n   * @method Phaser.Tweens.Tween#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} - This Tween instance.\r\n   */\n  pause: function () {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      return this;\n    }\n\n    this.paused = true;\n    this._pausedState = this.state;\n    this.state = TWEEN_CONST.PAUSED;\n    return this;\n  },\n\n  /**\r\n   * Starts a Tween playing.\r\n   * \r\n   * You only need to call this method if you have configured the tween to be paused on creation.\r\n   * \r\n   * If the Tween is already playing, calling this method again will have no effect. If you wish to\r\n   * restart the Tween, use `Tween.restart` instead.\r\n   * \r\n   * Calling this method after the Tween has completed will start the Tween playing again from the start.\r\n   * This is the same as calling `Tween.seek(0)` and then `Tween.play()`.\r\n   *\r\n   * @method Phaser.Tweens.Tween#play\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} [resetFromTimeline=false] - Is this Tween being played as part of a Timeline?\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  play: function (resetFromTimeline) {\n    if (resetFromTimeline === undefined) {\n      resetFromTimeline = false;\n    }\n\n    var state = this.state;\n\n    if (state === TWEEN_CONST.INIT && !this.parentIsTimeline) {\n      this.resetTweenData(false);\n      this.state = TWEEN_CONST.ACTIVE;\n      return this;\n    } else if (state === TWEEN_CONST.ACTIVE || state === TWEEN_CONST.PENDING_ADD && this._pausedState === TWEEN_CONST.PENDING_ADD) {\n      return this;\n    } else if (!this.parentIsTimeline && (state === TWEEN_CONST.PENDING_REMOVE || state === TWEEN_CONST.REMOVED)) {\n      this.seek(0);\n      this.parent.makeActive(this);\n      return this;\n    }\n\n    if (this.parentIsTimeline) {\n      this.resetTweenData(resetFromTimeline);\n\n      if (this.calculatedOffset === 0) {\n        this.state = TWEEN_CONST.ACTIVE;\n      } else {\n        this.countdown = this.calculatedOffset;\n        this.state = TWEEN_CONST.OFFSET_DELAY;\n      }\n    } else if (this.paused) {\n      this.paused = false;\n      this.makeActive();\n    } else {\n      this.resetTweenData(resetFromTimeline);\n      this.state = TWEEN_CONST.ACTIVE;\n      this.makeActive();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal method that resets all of the Tween Data, including the progress and elapsed values.\r\n   *\r\n   * @method Phaser.Tweens.Tween#resetTweenData\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} resetFromLoop - Has this method been called as part of a loop?\r\n   */\n  resetTweenData: function (resetFromLoop) {\n    var data = this.data;\n    var total = this.totalData;\n    var totalTargets = this.totalTargets;\n\n    for (var i = 0; i < total; i++) {\n      var tweenData = data[i];\n      var target = tweenData.target;\n      var key = tweenData.key;\n      var targetIndex = tweenData.index;\n      tweenData.progress = 0;\n      tweenData.elapsed = 0;\n      tweenData.repeatCounter = tweenData.repeat === -1 ? 999999999999 : tweenData.repeat;\n\n      if (resetFromLoop) {\n        tweenData.start = tweenData.getStartValue(target, key, tweenData.start, targetIndex, totalTargets, this);\n        tweenData.end = tweenData.getEndValue(target, key, tweenData.end, targetIndex, totalTargets, this);\n        tweenData.current = tweenData.start;\n        tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\n      } else {\n        tweenData.state = TWEEN_CONST.PENDING_RENDER;\n      }\n\n      if (tweenData.delay > 0) {\n        tweenData.elapsed = tweenData.delay;\n        tweenData.state = TWEEN_CONST.DELAY;\n      }\n\n      if (tweenData.getActiveValue) {\n        target[key] = tweenData.getActiveValue(tweenData.target, tweenData.key, tweenData.start);\n      }\n    }\n  },\n\n  /**\r\n   * Resumes the playback of a previously paused Tween.\r\n   *\r\n   * @method Phaser.Tweens.Tween#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} - This Tween instance.\r\n   */\n  resume: function () {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      this.paused = false;\n      this.state = this._pausedState;\n    } else {\n      this.play();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Seeks to a specific point in the Tween.\r\n   * \r\n   * **Note:** You cannot seek a Tween that repeats or loops forever, or that has an unusually long total duration.\r\n   * \r\n   * The given position is a value between 0 and 1 which represents how far through the Tween to seek to.\r\n   * A value of 0.5 would seek to half-way through the Tween, where-as a value of zero would seek to the start.\r\n   * \r\n   * Note that the seek takes the entire duration of the Tween into account, including delays, loops and repeats.\r\n   * For example, a Tween that lasts for 2 seconds, but that loops 3 times, would have a total duration of 6 seconds,\r\n   * so seeking to 0.5 would seek to 3 seconds into the Tween, as that's half-way through its _entire_ duration.\r\n   * \r\n   * Seeking works by resetting the Tween to its initial values and then iterating through the Tween at `delta`\r\n   * jumps per step. The longer the Tween, the longer this can take.\r\n   *\r\n   * @method Phaser.Tweens.Tween#seek\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} toPosition - A value between 0 and 1 which represents the progress point to seek to.\r\n   * @param {number} [delta=16.6] - The size of each step when seeking through the Tween. A higher value completes faster but at a cost of less precision.\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  seek: function (toPosition, delta) {\n    if (delta === undefined) {\n      delta = 16.6;\n    }\n\n    if (this.totalDuration >= 3600000) {\n      console.warn('Tween.seek duration too long');\n      return this;\n    }\n\n    if (this.state === TWEEN_CONST.REMOVED) {\n      this.makeActive();\n    }\n\n    this.elapsed = 0;\n    this.progress = 0;\n    this.totalElapsed = 0;\n    this.totalProgress = 0;\n    var data = this.data;\n    var totalTargets = this.totalTargets;\n\n    for (var i = 0; i < this.totalData; i++) {\n      var tweenData = data[i];\n      var target = tweenData.target;\n      var gen = tweenData.gen;\n      var key = tweenData.key;\n      var targetIndex = tweenData.index;\n      tweenData.progress = 0;\n      tweenData.elapsed = 0;\n      tweenData.repeatCounter = tweenData.repeat === -1 ? 999999999999 : tweenData.repeat; //  Old function signature: i, totalTargets, target\n      //  New function signature: target, key, value, index, total, tween\n\n      tweenData.delay = gen.delay(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.duration = Math.max(gen.duration(target, key, 0, targetIndex, totalTargets, this), 0.001);\n      tweenData.hold = gen.hold(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.repeat = gen.repeat(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.repeatDelay = gen.repeatDelay(target, key, 0, targetIndex, totalTargets, this);\n      tweenData.current = tweenData.start;\n      tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\n      this.updateTweenData(this, tweenData, 0, targetIndex, totalTargets);\n\n      if (tweenData.delay > 0) {\n        tweenData.elapsed = tweenData.delay;\n        tweenData.state = TWEEN_CONST.DELAY;\n      }\n    }\n\n    this.calcDuration();\n    var wasPaused = false;\n\n    if (this.state === TWEEN_CONST.PAUSED) {\n      wasPaused = true;\n      this.state = TWEEN_CONST.ACTIVE;\n    }\n\n    this.isSeeking = true;\n\n    do {\n      this.update(0, delta);\n    } while (this.totalProgress < toPosition);\n\n    this.isSeeking = false;\n\n    if (wasPaused) {\n      this.state = TWEEN_CONST.PAUSED;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets an event based callback to be invoked during playback.\r\n   * \r\n   * Calling this method will replace a previously set callback for the given type, if any exists.\r\n   * \r\n   * The types available are:\r\n   * \r\n   * `onActive` When the Tween is moved from the pending to the active list in the Tween Manager, even if playback paused.\r\n   * `onStart` When the Tween starts playing after a delayed state. Will happen at the same time as `onActive` if it has no delay.\r\n   * `onYoyo` When a TweenData starts a yoyo. This happens _after_ the `hold` delay expires, if set.\r\n   * `onRepeat` When a TweenData repeats playback. This happens _after_ the `repeatDelay` expires, if set.\r\n   * `onComplete` When the Tween finishes playback fully or `Tween.stop` is called. Never invoked if tween is set to repeat infinitely.\r\n   * `onUpdate` When a TweenData updates a property on a source target during playback.\r\n   * `onLoop` When a Tween loops. This happens _after_ the `loopDelay` expires, if set.\r\n   *\r\n   * @method Phaser.Tweens.Tween#setCallback\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} type - Type of the callback to set.\r\n   * @param {function} callback - The function to invoke when this callback happens.\r\n   * @param {array} [params] - An array of parameters for specified callbacks types.\r\n   * @param {any} [scope] - The context the callback will be invoked in.\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  setCallback: function (type, callback, params, scope) {\n    this.callbacks[type] = {\n      func: callback,\n      scope: scope,\n      params: params\n    };\n    return this;\n  },\n\n  /**\r\n   * Flags the Tween as being complete, whatever stage of progress it is at.\r\n   *\r\n   * If an onComplete callback has been defined it will automatically invoke it, unless a `delay`\r\n   * argument is provided, in which case the Tween will delay for that period of time before calling the callback.\r\n   *\r\n   * If you don't need a delay, or have an onComplete callback, then call `Tween.stop` instead.\r\n   *\r\n   * @method Phaser.Tweens.Tween#complete\r\n   * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n   * @since 3.2.0\r\n   *\r\n   * @param {number} [delay=0] - The time to wait before invoking the complete callback. If zero it will fire immediately.\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  complete: function (delay) {\n    if (delay === undefined) {\n      delay = 0;\n    }\n\n    if (delay) {\n      this.state = TWEEN_CONST.COMPLETE_DELAY;\n      this.countdown = delay;\n    } else {\n      this.state = TWEEN_CONST.PENDING_REMOVE;\n      this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Immediately removes this Tween from the TweenManager and all of its internal arrays,\r\n   * no matter what stage it as it. Then sets the tween state to `REMOVED`.\r\n   * \r\n   * You should dispose of your reference to this tween after calling this method, to\r\n   * free it from memory.\r\n   *\r\n   * @method Phaser.Tweens.Tween#remove\r\n   * @since 3.17.0\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  remove: function () {\n    this.parent.remove(this);\n    return this;\n  },\n\n  /**\r\n   * Stops the Tween immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.\r\n   *\r\n   * @method Phaser.Tweens.Tween#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [resetTo] - If you want to seek the tween, provide a value between 0 and 1.\r\n   *\r\n   * @return {this} This Tween instance.\r\n   */\n  stop: function (resetTo) {\n    if (this.state === TWEEN_CONST.ACTIVE) {\n      if (resetTo !== undefined) {\n        this.seek(resetTo);\n      }\n    }\n\n    if (this.state !== TWEEN_CONST.REMOVED) {\n      if (this.state === TWEEN_CONST.PAUSED || this.state === TWEEN_CONST.PENDING_ADD) {\n        if (this.parentIsTimeline) {\n          this.parent.manager._destroy.push(this);\n\n          this.parent.manager._toProcess++;\n        } else {\n          this.parent._destroy.push(this);\n\n          this.parent._toProcess++;\n        }\n      }\n\n      this.removeAllListeners();\n      this.state = TWEEN_CONST.PENDING_REMOVE;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal method that advances the Tween based on the time values.\r\n   *\r\n   * @method Phaser.Tweens.Tween#update\r\n   * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n   * @fires Phaser.Tweens.Events#TWEEN_LOOP\r\n   * @fires Phaser.Tweens.Events#TWEEN_START\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} timestamp - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n   * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n   *\r\n   * @return {boolean} Returns `true` if this Tween has finished and should be removed from the Tween Manager, otherwise returns `false`.\r\n   */\n  update: function (timestamp, delta) {\n    if (this.state === TWEEN_CONST.PAUSED) {\n      return false;\n    }\n\n    if (this.useFrames) {\n      delta = 1 * this.parent.timeScale;\n    }\n\n    delta *= this.timeScale;\n    this.elapsed += delta;\n    this.progress = Math.min(this.elapsed / this.duration, 1);\n    this.totalElapsed += delta;\n    this.totalProgress = Math.min(this.totalElapsed / this.totalDuration, 1);\n\n    switch (this.state) {\n      case TWEEN_CONST.ACTIVE:\n        if (!this.hasStarted && !this.isSeeking) {\n          this.startDelay -= delta;\n\n          if (this.startDelay <= 0) {\n            this.hasStarted = true;\n            this.dispatchTweenEvent(Events.TWEEN_START, this.callbacks.onStart);\n          }\n        }\n\n        var stillRunning = false;\n\n        for (var i = 0; i < this.totalData; i++) {\n          var tweenData = this.data[i];\n\n          if (this.updateTweenData(this, tweenData, delta)) {\n            stillRunning = true;\n          }\n        } //  Anything still running? If not, we're done\n\n\n        if (!stillRunning) {\n          this.nextState();\n        }\n\n        break;\n\n      case TWEEN_CONST.LOOP_DELAY:\n        this.countdown -= delta;\n\n        if (this.countdown <= 0) {\n          this.state = TWEEN_CONST.ACTIVE;\n          this.dispatchTweenEvent(Events.TWEEN_LOOP, this.callbacks.onLoop);\n        }\n\n        break;\n\n      case TWEEN_CONST.OFFSET_DELAY:\n        this.countdown -= delta;\n\n        if (this.countdown <= 0) {\n          this.state = TWEEN_CONST.ACTIVE;\n        }\n\n        break;\n\n      case TWEEN_CONST.COMPLETE_DELAY:\n        this.countdown -= delta;\n\n        if (this.countdown <= 0) {\n          this.state = TWEEN_CONST.PENDING_REMOVE;\n          this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\n        }\n\n        break;\n    }\n\n    return this.state === TWEEN_CONST.PENDING_REMOVE;\n  },\n\n  /**\r\n   * Internal method that will emit a TweenData based Event and invoke the given callback.\r\n   *\r\n   * @method Phaser.Tweens.Tween#dispatchTweenDataEvent\r\n   * @since 3.19.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n   * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n   * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData object that caused this event.\r\n   */\n  dispatchTweenDataEvent: function (event, callback, tweenData) {\n    if (!this.isSeeking) {\n      this.emit(event, this, tweenData.key, tweenData.target, tweenData.current, tweenData.previous);\n\n      if (callback) {\n        callback.params[1] = tweenData.target;\n        callback.func.apply(callback.scope, callback.params);\n      }\n    }\n  },\n\n  /**\r\n   * Internal method that will emit a Tween based Event and invoke the given callback.\r\n   *\r\n   * @method Phaser.Tweens.Tween#dispatchTweenEvent\r\n   * @since 3.19.0\r\n   *\r\n   * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n   * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n   */\n  dispatchTweenEvent: function (event, callback) {\n    if (!this.isSeeking) {\n      this.emit(event, this, this.targets);\n\n      if (callback) {\n        callback.params[1] = this.targets;\n        callback.func.apply(callback.scope, callback.params);\n      }\n    }\n  },\n\n  /**\r\n   * Internal method used as part of the playback process that sets a tween to play in reverse.\r\n   *\r\n   * @method Phaser.Tweens.Tween#setStateFromEnd\r\n   * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n   * @fires Phaser.Tweens.Events#TWEEN_YOYO\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n   * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n   * @param {number} diff - Any extra time that needs to be accounted for in the elapsed and progress values.\r\n   *\r\n   * @return {integer} The state of this Tween.\r\n   */\n  setStateFromEnd: function (tween, tweenData, diff) {\n    if (tweenData.yoyo) {\n      //  We've hit the end of a Playing Forward TweenData and we have a yoyo\n      //  Account for any extra time we got from the previous frame\n      tweenData.elapsed = diff;\n      tweenData.progress = diff / tweenData.duration;\n\n      if (tweenData.flipX) {\n        tweenData.target.toggleFlipX();\n      }\n\n      if (tweenData.flipY) {\n        tweenData.target.toggleFlipY();\n      }\n\n      this.dispatchTweenDataEvent(Events.TWEEN_YOYO, tween.callbacks.onYoyo, tweenData);\n      tweenData.start = tweenData.getStartValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\n      return TWEEN_CONST.PLAYING_BACKWARD;\n    } else if (tweenData.repeatCounter > 0) {\n      //  We've hit the end of a Playing Forward TweenData and we have a Repeat.\n      //  So we're going to go right back to the start to repeat it again.\n      tweenData.repeatCounter--; //  Account for any extra time we got from the previous frame\n\n      tweenData.elapsed = diff;\n      tweenData.progress = diff / tweenData.duration;\n\n      if (tweenData.flipX) {\n        tweenData.target.toggleFlipX();\n      }\n\n      if (tweenData.flipY) {\n        tweenData.target.toggleFlipY();\n      }\n\n      tweenData.start = tweenData.getStartValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\n      tweenData.end = tweenData.getEndValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween); //  Delay?\n\n      if (tweenData.repeatDelay > 0) {\n        tweenData.elapsed = tweenData.repeatDelay - diff;\n        tweenData.current = tweenData.start;\n        tweenData.target[tweenData.key] = tweenData.current;\n        return TWEEN_CONST.REPEAT_DELAY;\n      } else {\n        this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\n        return TWEEN_CONST.PLAYING_FORWARD;\n      }\n    }\n\n    return TWEEN_CONST.COMPLETE;\n  },\n\n  /**\r\n   * Internal method used as part of the playback process that sets a tween to play from the start.\r\n   *\r\n   * @method Phaser.Tweens.Tween#setStateFromStart\r\n   * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n   * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n   * @param {number} diff - Any extra time that needs to be accounted for in the elapsed and progress values.\r\n   *\r\n   * @return {integer} The state of this Tween.\r\n   */\n  setStateFromStart: function (tween, tweenData, diff) {\n    if (tweenData.repeatCounter > 0) {\n      tweenData.repeatCounter--; //  Account for any extra time we got from the previous frame\n\n      tweenData.elapsed = diff;\n      tweenData.progress = diff / tweenData.duration;\n\n      if (tweenData.flipX) {\n        tweenData.target.toggleFlipX();\n      }\n\n      if (tweenData.flipY) {\n        tweenData.target.toggleFlipY();\n      }\n\n      tweenData.end = tweenData.getEndValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween); //  Delay?\n\n      if (tweenData.repeatDelay > 0) {\n        tweenData.elapsed = tweenData.repeatDelay - diff;\n        tweenData.current = tweenData.start;\n        tweenData.target[tweenData.key] = tweenData.current;\n        return TWEEN_CONST.REPEAT_DELAY;\n      } else {\n        this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\n        return TWEEN_CONST.PLAYING_FORWARD;\n      }\n    }\n\n    return TWEEN_CONST.COMPLETE;\n  },\n\n  /**\r\n   * Internal method that advances the TweenData based on the time value given.\r\n   *\r\n   * @method Phaser.Tweens.Tween#updateTweenData\r\n   * @fires Phaser.Tweens.Events#TWEEN_UPDATE\r\n   * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n   * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n   * @param {number} delta - Either a value in ms, or 1 if Tween.useFrames is true.\r\n   *\r\n   * @return {boolean} True if the tween is not complete (e.g., playing), or false if the tween is complete.\r\n   */\n  updateTweenData: function (tween, tweenData, delta) {\n    var target = tweenData.target;\n\n    switch (tweenData.state) {\n      case TWEEN_CONST.PLAYING_FORWARD:\n      case TWEEN_CONST.PLAYING_BACKWARD:\n        if (!target) {\n          tweenData.state = TWEEN_CONST.COMPLETE;\n          break;\n        }\n\n        var elapsed = tweenData.elapsed;\n        var duration = tweenData.duration;\n        var diff = 0;\n        elapsed += delta;\n\n        if (elapsed > duration) {\n          diff = elapsed - duration;\n          elapsed = duration;\n        }\n\n        var forward = tweenData.state === TWEEN_CONST.PLAYING_FORWARD;\n        var progress = elapsed / duration;\n        tweenData.elapsed = elapsed;\n        tweenData.progress = progress;\n        tweenData.previous = tweenData.current;\n\n        if (progress === 1) {\n          if (forward) {\n            tweenData.current = tweenData.end;\n            target[tweenData.key] = tweenData.end;\n\n            if (tweenData.hold > 0) {\n              tweenData.elapsed = tweenData.hold - diff;\n              tweenData.state = TWEEN_CONST.HOLD_DELAY;\n            } else {\n              tweenData.state = this.setStateFromEnd(tween, tweenData, diff);\n            }\n          } else {\n            tweenData.current = tweenData.start;\n            target[tweenData.key] = tweenData.start;\n            tweenData.state = this.setStateFromStart(tween, tweenData, diff);\n          }\n        } else {\n          var v = forward ? tweenData.ease(progress) : tweenData.ease(1 - progress);\n          tweenData.current = tweenData.start + (tweenData.end - tweenData.start) * v;\n          target[tweenData.key] = tweenData.current;\n        }\n\n        this.dispatchTweenDataEvent(Events.TWEEN_UPDATE, tween.callbacks.onUpdate, tweenData);\n        break;\n\n      case TWEEN_CONST.DELAY:\n        tweenData.elapsed -= delta;\n\n        if (tweenData.elapsed <= 0) {\n          tweenData.elapsed = Math.abs(tweenData.elapsed);\n          tweenData.state = TWEEN_CONST.PENDING_RENDER;\n        }\n\n        break;\n\n      case TWEEN_CONST.REPEAT_DELAY:\n        tweenData.elapsed -= delta;\n\n        if (tweenData.elapsed <= 0) {\n          tweenData.elapsed = Math.abs(tweenData.elapsed);\n          tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\n          this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\n        }\n\n        break;\n\n      case TWEEN_CONST.HOLD_DELAY:\n        tweenData.elapsed -= delta;\n\n        if (tweenData.elapsed <= 0) {\n          tweenData.state = this.setStateFromEnd(tween, tweenData, Math.abs(tweenData.elapsed));\n        }\n\n        break;\n\n      case TWEEN_CONST.PENDING_RENDER:\n        if (target) {\n          tweenData.start = tweenData.getStartValue(target, tweenData.key, target[tweenData.key], tweenData.index, tween.totalTargets, tween);\n          tweenData.end = tweenData.getEndValue(target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\n          tweenData.current = tweenData.start;\n          target[tweenData.key] = tweenData.start;\n          tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\n        } else {\n          tweenData.state = TWEEN_CONST.COMPLETE;\n        }\n\n        break;\n    } //  Return TRUE if this TweenData still playing, otherwise return FALSE\n\n\n    return tweenData.state !== TWEEN_CONST.COMPLETE;\n  }\n}); //  onActive = 'active' event = When the Tween is moved from the pending to the active list in the manager, even if playback delayed\n//  onStart = 'start' event = When the Tween starts playing from a delayed state (will happen same time as onActive if no delay)\n//  onYoyo = 'yoyo' event = When the Tween starts a yoyo\n//  onRepeat = 'repeat' event = When a TweenData repeats playback (if any)\n//  onComplete = 'complete' event = When the Tween finishes all playback (can sometimes never happen if repeat -1), also when 'stop' called\n//  onUpdate = 'update' event = When the Tween updates a TweenData during playback (expensive!)\n//  onLoop = 'loop' event = Used to loop ALL TweenDatas in a Tween\n\nTween.TYPES = ['onActive', 'onComplete', 'onLoop', 'onRepeat', 'onStart', 'onUpdate', 'onYoyo'];\n/**\r\n * Creates a new Tween object.\r\n *\r\n * Note: This method will only be available if Tweens have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#tween\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The Tween configuration.\r\n *\r\n * @return {Phaser.Tweens.Tween} The Tween that was created.\r\n */\n\nGameObjectFactory.register('tween', function (config) {\n  return this.scene.sys.tweens.add(config);\n}); //  When registering a factory function 'this' refers to the GameObjectFactory context.\n//\n//  There are several properties available to use:\n//\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\n//  this.displayList - a reference to the Display List the Scene owns\n//  this.updateList - a reference to the Update List the Scene owns\n\n/**\r\n * Creates a new Tween object and returns it.\r\n *\r\n * Note: This method will only be available if Tweens have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator#tween\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The Tween configuration.\r\n *\r\n * @return {Phaser.Tweens.Tween} The Tween that was created.\r\n */\n\nGameObjectCreator.register('tween', function (config) {\n  return this.scene.sys.tweens.create(config);\n}); //  When registering a factory function 'this' refers to the GameObjectCreator context.\n\nmodule.exports = Tween;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/tween/Tween.js"],"names":["Class","require","EventEmitter","Events","GameObjectCreator","GameObjectFactory","TWEEN_CONST","MATH_CONST","Tween","Extends","initialize","parent","data","targets","call","parentIsTimeline","hasOwnProperty","totalData","length","totalTargets","useFrames","timeScale","loop","loopDelay","loopCounter","startDelay","hasStarted","isSeeking","completeDelay","countdown","offset","calculatedOffset","state","PENDING_ADD","_pausedState","INIT","paused","elapsed","totalElapsed","duration","progress","totalDuration","totalProgress","callbacks","onActive","onComplete","onLoop","onRepeat","onStart","onUpdate","onYoyo","callbackScope","getValue","index","undefined","current","setTimeScale","value","getTimeScale","isPlaying","ACTIVE","isPaused","PAUSED","hasTarget","target","indexOf","updateTo","key","startToCurrent","i","tweenData","end","start","restart","seek","REMOVED","makeActive","play","calcDuration","maxDuration","minDelay","MAX_SAFE_INTEGER","t1","hold","yoyo","t2","repeatDelay","delay","repeat","Math","max","init","gen","targetIndex","dispatchTweenEvent","TWEEN_ACTIVE","nextState","resetTweenData","LOOP_DELAY","TWEEN_LOOP","COMPLETE_DELAY","PENDING_REMOVE","TWEEN_COMPLETE","pause","resetFromTimeline","OFFSET_DELAY","resetFromLoop","total","repeatCounter","getStartValue","getEndValue","PLAYING_FORWARD","PENDING_RENDER","DELAY","getActiveValue","resume","toPosition","delta","console","warn","updateTweenData","wasPaused","update","setCallback","type","callback","params","scope","func","complete","remove","stop","resetTo","manager","_destroy","push","_toProcess","removeAllListeners","timestamp","min","TWEEN_START","stillRunning","dispatchTweenDataEvent","event","emit","previous","apply","setStateFromEnd","tween","diff","flipX","toggleFlipX","flipY","toggleFlipY","TWEEN_YOYO","PLAYING_BACKWARD","REPEAT_DELAY","TWEEN_REPEAT","COMPLETE","setStateFromStart","forward","HOLD_DELAY","v","ease","TWEEN_UPDATE","abs","TYPES","register","config","scene","sys","tweens","add","create","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('../events');\r\nvar GameObjectCreator = require('../../gameobjects/GameObjectCreator');\r\nvar GameObjectFactory = require('../../gameobjects/GameObjectFactory');\r\nvar TWEEN_CONST = require('./const');\r\nvar MATH_CONST = require('../../math/const');\r\n\r\n/**\r\n * @classdesc\r\n * A Tween is able to manipulate the properties of one or more objects to any given value, based\r\n * on a duration and type of ease. They are rarely instantiated directly and instead should be\r\n * created via the TweenManager.\r\n *\r\n * @class Tween\r\n * @memberof Phaser.Tweens\r\n * @extends Phaser.Events.EventEmitter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)} parent - A reference to the parent of this Tween. Either the Tween Manager or a Tween Timeline instance.\r\n * @param {Phaser.Types.Tweens.TweenDataConfig[]} data - An array of TweenData objects, each containing a unique property to be tweened.\r\n * @param {array} targets - An array of targets to be tweened.\r\n */\r\nvar Tween = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function Tween (parent, data, targets)\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * A reference to the parent of this Tween.\r\n         * Either the Tween Manager or a Tween Timeline instance.\r\n         *\r\n         * @name Phaser.Tweens.Tween#parent\r\n         * @type {(Phaser.Tweens.TweenManager|Phaser.Tweens.Timeline)}\r\n         * @since 3.0.0\r\n         */\r\n        this.parent = parent;\r\n\r\n        /**\r\n         * Is the parent of this Tween a Timeline?\r\n         *\r\n         * @name Phaser.Tweens.Tween#parentIsTimeline\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.parentIsTimeline = parent.hasOwnProperty('isTimeline');\r\n\r\n        /**\r\n         * An array of TweenData objects, each containing a unique property and target being tweened.\r\n         *\r\n         * @name Phaser.Tweens.Tween#data\r\n         * @type {Phaser.Types.Tweens.TweenDataConfig[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = data;\r\n\r\n        /**\r\n         * The cached length of the data array.\r\n         *\r\n         * @name Phaser.Tweens.Tween#totalData\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.totalData = data.length;\r\n\r\n        /**\r\n         * An array of references to the target/s this Tween is operating on.\r\n         *\r\n         * @name Phaser.Tweens.Tween#targets\r\n         * @type {object[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.targets = targets;\r\n\r\n        /**\r\n         * Cached target total (not necessarily the same as the data total)\r\n         *\r\n         * @name Phaser.Tweens.Tween#totalTargets\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.totalTargets = targets.length;\r\n\r\n        /**\r\n         * If `true` then duration, delay, etc values are all frame totals.\r\n         *\r\n         * @name Phaser.Tweens.Tween#useFrames\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.useFrames = false;\r\n\r\n        /**\r\n         * Scales the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n         * Value isn't used when calculating total duration of the tween, it's a run-time delta adjustment only.\r\n         *\r\n         * @name Phaser.Tweens.Tween#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * Loop this tween? Can be -1 for an infinite loop, or an integer.\r\n         * When enabled it will play through ALL TweenDatas again. Use TweenData.repeat to loop a single element.\r\n         *\r\n         * @name Phaser.Tweens.Tween#loop\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loop = 0;\r\n\r\n        /**\r\n         * Time in ms/frames before the tween loops.\r\n         *\r\n         * @name Phaser.Tweens.Tween#loopDelay\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loopDelay = 0;\r\n\r\n        /**\r\n         * How many loops are left to run?\r\n         *\r\n         * @name Phaser.Tweens.Tween#loopCounter\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.loopCounter = 0;\r\n\r\n        /**\r\n         * Time in ms/frames before the 'onStart' event fires.\r\n         * This is the shortest `delay` value across all of the TweenDatas of this Tween.\r\n         *\r\n         * @name Phaser.Tweens.Tween#startDelay\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.19.0\r\n         */\r\n        this.startDelay = 0;\r\n\r\n        /**\r\n         * Has this Tween started playback yet?\r\n         * This boolean is toggled when the Tween leaves the 'delayed' state and starts running.\r\n         *\r\n         * @name Phaser.Tweens.Tween#hasStarted\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.hasStarted = false;\r\n\r\n        /**\r\n         * Is this Tween currently seeking?\r\n         * This boolean is toggled in the `Tween.seek` method.\r\n         * When a tween is seeking it will not dispatch any events or callbacks.\r\n         *\r\n         * @name Phaser.Tweens.Tween#isSeeking\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.isSeeking = false;\r\n\r\n        /**\r\n         * Time in ms/frames before the 'onComplete' event fires. This never fires if loop = -1 (as it never completes)\r\n         *\r\n         * @name Phaser.Tweens.Tween#completeDelay\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.completeDelay = 0;\r\n\r\n        /**\r\n         * Countdown timer (used by timeline offset, loopDelay and completeDelay)\r\n         *\r\n         * @name Phaser.Tweens.Tween#countdown\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.countdown = 0;\r\n\r\n        /**\r\n         * Set only if this Tween is part of a Timeline.\r\n         *\r\n         * @name Phaser.Tweens.Tween#offset\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.offset = 0;\r\n\r\n        /**\r\n         * Set only if this Tween is part of a Timeline. The calculated offset amount.\r\n         *\r\n         * @name Phaser.Tweens.Tween#calculatedOffset\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.calculatedOffset = 0;\r\n\r\n        /**\r\n         * The current state of the tween\r\n         *\r\n         * @name Phaser.Tweens.Tween#state\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.state = TWEEN_CONST.PENDING_ADD;\r\n\r\n        /**\r\n         * The state of the tween when it was paused (used by Resume)\r\n         *\r\n         * @name Phaser.Tweens.Tween#_pausedState\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._pausedState = TWEEN_CONST.INIT;\r\n\r\n        /**\r\n         * Does the Tween start off paused? (if so it needs to be started with Tween.play)\r\n         *\r\n         * @name Phaser.Tweens.Tween#paused\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.paused = false;\r\n\r\n        /**\r\n         * Elapsed time in ms/frames of this run through the Tween.\r\n         *\r\n         * @name Phaser.Tweens.Tween#elapsed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.elapsed = 0;\r\n\r\n        /**\r\n         * Total elapsed time in ms/frames of the entire Tween, including looping.\r\n         *\r\n         * @name Phaser.Tweens.Tween#totalElapsed\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalElapsed = 0;\r\n\r\n        /**\r\n         * Time in ms/frames for the whole Tween to play through once, excluding loop amounts and loop delays.\r\n         *\r\n         * @name Phaser.Tweens.Tween#duration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * Value between 0 and 1. The amount through the Tween, excluding loops.\r\n         *\r\n         * @name Phaser.Tweens.Tween#progress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Time in ms/frames for the Tween to complete (including looping)\r\n         *\r\n         * @name Phaser.Tweens.Tween#totalDuration\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalDuration = 0;\r\n\r\n        /**\r\n         * Value between 0 and 1. The amount through the entire Tween, including looping.\r\n         *\r\n         * @name Phaser.Tweens.Tween#totalProgress\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.totalProgress = 0;\r\n\r\n        /**\r\n         * An object containing the different Tween callback functions.\r\n         * \r\n         * You can either set these in the Tween config, or by calling the `Tween.setCallback` method.\r\n         * \r\n         * `onActive` When the Tween is moved from the pending to the active list in the Tween Manager, even if playback paused.\r\n         * `onStart` When the Tween starts playing after a delayed state. Will happen at the same time as `onActive` if it has no delay.\r\n         * `onYoyo` When a TweenData starts a yoyo. This happens _after_ the `hold` delay expires, if set.\r\n         * `onRepeat` When a TweenData repeats playback. This happens _after_ the `repeatDelay` expires, if set.\r\n         * `onComplete` When the Tween finishes playback fully or `Tween.stop` is called. Never invoked if tween is set to repeat infinitely.\r\n         * `onUpdate` When a TweenData updates a property on a source target during playback.\r\n         * `onLoop` When a Tween loops. This happens _after_ the `loopDelay` expires, if set.\r\n         *\r\n         * @name Phaser.Tweens.Tween#callbacks\r\n         * @type {object}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbacks = {\r\n            onActive: null,\r\n            onComplete: null,\r\n            onLoop: null,\r\n            onRepeat: null,\r\n            onStart: null,\r\n            onUpdate: null,\r\n            onYoyo: null\r\n        };\r\n\r\n        /**\r\n         * The context in which all callbacks are invoked.\r\n         *\r\n         * @name Phaser.Tweens.Tween#callbackScope\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.callbackScope;\r\n    },\r\n\r\n    /**\t\r\n     * Returns the current value of the specified Tween Data.\r\n     *\r\n     * @method Phaser.Tweens.Tween#getValue\r\n     * @since 3.0.0\r\n     * \r\n     * @param {integer} [index=0] - The Tween Data to return the value from.\r\n     *\r\n     * @return {number} The value of the requested Tween Data.\r\n     */\t\r\n    getValue: function (index)\r\n    {\r\n        if (index === undefined) { index = 0; }\r\n\r\n        return this.data[index].current;\r\n    },\r\n\r\n    /**\r\n     * Set the scale the time applied to this Tween. A value of 1 runs in real-time. A value of 0.5 runs 50% slower, and so on.\r\n     *\r\n     * @method Phaser.Tweens.Tween#setTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The scale factor for timescale.\r\n     *\r\n     * @return {this} - This Tween instance.\r\n     */\r\n    setTimeScale: function (value)\r\n    {\r\n        this.timeScale = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the scale of the time applied to this Tween.\r\n     *\r\n     * @method Phaser.Tweens.Tween#getTimeScale\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The timescale of this tween (between 0 and 1)\r\n     */\r\n    getTimeScale: function ()\r\n    {\r\n        return this.timeScale;\r\n    },\r\n\r\n    /**\r\n     * Checks if the Tween is currently active.\r\n     *\r\n     * @method Phaser.Tweens.Tween#isPlaying\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Tween is active, otherwise `false`.\r\n     */\r\n    isPlaying: function ()\r\n    {\r\n        return (this.state === TWEEN_CONST.ACTIVE);\r\n    },\r\n\r\n    /**\r\n     * Checks if the Tween is currently paused.\r\n     *\r\n     * @method Phaser.Tweens.Tween#isPaused\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the Tween is paused, otherwise `false`.\r\n     */\r\n    isPaused: function ()\r\n    {\r\n        return (this.state === TWEEN_CONST.PAUSED);\r\n    },\r\n\r\n    /**\r\n     * See if this Tween is currently acting upon the given target.\r\n     *\r\n     * @method Phaser.Tweens.Tween#hasTarget\r\n     * @since 3.0.0\r\n     *\r\n     * @param {object} target - The target to check against this Tween.\r\n     *\r\n     * @return {boolean} `true` if the given target is a target of this Tween, otherwise `false`.\r\n     */\r\n    hasTarget: function (target)\r\n    {\r\n        return (this.targets.indexOf(target) !== -1);\r\n    },\r\n\r\n    /**\r\n     * Updates the 'end' value of the given property across all matching targets.\r\n     * \r\n     * Calling this does not adjust the duration of the tween, or the current progress.\r\n     * \r\n     * You can optionally tell it to set the 'start' value to be the current value (before the change).\r\n     *\r\n     * @method Phaser.Tweens.Tween#updateTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The property to set the new value for.\r\n     * @param {*} value - The new value of the property.\r\n     * @param {boolean} [startToCurrent=false] - Should this change set the start value to be the current value?\r\n     *\r\n     * @return {this} - This Tween instance.\r\n     */\r\n    updateTo: function (key, value, startToCurrent)\r\n    {\r\n        if (startToCurrent === undefined) { startToCurrent = false; }\r\n\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tweenData = this.data[i];\r\n\r\n            if (tweenData.key === key)\r\n            {\r\n                tweenData.end = value;\r\n\r\n                if (startToCurrent)\r\n                {\r\n                    tweenData.start = tweenData.current;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Restarts the tween from the beginning.\r\n     *\r\n     * @method Phaser.Tweens.Tween#restart\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    restart: function ()\r\n    {\r\n        //  Reset these so they're ready for the next update\r\n        this.elapsed = 0;\r\n        this.progress = 0;\r\n        this.totalElapsed = 0;\r\n        this.totalProgress = 0;\r\n\r\n        if (this.state === TWEEN_CONST.ACTIVE)\r\n        {\r\n            return this.seek(0);\r\n        }\r\n        else if (this.state === TWEEN_CONST.REMOVED)\r\n        {\r\n            this.seek(0);\r\n            this.parent.makeActive(this);\r\n\r\n            return this;\r\n        }\r\n        else if (this.state === TWEEN_CONST.PENDING_ADD)\r\n        {\r\n            return this;\r\n        }\r\n        else\r\n        {\r\n            return this.play();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method that calculates the overall duration of the Tween.\r\n     *\r\n     * @method Phaser.Tweens.Tween#calcDuration\r\n     * @since 3.0.0\r\n     */\r\n    calcDuration: function ()\r\n    {\r\n        var maxDuration = 0;\r\n        var minDelay = MATH_CONST.MAX_SAFE_INTEGER;\r\n\r\n        var data = this.data;\r\n\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tweenData = data[i];\r\n\r\n            //  Set t1 (duration + hold + yoyo)\r\n            tweenData.t1 = tweenData.duration + tweenData.hold;\r\n\r\n            if (tweenData.yoyo)\r\n            {\r\n                tweenData.t1 += tweenData.duration;\r\n            }\r\n\r\n            //  Set t2 (repeatDelay + duration + hold + yoyo)\r\n            tweenData.t2 = tweenData.t1 + tweenData.repeatDelay;\r\n\r\n            //  Total Duration\r\n            tweenData.totalDuration = tweenData.delay + tweenData.t1;\r\n\r\n            if (tweenData.repeat === -1)\r\n            {\r\n                tweenData.totalDuration += (tweenData.t2 * 999999999999);\r\n            }\r\n            else if (tweenData.repeat > 0)\r\n            {\r\n                tweenData.totalDuration += (tweenData.t2 * tweenData.repeat);\r\n            }\r\n\r\n            if (tweenData.totalDuration > maxDuration)\r\n            {\r\n                //  Get the longest TweenData from the Tween, used to calculate the Tween TD\r\n                maxDuration = tweenData.totalDuration;\r\n            }\r\n\r\n            if (tweenData.delay < minDelay)\r\n            {\r\n                minDelay = tweenData.delay;\r\n            }\r\n        }\r\n\r\n        //  Excludes loop values\r\n\r\n        //  If duration has been set to 0 then we give it a super-low value so that it always\r\n        //  renders at least 1 frame, but no more, without causing divided by zero errors elsewhere.\r\n        this.duration = Math.max(maxDuration, 0.001);\r\n\r\n        this.loopCounter = (this.loop === -1) ? 999999999999 : this.loop;\r\n\r\n        if (this.loopCounter > 0)\r\n        {\r\n            this.totalDuration = this.duration + this.completeDelay + ((this.duration + this.loopDelay) * this.loopCounter);\r\n        }\r\n        else\r\n        {\r\n            this.totalDuration = this.duration + this.completeDelay;\r\n        }\r\n\r\n        //  How long before this Tween starts playback?\r\n        this.startDelay = minDelay;\r\n    },\r\n\r\n    /**\r\n     * Called by TweenManager.preUpdate as part of its loop to check pending and active tweens.\r\n     * Should not be called directly.\r\n     *\r\n     * @method Phaser.Tweens.Tween#init\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Returns `true` if this Tween should be moved from the pending list to the active list by the Tween Manager.\r\n     */\r\n    init: function ()\r\n    {\r\n        //  You can't have a paused Tween if it's part of a Timeline\r\n        if (this.paused && !this.parentIsTimeline)\r\n        {\r\n            this.state = TWEEN_CONST.PENDING_ADD;\r\n            this._pausedState = TWEEN_CONST.INIT;\r\n\r\n            return false;\r\n        }\r\n\r\n        var data = this.data;\r\n        var totalTargets = this.totalTargets;\r\n\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tweenData = data[i];\r\n            var target = tweenData.target;\r\n            var gen = tweenData.gen;\r\n            var key = tweenData.key;\r\n            var targetIndex = tweenData.index;\r\n\r\n            //  Old function signature: i, totalTargets, target\r\n            //  New function signature: target, key, value, index, total, tween\r\n\r\n            tweenData.delay = gen.delay(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.duration = Math.max(gen.duration(target, key, 0, targetIndex, totalTargets, this), 0.001);\r\n            tweenData.hold = gen.hold(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.repeat = gen.repeat(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.repeatDelay = gen.repeatDelay(target, key, 0, targetIndex, totalTargets, this);\r\n        }\r\n\r\n        this.calcDuration();\r\n\r\n        this.progress = 0;\r\n        this.totalProgress = 0;\r\n        this.elapsed = 0;\r\n        this.totalElapsed = 0;\r\n\r\n        this.state = TWEEN_CONST.INIT;\r\n\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * Internal method that makes this Tween active within the TweenManager\r\n     * and emits the onActive event and callback.\r\n     *\r\n     * @method Phaser.Tweens.Tween#makeActive\r\n     * @fires Phaser.Tweens.Events#TWEEN_ACTIVE\r\n     * @since 3.19.0\r\n     */\r\n    makeActive: function ()\r\n    {\r\n        this.parent.makeActive(this);\r\n\r\n        this.dispatchTweenEvent(Events.TWEEN_ACTIVE, this.callbacks.onActive);\r\n    },\r\n\r\n    /**\r\n     * Internal method that advances to the next state of the Tween during playback.\r\n     *\r\n     * @method Phaser.Tweens.Tween#nextState\r\n     * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n     * @fires Phaser.Tweens.Events#TWEEN_LOOP\r\n     * @since 3.0.0\r\n     */\r\n    nextState: function ()\r\n    {\r\n        if (this.loopCounter > 0)\r\n        {\r\n            this.elapsed = 0;\r\n            this.progress = 0;\r\n            this.loopCounter--;\r\n\r\n            this.resetTweenData(true);\r\n\r\n            if (this.loopDelay > 0)\r\n            {\r\n                this.countdown = this.loopDelay;\r\n                this.state = TWEEN_CONST.LOOP_DELAY;\r\n            }\r\n            else\r\n            {\r\n                this.state = TWEEN_CONST.ACTIVE;\r\n\r\n                this.dispatchTweenEvent(Events.TWEEN_LOOP, this.callbacks.onLoop);\r\n            }\r\n        }\r\n        else if (this.completeDelay > 0)\r\n        {\r\n            this.state = TWEEN_CONST.COMPLETE_DELAY;\r\n\r\n            this.countdown = this.completeDelay;\r\n        }\r\n        else\r\n        {\r\n            this.state = TWEEN_CONST.PENDING_REMOVE;\r\n\r\n            this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Pauses the Tween immediately. Use `resume` to continue playback.\r\n     *\r\n     * @method Phaser.Tweens.Tween#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} - This Tween instance.\r\n     */\r\n    pause: function ()\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            return this;\r\n        }\r\n\r\n        this.paused = true;\r\n\r\n        this._pausedState = this.state;\r\n\r\n        this.state = TWEEN_CONST.PAUSED;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Starts a Tween playing.\r\n     * \r\n     * You only need to call this method if you have configured the tween to be paused on creation.\r\n     * \r\n     * If the Tween is already playing, calling this method again will have no effect. If you wish to\r\n     * restart the Tween, use `Tween.restart` instead.\r\n     * \r\n     * Calling this method after the Tween has completed will start the Tween playing again from the start.\r\n     * This is the same as calling `Tween.seek(0)` and then `Tween.play()`.\r\n     *\r\n     * @method Phaser.Tweens.Tween#play\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} [resetFromTimeline=false] - Is this Tween being played as part of a Timeline?\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    play: function (resetFromTimeline)\r\n    {\r\n        if (resetFromTimeline === undefined) { resetFromTimeline = false; }\r\n\r\n        var state = this.state;\r\n\r\n        if (state === TWEEN_CONST.INIT && !this.parentIsTimeline)\r\n        {\r\n            this.resetTweenData(false);\r\n\r\n            this.state = TWEEN_CONST.ACTIVE;\r\n\r\n            return this;\r\n        }\r\n        else if (state === TWEEN_CONST.ACTIVE || (state === TWEEN_CONST.PENDING_ADD && this._pausedState === TWEEN_CONST.PENDING_ADD))\r\n        {\r\n            return this;\r\n        }\r\n        else if (!this.parentIsTimeline && (state === TWEEN_CONST.PENDING_REMOVE || state === TWEEN_CONST.REMOVED))\r\n        {\r\n            this.seek(0);\r\n            this.parent.makeActive(this);\r\n\r\n            return this;\r\n        }\r\n\r\n        if (this.parentIsTimeline)\r\n        {\r\n            this.resetTweenData(resetFromTimeline);\r\n\r\n            if (this.calculatedOffset === 0)\r\n            {\r\n                this.state = TWEEN_CONST.ACTIVE;\r\n            }\r\n            else\r\n            {\r\n                this.countdown = this.calculatedOffset;\r\n\r\n                this.state = TWEEN_CONST.OFFSET_DELAY;\r\n            }\r\n        }\r\n        else if (this.paused)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.makeActive();\r\n        }\r\n        else\r\n        {\r\n            this.resetTweenData(resetFromTimeline);\r\n\r\n            this.state = TWEEN_CONST.ACTIVE;\r\n\r\n            this.makeActive();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that resets all of the Tween Data, including the progress and elapsed values.\r\n     *\r\n     * @method Phaser.Tweens.Tween#resetTweenData\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} resetFromLoop - Has this method been called as part of a loop?\r\n     */\r\n    resetTweenData: function (resetFromLoop)\r\n    {\r\n        var data = this.data;\r\n        var total = this.totalData;\r\n        var totalTargets = this.totalTargets;\r\n\r\n        for (var i = 0; i < total; i++)\r\n        {\r\n            var tweenData = data[i];\r\n\r\n            var target = tweenData.target;\r\n            var key = tweenData.key;\r\n            var targetIndex = tweenData.index;\r\n\r\n            tweenData.progress = 0;\r\n            tweenData.elapsed = 0;\r\n\r\n            tweenData.repeatCounter = (tweenData.repeat === -1) ? 999999999999 : tweenData.repeat;\r\n\r\n            if (resetFromLoop)\r\n            {\r\n                tweenData.start = tweenData.getStartValue(target, key, tweenData.start, targetIndex, totalTargets, this);\r\n\r\n                tweenData.end = tweenData.getEndValue(target, key, tweenData.end, targetIndex, totalTargets, this);\r\n\r\n                tweenData.current = tweenData.start;\r\n\r\n                tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\r\n            }\r\n            else\r\n            {\r\n                tweenData.state = TWEEN_CONST.PENDING_RENDER;\r\n            }\r\n\r\n            if (tweenData.delay > 0)\r\n            {\r\n                tweenData.elapsed = tweenData.delay;\r\n\r\n                tweenData.state = TWEEN_CONST.DELAY;\r\n            }\r\n\r\n            if (tweenData.getActiveValue)\r\n            {\r\n                target[key] = tweenData.getActiveValue(tweenData.target, tweenData.key, tweenData.start);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Resumes the playback of a previously paused Tween.\r\n     *\r\n     * @method Phaser.Tweens.Tween#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} - This Tween instance.\r\n     */\r\n    resume: function ()\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            this.paused = false;\r\n\r\n            this.state = this._pausedState;\r\n        }\r\n        else\r\n        {\r\n            this.play();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Seeks to a specific point in the Tween.\r\n     * \r\n     * **Note:** You cannot seek a Tween that repeats or loops forever, or that has an unusually long total duration.\r\n     * \r\n     * The given position is a value between 0 and 1 which represents how far through the Tween to seek to.\r\n     * A value of 0.5 would seek to half-way through the Tween, where-as a value of zero would seek to the start.\r\n     * \r\n     * Note that the seek takes the entire duration of the Tween into account, including delays, loops and repeats.\r\n     * For example, a Tween that lasts for 2 seconds, but that loops 3 times, would have a total duration of 6 seconds,\r\n     * so seeking to 0.5 would seek to 3 seconds into the Tween, as that's half-way through its _entire_ duration.\r\n     * \r\n     * Seeking works by resetting the Tween to its initial values and then iterating through the Tween at `delta`\r\n     * jumps per step. The longer the Tween, the longer this can take.\r\n     *\r\n     * @method Phaser.Tweens.Tween#seek\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} toPosition - A value between 0 and 1 which represents the progress point to seek to.\r\n     * @param {number} [delta=16.6] - The size of each step when seeking through the Tween. A higher value completes faster but at a cost of less precision.\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    seek: function (toPosition, delta)\r\n    {\r\n        if (delta === undefined) { delta = 16.6; }\r\n\r\n        if (this.totalDuration >= 3600000)\r\n        {\r\n            console.warn('Tween.seek duration too long');\r\n\r\n            return this;\r\n        }\r\n\r\n        if (this.state === TWEEN_CONST.REMOVED)\r\n        {\r\n            this.makeActive();\r\n        }\r\n\r\n        this.elapsed = 0;\r\n        this.progress = 0;\r\n        this.totalElapsed = 0;\r\n        this.totalProgress = 0;\r\n\r\n        var data = this.data;\r\n        var totalTargets = this.totalTargets;\r\n\r\n        for (var i = 0; i < this.totalData; i++)\r\n        {\r\n            var tweenData = data[i];\r\n            var target = tweenData.target;\r\n            var gen = tweenData.gen;\r\n            var key = tweenData.key;\r\n            var targetIndex = tweenData.index;\r\n\r\n            tweenData.progress = 0;\r\n            tweenData.elapsed = 0;\r\n\r\n            tweenData.repeatCounter = (tweenData.repeat === -1) ? 999999999999 : tweenData.repeat;\r\n\r\n            //  Old function signature: i, totalTargets, target\r\n            //  New function signature: target, key, value, index, total, tween\r\n\r\n            tweenData.delay = gen.delay(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.duration = Math.max(gen.duration(target, key, 0, targetIndex, totalTargets, this), 0.001);\r\n            tweenData.hold = gen.hold(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.repeat = gen.repeat(target, key, 0, targetIndex, totalTargets, this);\r\n            tweenData.repeatDelay = gen.repeatDelay(target, key, 0, targetIndex, totalTargets, this);\r\n\r\n            tweenData.current = tweenData.start;\r\n            tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\r\n\r\n            this.updateTweenData(this, tweenData, 0, targetIndex, totalTargets);\r\n\r\n            if (tweenData.delay > 0)\r\n            {\r\n                tweenData.elapsed = tweenData.delay;\r\n                tweenData.state = TWEEN_CONST.DELAY;\r\n            }\r\n        }\r\n\r\n        this.calcDuration();\r\n\r\n        var wasPaused = false;\r\n\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            wasPaused = true;\r\n\r\n            this.state = TWEEN_CONST.ACTIVE;\r\n        }\r\n\r\n        this.isSeeking = true;\r\n\r\n        do\r\n        {\r\n            this.update(0, delta);\r\n\r\n        } while (this.totalProgress < toPosition);\r\n\r\n        this.isSeeking = false;\r\n\r\n        if (wasPaused)\r\n        {\r\n            this.state = TWEEN_CONST.PAUSED;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets an event based callback to be invoked during playback.\r\n     * \r\n     * Calling this method will replace a previously set callback for the given type, if any exists.\r\n     * \r\n     * The types available are:\r\n     * \r\n     * `onActive` When the Tween is moved from the pending to the active list in the Tween Manager, even if playback paused.\r\n     * `onStart` When the Tween starts playing after a delayed state. Will happen at the same time as `onActive` if it has no delay.\r\n     * `onYoyo` When a TweenData starts a yoyo. This happens _after_ the `hold` delay expires, if set.\r\n     * `onRepeat` When a TweenData repeats playback. This happens _after_ the `repeatDelay` expires, if set.\r\n     * `onComplete` When the Tween finishes playback fully or `Tween.stop` is called. Never invoked if tween is set to repeat infinitely.\r\n     * `onUpdate` When a TweenData updates a property on a source target during playback.\r\n     * `onLoop` When a Tween loops. This happens _after_ the `loopDelay` expires, if set.\r\n     *\r\n     * @method Phaser.Tweens.Tween#setCallback\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} type - Type of the callback to set.\r\n     * @param {function} callback - The function to invoke when this callback happens.\r\n     * @param {array} [params] - An array of parameters for specified callbacks types.\r\n     * @param {any} [scope] - The context the callback will be invoked in.\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    setCallback: function (type, callback, params, scope)\r\n    {\r\n        this.callbacks[type] = { func: callback, scope: scope, params: params };\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Flags the Tween as being complete, whatever stage of progress it is at.\r\n     *\r\n     * If an onComplete callback has been defined it will automatically invoke it, unless a `delay`\r\n     * argument is provided, in which case the Tween will delay for that period of time before calling the callback.\r\n     *\r\n     * If you don't need a delay, or have an onComplete callback, then call `Tween.stop` instead.\r\n     *\r\n     * @method Phaser.Tweens.Tween#complete\r\n     * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n     * @since 3.2.0\r\n     *\r\n     * @param {number} [delay=0] - The time to wait before invoking the complete callback. If zero it will fire immediately.\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    complete: function (delay)\r\n    {\r\n        if (delay === undefined) { delay = 0; }\r\n\r\n        if (delay)\r\n        {\r\n            this.state = TWEEN_CONST.COMPLETE_DELAY;\r\n\r\n            this.countdown = delay;\r\n        }\r\n        else\r\n        {\r\n            this.state = TWEEN_CONST.PENDING_REMOVE;\r\n\r\n            this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Immediately removes this Tween from the TweenManager and all of its internal arrays,\r\n     * no matter what stage it as it. Then sets the tween state to `REMOVED`.\r\n     * \r\n     * You should dispose of your reference to this tween after calling this method, to\r\n     * free it from memory.\r\n     *\r\n     * @method Phaser.Tweens.Tween#remove\r\n     * @since 3.17.0\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    remove: function ()\r\n    {\r\n        this.parent.remove(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stops the Tween immediately, whatever stage of progress it is at and flags it for removal by the TweenManager.\r\n     *\r\n     * @method Phaser.Tweens.Tween#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [resetTo] - If you want to seek the tween, provide a value between 0 and 1.\r\n     *\r\n     * @return {this} This Tween instance.\r\n     */\r\n    stop: function (resetTo)\r\n    {\r\n        if (this.state === TWEEN_CONST.ACTIVE)\r\n        {\r\n            if (resetTo !== undefined)\r\n            {\r\n                this.seek(resetTo);\r\n            }\r\n        }\r\n\r\n        if (this.state !== TWEEN_CONST.REMOVED)\r\n        {\r\n            if (this.state === TWEEN_CONST.PAUSED || this.state === TWEEN_CONST.PENDING_ADD)\r\n            {\r\n                if (this.parentIsTimeline)\r\n                {\r\n                    this.parent.manager._destroy.push(this);\r\n                    this.parent.manager._toProcess++;\r\n                }\r\n                else\r\n                {\r\n                    this.parent._destroy.push(this);\r\n                    this.parent._toProcess++;\r\n                }\r\n            }\r\n\r\n            this.removeAllListeners();\r\n\r\n            this.state = TWEEN_CONST.PENDING_REMOVE;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that advances the Tween based on the time values.\r\n     *\r\n     * @method Phaser.Tweens.Tween#update\r\n     * @fires Phaser.Tweens.Events#TWEEN_COMPLETE\r\n     * @fires Phaser.Tweens.Events#TWEEN_LOOP\r\n     * @fires Phaser.Tweens.Events#TWEEN_START\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} timestamp - The current time. Either a High Resolution Timer value if it comes from Request Animation Frame, or Date.now if using SetTimeout.\r\n     * @param {number} delta - The delta time in ms since the last frame. This is a smoothed and capped value based on the FPS rate.\r\n     *\r\n     * @return {boolean} Returns `true` if this Tween has finished and should be removed from the Tween Manager, otherwise returns `false`.\r\n     */\r\n    update: function (timestamp, delta)\r\n    {\r\n        if (this.state === TWEEN_CONST.PAUSED)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if (this.useFrames)\r\n        {\r\n            delta = 1 * this.parent.timeScale;\r\n        }\r\n\r\n        delta *= this.timeScale;\r\n\r\n        this.elapsed += delta;\r\n        this.progress = Math.min(this.elapsed / this.duration, 1);\r\n\r\n        this.totalElapsed += delta;\r\n        this.totalProgress = Math.min(this.totalElapsed / this.totalDuration, 1);\r\n\r\n        switch (this.state)\r\n        {\r\n            case TWEEN_CONST.ACTIVE:\r\n\r\n                if (!this.hasStarted && !this.isSeeking)\r\n                {\r\n                    this.startDelay -= delta;\r\n        \r\n                    if (this.startDelay <= 0)\r\n                    {\r\n                        this.hasStarted = true;\r\n\r\n                        this.dispatchTweenEvent(Events.TWEEN_START, this.callbacks.onStart);\r\n                    }\r\n                }\r\n\r\n                var stillRunning = false;\r\n\r\n                for (var i = 0; i < this.totalData; i++)\r\n                {\r\n                    var tweenData = this.data[i];\r\n\r\n                    if (this.updateTweenData(this, tweenData, delta))\r\n                    {\r\n                        stillRunning = true;\r\n                    }\r\n                }\r\n\r\n                //  Anything still running? If not, we're done\r\n                if (!stillRunning)\r\n                {\r\n                    this.nextState();\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.LOOP_DELAY:\r\n\r\n                this.countdown -= delta;\r\n\r\n                if (this.countdown <= 0)\r\n                {\r\n                    this.state = TWEEN_CONST.ACTIVE;\r\n\r\n                    this.dispatchTweenEvent(Events.TWEEN_LOOP, this.callbacks.onLoop);\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.OFFSET_DELAY:\r\n\r\n                this.countdown -= delta;\r\n\r\n                if (this.countdown <= 0)\r\n                {\r\n                    this.state = TWEEN_CONST.ACTIVE;\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.COMPLETE_DELAY:\r\n\r\n                this.countdown -= delta;\r\n\r\n                if (this.countdown <= 0)\r\n                {\r\n                    this.state = TWEEN_CONST.PENDING_REMOVE;\r\n\r\n                    this.dispatchTweenEvent(Events.TWEEN_COMPLETE, this.callbacks.onComplete);\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        return (this.state === TWEEN_CONST.PENDING_REMOVE);\r\n    },\r\n\r\n    /**\r\n     * Internal method that will emit a TweenData based Event and invoke the given callback.\r\n     *\r\n     * @method Phaser.Tweens.Tween#dispatchTweenDataEvent\r\n     * @since 3.19.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n     * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n     * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData object that caused this event.\r\n     */\r\n    dispatchTweenDataEvent: function (event, callback, tweenData)\r\n    {\r\n        if (!this.isSeeking)\r\n        {\r\n            this.emit(event, this, tweenData.key, tweenData.target, tweenData.current, tweenData.previous);\r\n\r\n            if (callback)\r\n            {\r\n                callback.params[1] = tweenData.target;\r\n\r\n                callback.func.apply(callback.scope, callback.params);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method that will emit a Tween based Event and invoke the given callback.\r\n     *\r\n     * @method Phaser.Tweens.Tween#dispatchTweenEvent\r\n     * @since 3.19.0\r\n     *\r\n     * @param {Phaser.Types.Tweens.Event} event - The Event to be dispatched.\r\n     * @param {function} callback - The callback to be invoked. Can be `null` or `undefined` to skip invocation.\r\n     */\r\n    dispatchTweenEvent: function (event, callback)\r\n    {\r\n        if (!this.isSeeking)\r\n        {\r\n            this.emit(event, this, this.targets);\r\n\r\n            if (callback)\r\n            {\r\n                callback.params[1] = this.targets;\r\n    \r\n                callback.func.apply(callback.scope, callback.params);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Internal method used as part of the playback process that sets a tween to play in reverse.\r\n     *\r\n     * @method Phaser.Tweens.Tween#setStateFromEnd\r\n     * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n     * @fires Phaser.Tweens.Events#TWEEN_YOYO\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n     * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n     * @param {number} diff - Any extra time that needs to be accounted for in the elapsed and progress values.\r\n     *\r\n     * @return {integer} The state of this Tween.\r\n     */\r\n    setStateFromEnd: function (tween, tweenData, diff)\r\n    {\r\n        if (tweenData.yoyo)\r\n        {\r\n            //  We've hit the end of a Playing Forward TweenData and we have a yoyo\r\n\r\n            //  Account for any extra time we got from the previous frame\r\n            tweenData.elapsed = diff;\r\n            tweenData.progress = diff / tweenData.duration;\r\n\r\n            if (tweenData.flipX)\r\n            {\r\n                tweenData.target.toggleFlipX();\r\n            }\r\n\r\n            if (tweenData.flipY)\r\n            {\r\n                tweenData.target.toggleFlipY();\r\n            }\r\n\r\n            this.dispatchTweenDataEvent(Events.TWEEN_YOYO, tween.callbacks.onYoyo, tweenData);\r\n\r\n            tweenData.start = tweenData.getStartValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\r\n\r\n            return TWEEN_CONST.PLAYING_BACKWARD;\r\n        }\r\n        else if (tweenData.repeatCounter > 0)\r\n        {\r\n            //  We've hit the end of a Playing Forward TweenData and we have a Repeat.\r\n            //  So we're going to go right back to the start to repeat it again.\r\n\r\n            tweenData.repeatCounter--;\r\n\r\n            //  Account for any extra time we got from the previous frame\r\n            tweenData.elapsed = diff;\r\n            tweenData.progress = diff / tweenData.duration;\r\n\r\n            if (tweenData.flipX)\r\n            {\r\n                tweenData.target.toggleFlipX();\r\n            }\r\n\r\n            if (tweenData.flipY)\r\n            {\r\n                tweenData.target.toggleFlipY();\r\n            }\r\n\r\n            tweenData.start = tweenData.getStartValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\r\n\r\n            tweenData.end = tweenData.getEndValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\r\n\r\n            //  Delay?\r\n            if (tweenData.repeatDelay > 0)\r\n            {\r\n                tweenData.elapsed = tweenData.repeatDelay - diff;\r\n\r\n                tweenData.current = tweenData.start;\r\n\r\n                tweenData.target[tweenData.key] = tweenData.current;\r\n\r\n                return TWEEN_CONST.REPEAT_DELAY;\r\n            }\r\n            else\r\n            {\r\n                this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\r\n\r\n                return TWEEN_CONST.PLAYING_FORWARD;\r\n            }\r\n        }\r\n\r\n        return TWEEN_CONST.COMPLETE;\r\n    },\r\n\r\n    /**\r\n     * Internal method used as part of the playback process that sets a tween to play from the start.\r\n     *\r\n     * @method Phaser.Tweens.Tween#setStateFromStart\r\n     * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n     * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n     * @param {number} diff - Any extra time that needs to be accounted for in the elapsed and progress values.\r\n     *\r\n     * @return {integer} The state of this Tween.\r\n     */\r\n    setStateFromStart: function (tween, tweenData, diff)\r\n    {\r\n        if (tweenData.repeatCounter > 0)\r\n        {\r\n            tweenData.repeatCounter--;\r\n\r\n            //  Account for any extra time we got from the previous frame\r\n            tweenData.elapsed = diff;\r\n            tweenData.progress = diff / tweenData.duration;\r\n\r\n            if (tweenData.flipX)\r\n            {\r\n                tweenData.target.toggleFlipX();\r\n            }\r\n\r\n            if (tweenData.flipY)\r\n            {\r\n                tweenData.target.toggleFlipY();\r\n            }\r\n\r\n            tweenData.end = tweenData.getEndValue(tweenData.target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\r\n\r\n            //  Delay?\r\n            if (tweenData.repeatDelay > 0)\r\n            {\r\n                tweenData.elapsed = tweenData.repeatDelay - diff;\r\n\r\n                tweenData.current = tweenData.start;\r\n\r\n                tweenData.target[tweenData.key] = tweenData.current;\r\n\r\n                return TWEEN_CONST.REPEAT_DELAY;\r\n            }\r\n            else\r\n            {\r\n                this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\r\n\r\n                return TWEEN_CONST.PLAYING_FORWARD;\r\n            }\r\n        }\r\n\r\n        return TWEEN_CONST.COMPLETE;\r\n    },\r\n\r\n    /**\r\n     * Internal method that advances the TweenData based on the time value given.\r\n     *\r\n     * @method Phaser.Tweens.Tween#updateTweenData\r\n     * @fires Phaser.Tweens.Events#TWEEN_UPDATE\r\n     * @fires Phaser.Tweens.Events#TWEEN_REPEAT\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Tweens.Tween} tween - The Tween to update.\r\n     * @param {Phaser.Types.Tweens.TweenDataConfig} tweenData - The TweenData property to update.\r\n     * @param {number} delta - Either a value in ms, or 1 if Tween.useFrames is true.\r\n     *\r\n     * @return {boolean} True if the tween is not complete (e.g., playing), or false if the tween is complete.\r\n     */\r\n    updateTweenData: function (tween, tweenData, delta)\r\n    {\r\n        var target = tweenData.target;\r\n\r\n        switch (tweenData.state)\r\n        {\r\n            case TWEEN_CONST.PLAYING_FORWARD:\r\n            case TWEEN_CONST.PLAYING_BACKWARD:\r\n\r\n                if (!target)\r\n                {\r\n                    tweenData.state = TWEEN_CONST.COMPLETE;\r\n                    break;\r\n                }\r\n\r\n                var elapsed = tweenData.elapsed;\r\n                var duration = tweenData.duration;\r\n                var diff = 0;\r\n\r\n                elapsed += delta;\r\n\r\n                if (elapsed > duration)\r\n                {\r\n                    diff = elapsed - duration;\r\n                    elapsed = duration;\r\n                }\r\n\r\n                var forward = (tweenData.state === TWEEN_CONST.PLAYING_FORWARD);\r\n                var progress = elapsed / duration;\r\n\r\n                tweenData.elapsed = elapsed;\r\n                tweenData.progress = progress;\r\n                tweenData.previous = tweenData.current;\r\n\r\n                if (progress === 1)\r\n                {\r\n                    if (forward)\r\n                    {\r\n                        tweenData.current = tweenData.end;\r\n                        target[tweenData.key] = tweenData.end;\r\n\r\n                        if (tweenData.hold > 0)\r\n                        {\r\n                            tweenData.elapsed = tweenData.hold - diff;\r\n\r\n                            tweenData.state = TWEEN_CONST.HOLD_DELAY;\r\n                        }\r\n                        else\r\n                        {\r\n                            tweenData.state = this.setStateFromEnd(tween, tweenData, diff);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        tweenData.current = tweenData.start;\r\n                        target[tweenData.key] = tweenData.start;\r\n\r\n                        tweenData.state = this.setStateFromStart(tween, tweenData, diff);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    var v = (forward) ? tweenData.ease(progress) : tweenData.ease(1 - progress);\r\n\r\n                    tweenData.current = tweenData.start + ((tweenData.end - tweenData.start) * v);\r\n\r\n                    target[tweenData.key] = tweenData.current;\r\n                }\r\n\r\n                this.dispatchTweenDataEvent(Events.TWEEN_UPDATE, tween.callbacks.onUpdate, tweenData);\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.DELAY:\r\n\r\n                tweenData.elapsed -= delta;\r\n\r\n                if (tweenData.elapsed <= 0)\r\n                {\r\n                    tweenData.elapsed = Math.abs(tweenData.elapsed);\r\n\r\n                    tweenData.state = TWEEN_CONST.PENDING_RENDER;\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.REPEAT_DELAY:\r\n\r\n                tweenData.elapsed -= delta;\r\n\r\n                if (tweenData.elapsed <= 0)\r\n                {\r\n                    tweenData.elapsed = Math.abs(tweenData.elapsed);\r\n\r\n                    tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\r\n\r\n                    this.dispatchTweenDataEvent(Events.TWEEN_REPEAT, tween.callbacks.onRepeat, tweenData);\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.HOLD_DELAY:\r\n\r\n                tweenData.elapsed -= delta;\r\n\r\n                if (tweenData.elapsed <= 0)\r\n                {\r\n                    tweenData.state = this.setStateFromEnd(tween, tweenData, Math.abs(tweenData.elapsed));\r\n                }\r\n\r\n                break;\r\n\r\n            case TWEEN_CONST.PENDING_RENDER:\r\n\r\n                if (target)\r\n                {\r\n                    tweenData.start = tweenData.getStartValue(target, tweenData.key, target[tweenData.key], tweenData.index, tween.totalTargets, tween);\r\n\r\n                    tweenData.end = tweenData.getEndValue(target, tweenData.key, tweenData.start, tweenData.index, tween.totalTargets, tween);\r\n\r\n                    tweenData.current = tweenData.start;\r\n\r\n                    target[tweenData.key] = tweenData.start;\r\n\r\n                    tweenData.state = TWEEN_CONST.PLAYING_FORWARD;\r\n                }\r\n                else\r\n                {\r\n                    tweenData.state = TWEEN_CONST.COMPLETE;\r\n                }\r\n\r\n                break;\r\n        }\r\n\r\n        //  Return TRUE if this TweenData still playing, otherwise return FALSE\r\n        return (tweenData.state !== TWEEN_CONST.COMPLETE);\r\n    }\r\n\r\n});\r\n\r\n//  onActive = 'active' event = When the Tween is moved from the pending to the active list in the manager, even if playback delayed\r\n//  onStart = 'start' event = When the Tween starts playing from a delayed state (will happen same time as onActive if no delay)\r\n//  onYoyo = 'yoyo' event = When the Tween starts a yoyo\r\n//  onRepeat = 'repeat' event = When a TweenData repeats playback (if any)\r\n//  onComplete = 'complete' event = When the Tween finishes all playback (can sometimes never happen if repeat -1), also when 'stop' called\r\n//  onUpdate = 'update' event = When the Tween updates a TweenData during playback (expensive!)\r\n//  onLoop = 'loop' event = Used to loop ALL TweenDatas in a Tween\r\n\r\nTween.TYPES = [\r\n    'onActive',\r\n    'onComplete',\r\n    'onLoop',\r\n    'onRepeat',\r\n    'onStart',\r\n    'onUpdate',\r\n    'onYoyo'\r\n];\r\n\r\n/**\r\n * Creates a new Tween object.\r\n *\r\n * Note: This method will only be available if Tweens have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectFactory#tween\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The Tween configuration.\r\n *\r\n * @return {Phaser.Tweens.Tween} The Tween that was created.\r\n */\r\nGameObjectFactory.register('tween', function (config)\r\n{\r\n    return this.scene.sys.tweens.add(config);\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectFactory context.\r\n//\r\n//  There are several properties available to use:\r\n//\r\n//  this.scene - a reference to the Scene that owns the GameObjectFactory\r\n//  this.displayList - a reference to the Display List the Scene owns\r\n//  this.updateList - a reference to the Update List the Scene owns\r\n\r\n/**\r\n * Creates a new Tween object and returns it.\r\n *\r\n * Note: This method will only be available if Tweens have been built into Phaser.\r\n *\r\n * @method Phaser.GameObjects.GameObjectCreator#tween\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Tweens.TweenBuilderConfig|object} config - The Tween configuration.\r\n *\r\n * @return {Phaser.Tweens.Tween} The Tween that was created.\r\n */\r\nGameObjectCreator.register('tween', function (config)\r\n{\r\n    return this.scene.sys.tweens.create(config);\r\n});\r\n\r\n//  When registering a factory function 'this' refers to the GameObjectCreator context.\r\n\r\nmodule.exports = Tween;\r\n"]},"metadata":{},"sourceType":"script"}