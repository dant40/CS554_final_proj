{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * An Ellipse object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render an Ellipse you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Ellipse\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the ellipse.\r\n * @param {number} [y=0] - The y position of the center of the ellipse.\r\n * @param {number} [width=0] - The width of the ellipse.\r\n * @param {number} [height=0] - The height of the ellipse.\r\n */\n\n\nvar Ellipse = new Class({\n  initialize: function Ellipse(x, y, width, height) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 0;\n    }\n\n    if (height === undefined) {\n      height = 0;\n    }\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.ELLIPSE`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n\n    this.type = GEOM_CONST.ELLIPSE;\n    /**\r\n     * The x position of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#x\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x = x;\n    /**\r\n     * The y position of the center of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#y\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y = y;\n    /**\r\n     * The width of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#width\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#height\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n  },\n\n  /**\r\n   * Check to see if the Ellipse contains the given x / y coordinates.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check within the ellipse.\r\n   * @param {number} y - The y coordinate to check within the ellipse.\r\n   *\r\n   * @return {boolean} True if the coordinates are within the ellipse, otherwise false.\r\n   */\n  contains: function (x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\r\n   * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n   * at 180 degrees around the circle.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [out,$return]\r\n   *\r\n   * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\r\n   * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the ellipse.\r\n   */\n  getPoint: function (position, point) {\n    return GetPoint(this, position, point);\n  },\n\n  /**\r\n   * Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\r\n   * based on the given quantity or stepRate values.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n   * @param {number} [stepRate] - Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the ellipse.\r\n   */\n  getPoints: function (quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n   */\n  getRandomPoint: function (point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets the x, y, width and height of this ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the center of the ellipse.\r\n   * @param {number} y - The y position of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setTo: function (x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Sets this Ellipse to be empty with a width and height of zero.\r\n   * Does not change its position.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setEmpty: function () {\n    this.width = 0;\n    this.height = 0;\n    return this;\n  },\n\n  /**\r\n   * Sets the position of this Ellipse.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setPosition\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x position of the center of the ellipse.\r\n   * @param {number} y - The y position of the center of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setPosition: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n\n  /**\r\n   * Sets the size of this Ellipse.\r\n   * Does not change its position.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} [height=width] - The height of the ellipse.\r\n   *\r\n   * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n   */\n  setSize: function (width, height) {\n    if (height === undefined) {\n      height = width;\n    }\n\n    this.width = width;\n    this.height = height;\n    return this;\n  },\n\n  /**\r\n   * Checks to see if the Ellipse is empty: has a width or height equal to zero.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#isEmpty\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} True if the Ellipse is empty, otherwise false.\r\n   */\n  isEmpty: function () {\n    return this.width <= 0 || this.height <= 0;\n  },\n\n  /**\r\n   * Returns the minor radius of the ellipse. Also known as the Semi Minor Axis.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getMinorRadius\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The minor radius.\r\n   */\n  getMinorRadius: function () {\n    return Math.min(this.width, this.height) / 2;\n  },\n\n  /**\r\n   * Returns the major radius of the ellipse. Also known as the Semi Major Axis.\r\n   *\r\n   * @method Phaser.Geom.Ellipse#getMajorRadius\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The major radius.\r\n   */\n  getMajorRadius: function () {\n    return Math.max(this.width, this.height) / 2;\n  },\n\n  /**\r\n   * The left position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return this.x - this.width / 2;\n    },\n    set: function (value) {\n      this.x = value + this.width / 2;\n    }\n  },\n\n  /**\r\n   * The right position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return this.x + this.width / 2;\n    },\n    set: function (value) {\n      this.x = value - this.width / 2;\n    }\n  },\n\n  /**\r\n   * The top position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return this.y - this.height / 2;\n    },\n    set: function (value) {\n      this.y = value + this.height / 2;\n    }\n  },\n\n  /**\r\n   * The bottom position of the Ellipse.\r\n   *\r\n   * @name Phaser.Geom.Ellipse#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return this.y + this.height / 2;\n    },\n    set: function (value) {\n      this.y = value - this.height / 2;\n    }\n  }\n});\nmodule.exports = Ellipse;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/ellipse/Ellipse.js"],"names":["Class","require","Contains","GetPoint","GetPoints","GEOM_CONST","Random","Ellipse","initialize","x","y","width","height","undefined","type","ELLIPSE","contains","getPoint","position","point","getPoints","quantity","stepRate","output","getRandomPoint","setTo","setEmpty","setPosition","setSize","isEmpty","getMinorRadius","Math","min","getMajorRadius","max","left","get","set","value","right","top","bottom","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * An Ellipse object.\r\n *\r\n * This is a geometry object, containing numerical values and related methods to inspect and modify them.\r\n * It is not a Game Object, in that you cannot add it to the display list, and it has no texture.\r\n * To render an Ellipse you should look at the capabilities of the Graphics class.\r\n *\r\n * @class Ellipse\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x=0] - The x position of the center of the ellipse.\r\n * @param {number} [y=0] - The y position of the center of the ellipse.\r\n * @param {number} [width=0] - The width of the ellipse.\r\n * @param {number} [height=0] - The height of the ellipse.\r\n */\r\nvar Ellipse = new Class({\r\n\r\n    initialize:\r\n\r\n    function Ellipse (x, y, width, height)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 0; }\r\n        if (height === undefined) { height = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.ELLIPSE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.ELLIPSE;\r\n\r\n        /**\r\n         * The x position of the center of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#x\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x = x;\r\n\r\n        /**\r\n         * The y position of the center of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#y\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y = y;\r\n\r\n        /**\r\n         * The width of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#width\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The height of the ellipse.\r\n         *\r\n         * @name Phaser.Geom.Ellipse#height\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n    },\r\n\r\n    /**\r\n     * Check to see if the Ellipse contains the given x / y coordinates.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check within the ellipse.\r\n     * @param {number} y - The y coordinate to check within the ellipse.\r\n     *\r\n     * @return {boolean} True if the coordinates are within the ellipse, otherwise false.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a Point object containing the coordinates of a point on the circumference of the Ellipse\r\n     * based on the given angle normalized to the range 0 to 1. I.e. a value of 0.5 will give the point\r\n     * at 180 degrees around the circle.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [out,$return]\r\n     *\r\n     * @param {number} position - A value between 0 and 1, where 0 equals 0 degrees, 0.5 equals 180 degrees and 1 equals 360 around the ellipse.\r\n     * @param {(Phaser.Geom.Point|object)} [out] - An object to store the return values in. If not given a Point object will be created.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point, or point-like object, containing the coordinates of the point around the ellipse.\r\n     */\r\n    getPoint: function (position, point)\r\n    {\r\n        return GetPoint(this, position, point);\r\n    },\r\n\r\n    /**\r\n     * Returns an array of Point objects containing the coordinates of the points around the circumference of the Ellipse,\r\n     * based on the given quantity or stepRate values.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - The amount of points to return. If a falsey value the quantity will be derived from the `stepRate` instead.\r\n     * @param {number} [stepRate] - Sets the quantity by getting the circumference of the ellipse and dividing it by the stepRate.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - An array to insert the points in to. If not provided a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} An array of Point objects pertaining to the points around the circumference of the ellipse.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a uniformly distributed random point from anywhere within the given Ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {(Phaser.Geom.Point|object)} [point] - A Point or point-like object to set the random `x` and `y` values in.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} A Point object with the random values set in the `x` and `y` properties.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets the x, y, width and height of this ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the center of the ellipse.\r\n     * @param {number} y - The y position of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setTo: function (x, y, width, height)\r\n    {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Ellipse to be empty with a width and height of zero.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setEmpty: function ()\r\n    {\r\n        this.width = 0;\r\n        this.height = 0;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the position of this Ellipse.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setPosition\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x position of the center of the ellipse.\r\n     * @param {number} y - The y position of the center of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setPosition: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the size of this Ellipse.\r\n     * Does not change its position.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} [height=width] - The height of the ellipse.\r\n     *\r\n     * @return {Phaser.Geom.Ellipse} This Ellipse object.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        if (height === undefined) { height = width; }\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the Ellipse is empty: has a width or height equal to zero.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#isEmpty\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} True if the Ellipse is empty, otherwise false.\r\n     */\r\n    isEmpty: function ()\r\n    {\r\n        return (this.width <= 0 || this.height <= 0);\r\n    },\r\n\r\n    /**\r\n     * Returns the minor radius of the ellipse. Also known as the Semi Minor Axis.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getMinorRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The minor radius.\r\n     */\r\n    getMinorRadius: function ()\r\n    {\r\n        return Math.min(this.width, this.height) / 2;\r\n    },\r\n\r\n    /**\r\n     * Returns the major radius of the ellipse. Also known as the Semi Major Axis.\r\n     *\r\n     * @method Phaser.Geom.Ellipse#getMajorRadius\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The major radius.\r\n     */\r\n    getMajorRadius: function ()\r\n    {\r\n        return Math.max(this.width, this.height) / 2;\r\n    },\r\n\r\n    /**\r\n     * The left position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x - (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value + (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.x + (this.width / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.x = value - (this.width / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The top position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y - (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value + (this.height / 2);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The bottom position of the Ellipse.\r\n     *\r\n     * @name Phaser.Geom.Ellipse#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.y + (this.height / 2);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.y = value - (this.height / 2);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Ellipse;\r\n"]},"metadata":{},"sourceType":"script"}