{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Circle = require('../circle/Circle'); //  Adapted from https://gist.github.com/mutoo/5617691\n\n/**\r\n * Finds the circumscribed circle (circumcircle) of a Triangle object. The circumcircle is the circle which touches all of the triangle's vertices.\r\n *\r\n * @function Phaser.Geom.Triangle.CircumCircle\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Circle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use as input.\r\n * @param {Phaser.Geom.Circle} [out] - An optional Circle to store the result in.\r\n *\r\n * @return {Phaser.Geom.Circle} The updated `out` Circle, or a new Circle if none was provided.\r\n */\n\n\nvar CircumCircle = function (triangle, out) {\n  if (out === undefined) {\n    out = new Circle();\n  } //  A\n\n\n  var x1 = triangle.x1;\n  var y1 = triangle.y1; //  B\n\n  var x2 = triangle.x2;\n  var y2 = triangle.y2; //  C\n\n  var x3 = triangle.x3;\n  var y3 = triangle.y3;\n  var A = x2 - x1;\n  var B = y2 - y1;\n  var C = x3 - x1;\n  var D = y3 - y1;\n  var E = A * (x1 + x2) + B * (y1 + y2);\n  var F = C * (x1 + x3) + D * (y1 + y3);\n  var G = 2 * (A * (y3 - y2) - B * (x3 - x2));\n  var dx;\n  var dy; //  If the points of the triangle are collinear, then just find the\n  //  extremes and use the midpoint as the center of the circumcircle.\n\n  if (Math.abs(G) < 0.000001) {\n    var minX = Math.min(x1, x2, x3);\n    var minY = Math.min(y1, y2, y3);\n    dx = (Math.max(x1, x2, x3) - minX) * 0.5;\n    dy = (Math.max(y1, y2, y3) - minY) * 0.5;\n    out.x = minX + dx;\n    out.y = minY + dy;\n    out.radius = Math.sqrt(dx * dx + dy * dy);\n  } else {\n    out.x = (D * E - B * F) / G;\n    out.y = (A * F - C * E) / G;\n    dx = out.x - x1;\n    dy = out.y - y1;\n    out.radius = Math.sqrt(dx * dx + dy * dy);\n  }\n\n  return out;\n};\n\nmodule.exports = CircumCircle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/CircumCircle.js"],"names":["Circle","require","CircumCircle","triangle","out","undefined","x1","y1","x2","y2","x3","y3","A","B","C","D","E","F","G","dx","dy","Math","abs","minX","min","minY","max","x","y","radius","sqrt","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Circle = require('../circle/Circle');\r\n\r\n//  Adapted from https://gist.github.com/mutoo/5617691\r\n\r\n/**\r\n * Finds the circumscribed circle (circumcircle) of a Triangle object. The circumcircle is the circle which touches all of the triangle's vertices.\r\n *\r\n * @function Phaser.Geom.Triangle.CircumCircle\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Circle} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to use as input.\r\n * @param {Phaser.Geom.Circle} [out] - An optional Circle to store the result in.\r\n *\r\n * @return {Phaser.Geom.Circle} The updated `out` Circle, or a new Circle if none was provided.\r\n */\r\nvar CircumCircle = function (triangle, out)\r\n{\r\n    if (out === undefined) { out = new Circle(); }\r\n\r\n    //  A\r\n    var x1 = triangle.x1;\r\n    var y1 = triangle.y1;\r\n\r\n    //  B\r\n    var x2 = triangle.x2;\r\n    var y2 = triangle.y2;\r\n\r\n    //  C\r\n    var x3 = triangle.x3;\r\n    var y3 = triangle.y3;\r\n\r\n    var A = x2 - x1;\r\n    var B = y2 - y1;\r\n    var C = x3 - x1;\r\n    var D = y3 - y1;\r\n    var E = A * (x1 + x2) + B * (y1 + y2);\r\n    var F = C * (x1 + x3) + D * (y1 + y3);\r\n    var G = 2 * (A * (y3 - y2) - B * (x3 - x2));\r\n\r\n    var dx;\r\n    var dy;\r\n\r\n    //  If the points of the triangle are collinear, then just find the\r\n    //  extremes and use the midpoint as the center of the circumcircle.\r\n\r\n    if (Math.abs(G) < 0.000001)\r\n    {\r\n        var minX = Math.min(x1, x2, x3);\r\n        var minY = Math.min(y1, y2, y3);\r\n        dx = (Math.max(x1, x2, x3) - minX) * 0.5;\r\n        dy = (Math.max(y1, y2, y3) - minY) * 0.5;\r\n\r\n        out.x = minX + dx;\r\n        out.y = minY + dy;\r\n        out.radius = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n    else\r\n    {\r\n        out.x = (D * E - B * F) / G;\r\n        out.y = (A * F - C * E) / G;\r\n        dx = out.x - x1;\r\n        dy = out.y - y1;\r\n        out.radius = Math.sqrt(dx * dx + dy * dy);\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = CircumCircle;\r\n"]},"metadata":{},"sourceType":"script"}