{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetValue = require('../utils/object/GetValue'); //  Contains the plugins that Phaser uses globally and locally.\n//  These are the source objects, not instantiated.\n\n\nvar inputPlugins = {};\n/**\r\n * @namespace Phaser.Input.InputPluginCache\r\n */\n\nvar InputPluginCache = {};\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @function Phaser.Input.InputPluginCache.register\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Input Plugin, this is the property key used.\r\n * @param {string} settingsKey - The key in the Scene Settings to check to see if this plugin should install or not.\r\n * @param {string} configKey - The key in the Game Config to check to see if this plugin should install or not.\r\n */\n\nInputPluginCache.register = function (key, plugin, mapping, settingsKey, configKey) {\n  inputPlugins[key] = {\n    plugin: plugin,\n    mapping: mapping,\n    settingsKey: settingsKey,\n    configKey: configKey\n  };\n};\n/**\r\n * Returns the input plugin object from the cache based on the given key.\r\n *\r\n * @function Phaser.Input.InputPluginCache.getCore\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - The key of the input plugin to get.\r\n *\r\n * @return {Phaser.Types.Input.InputPluginContainer} The input plugin object.\r\n */\n\n\nInputPluginCache.getPlugin = function (key) {\n  return inputPlugins[key];\n};\n/**\r\n * Installs all of the registered Input Plugins into the given target.\r\n *\r\n * @function Phaser.Input.InputPluginCache.install\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} target - The target InputPlugin to install the plugins into.\r\n */\n\n\nInputPluginCache.install = function (target) {\n  var sys = target.scene.sys;\n  var settings = sys.settings.input;\n  var config = sys.game.config;\n\n  for (var key in inputPlugins) {\n    var source = inputPlugins[key].plugin;\n    var mapping = inputPlugins[key].mapping;\n    var settingsKey = inputPlugins[key].settingsKey;\n    var configKey = inputPlugins[key].configKey;\n\n    if (GetValue(settings, settingsKey, config[configKey])) {\n      target[mapping] = new source(target);\n    }\n  }\n};\n/**\r\n * Removes an input plugin based on the given key.\r\n *\r\n * @function Phaser.Input.InputPluginCache.remove\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - The key of the input plugin to remove.\r\n */\n\n\nInputPluginCache.remove = function (key) {\n  if (inputPlugins.hasOwnProperty(key)) {\n    delete inputPlugins[key];\n  }\n};\n\nmodule.exports = InputPluginCache;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/InputPluginCache.js"],"names":["GetValue","require","inputPlugins","InputPluginCache","register","key","plugin","mapping","settingsKey","configKey","getPlugin","install","target","sys","scene","settings","input","config","game","source","remove","hasOwnProperty","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB,C,CAEA;AACA;;;AACA,IAAIC,YAAY,GAAG,EAAnB;AAEA;;;;AAIA,IAAIC,gBAAgB,GAAG,EAAvB;AAEA;;;;;;;;;;;;;;;;;AAgBAA,gBAAgB,CAACC,QAAjB,GAA4B,UAAUC,GAAV,EAAeC,MAAf,EAAuBC,OAAvB,EAAgCC,WAAhC,EAA6CC,SAA7C,EAC5B;AACIP,EAAAA,YAAY,CAACG,GAAD,CAAZ,GAAoB;AAAEC,IAAAA,MAAM,EAAEA,MAAV;AAAkBC,IAAAA,OAAO,EAAEA,OAA3B;AAAoCC,IAAAA,WAAW,EAAEA,WAAjD;AAA8DC,IAAAA,SAAS,EAAEA;AAAzE,GAApB;AACH,CAHD;AAKA;;;;;;;;;;;;;AAWAN,gBAAgB,CAACO,SAAjB,GAA6B,UAAUL,GAAV,EAC7B;AACI,SAAOH,YAAY,CAACG,GAAD,CAAnB;AACH,CAHD;AAKA;;;;;;;;;;;AASAF,gBAAgB,CAACQ,OAAjB,GAA2B,UAAUC,MAAV,EAC3B;AACI,MAAIC,GAAG,GAAGD,MAAM,CAACE,KAAP,CAAaD,GAAvB;AACA,MAAIE,QAAQ,GAAGF,GAAG,CAACE,QAAJ,CAAaC,KAA5B;AACA,MAAIC,MAAM,GAAGJ,GAAG,CAACK,IAAJ,CAASD,MAAtB;;AAEA,OAAK,IAAIZ,GAAT,IAAgBH,YAAhB,EACA;AACI,QAAIiB,MAAM,GAAGjB,YAAY,CAACG,GAAD,CAAZ,CAAkBC,MAA/B;AACA,QAAIC,OAAO,GAAGL,YAAY,CAACG,GAAD,CAAZ,CAAkBE,OAAhC;AACA,QAAIC,WAAW,GAAGN,YAAY,CAACG,GAAD,CAAZ,CAAkBG,WAApC;AACA,QAAIC,SAAS,GAAGP,YAAY,CAACG,GAAD,CAAZ,CAAkBI,SAAlC;;AAEA,QAAIT,QAAQ,CAACe,QAAD,EAAWP,WAAX,EAAwBS,MAAM,CAACR,SAAD,CAA9B,CAAZ,EACA;AACIG,MAAAA,MAAM,CAACL,OAAD,CAAN,GAAkB,IAAIY,MAAJ,CAAWP,MAAX,CAAlB;AACH;AACJ;AACJ,CAlBD;AAoBA;;;;;;;;;;;AASAT,gBAAgB,CAACiB,MAAjB,GAA0B,UAAUf,GAAV,EAC1B;AACI,MAAIH,YAAY,CAACmB,cAAb,CAA4BhB,GAA5B,CAAJ,EACA;AACI,WAAOH,YAAY,CAACG,GAAD,CAAnB;AACH;AACJ,CAND;;AAQAiB,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetValue = require('../utils/object/GetValue');\r\n\r\n//  Contains the plugins that Phaser uses globally and locally.\r\n//  These are the source objects, not instantiated.\r\nvar inputPlugins = {};\r\n\r\n/**\r\n * @namespace Phaser.Input.InputPluginCache\r\n */\r\n\r\nvar InputPluginCache = {};\r\n\r\n/**\r\n * Static method called directly by the Core internal Plugins.\r\n * Key is a reference used to get the plugin from the plugins object (i.e. InputPlugin)\r\n * Plugin is the object to instantiate to create the plugin\r\n * Mapping is what the plugin is injected into the Scene.Systems as (i.e. input)\r\n *\r\n * @function Phaser.Input.InputPluginCache.register\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - A reference used to get this plugin from the plugin cache.\r\n * @param {function} plugin - The plugin to be stored. Should be the core object, not instantiated.\r\n * @param {string} mapping - If this plugin is to be injected into the Input Plugin, this is the property key used.\r\n * @param {string} settingsKey - The key in the Scene Settings to check to see if this plugin should install or not.\r\n * @param {string} configKey - The key in the Game Config to check to see if this plugin should install or not.\r\n */\r\nInputPluginCache.register = function (key, plugin, mapping, settingsKey, configKey)\r\n{\r\n    inputPlugins[key] = { plugin: plugin, mapping: mapping, settingsKey: settingsKey, configKey: configKey };\r\n};\r\n\r\n/**\r\n * Returns the input plugin object from the cache based on the given key.\r\n *\r\n * @function Phaser.Input.InputPluginCache.getCore\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - The key of the input plugin to get.\r\n *\r\n * @return {Phaser.Types.Input.InputPluginContainer} The input plugin object.\r\n */\r\nInputPluginCache.getPlugin = function (key)\r\n{\r\n    return inputPlugins[key];\r\n};\r\n\r\n/**\r\n * Installs all of the registered Input Plugins into the given target.\r\n *\r\n * @function Phaser.Input.InputPluginCache.install\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {Phaser.Input.InputPlugin} target - The target InputPlugin to install the plugins into.\r\n */\r\nInputPluginCache.install = function (target)\r\n{\r\n    var sys = target.scene.sys;\r\n    var settings = sys.settings.input;\r\n    var config = sys.game.config;\r\n\r\n    for (var key in inputPlugins)\r\n    {\r\n        var source = inputPlugins[key].plugin;\r\n        var mapping = inputPlugins[key].mapping;\r\n        var settingsKey = inputPlugins[key].settingsKey;\r\n        var configKey = inputPlugins[key].configKey;\r\n\r\n        if (GetValue(settings, settingsKey, config[configKey]))\r\n        {\r\n            target[mapping] = new source(target);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Removes an input plugin based on the given key.\r\n *\r\n * @function Phaser.Input.InputPluginCache.remove\r\n * @static\r\n * @since 3.10.0\r\n *\r\n * @param {string} key - The key of the input plugin to remove.\r\n */\r\nInputPluginCache.remove = function (key)\r\n{\r\n    if (inputPlugins.hasOwnProperty(key))\r\n    {\r\n        delete inputPlugins[key];\r\n    }\r\n};\r\n\r\nmodule.exports = InputPluginCache;\r\n"]},"metadata":{},"sourceType":"script"}