{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar IsoBoxRender = require('./IsoBoxRender');\n\nvar Class = require('../../../utils/Class');\n\nvar Shape = require('../Shape');\n/**\r\n * @classdesc\r\n * The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\r\n * the color of the top, left and right faces of the rectangle respectively. You can also choose\r\n * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property.\r\n *\r\n * @class IsoBox\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso box in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value.\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso box.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso box.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso box.\r\n */\n\n\nvar IsoBox = new Class({\n  Extends: Shape,\n  Mixins: [IsoBoxRender],\n  initialize: function IsoBox(scene, x, y, size, height, fillTop, fillLeft, fillRight) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (size === undefined) {\n      size = 48;\n    }\n\n    if (height === undefined) {\n      height = 32;\n    }\n\n    if (fillTop === undefined) {\n      fillTop = 0xeeeeee;\n    }\n\n    if (fillLeft === undefined) {\n      fillLeft = 0x999999;\n    }\n\n    if (fillRight === undefined) {\n      fillRight = 0xcccccc;\n    }\n\n    Shape.call(this, scene, 'IsoBox', null);\n    /**\r\n     * The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#projection\r\n     * @type {integer}\r\n     * @default 4\r\n     * @since 3.13.0\r\n     */\n\n    this.projection = 4;\n    /**\r\n     * The color used to fill in the top of the iso box.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#fillTop\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillTop = fillTop;\n    /**\r\n     * The color used to fill in the left-facing side of the iso box.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#fillLeft\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillLeft = fillLeft;\n    /**\r\n     * The color used to fill in the right-facing side of the iso box.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#fillRight\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.fillRight = fillRight;\n    /**\r\n     * Controls if the top-face of the iso box be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#showTop\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showTop = true;\n    /**\r\n     * Controls if the left-face of the iso box be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#showLeft\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showLeft = true;\n    /**\r\n     * Controls if the right-face of the iso box be rendered.\r\n     *\r\n     * @name Phaser.GameObjects.IsoBox#showRight\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.13.0\r\n     */\n\n    this.showRight = true;\n    this.isFilled = true;\n    this.setPosition(x, y);\n    this.setSize(size, height);\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * Sets the projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoBox#setProjection\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the projection to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setProjection: function (value) {\n    this.projection = value;\n    return this;\n  },\n\n  /**\r\n   * Sets which faces of the iso box will be rendered.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoBox#setFaces\r\n   * @since 3.13.0\r\n   * \r\n   * @param {boolean} [showTop=true] - Show the top-face of the iso box.\r\n   * @param {boolean} [showLeft=true] - Show the left-face of the iso box.\r\n   * @param {boolean} [showRight=true] - Show the right-face of the iso box.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFaces: function (showTop, showLeft, showRight) {\n    if (showTop === undefined) {\n      showTop = true;\n    }\n\n    if (showLeft === undefined) {\n      showLeft = true;\n    }\n\n    if (showRight === undefined) {\n      showRight = true;\n    }\n\n    this.showTop = showTop;\n    this.showLeft = showLeft;\n    this.showRight = showRight;\n    return this;\n  },\n\n  /**\r\n   * Sets the fill colors for each face of the iso box.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.IsoBox#setFillStyle\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} [fillTop] - The color used to fill the top of the iso box.\r\n   * @param {number} [fillLeft] - The color used to fill in the left-facing side of the iso box.\r\n   * @param {number} [fillRight] - The color used to fill in the right-facing side of the iso box.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFillStyle: function (fillTop, fillLeft, fillRight) {\n    this.fillTop = fillTop;\n    this.fillLeft = fillLeft;\n    this.fillRight = fillRight;\n    this.isFilled = true;\n    return this;\n  }\n});\nmodule.exports = IsoBox;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/isobox/IsoBox.js"],"names":["IsoBoxRender","require","Class","Shape","IsoBox","Extends","Mixins","initialize","scene","x","y","size","height","fillTop","fillLeft","fillRight","undefined","call","projection","showTop","showLeft","showRight","isFilled","setPosition","setSize","updateDisplayOrigin","setProjection","value","setFaces","setFillStyle","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar IsoBoxRender = require('./IsoBoxRender');\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\n\r\n/**\r\n * @classdesc\r\n * The IsoBox Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only fill colors and cannot be stroked.\r\n * \r\n * An IsoBox is an 'isometric' rectangle. Each face of it has a different fill color. You can set\r\n * the color of the top, left and right faces of the rectangle respectively. You can also choose\r\n * which of the faces are rendered via the `showTop`, `showLeft` and `showRight` properties.\r\n * \r\n * You cannot view an IsoBox from under-neath, however you can change the 'angle' by setting\r\n * the `projection` property.\r\n *\r\n * @class IsoBox\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [size=48] - The width of the iso box in pixels. The left and right faces will be exactly half this value.\r\n * @param {number} [height=32] - The height of the iso box. The left and right faces will be this tall. The overall height of the isobox will be this value plus half the `size` value.\r\n * @param {number} [fillTop=0xeeeeee] - The fill color of the top face of the iso box.\r\n * @param {number} [fillLeft=0x999999] - The fill color of the left face of the iso box.\r\n * @param {number} [fillRight=0xcccccc] - The fill color of the right face of the iso box.\r\n */\r\nvar IsoBox = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        IsoBoxRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function IsoBox (scene, x, y, size, height, fillTop, fillLeft, fillRight)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (size === undefined) { size = 48; }\r\n        if (height === undefined) { height = 32; }\r\n        if (fillTop === undefined) { fillTop = 0xeeeeee; }\r\n        if (fillLeft === undefined) { fillLeft = 0x999999; }\r\n        if (fillRight === undefined) { fillRight = 0xcccccc; }\r\n\r\n        Shape.call(this, scene, 'IsoBox', null);\r\n\r\n        /**\r\n         * The projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#projection\r\n         * @type {integer}\r\n         * @default 4\r\n         * @since 3.13.0\r\n         */\r\n        this.projection = 4;\r\n\r\n        /**\r\n         * The color used to fill in the top of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillTop\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillTop = fillTop;\r\n\r\n        /**\r\n         * The color used to fill in the left-facing side of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillLeft\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillLeft = fillLeft;\r\n\r\n        /**\r\n         * The color used to fill in the right-facing side of the iso box.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#fillRight\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.fillRight = fillRight;\r\n\r\n        /**\r\n         * Controls if the top-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showTop\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showTop = true;\r\n\r\n        /**\r\n         * Controls if the left-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showLeft\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showLeft = true;\r\n\r\n        /**\r\n         * Controls if the right-face of the iso box be rendered.\r\n         *\r\n         * @name Phaser.GameObjects.IsoBox#showRight\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.13.0\r\n         */\r\n        this.showRight = true;\r\n\r\n        this.isFilled = true;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(size, height);\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the projection level of the iso box. Change this to change the 'angle' at which you are looking at the box.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setProjection\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the projection to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setProjection: function (value)\r\n    {\r\n        this.projection = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets which faces of the iso box will be rendered.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setFaces\r\n     * @since 3.13.0\r\n     * \r\n     * @param {boolean} [showTop=true] - Show the top-face of the iso box.\r\n     * @param {boolean} [showLeft=true] - Show the left-face of the iso box.\r\n     * @param {boolean} [showRight=true] - Show the right-face of the iso box.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFaces: function (showTop, showLeft, showRight)\r\n    {\r\n        if (showTop === undefined) { showTop = true; }\r\n        if (showLeft === undefined) { showLeft = true; }\r\n        if (showRight === undefined) { showRight = true; }\r\n\r\n        this.showTop = showTop;\r\n        this.showLeft = showLeft;\r\n        this.showRight = showRight;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the fill colors for each face of the iso box.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.IsoBox#setFillStyle\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} [fillTop] - The color used to fill the top of the iso box.\r\n     * @param {number} [fillLeft] - The color used to fill in the left-facing side of the iso box.\r\n     * @param {number} [fillRight] - The color used to fill in the right-facing side of the iso box.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFillStyle: function (fillTop, fillLeft, fillRight)\r\n    {\r\n        this.fillTop = fillTop;\r\n        this.fillLeft = fillLeft;\r\n        this.fillRight = fillRight;\r\n\r\n        this.isFilled = true;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = IsoBox;\r\n"]},"metadata":{},"sourceType":"script"}