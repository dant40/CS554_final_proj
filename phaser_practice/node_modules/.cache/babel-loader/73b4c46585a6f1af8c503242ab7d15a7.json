{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar COLLIDES = require('./COLLIDES');\n\nvar Events = require('./events');\n\nvar SeparateX = require('./SeparateX');\n\nvar SeparateY = require('./SeparateY');\n/**\r\n * Impact Physics Solver\r\n *\r\n * @function Phaser.Physics.Impact.Solver\r\n * @fires Phaser.Physics.Impact.Events#COLLIDE\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - The Impact simulation to run the solver in.\r\n * @param {Phaser.Physics.Impact.Body} bodyA - The first body in the collision.\r\n * @param {Phaser.Physics.Impact.Body} bodyB - The second body in the collision.\r\n */\n\n\nvar Solver = function (world, bodyA, bodyB) {\n  var weak = null;\n\n  if (bodyA.collides === COLLIDES.LITE || bodyB.collides === COLLIDES.FIXED) {\n    weak = bodyA;\n  } else if (bodyB.collides === COLLIDES.LITE || bodyA.collides === COLLIDES.FIXED) {\n    weak = bodyB;\n  }\n\n  if (bodyA.last.x + bodyA.size.x > bodyB.last.x && bodyA.last.x < bodyB.last.x + bodyB.size.x) {\n    if (bodyA.last.y < bodyB.last.y) {\n      SeparateY(world, bodyA, bodyB, weak);\n    } else {\n      SeparateY(world, bodyB, bodyA, weak);\n    }\n\n    bodyA.collideWith(bodyB, 'y');\n    bodyB.collideWith(bodyA, 'y');\n    world.emit(Events.COLLIDE, bodyA, bodyB, 'y');\n  } else if (bodyA.last.y + bodyA.size.y > bodyB.last.y && bodyA.last.y < bodyB.last.y + bodyB.size.y) {\n    if (bodyA.last.x < bodyB.last.x) {\n      SeparateX(world, bodyA, bodyB, weak);\n    } else {\n      SeparateX(world, bodyB, bodyA, weak);\n    }\n\n    bodyA.collideWith(bodyB, 'x');\n    bodyB.collideWith(bodyA, 'x');\n    world.emit(Events.COLLIDE, bodyA, bodyB, 'x');\n  }\n};\n\nmodule.exports = Solver;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/impact/Solver.js"],"names":["COLLIDES","require","Events","SeparateX","SeparateY","Solver","world","bodyA","bodyB","weak","collides","LITE","FIXED","last","x","size","y","collideWith","emit","COLLIDE","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAApB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;AAWA,IAAII,MAAM,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,KAAxB,EACb;AACI,MAAIC,IAAI,GAAG,IAAX;;AAEA,MAAIF,KAAK,CAACG,QAAN,KAAmBV,QAAQ,CAACW,IAA5B,IAAoCH,KAAK,CAACE,QAAN,KAAmBV,QAAQ,CAACY,KAApE,EACA;AACIH,IAAAA,IAAI,GAAGF,KAAP;AACH,GAHD,MAIK,IAAIC,KAAK,CAACE,QAAN,KAAmBV,QAAQ,CAACW,IAA5B,IAAoCJ,KAAK,CAACG,QAAN,KAAmBV,QAAQ,CAACY,KAApE,EACL;AACIH,IAAAA,IAAI,GAAGD,KAAP;AACH;;AAED,MAAID,KAAK,CAACM,IAAN,CAAWC,CAAX,GAAeP,KAAK,CAACQ,IAAN,CAAWD,CAA1B,GAA8BN,KAAK,CAACK,IAAN,CAAWC,CAAzC,IAA8CP,KAAK,CAACM,IAAN,CAAWC,CAAX,GAAeN,KAAK,CAACK,IAAN,CAAWC,CAAX,GAAeN,KAAK,CAACO,IAAN,CAAWD,CAA3F,EACA;AACI,QAAIP,KAAK,CAACM,IAAN,CAAWG,CAAX,GAAeR,KAAK,CAACK,IAAN,CAAWG,CAA9B,EACA;AACIZ,MAAAA,SAAS,CAACE,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,IAAtB,CAAT;AACH,KAHD,MAKA;AACIL,MAAAA,SAAS,CAACE,KAAD,EAAQE,KAAR,EAAeD,KAAf,EAAsBE,IAAtB,CAAT;AACH;;AAEDF,IAAAA,KAAK,CAACU,WAAN,CAAkBT,KAAlB,EAAyB,GAAzB;AACAA,IAAAA,KAAK,CAACS,WAAN,CAAkBV,KAAlB,EAAyB,GAAzB;AAEAD,IAAAA,KAAK,CAACY,IAAN,CAAWhB,MAAM,CAACiB,OAAlB,EAA2BZ,KAA3B,EAAkCC,KAAlC,EAAyC,GAAzC;AACH,GAfD,MAgBK,IAAID,KAAK,CAACM,IAAN,CAAWG,CAAX,GAAeT,KAAK,CAACQ,IAAN,CAAWC,CAA1B,GAA8BR,KAAK,CAACK,IAAN,CAAWG,CAAzC,IAA8CT,KAAK,CAACM,IAAN,CAAWG,CAAX,GAAeR,KAAK,CAACK,IAAN,CAAWG,CAAX,GAAeR,KAAK,CAACO,IAAN,CAAWC,CAA3F,EACL;AACI,QAAIT,KAAK,CAACM,IAAN,CAAWC,CAAX,GAAeN,KAAK,CAACK,IAAN,CAAWC,CAA9B,EACA;AACIX,MAAAA,SAAS,CAACG,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAsBC,IAAtB,CAAT;AACH,KAHD,MAKA;AACIN,MAAAA,SAAS,CAACG,KAAD,EAAQE,KAAR,EAAeD,KAAf,EAAsBE,IAAtB,CAAT;AACH;;AAEDF,IAAAA,KAAK,CAACU,WAAN,CAAkBT,KAAlB,EAAyB,GAAzB;AACAA,IAAAA,KAAK,CAACS,WAAN,CAAkBV,KAAlB,EAAyB,GAAzB;AAEAD,IAAAA,KAAK,CAACY,IAAN,CAAWhB,MAAM,CAACiB,OAAlB,EAA2BZ,KAA3B,EAAkCC,KAAlC,EAAyC,GAAzC;AACH;AACJ,CA7CD;;AA+CAY,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar COLLIDES = require('./COLLIDES');\r\nvar Events = require('./events');\r\nvar SeparateX = require('./SeparateX');\r\nvar SeparateY = require('./SeparateY');\r\n\r\n/**\r\n * Impact Physics Solver\r\n *\r\n * @function Phaser.Physics.Impact.Solver\r\n * @fires Phaser.Physics.Impact.Events#COLLIDE\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Impact.World} world - The Impact simulation to run the solver in.\r\n * @param {Phaser.Physics.Impact.Body} bodyA - The first body in the collision.\r\n * @param {Phaser.Physics.Impact.Body} bodyB - The second body in the collision.\r\n */\r\nvar Solver = function (world, bodyA, bodyB)\r\n{\r\n    var weak = null;\r\n\r\n    if (bodyA.collides === COLLIDES.LITE || bodyB.collides === COLLIDES.FIXED)\r\n    {\r\n        weak = bodyA;\r\n    }\r\n    else if (bodyB.collides === COLLIDES.LITE || bodyA.collides === COLLIDES.FIXED)\r\n    {\r\n        weak = bodyB;\r\n    }\r\n\r\n    if (bodyA.last.x + bodyA.size.x > bodyB.last.x && bodyA.last.x < bodyB.last.x + bodyB.size.x)\r\n    {\r\n        if (bodyA.last.y < bodyB.last.y)\r\n        {\r\n            SeparateY(world, bodyA, bodyB, weak);\r\n        }\r\n        else\r\n        {\r\n            SeparateY(world, bodyB, bodyA, weak);\r\n        }\r\n\r\n        bodyA.collideWith(bodyB, 'y');\r\n        bodyB.collideWith(bodyA, 'y');\r\n\r\n        world.emit(Events.COLLIDE, bodyA, bodyB, 'y');\r\n    }\r\n    else if (bodyA.last.y + bodyA.size.y > bodyB.last.y && bodyA.last.y < bodyB.last.y + bodyB.size.y)\r\n    {\r\n        if (bodyA.last.x < bodyB.last.x)\r\n        {\r\n            SeparateX(world, bodyA, bodyB, weak);\r\n        }\r\n        else\r\n        {\r\n            SeparateX(world, bodyB, bodyA, weak);\r\n        }\r\n\r\n        bodyA.collideWith(bodyB, 'x');\r\n        bodyB.collideWith(bodyA, 'x');\r\n\r\n        world.emit(Events.COLLIDE, bodyA, bodyB, 'x');\r\n    }\r\n};\r\n\r\nmodule.exports = Solver;\r\n"]},"metadata":{},"sourceType":"script"}