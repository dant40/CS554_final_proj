{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n\nvar HasValue = require('../../utils/object/HasValue');\n/**\r\n * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n * that matches the given properties object, its collision flag will be set. The `collides`\r\n * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n * \"types\" property that matches any of those values, its collision flag will be updated.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByProperty\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SetCollisionByProperty = function (properties, collides, recalculateFaces, layer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  for (var ty = 0; ty < layer.height; ty++) {\n    for (var tx = 0; tx < layer.width; tx++) {\n      var tile = layer.data[ty][tx];\n\n      if (!tile) {\n        continue;\n      }\n\n      for (var property in properties) {\n        if (!HasValue(tile.properties, property)) {\n          continue;\n        }\n\n        var values = properties[property];\n\n        if (!Array.isArray(values)) {\n          values = [values];\n        }\n\n        for (var i = 0; i < values.length; i++) {\n          if (tile.properties[property] === values[i]) {\n            SetTileCollision(tile, collides);\n          }\n        }\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionByProperty;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetCollisionByProperty.js"],"names":["SetTileCollision","require","CalculateFacesWithin","HasValue","SetCollisionByProperty","properties","collides","recalculateFaces","layer","undefined","ty","height","tx","width","tile","data","property","values","Array","isArray","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,6BAAD,CAAtB;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIG,sBAAsB,GAAG,UAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,gBAAhC,EAAkDC,KAAlD,EAC7B;AACI,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AAAEH,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,MAAIC,gBAAgB,KAAKE,SAAzB,EAAoC;AAAEF,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAEhE,OAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,KAAK,CAACG,MAA5B,EAAoCD,EAAE,EAAtC,EACA;AACI,SAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,KAAK,CAACK,KAA5B,EAAmCD,EAAE,EAArC,EACA;AACI,UAAIE,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAWL,EAAX,EAAeE,EAAf,CAAX;;AAEA,UAAI,CAACE,IAAL,EAAW;AAAE;AAAW;;AAExB,WAAK,IAAIE,QAAT,IAAqBX,UAArB,EACA;AACI,YAAI,CAACF,QAAQ,CAACW,IAAI,CAACT,UAAN,EAAkBW,QAAlB,CAAb,EAA0C;AAAE;AAAW;;AAEvD,YAAIC,MAAM,GAAGZ,UAAU,CAACW,QAAD,CAAvB;;AACA,YAAI,CAACE,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EACA;AACIA,UAAAA,MAAM,GAAG,CAAEA,MAAF,CAAT;AACH;;AAED,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAA3B,EAAmCD,CAAC,EAApC,EACA;AACI,cAAIN,IAAI,CAACT,UAAL,CAAgBW,QAAhB,MAA8BC,MAAM,CAACG,CAAD,CAAxC,EACA;AACIpB,YAAAA,gBAAgB,CAACc,IAAD,EAAOR,QAAP,CAAhB;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,MAAIC,gBAAJ,EACA;AACIL,IAAAA,oBAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOM,KAAK,CAACK,KAAb,EAAoBL,KAAK,CAACG,MAA1B,EAAkCH,KAAlC,CAApB;AACH;AACJ,CAtCD;;AAwCAc,MAAM,CAACC,OAAP,GAAiBnB,sBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\nvar HasValue = require('../../utils/object/HasValue');\r\n\r\n/**\r\n * Sets collision on the tiles within a layer by checking tile properties. If a tile has a property\r\n * that matches the given properties object, its collision flag will be set. The `collides`\r\n * parameter controls if collision will be enabled (true) or disabled (false). Passing in\r\n * `{ collides: true }` would update the collision flag on any tiles with a \"collides\" property that\r\n * has a value of true. Any tile that doesn't have \"collides\" set to true will be ignored. You can\r\n * also use an array of values, e.g. `{ types: [\"stone\", \"lava\", \"sand\" ] }`. If a tile has a\r\n * \"types\" property that matches any of those values, its collision flag will be updated.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionByProperty\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {object} properties - An object with tile properties and corresponding values that should be checked.\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionByProperty = function (properties, collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n\r\n            if (!tile) { continue; }\r\n\r\n            for (var property in properties)\r\n            {\r\n                if (!HasValue(tile.properties, property)) { continue; }\r\n\r\n                var values = properties[property];\r\n                if (!Array.isArray(values))\r\n                {\r\n                    values = [ values ];\r\n                }\r\n\r\n                for (var i = 0; i < values.length; i++)\r\n                {\r\n                    if (tile.properties[property] === values[i])\r\n                    {\r\n                        SetTileCollision(tile, collides);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionByProperty;\r\n"]},"metadata":{},"sourceType":"script"}