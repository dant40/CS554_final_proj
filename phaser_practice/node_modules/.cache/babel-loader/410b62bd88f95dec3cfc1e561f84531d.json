{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Color = require('./Color');\n\nvar HueToComponent = require('./HueToComponent');\n/**\r\n * Converts HSL (hue, saturation and lightness) values to a Phaser Color object.\r\n *\r\n * @function Phaser.Display.Color.HSLToColor\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue value in the range 0 to 1.\r\n * @param {number} s - The saturation value in the range 0 to 1.\r\n * @param {number} l - The lightness value in the range 0 to 1.\r\n *\r\n * @return {Phaser.Display.Color} A Color object created from the results of the h, s and l values.\r\n */\n\n\nvar HSLToColor = function (h, s, l) {\n  // achromatic by default\n  var r = l;\n  var g = l;\n  var b = l;\n\n  if (s !== 0) {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = HueToComponent(p, q, h + 1 / 3);\n    g = HueToComponent(p, q, h);\n    b = HueToComponent(p, q, h - 1 / 3);\n  }\n\n  var color = new Color();\n  return color.setGLTo(r, g, b, 1);\n};\n\nmodule.exports = HSLToColor;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/display/color/HSLToColor.js"],"names":["Color","require","HueToComponent","HSLToColor","h","s","l","r","g","b","q","p","color","setGLTo","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;;;;;;;;;;;;;;AAYA,IAAIE,UAAU,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,EACjB;AACI;AACA,MAAIC,CAAC,GAAGD,CAAR;AACA,MAAIE,CAAC,GAAGF,CAAR;AACA,MAAIG,CAAC,GAAGH,CAAR;;AAEA,MAAID,CAAC,KAAK,CAAV,EACA;AACI,QAAIK,CAAC,GAAIJ,CAAC,GAAG,GAAL,GAAYA,CAAC,IAAI,IAAID,CAAR,CAAb,GAA0BC,CAAC,GAAGD,CAAJ,GAAQC,CAAC,GAAGD,CAA9C;AACA,QAAIM,CAAC,GAAG,IAAIL,CAAJ,GAAQI,CAAhB;AAEAH,IAAAA,CAAC,GAAGL,cAAc,CAACS,CAAD,EAAID,CAAJ,EAAON,CAAC,GAAG,IAAI,CAAf,CAAlB;AACAI,IAAAA,CAAC,GAAGN,cAAc,CAACS,CAAD,EAAID,CAAJ,EAAON,CAAP,CAAlB;AACAK,IAAAA,CAAC,GAAGP,cAAc,CAACS,CAAD,EAAID,CAAJ,EAAON,CAAC,GAAG,IAAI,CAAf,CAAlB;AACH;;AAED,MAAIQ,KAAK,GAAG,IAAIZ,KAAJ,EAAZ;AAEA,SAAOY,KAAK,CAACC,OAAN,CAAcN,CAAd,EAAiBC,CAAjB,EAAoBC,CAApB,EAAuB,CAAvB,CAAP;AACH,CApBD;;AAsBAK,MAAM,CAACC,OAAP,GAAiBZ,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Color = require('./Color');\r\nvar HueToComponent = require('./HueToComponent');\r\n\r\n/**\r\n * Converts HSL (hue, saturation and lightness) values to a Phaser Color object.\r\n *\r\n * @function Phaser.Display.Color.HSLToColor\r\n * @since 3.0.0\r\n *\r\n * @param {number} h - The hue value in the range 0 to 1.\r\n * @param {number} s - The saturation value in the range 0 to 1.\r\n * @param {number} l - The lightness value in the range 0 to 1.\r\n *\r\n * @return {Phaser.Display.Color} A Color object created from the results of the h, s and l values.\r\n */\r\nvar HSLToColor = function (h, s, l)\r\n{\r\n    // achromatic by default\r\n    var r = l;\r\n    var g = l;\r\n    var b = l;\r\n\r\n    if (s !== 0)\r\n    {\r\n        var q = (l < 0.5) ? l * (1 + s) : l + s - l * s;\r\n        var p = 2 * l - q;\r\n\r\n        r = HueToComponent(p, q, h + 1 / 3);\r\n        g = HueToComponent(p, q, h);\r\n        b = HueToComponent(p, q, h - 1 / 3);\r\n    }\r\n\r\n    var color = new Color();\r\n\r\n    return color.setGLTo(r, g, b, 1);\r\n};\r\n\r\nmodule.exports = HSLToColor;\r\n"]},"metadata":{},"sourceType":"script"}