{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Body = require('../lib/body/Body');\n/**\r\n * Provides methods used for getting and setting the static state of a physics body.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Static\r\n * @since 3.0.0\r\n */\n\n\nvar Static = {\n  /**\r\n   * Changes the physics body to be either static `true` or dynamic `false`.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Static#setStatic\r\n   * @since 3.0.0\r\n   *\r\n   * @param {boolean} value - `true` to set the body as being static, or `false` to make it dynamic.\r\n   *\r\n   * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n   */\n  setStatic: function (value) {\n    Body.setStatic(this.body, value);\n    return this;\n  },\n\n  /**\r\n   * Returns `true` if the body is static, otherwise `false` for a dynamic body.\r\n   *\r\n   * @method Phaser.Physics.Matter.Components.Static#isStatic\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} `true` if the body is static, otherwise `false`.\r\n   */\n  isStatic: function () {\n    return this.body.isStatic;\n  }\n};\nmodule.exports = Static;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/components/Static.js"],"names":["Body","require","Static","setStatic","value","body","isStatic","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAAlB;AAEA;;;;;;;;AAMA,IAAIC,MAAM,GAAG;AAET;;;;;;;;;;AAUAC,EAAAA,SAAS,EAAE,UAAUC,KAAV,EACX;AACIJ,IAAAA,IAAI,CAACG,SAAL,CAAe,KAAKE,IAApB,EAA0BD,KAA1B;AAEA,WAAO,IAAP;AACH,GAjBQ;;AAmBT;;;;;;;;AAQAE,EAAAA,QAAQ,EAAE,YACV;AACI,WAAO,KAAKD,IAAL,CAAUC,QAAjB;AACH;AA9BQ,CAAb;AAkCAC,MAAM,CAACC,OAAP,GAAiBN,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Body = require('../lib/body/Body');\r\n\r\n/**\r\n * Provides methods used for getting and setting the static state of a physics body.\r\n *\r\n * @namespace Phaser.Physics.Matter.Components.Static\r\n * @since 3.0.0\r\n */\r\nvar Static = {\r\n\r\n    /**\r\n     * Changes the physics body to be either static `true` or dynamic `false`.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Static#setStatic\r\n     * @since 3.0.0\r\n     *\r\n     * @param {boolean} value - `true` to set the body as being static, or `false` to make it dynamic.\r\n     *\r\n     * @return {Phaser.GameObjects.GameObject} This Game Object.\r\n     */\r\n    setStatic: function (value)\r\n    {\r\n        Body.setStatic(this.body, value);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns `true` if the body is static, otherwise `false` for a dynamic body.\r\n     *\r\n     * @method Phaser.Physics.Matter.Components.Static#isStatic\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} `true` if the body is static, otherwise `false`.\r\n     */\r\n    isStatic: function ()\r\n    {\r\n        return this.body.isStatic;\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = Static;\r\n"]},"metadata":{},"sourceType":"script"}