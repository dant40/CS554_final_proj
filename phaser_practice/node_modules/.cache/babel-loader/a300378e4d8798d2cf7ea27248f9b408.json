{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SetTileCollision = require('./SetTileCollision');\n\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\n/**\r\n * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n * controls if collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionFromCollisionGroup\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\n\n\nvar SetCollisionFromCollisionGroup = function (collides, recalculateFaces, layer) {\n  if (collides === undefined) {\n    collides = true;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  for (var ty = 0; ty < layer.height; ty++) {\n    for (var tx = 0; tx < layer.width; tx++) {\n      var tile = layer.data[ty][tx];\n\n      if (!tile) {\n        continue;\n      }\n\n      var collisionGroup = tile.getCollisionGroup(); // It's possible in Tiled to have a collision group without any shapes, e.g. create a\n      // shape and then delete the shape.\n\n      if (collisionGroup && collisionGroup.objects && collisionGroup.objects.length > 0) {\n        SetTileCollision(tile, collides);\n      }\n    }\n  }\n\n  if (recalculateFaces) {\n    CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\n  }\n};\n\nmodule.exports = SetCollisionFromCollisionGroup;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetCollisionFromCollisionGroup.js"],"names":["SetTileCollision","require","CalculateFacesWithin","SetCollisionFromCollisionGroup","collides","recalculateFaces","layer","undefined","ty","height","tx","width","tile","data","collisionGroup","getCollisionGroup","objects","length","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,gBAAgB,GAAGC,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIC,oBAAoB,GAAGD,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIE,8BAA8B,GAAG,UAAUC,QAAV,EAAoBC,gBAApB,EAAsCC,KAAtC,EACrC;AACI,MAAIF,QAAQ,KAAKG,SAAjB,EAA4B;AAAEH,IAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAChD,MAAIC,gBAAgB,KAAKE,SAAzB,EAAoC;AAAEF,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAEhE,OAAK,IAAIG,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGF,KAAK,CAACG,MAA5B,EAAoCD,EAAE,EAAtC,EACA;AACI,SAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,KAAK,CAACK,KAA5B,EAAmCD,EAAE,EAArC,EACA;AACI,UAAIE,IAAI,GAAGN,KAAK,CAACO,IAAN,CAAWL,EAAX,EAAeE,EAAf,CAAX;;AAEA,UAAI,CAACE,IAAL,EAAW;AAAE;AAAW;;AAExB,UAAIE,cAAc,GAAGF,IAAI,CAACG,iBAAL,EAArB,CALJ,CAOI;AACA;;AACA,UAAID,cAAc,IAAIA,cAAc,CAACE,OAAjC,IAA4CF,cAAc,CAACE,OAAf,CAAuBC,MAAvB,GAAgC,CAAhF,EACA;AACIjB,QAAAA,gBAAgB,CAACY,IAAD,EAAOR,QAAP,CAAhB;AACH;AACJ;AACJ;;AAED,MAAIC,gBAAJ,EACA;AACIH,IAAAA,oBAAoB,CAAC,CAAD,EAAI,CAAJ,EAAOI,KAAK,CAACK,KAAb,EAAoBL,KAAK,CAACG,MAA1B,EAAkCH,KAAlC,CAApB;AACH;AACJ,CA5BD;;AA8BAY,MAAM,CAACC,OAAP,GAAiBhB,8BAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SetTileCollision = require('./SetTileCollision');\r\nvar CalculateFacesWithin = require('./CalculateFacesWithin');\r\n\r\n/**\r\n * Sets collision on the tiles within a layer by checking each tile's collision group data\r\n * (typically defined in Tiled within the tileset collision editor). If any objects are found within\r\n * a tile's collision group, the tile's colliding information will be set. The `collides` parameter\r\n * controls if collision will be enabled (true) or disabled (false).\r\n *\r\n * @function Phaser.Tilemaps.Components.SetCollisionFromCollisionGroup\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {boolean} [collides=true] - If true it will enable collision. If false it will clear collision.\r\n * @param {boolean} [recalculateFaces=true] - Whether or not to recalculate the tile faces after the update.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetCollisionFromCollisionGroup = function (collides, recalculateFaces, layer)\r\n{\r\n    if (collides === undefined) { collides = true; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    for (var ty = 0; ty < layer.height; ty++)\r\n    {\r\n        for (var tx = 0; tx < layer.width; tx++)\r\n        {\r\n            var tile = layer.data[ty][tx];\r\n\r\n            if (!tile) { continue; }\r\n\r\n            var collisionGroup = tile.getCollisionGroup();\r\n\r\n            // It's possible in Tiled to have a collision group without any shapes, e.g. create a\r\n            // shape and then delete the shape.\r\n            if (collisionGroup && collisionGroup.objects && collisionGroup.objects.length > 0)\r\n            {\r\n                SetTileCollision(tile, collides);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (recalculateFaces)\r\n    {\r\n        CalculateFacesWithin(0, 0, layer.width, layer.height, layer);\r\n    }\r\n};\r\n\r\nmodule.exports = SetCollisionFromCollisionGroup;\r\n"]},"metadata":{},"sourceType":"script"}