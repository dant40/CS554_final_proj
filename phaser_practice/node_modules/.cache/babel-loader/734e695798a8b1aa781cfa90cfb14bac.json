{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Components = require('./components');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * Internal function to check if the object has a getter or setter.\r\n *\r\n * @function hasGetterOrSetter\r\n * @private\r\n *\r\n * @param {object} def - The object to check.\r\n *\r\n * @return {boolean} True if it has a getter or setter, otherwise false.\r\n */\n\n\nfunction hasGetterOrSetter(def) {\n  return !!def.get && typeof def.get === 'function' || !!def.set && typeof def.set === 'function';\n}\n/**\r\n * A Matter Game Object is a generic object that allows you to combine any Phaser Game Object,\r\n * including those you have extended or created yourself, with all of the Matter Components.\r\n * \r\n * This enables you to use component methods such as `setVelocity` or `isSensor` directly from\r\n * this Game Object.\r\n *\r\n * @function Phaser.Physics.Matter.MatterGameObject\r\n * @since 3.3.0\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - The Matter world to add the body to.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will have the Matter body applied to it.\r\n * @param {(Phaser.Types.Physics.Matter.MatterBodyConfig|MatterJS.Body)} [options] - A Matter Body configuration object, or an instance of a Matter Body.\r\n * @param {boolean} [addToWorld=true] - Should the newly created body be immediately added to the World?\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was created with the Matter body.\r\n */\n\n\nvar MatterGameObject = function (world, gameObject, options, addToWorld) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  if (addToWorld === undefined) {\n    addToWorld = true;\n  }\n\n  var x = gameObject.x;\n  var y = gameObject.y; //  Temp body pos to avoid body null checks\n\n  gameObject.body = {\n    temp: true,\n    position: {\n      x: x,\n      y: y\n    }\n  };\n  var mixins = [Components.Bounce, Components.Collision, Components.Force, Components.Friction, Components.Gravity, Components.Mass, Components.Sensor, Components.SetBody, Components.Sleep, Components.Static, Components.Transform, Components.Velocity]; //  First let's inject all of the components into the Game Object\n\n  mixins.forEach(function (mixin) {\n    for (var key in mixin) {\n      if (hasGetterOrSetter(mixin[key])) {\n        Object.defineProperty(gameObject, key, {\n          get: mixin[key].get,\n          set: mixin[key].set\n        });\n      } else {\n        Object.defineProperty(gameObject, key, {\n          value: mixin[key]\n        });\n      }\n    }\n  });\n  gameObject.world = world;\n  gameObject._tempVec2 = new Vector2(x, y);\n\n  if (options.hasOwnProperty('type') && options.type === 'body') {\n    gameObject.setExistingBody(options, addToWorld);\n  } else {\n    var shape = GetFastValue(options, 'shape', null);\n\n    if (!shape) {\n      shape = 'rectangle';\n    }\n\n    options.addToWorld = addToWorld;\n    gameObject.setBody(shape, options);\n  }\n\n  return gameObject;\n};\n\nmodule.exports = MatterGameObject;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/MatterGameObject.js"],"names":["Components","require","GetFastValue","Vector2","hasGetterOrSetter","def","get","set","MatterGameObject","world","gameObject","options","addToWorld","undefined","x","y","body","temp","position","mixins","Bounce","Collision","Force","Friction","Gravity","Mass","Sensor","SetBody","Sleep","Static","Transform","Velocity","forEach","mixin","key","Object","defineProperty","value","_tempVec2","hasOwnProperty","type","setExistingBody","shape","setBody","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Components = require('./components');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * Internal function to check if the object has a getter or setter.\r\n *\r\n * @function hasGetterOrSetter\r\n * @private\r\n *\r\n * @param {object} def - The object to check.\r\n *\r\n * @return {boolean} True if it has a getter or setter, otherwise false.\r\n */\r\nfunction hasGetterOrSetter (def)\r\n{\r\n    return (!!def.get && typeof def.get === 'function') || (!!def.set && typeof def.set === 'function');\r\n}\r\n\r\n/**\r\n * A Matter Game Object is a generic object that allows you to combine any Phaser Game Object,\r\n * including those you have extended or created yourself, with all of the Matter Components.\r\n * \r\n * This enables you to use component methods such as `setVelocity` or `isSensor` directly from\r\n * this Game Object.\r\n *\r\n * @function Phaser.Physics.Matter.MatterGameObject\r\n * @since 3.3.0\r\n *\r\n * @param {Phaser.Physics.Matter.World} world - The Matter world to add the body to.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object that will have the Matter body applied to it.\r\n * @param {(Phaser.Types.Physics.Matter.MatterBodyConfig|MatterJS.Body)} [options] - A Matter Body configuration object, or an instance of a Matter Body.\r\n * @param {boolean} [addToWorld=true] - Should the newly created body be immediately added to the World?\r\n *\r\n * @return {Phaser.GameObjects.GameObject} The Game Object that was created with the Matter body.\r\n */\r\nvar MatterGameObject = function (world, gameObject, options, addToWorld)\r\n{\r\n    if (options === undefined) { options = {}; }\r\n    if (addToWorld === undefined) { addToWorld = true; }\r\n\r\n    var x = gameObject.x;\r\n    var y = gameObject.y;\r\n\r\n    //  Temp body pos to avoid body null checks\r\n    gameObject.body = {\r\n        temp: true,\r\n        position: {\r\n            x: x,\r\n            y: y\r\n        }\r\n    };\r\n\r\n    var mixins = [\r\n        Components.Bounce,\r\n        Components.Collision,\r\n        Components.Force,\r\n        Components.Friction,\r\n        Components.Gravity,\r\n        Components.Mass,\r\n        Components.Sensor,\r\n        Components.SetBody,\r\n        Components.Sleep,\r\n        Components.Static,\r\n        Components.Transform,\r\n        Components.Velocity\r\n    ];\r\n\r\n    //  First let's inject all of the components into the Game Object\r\n    mixins.forEach(function (mixin)\r\n    {\r\n        for (var key in mixin)\r\n        {\r\n            if (hasGetterOrSetter(mixin[key]))\r\n            {\r\n                Object.defineProperty(gameObject, key, {\r\n                    get: mixin[key].get,\r\n                    set: mixin[key].set\r\n                });\r\n            }\r\n            else\r\n            {\r\n                Object.defineProperty(gameObject, key, {value: mixin[key]});\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    gameObject.world = world;\r\n\r\n    gameObject._tempVec2 = new Vector2(x, y);\r\n\r\n    if (options.hasOwnProperty('type') && options.type === 'body')\r\n    {\r\n        gameObject.setExistingBody(options, addToWorld);\r\n    }\r\n    else\r\n    {\r\n        var shape = GetFastValue(options, 'shape', null);\r\n\r\n        if (!shape)\r\n        {\r\n            shape = 'rectangle';\r\n        }\r\n\r\n        options.addToWorld = addToWorld;\r\n    \r\n        gameObject.setBody(shape, options);\r\n    }\r\n\r\n    return gameObject;\r\n};\r\n\r\nmodule.exports = MatterGameObject;\r\n"]},"metadata":{},"sourceType":"script"}