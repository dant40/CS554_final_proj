{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar Shape = require('../Shape');\n\nvar GeomLine = require('../../../geom/line/Line');\n\nvar LineRender = require('./LineRender');\n/**\r\n * @classdesc\r\n * The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only stroke colors and cannot be filled.\r\n * \r\n * A Line Shape allows you to draw a line between two points in your game. You can control the\r\n * stroke color and thickness of the line. In WebGL only you can also specify a different\r\n * thickness for the start and end of the line, allowing you to render lines that taper-off.\r\n * \r\n * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.\r\n *\r\n * Be aware that as with all Game Objects the default origin is 0.5. If you need to draw a Line\r\n * between two points and want the x1/y1 values to match the x/y values, then set the origin to 0.\r\n *\r\n * @class Line\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n * @param {number} [y1=0] - The vertical position of the start of the line.\r\n * @param {number} [x2=128] - The horizontal position of the end of the line.\r\n * @param {number} [y2=0] - The vertical position of the end of the line.\r\n * @param {number} [strokeColor] - The color the line will be drawn in, i.e. 0xff0000 for red.\r\n * @param {number} [strokeAlpha] - The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Line = new Class({\n  Extends: Shape,\n  Mixins: [LineRender],\n  initialize: function Line(scene, x, y, x1, y1, x2, y2, strokeColor, strokeAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 128;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    Shape.call(this, scene, 'Line', new GeomLine(x1, y1, x2, y2));\n    var width = this.geom.right - this.geom.left;\n    var height = this.geom.bottom - this.geom.top;\n    /**\r\n     * The width (or thickness) of the line.\r\n     * See the setLineWidth method for extra details on changing this on WebGL.\r\n     *\r\n     * @name Phaser.GameObjects.Line#lineWidth\r\n     * @type {number}\r\n     * @since 3.13.0\r\n     */\n\n    this.lineWidth = 1;\n    /**\r\n     * Private internal value. Holds the start width of the line.\r\n     *\r\n     * @name Phaser.GameObjects.Line#_startWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._startWidth = 1;\n    /**\r\n     * Private internal value. Holds the end width of the line.\r\n     *\r\n     * @name Phaser.GameObjects.Line#_endWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._endWidth = 1;\n    this.setPosition(x, y);\n    this.setSize(width, height);\n\n    if (strokeColor !== undefined) {\n      this.setStrokeStyle(1, strokeColor, strokeAlpha);\n    }\n\n    this.updateDisplayOrigin();\n  },\n\n  /**\r\n   * Sets the width of the line.\r\n   * \r\n   * When using the WebGL renderer you can have different start and end widths.\r\n   * When using the Canvas renderer only the `startWidth` value is used. The `endWidth` is ignored.\r\n   * \r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Line#setLineWidth\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} startWidth - The start width of the line.\r\n   * @param {number} [endWidth] - The end width of the line. Only used in WebGL.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setLineWidth: function (startWidth, endWidth) {\n    if (endWidth === undefined) {\n      endWidth = startWidth;\n    }\n\n    this._startWidth = startWidth;\n    this._endWidth = endWidth;\n    this.lineWidth = startWidth;\n    return this;\n  },\n\n  /**\r\n   * Sets the start and end coordinates of this Line.\r\n   *\r\n   * @method Phaser.GameObjects.Line#setTo\r\n   * @since 3.13.0\r\n   *\r\n   * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n   * @param {number} [y1=0] - The vertical position of the start of the line.\r\n   * @param {number} [x2=0] - The horizontal position of the end of the line.\r\n   * @param {number} [y2=0] - The vertical position of the end of the line.\r\n   *\r\n   * @return {this} This Line object.\r\n   */\n  setTo: function (x1, y1, x2, y2) {\n    this.geom.setTo(x1, y1, x2, y2);\n    return this;\n  }\n});\nmodule.exports = Line;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/line/Line.js"],"names":["Class","require","Shape","GeomLine","LineRender","Line","Extends","Mixins","initialize","scene","x","y","x1","y1","x2","y2","strokeColor","strokeAlpha","undefined","call","width","geom","right","left","height","bottom","top","lineWidth","_startWidth","_endWidth","setPosition","setSize","setStrokeStyle","updateDisplayOrigin","setLineWidth","startWidth","endWidth","setTo","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Shape = require('../Shape');\r\nvar GeomLine = require('../../../geom/line/Line');\r\nvar LineRender = require('./LineRender');\r\n\r\n/**\r\n * @classdesc\r\n * The Line Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports only stroke colors and cannot be filled.\r\n * \r\n * A Line Shape allows you to draw a line between two points in your game. You can control the\r\n * stroke color and thickness of the line. In WebGL only you can also specify a different\r\n * thickness for the start and end of the line, allowing you to render lines that taper-off.\r\n * \r\n * If you need to draw multiple lines in a sequence you may wish to use the Polygon Shape instead.\r\n *\r\n * Be aware that as with all Game Objects the default origin is 0.5. If you need to draw a Line\r\n * between two points and want the x1/y1 values to match the x/y values, then set the origin to 0.\r\n *\r\n * @class Line\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n * @param {number} [y1=0] - The vertical position of the start of the line.\r\n * @param {number} [x2=128] - The horizontal position of the end of the line.\r\n * @param {number} [y2=0] - The vertical position of the end of the line.\r\n * @param {number} [strokeColor] - The color the line will be drawn in, i.e. 0xff0000 for red.\r\n * @param {number} [strokeAlpha] - The alpha the line will be drawn in. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Line = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        LineRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Line (scene, x, y, x1, y1, x2, y2, strokeColor, strokeAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 128; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n\r\n        Shape.call(this, scene, 'Line', new GeomLine(x1, y1, x2, y2));\r\n\r\n        var width = this.geom.right - this.geom.left;\r\n        var height = this.geom.bottom - this.geom.top;\r\n\r\n        /**\r\n         * The width (or thickness) of the line.\r\n         * See the setLineWidth method for extra details on changing this on WebGL.\r\n         *\r\n         * @name Phaser.GameObjects.Line#lineWidth\r\n         * @type {number}\r\n         * @since 3.13.0\r\n         */\r\n        this.lineWidth = 1;\r\n\r\n        /**\r\n         * Private internal value. Holds the start width of the line.\r\n         *\r\n         * @name Phaser.GameObjects.Line#_startWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._startWidth = 1;\r\n\r\n        /**\r\n         * Private internal value. Holds the end width of the line.\r\n         *\r\n         * @name Phaser.GameObjects.Line#_endWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._endWidth = 1;\r\n\r\n        this.setPosition(x, y);\r\n        this.setSize(width, height);\r\n\r\n        if (strokeColor !== undefined)\r\n        {\r\n            this.setStrokeStyle(1, strokeColor, strokeAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n    },\r\n\r\n    /**\r\n     * Sets the width of the line.\r\n     * \r\n     * When using the WebGL renderer you can have different start and end widths.\r\n     * When using the Canvas renderer only the `startWidth` value is used. The `endWidth` is ignored.\r\n     * \r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Line#setLineWidth\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} startWidth - The start width of the line.\r\n     * @param {number} [endWidth] - The end width of the line. Only used in WebGL.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setLineWidth: function (startWidth, endWidth)\r\n    {\r\n        if (endWidth === undefined) { endWidth = startWidth; }\r\n\r\n        this._startWidth = startWidth;\r\n        this._endWidth = endWidth;\r\n\r\n        this.lineWidth = startWidth;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the start and end coordinates of this Line.\r\n     *\r\n     * @method Phaser.GameObjects.Line#setTo\r\n     * @since 3.13.0\r\n     *\r\n     * @param {number} [x1=0] - The horizontal position of the start of the line.\r\n     * @param {number} [y1=0] - The vertical position of the start of the line.\r\n     * @param {number} [x2=0] - The horizontal position of the end of the line.\r\n     * @param {number} [y2=0] - The vertical position of the end of the line.\r\n     *\r\n     * @return {this} This Line object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2)\r\n    {\r\n        this.geom.setTo(x1, y1, x2, y2);\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Line;\r\n"]},"metadata":{},"sourceType":"script"}