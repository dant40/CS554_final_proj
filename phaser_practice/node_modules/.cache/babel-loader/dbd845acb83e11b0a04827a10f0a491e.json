{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Extend = require('../utils/object/Extend');\n\nvar XHRSettings = require('./XHRSettings');\n/**\r\n * Takes two XHRSettings Objects and creates a new XHRSettings object from them.\r\n *\r\n * The new object is seeded by the values given in the global settings, but any setting in\r\n * the local object overrides the global ones.\r\n *\r\n * @function Phaser.Loader.MergeXHRSettings\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} global - The global XHRSettings object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} local - The local XHRSettings object.\r\n *\r\n * @return {Phaser.Types.Loader.XHRSettingsObject} A newly formed XHRSettings object.\r\n */\n\n\nvar MergeXHRSettings = function (global, local) {\n  var output = global === undefined ? XHRSettings() : Extend({}, global);\n\n  if (local) {\n    for (var setting in local) {\n      if (local[setting] !== undefined) {\n        output[setting] = local[setting];\n      }\n    }\n  }\n\n  return output;\n};\n\nmodule.exports = MergeXHRSettings;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/MergeXHRSettings.js"],"names":["Extend","require","XHRSettings","MergeXHRSettings","global","local","output","undefined","setting","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,MAAM,GAAGC,OAAO,CAAC,wBAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIE,gBAAgB,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EACvB;AACI,MAAIC,MAAM,GAAIF,MAAM,KAAKG,SAAZ,GAAyBL,WAAW,EAApC,GAAyCF,MAAM,CAAC,EAAD,EAAKI,MAAL,CAA5D;;AAEA,MAAIC,KAAJ,EACA;AACI,SAAK,IAAIG,OAAT,IAAoBH,KAApB,EACA;AACI,UAAIA,KAAK,CAACG,OAAD,CAAL,KAAmBD,SAAvB,EACA;AACID,QAAAA,MAAM,CAACE,OAAD,CAAN,GAAkBH,KAAK,CAACG,OAAD,CAAvB;AACH;AACJ;AACJ;;AAED,SAAOF,MAAP;AACH,CAhBD;;AAkBAG,MAAM,CAACC,OAAP,GAAiBP,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Extend = require('../utils/object/Extend');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * Takes two XHRSettings Objects and creates a new XHRSettings object from them.\r\n *\r\n * The new object is seeded by the values given in the global settings, but any setting in\r\n * the local object overrides the global ones.\r\n *\r\n * @function Phaser.Loader.MergeXHRSettings\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} global - The global XHRSettings object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} local - The local XHRSettings object.\r\n *\r\n * @return {Phaser.Types.Loader.XHRSettingsObject} A newly formed XHRSettings object.\r\n */\r\nvar MergeXHRSettings = function (global, local)\r\n{\r\n    var output = (global === undefined) ? XHRSettings() : Extend({}, global);\r\n\r\n    if (local)\r\n    {\r\n        for (var setting in local)\r\n        {\r\n            if (local[setting] !== undefined)\r\n            {\r\n                output[setting] = local[setting];\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n};\r\n\r\nmodule.exports = MergeXHRSettings;\r\n"]},"metadata":{},"sourceType":"script"}