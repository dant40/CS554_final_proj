{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DynamicBitmapText#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.DynamicBitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar DynamicBitmapTextWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var text = src.text;\n  var textLength = text.length;\n\n  if (textLength === 0) {\n    return;\n  }\n\n  var pipeline = this.pipeline;\n  renderer.setPipeline(pipeline, src);\n  var crop = src.cropWidth > 0 || src.cropHeight > 0;\n\n  if (crop) {\n    pipeline.flush();\n    renderer.pushScissor(src.x, src.y, src.cropWidth * src.scaleX, src.cropHeight * src.scaleY);\n  }\n\n  var camMatrix = pipeline._tempMatrix1;\n  var spriteMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  var fontMatrix = pipeline._tempMatrix4;\n  spriteMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    spriteMatrix.e = src.x;\n    spriteMatrix.f = src.y; //  Multiply by the Sprite matrix, store result in calcMatrix\n\n    camMatrix.multiply(spriteMatrix, calcMatrix);\n  } else {\n    spriteMatrix.e -= camera.scrollX * src.scrollFactorX;\n    spriteMatrix.f -= camera.scrollY * src.scrollFactorY; //  Multiply by the Sprite matrix, store result in calcMatrix\n\n    camMatrix.multiply(spriteMatrix, calcMatrix);\n  }\n\n  var frame = src.frame;\n  var texture = frame.glTexture;\n  var textureX = frame.cutX;\n  var textureY = frame.cutY;\n  var textureWidth = texture.width;\n  var textureHeight = texture.height;\n  var tintEffect = src._isTinted && src.tintFill;\n  var tintTL = Utils.getTintAppendFloatAlpha(src._tintTL, camera.alpha * src._alphaTL);\n  var tintTR = Utils.getTintAppendFloatAlpha(src._tintTR, camera.alpha * src._alphaTR);\n  var tintBL = Utils.getTintAppendFloatAlpha(src._tintBL, camera.alpha * src._alphaBL);\n  var tintBR = Utils.getTintAppendFloatAlpha(src._tintBR, camera.alpha * src._alphaBR);\n  pipeline.setTexture2D(texture, 0);\n  var xAdvance = 0;\n  var yAdvance = 0;\n  var charCode = 0;\n  var lastCharCode = 0;\n  var letterSpacing = src.letterSpacing;\n  var glyph;\n  var glyphX = 0;\n  var glyphY = 0;\n  var glyphW = 0;\n  var glyphH = 0;\n  var lastGlyph;\n  var scrollX = src.scrollX;\n  var scrollY = src.scrollY;\n  var fontData = src.fontData;\n  var chars = fontData.chars;\n  var lineHeight = fontData.lineHeight;\n  var scale = src.fontSize / fontData.size;\n  var rotation = 0;\n  var align = src._align;\n  var currentLine = 0;\n  var lineOffsetX = 0; //  Update the bounds - skipped internally if not dirty\n\n  src.getTextBounds(false);\n  var lineData = src._bounds.lines;\n\n  if (align === 1) {\n    lineOffsetX = (lineData.longest - lineData.lengths[0]) / 2;\n  } else if (align === 2) {\n    lineOffsetX = lineData.longest - lineData.lengths[0];\n  }\n\n  var roundPixels = camera.roundPixels;\n  var displayCallback = src.displayCallback;\n  var callbackData = src.callbackData;\n\n  for (var i = 0; i < textLength; i++) {\n    charCode = text.charCodeAt(i); //  Carriage-return\n\n    if (charCode === 10) {\n      currentLine++;\n\n      if (align === 1) {\n        lineOffsetX = (lineData.longest - lineData.lengths[currentLine]) / 2;\n      } else if (align === 2) {\n        lineOffsetX = lineData.longest - lineData.lengths[currentLine];\n      }\n\n      xAdvance = 0;\n      yAdvance += lineHeight;\n      lastGlyph = null;\n      continue;\n    }\n\n    glyph = chars[charCode];\n\n    if (!glyph) {\n      continue;\n    }\n\n    glyphX = textureX + glyph.x;\n    glyphY = textureY + glyph.y;\n    glyphW = glyph.width;\n    glyphH = glyph.height;\n    var x = glyph.xOffset + xAdvance - scrollX;\n    var y = glyph.yOffset + yAdvance - scrollY;\n\n    if (lastGlyph !== null) {\n      var kerningOffset = glyph.kerning[lastCharCode];\n      x += kerningOffset !== undefined ? kerningOffset : 0;\n    }\n\n    xAdvance += glyph.xAdvance + letterSpacing;\n    lastGlyph = glyph;\n    lastCharCode = charCode; //  Nothing to render or a space? Then skip to the next glyph\n\n    if (glyphW === 0 || glyphH === 0 || charCode === 32) {\n      continue;\n    }\n\n    scale = src.fontSize / src.fontData.size;\n    rotation = 0;\n\n    if (displayCallback) {\n      callbackData.color = 0;\n      callbackData.tint.topLeft = tintTL;\n      callbackData.tint.topRight = tintTR;\n      callbackData.tint.bottomLeft = tintBL;\n      callbackData.tint.bottomRight = tintBR;\n      callbackData.index = i;\n      callbackData.charCode = charCode;\n      callbackData.x = x;\n      callbackData.y = y;\n      callbackData.scale = scale;\n      callbackData.rotation = rotation;\n      callbackData.data = glyph.data;\n      var output = displayCallback(callbackData);\n      x = output.x;\n      y = output.y;\n      scale = output.scale;\n      rotation = output.rotation;\n\n      if (output.color) {\n        tintTL = output.color;\n        tintTR = output.color;\n        tintBL = output.color;\n        tintBR = output.color;\n      } else {\n        tintTL = output.tint.topLeft;\n        tintTR = output.tint.topRight;\n        tintBL = output.tint.bottomLeft;\n        tintBR = output.tint.bottomRight;\n      }\n\n      tintTL = Utils.getTintAppendFloatAlpha(tintTL, camera.alpha * src._alphaTL);\n      tintTR = Utils.getTintAppendFloatAlpha(tintTR, camera.alpha * src._alphaTR);\n      tintBL = Utils.getTintAppendFloatAlpha(tintBL, camera.alpha * src._alphaBL);\n      tintBR = Utils.getTintAppendFloatAlpha(tintBR, camera.alpha * src._alphaBR);\n    }\n\n    x *= scale;\n    y *= scale;\n    x -= src.displayOriginX;\n    y -= src.displayOriginY;\n    x += lineOffsetX;\n    fontMatrix.applyITRS(x, y, rotation, scale, scale);\n    calcMatrix.multiply(fontMatrix, spriteMatrix);\n    var u0 = glyphX / textureWidth;\n    var v0 = glyphY / textureHeight;\n    var u1 = (glyphX + glyphW) / textureWidth;\n    var v1 = (glyphY + glyphH) / textureHeight;\n    var xw = glyphW;\n    var yh = glyphH;\n    var tx0 = spriteMatrix.e;\n    var ty0 = spriteMatrix.f;\n    var tx1 = yh * spriteMatrix.c + spriteMatrix.e;\n    var ty1 = yh * spriteMatrix.d + spriteMatrix.f;\n    var tx2 = xw * spriteMatrix.a + yh * spriteMatrix.c + spriteMatrix.e;\n    var ty2 = xw * spriteMatrix.b + yh * spriteMatrix.d + spriteMatrix.f;\n    var tx3 = xw * spriteMatrix.a + spriteMatrix.e;\n    var ty3 = xw * spriteMatrix.b + spriteMatrix.f;\n\n    if (roundPixels) {\n      tx0 = Math.round(tx0);\n      ty0 = Math.round(ty0);\n      tx1 = Math.round(tx1);\n      ty1 = Math.round(ty1);\n      tx2 = Math.round(tx2);\n      ty2 = Math.round(ty2);\n      tx3 = Math.round(tx3);\n      ty3 = Math.round(ty3);\n    }\n\n    pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1, tintTL, tintTR, tintBL, tintBR, tintEffect, texture, 0);\n  }\n\n  if (crop) {\n    pipeline.flush();\n    renderer.popScissor();\n  }\n};\n\nmodule.exports = DynamicBitmapTextWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/bitmaptext/dynamic/DynamicBitmapTextWebGLRenderer.js"],"names":["Utils","require","DynamicBitmapTextWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","text","textLength","length","pipeline","setPipeline","crop","cropWidth","cropHeight","flush","pushScissor","x","y","scaleX","scaleY","camMatrix","_tempMatrix1","spriteMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","fontMatrix","_tempMatrix4","applyITRS","rotation","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","frame","texture","glTexture","textureX","cutX","textureY","cutY","textureWidth","width","textureHeight","height","tintEffect","_isTinted","tintFill","tintTL","getTintAppendFloatAlpha","_tintTL","alpha","_alphaTL","tintTR","_tintTR","_alphaTR","tintBL","_tintBL","_alphaBL","tintBR","_tintBR","_alphaBR","setTexture2D","xAdvance","yAdvance","charCode","lastCharCode","letterSpacing","glyph","glyphX","glyphY","glyphW","glyphH","lastGlyph","fontData","chars","lineHeight","scale","fontSize","size","align","_align","currentLine","lineOffsetX","getTextBounds","lineData","_bounds","lines","longest","lengths","roundPixels","displayCallback","callbackData","i","charCodeAt","xOffset","yOffset","kerningOffset","kerning","undefined","color","tint","topLeft","topRight","bottomLeft","bottomRight","index","data","output","displayOriginX","displayOriginY","u0","v0","u1","v1","xw","yh","tx0","ty0","tx1","c","ty1","d","tx2","a","ty2","b","tx3","ty3","Math","round","batchQuad","popScissor","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.DynamicBitmapText#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.DynamicBitmapText} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar DynamicBitmapTextWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var text = src.text;\r\n    var textLength = text.length;\r\n\r\n    if (textLength === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var pipeline = this.pipeline;\r\n\r\n    renderer.setPipeline(pipeline, src);\r\n\r\n    var crop = (src.cropWidth > 0 || src.cropHeight > 0);\r\n\r\n    if (crop)\r\n    {\r\n        pipeline.flush();\r\n\r\n        renderer.pushScissor(\r\n            src.x,\r\n            src.y,\r\n            src.cropWidth * src.scaleX,\r\n            src.cropHeight * src.scaleY\r\n        );\r\n    }\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var spriteMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n    var fontMatrix = pipeline._tempMatrix4;\r\n\r\n    spriteMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        spriteMatrix.e = src.x;\r\n        spriteMatrix.f = src.y;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n    else\r\n    {\r\n        spriteMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        spriteMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n\r\n        //  Multiply by the Sprite matrix, store result in calcMatrix\r\n        camMatrix.multiply(spriteMatrix, calcMatrix);\r\n    }\r\n\r\n    var frame = src.frame;\r\n    var texture = frame.glTexture;\r\n    var textureX = frame.cutX;\r\n    var textureY = frame.cutY;\r\n    var textureWidth = texture.width;\r\n    var textureHeight = texture.height;\r\n\r\n    var tintEffect = (src._isTinted && src.tintFill);\r\n    var tintTL = Utils.getTintAppendFloatAlpha(src._tintTL, camera.alpha * src._alphaTL);\r\n    var tintTR = Utils.getTintAppendFloatAlpha(src._tintTR, camera.alpha * src._alphaTR);\r\n    var tintBL = Utils.getTintAppendFloatAlpha(src._tintBL, camera.alpha * src._alphaBL);\r\n    var tintBR = Utils.getTintAppendFloatAlpha(src._tintBR, camera.alpha * src._alphaBR);\r\n\r\n    pipeline.setTexture2D(texture, 0);\r\n\r\n    var xAdvance = 0;\r\n    var yAdvance = 0;\r\n    var charCode = 0;\r\n    var lastCharCode = 0;\r\n    var letterSpacing = src.letterSpacing;\r\n    var glyph;\r\n    var glyphX = 0;\r\n    var glyphY = 0;\r\n    var glyphW = 0;\r\n    var glyphH = 0;\r\n    var lastGlyph;\r\n    var scrollX = src.scrollX;\r\n    var scrollY = src.scrollY;\r\n\r\n    var fontData = src.fontData;\r\n    var chars = fontData.chars;\r\n    var lineHeight = fontData.lineHeight;\r\n    var scale = (src.fontSize / fontData.size);\r\n    var rotation = 0;\r\n\r\n    var align = src._align;\r\n    var currentLine = 0;\r\n    var lineOffsetX = 0;\r\n\r\n    //  Update the bounds - skipped internally if not dirty\r\n    src.getTextBounds(false);\r\n\r\n    var lineData = src._bounds.lines;\r\n\r\n    if (align === 1)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]) / 2;\r\n    }\r\n    else if (align === 2)\r\n    {\r\n        lineOffsetX = (lineData.longest - lineData.lengths[0]);\r\n    }\r\n\r\n    var roundPixels = camera.roundPixels;\r\n    var displayCallback = src.displayCallback;\r\n    var callbackData = src.callbackData;\r\n\r\n    for (var i = 0; i < textLength; i++)\r\n    {\r\n        charCode = text.charCodeAt(i);\r\n\r\n        //  Carriage-return\r\n        if (charCode === 10)\r\n        {\r\n            currentLine++;\r\n\r\n            if (align === 1)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]) / 2;\r\n            }\r\n            else if (align === 2)\r\n            {\r\n                lineOffsetX = (lineData.longest - lineData.lengths[currentLine]);\r\n            }\r\n\r\n            xAdvance = 0;\r\n            yAdvance += lineHeight;\r\n            lastGlyph = null;\r\n\r\n            continue;\r\n        }\r\n\r\n        glyph = chars[charCode];\r\n\r\n        if (!glyph)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        glyphX = textureX + glyph.x;\r\n        glyphY = textureY + glyph.y;\r\n\r\n        glyphW = glyph.width;\r\n        glyphH = glyph.height;\r\n\r\n        var x = (glyph.xOffset + xAdvance) - scrollX;\r\n        var y = (glyph.yOffset + yAdvance) - scrollY;\r\n\r\n        if (lastGlyph !== null)\r\n        {\r\n            var kerningOffset = glyph.kerning[lastCharCode];\r\n            x += (kerningOffset !== undefined) ? kerningOffset : 0;\r\n        }\r\n\r\n        xAdvance += glyph.xAdvance + letterSpacing;\r\n        lastGlyph = glyph;\r\n        lastCharCode = charCode;\r\n\r\n        //  Nothing to render or a space? Then skip to the next glyph\r\n        if (glyphW === 0 || glyphH === 0 || charCode === 32)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        scale = (src.fontSize / src.fontData.size);\r\n        rotation = 0;\r\n\r\n        if (displayCallback)\r\n        {\r\n            callbackData.color = 0;\r\n            callbackData.tint.topLeft = tintTL;\r\n            callbackData.tint.topRight = tintTR;\r\n            callbackData.tint.bottomLeft = tintBL;\r\n            callbackData.tint.bottomRight = tintBR;\r\n            callbackData.index = i;\r\n            callbackData.charCode = charCode;\r\n            callbackData.x = x;\r\n            callbackData.y = y;\r\n            callbackData.scale = scale;\r\n            callbackData.rotation = rotation;\r\n            callbackData.data = glyph.data;\r\n\r\n            var output = displayCallback(callbackData);\r\n\r\n            x = output.x;\r\n            y = output.y;\r\n            scale = output.scale;\r\n            rotation = output.rotation;\r\n\r\n            if (output.color)\r\n            {\r\n                tintTL = output.color;\r\n                tintTR = output.color;\r\n                tintBL = output.color;\r\n                tintBR = output.color;\r\n            }\r\n            else\r\n            {\r\n                tintTL = output.tint.topLeft;\r\n                tintTR = output.tint.topRight;\r\n                tintBL = output.tint.bottomLeft;\r\n                tintBR = output.tint.bottomRight;\r\n            }\r\n\r\n            tintTL = Utils.getTintAppendFloatAlpha(tintTL, camera.alpha * src._alphaTL);\r\n            tintTR = Utils.getTintAppendFloatAlpha(tintTR, camera.alpha * src._alphaTR);\r\n            tintBL = Utils.getTintAppendFloatAlpha(tintBL, camera.alpha * src._alphaBL);\r\n            tintBR = Utils.getTintAppendFloatAlpha(tintBR, camera.alpha * src._alphaBR);\r\n        }\r\n\r\n        x *= scale;\r\n        y *= scale;\r\n\r\n        x -= src.displayOriginX;\r\n        y -= src.displayOriginY;\r\n\r\n        x += lineOffsetX;\r\n\r\n        fontMatrix.applyITRS(x, y, rotation, scale, scale);\r\n\r\n        calcMatrix.multiply(fontMatrix, spriteMatrix);\r\n\r\n        var u0 = glyphX / textureWidth;\r\n        var v0 = glyphY / textureHeight;\r\n        var u1 = (glyphX + glyphW) / textureWidth;\r\n        var v1 = (glyphY + glyphH) / textureHeight;\r\n\r\n        var xw = glyphW;\r\n        var yh = glyphH;\r\n\r\n        var tx0 = spriteMatrix.e;\r\n        var ty0 = spriteMatrix.f;\r\n\r\n        var tx1 = yh * spriteMatrix.c + spriteMatrix.e;\r\n        var ty1 = yh * spriteMatrix.d + spriteMatrix.f;\r\n\r\n        var tx2 = xw * spriteMatrix.a + yh * spriteMatrix.c + spriteMatrix.e;\r\n        var ty2 = xw * spriteMatrix.b + yh * spriteMatrix.d + spriteMatrix.f;\r\n\r\n        var tx3 = xw * spriteMatrix.a + spriteMatrix.e;\r\n        var ty3 = xw * spriteMatrix.b + spriteMatrix.f;\r\n\r\n        if (roundPixels)\r\n        {\r\n            tx0 = Math.round(tx0);\r\n            ty0 = Math.round(ty0);\r\n\r\n            tx1 = Math.round(tx1);\r\n            ty1 = Math.round(ty1);\r\n\r\n            tx2 = Math.round(tx2);\r\n            ty2 = Math.round(ty2);\r\n\r\n            tx3 = Math.round(tx3);\r\n            ty3 = Math.round(ty3);\r\n        }\r\n\r\n        pipeline.batchQuad(tx0, ty0, tx1, ty1, tx2, ty2, tx3, ty3, u0, v0, u1, v1, tintTL, tintTR, tintBL, tintBR, tintEffect, texture, 0);\r\n    }\r\n\r\n    if (crop)\r\n    {\r\n        pipeline.flush();\r\n\r\n        renderer.popScissor();\r\n    }\r\n};\r\n\r\nmodule.exports = DynamicBitmapTextWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}