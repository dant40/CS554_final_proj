{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Checks for intersection between the Line and a Rectangle shape, or a rectangle-like\r\n * object, with public `x`, `y`, `right` and `bottom` properties, such as a Sprite or Body.\r\n *\r\n * An intersection is considered valid if:\r\n *\r\n * The line starts within, or ends within, the Rectangle.\r\n * The line segment intersects one of the 4 rectangle edges.\r\n *\r\n * The for the purposes of this function rectangles are considered 'solid'.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Line and the Rectangle intersect, `false` otherwise.\r\n */\nvar LineToRectangle = function (line, rect) {\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var bx1 = rect.x;\n  var by1 = rect.y;\n  var bx2 = rect.right;\n  var by2 = rect.bottom;\n  var t = 0; //  If the start or end of the line is inside the rect then we assume\n  //  collision, as rects are solid for our use-case.\n\n  if (x1 >= bx1 && x1 <= bx2 && y1 >= by1 && y1 <= by2 || x2 >= bx1 && x2 <= bx2 && y2 >= by1 && y2 <= by2) {\n    return true;\n  }\n\n  if (x1 < bx1 && x2 >= bx1) {\n    //  Left edge\n    t = y1 + (y2 - y1) * (bx1 - x1) / (x2 - x1);\n\n    if (t > by1 && t <= by2) {\n      return true;\n    }\n  } else if (x1 > bx2 && x2 <= bx2) {\n    //  Right edge\n    t = y1 + (y2 - y1) * (bx2 - x1) / (x2 - x1);\n\n    if (t >= by1 && t <= by2) {\n      return true;\n    }\n  }\n\n  if (y1 < by1 && y2 >= by1) {\n    //  Top edge\n    t = x1 + (x2 - x1) * (by1 - y1) / (y2 - y1);\n\n    if (t >= bx1 && t <= bx2) {\n      return true;\n    }\n  } else if (y1 > by2 && y2 <= by2) {\n    //  Bottom edge\n    t = x1 + (x2 - x1) * (by2 - y1) / (y2 - y1);\n\n    if (t >= bx1 && t <= bx2) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = LineToRectangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/LineToRectangle.js"],"names":["LineToRectangle","line","rect","x1","y1","x2","y2","bx1","x","by1","y","bx2","right","by2","bottom","t","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBA,IAAIA,eAAe,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EACtB;AACI,MAAIC,EAAE,GAAGF,IAAI,CAACE,EAAd;AACA,MAAIC,EAAE,GAAGH,IAAI,CAACG,EAAd;AAEA,MAAIC,EAAE,GAAGJ,IAAI,CAACI,EAAd;AACA,MAAIC,EAAE,GAAGL,IAAI,CAACK,EAAd;AAEA,MAAIC,GAAG,GAAGL,IAAI,CAACM,CAAf;AACA,MAAIC,GAAG,GAAGP,IAAI,CAACQ,CAAf;AACA,MAAIC,GAAG,GAAGT,IAAI,CAACU,KAAf;AACA,MAAIC,GAAG,GAAGX,IAAI,CAACY,MAAf;AAEA,MAAIC,CAAC,GAAG,CAAR,CAZJ,CAcI;AACA;;AAEA,MAAKZ,EAAE,IAAII,GAAN,IAAaJ,EAAE,IAAIQ,GAAnB,IAA0BP,EAAE,IAAIK,GAAhC,IAAuCL,EAAE,IAAIS,GAA9C,IACCR,EAAE,IAAIE,GAAN,IAAaF,EAAE,IAAIM,GAAnB,IAA0BL,EAAE,IAAIG,GAAhC,IAAuCH,EAAE,IAAIO,GADlD,EAEA;AACI,WAAO,IAAP;AACH;;AAED,MAAIV,EAAE,GAAGI,GAAL,IAAYF,EAAE,IAAIE,GAAtB,EACA;AACI;AACAQ,IAAAA,CAAC,GAAGX,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,KAAaG,GAAG,GAAGJ,EAAnB,KAA0BE,EAAE,GAAGF,EAA/B,CAAT;;AAEA,QAAIY,CAAC,GAAGN,GAAJ,IAAWM,CAAC,IAAIF,GAApB,EACA;AACI,aAAO,IAAP;AACH;AACJ,GATD,MAUK,IAAIV,EAAE,GAAGQ,GAAL,IAAYN,EAAE,IAAIM,GAAtB,EACL;AACI;AACAI,IAAAA,CAAC,GAAGX,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,KAAaO,GAAG,GAAGR,EAAnB,KAA0BE,EAAE,GAAGF,EAA/B,CAAT;;AAEA,QAAIY,CAAC,IAAIN,GAAL,IAAYM,CAAC,IAAIF,GAArB,EACA;AACI,aAAO,IAAP;AACH;AACJ;;AAED,MAAIT,EAAE,GAAGK,GAAL,IAAYH,EAAE,IAAIG,GAAtB,EACA;AACI;AACAM,IAAAA,CAAC,GAAGZ,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,KAAaM,GAAG,GAAGL,EAAnB,KAA0BE,EAAE,GAAGF,EAA/B,CAAT;;AAEA,QAAIW,CAAC,IAAIR,GAAL,IAAYQ,CAAC,IAAIJ,GAArB,EACA;AACI,aAAO,IAAP;AACH;AACJ,GATD,MAUK,IAAIP,EAAE,GAAGS,GAAL,IAAYP,EAAE,IAAIO,GAAtB,EACL;AACI;AACAE,IAAAA,CAAC,GAAGZ,EAAE,GAAG,CAACE,EAAE,GAAGF,EAAN,KAAaU,GAAG,GAAGT,EAAnB,KAA0BE,EAAE,GAAGF,EAA/B,CAAT;;AAEA,QAAIW,CAAC,IAAIR,GAAL,IAAYQ,CAAC,IAAIJ,GAArB,EACA;AACI,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CAnED;;AAqEAK,MAAM,CAACC,OAAP,GAAiBjB,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Checks for intersection between the Line and a Rectangle shape, or a rectangle-like\r\n * object, with public `x`, `y`, `right` and `bottom` properties, such as a Sprite or Body.\r\n *\r\n * An intersection is considered valid if:\r\n *\r\n * The line starts within, or ends within, the Rectangle.\r\n * The line segment intersects one of the 4 rectangle edges.\r\n *\r\n * The for the purposes of this function rectangles are considered 'solid'.\r\n *\r\n * @function Phaser.Geom.Intersects.LineToRectangle\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Line} line - The Line to check for intersection.\r\n * @param {(Phaser.Geom.Rectangle|object)} rect - The Rectangle to check for intersection.\r\n *\r\n * @return {boolean} `true` if the Line and the Rectangle intersect, `false` otherwise.\r\n */\r\nvar LineToRectangle = function (line, rect)\r\n{\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    var bx1 = rect.x;\r\n    var by1 = rect.y;\r\n    var bx2 = rect.right;\r\n    var by2 = rect.bottom;\r\n\r\n    var t = 0;\r\n\r\n    //  If the start or end of the line is inside the rect then we assume\r\n    //  collision, as rects are solid for our use-case.\r\n\r\n    if ((x1 >= bx1 && x1 <= bx2 && y1 >= by1 && y1 <= by2) ||\r\n        (x2 >= bx1 && x2 <= bx2 && y2 >= by1 && y2 <= by2))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (x1 < bx1 && x2 >= bx1)\r\n    {\r\n        //  Left edge\r\n        t = y1 + (y2 - y1) * (bx1 - x1) / (x2 - x1);\r\n\r\n        if (t > by1 && t <= by2)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    else if (x1 > bx2 && x2 <= bx2)\r\n    {\r\n        //  Right edge\r\n        t = y1 + (y2 - y1) * (bx2 - x1) / (x2 - x1);\r\n\r\n        if (t >= by1 && t <= by2)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    if (y1 < by1 && y2 >= by1)\r\n    {\r\n        //  Top edge\r\n        t = x1 + (x2 - x1) * (by1 - y1) / (y2 - y1);\r\n\r\n        if (t >= bx1 && t <= bx2)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    else if (y1 > by2 && y2 <= by2)\r\n    {\r\n        //  Bottom edge\r\n        t = x1 + (x2 - x1) * (by2 - y1) / (y2 - y1);\r\n\r\n        if (t >= bx1 && t <= bx2)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = LineToRectangle;\r\n"]},"metadata":{},"sourceType":"script"}