{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Rectangle = require('./Rectangle');\n\nvar Intersects = require('../intersects/RectangleToRectangle');\n/**\r\n * Takes two Rectangles and first checks to see if they intersect.\r\n * If they intersect it will return the area of intersection in the `out` Rectangle.\r\n * If they do not intersect, the `out` Rectangle will have a width and height of zero.\r\n *\r\n * @function Phaser.Geom.Rectangle.Intersection\r\n * @since 3.11.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [rect,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} [out] - A Rectangle to store the intersection results in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The intersection result. If the width and height are zero, no intersection occurred.\r\n */\n\n\nvar Intersection = function (rectA, rectB, out) {\n  if (out === undefined) {\n    out = new Rectangle();\n  }\n\n  if (Intersects(rectA, rectB)) {\n    out.x = Math.max(rectA.x, rectB.x);\n    out.y = Math.max(rectA.y, rectB.y);\n    out.width = Math.min(rectA.right, rectB.right) - out.x;\n    out.height = Math.min(rectA.bottom, rectB.bottom) - out.y;\n  } else {\n    out.setEmpty();\n  }\n\n  return out;\n};\n\nmodule.exports = Intersection;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/Intersection.js"],"names":["Rectangle","require","Intersects","Intersection","rectA","rectB","out","undefined","x","Math","max","y","width","min","right","height","bottom","setEmpty","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,oCAAD,CAAxB;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIE,YAAY,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,GAAxB,EACnB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,IAAIN,SAAJ,EAAN;AAAwB;;AAEjD,MAAIE,UAAU,CAACE,KAAD,EAAQC,KAAR,CAAd,EACA;AACIC,IAAAA,GAAG,CAACE,CAAJ,GAAQC,IAAI,CAACC,GAAL,CAASN,KAAK,CAACI,CAAf,EAAkBH,KAAK,CAACG,CAAxB,CAAR;AACAF,IAAAA,GAAG,CAACK,CAAJ,GAAQF,IAAI,CAACC,GAAL,CAASN,KAAK,CAACO,CAAf,EAAkBN,KAAK,CAACM,CAAxB,CAAR;AACAL,IAAAA,GAAG,CAACM,KAAJ,GAAYH,IAAI,CAACI,GAAL,CAAST,KAAK,CAACU,KAAf,EAAsBT,KAAK,CAACS,KAA5B,IAAqCR,GAAG,CAACE,CAArD;AACAF,IAAAA,GAAG,CAACS,MAAJ,GAAaN,IAAI,CAACI,GAAL,CAAST,KAAK,CAACY,MAAf,EAAuBX,KAAK,CAACW,MAA7B,IAAuCV,GAAG,CAACK,CAAxD;AACH,GAND,MAQA;AACIL,IAAAA,GAAG,CAACW,QAAJ;AACH;;AAED,SAAOX,GAAP;AACH,CAjBD;;AAmBAY,MAAM,CAACC,OAAP,GAAiBhB,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Rectangle = require('./Rectangle');\r\nvar Intersects = require('../intersects/RectangleToRectangle');\r\n\r\n/**\r\n * Takes two Rectangles and first checks to see if they intersect.\r\n * If they intersect it will return the area of intersection in the `out` Rectangle.\r\n * If they do not intersect, the `out` Rectangle will have a width and height of zero.\r\n *\r\n * @function Phaser.Geom.Rectangle.Intersection\r\n * @since 3.11.0\r\n *\r\n * @generic {Phaser.Geom.Rectangle} O - [rect,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectA - The first Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} rectB - The second Rectangle to get the intersection from.\r\n * @param {Phaser.Geom.Rectangle} [out] - A Rectangle to store the intersection results in.\r\n *\r\n * @return {Phaser.Geom.Rectangle} The intersection result. If the width and height are zero, no intersection occurred.\r\n */\r\nvar Intersection = function (rectA, rectB, out)\r\n{\r\n    if (out === undefined) { out = new Rectangle(); }\r\n\r\n    if (Intersects(rectA, rectB))\r\n    {\r\n        out.x = Math.max(rectA.x, rectB.x);\r\n        out.y = Math.max(rectA.y, rectB.y);\r\n        out.width = Math.min(rectA.right, rectB.right) - out.x;\r\n        out.height = Math.min(rectA.bottom, rectB.bottom) - out.y;\r\n    }\r\n    else\r\n    {\r\n        out.setEmpty();\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = Intersection;\r\n"]},"metadata":{},"sourceType":"script"}