{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar CONST = require('./const');\n\nvar Events = require('./events');\n\nvar GetFastValue = require('../utils/object/GetFastValue');\n\nvar GetURL = require('./GetURL');\n\nvar MergeXHRSettings = require('./MergeXHRSettings');\n\nvar XHRLoader = require('./XHRLoader');\n\nvar XHRSettings = require('./XHRSettings');\n/**\r\n * @classdesc\r\n * The base File class used by all File Types that the Loader can support.\r\n * You shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class File\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {Phaser.Types.Loader.FileConfig} fileConfig - The file configuration object, as created by the file type.\r\n */\n\n\nvar File = new Class({\n  initialize: function File(loader, fileConfig) {\n    /**\r\n     * A reference to the Loader that is going to load this file.\r\n     *\r\n     * @name Phaser.Loader.File#loader\r\n     * @type {Phaser.Loader.LoaderPlugin}\r\n     * @since 3.0.0\r\n     */\n    this.loader = loader;\n    /**\r\n     * A reference to the Cache, or Texture Manager, that is going to store this file if it loads.\r\n     *\r\n     * @name Phaser.Loader.File#cache\r\n     * @type {(Phaser.Cache.BaseCache|Phaser.Textures.TextureManager)}\r\n     * @since 3.7.0\r\n     */\n\n    this.cache = GetFastValue(fileConfig, 'cache', false);\n    /**\r\n     * The file type string (image, json, etc) for sorting within the Loader.\r\n     *\r\n     * @name Phaser.Loader.File#type\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.type = GetFastValue(fileConfig, 'type', false);\n    /**\r\n     * Unique cache key (unique within its file type)\r\n     *\r\n     * @name Phaser.Loader.File#key\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n    this.key = GetFastValue(fileConfig, 'key', false);\n    var loadKey = this.key;\n\n    if (loader.prefix && loader.prefix !== '') {\n      this.key = loader.prefix + loadKey;\n    }\n\n    if (!this.type || !this.key) {\n      throw new Error('Error calling \\'Loader.' + this.type + '\\' invalid key provided.');\n    }\n    /**\r\n     * The URL of the file, not including baseURL.\r\n     * Automatically has Loader.path prepended to it.\r\n     *\r\n     * @name Phaser.Loader.File#url\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.url = GetFastValue(fileConfig, 'url');\n\n    if (this.url === undefined) {\n      this.url = loader.path + loadKey + '.' + GetFastValue(fileConfig, 'extension', '');\n    } else if (typeof this.url !== 'function') {\n      this.url = loader.path + this.url;\n    }\n    /**\r\n     * The final URL this file will load from, including baseURL and path.\r\n     * Set automatically when the Loader calls 'load' on this file.\r\n     *\r\n     * @name Phaser.Loader.File#src\r\n     * @type {string}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.src = '';\n    /**\r\n     * The merged XHRSettings for this file.\r\n     *\r\n     * @name Phaser.Loader.File#xhrSettings\r\n     * @type {Phaser.Types.Loader.XHRSettingsObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.xhrSettings = XHRSettings(GetFastValue(fileConfig, 'responseType', undefined));\n\n    if (GetFastValue(fileConfig, 'xhrSettings', false)) {\n      this.xhrSettings = MergeXHRSettings(this.xhrSettings, GetFastValue(fileConfig, 'xhrSettings', {}));\n    }\n    /**\r\n     * The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.\r\n     *\r\n     * @name Phaser.Loader.File#xhrLoader\r\n     * @type {?XMLHttpRequest}\r\n     * @since 3.0.0\r\n     */\n\n\n    this.xhrLoader = null;\n    /**\r\n     * The current state of the file. One of the FILE_CONST values.\r\n     *\r\n     * @name Phaser.Loader.File#state\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.state = typeof this.url === 'function' ? CONST.FILE_POPULATED : CONST.FILE_PENDING;\n    /**\r\n     * The total size of this file.\r\n     * Set by onProgress and only if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#bytesTotal\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.bytesTotal = 0;\n    /**\r\n     * Updated as the file loads.\r\n     * Only set if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#bytesLoaded\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.bytesLoaded = -1;\n    /**\r\n     * A percentage value between 0 and 1 indicating how much of this file has loaded.\r\n     * Only set if loading via XHR.\r\n     *\r\n     * @name Phaser.Loader.File#percentComplete\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.percentComplete = -1;\n    /**\r\n     * For CORs based loading.\r\n     * If this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)\r\n     *\r\n     * @name Phaser.Loader.File#crossOrigin\r\n     * @type {(string|undefined)}\r\n     * @since 3.0.0\r\n     */\n\n    this.crossOrigin = undefined;\n    /**\r\n     * The processed file data, stored here after the file has loaded.\r\n     *\r\n     * @name Phaser.Loader.File#data\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n\n    this.data = undefined;\n    /**\r\n     * A config object that can be used by file types to store transitional data.\r\n     *\r\n     * @name Phaser.Loader.File#config\r\n     * @type {*}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = GetFastValue(fileConfig, 'config', {});\n    /**\r\n     * If this is a multipart file, i.e. an atlas and its json together, then this is a reference\r\n     * to the parent MultiFile. Set and used internally by the Loader or specific file types.\r\n     *\r\n     * @name Phaser.Loader.File#multiFile\r\n     * @type {?Phaser.Loader.MultiFile}\r\n     * @since 3.7.0\r\n     */\n\n    this.multiFile;\n    /**\r\n     * Does this file have an associated linked file? Such as an image and a normal map.\r\n     * Atlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\r\n     * actually bound by data, where-as a linkFile is.\r\n     *\r\n     * @name Phaser.Loader.File#linkFile\r\n     * @type {?Phaser.Loader.File}\r\n     * @since 3.7.0\r\n     */\n\n    this.linkFile;\n  },\n\n  /**\r\n   * Links this File with another, so they depend upon each other for loading and processing.\r\n   *\r\n   * @method Phaser.Loader.File#setLink\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} fileB - The file to link to this one.\r\n   */\n  setLink: function (fileB) {\n    this.linkFile = fileB;\n    fileB.linkFile = this;\n  },\n\n  /**\r\n   * Resets the XHRLoader instance this file is using.\r\n   *\r\n   * @method Phaser.Loader.File#resetXHR\r\n   * @since 3.0.0\r\n   */\n  resetXHR: function () {\n    if (this.xhrLoader) {\n      this.xhrLoader.onload = undefined;\n      this.xhrLoader.onerror = undefined;\n      this.xhrLoader.onprogress = undefined;\n    }\n  },\n\n  /**\r\n   * Called by the Loader, starts the actual file downloading.\r\n   * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n   * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n   *\r\n   * @method Phaser.Loader.File#load\r\n   * @since 3.0.0\r\n   */\n  load: function () {\n    if (this.state === CONST.FILE_POPULATED) {\n      //  Can happen for example in a JSONFile if they've provided a JSON object instead of a URL\n      this.loader.nextFile(this, true);\n    } else {\n      this.src = GetURL(this, this.loader.baseURL);\n\n      if (this.src.indexOf('data:') === 0) {\n        console.warn('Local data URIs are not supported: ' + this.key);\n      } else {\n        //  The creation of this XHRLoader starts the load process going.\n        //  It will automatically call the following, based on the load outcome:\n        //  \n        // xhr.onload = this.onLoad\n        // xhr.onerror = this.onError\n        // xhr.onprogress = this.onProgress\n        this.xhrLoader = XHRLoader(this, this.loader.xhr);\n      }\n    }\n  },\n\n  /**\r\n   * Called when the file finishes loading, is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onLoad\r\n   * @since 3.0.0\r\n   *\r\n   * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n   */\n  onLoad: function (xhr, event) {\n    var localFileOk = xhr.responseURL && xhr.responseURL.indexOf('file://') === 0 && event.target.status === 0;\n    var success = !(event.target && event.target.status !== 200) || localFileOk; //  Handle HTTP status codes of 4xx and 5xx as errors, even if xhr.onerror was not called.\n\n    if (xhr.readyState === 4 && xhr.status >= 400 && xhr.status <= 599) {\n      success = false;\n    }\n\n    this.resetXHR();\n    this.loader.nextFile(this, success);\n  },\n\n  /**\r\n   * Called if the file errors while loading, is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onError\r\n   * @since 3.0.0\r\n   *\r\n   * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this error.\r\n   */\n  onError: function () {\n    this.resetXHR();\n    this.loader.nextFile(this, false);\n  },\n\n  /**\r\n   * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.File#onProgress\r\n   * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n   * @since 3.0.0\r\n   *\r\n   * @param {ProgressEvent} event - The DOM ProgressEvent.\r\n   */\n  onProgress: function (event) {\n    if (event.lengthComputable) {\n      this.bytesLoaded = event.loaded;\n      this.bytesTotal = event.total;\n      this.percentComplete = Math.min(this.bytesLoaded / this.bytesTotal, 1);\n      this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\n    }\n  },\n\n  /**\r\n   * Usually overridden by the FileTypes and is called by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data, for example a JSON file will parse itself during this stage.\r\n   *\r\n   * @method Phaser.Loader.File#onProcess\r\n   * @since 3.0.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n    this.onProcessComplete();\n  },\n\n  /**\r\n   * Called when the File has completed processing.\r\n   * Checks on the state of its multifile, if set.\r\n   *\r\n   * @method Phaser.Loader.File#onProcessComplete\r\n   * @since 3.7.0\r\n   */\n  onProcessComplete: function () {\n    this.state = CONST.FILE_COMPLETE;\n\n    if (this.multiFile) {\n      this.multiFile.onFileComplete(this);\n    }\n\n    this.loader.fileProcessComplete(this);\n  },\n\n  /**\r\n   * Called when the File has completed processing but it generated an error.\r\n   * Checks on the state of its multifile, if set.\r\n   *\r\n   * @method Phaser.Loader.File#onProcessError\r\n   * @since 3.7.0\r\n   */\n  onProcessError: function () {\n    this.state = CONST.FILE_ERRORED;\n\n    if (this.multiFile) {\n      this.multiFile.onFileFailed(this);\n    }\n\n    this.loader.fileProcessComplete(this);\n  },\n\n  /**\r\n   * Checks if a key matching the one used by this file exists in the target Cache or not.\r\n   * This is called automatically by the LoaderPlugin to decide if the file can be safely\r\n   * loaded or will conflict.\r\n   *\r\n   * @method Phaser.Loader.File#hasCacheConflict\r\n   * @since 3.7.0\r\n   *\r\n   * @return {boolean} `true` if adding this file will cause a conflict, otherwise `false`.\r\n   */\n  hasCacheConflict: function () {\n    return this.cache && this.cache.exists(this.key);\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   * This method is often overridden by specific file types.\r\n   *\r\n   * @method Phaser.Loader.File#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function () {\n    if (this.cache) {\n      this.cache.add(this.key, this.data);\n    }\n\n    this.pendingDestroy();\n  },\n\n  /**\r\n   * Called once the file has been added to its cache and is now ready for deletion from the Loader.\r\n   * It will emit a `filecomplete` event from the LoaderPlugin.\r\n   *\r\n   * @method Phaser.Loader.File#pendingDestroy\r\n   * @fires Phaser.Loader.Events#FILE_COMPLETE\r\n   * @fires Phaser.Loader.Events#FILE_KEY_COMPLETE\r\n   * @since 3.7.0\r\n   */\n  pendingDestroy: function (data) {\n    if (data === undefined) {\n      data = this.data;\n    }\n\n    var key = this.key;\n    var type = this.type;\n    this.loader.emit(Events.FILE_COMPLETE, key, type, data);\n    this.loader.emit(Events.FILE_KEY_COMPLETE + type + '-' + key, key, type, data);\n    this.loader.flagForRemoval(this);\n  },\n\n  /**\r\n   * Destroy this File and any references it holds.\r\n   *\r\n   * @method Phaser.Loader.File#destroy\r\n   * @since 3.7.0\r\n   */\n  destroy: function () {\n    this.loader = null;\n    this.cache = null;\n    this.xhrSettings = null;\n    this.multiFile = null;\n    this.linkFile = null;\n    this.data = null;\n  }\n});\n/**\r\n * Static method for creating object URL using URL API and setting it as image 'src' attribute.\r\n * If URL API is not supported (usually on old browsers) it falls back to creating Base64 encoded url using FileReader.\r\n *\r\n * @method Phaser.Loader.File.createObjectURL\r\n * @static\r\n * @since 3.7.0\r\n * \r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be set to object URL.\r\n * @param {Blob} blob - A Blob object to create an object URL for.\r\n * @param {string} defaultType - Default mime type used if blob type is not available.\r\n */\n\nFile.createObjectURL = function (image, blob, defaultType) {\n  if (typeof URL === 'function') {\n    image.src = URL.createObjectURL(blob);\n  } else {\n    var reader = new FileReader();\n\n    reader.onload = function () {\n      image.removeAttribute('crossOrigin');\n      image.src = 'data:' + (blob.type || defaultType) + ';base64,' + reader.result.split(',')[1];\n    };\n\n    reader.onerror = image.onerror;\n    reader.readAsDataURL(blob);\n  }\n};\n/**\r\n * Static method for releasing an existing object URL which was previously created\r\n * by calling {@link File#createObjectURL} method.\r\n *\r\n * @method Phaser.Loader.File.revokeObjectURL\r\n * @static\r\n * @since 3.7.0\r\n * \r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be revoked.\r\n */\n\n\nFile.revokeObjectURL = function (image) {\n  if (typeof URL === 'function') {\n    URL.revokeObjectURL(image.src);\n  }\n};\n\nmodule.exports = File;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/File.js"],"names":["Class","require","CONST","Events","GetFastValue","GetURL","MergeXHRSettings","XHRLoader","XHRSettings","File","initialize","loader","fileConfig","cache","type","key","loadKey","prefix","Error","url","undefined","path","src","xhrSettings","xhrLoader","state","FILE_POPULATED","FILE_PENDING","bytesTotal","bytesLoaded","percentComplete","crossOrigin","data","config","multiFile","linkFile","setLink","fileB","resetXHR","onload","onerror","onprogress","load","nextFile","baseURL","indexOf","console","warn","xhr","onLoad","event","localFileOk","responseURL","target","status","success","readyState","onError","onProgress","lengthComputable","loaded","total","Math","min","emit","FILE_PROGRESS","onProcess","FILE_PROCESSING","onProcessComplete","FILE_COMPLETE","onFileComplete","fileProcessComplete","onProcessError","FILE_ERRORED","onFileFailed","hasCacheConflict","exists","addToCache","add","pendingDestroy","FILE_KEY_COMPLETE","flagForRemoval","destroy","createObjectURL","image","blob","defaultType","URL","reader","FileReader","removeAttribute","result","split","readAsDataURL","revokeObjectURL","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar CONST = require('./const');\r\nvar Events = require('./events');\r\nvar GetFastValue = require('../utils/object/GetFastValue');\r\nvar GetURL = require('./GetURL');\r\nvar MergeXHRSettings = require('./MergeXHRSettings');\r\nvar XHRLoader = require('./XHRLoader');\r\nvar XHRSettings = require('./XHRSettings');\r\n\r\n/**\r\n * @classdesc\r\n * The base File class used by all File Types that the Loader can support.\r\n * You shouldn't create an instance of a File directly, but should extend it with your own class, setting a custom type and processing methods.\r\n *\r\n * @class File\r\n * @memberof Phaser.Loader\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - The Loader that is going to load this File.\r\n * @param {Phaser.Types.Loader.FileConfig} fileConfig - The file configuration object, as created by the file type.\r\n */\r\nvar File = new Class({\r\n\r\n    initialize:\r\n\r\n    function File (loader, fileConfig)\r\n    {\r\n        /**\r\n         * A reference to the Loader that is going to load this file.\r\n         *\r\n         * @name Phaser.Loader.File#loader\r\n         * @type {Phaser.Loader.LoaderPlugin}\r\n         * @since 3.0.0\r\n         */\r\n        this.loader = loader;\r\n\r\n        /**\r\n         * A reference to the Cache, or Texture Manager, that is going to store this file if it loads.\r\n         *\r\n         * @name Phaser.Loader.File#cache\r\n         * @type {(Phaser.Cache.BaseCache|Phaser.Textures.TextureManager)}\r\n         * @since 3.7.0\r\n         */\r\n        this.cache = GetFastValue(fileConfig, 'cache', false);\r\n\r\n        /**\r\n         * The file type string (image, json, etc) for sorting within the Loader.\r\n         *\r\n         * @name Phaser.Loader.File#type\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.type = GetFastValue(fileConfig, 'type', false);\r\n\r\n        /**\r\n         * Unique cache key (unique within its file type)\r\n         *\r\n         * @name Phaser.Loader.File#key\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.key = GetFastValue(fileConfig, 'key', false);\r\n\r\n        var loadKey = this.key;\r\n\r\n        if (loader.prefix && loader.prefix !== '')\r\n        {\r\n            this.key = loader.prefix + loadKey;\r\n        }\r\n\r\n        if (!this.type || !this.key)\r\n        {\r\n            throw new Error('Error calling \\'Loader.' + this.type + '\\' invalid key provided.');\r\n        }\r\n\r\n        /**\r\n         * The URL of the file, not including baseURL.\r\n         * Automatically has Loader.path prepended to it.\r\n         *\r\n         * @name Phaser.Loader.File#url\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.url = GetFastValue(fileConfig, 'url');\r\n\r\n        if (this.url === undefined)\r\n        {\r\n            this.url = loader.path + loadKey + '.' + GetFastValue(fileConfig, 'extension', '');\r\n        }\r\n        else if (typeof(this.url) !== 'function')\r\n        {\r\n            this.url = loader.path + this.url;\r\n        }\r\n\r\n        /**\r\n         * The final URL this file will load from, including baseURL and path.\r\n         * Set automatically when the Loader calls 'load' on this file.\r\n         *\r\n         * @name Phaser.Loader.File#src\r\n         * @type {string}\r\n         * @since 3.0.0\r\n         */\r\n        this.src = '';\r\n\r\n        /**\r\n         * The merged XHRSettings for this file.\r\n         *\r\n         * @name Phaser.Loader.File#xhrSettings\r\n         * @type {Phaser.Types.Loader.XHRSettingsObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhrSettings = XHRSettings(GetFastValue(fileConfig, 'responseType', undefined));\r\n\r\n        if (GetFastValue(fileConfig, 'xhrSettings', false))\r\n        {\r\n            this.xhrSettings = MergeXHRSettings(this.xhrSettings, GetFastValue(fileConfig, 'xhrSettings', {}));\r\n        }\r\n\r\n        /**\r\n         * The XMLHttpRequest instance (as created by XHR Loader) that is loading this File.\r\n         *\r\n         * @name Phaser.Loader.File#xhrLoader\r\n         * @type {?XMLHttpRequest}\r\n         * @since 3.0.0\r\n         */\r\n        this.xhrLoader = null;\r\n\r\n        /**\r\n         * The current state of the file. One of the FILE_CONST values.\r\n         *\r\n         * @name Phaser.Loader.File#state\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.state = (typeof(this.url) === 'function') ? CONST.FILE_POPULATED : CONST.FILE_PENDING;\r\n\r\n        /**\r\n         * The total size of this file.\r\n         * Set by onProgress and only if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#bytesTotal\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.bytesTotal = 0;\r\n\r\n        /**\r\n         * Updated as the file loads.\r\n         * Only set if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#bytesLoaded\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.bytesLoaded = -1;\r\n\r\n        /**\r\n         * A percentage value between 0 and 1 indicating how much of this file has loaded.\r\n         * Only set if loading via XHR.\r\n         *\r\n         * @name Phaser.Loader.File#percentComplete\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.percentComplete = -1;\r\n\r\n        /**\r\n         * For CORs based loading.\r\n         * If this is undefined then the File will check BaseLoader.crossOrigin and use that (if set)\r\n         *\r\n         * @name Phaser.Loader.File#crossOrigin\r\n         * @type {(string|undefined)}\r\n         * @since 3.0.0\r\n         */\r\n        this.crossOrigin = undefined;\r\n\r\n        /**\r\n         * The processed file data, stored here after the file has loaded.\r\n         *\r\n         * @name Phaser.Loader.File#data\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.data = undefined;\r\n\r\n        /**\r\n         * A config object that can be used by file types to store transitional data.\r\n         *\r\n         * @name Phaser.Loader.File#config\r\n         * @type {*}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = GetFastValue(fileConfig, 'config', {});\r\n\r\n        /**\r\n         * If this is a multipart file, i.e. an atlas and its json together, then this is a reference\r\n         * to the parent MultiFile. Set and used internally by the Loader or specific file types.\r\n         *\r\n         * @name Phaser.Loader.File#multiFile\r\n         * @type {?Phaser.Loader.MultiFile}\r\n         * @since 3.7.0\r\n         */\r\n        this.multiFile;\r\n\r\n        /**\r\n         * Does this file have an associated linked file? Such as an image and a normal map.\r\n         * Atlases and Bitmap Fonts use the multiFile, because those files need loading together but aren't\r\n         * actually bound by data, where-as a linkFile is.\r\n         *\r\n         * @name Phaser.Loader.File#linkFile\r\n         * @type {?Phaser.Loader.File}\r\n         * @since 3.7.0\r\n         */\r\n        this.linkFile;\r\n    },\r\n\r\n    /**\r\n     * Links this File with another, so they depend upon each other for loading and processing.\r\n     *\r\n     * @method Phaser.Loader.File#setLink\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} fileB - The file to link to this one.\r\n     */\r\n    setLink: function (fileB)\r\n    {\r\n        this.linkFile = fileB;\r\n\r\n        fileB.linkFile = this;\r\n    },\r\n\r\n    /**\r\n     * Resets the XHRLoader instance this file is using.\r\n     *\r\n     * @method Phaser.Loader.File#resetXHR\r\n     * @since 3.0.0\r\n     */\r\n    resetXHR: function ()\r\n    {\r\n        if (this.xhrLoader)\r\n        {\r\n            this.xhrLoader.onload = undefined;\r\n            this.xhrLoader.onerror = undefined;\r\n            this.xhrLoader.onprogress = undefined;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.File#load\r\n     * @since 3.0.0\r\n     */\r\n    load: function ()\r\n    {\r\n        if (this.state === CONST.FILE_POPULATED)\r\n        {\r\n            //  Can happen for example in a JSONFile if they've provided a JSON object instead of a URL\r\n            this.loader.nextFile(this, true);\r\n        }\r\n        else\r\n        {\r\n            this.src = GetURL(this, this.loader.baseURL);\r\n\r\n            if (this.src.indexOf('data:') === 0)\r\n            {\r\n                console.warn('Local data URIs are not supported: ' + this.key);\r\n            }\r\n            else\r\n            {\r\n                //  The creation of this XHRLoader starts the load process going.\r\n                //  It will automatically call the following, based on the load outcome:\r\n                //  \r\n                // xhr.onload = this.onLoad\r\n                // xhr.onerror = this.onError\r\n                // xhr.onprogress = this.onProgress\r\n\r\n                this.xhrLoader = XHRLoader(this, this.loader.xhr);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called when the file finishes loading, is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onLoad\r\n     * @since 3.0.0\r\n     *\r\n     * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this load.\r\n     */\r\n    onLoad: function (xhr, event)\r\n    {\r\n        var localFileOk = ((xhr.responseURL && xhr.responseURL.indexOf('file://') === 0 && event.target.status === 0));\r\n\r\n        var success = !(event.target && event.target.status !== 200) || localFileOk;\r\n\r\n        //  Handle HTTP status codes of 4xx and 5xx as errors, even if xhr.onerror was not called.\r\n        if (xhr.readyState === 4 && xhr.status >= 400 && xhr.status <= 599)\r\n        {\r\n            success = false;\r\n        }\r\n\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, success);\r\n    },\r\n\r\n    /**\r\n     * Called if the file errors while loading, is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onError\r\n     * @since 3.0.0\r\n     *\r\n     * @param {XMLHttpRequest} xhr - The XMLHttpRequest that caused this onload event.\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent that resulted from this error.\r\n     */\r\n    onError: function ()\r\n    {\r\n        this.resetXHR();\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.File#onProgress\r\n     * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n     * @since 3.0.0\r\n     *\r\n     * @param {ProgressEvent} event - The DOM ProgressEvent.\r\n     */\r\n    onProgress: function (event)\r\n    {\r\n        if (event.lengthComputable)\r\n        {\r\n            this.bytesLoaded = event.loaded;\r\n            this.bytesTotal = event.total;\r\n\r\n            this.percentComplete = Math.min((this.bytesLoaded / this.bytesTotal), 1);\r\n\r\n            this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Usually overridden by the FileTypes and is called by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data, for example a JSON file will parse itself during this stage.\r\n     *\r\n     * @method Phaser.Loader.File#onProcess\r\n     * @since 3.0.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Called when the File has completed processing.\r\n     * Checks on the state of its multifile, if set.\r\n     *\r\n     * @method Phaser.Loader.File#onProcessComplete\r\n     * @since 3.7.0\r\n     */\r\n    onProcessComplete: function ()\r\n    {\r\n        this.state = CONST.FILE_COMPLETE;\r\n\r\n        if (this.multiFile)\r\n        {\r\n            this.multiFile.onFileComplete(this);\r\n        }\r\n\r\n        this.loader.fileProcessComplete(this);\r\n    },\r\n\r\n    /**\r\n     * Called when the File has completed processing but it generated an error.\r\n     * Checks on the state of its multifile, if set.\r\n     *\r\n     * @method Phaser.Loader.File#onProcessError\r\n     * @since 3.7.0\r\n     */\r\n    onProcessError: function ()\r\n    {\r\n        this.state = CONST.FILE_ERRORED;\r\n\r\n        if (this.multiFile)\r\n        {\r\n            this.multiFile.onFileFailed(this);\r\n        }\r\n\r\n        this.loader.fileProcessComplete(this);\r\n    },\r\n\r\n    /**\r\n     * Checks if a key matching the one used by this file exists in the target Cache or not.\r\n     * This is called automatically by the LoaderPlugin to decide if the file can be safely\r\n     * loaded or will conflict.\r\n     *\r\n     * @method Phaser.Loader.File#hasCacheConflict\r\n     * @since 3.7.0\r\n     *\r\n     * @return {boolean} `true` if adding this file will cause a conflict, otherwise `false`.\r\n     */\r\n    hasCacheConflict: function ()\r\n    {\r\n        return (this.cache && this.cache.exists(this.key));\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     * This method is often overridden by specific file types.\r\n     *\r\n     * @method Phaser.Loader.File#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.cache)\r\n        {\r\n            this.cache.add(this.key, this.data);\r\n        }\r\n\r\n        this.pendingDestroy();\r\n    },\r\n\r\n    /**\r\n     * Called once the file has been added to its cache and is now ready for deletion from the Loader.\r\n     * It will emit a `filecomplete` event from the LoaderPlugin.\r\n     *\r\n     * @method Phaser.Loader.File#pendingDestroy\r\n     * @fires Phaser.Loader.Events#FILE_COMPLETE\r\n     * @fires Phaser.Loader.Events#FILE_KEY_COMPLETE\r\n     * @since 3.7.0\r\n     */\r\n    pendingDestroy: function (data)\r\n    {\r\n        if (data === undefined) { data = this.data; }\r\n\r\n        var key = this.key;\r\n        var type = this.type;\r\n\r\n        this.loader.emit(Events.FILE_COMPLETE, key, type, data);\r\n        this.loader.emit(Events.FILE_KEY_COMPLETE + type + '-' + key, key, type, data);\r\n\r\n        this.loader.flagForRemoval(this);\r\n    },\r\n\r\n    /**\r\n     * Destroy this File and any references it holds.\r\n     *\r\n     * @method Phaser.Loader.File#destroy\r\n     * @since 3.7.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.loader = null;\r\n        this.cache = null;\r\n        this.xhrSettings = null;\r\n        this.multiFile = null;\r\n        this.linkFile = null;\r\n        this.data = null;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Static method for creating object URL using URL API and setting it as image 'src' attribute.\r\n * If URL API is not supported (usually on old browsers) it falls back to creating Base64 encoded url using FileReader.\r\n *\r\n * @method Phaser.Loader.File.createObjectURL\r\n * @static\r\n * @since 3.7.0\r\n * \r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be set to object URL.\r\n * @param {Blob} blob - A Blob object to create an object URL for.\r\n * @param {string} defaultType - Default mime type used if blob type is not available.\r\n */\r\nFile.createObjectURL = function (image, blob, defaultType)\r\n{\r\n    if (typeof URL === 'function')\r\n    {\r\n        image.src = URL.createObjectURL(blob);\r\n    }\r\n    else\r\n    {\r\n        var reader = new FileReader();\r\n\r\n        reader.onload = function ()\r\n        {\r\n            image.removeAttribute('crossOrigin');\r\n            image.src = 'data:' + (blob.type || defaultType) + ';base64,' + reader.result.split(',')[1];\r\n        };\r\n\r\n        reader.onerror = image.onerror;\r\n\r\n        reader.readAsDataURL(blob);\r\n    }\r\n};\r\n\r\n/**\r\n * Static method for releasing an existing object URL which was previously created\r\n * by calling {@link File#createObjectURL} method.\r\n *\r\n * @method Phaser.Loader.File.revokeObjectURL\r\n * @static\r\n * @since 3.7.0\r\n * \r\n * @param {HTMLImageElement} image - Image object which 'src' attribute should be revoked.\r\n */\r\nFile.revokeObjectURL = function (image)\r\n{\r\n    if (typeof URL === 'function')\r\n    {\r\n        URL.revokeObjectURL(image.src);\r\n    }\r\n};\r\n\r\nmodule.exports = File;\r\n"]},"metadata":{},"sourceType":"script"}