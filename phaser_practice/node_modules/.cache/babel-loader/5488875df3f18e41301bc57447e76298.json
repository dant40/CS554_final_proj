{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * \r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n * \r\n * A Static Tilemap Layer renders immediately and does not use any batching.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\nvar StaticTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera) {\n  var tilesets = src.tileset;\n  var pipeline = src.pipeline;\n  var pipelineVertexBuffer = pipeline.vertexBuffer;\n  renderer.setPipeline(pipeline);\n  pipeline.modelIdentity();\n  pipeline.modelTranslate(src.x - camera.scrollX * src.scrollFactorX, src.y - camera.scrollY * src.scrollFactorY, 0);\n  pipeline.modelScale(src.scaleX, src.scaleY, 1);\n  pipeline.viewLoad2D(camera.matrix.matrix);\n\n  for (var i = 0; i < tilesets.length; i++) {\n    src.upload(camera, i);\n\n    if (src.vertexCount[i] > 0) {\n      if (renderer.currentPipeline && renderer.currentPipeline.vertexCount > 0) {\n        renderer.flush();\n      }\n\n      pipeline.vertexBuffer = src.vertexBuffer[i];\n      renderer.setPipeline(pipeline);\n      renderer.setTexture2D(tilesets[i].glTexture, 0);\n      renderer.gl.drawArrays(pipeline.topology, 0, src.vertexCount[i]);\n    }\n  } //  Restore the pipeline\n\n\n  pipeline.vertexBuffer = pipelineVertexBuffer;\n  pipeline.viewIdentity();\n  pipeline.modelIdentity();\n};\n\nmodule.exports = StaticTilemapLayerWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/staticlayer/StaticTilemapLayerWebGLRenderer.js"],"names":["StaticTilemapLayerWebGLRenderer","renderer","src","interpolationPercentage","camera","tilesets","tileset","pipeline","pipelineVertexBuffer","vertexBuffer","setPipeline","modelIdentity","modelTranslate","x","scrollX","scrollFactorX","y","scrollY","scrollFactorY","modelScale","scaleX","scaleY","viewLoad2D","matrix","i","length","upload","vertexCount","currentPipeline","flush","setTexture2D","glTexture","gl","drawArrays","topology","viewIdentity","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;AAiBA,IAAIA,+BAA+B,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EACtC;AACI,MAAIC,QAAQ,GAAGH,GAAG,CAACI,OAAnB;AAEA,MAAIC,QAAQ,GAAGL,GAAG,CAACK,QAAnB;AACA,MAAIC,oBAAoB,GAAGD,QAAQ,CAACE,YAApC;AAEAR,EAAAA,QAAQ,CAACS,WAAT,CAAqBH,QAArB;AAEAA,EAAAA,QAAQ,CAACI,aAAT;AACAJ,EAAAA,QAAQ,CAACK,cAAT,CAAwBV,GAAG,CAACW,CAAJ,GAAST,MAAM,CAACU,OAAP,GAAiBZ,GAAG,CAACa,aAAtD,EAAsEb,GAAG,CAACc,CAAJ,GAASZ,MAAM,CAACa,OAAP,GAAiBf,GAAG,CAACgB,aAApG,EAAoH,CAApH;AACAX,EAAAA,QAAQ,CAACY,UAAT,CAAoBjB,GAAG,CAACkB,MAAxB,EAAgClB,GAAG,CAACmB,MAApC,EAA4C,CAA5C;AACAd,EAAAA,QAAQ,CAACe,UAAT,CAAoBlB,MAAM,CAACmB,MAAP,CAAcA,MAAlC;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,QAAQ,CAACoB,MAA7B,EAAqCD,CAAC,EAAtC,EACA;AACItB,IAAAA,GAAG,CAACwB,MAAJ,CAAWtB,MAAX,EAAmBoB,CAAnB;;AAEA,QAAItB,GAAG,CAACyB,WAAJ,CAAgBH,CAAhB,IAAqB,CAAzB,EACA;AACI,UAAIvB,QAAQ,CAAC2B,eAAT,IAA4B3B,QAAQ,CAAC2B,eAAT,CAAyBD,WAAzB,GAAuC,CAAvE,EACA;AACI1B,QAAAA,QAAQ,CAAC4B,KAAT;AACH;;AAEDtB,MAAAA,QAAQ,CAACE,YAAT,GAAwBP,GAAG,CAACO,YAAJ,CAAiBe,CAAjB,CAAxB;AAEAvB,MAAAA,QAAQ,CAACS,WAAT,CAAqBH,QAArB;AAEAN,MAAAA,QAAQ,CAAC6B,YAAT,CAAsBzB,QAAQ,CAACmB,CAAD,CAAR,CAAYO,SAAlC,EAA6C,CAA7C;AAEA9B,MAAAA,QAAQ,CAAC+B,EAAT,CAAYC,UAAZ,CAAuB1B,QAAQ,CAAC2B,QAAhC,EAA0C,CAA1C,EAA6ChC,GAAG,CAACyB,WAAJ,CAAgBH,CAAhB,CAA7C;AACH;AACJ,GAhCL,CAkCI;;;AACAjB,EAAAA,QAAQ,CAACE,YAAT,GAAwBD,oBAAxB;AAEAD,EAAAA,QAAQ,CAAC4B,YAAT;AACA5B,EAAAA,QAAQ,CAACI,aAAT;AACH,CAxCD;;AA0CAyB,MAAM,CAACC,OAAP,GAAiBrC,+BAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * \r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n * \r\n * A Static Tilemap Layer renders immediately and does not use any batching.\r\n *\r\n * @method Phaser.Tilemaps.StaticTilemapLayer#renderWebGL\r\n * @since 3.0.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.Tilemaps.StaticTilemapLayer} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n */\r\nvar StaticTilemapLayerWebGLRenderer = function (renderer, src, interpolationPercentage, camera)\r\n{\r\n    var tilesets = src.tileset;\r\n\r\n    var pipeline = src.pipeline;\r\n    var pipelineVertexBuffer = pipeline.vertexBuffer;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    pipeline.modelIdentity();\r\n    pipeline.modelTranslate(src.x - (camera.scrollX * src.scrollFactorX), src.y - (camera.scrollY * src.scrollFactorY), 0);\r\n    pipeline.modelScale(src.scaleX, src.scaleY, 1);\r\n    pipeline.viewLoad2D(camera.matrix.matrix);\r\n\r\n    for (var i = 0; i < tilesets.length; i++)\r\n    {\r\n        src.upload(camera, i);\r\n\r\n        if (src.vertexCount[i] > 0)\r\n        {\r\n            if (renderer.currentPipeline && renderer.currentPipeline.vertexCount > 0)\r\n            {\r\n                renderer.flush();\r\n            }\r\n        \r\n            pipeline.vertexBuffer = src.vertexBuffer[i];\r\n        \r\n            renderer.setPipeline(pipeline);\r\n        \r\n            renderer.setTexture2D(tilesets[i].glTexture, 0);\r\n        \r\n            renderer.gl.drawArrays(pipeline.topology, 0, src.vertexCount[i]);\r\n        }\r\n    }\r\n\r\n    //  Restore the pipeline\r\n    pipeline.vertexBuffer = pipelineVertexBuffer;\r\n\r\n    pipeline.viewIdentity();\r\n    pipeline.modelIdentity();\r\n};\r\n\r\nmodule.exports = StaticTilemapLayerWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}