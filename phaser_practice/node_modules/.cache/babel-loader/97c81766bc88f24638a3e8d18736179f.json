{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../../utils/Class');\n\nvar Earcut = require('../../../geom/polygon/Earcut');\n\nvar EllipseRender = require('./EllipseRender');\n\nvar GeomEllipse = require('../../../geom/ellipse/Ellipse');\n\nvar Shape = require('../Shape');\n/**\r\n * @classdesc\r\n * The Ellipse Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an ellipse shape. You can control the width and height of the ellipse.\r\n * If the width and height match it will render as a circle. If the width is less than the height,\r\n * it will look more like an egg shape.\r\n * \r\n * The Ellipse shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @class Ellipse\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [height=128] - The height of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [fillColor] - The color the ellipse will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the ellipse will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\n\n\nvar Ellipse = new Class({\n  Extends: Shape,\n  Mixins: [EllipseRender],\n  initialize: function Ellipse(scene, x, y, width, height, fillColor, fillAlpha) {\n    if (x === undefined) {\n      x = 0;\n    }\n\n    if (y === undefined) {\n      y = 0;\n    }\n\n    if (width === undefined) {\n      width = 128;\n    }\n\n    if (height === undefined) {\n      height = 128;\n    }\n\n    Shape.call(this, scene, 'Ellipse', new GeomEllipse(width / 2, height / 2, width, height));\n    /**\r\n     * Private internal value.\r\n     * The number of points used to draw the curve. Higher values create smoother renders at the cost of more triangles being drawn.\r\n     *\r\n     * @name Phaser.GameObjects.Ellipse#_smoothness\r\n     * @type {integer}\r\n     * @private\r\n     * @since 3.13.0\r\n     */\n\n    this._smoothness = 64;\n    this.setPosition(x, y);\n    this.width = width;\n    this.height = height;\n\n    if (fillColor !== undefined) {\n      this.setFillStyle(fillColor, fillAlpha);\n    }\n\n    this.updateDisplayOrigin();\n    this.updateData();\n  },\n\n  /**\r\n   * The smoothness of the ellipse. The number of points used when rendering it.\r\n   * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.\r\n   *\r\n   * @name Phaser.GameObjects.Ellipse#smoothness\r\n   * @type {integer}\r\n   * @default 64\r\n   * @since 3.13.0\r\n   */\n  smoothness: {\n    get: function () {\n      return this._smoothness;\n    },\n    set: function (value) {\n      this._smoothness = value;\n      this.updateData();\n    }\n  },\n\n  /**\r\n   * Sets the size of the ellipse by changing the underlying geometry data, rather than scaling the object.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Ellipse#setSize\r\n   * @since 3.13.0\r\n   * \r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setSize: function (width, height) {\n    this.geom.setSize(width, height);\n    return this.updateData();\n  },\n\n  /**\r\n   * Sets the smoothness of the ellipse. The number of points used when rendering it.\r\n   * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.\r\n   * This call can be chained.\r\n   *\r\n   * @method Phaser.GameObjects.Ellipse#setSmoothness\r\n   * @since 3.13.0\r\n   * \r\n   * @param {integer} value - The value to set the smoothness to.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setSmoothness: function (value) {\n    this._smoothness = value;\n    return this.updateData();\n  },\n\n  /**\r\n   * Internal method that updates the data and path values.\r\n   *\r\n   * @method Phaser.GameObjects.Ellipse#updateData\r\n   * @private\r\n   * @since 3.13.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  updateData: function () {\n    var path = [];\n    var points = this.geom.getPoints(this._smoothness);\n\n    for (var i = 0; i < points.length; i++) {\n      path.push(points[i].x, points[i].y);\n    }\n\n    path.push(points[0].x, points[0].y);\n    this.pathIndexes = Earcut(path);\n    this.pathData = path;\n    return this;\n  }\n});\nmodule.exports = Ellipse;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/ellipse/Ellipse.js"],"names":["Class","require","Earcut","EllipseRender","GeomEllipse","Shape","Ellipse","Extends","Mixins","initialize","scene","x","y","width","height","fillColor","fillAlpha","undefined","call","_smoothness","setPosition","setFillStyle","updateDisplayOrigin","updateData","smoothness","get","set","value","setSize","geom","setSmoothness","path","points","getPoints","i","length","push","pathIndexes","pathData","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../../utils/Class');\r\nvar Earcut = require('../../../geom/polygon/Earcut');\r\nvar EllipseRender = require('./EllipseRender');\r\nvar GeomEllipse = require('../../../geom/ellipse/Ellipse');\r\nvar Shape = require('../Shape');\r\n\r\n/**\r\n * @classdesc\r\n * The Ellipse Shape is a Game Object that can be added to a Scene, Group or Container. You can\r\n * treat it like any other Game Object in your game, such as tweening it, scaling it, or enabling\r\n * it for input or physics. It provides a quick and easy way for you to render this shape in your\r\n * game without using a texture, while still taking advantage of being fully batched in WebGL.\r\n * \r\n * This shape supports both fill and stroke colors.\r\n * \r\n * When it renders it displays an ellipse shape. You can control the width and height of the ellipse.\r\n * If the width and height match it will render as a circle. If the width is less than the height,\r\n * it will look more like an egg shape.\r\n * \r\n * The Ellipse shape also has a `smoothness` property and corresponding `setSmoothness` method.\r\n * This allows you to control how smooth the shape renders in WebGL, by controlling the number of iterations\r\n * that take place during construction. Increase and decrease the default value for smoother, or more\r\n * jagged, shapes.\r\n *\r\n * @class Ellipse\r\n * @extends Phaser.GameObjects.Shape\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.13.0\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Game Object belongs. A Game Object can only belong to one Scene at a time.\r\n * @param {number} [x=0] - The horizontal position of this Game Object in the world.\r\n * @param {number} [y=0] - The vertical position of this Game Object in the world.\r\n * @param {number} [width=128] - The width of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [height=128] - The height of the ellipse. An ellipse with equal width and height renders as a circle.\r\n * @param {number} [fillColor] - The color the ellipse will be filled with, i.e. 0xff0000 for red.\r\n * @param {number} [fillAlpha] - The alpha the ellipse will be filled with. You can also set the alpha of the overall Shape using its `alpha` property.\r\n */\r\nvar Ellipse = new Class({\r\n\r\n    Extends: Shape,\r\n\r\n    Mixins: [\r\n        EllipseRender\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Ellipse (scene, x, y, width, height, fillColor, fillAlpha)\r\n    {\r\n        if (x === undefined) { x = 0; }\r\n        if (y === undefined) { y = 0; }\r\n        if (width === undefined) { width = 128; }\r\n        if (height === undefined) { height = 128; }\r\n\r\n        Shape.call(this, scene, 'Ellipse', new GeomEllipse(width / 2, height / 2, width, height));\r\n\r\n        /**\r\n         * Private internal value.\r\n         * The number of points used to draw the curve. Higher values create smoother renders at the cost of more triangles being drawn.\r\n         *\r\n         * @name Phaser.GameObjects.Ellipse#_smoothness\r\n         * @type {integer}\r\n         * @private\r\n         * @since 3.13.0\r\n         */\r\n        this._smoothness = 64;\r\n\r\n        this.setPosition(x, y);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        if (fillColor !== undefined)\r\n        {\r\n            this.setFillStyle(fillColor, fillAlpha);\r\n        }\r\n\r\n        this.updateDisplayOrigin();\r\n        this.updateData();\r\n    },\r\n\r\n    /**\r\n     * The smoothness of the ellipse. The number of points used when rendering it.\r\n     * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.\r\n     *\r\n     * @name Phaser.GameObjects.Ellipse#smoothness\r\n     * @type {integer}\r\n     * @default 64\r\n     * @since 3.13.0\r\n     */\r\n    smoothness: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._smoothness;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._smoothness = value;\r\n\r\n            this.updateData();\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the size of the ellipse by changing the underlying geometry data, rather than scaling the object.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Ellipse#setSize\r\n     * @since 3.13.0\r\n     * \r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setSize: function (width, height)\r\n    {\r\n        this.geom.setSize(width, height);\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Sets the smoothness of the ellipse. The number of points used when rendering it.\r\n     * Increase this value for a smoother ellipse, at the cost of more polygons being rendered.\r\n     * This call can be chained.\r\n     *\r\n     * @method Phaser.GameObjects.Ellipse#setSmoothness\r\n     * @since 3.13.0\r\n     * \r\n     * @param {integer} value - The value to set the smoothness to.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setSmoothness: function (value)\r\n    {\r\n        this._smoothness = value;\r\n\r\n        return this.updateData();\r\n    },\r\n\r\n    /**\r\n     * Internal method that updates the data and path values.\r\n     *\r\n     * @method Phaser.GameObjects.Ellipse#updateData\r\n     * @private\r\n     * @since 3.13.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    updateData: function ()\r\n    {\r\n        var path = [];\r\n        var points = this.geom.getPoints(this._smoothness);\r\n\r\n        for (var i = 0; i < points.length; i++)\r\n        {\r\n            path.push(points[i].x, points[i].y);\r\n        }\r\n\r\n        path.push(points[0].x, points[0].y);\r\n\r\n        this.pathIndexes = Earcut(path);\r\n        this.pathData = path;\r\n\r\n        return this;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Ellipse;\r\n"]},"metadata":{},"sourceType":"script"}