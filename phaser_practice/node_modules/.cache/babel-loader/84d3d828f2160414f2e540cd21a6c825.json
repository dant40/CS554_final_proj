{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Tile = require('../Tile');\n\nvar IsInLayerBounds = require('./IsInLayerBounds');\n\nvar CalculateFacesAt = require('./CalculateFacesAt');\n/**\r\n * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n * collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.RemoveTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile} The Tile object that was removed.\r\n */\n\n\nvar RemoveTileAt = function (tileX, tileY, replaceWithNull, recalculateFaces, layer) {\n  if (replaceWithNull === undefined) {\n    replaceWithNull = false;\n  }\n\n  if (recalculateFaces === undefined) {\n    recalculateFaces = true;\n  }\n\n  if (!IsInLayerBounds(tileX, tileY, layer)) {\n    return null;\n  }\n\n  var tile = layer.data[tileY][tileX];\n\n  if (!tile) {\n    return null;\n  } else {\n    layer.data[tileY][tileX] = replaceWithNull ? null : new Tile(layer, -1, tileX, tileY, tile.width, tile.height);\n  } //  Recalculate faces only if the removed tile was a colliding tile\n\n\n  if (recalculateFaces && tile && tile.collides) {\n    CalculateFacesAt(tileX, tileY, layer);\n  }\n\n  return tile;\n};\n\nmodule.exports = RemoveTileAt;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/RemoveTileAt.js"],"names":["Tile","require","IsInLayerBounds","CalculateFacesAt","RemoveTileAt","tileX","tileY","replaceWithNull","recalculateFaces","layer","undefined","tile","data","width","height","collides","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIG,YAAY,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,eAAxB,EAAyCC,gBAAzC,EAA2DC,KAA3D,EACnB;AACI,MAAIF,eAAe,KAAKG,SAAxB,EAAmC;AAAEH,IAAAA,eAAe,GAAG,KAAlB;AAA0B;;AAC/D,MAAIC,gBAAgB,KAAKE,SAAzB,EAAoC;AAAEF,IAAAA,gBAAgB,GAAG,IAAnB;AAA0B;;AAEhE,MAAI,CAACN,eAAe,CAACG,KAAD,EAAQC,KAAR,EAAeG,KAAf,CAApB,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIE,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAWN,KAAX,EAAkBD,KAAlB,CAAX;;AAEA,MAAI,CAACM,IAAL,EACA;AACI,WAAO,IAAP;AACH,GAHD,MAKA;AACIF,IAAAA,KAAK,CAACG,IAAN,CAAWN,KAAX,EAAkBD,KAAlB,IAA4BE,eAAD,GAAoB,IAApB,GAA2B,IAAIP,IAAJ,CAASS,KAAT,EAAgB,CAAC,CAAjB,EAAoBJ,KAApB,EAA2BC,KAA3B,EAAkCK,IAAI,CAACE,KAAvC,EAA8CF,IAAI,CAACG,MAAnD,CAAtD;AACH,GAlBL,CAoBI;;;AACA,MAAIN,gBAAgB,IAAIG,IAApB,IAA4BA,IAAI,CAACI,QAArC,EACA;AACIZ,IAAAA,gBAAgB,CAACE,KAAD,EAAQC,KAAR,EAAeG,KAAf,CAAhB;AACH;;AAED,SAAOE,IAAP;AACH,CA5BD;;AA8BAK,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Tile = require('../Tile');\r\nvar IsInLayerBounds = require('./IsInLayerBounds');\r\nvar CalculateFacesAt = require('./CalculateFacesAt');\r\n\r\n/**\r\n * Removes the tile at the given tile coordinates in the specified layer and updates the layer's\r\n * collision information.\r\n *\r\n * @function Phaser.Tilemaps.Components.RemoveTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - The x coordinate.\r\n * @param {integer} tileY - The y coordinate.\r\n * @param {boolean} [replaceWithNull=true] - If true, this will replace the tile at the specified location with null instead of a Tile with an index of -1.\r\n * @param {boolean} [recalculateFaces=true] - `true` if the faces data should be recalculated.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile} The Tile object that was removed.\r\n */\r\nvar RemoveTileAt = function (tileX, tileY, replaceWithNull, recalculateFaces, layer)\r\n{\r\n    if (replaceWithNull === undefined) { replaceWithNull = false; }\r\n    if (recalculateFaces === undefined) { recalculateFaces = true; }\r\n\r\n    if (!IsInLayerBounds(tileX, tileY, layer))\r\n    {\r\n        return null;\r\n    }\r\n\r\n    var tile = layer.data[tileY][tileX];\r\n\r\n    if (!tile)\r\n    {\r\n        return null;\r\n    }\r\n    else\r\n    {\r\n        layer.data[tileY][tileX] = (replaceWithNull) ? null : new Tile(layer, -1, tileX, tileY, tile.width, tile.height);\r\n    }\r\n\r\n    //  Recalculate faces only if the removed tile was a colliding tile\r\n    if (recalculateFaces && tile && tile.collides)\r\n    {\r\n        CalculateFacesAt(tileX, tileY, layer);\r\n    }\r\n\r\n    return tile;\r\n};\r\n\r\nmodule.exports = RemoveTileAt;\r\n"]},"metadata":{},"sourceType":"script"}