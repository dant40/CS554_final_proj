{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Utils = require('../../../renderer/webgl/Utils');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar GridWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  var camMatrix = pipeline._tempMatrix1;\n  var shapeMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  renderer.setPipeline(pipeline);\n  shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    shapeMatrix.e = src.x;\n    shapeMatrix.f = src.y;\n  } else {\n    shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\n    shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\n  }\n\n  camMatrix.multiply(shapeMatrix, calcMatrix);\n  calcMatrix.translate(-src._displayOriginX, -src._displayOriginY);\n  var alpha = camera.alpha * src.alpha; //  Work out the grid size\n\n  var width = src.width;\n  var height = src.height;\n  var cellWidth = src.cellWidth;\n  var cellHeight = src.cellHeight;\n  var gridWidth = Math.ceil(width / cellWidth);\n  var gridHeight = Math.ceil(height / cellHeight);\n  var cellWidthA = cellWidth;\n  var cellHeightA = cellHeight;\n  var cellWidthB = cellWidth - (gridWidth * cellWidth - width);\n  var cellHeightB = cellHeight - (gridHeight * cellHeight - height);\n  var fillTint;\n  var fillTintColor;\n  var showCells = src.showCells;\n  var showAltCells = src.showAltCells;\n  var showOutline = src.showOutline;\n  var x = 0;\n  var y = 0;\n  var r = 0;\n  var cw = 0;\n  var ch = 0;\n\n  if (showOutline) {\n    //  To make room for the grid lines (in case alpha < 1)\n    cellWidthA--;\n    cellHeightA--;\n\n    if (cellWidthB === cellWidth) {\n      cellWidthB--;\n    }\n\n    if (cellHeightB === cellHeight) {\n      cellHeightB--;\n    }\n  }\n\n  if (showCells && src.fillAlpha > 0) {\n    fillTint = pipeline.fillTint;\n    fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\n    fillTint.TL = fillTintColor;\n    fillTint.TR = fillTintColor;\n    fillTint.BL = fillTintColor;\n    fillTint.BR = fillTintColor;\n\n    for (y = 0; y < gridHeight; y++) {\n      if (showAltCells) {\n        r = y % 2;\n      }\n\n      for (x = 0; x < gridWidth; x++) {\n        if (showAltCells && r) {\n          r = 0;\n          continue;\n        }\n\n        r++;\n        cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n        ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n        pipeline.setTexture2D();\n        pipeline.batchFillRect(x * cellWidth, y * cellHeight, cw, ch);\n      }\n    }\n  }\n\n  if (showAltCells && src.altFillAlpha > 0) {\n    fillTint = pipeline.fillTint;\n    fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.altFillColor, src.altFillAlpha * alpha);\n    fillTint.TL = fillTintColor;\n    fillTint.TR = fillTintColor;\n    fillTint.BL = fillTintColor;\n    fillTint.BR = fillTintColor;\n\n    for (y = 0; y < gridHeight; y++) {\n      if (showAltCells) {\n        r = y % 2;\n      }\n\n      for (x = 0; x < gridWidth; x++) {\n        if (showAltCells && !r) {\n          r = 1;\n          continue;\n        }\n\n        r = 0;\n        cw = x < gridWidth - 1 ? cellWidthA : cellWidthB;\n        ch = y < gridHeight - 1 ? cellHeightA : cellHeightB;\n        pipeline.setTexture2D();\n        pipeline.batchFillRect(x * cellWidth, y * cellHeight, cw, ch);\n      }\n    }\n  }\n\n  if (showOutline && src.outlineFillAlpha > 0) {\n    var strokeTint = pipeline.strokeTint;\n    var color = Utils.getTintAppendFloatAlphaAndSwap(src.outlineFillColor, src.outlineFillAlpha * alpha);\n    strokeTint.TL = color;\n    strokeTint.TR = color;\n    strokeTint.BL = color;\n    strokeTint.BR = color;\n\n    for (x = 1; x < gridWidth; x++) {\n      var x1 = x * cellWidth;\n      pipeline.setTexture2D();\n      pipeline.batchLine(x1, 0, x1, height, 1, 1, 1, 0, false);\n    }\n\n    for (y = 1; y < gridHeight; y++) {\n      var y1 = y * cellHeight;\n      pipeline.setTexture2D();\n      pipeline.batchLine(0, y1, width, y1, 1, 1, 1, 0, false);\n    }\n  }\n};\n\nmodule.exports = GridWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/grid/GridWebGLRenderer.js"],"names":["Utils","require","GridWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","translate","_displayOriginX","_displayOriginY","alpha","width","height","cellWidth","cellHeight","gridWidth","Math","ceil","gridHeight","cellWidthA","cellHeightA","cellWidthB","cellHeightB","fillTint","fillTintColor","showCells","showAltCells","showOutline","r","cw","ch","fillAlpha","getTintAppendFloatAlphaAndSwap","fillColor","TL","TR","BL","BR","setTexture2D","batchFillRect","altFillAlpha","altFillColor","outlineFillAlpha","strokeTint","color","outlineFillColor","x1","batchLine","y1","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Utils = require('../../../renderer/webgl/Utils');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Grid#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Grid} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar GridWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    camMatrix.multiply(shapeMatrix, calcMatrix);\r\n\r\n    calcMatrix.translate(-src._displayOriginX, -src._displayOriginY);\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    //  Work out the grid size\r\n\r\n    var width = src.width;\r\n    var height = src.height;\r\n\r\n    var cellWidth = src.cellWidth;\r\n    var cellHeight = src.cellHeight;\r\n\r\n    var gridWidth = Math.ceil(width / cellWidth);\r\n    var gridHeight = Math.ceil(height / cellHeight);\r\n\r\n    var cellWidthA = cellWidth;\r\n    var cellHeightA = cellHeight;\r\n\r\n    var cellWidthB = cellWidth - ((gridWidth * cellWidth) - width);\r\n    var cellHeightB = cellHeight - ((gridHeight * cellHeight) - height);\r\n\r\n    var fillTint;\r\n    var fillTintColor;\r\n\r\n    var showCells = src.showCells;\r\n    var showAltCells = src.showAltCells;\r\n    var showOutline = src.showOutline;\r\n\r\n    var x = 0;\r\n    var y = 0;\r\n    var r = 0;\r\n    var cw = 0;\r\n    var ch = 0;\r\n\r\n    if (showOutline)\r\n    {\r\n        //  To make room for the grid lines (in case alpha < 1)\r\n        cellWidthA--;\r\n        cellHeightA--;\r\n\r\n        if (cellWidthB === cellWidth)\r\n        {\r\n            cellWidthB--;\r\n        }\r\n\r\n        if (cellHeightB === cellHeight)\r\n        {\r\n            cellHeightB--;\r\n        }\r\n    }\r\n\r\n    if (showCells && src.fillAlpha > 0)\r\n    {\r\n        fillTint = pipeline.fillTint;\r\n        fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.fillColor, src.fillAlpha * alpha);\r\n    \r\n        fillTint.TL = fillTintColor;\r\n        fillTint.TR = fillTintColor;\r\n        fillTint.BL = fillTintColor;\r\n        fillTint.BR = fillTintColor;\r\n\r\n        for (y = 0; y < gridHeight; y++)\r\n        {\r\n            if (showAltCells)\r\n            {\r\n                r = y % 2;\r\n            }\r\n\r\n            for (x = 0; x < gridWidth; x++)\r\n            {\r\n                if (showAltCells && r)\r\n                {\r\n                    r = 0;\r\n                    continue;\r\n                }\r\n\r\n                r++;\r\n\r\n                cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                pipeline.setTexture2D();\r\n\r\n                pipeline.batchFillRect(\r\n                    x * cellWidth,\r\n                    y * cellHeight,\r\n                    cw,\r\n                    ch\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showAltCells && src.altFillAlpha > 0)\r\n    {\r\n        fillTint = pipeline.fillTint;\r\n        fillTintColor = Utils.getTintAppendFloatAlphaAndSwap(src.altFillColor, src.altFillAlpha * alpha);\r\n    \r\n        fillTint.TL = fillTintColor;\r\n        fillTint.TR = fillTintColor;\r\n        fillTint.BL = fillTintColor;\r\n        fillTint.BR = fillTintColor;\r\n\r\n        for (y = 0; y < gridHeight; y++)\r\n        {\r\n            if (showAltCells)\r\n            {\r\n                r = y % 2;\r\n            }\r\n\r\n            for (x = 0; x < gridWidth; x++)\r\n            {\r\n                if (showAltCells && !r)\r\n                {\r\n                    r = 1;\r\n                    continue;\r\n                }\r\n\r\n                r = 0;\r\n\r\n                cw = (x < gridWidth - 1) ? cellWidthA : cellWidthB;\r\n                ch = (y < gridHeight - 1) ? cellHeightA : cellHeightB;\r\n\r\n                pipeline.setTexture2D();\r\n\r\n                pipeline.batchFillRect(\r\n                    x * cellWidth,\r\n                    y * cellHeight,\r\n                    cw,\r\n                    ch\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    if (showOutline && src.outlineFillAlpha > 0)\r\n    {\r\n        var strokeTint = pipeline.strokeTint;\r\n        var color = Utils.getTintAppendFloatAlphaAndSwap(src.outlineFillColor, src.outlineFillAlpha * alpha);\r\n\r\n        strokeTint.TL = color;\r\n        strokeTint.TR = color;\r\n        strokeTint.BL = color;\r\n        strokeTint.BR = color;\r\n\r\n        for (x = 1; x < gridWidth; x++)\r\n        {\r\n            var x1 = x * cellWidth;\r\n\r\n            pipeline.setTexture2D();\r\n\r\n            pipeline.batchLine(x1, 0, x1, height, 1, 1, 1, 0, false);\r\n        }\r\n\r\n        for (y = 1; y < gridHeight; y++)\r\n        {\r\n            var y1 = y * cellHeight;\r\n\r\n            pipeline.setTexture2D();\r\n\r\n            pipeline.batchLine(0, y1, width, y1, 1, 1, 1, 0, false);\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = GridWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}