{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ProcessTileSeparationX = require('./ProcessTileSeparationX');\n/**\r\n * Check the body against the given tile on the X axis.\r\n * Used internally by the SeparateTile function.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.TileCheckX\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body - The Body object to separate.\r\n * @param {Phaser.Tilemaps.Tile} tile - The tile to check.\r\n * @param {number} tileLeft - The left position of the tile within the tile world.\r\n * @param {number} tileRight - The right position of the tile within the tile world.\r\n * @param {number} tileBias - The tile bias value. Populated by the `World.TILE_BIAS` constant.\r\n * @param {boolean} isLayer - Is this check coming from a TilemapLayer or an array of tiles?\r\n *\r\n * @return {number} The amount of separation that occurred.\r\n */\n\n\nvar TileCheckX = function (body, tile, tileLeft, tileRight, tileBias, isLayer) {\n  var ox = 0;\n  var faceLeft = tile.faceLeft;\n  var faceRight = tile.faceRight;\n  var collideLeft = tile.collideLeft;\n  var collideRight = tile.collideRight;\n\n  if (!isLayer) {\n    faceLeft = true;\n    faceRight = true;\n    collideLeft = true;\n    collideRight = true;\n  }\n\n  if (body.deltaX() < 0 && collideRight && body.checkCollision.left) {\n    //  Body is moving LEFT\n    if (faceRight && body.x < tileRight) {\n      ox = body.x - tileRight;\n\n      if (ox < -tileBias) {\n        ox = 0;\n      }\n    }\n  } else if (body.deltaX() > 0 && collideLeft && body.checkCollision.right) {\n    //  Body is moving RIGHT\n    if (faceLeft && body.right > tileLeft) {\n      ox = body.right - tileLeft;\n\n      if (ox > tileBias) {\n        ox = 0;\n      }\n    }\n  }\n\n  if (ox !== 0) {\n    if (body.customSeparateX) {\n      body.overlapX = ox;\n    } else {\n      ProcessTileSeparationX(body, ox);\n    }\n  }\n\n  return ox;\n};\n\nmodule.exports = TileCheckX;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/tilemap/TileCheckX.js"],"names":["ProcessTileSeparationX","require","TileCheckX","body","tile","tileLeft","tileRight","tileBias","isLayer","ox","faceLeft","faceRight","collideLeft","collideRight","deltaX","checkCollision","left","x","right","customSeparateX","overlapX","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAApC;AAEA;;;;;;;;;;;;;;;;;;AAgBA,IAAIC,UAAU,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,QAA3C,EAAqDC,OAArD,EACjB;AACI,MAAIC,EAAE,GAAG,CAAT;AAEA,MAAIC,QAAQ,GAAGN,IAAI,CAACM,QAApB;AACA,MAAIC,SAAS,GAAGP,IAAI,CAACO,SAArB;AACA,MAAIC,WAAW,GAAGR,IAAI,CAACQ,WAAvB;AACA,MAAIC,YAAY,GAAGT,IAAI,CAACS,YAAxB;;AAEA,MAAI,CAACL,OAAL,EACA;AACIE,IAAAA,QAAQ,GAAG,IAAX;AACAC,IAAAA,SAAS,GAAG,IAAZ;AACAC,IAAAA,WAAW,GAAG,IAAd;AACAC,IAAAA,YAAY,GAAG,IAAf;AACH;;AAED,MAAIV,IAAI,CAACW,MAAL,KAAgB,CAAhB,IAAqBD,YAArB,IAAqCV,IAAI,CAACY,cAAL,CAAoBC,IAA7D,EACA;AACI;AACA,QAAIL,SAAS,IAAIR,IAAI,CAACc,CAAL,GAASX,SAA1B,EACA;AACIG,MAAAA,EAAE,GAAGN,IAAI,CAACc,CAAL,GAASX,SAAd;;AAEA,UAAIG,EAAE,GAAG,CAACF,QAAV,EACA;AACIE,QAAAA,EAAE,GAAG,CAAL;AACH;AACJ;AACJ,GAZD,MAaK,IAAIN,IAAI,CAACW,MAAL,KAAgB,CAAhB,IAAqBF,WAArB,IAAoCT,IAAI,CAACY,cAAL,CAAoBG,KAA5D,EACL;AACI;AACA,QAAIR,QAAQ,IAAIP,IAAI,CAACe,KAAL,GAAab,QAA7B,EACA;AACII,MAAAA,EAAE,GAAGN,IAAI,CAACe,KAAL,GAAab,QAAlB;;AAEA,UAAII,EAAE,GAAGF,QAAT,EACA;AACIE,QAAAA,EAAE,GAAG,CAAL;AACH;AACJ;AACJ;;AAED,MAAIA,EAAE,KAAK,CAAX,EACA;AACI,QAAIN,IAAI,CAACgB,eAAT,EACA;AACIhB,MAAAA,IAAI,CAACiB,QAAL,GAAgBX,EAAhB;AACH,KAHD,MAKA;AACIT,MAAAA,sBAAsB,CAACG,IAAD,EAAOM,EAAP,CAAtB;AACH;AACJ;;AAED,SAAOA,EAAP;AACH,CAzDD;;AA2DAY,MAAM,CAACC,OAAP,GAAiBpB,UAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ProcessTileSeparationX = require('./ProcessTileSeparationX');\r\n\r\n/**\r\n * Check the body against the given tile on the X axis.\r\n * Used internally by the SeparateTile function.\r\n *\r\n * @function Phaser.Physics.Arcade.Tilemap.TileCheckX\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body - The Body object to separate.\r\n * @param {Phaser.Tilemaps.Tile} tile - The tile to check.\r\n * @param {number} tileLeft - The left position of the tile within the tile world.\r\n * @param {number} tileRight - The right position of the tile within the tile world.\r\n * @param {number} tileBias - The tile bias value. Populated by the `World.TILE_BIAS` constant.\r\n * @param {boolean} isLayer - Is this check coming from a TilemapLayer or an array of tiles?\r\n *\r\n * @return {number} The amount of separation that occurred.\r\n */\r\nvar TileCheckX = function (body, tile, tileLeft, tileRight, tileBias, isLayer)\r\n{\r\n    var ox = 0;\r\n\r\n    var faceLeft = tile.faceLeft;\r\n    var faceRight = tile.faceRight;\r\n    var collideLeft = tile.collideLeft;\r\n    var collideRight = tile.collideRight;\r\n\r\n    if (!isLayer)\r\n    {\r\n        faceLeft = true;\r\n        faceRight = true;\r\n        collideLeft = true;\r\n        collideRight = true;\r\n    }\r\n\r\n    if (body.deltaX() < 0 && collideRight && body.checkCollision.left)\r\n    {\r\n        //  Body is moving LEFT\r\n        if (faceRight && body.x < tileRight)\r\n        {\r\n            ox = body.x - tileRight;\r\n\r\n            if (ox < -tileBias)\r\n            {\r\n                ox = 0;\r\n            }\r\n        }\r\n    }\r\n    else if (body.deltaX() > 0 && collideLeft && body.checkCollision.right)\r\n    {\r\n        //  Body is moving RIGHT\r\n        if (faceLeft && body.right > tileLeft)\r\n        {\r\n            ox = body.right - tileLeft;\r\n\r\n            if (ox > tileBias)\r\n            {\r\n                ox = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (ox !== 0)\r\n    {\r\n        if (body.customSeparateX)\r\n        {\r\n            body.overlapX = ox;\r\n        }\r\n        else\r\n        {\r\n            ProcessTileSeparationX(body, ox);\r\n        }\r\n    }\r\n\r\n    return ox;\r\n};\r\n\r\nmodule.exports = TileCheckX;\r\n"]},"metadata":{},"sourceType":"script"}