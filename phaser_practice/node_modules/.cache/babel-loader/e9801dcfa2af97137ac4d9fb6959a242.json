{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Components = require('../components');\n\nvar GameObject = require('../GameObject');\n\nvar GravityWell = require('./GravityWell');\n\nvar List = require('../../structs/List');\n\nvar ParticleEmitter = require('./ParticleEmitter');\n\nvar Render = require('./ParticleManagerRender');\n/**\r\n * @classdesc\r\n * A Particle Emitter Manager creates and controls {@link Phaser.GameObjects.Particles.ParticleEmitter Particle Emitters} and {@link Phaser.GameObjects.Particles.GravityWell Gravity Wells}.\r\n *\r\n * @class ParticleEmitterManager\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Emitter Manager belongs.\r\n * @param {string} texture - The key of the Texture this Emitter Manager will use to render particles, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Emitter Manager will use to render particles.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n */\n\n\nvar ParticleEmitterManager = new Class({\n  Extends: GameObject,\n  Mixins: [Components.Depth, Components.Mask, Components.Pipeline, Components.Transform, Components.Visible, Render],\n  initialize: //  frame is optional and can contain the emitters array or object if skipped\n  function ParticleEmitterManager(scene, texture, frame, emitters) {\n    GameObject.call(this, scene, 'ParticleEmitterManager');\n    /**\r\n     * The blend mode applied to all emitters and particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#blendMode\r\n     * @type {integer}\r\n     * @default -1\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.blendMode = -1;\n    /**\r\n     * The time scale applied to all emitters and particles, affecting flow rate, lifespan, and movement.\r\n     * Values larger than 1 are faster than normal.\r\n     * This is multiplied with any timeScale set on each individual emitter.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#timeScale\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.timeScale = 1;\n    /**\r\n     * The texture used to render this Emitter Manager's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#texture\r\n     * @type {Phaser.Textures.Texture}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.texture = null;\n    /**\r\n     * The texture frame used to render this Emitter Manager's particles.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @default null\r\n     * @since 3.0.0\r\n     */\n\n    this.frame = null;\n    /**\r\n     * Names of this Emitter Manager's texture frames.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frameNames\r\n     * @type {string[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.frameNames = []; //  frame is optional and can contain the emitters array or object if skipped\n\n    if (frame !== null && (typeof frame === 'object' || Array.isArray(frame))) {\n      emitters = frame;\n      frame = null;\n    }\n\n    this.setTexture(texture, frame);\n    this.initPipeline();\n    /**\r\n     * A list of Emitters being managed by this Emitter Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#emitters\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.ParticleEmitter>}\r\n     * @since 3.0.0\r\n     */\n\n    this.emitters = new List(this);\n    /**\r\n     * A list of Gravity Wells being managed by this Emitter Manager.\r\n     *\r\n     * @name Phaser.GameObjects.Particles.ParticleEmitterManager#wells\r\n     * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.GravityWell>}\r\n     * @since 3.0.0\r\n     */\n\n    this.wells = new List(this);\n\n    if (emitters) {\n      //  An array of emitter configs?\n      if (!Array.isArray(emitters)) {\n        emitters = [emitters];\n      }\n\n      for (var i = 0; i < emitters.length; i++) {\n        this.createEmitter(emitters[i]);\n      }\n    }\n  },\n\n  /**\r\n   * Sets the texture and frame this Emitter Manager will use to render with.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setTexture: function (key, frame) {\n    this.texture = this.scene.sys.textures.get(key);\n    return this.setFrame(frame);\n  },\n\n  /**\r\n   * Sets the frame this Emitter Manager will use to render with.\r\n   *\r\n   * The Frame has to belong to the current Texture being used.\r\n   *\r\n   * It can be either a string or an index.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setFrame: function (frame) {\n    this.frame = this.texture.get(frame);\n    var frames = this.texture.getFramesFromTextureSource(this.frame.sourceIndex);\n    var names = [];\n    frames.forEach(function (sourceFrame) {\n      names.push(sourceFrame.name);\n    });\n    this.frameNames = names;\n    this.defaultFrame = this.frame;\n    return this;\n  },\n\n  /**\r\n   * Assigns texture frames to an emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setEmitterFrames\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Textures.Frame|Phaser.Textures.Frame[])} frames - The texture frames.\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The particle emitter to modify.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  setEmitterFrames: function (frames, emitter) {\n    if (!Array.isArray(frames)) {\n      frames = [frames];\n    }\n\n    var out = emitter.frames;\n    out.length = 0;\n\n    for (var i = 0; i < frames.length; i++) {\n      var frame = frames[i];\n\n      if (this.frameNames.indexOf(frame) !== -1) {\n        out.push(this.texture.get(frame));\n      }\n    }\n\n    if (out.length > 0) {\n      emitter.defaultFrame = out[0];\n    } else {\n      emitter.defaultFrame = this.defaultFrame;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Adds an existing Particle Emitter to this Emitter Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addEmitter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Particle Emitter to add to this Emitter Manager.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was added to this Emitter Manager.\r\n   */\n  addEmitter: function (emitter) {\n    return this.emitters.add(emitter);\n  },\n\n  /**\r\n   * Creates a new Particle Emitter object, adds it to this Emitter Manager and returns a reference to it.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createEmitter\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Configuration settings for the Particle Emitter to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was created.\r\n   */\n  createEmitter: function (config) {\n    return this.addEmitter(new ParticleEmitter(this, config));\n  },\n\n  /**\r\n   * Removes a Particle Emitter from this Emitter Manager, if the Emitter belongs to this Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#removeEmitter\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter\r\n   *\r\n   * @return {?Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter if it was removed or null if it was not.\r\n   */\n  removeEmitter: function (emitter) {\n    return this.emitters.remove(emitter, true);\n  },\n\n  /**\r\n   * Adds an existing Gravity Well object to this Emitter Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addGravityWell\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Particles.GravityWell} well - The Gravity Well to add to this Emitter Manager.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was added to this Emitter Manager.\r\n   */\n  addGravityWell: function (well) {\n    return this.wells.add(well);\n  },\n\n  /**\r\n   * Creates a new Gravity Well, adds it to this Emitter Manager and returns a reference to it.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createGravityWell\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Particles.GravityWellConfig} config - Configuration settings for the Gravity Well to create.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was created.\r\n   */\n  createGravityWell: function (config) {\n    return this.addGravityWell(new GravityWell(config));\n  },\n\n  /**\r\n   * Emits particles from each active emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n   * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  emitParticle: function (count, x, y) {\n    var emitters = this.emitters.list;\n\n    for (var i = 0; i < emitters.length; i++) {\n      var emitter = emitters[i];\n\n      if (emitter.active) {\n        emitter.emitParticle(count, x, y);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Emits particles from each active emitter.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticleAt\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n   * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n   * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  emitParticleAt: function (x, y, count) {\n    return this.emitParticle(count, x, y);\n  },\n\n  /**\r\n   * Pauses this Emitter Manager.\r\n   *\r\n   * This has the effect of pausing all emitters, and all particles of those emitters, currently under its control.\r\n   *\r\n   * The particles will still render, but they will not have any of their logic updated.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#pause\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  pause: function () {\n    this.active = false;\n    return this;\n  },\n\n  /**\r\n   * Resumes this Emitter Manager, should it have been previously paused.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n   */\n  resume: function () {\n    this.active = true;\n    return this;\n  },\n\n  /**\r\n   * Gets all active particle processors (gravity wells).\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#getProcessors\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Particles.GravityWell[]} - The active gravity wells.\r\n   */\n  getProcessors: function () {\n    return this.wells.getAll('active', true);\n  },\n\n  /**\r\n   * Updates all active emitters.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#preUpdate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  preUpdate: function (time, delta) {\n    //  Scale the delta\n    delta *= this.timeScale;\n    var emitters = this.emitters.list;\n\n    for (var i = 0; i < emitters.length; i++) {\n      var emitter = emitters[i];\n\n      if (emitter.active) {\n        emitter.preUpdate(time, delta);\n      }\n    }\n  },\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setAlpha\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  setAlpha: function () {},\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setScrollFactor\r\n   * @private\r\n   * @since 3.10.0\r\n   */\n  setScrollFactor: function () {},\n\n  /**\r\n   * A NOOP method so you can pass an EmitterManager to a Container.\r\n   * Calling this method will do nothing. It is intentionally empty.\r\n   *\r\n   * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setBlendMode\r\n   * @private\r\n   * @since 3.15.0\r\n   */\n  setBlendMode: function () {}\n});\nmodule.exports = ParticleEmitterManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/particles/ParticleEmitterManager.js"],"names":["Class","require","Components","GameObject","GravityWell","List","ParticleEmitter","Render","ParticleEmitterManager","Extends","Mixins","Depth","Mask","Pipeline","Transform","Visible","initialize","scene","texture","frame","emitters","call","blendMode","timeScale","frameNames","Array","isArray","setTexture","initPipeline","wells","i","length","createEmitter","key","sys","textures","get","setFrame","frames","getFramesFromTextureSource","sourceIndex","names","forEach","sourceFrame","push","name","defaultFrame","setEmitterFrames","emitter","out","indexOf","addEmitter","add","config","removeEmitter","remove","addGravityWell","well","createGravityWell","emitParticle","count","x","y","list","active","emitParticleAt","pause","resume","getProcessors","getAll","preUpdate","time","delta","setAlpha","setScrollFactor","setBlendMode","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Components = require('../components');\r\nvar GameObject = require('../GameObject');\r\nvar GravityWell = require('./GravityWell');\r\nvar List = require('../../structs/List');\r\nvar ParticleEmitter = require('./ParticleEmitter');\r\nvar Render = require('./ParticleManagerRender');\r\n\r\n/**\r\n * @classdesc\r\n * A Particle Emitter Manager creates and controls {@link Phaser.GameObjects.Particles.ParticleEmitter Particle Emitters} and {@link Phaser.GameObjects.Particles.GravityWell Gravity Wells}.\r\n *\r\n * @class ParticleEmitterManager\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects.Particles\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Emitter Manager belongs.\r\n * @param {string} texture - The key of the Texture this Emitter Manager will use to render particles, as stored in the Texture Manager.\r\n * @param {(string|integer)} [frame] - An optional frame from the Texture this Emitter Manager will use to render particles.\r\n * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig|Phaser.Types.GameObjects.Particles.ParticleEmitterConfig[]} [emitters] - Configuration settings for one or more emitters to create.\r\n */\r\nvar ParticleEmitterManager = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        Components.Depth,\r\n        Components.Mask,\r\n        Components.Pipeline,\r\n        Components.Transform,\r\n        Components.Visible,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    //  frame is optional and can contain the emitters array or object if skipped\r\n    function ParticleEmitterManager (scene, texture, frame, emitters)\r\n    {\r\n        GameObject.call(this, scene, 'ParticleEmitterManager');\r\n\r\n        /**\r\n         * The blend mode applied to all emitters and particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#blendMode\r\n         * @type {integer}\r\n         * @default -1\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.blendMode = -1;\r\n\r\n        /**\r\n         * The time scale applied to all emitters and particles, affecting flow rate, lifespan, and movement.\r\n         * Values larger than 1 are faster than normal.\r\n         * This is multiplied with any timeScale set on each individual emitter.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#timeScale\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.timeScale = 1;\r\n\r\n        /**\r\n         * The texture used to render this Emitter Manager's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#texture\r\n         * @type {Phaser.Textures.Texture}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.texture = null;\r\n\r\n        /**\r\n         * The texture frame used to render this Emitter Manager's particles.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frame\r\n         * @type {Phaser.Textures.Frame}\r\n         * @default null\r\n         * @since 3.0.0\r\n         */\r\n        this.frame = null;\r\n\r\n        /**\r\n         * Names of this Emitter Manager's texture frames.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#frameNames\r\n         * @type {string[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.frameNames = [];\r\n\r\n        //  frame is optional and can contain the emitters array or object if skipped\r\n        if (frame !== null && (typeof frame === 'object' || Array.isArray(frame)))\r\n        {\r\n            emitters = frame;\r\n            frame = null;\r\n        }\r\n\r\n        this.setTexture(texture, frame);\r\n\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * A list of Emitters being managed by this Emitter Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#emitters\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.ParticleEmitter>}\r\n         * @since 3.0.0\r\n         */\r\n        this.emitters = new List(this);\r\n\r\n        /**\r\n         * A list of Gravity Wells being managed by this Emitter Manager.\r\n         *\r\n         * @name Phaser.GameObjects.Particles.ParticleEmitterManager#wells\r\n         * @type {Phaser.Structs.List.<Phaser.GameObjects.Particles.GravityWell>}\r\n         * @since 3.0.0\r\n         */\r\n        this.wells = new List(this);\r\n\r\n        if (emitters)\r\n        {\r\n            //  An array of emitter configs?\r\n            if (!Array.isArray(emitters))\r\n            {\r\n                emitters = [ emitters ];\r\n            }\r\n\r\n            for (var i = 0; i < emitters.length; i++)\r\n            {\r\n                this.createEmitter(emitters[i]);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the texture and frame this Emitter Manager will use to render with.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setTexture: function (key, frame)\r\n    {\r\n        this.texture = this.scene.sys.textures.get(key);\r\n\r\n        return this.setFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Sets the frame this Emitter Manager will use to render with.\r\n     *\r\n     * The Frame has to belong to the current Texture being used.\r\n     *\r\n     * It can be either a string or an index.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setFrame: function (frame)\r\n    {\r\n        this.frame = this.texture.get(frame);\r\n\r\n        var frames = this.texture.getFramesFromTextureSource(this.frame.sourceIndex);\r\n\r\n        var names = [];\r\n\r\n        frames.forEach(function (sourceFrame)\r\n        {\r\n            names.push(sourceFrame.name);\r\n        });\r\n\r\n        this.frameNames = names;\r\n\r\n        this.defaultFrame = this.frame;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Assigns texture frames to an emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setEmitterFrames\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Textures.Frame|Phaser.Textures.Frame[])} frames - The texture frames.\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The particle emitter to modify.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    setEmitterFrames: function (frames, emitter)\r\n    {\r\n        if (!Array.isArray(frames))\r\n        {\r\n            frames = [ frames ];\r\n        }\r\n\r\n        var out = emitter.frames;\r\n\r\n        out.length = 0;\r\n\r\n        for (var i = 0; i < frames.length; i++)\r\n        {\r\n            var frame = frames[i];\r\n\r\n            if (this.frameNames.indexOf(frame) !== -1)\r\n            {\r\n                out.push(this.texture.get(frame));\r\n            }\r\n        }\r\n\r\n        if (out.length > 0)\r\n        {\r\n            emitter.defaultFrame = out[0];\r\n        }\r\n        else\r\n        {\r\n            emitter.defaultFrame = this.defaultFrame;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Particle Emitter to this Emitter Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addEmitter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter - The Particle Emitter to add to this Emitter Manager.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was added to this Emitter Manager.\r\n     */\r\n    addEmitter: function (emitter)\r\n    {\r\n        return this.emitters.add(emitter);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Particle Emitter object, adds it to this Emitter Manager and returns a reference to it.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createEmitter\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.ParticleEmitterConfig} config - Configuration settings for the Particle Emitter to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter that was created.\r\n     */\r\n    createEmitter: function (config)\r\n    {\r\n        return this.addEmitter(new ParticleEmitter(this, config));\r\n    },\r\n\r\n    /**\r\n     * Removes a Particle Emitter from this Emitter Manager, if the Emitter belongs to this Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#removeEmitter\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.ParticleEmitter} emitter\r\n     *\r\n     * @return {?Phaser.GameObjects.Particles.ParticleEmitter} The Particle Emitter if it was removed or null if it was not.\r\n     */\r\n    removeEmitter: function (emitter)\r\n    {\r\n        return this.emitters.remove(emitter, true);\r\n    },\r\n\r\n    /**\r\n     * Adds an existing Gravity Well object to this Emitter Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#addGravityWell\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Particles.GravityWell} well - The Gravity Well to add to this Emitter Manager.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was added to this Emitter Manager.\r\n     */\r\n    addGravityWell: function (well)\r\n    {\r\n        return this.wells.add(well);\r\n    },\r\n\r\n    /**\r\n     * Creates a new Gravity Well, adds it to this Emitter Manager and returns a reference to it.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#createGravityWell\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Particles.GravityWellConfig} config - Configuration settings for the Gravity Well to create.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell} The Gravity Well that was created.\r\n     */\r\n    createGravityWell: function (config)\r\n    {\r\n        return this.addGravityWell(new GravityWell(config));\r\n    },\r\n\r\n    /**\r\n     * Emits particles from each active emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n     * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    emitParticle: function (count, x, y)\r\n    {\r\n        var emitters = this.emitters.list;\r\n\r\n        for (var i = 0; i < emitters.length; i++)\r\n        {\r\n            var emitter = emitters[i];\r\n\r\n            if (emitter.active)\r\n            {\r\n                emitter.emitParticle(count, x, y);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Emits particles from each active emitter.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#emitParticleAt\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x] - The x-coordinate to to emit particles from. The default is the x-coordinate of the emitter's current location.\r\n     * @param {number} [y] - The y-coordinate to to emit particles from. The default is the y-coordinate of the emitter's current location.\r\n     * @param {integer} [count] - The number of particles to release from each emitter. The default is the emitter's own {@link Phaser.GameObjects.Particles.ParticleEmitter#quantity}.\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    emitParticleAt: function (x, y, count)\r\n    {\r\n        return this.emitParticle(count, x, y);\r\n    },\r\n\r\n    /**\r\n     * Pauses this Emitter Manager.\r\n     *\r\n     * This has the effect of pausing all emitters, and all particles of those emitters, currently under its control.\r\n     *\r\n     * The particles will still render, but they will not have any of their logic updated.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#pause\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    pause: function ()\r\n    {\r\n        this.active = false;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Resumes this Emitter Manager, should it have been previously paused.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.ParticleEmitterManager} This Emitter Manager.\r\n     */\r\n    resume: function ()\r\n    {\r\n        this.active = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Gets all active particle processors (gravity wells).\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#getProcessors\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Particles.GravityWell[]} - The active gravity wells.\r\n     */\r\n    getProcessors: function ()\r\n    {\r\n        return this.wells.getAll('active', true);\r\n    },\r\n\r\n    /**\r\n     * Updates all active emitters.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#preUpdate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    preUpdate: function (time, delta)\r\n    {\r\n        //  Scale the delta\r\n        delta *= this.timeScale;\r\n\r\n        var emitters = this.emitters.list;\r\n\r\n        for (var i = 0; i < emitters.length; i++)\r\n        {\r\n            var emitter = emitters[i];\r\n\r\n            if (emitter.active)\r\n            {\r\n                emitter.preUpdate(time, delta);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setAlpha\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    setAlpha: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setScrollFactor\r\n     * @private\r\n     * @since 3.10.0\r\n     */\r\n    setScrollFactor: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * A NOOP method so you can pass an EmitterManager to a Container.\r\n     * Calling this method will do nothing. It is intentionally empty.\r\n     *\r\n     * @method Phaser.GameObjects.Particles.ParticleEmitterManager#setBlendMode\r\n     * @private\r\n     * @since 3.15.0\r\n     */\r\n    setBlendMode: function ()\r\n    {\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ParticleEmitterManager;\r\n"]},"metadata":{},"sourceType":"script"}