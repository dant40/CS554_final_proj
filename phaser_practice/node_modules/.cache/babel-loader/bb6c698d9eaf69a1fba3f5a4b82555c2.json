{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../../math/Clamp');\n\nvar Class = require('../../../utils/Class');\n\nvar EaseMap = require('../../../math/easing/EaseMap');\n\nvar Events = require('../events');\n/**\r\n * @classdesc\r\n * A Camera Zoom effect.\r\n *\r\n * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Zoom\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\n\n\nvar Zoom = new Class({\n  initialize: function Zoom(camera) {\n    /**\r\n     * The Camera this effect belongs to.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#camera\r\n     * @type {Phaser.Cameras.Scene2D.Camera}\r\n     * @readonly\r\n     * @since 3.11.0\r\n     */\n    this.camera = camera;\n    /**\r\n     * Is this effect actively running?\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#isRunning\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.11.0\r\n     */\n\n    this.isRunning = false;\n    /**\r\n     * The duration of the effect, in milliseconds.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#duration\r\n     * @type {integer}\r\n     * @readonly\r\n     * @default 0\r\n     * @since 3.11.0\r\n     */\n\n    this.duration = 0;\n    /**\r\n     * The starting zoom value;\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#source\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\n\n    this.source = 1;\n    /**\r\n     * The destination zoom value.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#destination\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\n\n    this.destination = 1;\n    /**\r\n     * The ease function to use during the zoom.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#ease\r\n     * @type {function}\r\n     * @since 3.11.0\r\n     */\n\n    this.ease;\n    /**\r\n     * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#progress\r\n     * @type {number}\r\n     * @since 3.11.0\r\n     */\n\n    this.progress = 0;\n    /**\r\n     * Effect elapsed timer.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#_elapsed\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._elapsed = 0;\n    /**\r\n     * This callback is invoked every frame for the duration of the effect.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdate\r\n     * @type {?Phaser.Types.Cameras.Scene2D.CameraZoomCallback}\r\n     * @private\r\n     * @default null\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdate;\n    /**\r\n     * On Complete callback scope.\r\n     *\r\n     * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdateScope\r\n     * @type {any}\r\n     * @private\r\n     * @since 3.11.0\r\n     */\n\n    this._onUpdateScope;\n  },\n\n  /**\r\n   * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Zoom#start\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_START\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} zoom - The target Camera zoom value.\r\n   * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n   * @param {(string|function)} [ease='Linear'] - The ease to use for the Zoom. Can be any of the Phaser Easing constants or a custom function.\r\n   * @param {boolean} [force=false] - Force the zoom effect to start immediately, even if already running.\r\n   * @param {Phaser.Types.Cameras.Scene2D.CameraZoomCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n   * It is sent three arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n   * and the current camera zoom value.\r\n   * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n   *\r\n   * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n   */\n  start: function (zoom, duration, ease, force, callback, context) {\n    if (duration === undefined) {\n      duration = 1000;\n    }\n\n    if (ease === undefined) {\n      ease = EaseMap.Linear;\n    }\n\n    if (force === undefined) {\n      force = false;\n    }\n\n    if (callback === undefined) {\n      callback = null;\n    }\n\n    if (context === undefined) {\n      context = this.camera.scene;\n    }\n\n    var cam = this.camera;\n\n    if (!force && this.isRunning) {\n      return cam;\n    }\n\n    this.isRunning = true;\n    this.duration = duration;\n    this.progress = 0; //  Starting from\n\n    this.source = cam.zoom; //  Zooming to\n\n    this.destination = zoom; //  Using this ease\n\n    if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease)) {\n      this.ease = EaseMap[ease];\n    } else if (typeof ease === 'function') {\n      this.ease = ease;\n    }\n\n    this._elapsed = 0;\n    this._onUpdate = callback;\n    this._onUpdateScope = context;\n    this.camera.emit(Events.ZOOM_START, this.camera, this, duration, zoom);\n    return cam;\n  },\n\n  /**\r\n   * The main update loop for this effect. Called automatically by the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Zoom#update\r\n   * @since 3.11.0\r\n   *\r\n   * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n   * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n   */\n  update: function (time, delta) {\n    if (!this.isRunning) {\n      return;\n    }\n\n    this._elapsed += delta;\n    this.progress = Clamp(this._elapsed / this.duration, 0, 1);\n\n    if (this._elapsed < this.duration) {\n      this.camera.zoom = this.source + (this.destination - this.source) * this.ease(this.progress);\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.camera.zoom);\n      }\n    } else {\n      this.camera.zoom = this.destination;\n\n      if (this._onUpdate) {\n        this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.destination);\n      }\n\n      this.effectComplete();\n    }\n  },\n\n  /**\r\n   * Called internally when the effect completes.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Zoom#effectComplete\r\n   * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n   * @since 3.11.0\r\n   */\n  effectComplete: function () {\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n    this.isRunning = false;\n    this.camera.emit(Events.ZOOM_COMPLETE, this.camera, this);\n  },\n\n  /**\r\n   * Resets this camera effect.\r\n   * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Zoom#reset\r\n   * @since 3.11.0\r\n   */\n  reset: function () {\n    this.isRunning = false;\n    this._onUpdate = null;\n    this._onUpdateScope = null;\n  },\n\n  /**\r\n   * Destroys this effect, releasing it from the Camera.\r\n   *\r\n   * @method Phaser.Cameras.Scene2D.Effects.Zoom#destroy\r\n   * @since 3.11.0\r\n   */\n  destroy: function () {\n    this.reset();\n    this.camera = null;\n  }\n});\nmodule.exports = Zoom;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/cameras/2d/effects/Zoom.js"],"names":["Clamp","require","Class","EaseMap","Events","Zoom","initialize","camera","isRunning","duration","source","destination","ease","progress","_elapsed","_onUpdate","_onUpdateScope","start","zoom","force","callback","context","undefined","Linear","scene","cam","hasOwnProperty","emit","ZOOM_START","update","time","delta","call","effectComplete","ZOOM_COMPLETE","reset","destroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../../math/Clamp');\r\nvar Class = require('../../../utils/Class');\r\nvar EaseMap = require('../../../math/easing/EaseMap');\r\nvar Events = require('../events');\r\n\r\n/**\r\n * @classdesc\r\n * A Camera Zoom effect.\r\n *\r\n * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n *\r\n * The effect will dispatch several events on the Camera itself and you can also specify an `onUpdate` callback,\r\n * which is invoked each frame for the duration of the effect if required.\r\n *\r\n * @class Zoom\r\n * @memberof Phaser.Cameras.Scene2D.Effects\r\n * @constructor\r\n * @since 3.11.0\r\n *\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The camera this effect is acting upon.\r\n */\r\nvar Zoom = new Class({\r\n\r\n    initialize:\r\n\r\n    function Zoom (camera)\r\n    {\r\n        /**\r\n         * The Camera this effect belongs to.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#camera\r\n         * @type {Phaser.Cameras.Scene2D.Camera}\r\n         * @readonly\r\n         * @since 3.11.0\r\n         */\r\n        this.camera = camera;\r\n\r\n        /**\r\n         * Is this effect actively running?\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#isRunning\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.11.0\r\n         */\r\n        this.isRunning = false;\r\n\r\n        /**\r\n         * The duration of the effect, in milliseconds.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#duration\r\n         * @type {integer}\r\n         * @readonly\r\n         * @default 0\r\n         * @since 3.11.0\r\n         */\r\n        this.duration = 0;\r\n\r\n        /**\r\n         * The starting zoom value;\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#source\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.source = 1;\r\n\r\n        /**\r\n         * The destination zoom value.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#destination\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.destination = 1;\r\n\r\n        /**\r\n         * The ease function to use during the zoom.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#ease\r\n         * @type {function}\r\n         * @since 3.11.0\r\n         */\r\n        this.ease;\r\n\r\n        /**\r\n         * If this effect is running this holds the current percentage of the progress, a value between 0 and 1.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#progress\r\n         * @type {number}\r\n         * @since 3.11.0\r\n         */\r\n        this.progress = 0;\r\n\r\n        /**\r\n         * Effect elapsed timer.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_elapsed\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._elapsed = 0;\r\n\r\n        /**\r\n         * This callback is invoked every frame for the duration of the effect.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdate\r\n         * @type {?Phaser.Types.Cameras.Scene2D.CameraZoomCallback}\r\n         * @private\r\n         * @default null\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdate;\r\n\r\n        /**\r\n         * On Complete callback scope.\r\n         *\r\n         * @name Phaser.Cameras.Scene2D.Effects.Zoom#_onUpdateScope\r\n         * @type {any}\r\n         * @private\r\n         * @since 3.11.0\r\n         */\r\n        this._onUpdateScope;\r\n    },\r\n\r\n    /**\r\n     * This effect will zoom the Camera to the given scale, over the duration and with the ease specified.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#start\r\n     * @fires Phaser.Cameras.Scene2D.Events#ZOOM_START\r\n     * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} zoom - The target Camera zoom value.\r\n     * @param {integer} [duration=1000] - The duration of the effect in milliseconds.\r\n     * @param {(string|function)} [ease='Linear'] - The ease to use for the Zoom. Can be any of the Phaser Easing constants or a custom function.\r\n     * @param {boolean} [force=false] - Force the zoom effect to start immediately, even if already running.\r\n     * @param {Phaser.Types.Cameras.Scene2D.CameraZoomCallback} [callback] - This callback will be invoked every frame for the duration of the effect.\r\n     * It is sent three arguments: A reference to the camera, a progress amount between 0 and 1 indicating how complete the effect is,\r\n     * and the current camera zoom value.\r\n     * @param {any} [context] - The context in which the callback is invoked. Defaults to the Scene to which the Camera belongs.\r\n     *\r\n     * @return {Phaser.Cameras.Scene2D.Camera} The Camera on which the effect was started.\r\n     */\r\n    start: function (zoom, duration, ease, force, callback, context)\r\n    {\r\n        if (duration === undefined) { duration = 1000; }\r\n        if (ease === undefined) { ease = EaseMap.Linear; }\r\n        if (force === undefined) { force = false; }\r\n        if (callback === undefined) { callback = null; }\r\n        if (context === undefined) { context = this.camera.scene; }\r\n\r\n        var cam = this.camera;\r\n\r\n        if (!force && this.isRunning)\r\n        {\r\n            return cam;\r\n        }\r\n\r\n        this.isRunning = true;\r\n        this.duration = duration;\r\n        this.progress = 0;\r\n\r\n        //  Starting from\r\n        this.source = cam.zoom;\r\n\r\n        //  Zooming to\r\n        this.destination = zoom;\r\n\r\n        //  Using this ease\r\n        if (typeof ease === 'string' && EaseMap.hasOwnProperty(ease))\r\n        {\r\n            this.ease = EaseMap[ease];\r\n        }\r\n        else if (typeof ease === 'function')\r\n        {\r\n            this.ease = ease;\r\n        }\r\n\r\n        this._elapsed = 0;\r\n\r\n        this._onUpdate = callback;\r\n        this._onUpdateScope = context;\r\n\r\n        this.camera.emit(Events.ZOOM_START, this.camera, this, duration, zoom);\r\n\r\n        return cam;\r\n    },\r\n\r\n    /**\r\n     * The main update loop for this effect. Called automatically by the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#update\r\n     * @since 3.11.0\r\n     *\r\n     * @param {integer} time - The current timestamp as generated by the Request Animation Frame or SetTimeout.\r\n     * @param {number} delta - The delta time, in ms, elapsed since the last frame.\r\n     */\r\n    update: function (time, delta)\r\n    {\r\n        if (!this.isRunning)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this._elapsed += delta;\r\n\r\n        this.progress = Clamp(this._elapsed / this.duration, 0, 1);\r\n\r\n        if (this._elapsed < this.duration)\r\n        {\r\n            this.camera.zoom = this.source + ((this.destination - this.source) * this.ease(this.progress));\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.camera.zoom);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.camera.zoom = this.destination;\r\n\r\n            if (this._onUpdate)\r\n            {\r\n                this._onUpdate.call(this._onUpdateScope, this.camera, this.progress, this.destination);\r\n            }\r\n\r\n            this.effectComplete();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called internally when the effect completes.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#effectComplete\r\n     * @fires Phaser.Cameras.Scene2D.Events#ZOOM_COMPLETE\r\n     * @since 3.11.0\r\n     */\r\n    effectComplete: function ()\r\n    {\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n\r\n        this.isRunning = false;\r\n\r\n        this.camera.emit(Events.ZOOM_COMPLETE, this.camera, this);\r\n    },\r\n\r\n    /**\r\n     * Resets this camera effect.\r\n     * If it was previously running, it stops instantly without calling its onComplete callback or emitting an event.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#reset\r\n     * @since 3.11.0\r\n     */\r\n    reset: function ()\r\n    {\r\n        this.isRunning = false;\r\n\r\n        this._onUpdate = null;\r\n        this._onUpdateScope = null;\r\n    },\r\n\r\n    /**\r\n     * Destroys this effect, releasing it from the Camera.\r\n     *\r\n     * @method Phaser.Cameras.Scene2D.Effects.Zoom#destroy\r\n     * @since 3.11.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.reset();\r\n\r\n        this.camera = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Zoom;\r\n"]},"metadata":{},"sourceType":"script"}