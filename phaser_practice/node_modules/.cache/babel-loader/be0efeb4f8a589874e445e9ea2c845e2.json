{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetPoint = require('./GetPoint');\n\nvar Perimeter = require('./Perimeter'); //  Return an array of points from the perimeter of the rectangle\n//  each spaced out based on the quantity or step required\n\n/**\r\n * Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\r\n *\r\n * @function Phaser.Geom.Rectangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectangle - The Rectangle object to get the points from.\r\n * @param {number} step - Step between points. Used to calculate the number of points to return when quantity is falsey. Ignored if quantity is positive.\r\n * @param {integer} quantity - The number of evenly spaced points from the rectangles perimeter to return. If falsey, step param will be used to calculate the number of points.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array to store the points in.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points from the perimeter of the rectangle.\r\n */\n\n\nvar GetPoints = function (rectangle, quantity, stepRate, out) {\n  if (out === undefined) {\n    out = [];\n  } //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\n\n\n  if (!quantity) {\n    quantity = Perimeter(rectangle) / stepRate;\n  }\n\n  for (var i = 0; i < quantity; i++) {\n    var position = i / quantity;\n    out.push(GetPoint(rectangle, position));\n  }\n\n  return out;\n};\n\nmodule.exports = GetPoints;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/rectangle/GetPoints.js"],"names":["GetPoint","require","Perimeter","GetPoints","rectangle","quantity","stepRate","out","undefined","i","position","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB,C,CAEA;AACA;;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIE,SAAS,GAAG,UAAUC,SAAV,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyCC,GAAzC,EAChB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW,GADxC,CAGI;;;AACA,MAAI,CAACF,QAAL,EACA;AACIA,IAAAA,QAAQ,GAAGH,SAAS,CAACE,SAAD,CAAT,GAAuBE,QAAlC;AACH;;AAED,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAApB,EAA8BI,CAAC,EAA/B,EACA;AACI,QAAIC,QAAQ,GAAGD,CAAC,GAAGJ,QAAnB;AAEAE,IAAAA,GAAG,CAACI,IAAJ,CAASX,QAAQ,CAACI,SAAD,EAAYM,QAAZ,CAAjB;AACH;;AAED,SAAOH,GAAP;AACH,CAlBD;;AAoBAK,MAAM,CAACC,OAAP,GAAiBV,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetPoint = require('./GetPoint');\r\nvar Perimeter = require('./Perimeter');\r\n\r\n//  Return an array of points from the perimeter of the rectangle\r\n//  each spaced out based on the quantity or step required\r\n\r\n/**\r\n * Return an array of points from the perimeter of the rectangle, each spaced out based on the quantity or step required.\r\n *\r\n * @function Phaser.Geom.Rectangle.GetPoints\r\n * @since 3.0.0\r\n *\r\n * @generic {Phaser.Geom.Point[]} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Rectangle} rectangle - The Rectangle object to get the points from.\r\n * @param {number} step - Step between points. Used to calculate the number of points to return when quantity is falsey. Ignored if quantity is positive.\r\n * @param {integer} quantity - The number of evenly spaced points from the rectangles perimeter to return. If falsey, step param will be used to calculate the number of points.\r\n * @param {(array|Phaser.Geom.Point[])} [out] - An optional array to store the points in.\r\n *\r\n * @return {(array|Phaser.Geom.Point[])} An array of Points from the perimeter of the rectangle.\r\n */\r\nvar GetPoints = function (rectangle, quantity, stepRate, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    //  If quantity is a falsey value (false, null, 0, undefined, etc) then we calculate it based on the stepRate instead.\r\n    if (!quantity)\r\n    {\r\n        quantity = Perimeter(rectangle) / stepRate;\r\n    }\r\n\r\n    for (var i = 0; i < quantity; i++)\r\n    {\r\n        var position = i / quantity;\r\n\r\n        out.push(GetPoint(rectangle, position));\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetPoints;\r\n"]},"metadata":{},"sourceType":"script"}