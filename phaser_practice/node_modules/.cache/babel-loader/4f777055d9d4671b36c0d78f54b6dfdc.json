{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar InputEvents = require('../events');\n\nvar NOOP = require('../../utils/NOOP'); // https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n// https://patrickhlauke.github.io/touch/tests/results/\n// https://www.html5rocks.com/en/mobile/touch/\n\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberof Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\n\n\nvar TouchManager = new Class({\n  initialize: function TouchManager(inputManager) {\n    /**\r\n     * A reference to the Input Manager.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#manager\r\n     * @type {Phaser.Input.InputManager}\r\n     * @since 3.0.0\r\n     */\n    this.manager = inputManager;\n    /**\r\n     * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#capture\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.capture = true;\n    /**\r\n     * A boolean that controls if the Touch Manager is enabled or not.\r\n     * Can be toggled on the fly.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#enabled\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * The Touch Event target, as defined in the Game Config.\r\n     * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#target\r\n     * @type {any}\r\n     * @since 3.0.0\r\n     */\n\n    this.target;\n    /**\r\n     * The Touch Start event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchStart\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchStart = NOOP;\n    /**\r\n     * The Touch Start event handler function specifically for events on the Window.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchStartWindow\r\n     * @type {function}\r\n     * @since 3.17.0\r\n     */\n\n    this.onTouchStartWindow = NOOP;\n    /**\r\n     * The Touch Move event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchMove\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchMove = NOOP;\n    /**\r\n     * The Touch End event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchEnd\r\n     * @type {function}\r\n     * @since 3.0.0\r\n     */\n\n    this.onTouchEnd = NOOP;\n    /**\r\n     * The Touch End event handler function specifically for events on the Window.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchEndWindow\r\n     * @type {function}\r\n     * @since 3.17.0\r\n     */\n\n    this.onTouchEndWindow = NOOP;\n    /**\r\n     * The Touch Cancel event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchCancel\r\n     * @type {function}\r\n     * @since 3.15.0\r\n     */\n\n    this.onTouchCancel = NOOP;\n    /**\r\n     * The Touch Cancel event handler function specifically for events on the Window.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchCancelWindow\r\n     * @type {function}\r\n     * @since 3.18.0\r\n     */\n\n    this.onTouchCancelWindow = NOOP;\n    /**\r\n     * The Touch Over event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchOver\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onTouchOver = NOOP;\n    /**\r\n     * The Touch Out event handler function.\r\n     * Initially empty and bound in the `startListeners` method.\r\n     *\r\n     * @name Phaser.Input.Touch.TouchManager#onTouchOut\r\n     * @type {function}\r\n     * @since 3.16.0\r\n     */\n\n    this.onTouchOut = NOOP;\n    inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\n  },\n\n  /**\r\n   * The Touch Manager boot process.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#boot\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  boot: function () {\n    var config = this.manager.config;\n    this.enabled = config.inputTouch;\n    this.target = config.inputTouchEventTarget;\n    this.capture = config.inputTouchCapture;\n\n    if (!this.target) {\n      this.target = this.manager.game.canvas;\n    }\n\n    if (config.disableContextMenu) {\n      this.disableContextMenu();\n    }\n\n    if (this.enabled && this.target) {\n      this.startListeners();\n    }\n  },\n\n  /**\r\n   * Attempts to disable the context menu from appearing if you touch-hold on the browser.\r\n   * \r\n   * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n   * \r\n   * Use this if you need to disable the OS context menu on mobile.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#disableContextMenu\r\n   * @since 3.20.0\r\n   *\r\n   * @return {Phaser.Input.Touch.TouchManager} This Touch Manager instance.\r\n   */\n  disableContextMenu: function () {\n    document.body.addEventListener('contextmenu', function (event) {\n      event.preventDefault();\n      return false;\n    });\n    return this;\n  },\n\n  /**\r\n   * Starts the Touch Event listeners running as long as an input target is set.\r\n   * \r\n   * This method is called automatically if Touch Input is enabled in the game config,\r\n   * which it is by default. However, you can call it manually should you need to\r\n   * delay input capturing until later in the game.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#startListeners\r\n   * @since 3.0.0\r\n   */\n  startListeners: function () {\n    var _this = this;\n\n    var canvas = this.manager.canvas;\n    var autoFocus = window && window.focus && this.manager.game.config.autoFocus;\n\n    this.onTouchStart = function (event) {\n      if (autoFocus) {\n        window.focus();\n      }\n\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onTouchStart(event);\n\n        if (_this.capture && event.cancelable && event.target === canvas) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onTouchStartWindow = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas) {\n        //  Only process the event if the target isn't the canvas\n        _this.manager.onTouchStart(event);\n      }\n    };\n\n    this.onTouchMove = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onTouchMove(event);\n\n        if (_this.capture && event.cancelable) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onTouchEnd = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onTouchEnd(event);\n\n        if (_this.capture && event.cancelable && event.target === canvas) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onTouchEndWindow = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas) {\n        //  Only process the event if the target isn't the canvas\n        _this.manager.onTouchEnd(event);\n      }\n    };\n\n    this.onTouchCancel = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onTouchCancel(event);\n\n        if (_this.capture) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this.onTouchCancelWindow = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.onTouchCancel(event);\n      }\n    };\n\n    this.onTouchOver = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.setCanvasOver(event);\n      }\n    };\n\n    this.onTouchOut = function (event) {\n      if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled) {\n        _this.manager.setCanvasOut(event);\n      }\n    };\n\n    var target = this.target;\n\n    if (!target) {\n      return;\n    }\n\n    var passive = {\n      passive: true\n    };\n    var nonPassive = {\n      passive: false\n    };\n    target.addEventListener('touchstart', this.onTouchStart, this.capture ? nonPassive : passive);\n    target.addEventListener('touchmove', this.onTouchMove, this.capture ? nonPassive : passive);\n    target.addEventListener('touchend', this.onTouchEnd, this.capture ? nonPassive : passive);\n    target.addEventListener('touchcancel', this.onTouchCancel, this.capture ? nonPassive : passive);\n    target.addEventListener('touchover', this.onTouchOver, this.capture ? nonPassive : passive);\n    target.addEventListener('touchout', this.onTouchOut, this.capture ? nonPassive : passive);\n\n    if (window && this.manager.game.config.inputWindowEvents) {\n      window.addEventListener('touchstart', this.onTouchStartWindow, nonPassive);\n      window.addEventListener('touchend', this.onTouchEndWindow, nonPassive);\n      window.addEventListener('touchcancel', this.onTouchCancelWindow, nonPassive);\n    }\n\n    this.enabled = true;\n  },\n\n  /**\r\n   * Stops the Touch Event listeners.\r\n   * This is called automatically and does not need to be manually invoked.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n   * @since 3.0.0\r\n   */\n  stopListeners: function () {\n    var target = this.target;\n    target.removeEventListener('touchstart', this.onTouchStart);\n    target.removeEventListener('touchmove', this.onTouchMove);\n    target.removeEventListener('touchend', this.onTouchEnd);\n    target.removeEventListener('touchcancel', this.onTouchCancel);\n    target.removeEventListener('touchover', this.onTouchOver);\n    target.removeEventListener('touchout', this.onTouchOut);\n\n    if (window) {\n      window.removeEventListener('touchstart', this.onTouchStartWindow);\n      window.removeEventListener('touchend', this.onTouchEndWindow);\n    }\n  },\n\n  /**\r\n   * Destroys this Touch Manager instance.\r\n   *\r\n   * @method Phaser.Input.Touch.TouchManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.stopListeners();\n    this.target = null;\n    this.enabled = false;\n    this.manager = null;\n  }\n});\nmodule.exports = TouchManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/touch/TouchManager.js"],"names":["Class","require","InputEvents","NOOP","TouchManager","initialize","inputManager","manager","capture","enabled","target","onTouchStart","onTouchStartWindow","onTouchMove","onTouchEnd","onTouchEndWindow","onTouchCancel","onTouchCancelWindow","onTouchOver","onTouchOut","events","once","MANAGER_BOOT","boot","config","inputTouch","inputTouchEventTarget","inputTouchCapture","game","canvas","disableContextMenu","startListeners","document","body","addEventListener","event","preventDefault","_this","autoFocus","window","focus","defaultPrevented","cancelable","setCanvasOver","setCanvasOut","passive","nonPassive","inputWindowEvents","stopListeners","removeEventListener","destroy","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,kBAAD,CAAlB,C,CAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIG,YAAY,GAAG,IAAIJ,KAAJ,CAAU;AAEzBK,EAAAA,UAAU,EAEV,SAASD,YAAT,CAAuBE,YAAvB,EACA;AACI;;;;;;;AAOA,SAAKC,OAAL,GAAeD,YAAf;AAEA;;;;;;;;;AAQA,SAAKE,OAAL,GAAe,IAAf;AAEA;;;;;;;;;;AASA,SAAKC,OAAL,GAAe,KAAf;AAEA;;;;;;;;;AAQA,SAAKC,MAAL;AAEA;;;;;;;;;AAQA,SAAKC,YAAL,GAAoBR,IAApB;AAEA;;;;;;;;;AAQA,SAAKS,kBAAL,GAA0BT,IAA1B;AAEA;;;;;;;;;AAQA,SAAKU,WAAL,GAAmBV,IAAnB;AAEA;;;;;;;;;AAQA,SAAKW,UAAL,GAAkBX,IAAlB;AAEA;;;;;;;;;AAQA,SAAKY,gBAAL,GAAwBZ,IAAxB;AAEA;;;;;;;;;AAQA,SAAKa,aAAL,GAAqBb,IAArB;AAEA;;;;;;;;;AAQA,SAAKc,mBAAL,GAA2Bd,IAA3B;AAEA;;;;;;;;;AAQA,SAAKe,WAAL,GAAmBf,IAAnB;AAEA;;;;;;;;;AAQA,SAAKgB,UAAL,GAAkBhB,IAAlB;AAEAG,IAAAA,YAAY,CAACc,MAAb,CAAoBC,IAApB,CAAyBnB,WAAW,CAACoB,YAArC,EAAmD,KAAKC,IAAxD,EAA8D,IAA9D;AACH,GAzIwB;;AA2IzB;;;;;;;AAOAA,EAAAA,IAAI,EAAE,YACN;AACI,QAAIC,MAAM,GAAG,KAAKjB,OAAL,CAAaiB,MAA1B;AAEA,SAAKf,OAAL,GAAee,MAAM,CAACC,UAAtB;AACA,SAAKf,MAAL,GAAcc,MAAM,CAACE,qBAArB;AACA,SAAKlB,OAAL,GAAegB,MAAM,CAACG,iBAAtB;;AAEA,QAAI,CAAC,KAAKjB,MAAV,EACA;AACI,WAAKA,MAAL,GAAc,KAAKH,OAAL,CAAaqB,IAAb,CAAkBC,MAAhC;AACH;;AAED,QAAIL,MAAM,CAACM,kBAAX,EACA;AACI,WAAKA,kBAAL;AACH;;AAED,QAAI,KAAKrB,OAAL,IAAgB,KAAKC,MAAzB,EACA;AACI,WAAKqB,cAAL;AACH;AACJ,GAxKwB;;AA0KzB;;;;;;;;;;;;AAYAD,EAAAA,kBAAkB,EAAE,YACpB;AACIE,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,aAA/B,EAA8C,UAAUC,KAAV,EAC9C;AACIA,MAAAA,KAAK,CAACC,cAAN;AACA,aAAO,KAAP;AACH,KAJD;AAMA,WAAO,IAAP;AACH,GA/LwB;;AAiMzB;;;;;;;;;;AAUAL,EAAAA,cAAc,EAAE,YAChB;AACI,QAAIM,KAAK,GAAG,IAAZ;;AACA,QAAIR,MAAM,GAAG,KAAKtB,OAAL,CAAasB,MAA1B;AACA,QAAIS,SAAS,GAAIC,MAAM,IAAIA,MAAM,CAACC,KAAjB,IAA0B,KAAKjC,OAAL,CAAaqB,IAAb,CAAkBJ,MAAlB,CAAyBc,SAApE;;AAEA,SAAK3B,YAAL,GAAoB,UAAUwB,KAAV,EACpB;AACI,UAAIG,SAAJ,EACA;AACIC,QAAAA,MAAM,CAACC,KAAP;AACH;;AAED,UAAI,CAACL,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcI,YAAd,CAA2BwB,KAA3B;;AAEA,YAAIE,KAAK,CAAC7B,OAAN,IAAiB2B,KAAK,CAACO,UAAvB,IAAqCP,KAAK,CAACzB,MAAN,KAAiBmB,MAA1D,EACA;AACIM,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ;AACJ,KAhBD;;AAkBA,SAAKxB,kBAAL,GAA0B,UAAUuB,KAAV,EAC1B;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA3E,IAAsF0B,KAAK,CAACzB,MAAN,KAAiBmB,MAA3G,EACA;AACI;AACAQ,QAAAA,KAAK,CAAC9B,OAAN,CAAcI,YAAd,CAA2BwB,KAA3B;AACH;AACJ,KAPD;;AASA,SAAKtB,WAAL,GAAmB,UAAUsB,KAAV,EACnB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcM,WAAd,CAA0BsB,KAA1B;;AAEA,YAAIE,KAAK,CAAC7B,OAAN,IAAiB2B,KAAK,CAACO,UAA3B,EACA;AACIP,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ;AACJ,KAXD;;AAaA,SAAKtB,UAAL,GAAkB,UAAUqB,KAAV,EAClB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcO,UAAd,CAAyBqB,KAAzB;;AAEA,YAAIE,KAAK,CAAC7B,OAAN,IAAiB2B,KAAK,CAACO,UAAvB,IAAqCP,KAAK,CAACzB,MAAN,KAAiBmB,MAA1D,EACA;AACIM,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ;AACJ,KAXD;;AAaA,SAAKrB,gBAAL,GAAwB,UAAUoB,KAAV,EACxB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA3E,IAAsF0B,KAAK,CAACzB,MAAN,KAAiBmB,MAA3G,EACA;AACI;AACAQ,QAAAA,KAAK,CAAC9B,OAAN,CAAcO,UAAd,CAAyBqB,KAAzB;AACH;AACJ,KAPD;;AASA,SAAKnB,aAAL,GAAqB,UAAUmB,KAAV,EACrB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcS,aAAd,CAA4BmB,KAA5B;;AAEA,YAAIE,KAAK,CAAC7B,OAAV,EACA;AACI2B,UAAAA,KAAK,CAACC,cAAN;AACH;AACJ;AACJ,KAXD;;AAaA,SAAKnB,mBAAL,GAA2B,UAAUkB,KAAV,EAC3B;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcS,aAAd,CAA4BmB,KAA5B;AACH;AACJ,KAND;;AAQA,SAAKjB,WAAL,GAAmB,UAAUiB,KAAV,EACnB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcoC,aAAd,CAA4BR,KAA5B;AACH;AACJ,KAND;;AAQA,SAAKhB,UAAL,GAAkB,UAAUgB,KAAV,EAClB;AACI,UAAI,CAACA,KAAK,CAACM,gBAAP,IAA2BJ,KAAK,CAAC5B,OAAjC,IAA4C4B,KAAK,CAAC9B,OAAlD,IAA6D8B,KAAK,CAAC9B,OAAN,CAAcE,OAA/E,EACA;AACI4B,QAAAA,KAAK,CAAC9B,OAAN,CAAcqC,YAAd,CAA2BT,KAA3B;AACH;AACJ,KAND;;AAQA,QAAIzB,MAAM,GAAG,KAAKA,MAAlB;;AAEA,QAAI,CAACA,MAAL,EACA;AACI;AACH;;AAED,QAAImC,OAAO,GAAG;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAAd;AACA,QAAIC,UAAU,GAAG;AAAED,MAAAA,OAAO,EAAE;AAAX,KAAjB;AAEAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,YAAxB,EAAsC,KAAKvB,YAA3C,EAA0D,KAAKH,OAAN,GAAiBsC,UAAjB,GAA8BD,OAAvF;AACAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,WAAxB,EAAqC,KAAKrB,WAA1C,EAAwD,KAAKL,OAAN,GAAiBsC,UAAjB,GAA8BD,OAArF;AACAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,UAAxB,EAAoC,KAAKpB,UAAzC,EAAsD,KAAKN,OAAN,GAAiBsC,UAAjB,GAA8BD,OAAnF;AACAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,aAAxB,EAAuC,KAAKlB,aAA5C,EAA4D,KAAKR,OAAN,GAAiBsC,UAAjB,GAA8BD,OAAzF;AACAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,WAAxB,EAAqC,KAAKhB,WAA1C,EAAwD,KAAKV,OAAN,GAAiBsC,UAAjB,GAA8BD,OAArF;AACAnC,IAAAA,MAAM,CAACwB,gBAAP,CAAwB,UAAxB,EAAoC,KAAKf,UAAzC,EAAsD,KAAKX,OAAN,GAAiBsC,UAAjB,GAA8BD,OAAnF;;AAEA,QAAIN,MAAM,IAAI,KAAKhC,OAAL,CAAaqB,IAAb,CAAkBJ,MAAlB,CAAyBuB,iBAAvC,EACA;AACIR,MAAAA,MAAM,CAACL,gBAAP,CAAwB,YAAxB,EAAsC,KAAKtB,kBAA3C,EAA+DkC,UAA/D;AACAP,MAAAA,MAAM,CAACL,gBAAP,CAAwB,UAAxB,EAAoC,KAAKnB,gBAAzC,EAA2D+B,UAA3D;AACAP,MAAAA,MAAM,CAACL,gBAAP,CAAwB,aAAxB,EAAuC,KAAKjB,mBAA5C,EAAiE6B,UAAjE;AACH;;AAED,SAAKrC,OAAL,GAAe,IAAf;AACH,GA7UwB;;AA+UzB;;;;;;;AAOAuC,EAAAA,aAAa,EAAE,YACf;AACI,QAAItC,MAAM,GAAG,KAAKA,MAAlB;AAEAA,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,YAA3B,EAAyC,KAAKtC,YAA9C;AACAD,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,WAA3B,EAAwC,KAAKpC,WAA7C;AACAH,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,UAA3B,EAAuC,KAAKnC,UAA5C;AACAJ,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,aAA3B,EAA0C,KAAKjC,aAA/C;AACAN,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,WAA3B,EAAwC,KAAK/B,WAA7C;AACAR,IAAAA,MAAM,CAACuC,mBAAP,CAA2B,UAA3B,EAAuC,KAAK9B,UAA5C;;AAEA,QAAIoB,MAAJ,EACA;AACIA,MAAAA,MAAM,CAACU,mBAAP,CAA2B,YAA3B,EAAyC,KAAKrC,kBAA9C;AACA2B,MAAAA,MAAM,CAACU,mBAAP,CAA2B,UAA3B,EAAuC,KAAKlC,gBAA5C;AACH;AACJ,GAtWwB;;AAwWzB;;;;;;AAMAmC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKF,aAAL;AAEA,SAAKtC,MAAL,GAAc,IAAd;AACA,SAAKD,OAAL,GAAe,KAAf;AACA,SAAKF,OAAL,GAAe,IAAf;AACH;AArXwB,CAAV,CAAnB;AAyXA4C,MAAM,CAACC,OAAP,GAAiBhD,YAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar InputEvents = require('../events');\r\nvar NOOP = require('../../utils/NOOP');\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\r\n// https://patrickhlauke.github.io/touch/tests/results/\r\n// https://www.html5rocks.com/en/mobile/touch/\r\n\r\n/**\r\n * @classdesc\r\n * The Touch Manager is a helper class that belongs to the Input Manager.\r\n * \r\n * Its role is to listen for native DOM Touch Events and then pass them onto the Input Manager for further processing.\r\n * \r\n * You do not need to create this class directly, the Input Manager will create an instance of it automatically.\r\n *\r\n * @class TouchManager\r\n * @memberof Phaser.Input.Touch\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Input.InputManager} inputManager - A reference to the Input Manager.\r\n */\r\nvar TouchManager = new Class({\r\n\r\n    initialize:\r\n\r\n    function TouchManager (inputManager)\r\n    {\r\n        /**\r\n         * A reference to the Input Manager.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#manager\r\n         * @type {Phaser.Input.InputManager}\r\n         * @since 3.0.0\r\n         */\r\n        this.manager = inputManager;\r\n\r\n        /**\r\n         * If true the DOM events will have event.preventDefault applied to them, if false they will propagate fully.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#capture\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.capture = true;\r\n\r\n        /**\r\n         * A boolean that controls if the Touch Manager is enabled or not.\r\n         * Can be toggled on the fly.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#enabled\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.enabled = false;\r\n\r\n        /**\r\n         * The Touch Event target, as defined in the Game Config.\r\n         * Typically the canvas to which the game is rendering, but can be any interactive DOM element.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#target\r\n         * @type {any}\r\n         * @since 3.0.0\r\n         */\r\n        this.target;\r\n\r\n        /**\r\n         * The Touch Start event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStart\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchStart = NOOP;\r\n\r\n        /**\r\n         * The Touch Start event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchStartWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchStartWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Move event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchMove\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchMove = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEnd\r\n         * @type {function}\r\n         * @since 3.0.0\r\n         */\r\n        this.onTouchEnd = NOOP;\r\n\r\n        /**\r\n         * The Touch End event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchEndWindow\r\n         * @type {function}\r\n         * @since 3.17.0\r\n         */\r\n        this.onTouchEndWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Cancel event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchCancel\r\n         * @type {function}\r\n         * @since 3.15.0\r\n         */\r\n        this.onTouchCancel = NOOP;\r\n\r\n        /**\r\n         * The Touch Cancel event handler function specifically for events on the Window.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchCancelWindow\r\n         * @type {function}\r\n         * @since 3.18.0\r\n         */\r\n        this.onTouchCancelWindow = NOOP;\r\n\r\n        /**\r\n         * The Touch Over event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOver\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOver = NOOP;\r\n\r\n        /**\r\n         * The Touch Out event handler function.\r\n         * Initially empty and bound in the `startListeners` method.\r\n         *\r\n         * @name Phaser.Input.Touch.TouchManager#onTouchOut\r\n         * @type {function}\r\n         * @since 3.16.0\r\n         */\r\n        this.onTouchOut = NOOP;\r\n\r\n        inputManager.events.once(InputEvents.MANAGER_BOOT, this.boot, this);\r\n    },\r\n\r\n    /**\r\n     * The Touch Manager boot process.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#boot\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    boot: function ()\r\n    {\r\n        var config = this.manager.config;\r\n\r\n        this.enabled = config.inputTouch;\r\n        this.target = config.inputTouchEventTarget;\r\n        this.capture = config.inputTouchCapture;\r\n\r\n        if (!this.target)\r\n        {\r\n            this.target = this.manager.game.canvas;\r\n        }\r\n\r\n        if (config.disableContextMenu)\r\n        {\r\n            this.disableContextMenu();\r\n        }\r\n\r\n        if (this.enabled && this.target)\r\n        {\r\n            this.startListeners();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Attempts to disable the context menu from appearing if you touch-hold on the browser.\r\n     * \r\n     * Works by listening for the `contextmenu` event and prevent defaulting it.\r\n     * \r\n     * Use this if you need to disable the OS context menu on mobile.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#disableContextMenu\r\n     * @since 3.20.0\r\n     *\r\n     * @return {Phaser.Input.Touch.TouchManager} This Touch Manager instance.\r\n     */\r\n    disableContextMenu: function ()\r\n    {\r\n        document.body.addEventListener('contextmenu', function (event)\r\n        {\r\n            event.preventDefault();\r\n            return false;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Starts the Touch Event listeners running as long as an input target is set.\r\n     * \r\n     * This method is called automatically if Touch Input is enabled in the game config,\r\n     * which it is by default. However, you can call it manually should you need to\r\n     * delay input capturing until later in the game.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#startListeners\r\n     * @since 3.0.0\r\n     */\r\n    startListeners: function ()\r\n    {\r\n        var _this = this;\r\n        var canvas = this.manager.canvas;\r\n        var autoFocus = (window && window.focus && this.manager.game.config.autoFocus);\r\n\r\n        this.onTouchStart = function (event)\r\n        {\r\n            if (autoFocus)\r\n            {\r\n                window.focus();\r\n            }\r\n\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchStart(event);\r\n    \r\n                if (_this.capture && event.cancelable && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchStartWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onTouchStart(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchMove = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchMove(event);\r\n    \r\n                if (_this.capture && event.cancelable)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchEnd = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchEnd(event);\r\n    \r\n                if (_this.capture && event.cancelable && event.target === canvas)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchEndWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled && event.target !== canvas)\r\n            {\r\n                //  Only process the event if the target isn't the canvas\r\n                _this.manager.onTouchEnd(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchCancel = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchCancel(event);\r\n    \r\n                if (_this.capture)\r\n                {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        };\r\n\r\n        this.onTouchCancelWindow = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.onTouchCancel(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchOver = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOver(event);\r\n            }\r\n        };\r\n\r\n        this.onTouchOut = function (event)\r\n        {\r\n            if (!event.defaultPrevented && _this.enabled && _this.manager && _this.manager.enabled)\r\n            {\r\n                _this.manager.setCanvasOut(event);\r\n            }\r\n        };\r\n\r\n        var target = this.target;\r\n\r\n        if (!target)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var passive = { passive: true };\r\n        var nonPassive = { passive: false };\r\n\r\n        target.addEventListener('touchstart', this.onTouchStart, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchmove', this.onTouchMove, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchend', this.onTouchEnd, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchcancel', this.onTouchCancel, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchover', this.onTouchOver, (this.capture) ? nonPassive : passive);\r\n        target.addEventListener('touchout', this.onTouchOut, (this.capture) ? nonPassive : passive);\r\n\r\n        if (window && this.manager.game.config.inputWindowEvents)\r\n        {\r\n            window.addEventListener('touchstart', this.onTouchStartWindow, nonPassive);\r\n            window.addEventListener('touchend', this.onTouchEndWindow, nonPassive);\r\n            window.addEventListener('touchcancel', this.onTouchCancelWindow, nonPassive);\r\n        }\r\n\r\n        this.enabled = true;\r\n    },\r\n\r\n    /**\r\n     * Stops the Touch Event listeners.\r\n     * This is called automatically and does not need to be manually invoked.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#stopListeners\r\n     * @since 3.0.0\r\n     */\r\n    stopListeners: function ()\r\n    {\r\n        var target = this.target;\r\n\r\n        target.removeEventListener('touchstart', this.onTouchStart);\r\n        target.removeEventListener('touchmove', this.onTouchMove);\r\n        target.removeEventListener('touchend', this.onTouchEnd);\r\n        target.removeEventListener('touchcancel', this.onTouchCancel);\r\n        target.removeEventListener('touchover', this.onTouchOver);\r\n        target.removeEventListener('touchout', this.onTouchOut);\r\n\r\n        if (window)\r\n        {\r\n            window.removeEventListener('touchstart', this.onTouchStartWindow);\r\n            window.removeEventListener('touchend', this.onTouchEndWindow);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Destroys this Touch Manager instance.\r\n     *\r\n     * @method Phaser.Input.Touch.TouchManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.stopListeners();\r\n\r\n        this.target = null;\r\n        this.enabled = false;\r\n        this.manager = null;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = TouchManager;\r\n"]},"metadata":{},"sourceType":"script"}