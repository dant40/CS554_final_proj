{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  Source object\n//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'\n//  The default value to use if the key doesn't exist\n\n/**\r\n * Retrieves a value from an object.\r\n *\r\n * @function Phaser.Utils.Objects.GetValue\r\n * @since 3.0.0\r\n *\r\n * @param {object} source - The object to retrieve the value from.\r\n * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\r\n * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.\r\n *\r\n * @return {*} The value of the requested key.\r\n */\nvar GetValue = function (source, key, defaultValue) {\n  if (!source || typeof source === 'number') {\n    return defaultValue;\n  } else if (source.hasOwnProperty(key)) {\n    return source[key];\n  } else if (key.indexOf('.') !== -1) {\n    var keys = key.split('.');\n    var parent = source;\n    var value = defaultValue; //  Use for loop here so we can break early\n\n    for (var i = 0; i < keys.length; i++) {\n      if (parent.hasOwnProperty(keys[i])) {\n        //  Yes it has a key property, let's carry on down\n        value = parent[keys[i]];\n        parent = parent[keys[i]];\n      } else {\n        //  Can't go any further, so reset to default\n        value = defaultValue;\n        break;\n      }\n    }\n\n    return value;\n  } else {\n    return defaultValue;\n  }\n};\n\nmodule.exports = GetValue;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/object/GetValue.js"],"names":["GetValue","source","key","defaultValue","hasOwnProperty","indexOf","keys","split","parent","value","i","length","module","exports"],"mappings":"AAAA;;;;;AAMA;AACA;AACA;;AAEA;;;;;;;;;;;;AAYA,IAAIA,QAAQ,GAAG,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,YAAvB,EACf;AACI,MAAI,CAACF,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EACA;AACI,WAAOE,YAAP;AACH,GAHD,MAIK,IAAIF,MAAM,CAACG,cAAP,CAAsBF,GAAtB,CAAJ,EACL;AACI,WAAOD,MAAM,CAACC,GAAD,CAAb;AACH,GAHI,MAIA,IAAIA,GAAG,CAACG,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EACL;AACI,QAAIC,IAAI,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAX;AACA,QAAIC,MAAM,GAAGP,MAAb;AACA,QAAIQ,KAAK,GAAGN,YAAZ,CAHJ,CAKI;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACI,UAAIF,MAAM,CAACJ,cAAP,CAAsBE,IAAI,CAACI,CAAD,CAA1B,CAAJ,EACA;AACI;AACAD,QAAAA,KAAK,GAAGD,MAAM,CAACF,IAAI,CAACI,CAAD,CAAL,CAAd;AAEAF,QAAAA,MAAM,GAAGA,MAAM,CAACF,IAAI,CAACI,CAAD,CAAL,CAAf;AACH,OAND,MAQA;AACI;AACAD,QAAAA,KAAK,GAAGN,YAAR;AACA;AACH;AACJ;;AAED,WAAOM,KAAP;AACH,GAzBI,MA2BL;AACI,WAAON,YAAP;AACH;AACJ,CAxCD;;AA0CAS,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  Source object\r\n//  The key as a string, or an array of keys, i.e. 'banner', or 'banner.hideBanner'\r\n//  The default value to use if the key doesn't exist\r\n\r\n/**\r\n * Retrieves a value from an object.\r\n *\r\n * @function Phaser.Utils.Objects.GetValue\r\n * @since 3.0.0\r\n *\r\n * @param {object} source - The object to retrieve the value from.\r\n * @param {string} key - The name of the property to retrieve from the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`) - `banner.hideBanner` would return the value of the `hideBanner` property from the object stored in the `banner` property of the `source` object.\r\n * @param {*} defaultValue - The value to return if the `key` isn't found in the `source` object.\r\n *\r\n * @return {*} The value of the requested key.\r\n */\r\nvar GetValue = function (source, key, defaultValue)\r\n{\r\n    if (!source || typeof source === 'number')\r\n    {\r\n        return defaultValue;\r\n    }\r\n    else if (source.hasOwnProperty(key))\r\n    {\r\n        return source[key];\r\n    }\r\n    else if (key.indexOf('.') !== -1)\r\n    {\r\n        var keys = key.split('.');\r\n        var parent = source;\r\n        var value = defaultValue;\r\n\r\n        //  Use for loop here so we can break early\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            if (parent.hasOwnProperty(keys[i]))\r\n            {\r\n                //  Yes it has a key property, let's carry on down\r\n                value = parent[keys[i]];\r\n\r\n                parent = parent[keys[i]];\r\n            }\r\n            else\r\n            {\r\n                //  Can't go any further, so reset to default\r\n                value = defaultValue;\r\n                break;\r\n            }\r\n        }\r\n\r\n        return value;\r\n    }\r\n    else\r\n    {\r\n        return defaultValue;\r\n    }\r\n};\r\n\r\nmodule.exports = GetValue;\r\n"]},"metadata":{},"sourceType":"script"}