{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetOverlapY = require('./GetOverlapY');\n/**\r\n * Separates two overlapping bodies on the Y-axis (vertically).\r\n *\r\n * Separation involves moving two overlapping bodies so they don't overlap anymore and adjusting their velocities based on their mass. This is a core part of collision detection.\r\n *\r\n * The bodies won't be separated if there is no vertical overlap between them, if they are static, or if either one uses custom logic for its separation.\r\n *\r\n * @function Phaser.Physics.Arcade.SeparateY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body1 - The first Body to separate.\r\n * @param {Phaser.Physics.Arcade.Body} body2 - The second Body to separate.\r\n * @param {boolean} overlapOnly - If `true`, the bodies will only have their overlap data set and no separation will take place.\r\n * @param {number} bias - A value to add to the delta value during overlap checking. Used to prevent sprite tunneling.\r\n *\r\n * @return {boolean} `true` if the two bodies overlap vertically, otherwise `false`.\r\n */\n\n\nvar SeparateY = function (body1, body2, overlapOnly, bias) {\n  var overlap = GetOverlapY(body1, body2, overlapOnly, bias); //  Can't separate two immovable bodies, or a body with its own custom separation logic\n\n  if (overlapOnly || overlap === 0 || body1.immovable && body2.immovable || body1.customSeparateY || body2.customSeparateY) {\n    //  return true if there was some overlap, otherwise false\n    return overlap !== 0 || body1.embedded && body2.embedded;\n  } //  Adjust their positions and velocities accordingly (if there was any overlap)\n\n\n  var v1 = body1.velocity.y;\n  var v2 = body2.velocity.y;\n\n  if (!body1.immovable && !body2.immovable) {\n    overlap *= 0.5;\n    body1.y -= overlap;\n    body2.y += overlap;\n    var nv1 = Math.sqrt(v2 * v2 * body2.mass / body1.mass) * (v2 > 0 ? 1 : -1);\n    var nv2 = Math.sqrt(v1 * v1 * body1.mass / body2.mass) * (v1 > 0 ? 1 : -1);\n    var avg = (nv1 + nv2) * 0.5;\n    nv1 -= avg;\n    nv2 -= avg;\n    body1.velocity.y = avg + nv1 * body1.bounce.y;\n    body2.velocity.y = avg + nv2 * body2.bounce.y;\n  } else if (!body1.immovable) {\n    body1.y -= overlap;\n    body1.velocity.y = v2 - v1 * body1.bounce.y; //  This is special case code that handles things like horizontal moving platforms you can ride\n\n    if (body2.moves) {\n      body1.x += (body2.x - body2.prev.x) * body2.friction.x;\n    }\n  } else {\n    body2.y += overlap;\n    body2.velocity.y = v1 - v2 * body2.bounce.y; //  This is special case code that handles things like horizontal moving platforms you can ride\n\n    if (body1.moves) {\n      body2.x += (body1.x - body1.prev.x) * body1.friction.x;\n    }\n  } //  If we got this far then there WAS overlap, and separation is complete, so return true\n\n\n  return true;\n};\n\nmodule.exports = SeparateY;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/SeparateY.js"],"names":["GetOverlapY","require","SeparateY","body1","body2","overlapOnly","bias","overlap","immovable","customSeparateY","embedded","v1","velocity","y","v2","nv1","Math","sqrt","mass","nv2","avg","bounce","moves","x","prev","friction","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetOverlapY = require('./GetOverlapY');\r\n\r\n/**\r\n * Separates two overlapping bodies on the Y-axis (vertically).\r\n *\r\n * Separation involves moving two overlapping bodies so they don't overlap anymore and adjusting their velocities based on their mass. This is a core part of collision detection.\r\n *\r\n * The bodies won't be separated if there is no vertical overlap between them, if they are static, or if either one uses custom logic for its separation.\r\n *\r\n * @function Phaser.Physics.Arcade.SeparateY\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.Body} body1 - The first Body to separate.\r\n * @param {Phaser.Physics.Arcade.Body} body2 - The second Body to separate.\r\n * @param {boolean} overlapOnly - If `true`, the bodies will only have their overlap data set and no separation will take place.\r\n * @param {number} bias - A value to add to the delta value during overlap checking. Used to prevent sprite tunneling.\r\n *\r\n * @return {boolean} `true` if the two bodies overlap vertically, otherwise `false`.\r\n */\r\nvar SeparateY = function (body1, body2, overlapOnly, bias)\r\n{\r\n    var overlap = GetOverlapY(body1, body2, overlapOnly, bias);\r\n\r\n    //  Can't separate two immovable bodies, or a body with its own custom separation logic\r\n    if (overlapOnly || overlap === 0 || (body1.immovable && body2.immovable) || body1.customSeparateY || body2.customSeparateY)\r\n    {\r\n        //  return true if there was some overlap, otherwise false\r\n        return (overlap !== 0) || (body1.embedded && body2.embedded);\r\n    }\r\n\r\n    //  Adjust their positions and velocities accordingly (if there was any overlap)\r\n    var v1 = body1.velocity.y;\r\n    var v2 = body2.velocity.y;\r\n\r\n    if (!body1.immovable && !body2.immovable)\r\n    {\r\n        overlap *= 0.5;\r\n\r\n        body1.y -= overlap;\r\n        body2.y += overlap;\r\n\r\n        var nv1 = Math.sqrt((v2 * v2 * body2.mass) / body1.mass) * ((v2 > 0) ? 1 : -1);\r\n        var nv2 = Math.sqrt((v1 * v1 * body1.mass) / body2.mass) * ((v1 > 0) ? 1 : -1);\r\n        var avg = (nv1 + nv2) * 0.5;\r\n\r\n        nv1 -= avg;\r\n        nv2 -= avg;\r\n\r\n        body1.velocity.y = avg + nv1 * body1.bounce.y;\r\n        body2.velocity.y = avg + nv2 * body2.bounce.y;\r\n    }\r\n    else if (!body1.immovable)\r\n    {\r\n        body1.y -= overlap;\r\n        body1.velocity.y = v2 - v1 * body1.bounce.y;\r\n\r\n        //  This is special case code that handles things like horizontal moving platforms you can ride\r\n        if (body2.moves)\r\n        {\r\n            body1.x += (body2.x - body2.prev.x) * body2.friction.x;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        body2.y += overlap;\r\n        body2.velocity.y = v1 - v2 * body2.bounce.y;\r\n\r\n        //  This is special case code that handles things like horizontal moving platforms you can ride\r\n        if (body1.moves)\r\n        {\r\n            body2.x += (body1.x - body1.prev.x) * body1.friction.x;\r\n        }\r\n    }\r\n\r\n    //  If we got this far then there WAS overlap, and separation is complete, so return true\r\n    return true;\r\n};\r\n\r\nmodule.exports = SeparateY;\r\n"]},"metadata":{},"sourceType":"script"}