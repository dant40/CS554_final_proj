{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar imageHeight = 0;\n/**\r\n * @function addFrame\r\n * @private\r\n * @since 3.0.0\r\n */\n\nvar addFrame = function (texture, sourceIndex, name, frame) {\n  //  The frame values are the exact coordinates to cut the frame out of the atlas from\n  var y = imageHeight - frame.y - frame.height;\n  texture.add(name, sourceIndex, frame.x, y, frame.width, frame.height); //  These are the original (non-trimmed) sprite values\n\n  /*\r\n  if (src.trimmed)\r\n  {\r\n      newFrame.setTrim(\r\n          src.sourceSize.w,\r\n          src.sourceSize.h,\r\n          src.spriteSourceSize.x,\r\n          src.spriteSourceSize.y,\r\n          src.spriteSourceSize.w,\r\n          src.spriteSourceSize.h\r\n      );\r\n  }\r\n  */\n};\n/**\r\n * Parses a Unity YAML File and creates Frames in the Texture.\r\n * For more details about Sprite Meta Data see https://docs.unity3d.com/ScriptReference/SpriteMetaData.html\r\n *\r\n * @function Phaser.Textures.Parsers.UnityYAML\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {object} yaml - The YAML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\n\n\nvar UnityYAML = function (texture, sourceIndex, yaml) {\n  //  Add in a __BASE entry (for the entire atlas)\n  var source = texture.source[sourceIndex];\n  texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\n  imageHeight = source.height;\n  var data = yaml.split('\\n');\n  var lineRegExp = /^[ ]*(- )*(\\w+)+[: ]+(.*)/;\n  var prevSprite = '';\n  var currentSprite = '';\n  var rect = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  }; // var pivot = { x: 0, y: 0 };\n  // var border = { x: 0, y: 0, z: 0, w: 0 };\n\n  for (var i = 0; i < data.length; i++) {\n    var results = data[i].match(lineRegExp);\n\n    if (!results) {\n      continue;\n    }\n\n    var isList = results[1] === '- ';\n    var key = results[2];\n    var value = results[3];\n\n    if (isList) {\n      if (currentSprite !== prevSprite) {\n        addFrame(texture, sourceIndex, currentSprite, rect);\n        prevSprite = currentSprite;\n      }\n\n      rect = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0\n      };\n    }\n\n    if (key === 'name') {\n      //  Start new list\n      currentSprite = value;\n      continue;\n    }\n\n    switch (key) {\n      case 'x':\n      case 'y':\n      case 'width':\n      case 'height':\n        rect[key] = parseInt(value, 10);\n        break;\n      // case 'pivot':\n      //     pivot = eval('var obj = ' + value);\n      //     break;\n      // case 'border':\n      //     border = eval('var obj = ' + value);\n      //     break;\n    }\n  }\n\n  if (currentSprite !== prevSprite) {\n    addFrame(texture, sourceIndex, currentSprite, rect);\n  }\n\n  return texture;\n};\n\nmodule.exports = UnityYAML;\n/*\r\nExample data:\r\n\r\nTextureImporter:\r\n  spritePivot: {x: .5, y: .5}\r\n  spriteBorder: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePixelsToUnits: 100\r\n  spriteSheet:\r\n    sprites:\r\n    - name: asteroids_0\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 5\r\n        y: 328\r\n        width: 65\r\n        height: 82\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n    - name: asteroids_1\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 80\r\n        y: 322\r\n        width: 53\r\n        height: 88\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePackingTag: Asteroids\r\n*/","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/textures/parsers/UnityYAML.js"],"names":["imageHeight","addFrame","texture","sourceIndex","name","frame","y","height","add","x","width","UnityYAML","yaml","source","data","split","lineRegExp","prevSprite","currentSprite","rect","i","length","results","match","isList","key","value","parseInt","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar imageHeight = 0;\r\n\r\n/**\r\n * @function addFrame\r\n * @private\r\n * @since 3.0.0\r\n */\r\nvar addFrame = function (texture, sourceIndex, name, frame)\r\n{\r\n    //  The frame values are the exact coordinates to cut the frame out of the atlas from\r\n\r\n    var y = imageHeight - frame.y - frame.height;\r\n\r\n    texture.add(name, sourceIndex, frame.x, y, frame.width, frame.height);\r\n\r\n    //  These are the original (non-trimmed) sprite values\r\n    /*\r\n    if (src.trimmed)\r\n    {\r\n        newFrame.setTrim(\r\n            src.sourceSize.w,\r\n            src.sourceSize.h,\r\n            src.spriteSourceSize.x,\r\n            src.spriteSourceSize.y,\r\n            src.spriteSourceSize.w,\r\n            src.spriteSourceSize.h\r\n        );\r\n    }\r\n    */\r\n};\r\n\r\n/**\r\n * Parses a Unity YAML File and creates Frames in the Texture.\r\n * For more details about Sprite Meta Data see https://docs.unity3d.com/ScriptReference/SpriteMetaData.html\r\n *\r\n * @function Phaser.Textures.Parsers.UnityYAML\r\n * @memberof Phaser.Textures.Parsers\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Textures.Texture} texture - The Texture to add the Frames to.\r\n * @param {integer} sourceIndex - The index of the TextureSource.\r\n * @param {object} yaml - The YAML data.\r\n *\r\n * @return {Phaser.Textures.Texture} The Texture modified by this parser.\r\n */\r\nvar UnityYAML = function (texture, sourceIndex, yaml)\r\n{\r\n    //  Add in a __BASE entry (for the entire atlas)\r\n    var source = texture.source[sourceIndex];\r\n\r\n    texture.add('__BASE', sourceIndex, 0, 0, source.width, source.height);\r\n\r\n    imageHeight = source.height;\r\n\r\n    var data = yaml.split('\\n');\r\n\r\n    var lineRegExp = /^[ ]*(- )*(\\w+)+[: ]+(.*)/;\r\n\r\n    var prevSprite = '';\r\n    var currentSprite = '';\r\n    var rect = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n    // var pivot = { x: 0, y: 0 };\r\n    // var border = { x: 0, y: 0, z: 0, w: 0 };\r\n\r\n    for (var i = 0; i < data.length; i++)\r\n    {\r\n        var results = data[i].match(lineRegExp);\r\n\r\n        if (!results)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var isList = (results[1] === '- ');\r\n        var key = results[2];\r\n        var value = results[3];\r\n\r\n        if (isList)\r\n        {\r\n            if (currentSprite !== prevSprite)\r\n            {\r\n                addFrame(texture, sourceIndex, currentSprite, rect);\r\n\r\n                prevSprite = currentSprite;\r\n            }\r\n\r\n            rect = { x: 0, y: 0, width: 0, height: 0 };\r\n        }\r\n\r\n        if (key === 'name')\r\n        {\r\n            //  Start new list\r\n            currentSprite = value;\r\n            continue;\r\n        }\r\n\r\n        switch (key)\r\n        {\r\n            case 'x':\r\n            case 'y':\r\n            case 'width':\r\n            case 'height':\r\n                rect[key] = parseInt(value, 10);\r\n                break;\r\n\r\n            // case 'pivot':\r\n            //     pivot = eval('var obj = ' + value);\r\n            //     break;\r\n\r\n            // case 'border':\r\n            //     border = eval('var obj = ' + value);\r\n            //     break;\r\n        }\r\n    }\r\n\r\n    if (currentSprite !== prevSprite)\r\n    {\r\n        addFrame(texture, sourceIndex, currentSprite, rect);\r\n    }\r\n\r\n    return texture;\r\n};\r\n\r\nmodule.exports = UnityYAML;\r\n\r\n/*\r\nExample data:\r\n\r\nTextureImporter:\r\n  spritePivot: {x: .5, y: .5}\r\n  spriteBorder: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePixelsToUnits: 100\r\n  spriteSheet:\r\n    sprites:\r\n    - name: asteroids_0\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 5\r\n        y: 328\r\n        width: 65\r\n        height: 82\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n    - name: asteroids_1\r\n      rect:\r\n        serializedVersion: 2\r\n        x: 80\r\n        y: 322\r\n        width: 53\r\n        height: 88\r\n      alignment: 0\r\n      pivot: {x: 0, y: 0}\r\n      border: {x: 0, y: 0, z: 0, w: 0}\r\n  spritePackingTag: Asteroids\r\n*/\r\n"]},"metadata":{},"sourceType":"script"}