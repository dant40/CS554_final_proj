{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CONST = require('../scale/const');\n/**\r\n * Attempts to determine the screen orientation using the Orientation API.\r\n *\r\n * @function Phaser.DOM.GetScreenOrientation\r\n * @since 3.16.0\r\n *\r\n * @param {number} width - The width of the viewport.\r\n * @param {number} height - The height of the viewport.\r\n *\r\n * @return {string} The orientation.\r\n */\n\n\nvar GetScreenOrientation = function (width, height) {\n  var screen = window.screen;\n  var orientation = screen ? screen.orientation || screen.mozOrientation || screen.msOrientation : false;\n\n  if (orientation && typeof orientation.type === 'string') {\n    //  Screen Orientation API specification\n    return orientation.type;\n  } else if (typeof orientation === 'string') {\n    //  moz / ms-orientation are strings\n    return orientation;\n  }\n\n  if (screen) {\n    return screen.height > screen.width ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\n  } else if (typeof window.orientation === 'number') {\n    //  This may change by device based on \"natural\" orientation.\n    return window.orientation === 0 || window.orientation === 180 ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\n  } else if (window.matchMedia) {\n    if (window.matchMedia('(orientation: portrait)').matches) {\n      return CONST.ORIENTATION.PORTRAIT;\n    } else if (window.matchMedia('(orientation: landscape)').matches) {\n      return CONST.ORIENTATION.LANDSCAPE;\n    }\n  }\n\n  return height > width ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\n};\n\nmodule.exports = GetScreenOrientation;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/dom/GetScreenOrientation.js"],"names":["CONST","require","GetScreenOrientation","width","height","screen","window","orientation","mozOrientation","msOrientation","type","ORIENTATION","PORTRAIT","LANDSCAPE","matchMedia","matches","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;AAEA;;;;;;;;;;;;;AAWA,IAAIC,oBAAoB,GAAG,UAAUC,KAAV,EAAiBC,MAAjB,EAC3B;AACI,MAAIC,MAAM,GAAGC,MAAM,CAACD,MAApB;AACA,MAAIE,WAAW,GAAIF,MAAD,GAAWA,MAAM,CAACE,WAAP,IAAsBF,MAAM,CAACG,cAA7B,IAA+CH,MAAM,CAACI,aAAjE,GAAiF,KAAnG;;AAEA,MAAIF,WAAW,IAAI,OAAOA,WAAW,CAACG,IAAnB,KAA4B,QAA/C,EACA;AACI;AACA,WAAOH,WAAW,CAACG,IAAnB;AACH,GAJD,MAKK,IAAI,OAAOH,WAAP,KAAuB,QAA3B,EACL;AACI;AACA,WAAOA,WAAP;AACH;;AAED,MAAIF,MAAJ,EACA;AACI,WAAQA,MAAM,CAACD,MAAP,GAAgBC,MAAM,CAACF,KAAxB,GAAiCH,KAAK,CAACW,WAAN,CAAkBC,QAAnD,GAA8DZ,KAAK,CAACW,WAAN,CAAkBE,SAAvF;AACH,GAHD,MAIK,IAAI,OAAOP,MAAM,CAACC,WAAd,KAA8B,QAAlC,EACL;AACI;AACA,WAAQD,MAAM,CAACC,WAAP,KAAuB,CAAvB,IAA4BD,MAAM,CAACC,WAAP,KAAuB,GAApD,GAA2DP,KAAK,CAACW,WAAN,CAAkBC,QAA7E,GAAwFZ,KAAK,CAACW,WAAN,CAAkBE,SAAjH;AACH,GAJI,MAKA,IAAIP,MAAM,CAACQ,UAAX,EACL;AACI,QAAIR,MAAM,CAACQ,UAAP,CAAkB,yBAAlB,EAA6CC,OAAjD,EACA;AACI,aAAOf,KAAK,CAACW,WAAN,CAAkBC,QAAzB;AACH,KAHD,MAIK,IAAIN,MAAM,CAACQ,UAAP,CAAkB,0BAAlB,EAA8CC,OAAlD,EACL;AACI,aAAOf,KAAK,CAACW,WAAN,CAAkBE,SAAzB;AACH;AACJ;;AAED,SAAQT,MAAM,GAAGD,KAAV,GAAmBH,KAAK,CAACW,WAAN,CAAkBC,QAArC,GAAgDZ,KAAK,CAACW,WAAN,CAAkBE,SAAzE;AACH,CAtCD;;AAwCAG,MAAM,CAACC,OAAP,GAAiBf,oBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CONST = require('../scale/const');\r\n\r\n/**\r\n * Attempts to determine the screen orientation using the Orientation API.\r\n *\r\n * @function Phaser.DOM.GetScreenOrientation\r\n * @since 3.16.0\r\n *\r\n * @param {number} width - The width of the viewport.\r\n * @param {number} height - The height of the viewport.\r\n *\r\n * @return {string} The orientation.\r\n */\r\nvar GetScreenOrientation = function (width, height)\r\n{\r\n    var screen = window.screen;\r\n    var orientation = (screen) ? screen.orientation || screen.mozOrientation || screen.msOrientation : false;\r\n\r\n    if (orientation && typeof orientation.type === 'string')\r\n    {\r\n        //  Screen Orientation API specification\r\n        return orientation.type;\r\n    }\r\n    else if (typeof orientation === 'string')\r\n    {\r\n        //  moz / ms-orientation are strings\r\n        return orientation;\r\n    }\r\n\r\n    if (screen)\r\n    {\r\n        return (screen.height > screen.width) ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\r\n    }\r\n    else if (typeof window.orientation === 'number')\r\n    {\r\n        //  This may change by device based on \"natural\" orientation.\r\n        return (window.orientation === 0 || window.orientation === 180) ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\r\n    }\r\n    else if (window.matchMedia)\r\n    {\r\n        if (window.matchMedia('(orientation: portrait)').matches)\r\n        {\r\n            return CONST.ORIENTATION.PORTRAIT;\r\n        }\r\n        else if (window.matchMedia('(orientation: landscape)').matches)\r\n        {\r\n            return CONST.ORIENTATION.LANDSCAPE;\r\n        }\r\n    }\r\n    \r\n    return (height > width) ? CONST.ORIENTATION.PORTRAIT : CONST.ORIENTATION.LANDSCAPE;\r\n};\r\n\r\nmodule.exports = GetScreenOrientation;\r\n"]},"metadata":{},"sourceType":"script"}