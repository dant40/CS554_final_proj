{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar SpliceOne = require('./SpliceOne');\n/**\r\n * Removes the given item, or array of items, from the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.Remove\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {*|Array.<*>} item - The item, or array of items, to be removed from the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {*|Array.<*>} The item, or array of items, that were successfully removed from the array.\r\n */\n\n\nvar Remove = function (array, item, callback, context) {\n  if (context === undefined) {\n    context = array;\n  }\n\n  var index; //  Fast path to avoid array mutation and iteration\n\n  if (!Array.isArray(item)) {\n    index = array.indexOf(item);\n\n    if (index !== -1) {\n      SpliceOne(array, index);\n\n      if (callback) {\n        callback.call(context, item);\n      }\n\n      return item;\n    } else {\n      return null;\n    }\n  } //  If we got this far, we have an array of items to remove\n\n\n  var itemLength = item.length - 1;\n\n  while (itemLength >= 0) {\n    var entry = item[itemLength];\n    index = array.indexOf(entry);\n\n    if (index !== -1) {\n      SpliceOne(array, index);\n\n      if (callback) {\n        callback.call(context, entry);\n      }\n    } else {\n      //  Item wasn't found in the array, so remove it from our return results\n      item.pop();\n    }\n\n    itemLength--;\n  }\n\n  return item;\n};\n\nmodule.exports = Remove;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/array/Remove.js"],"names":["SpliceOne","require","Remove","array","item","callback","context","undefined","index","Array","isArray","indexOf","call","itemLength","length","entry","pop","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIC,MAAM,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,QAAvB,EAAiCC,OAAjC,EACb;AACI,MAAIA,OAAO,KAAKC,SAAhB,EAA2B;AAAED,IAAAA,OAAO,GAAGH,KAAV;AAAkB;;AAE/C,MAAIK,KAAJ,CAHJ,CAKI;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,IAAd,CAAL,EACA;AACII,IAAAA,KAAK,GAAGL,KAAK,CAACQ,OAAN,CAAcP,IAAd,CAAR;;AAEA,QAAII,KAAK,KAAK,CAAC,CAAf,EACA;AACIR,MAAAA,SAAS,CAACG,KAAD,EAAQK,KAAR,CAAT;;AAEA,UAAIH,QAAJ,EACA;AACIA,QAAAA,QAAQ,CAACO,IAAT,CAAcN,OAAd,EAAuBF,IAAvB;AACH;;AAED,aAAOA,IAAP;AACH,KAVD,MAYA;AACI,aAAO,IAAP;AACH;AACJ,GAzBL,CA2BI;;;AAEA,MAAIS,UAAU,GAAGT,IAAI,CAACU,MAAL,GAAc,CAA/B;;AAEA,SAAOD,UAAU,IAAI,CAArB,EACA;AACI,QAAIE,KAAK,GAAGX,IAAI,CAACS,UAAD,CAAhB;AAEAL,IAAAA,KAAK,GAAGL,KAAK,CAACQ,OAAN,CAAcI,KAAd,CAAR;;AAEA,QAAIP,KAAK,KAAK,CAAC,CAAf,EACA;AACIR,MAAAA,SAAS,CAACG,KAAD,EAAQK,KAAR,CAAT;;AAEA,UAAIH,QAAJ,EACA;AACIA,QAAAA,QAAQ,CAACO,IAAT,CAAcN,OAAd,EAAuBS,KAAvB;AACH;AACJ,KARD,MAUA;AACI;AACAX,MAAAA,IAAI,CAACY,GAAL;AACH;;AAEDH,IAAAA,UAAU;AACb;;AAED,SAAOT,IAAP;AACH,CAzDD;;AA2DAa,MAAM,CAACC,OAAP,GAAiBhB,MAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar SpliceOne = require('./SpliceOne');\r\n\r\n/**\r\n * Removes the given item, or array of items, from the array.\r\n * \r\n * The array is modified in-place.\r\n * \r\n * You can optionally specify a callback to be invoked for each item successfully removed from the array.\r\n *\r\n * @function Phaser.Utils.Array.Remove\r\n * @since 3.4.0\r\n *\r\n * @param {array} array - The array to be modified.\r\n * @param {*|Array.<*>} item - The item, or array of items, to be removed from the array.\r\n * @param {function} [callback] - A callback to be invoked for each item successfully removed from the array.\r\n * @param {object} [context] - The context in which the callback is invoked.\r\n *\r\n * @return {*|Array.<*>} The item, or array of items, that were successfully removed from the array.\r\n */\r\nvar Remove = function (array, item, callback, context)\r\n{\r\n    if (context === undefined) { context = array; }\r\n\r\n    var index;\r\n\r\n    //  Fast path to avoid array mutation and iteration\r\n    if (!Array.isArray(item))\r\n    {\r\n        index = array.indexOf(item);\r\n\r\n        if (index !== -1)\r\n        {\r\n            SpliceOne(array, index);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, item);\r\n            }\r\n\r\n            return item;\r\n        }\r\n        else\r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //  If we got this far, we have an array of items to remove\r\n\r\n    var itemLength = item.length - 1;\r\n\r\n    while (itemLength >= 0)\r\n    {\r\n        var entry = item[itemLength];\r\n\r\n        index = array.indexOf(entry);\r\n\r\n        if (index !== -1)\r\n        {\r\n            SpliceOne(array, index);\r\n\r\n            if (callback)\r\n            {\r\n                callback.call(context, entry);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            //  Item wasn't found in the array, so remove it from our return results\r\n            item.pop();\r\n        }\r\n\r\n        itemLength--;\r\n    }\r\n\r\n    return item;\r\n};\r\n\r\nmodule.exports = Remove;\r\n"]},"metadata":{},"sourceType":"script"}