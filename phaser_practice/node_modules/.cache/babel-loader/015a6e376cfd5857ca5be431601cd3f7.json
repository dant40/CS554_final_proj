{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n/**\r\n * @classdesc\r\n * A seeded Random Data Generator.\r\n * \r\n * Access via `Phaser.Math.RND` which is an instance of this class pre-defined\r\n * by Phaser. Or, create your own instance to use as you require.\r\n * \r\n * The `Math.RND` generator is seeded by the Game Config property value `seed`.\r\n * If no such config property exists, a random number is used.\r\n * \r\n * If you create your own instance of this class you should provide a seed for it.\r\n * If no seed is given it will use a 'random' one based on Date.now.\r\n *\r\n * @class RandomDataGenerator\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|string[])} [seeds] - The seeds to use for the random number generator.\r\n */\n\n\nvar RandomDataGenerator = new Class({\n  initialize: function RandomDataGenerator(seeds) {\n    if (seeds === undefined) {\n      seeds = [(Date.now() * Math.random()).toString()];\n    }\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#c\r\n     * @type {number}\r\n     * @default 1\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n\n    this.c = 1;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s0\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s0 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s1\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s1 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#s2\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.s2 = 0;\n    /**\r\n     * Internal var.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#n\r\n     * @type {number}\r\n     * @default 0\r\n     * @private\r\n     * @since 3.2.0\r\n     */\n\n    this.n = 0;\n    /**\r\n     * Signs to choose from.\r\n     *\r\n     * @name Phaser.Math.RandomDataGenerator#signs\r\n     * @type {number[]}\r\n     * @since 3.0.0\r\n     */\n\n    this.signs = [-1, 1];\n\n    if (seeds) {\n      this.init(seeds);\n    }\n  },\n\n  /**\r\n   * Private random helper.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#rnd\r\n   * @since 3.0.0\r\n   * @private\r\n   *\r\n   * @return {number} A random number.\r\n   */\n  rnd: function () {\n    var t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\n\n    this.c = t | 0;\n    this.s0 = this.s1;\n    this.s1 = this.s2;\n    this.s2 = t - this.c;\n    return this.s2;\n  },\n\n  /**\r\n   * Internal method that creates a seed hash.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#hash\r\n   * @since 3.0.0\r\n   * @private\r\n   *\r\n   * @param {string} data - The value to hash.\r\n   *\r\n   * @return {number} The hashed value.\r\n   */\n  hash: function (data) {\n    var h;\n    var n = this.n;\n    data = data.toString();\n\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n\n    this.n = n;\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  },\n\n  /**\r\n   * Initialize the state of the random data generator.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#init\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|string[])} seeds - The seeds to initialize the random data generator with.\r\n   */\n  init: function (seeds) {\n    if (typeof seeds === 'string') {\n      this.state(seeds);\n    } else {\n      this.sow(seeds);\n    }\n  },\n\n  /**\r\n   * Reset the seed of the random data generator.\r\n   *\r\n   * _Note_: the seed array is only processed up to the first `undefined` (or `null`) value, should such be present.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#sow\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string[]} seeds - The array of seeds: the `toString()` of each value is used.\r\n   */\n  sow: function (seeds) {\n    // Always reset to default seed\n    this.n = 0xefc8249d;\n    this.s0 = this.hash(' ');\n    this.s1 = this.hash(' ');\n    this.s2 = this.hash(' ');\n    this.c = 1;\n\n    if (!seeds) {\n      return;\n    } // Apply any seeds\n\n\n    for (var i = 0; i < seeds.length && seeds[i] != null; i++) {\n      var seed = seeds[i];\n      this.s0 -= this.hash(seed);\n      this.s0 += ~~(this.s0 < 0);\n      this.s1 -= this.hash(seed);\n      this.s1 += ~~(this.s1 < 0);\n      this.s2 -= this.hash(seed);\n      this.s2 += ~~(this.s2 < 0);\n    }\n  },\n\n  /**\r\n   * Returns a random integer between 0 and 2^32.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#integer\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random integer between 0 and 2^32.\r\n   */\n  integer: function () {\n    // 2^32\n    return this.rnd() * 0x100000000;\n  },\n\n  /**\r\n   * Returns a random real number between 0 and 1.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#frac\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between 0 and 1.\r\n   */\n  frac: function () {\n    // 2^-53\n    return this.rnd() + (this.rnd() * 0x200000 | 0) * 1.1102230246251565e-16;\n  },\n\n  /**\r\n   * Returns a random real number between 0 and 2^32.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#real\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between 0 and 2^32.\r\n   */\n  real: function () {\n    return this.integer() + this.frac();\n  },\n\n  /**\r\n   * Returns a random integer between and including min and max.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#integerInRange\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  integerInRange: function (min, max) {\n    return Math.floor(this.realInRange(0, max - min + 1) + min);\n  },\n\n  /**\r\n   * Returns a random integer between and including min and max.\r\n   * This method is an alias for RandomDataGenerator.integerInRange.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#between\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  between: function (min, max) {\n    return Math.floor(this.realInRange(0, max - min + 1) + min);\n  },\n\n  /**\r\n   * Returns a random real number between min and max.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#realInRange\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random number between min and max.\r\n   */\n  realInRange: function (min, max) {\n    return this.frac() * (max - min) + min;\n  },\n\n  /**\r\n   * Returns a random real number between -1 and 1.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#normal\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random real number between -1 and 1.\r\n   */\n  normal: function () {\n    return 1 - 2 * this.frac();\n  },\n\n  /**\r\n   * Returns a valid RFC4122 version4 ID hex string from https://gist.github.com/1308368\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#uuid\r\n   * @since 3.0.0\r\n   *\r\n   * @return {string} A valid RFC4122 version4 ID hex string\r\n   */\n  uuid: function () {\n    var a = '';\n    var b = '';\n\n    for (b = a = ''; a++ < 36; b += ~a % 5 | a * 3 & 4 ? (a ^ 15 ? 8 ^ this.frac() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-') {// eslint-disable-next-line no-empty\n    }\n\n    return b;\n  },\n\n  /**\r\n   * Returns a random element from within the given array.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#pick\r\n   * @since 3.0.0\r\n   * \r\n   * @generic T\r\n   * @genericUse {T[]} - [array]\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {T[]} array - The array to pick a random element from.\r\n   *\r\n   * @return {T} A random member of the array.\r\n   */\n  pick: function (array) {\n    return array[this.integerInRange(0, array.length - 1)];\n  },\n\n  /**\r\n   * Returns a sign to be used with multiplication operator.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#sign\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} -1 or +1.\r\n   */\n  sign: function () {\n    return this.pick(this.signs);\n  },\n\n  /**\r\n   * Returns a random element from within the given array, favoring the earlier entries.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#weightedPick\r\n   * @since 3.0.0\r\n   *\r\n   * @generic T\r\n   * @genericUse {T[]} - [array]\r\n   * @genericUse {T} - [$return]\r\n   *\r\n   * @param {T[]} array - The array to pick a random element from.\r\n   *\r\n   * @return {T} A random member of the array.\r\n   */\n  weightedPick: function (array) {\n    return array[~~(Math.pow(this.frac(), 2) * (array.length - 1) + 0.5)];\n  },\n\n  /**\r\n   * Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#timestamp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} min - The minimum value in the range.\r\n   * @param {number} max - The maximum value in the range.\r\n   *\r\n   * @return {number} A random timestamp between min and max.\r\n   */\n  timestamp: function (min, max) {\n    return this.realInRange(min || 946684800000, max || 1577862000000);\n  },\n\n  /**\r\n   * Returns a random angle between -180 and 180.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#angle\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random number between -180 and 180.\r\n   */\n  angle: function () {\n    return this.integerInRange(-180, 180);\n  },\n\n  /**\r\n   * Returns a random rotation in radians, between -3.141 and 3.141\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#rotation\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} A random number between -3.141 and 3.141\r\n   */\n  rotation: function () {\n    return this.realInRange(-3.1415926, 3.1415926);\n  },\n\n  /**\r\n   * Gets or Sets the state of the generator. This allows you to retain the values\r\n   * that the generator is using between games, i.e. in a game save file.\r\n   *\r\n   * To seed this generator with a previously saved state you can pass it as the\r\n   * `seed` value in your game config, or call this method directly after Phaser has booted.\r\n   *\r\n   * Call this method with no parameters to return the current state.\r\n   *\r\n   * If providing a state it should match the same format that this method\r\n   * returns, which is a string with a header `!rnd` followed by the `c`,\r\n   * `s0`, `s1` and `s2` values respectively, each comma-delimited.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#state\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} [state] - Generator state to be set.\r\n   *\r\n   * @return {string} The current state of the generator.\r\n   */\n  state: function (state) {\n    if (typeof state === 'string' && state.match(/^!rnd/)) {\n      state = state.split(',');\n      this.c = parseFloat(state[1]);\n      this.s0 = parseFloat(state[2]);\n      this.s1 = parseFloat(state[3]);\n      this.s2 = parseFloat(state[4]);\n    }\n\n    return ['!rnd', this.c, this.s0, this.s1, this.s2].join(',');\n  },\n\n  /**\r\n   * Shuffles the given array, using the current seed.\r\n   *\r\n   * @method Phaser.Math.RandomDataGenerator#shuffle\r\n   * @since 3.7.0\r\n   *\r\n   * @generic T\r\n   * @genericUse {T[]} - [array,$return]\r\n   *\r\n   * @param {T[]} [array] - The array to be shuffled.\r\n   *\r\n   * @return {T[]} The shuffled array.\r\n   */\n  shuffle: function (array) {\n    var len = array.length - 1;\n\n    for (var i = len; i > 0; i--) {\n      var randomIndex = Math.floor(this.frac() * (i + 1));\n      var itemAtIndex = array[randomIndex];\n      array[randomIndex] = array[i];\n      array[i] = itemAtIndex;\n    }\n\n    return array;\n  }\n});\nmodule.exports = RandomDataGenerator;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/math/random-data-generator/RandomDataGenerator.js"],"names":["Class","require","RandomDataGenerator","initialize","seeds","undefined","Date","now","Math","random","toString","c","s0","s1","s2","n","signs","init","rnd","t","hash","data","h","i","length","charCodeAt","state","sow","seed","integer","frac","real","integerInRange","min","max","floor","realInRange","between","normal","uuid","a","b","pick","array","sign","weightedPick","pow","timestamp","angle","rotation","match","split","parseFloat","join","shuffle","len","randomIndex","itemAtIndex","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\n\r\n/**\r\n * @classdesc\r\n * A seeded Random Data Generator.\r\n * \r\n * Access via `Phaser.Math.RND` which is an instance of this class pre-defined\r\n * by Phaser. Or, create your own instance to use as you require.\r\n * \r\n * The `Math.RND` generator is seeded by the Game Config property value `seed`.\r\n * If no such config property exists, a random number is used.\r\n * \r\n * If you create your own instance of this class you should provide a seed for it.\r\n * If no seed is given it will use a 'random' one based on Date.now.\r\n *\r\n * @class RandomDataGenerator\r\n * @memberof Phaser.Math\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {(string|string[])} [seeds] - The seeds to use for the random number generator.\r\n */\r\nvar RandomDataGenerator = new Class({\r\n\r\n    initialize:\r\n\r\n    function RandomDataGenerator (seeds)\r\n    {\r\n        if (seeds === undefined) { seeds = [ (Date.now() * Math.random()).toString() ]; }\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#c\r\n         * @type {number}\r\n         * @default 1\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.c = 1;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s0\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s0 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s1\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s1 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#s2\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.s2 = 0;\r\n\r\n        /**\r\n         * Internal var.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#n\r\n         * @type {number}\r\n         * @default 0\r\n         * @private\r\n         * @since 3.2.0\r\n         */\r\n        this.n = 0;\r\n\r\n        /**\r\n         * Signs to choose from.\r\n         *\r\n         * @name Phaser.Math.RandomDataGenerator#signs\r\n         * @type {number[]}\r\n         * @since 3.0.0\r\n         */\r\n        this.signs = [ -1, 1 ];\r\n\r\n        if (seeds)\r\n        {\r\n            this.init(seeds);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Private random helper.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#rnd\r\n     * @since 3.0.0\r\n     * @private\r\n     *\r\n     * @return {number} A random number.\r\n     */\r\n    rnd: function ()\r\n    {\r\n        var t = 2091639 * this.s0 + this.c * 2.3283064365386963e-10; // 2^-32\r\n\r\n        this.c = t | 0;\r\n        this.s0 = this.s1;\r\n        this.s1 = this.s2;\r\n        this.s2 = t - this.c;\r\n\r\n        return this.s2;\r\n    },\r\n\r\n    /**\r\n     * Internal method that creates a seed hash.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#hash\r\n     * @since 3.0.0\r\n     * @private\r\n     *\r\n     * @param {string} data - The value to hash.\r\n     *\r\n     * @return {number} The hashed value.\r\n     */\r\n    hash: function (data)\r\n    {\r\n        var h;\r\n        var n = this.n;\r\n\r\n        data = data.toString();\r\n\r\n        for (var i = 0; i < data.length; i++)\r\n        {\r\n            n += data.charCodeAt(i);\r\n            h = 0.02519603282416938 * n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            h *= n;\r\n            n = h >>> 0;\r\n            h -= n;\r\n            n += h * 0x100000000;// 2^32\r\n        }\r\n\r\n        this.n = n;\r\n\r\n        return (n >>> 0) * 2.3283064365386963e-10;// 2^-32\r\n    },\r\n\r\n    /**\r\n     * Initialize the state of the random data generator.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#init\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|string[])} seeds - The seeds to initialize the random data generator with.\r\n     */\r\n    init: function (seeds)\r\n    {\r\n        if (typeof seeds === 'string')\r\n        {\r\n            this.state(seeds);\r\n        }\r\n        else\r\n        {\r\n            this.sow(seeds);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Reset the seed of the random data generator.\r\n     *\r\n     * _Note_: the seed array is only processed up to the first `undefined` (or `null`) value, should such be present.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#sow\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string[]} seeds - The array of seeds: the `toString()` of each value is used.\r\n     */\r\n    sow: function (seeds)\r\n    {\r\n        // Always reset to default seed\r\n        this.n = 0xefc8249d;\r\n        this.s0 = this.hash(' ');\r\n        this.s1 = this.hash(' ');\r\n        this.s2 = this.hash(' ');\r\n        this.c = 1;\r\n\r\n        if (!seeds)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // Apply any seeds\r\n        for (var i = 0; i < seeds.length && (seeds[i] != null); i++)\r\n        {\r\n            var seed = seeds[i];\r\n\r\n            this.s0 -= this.hash(seed);\r\n            this.s0 += ~~(this.s0 < 0);\r\n            this.s1 -= this.hash(seed);\r\n            this.s1 += ~~(this.s1 < 0);\r\n            this.s2 -= this.hash(seed);\r\n            this.s2 += ~~(this.s2 < 0);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between 0 and 2^32.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#integer\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random integer between 0 and 2^32.\r\n     */\r\n    integer: function ()\r\n    {\r\n        // 2^32\r\n        return this.rnd() * 0x100000000;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between 0 and 1.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#frac\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between 0 and 1.\r\n     */\r\n    frac: function ()\r\n    {\r\n        // 2^-53\r\n        return this.rnd() + (this.rnd() * 0x200000 | 0) * 1.1102230246251565e-16;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between 0 and 2^32.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#real\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between 0 and 2^32.\r\n     */\r\n    real: function ()\r\n    {\r\n        return this.integer() + this.frac();\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between and including min and max.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#integerInRange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    integerInRange: function (min, max)\r\n    {\r\n        return Math.floor(this.realInRange(0, max - min + 1) + min);\r\n    },\r\n\r\n    /**\r\n     * Returns a random integer between and including min and max.\r\n     * This method is an alias for RandomDataGenerator.integerInRange.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#between\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    between: function (min, max)\r\n    {\r\n        return Math.floor(this.realInRange(0, max - min + 1) + min);\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between min and max.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#realInRange\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random number between min and max.\r\n     */\r\n    realInRange: function (min, max)\r\n    {\r\n        return this.frac() * (max - min) + min;\r\n    },\r\n\r\n    /**\r\n     * Returns a random real number between -1 and 1.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#normal\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random real number between -1 and 1.\r\n     */\r\n    normal: function ()\r\n    {\r\n        return 1 - (2 * this.frac());\r\n    },\r\n\r\n    /**\r\n     * Returns a valid RFC4122 version4 ID hex string from https://gist.github.com/1308368\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#uuid\r\n     * @since 3.0.0\r\n     *\r\n     * @return {string} A valid RFC4122 version4 ID hex string\r\n     */\r\n    uuid: function ()\r\n    {\r\n        var a = '';\r\n        var b = '';\r\n\r\n        for (b = a = ''; a++ < 36; b += ~a % 5 | a * 3 & 4 ? (a ^ 15 ? 8 ^ this.frac() * (a ^ 20 ? 16 : 4) : 4).toString(16) : '-')\r\n        {\r\n            // eslint-disable-next-line no-empty\r\n        }\r\n\r\n        return b;\r\n    },\r\n\r\n    /**\r\n     * Returns a random element from within the given array.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#pick\r\n     * @since 3.0.0\r\n     * \r\n     * @generic T\r\n     * @genericUse {T[]} - [array]\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {T[]} array - The array to pick a random element from.\r\n     *\r\n     * @return {T} A random member of the array.\r\n     */\r\n    pick: function (array)\r\n    {\r\n        return array[this.integerInRange(0, array.length - 1)];\r\n    },\r\n\r\n    /**\r\n     * Returns a sign to be used with multiplication operator.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#sign\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} -1 or +1.\r\n     */\r\n    sign: function ()\r\n    {\r\n        return this.pick(this.signs);\r\n    },\r\n\r\n    /**\r\n     * Returns a random element from within the given array, favoring the earlier entries.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#weightedPick\r\n     * @since 3.0.0\r\n     *\r\n     * @generic T\r\n     * @genericUse {T[]} - [array]\r\n     * @genericUse {T} - [$return]\r\n     *\r\n     * @param {T[]} array - The array to pick a random element from.\r\n     *\r\n     * @return {T} A random member of the array.\r\n     */\r\n    weightedPick: function (array)\r\n    {\r\n        return array[~~(Math.pow(this.frac(), 2) * (array.length - 1) + 0.5)];\r\n    },\r\n\r\n    /**\r\n     * Returns a random timestamp between min and max, or between the beginning of 2000 and the end of 2020 if min and max aren't specified.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#timestamp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} min - The minimum value in the range.\r\n     * @param {number} max - The maximum value in the range.\r\n     *\r\n     * @return {number} A random timestamp between min and max.\r\n     */\r\n    timestamp: function (min, max)\r\n    {\r\n        return this.realInRange(min || 946684800000, max || 1577862000000);\r\n    },\r\n\r\n    /**\r\n     * Returns a random angle between -180 and 180.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#angle\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random number between -180 and 180.\r\n     */\r\n    angle: function ()\r\n    {\r\n        return this.integerInRange(-180, 180);\r\n    },\r\n\r\n    /**\r\n     * Returns a random rotation in radians, between -3.141 and 3.141\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#rotation\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} A random number between -3.141 and 3.141\r\n     */\r\n    rotation: function ()\r\n    {\r\n        return this.realInRange(-3.1415926, 3.1415926);\r\n    },\r\n\r\n    /**\r\n     * Gets or Sets the state of the generator. This allows you to retain the values\r\n     * that the generator is using between games, i.e. in a game save file.\r\n     *\r\n     * To seed this generator with a previously saved state you can pass it as the\r\n     * `seed` value in your game config, or call this method directly after Phaser has booted.\r\n     *\r\n     * Call this method with no parameters to return the current state.\r\n     *\r\n     * If providing a state it should match the same format that this method\r\n     * returns, which is a string with a header `!rnd` followed by the `c`,\r\n     * `s0`, `s1` and `s2` values respectively, each comma-delimited.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#state\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} [state] - Generator state to be set.\r\n     *\r\n     * @return {string} The current state of the generator.\r\n     */\r\n    state: function (state)\r\n    {\r\n        if (typeof state === 'string' && state.match(/^!rnd/))\r\n        {\r\n            state = state.split(',');\r\n\r\n            this.c = parseFloat(state[1]);\r\n            this.s0 = parseFloat(state[2]);\r\n            this.s1 = parseFloat(state[3]);\r\n            this.s2 = parseFloat(state[4]);\r\n        }\r\n\r\n        return [ '!rnd', this.c, this.s0, this.s1, this.s2 ].join(',');\r\n    },\r\n\r\n    /**\r\n     * Shuffles the given array, using the current seed.\r\n     *\r\n     * @method Phaser.Math.RandomDataGenerator#shuffle\r\n     * @since 3.7.0\r\n     *\r\n     * @generic T\r\n     * @genericUse {T[]} - [array,$return]\r\n     *\r\n     * @param {T[]} [array] - The array to be shuffled.\r\n     *\r\n     * @return {T[]} The shuffled array.\r\n     */\r\n    shuffle: function (array)\r\n    {\r\n        var len = array.length - 1;\r\n\r\n        for (var i = len; i > 0; i--)\r\n        {\r\n            var randomIndex = Math.floor(this.frac() * (i + 1));\r\n            var itemAtIndex = array[randomIndex];\r\n\r\n            array[randomIndex] = array[i];\r\n            array[i] = itemAtIndex;\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = RandomDataGenerator;\r\n"]},"metadata":{},"sourceType":"script"}