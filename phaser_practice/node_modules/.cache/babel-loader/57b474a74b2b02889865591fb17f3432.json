{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Get the shortest distance from a Line to the given Point.\r\n *\r\n * @function Phaser.Geom.Line.GetShortestDistance\r\n * @since 3.16.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to get the distance from.\r\n * @param {(Phaser.Geom.Point|object)} point - The point to get the shortest distance to.\r\n *\r\n * @return {number} The shortest distance from the line to the point.\r\n */\nvar GetShortestDistance = function (line, point) {\n  var x1 = line.x1;\n  var y1 = line.y1;\n  var x2 = line.x2;\n  var y2 = line.y2;\n  var L2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n  if (L2 === 0) {\n    return false;\n  }\n\n  var s = ((y1 - point.y) * (x2 - x1) - (x1 - point.x) * (y2 - y1)) / L2;\n  return Math.abs(s) * Math.sqrt(L2);\n};\n\nmodule.exports = GetShortestDistance;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/line/GetShortestDistance.js"],"names":["GetShortestDistance","line","point","x1","y1","x2","y2","L2","s","y","x","Math","abs","sqrt","module","exports"],"mappings":"AAAA;;;;;;;AAOA;;;;;;;;;;;;;AAaA,IAAIA,mBAAmB,GAAG,UAAUC,IAAV,EAAgBC,KAAhB,EAC1B;AACI,MAAIC,EAAE,GAAGF,IAAI,CAACE,EAAd;AACA,MAAIC,EAAE,GAAGH,IAAI,CAACG,EAAd;AAEA,MAAIC,EAAE,GAAGJ,IAAI,CAACI,EAAd;AACA,MAAIC,EAAE,GAAGL,IAAI,CAACK,EAAd;AAEA,MAAIC,EAAE,GAAK,CAACF,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAAD,GAA2B,CAACG,EAAE,GAAGF,EAAN,KAAaE,EAAE,GAAGF,EAAlB,CAArC;;AAEA,MAAIG,EAAE,KAAK,CAAX,EACA;AACI,WAAO,KAAP;AACH;;AAED,MAAIC,CAAC,GAAG,CAAE,CAACJ,EAAE,GAAGF,KAAK,CAACO,CAAZ,KAAkBJ,EAAE,GAAGF,EAAvB,CAAD,GAAgC,CAACA,EAAE,GAAGD,KAAK,CAACQ,CAAZ,KAAkBJ,EAAE,GAAGF,EAAvB,CAAjC,IAAgEG,EAAxE;AAEA,SAAOI,IAAI,CAACC,GAAL,CAASJ,CAAT,IAAcG,IAAI,CAACE,IAAL,CAAUN,EAAV,CAArB;AACH,CAlBD;;AAoBAO,MAAM,CAACC,OAAP,GAAiBf,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Florian Mertens\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Get the shortest distance from a Line to the given Point.\r\n *\r\n * @function Phaser.Geom.Line.GetShortestDistance\r\n * @since 3.16.0\r\n *\r\n * @generic {Phaser.Geom.Point} O - [out,$return]\r\n *\r\n * @param {Phaser.Geom.Line} line - The line to get the distance from.\r\n * @param {(Phaser.Geom.Point|object)} point - The point to get the shortest distance to.\r\n *\r\n * @return {number} The shortest distance from the line to the point.\r\n */\r\nvar GetShortestDistance = function (line, point)\r\n{\r\n    var x1 = line.x1;\r\n    var y1 = line.y1;\r\n\r\n    var x2 = line.x2;\r\n    var y2 = line.y2;\r\n\r\n    var L2 = (((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));\r\n\r\n    if (L2 === 0)\r\n    {\r\n        return false;\r\n    }\r\n\r\n    var s = (((y1 - point.y) * (x2 - x1)) - ((x1 - point.x) * (y2 - y1))) / L2;\r\n\r\n    return Math.abs(s) * Math.sqrt(L2);\r\n};\r\n\r\nmodule.exports = GetShortestDistance;\r\n"]},"metadata":{},"sourceType":"script"}