{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar ImageFile = require('./ImageFile.js');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n\nvar JSONFile = require('./JSONFile.js');\n\nvar MultiFile = require('../MultiFile.js');\n/**\r\n * @classdesc\r\n * A single Multi Texture Atlas File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#multiatlas method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#multiatlas.\r\n *\r\n * @class MultiAtlasFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig)} key - The key of the file. Must be unique within both the Loader and the Texture Manager. Or a config object.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from.\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\n\n\nvar MultiAtlasFile = new Class({\n  Extends: MultiFile,\n  initialize: function MultiAtlasFile(loader, key, atlasURL, path, baseURL, atlasXhrSettings, textureXhrSettings) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n\n      if (GetFastValue(config, 'url', false)) {\n        atlasURL = GetFastValue(config, 'url');\n      } else {\n        atlasURL = GetFastValue(config, 'atlasURL');\n      }\n\n      atlasXhrSettings = GetFastValue(config, 'xhrSettings');\n      path = GetFastValue(config, 'path');\n      baseURL = GetFastValue(config, 'baseURL');\n      textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\n    }\n\n    var data = new JSONFile(loader, key, atlasURL, atlasXhrSettings);\n    MultiFile.call(this, loader, 'multiatlas', key, [data]);\n    this.config.path = path;\n    this.config.baseURL = baseURL;\n    this.config.textureXhrSettings = textureXhrSettings;\n  },\n\n  /**\r\n   * Called by each File when it finishes loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.MultiAtlasFile#onFileComplete\r\n   * @since 3.7.0\r\n   *\r\n   * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n   */\n  onFileComplete: function (file) {\n    var index = this.files.indexOf(file);\n\n    if (index !== -1) {\n      this.pending--;\n\n      if (file.type === 'json' && file.data.hasOwnProperty('textures')) {\n        //  Inspect the data for the files to now load\n        var textures = file.data.textures;\n        var config = this.config;\n        var loader = this.loader;\n        var currentBaseURL = loader.baseURL;\n        var currentPath = loader.path;\n        var currentPrefix = loader.prefix;\n        var baseURL = GetFastValue(config, 'baseURL', this.baseURL);\n        var path = GetFastValue(config, 'path', this.path);\n        var prefix = GetFastValue(config, 'prefix', this.prefix);\n        var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\n        loader.setBaseURL(baseURL);\n        loader.setPath(path);\n        loader.setPrefix(prefix);\n\n        for (var i = 0; i < textures.length; i++) {\n          //  \"image\": \"texture-packer-multi-atlas-0.png\",\n          var textureURL = textures[i].image;\n          var key = 'MA' + this.multiKeyIndex + '_' + textureURL;\n          var image = new ImageFile(loader, key, textureURL, textureXhrSettings);\n          this.addToMultiFile(image);\n          loader.addFile(image); //  \"normalMap\": \"texture-packer-multi-atlas-0_n.png\",\n\n          if (textures[i].normalMap) {\n            var normalMap = new ImageFile(loader, key, textures[i].normalMap, textureXhrSettings);\n            normalMap.type = 'normalMap';\n            image.setLink(normalMap);\n            this.addToMultiFile(normalMap);\n            loader.addFile(normalMap);\n          }\n        } //  Reset the loader settings\n\n\n        loader.setBaseURL(currentBaseURL);\n        loader.setPath(currentPath);\n        loader.setPrefix(currentPrefix);\n      }\n    }\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.MultiAtlasFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function () {\n    if (this.isReadyToProcess()) {\n      var fileJSON = this.files[0];\n      var data = [];\n      var images = [];\n      var normalMaps = [];\n\n      for (var i = 1; i < this.files.length; i++) {\n        var file = this.files[i];\n\n        if (file.type === 'normalMap') {\n          continue;\n        }\n\n        var pos = file.key.indexOf('_');\n        var key = file.key.substr(pos + 1);\n        var image = file.data; //  Now we need to find out which json entry this mapped to\n\n        for (var t = 0; t < fileJSON.data.textures.length; t++) {\n          var item = fileJSON.data.textures[t];\n\n          if (item.image === key) {\n            images.push(image);\n            data.push(item);\n\n            if (file.linkFile) {\n              normalMaps.push(file.linkFile.data);\n            }\n\n            break;\n          }\n        }\n      }\n\n      if (normalMaps.length === 0) {\n        normalMaps = undefined;\n      }\n\n      this.loader.textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);\n      this.complete = true;\n\n      for (i = 0; i < this.files.length; i++) {\n        this.files[i].pendingDestroy();\n      }\n    }\n  }\n});\n/**\r\n * Adds a Multi Texture Atlas, or array of multi atlases, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.multiatlas('level1', 'images/Level1.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the atlas data to be provided in a JSON file as exported from the application Texture Packer,\r\n * version 4.6.3 or above, where you have made sure to use the Phaser 3 Export option.\r\n *\r\n * The way it works internally is that you provide a URL to the JSON file. Phaser then loads this JSON, parses it and\r\n * extracts which texture files it also needs to load to complete the process. If the JSON also defines normal maps,\r\n * Phaser will load those as well.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas({\r\n *     key: 'level1',\r\n *     atlasURL: 'images/Level1.json'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas('level1', 'images/Level1.json');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'level1', 'background');\r\n * ```\r\n *\r\n * To get a list of all available frames within an atlas please consult your Texture Atlas software.\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Multi Atlas File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#multiatlas\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.7.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('multiatlas', function (key, atlasURL, path, baseURL, atlasXhrSettings) {\n  var multifile; //  Supports an Object file definition in the key argument\n  //  Or an array of objects in the key argument\n  //  Or a single entry where all arguments have been defined\n\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      multifile = new MultiAtlasFile(this, key[i]);\n      this.addFile(multifile.files);\n    }\n  } else {\n    multifile = new MultiAtlasFile(this, key, atlasURL, path, baseURL, atlasXhrSettings);\n    this.addFile(multifile.files);\n  }\n\n  return this;\n});\nmodule.exports = MultiAtlasFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/MultiAtlasFile.js"],"names":["Class","require","FileTypesManager","GetFastValue","ImageFile","IsPlainObject","JSONFile","MultiFile","MultiAtlasFile","Extends","initialize","loader","key","atlasURL","path","baseURL","atlasXhrSettings","textureXhrSettings","config","data","call","onFileComplete","file","index","files","indexOf","pending","type","hasOwnProperty","textures","currentBaseURL","currentPath","currentPrefix","prefix","setBaseURL","setPath","setPrefix","i","length","textureURL","image","multiKeyIndex","addToMultiFile","addFile","normalMap","setLink","addToCache","isReadyToProcess","fileJSON","images","normalMaps","pos","substr","t","item","push","linkFile","undefined","textureManager","addAtlasJSONArray","complete","pendingDestroy","register","multifile","Array","isArray","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar ImageFile = require('./ImageFile.js');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\nvar JSONFile = require('./JSONFile.js');\r\nvar MultiFile = require('../MultiFile.js');\r\n\r\n/**\r\n * @classdesc\r\n * A single Multi Texture Atlas File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#multiatlas method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#multiatlas.\r\n *\r\n * @class MultiAtlasFile\r\n * @extends Phaser.Loader.MultiFile\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.7.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig)} key - The key of the file. Must be unique within both the Loader and the Texture Manager. Or a config object.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the multi atlas json file from.\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [atlasXhrSettings] - Extra XHR Settings specifically for the atlas json file.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [textureXhrSettings] - Extra XHR Settings specifically for the texture files.\r\n */\r\nvar MultiAtlasFile = new Class({\r\n\r\n    Extends: MultiFile,\r\n\r\n    initialize:\r\n\r\n    function MultiAtlasFile (loader, key, atlasURL, path, baseURL, atlasXhrSettings, textureXhrSettings)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n\r\n            if (GetFastValue(config, 'url', false))\r\n            {\r\n                atlasURL = GetFastValue(config, 'url');\r\n            }\r\n            else\r\n            {\r\n                atlasURL = GetFastValue(config, 'atlasURL');\r\n            }\r\n\r\n            atlasXhrSettings = GetFastValue(config, 'xhrSettings');\r\n            path = GetFastValue(config, 'path');\r\n            baseURL = GetFastValue(config, 'baseURL');\r\n            textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\r\n        }\r\n\r\n        var data = new JSONFile(loader, key, atlasURL, atlasXhrSettings);\r\n\r\n        MultiFile.call(this, loader, 'multiatlas', key, [ data ]);\r\n\r\n        this.config.path = path;\r\n        this.config.baseURL = baseURL;\r\n        this.config.textureXhrSettings = textureXhrSettings;\r\n    },\r\n\r\n    /**\r\n     * Called by each File when it finishes loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.MultiAtlasFile#onFileComplete\r\n     * @since 3.7.0\r\n     *\r\n     * @param {Phaser.Loader.File} file - The File that has completed processing.\r\n     */\r\n    onFileComplete: function (file)\r\n    {\r\n        var index = this.files.indexOf(file);\r\n\r\n        if (index !== -1)\r\n        {\r\n            this.pending--;\r\n\r\n            if (file.type === 'json' && file.data.hasOwnProperty('textures'))\r\n            {\r\n                //  Inspect the data for the files to now load\r\n                var textures = file.data.textures;\r\n\r\n                var config = this.config;\r\n                var loader = this.loader;\r\n\r\n                var currentBaseURL = loader.baseURL;\r\n                var currentPath = loader.path;\r\n                var currentPrefix = loader.prefix;\r\n\r\n                var baseURL = GetFastValue(config, 'baseURL', this.baseURL);\r\n                var path = GetFastValue(config, 'path', this.path);\r\n                var prefix = GetFastValue(config, 'prefix', this.prefix);\r\n                var textureXhrSettings = GetFastValue(config, 'textureXhrSettings');\r\n\r\n                loader.setBaseURL(baseURL);\r\n                loader.setPath(path);\r\n                loader.setPrefix(prefix);\r\n\r\n                for (var i = 0; i < textures.length; i++)\r\n                {\r\n                    //  \"image\": \"texture-packer-multi-atlas-0.png\",\r\n                    var textureURL = textures[i].image;\r\n\r\n                    var key = 'MA' + this.multiKeyIndex + '_' + textureURL;\r\n\r\n                    var image = new ImageFile(loader, key, textureURL, textureXhrSettings);\r\n\r\n                    this.addToMultiFile(image);\r\n\r\n                    loader.addFile(image);\r\n\r\n                    //  \"normalMap\": \"texture-packer-multi-atlas-0_n.png\",\r\n                    if (textures[i].normalMap)\r\n                    {\r\n                        var normalMap = new ImageFile(loader, key, textures[i].normalMap, textureXhrSettings);\r\n\r\n                        normalMap.type = 'normalMap';\r\n\r\n                        image.setLink(normalMap);\r\n\r\n                        this.addToMultiFile(normalMap);\r\n\r\n                        loader.addFile(normalMap);\r\n                    }\r\n                }\r\n\r\n                //  Reset the loader settings\r\n                loader.setBaseURL(currentBaseURL);\r\n                loader.setPath(currentPath);\r\n                loader.setPrefix(currentPrefix);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.MultiAtlasFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        if (this.isReadyToProcess())\r\n        {\r\n            var fileJSON = this.files[0];\r\n\r\n            var data = [];\r\n            var images = [];\r\n            var normalMaps = [];\r\n\r\n            for (var i = 1; i < this.files.length; i++)\r\n            {\r\n                var file = this.files[i];\r\n\r\n                if (file.type === 'normalMap')\r\n                {\r\n                    continue;\r\n                }\r\n\r\n                var pos = file.key.indexOf('_');\r\n                var key = file.key.substr(pos + 1);\r\n\r\n                var image = file.data;\r\n\r\n                //  Now we need to find out which json entry this mapped to\r\n                for (var t = 0; t < fileJSON.data.textures.length; t++)\r\n                {\r\n                    var item = fileJSON.data.textures[t];\r\n\r\n                    if (item.image === key)\r\n                    {\r\n                        images.push(image);\r\n                        \r\n                        data.push(item);\r\n\r\n                        if (file.linkFile)\r\n                        {\r\n                            normalMaps.push(file.linkFile.data);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (normalMaps.length === 0)\r\n            {\r\n                normalMaps = undefined;\r\n            }\r\n\r\n            this.loader.textureManager.addAtlasJSONArray(this.key, images, data, normalMaps);\r\n\r\n            this.complete = true;\r\n\r\n            for (i = 0; i < this.files.length; i++)\r\n            {\r\n                this.files[i].pendingDestroy();\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds a Multi Texture Atlas, or array of multi atlases, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.multiatlas('level1', 'images/Level1.json');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * If you call this from outside of `preload` then you are responsible for starting the Loader afterwards and monitoring\r\n * its events to know when it's safe to use the asset. Please see the Phaser.Loader.LoaderPlugin class for more details.\r\n *\r\n * Phaser expects the atlas data to be provided in a JSON file as exported from the application Texture Packer,\r\n * version 4.6.3 or above, where you have made sure to use the Phaser 3 Export option.\r\n *\r\n * The way it works internally is that you provide a URL to the JSON file. Phaser then loads this JSON, parses it and\r\n * extracts which texture files it also needs to load to complete the process. If the JSON also defines normal maps,\r\n * Phaser will load those as well.\r\n * \r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas({\r\n *     key: 'level1',\r\n *     atlasURL: 'images/Level1.json'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig` for more details.\r\n *\r\n * Instead of passing a URL for the atlas JSON data you can also pass in a well formed JSON object instead.\r\n *\r\n * Once the atlas has finished loading you can use frames from it as textures for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.multiatlas('level1', 'images/Level1.json');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'level1', 'background');\r\n * ```\r\n *\r\n * To get a list of all available frames within an atlas please consult your Texture Atlas software.\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Multi Atlas File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#multiatlas\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.7.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig|Phaser.Types.Loader.FileTypes.MultiAtlasFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [atlasURL] - The absolute or relative URL to load the texture atlas json data file from. If undefined or `null` it will be set to `<key>.json`, i.e. if `key` was \"alien\" then the URL will be \"alien.json\".\r\n * @param {string} [path] - Optional path to use when loading the textures defined in the atlas data.\r\n * @param {string} [baseURL] - Optional Base URL to use when loading the textures defined in the atlas data.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [atlasXhrSettings] - An XHR Settings configuration object for the atlas json file. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('multiatlas', function (key, atlasURL, path, baseURL, atlasXhrSettings)\r\n{\r\n    var multifile;\r\n\r\n    //  Supports an Object file definition in the key argument\r\n    //  Or an array of objects in the key argument\r\n    //  Or a single entry where all arguments have been defined\r\n\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            multifile = new MultiAtlasFile(this, key[i]);\r\n\r\n            this.addFile(multifile.files);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        multifile = new MultiAtlasFile(this, key, atlasURL, path, baseURL, atlasXhrSettings);\r\n\r\n        this.addFile(multifile.files);\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = MultiAtlasFile;\r\n"]},"metadata":{},"sourceType":"script"}