{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Returns an object containing dimensions of the Text object.\r\n *\r\n * @function Phaser.GameObjects.Text.GetTextSize\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object to calculate the size from.\r\n * @param {Phaser.Types.GameObjects.Text.TextMetrics} size - The Text metrics to use when calculating the size.\r\n * @param {array} lines - The lines of text to calculate the size from.\r\n *\r\n * @return {object} An object containing dimensions of the Text object.\r\n */\nvar GetTextSize = function (text, size, lines) {\n  var canvas = text.canvas;\n  var context = text.context;\n  var style = text.style;\n  var lineWidths = [];\n  var maxLineWidth = 0;\n  var drawnLines = lines.length;\n\n  if (style.maxLines > 0 && style.maxLines < lines.length) {\n    drawnLines = style.maxLines;\n  }\n\n  style.syncFont(canvas, context); //  Text Width\n\n  for (var i = 0; i < drawnLines; i++) {\n    var lineWidth = style.strokeThickness;\n    lineWidth += context.measureText(lines[i]).width; // Adjust for wrapped text\n\n    if (style.wordWrap) {\n      lineWidth -= context.measureText(' ').width;\n    }\n\n    lineWidths[i] = Math.ceil(lineWidth);\n    maxLineWidth = Math.max(maxLineWidth, lineWidths[i]);\n  } //  Text Height\n\n\n  var lineHeight = size.fontSize + style.strokeThickness;\n  var height = lineHeight * drawnLines;\n  var lineSpacing = text.lineSpacing; //  Adjust for line spacing\n\n  if (drawnLines > 1) {\n    height += lineSpacing * (drawnLines - 1);\n  }\n\n  return {\n    width: maxLineWidth,\n    height: height,\n    lines: drawnLines,\n    lineWidths: lineWidths,\n    lineSpacing: lineSpacing,\n    lineHeight: lineHeight\n  };\n};\n\nmodule.exports = GetTextSize;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/text/GetTextSize.js"],"names":["GetTextSize","text","size","lines","canvas","context","style","lineWidths","maxLineWidth","drawnLines","length","maxLines","syncFont","i","lineWidth","strokeThickness","measureText","width","wordWrap","Math","ceil","max","lineHeight","fontSize","height","lineSpacing","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,WAAW,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,KAAtB,EAClB;AACI,MAAIC,MAAM,GAAGH,IAAI,CAACG,MAAlB;AACA,MAAIC,OAAO,GAAGJ,IAAI,CAACI,OAAnB;AACA,MAAIC,KAAK,GAAGL,IAAI,CAACK,KAAjB;AAEA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,UAAU,GAAGN,KAAK,CAACO,MAAvB;;AAEA,MAAIJ,KAAK,CAACK,QAAN,GAAiB,CAAjB,IAAsBL,KAAK,CAACK,QAAN,GAAiBR,KAAK,CAACO,MAAjD,EACA;AACID,IAAAA,UAAU,GAAGH,KAAK,CAACK,QAAnB;AACH;;AAEDL,EAAAA,KAAK,CAACM,QAAN,CAAeR,MAAf,EAAuBC,OAAvB,EAdJ,CAgBI;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EACA;AACI,QAAIC,SAAS,GAAGR,KAAK,CAACS,eAAtB;AAEAD,IAAAA,SAAS,IAAIT,OAAO,CAACW,WAAR,CAAoBb,KAAK,CAACU,CAAD,CAAzB,EAA8BI,KAA3C,CAHJ,CAKI;;AACA,QAAIX,KAAK,CAACY,QAAV,EACA;AACIJ,MAAAA,SAAS,IAAIT,OAAO,CAACW,WAAR,CAAoB,GAApB,EAAyBC,KAAtC;AACH;;AAEDV,IAAAA,UAAU,CAACM,CAAD,CAAV,GAAgBM,IAAI,CAACC,IAAL,CAAUN,SAAV,CAAhB;AACAN,IAAAA,YAAY,GAAGW,IAAI,CAACE,GAAL,CAASb,YAAT,EAAuBD,UAAU,CAACM,CAAD,CAAjC,CAAf;AACH,GAhCL,CAkCI;;;AAEA,MAAIS,UAAU,GAAGpB,IAAI,CAACqB,QAAL,GAAgBjB,KAAK,CAACS,eAAvC;AACA,MAAIS,MAAM,GAAGF,UAAU,GAAGb,UAA1B;AACA,MAAIgB,WAAW,GAAGxB,IAAI,CAACwB,WAAvB,CAtCJ,CAwCI;;AACA,MAAIhB,UAAU,GAAG,CAAjB,EACA;AACIe,IAAAA,MAAM,IAAIC,WAAW,IAAIhB,UAAU,GAAG,CAAjB,CAArB;AACH;;AAED,SAAO;AACHQ,IAAAA,KAAK,EAAET,YADJ;AAEHgB,IAAAA,MAAM,EAAEA,MAFL;AAGHrB,IAAAA,KAAK,EAAEM,UAHJ;AAIHF,IAAAA,UAAU,EAAEA,UAJT;AAKHkB,IAAAA,WAAW,EAAEA,WALV;AAMHH,IAAAA,UAAU,EAAEA;AANT,GAAP;AAQH,CAvDD;;AAyDAI,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns an object containing dimensions of the Text object.\r\n *\r\n * @function Phaser.GameObjects.Text.GetTextSize\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.GameObjects.Text} text - The Text object to calculate the size from.\r\n * @param {Phaser.Types.GameObjects.Text.TextMetrics} size - The Text metrics to use when calculating the size.\r\n * @param {array} lines - The lines of text to calculate the size from.\r\n *\r\n * @return {object} An object containing dimensions of the Text object.\r\n */\r\nvar GetTextSize = function (text, size, lines)\r\n{\r\n    var canvas = text.canvas;\r\n    var context = text.context;\r\n    var style = text.style;\r\n\r\n    var lineWidths = [];\r\n    var maxLineWidth = 0;\r\n    var drawnLines = lines.length;\r\n\r\n    if (style.maxLines > 0 && style.maxLines < lines.length)\r\n    {\r\n        drawnLines = style.maxLines;\r\n    }\r\n\r\n    style.syncFont(canvas, context);\r\n\r\n    //  Text Width\r\n\r\n    for (var i = 0; i < drawnLines; i++)\r\n    {\r\n        var lineWidth = style.strokeThickness;\r\n\r\n        lineWidth += context.measureText(lines[i]).width;\r\n\r\n        // Adjust for wrapped text\r\n        if (style.wordWrap)\r\n        {\r\n            lineWidth -= context.measureText(' ').width;\r\n        }\r\n\r\n        lineWidths[i] = Math.ceil(lineWidth);\r\n        maxLineWidth = Math.max(maxLineWidth, lineWidths[i]);\r\n    }\r\n\r\n    //  Text Height\r\n\r\n    var lineHeight = size.fontSize + style.strokeThickness;\r\n    var height = lineHeight * drawnLines;\r\n    var lineSpacing = text.lineSpacing;\r\n\r\n    //  Adjust for line spacing\r\n    if (drawnLines > 1)\r\n    {\r\n        height += lineSpacing * (drawnLines - 1);\r\n    }\r\n\r\n    return {\r\n        width: maxLineWidth,\r\n        height: height,\r\n        lines: drawnLines,\r\n        lineWidths: lineWidths,\r\n        lineSpacing: lineSpacing,\r\n        lineHeight: lineHeight\r\n    };\r\n};\r\n\r\nmodule.exports = GetTextSize;\r\n"]},"metadata":{},"sourceType":"script"}