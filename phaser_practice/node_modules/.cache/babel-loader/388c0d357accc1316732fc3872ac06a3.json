{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Returns a TweenDataConfig object that describes the tween data for a unique property of a unique target.\r\n * A single Tween consists of multiple TweenDatas, depending on how many properties are being changed by the Tween.\r\n *\r\n * This is an internal function used by the TweenBuilder and should not be accessed directly, instead,\r\n * Tweens should be created using the GameObjectFactory or GameObjectCreator.\r\n *\r\n * @function Phaser.Tweens.TweenData\r\n * @since 3.0.0\r\n *\r\n * @param {any} target - The target to tween.\r\n * @param {integer} index - The target index within the Tween targets array.\r\n * @param {string} key - The property of the target to tween.\r\n * @param {function} getEnd - What the property will be at the END of the Tween.\r\n * @param {function} getStart - What the property will be at the START of the Tween.\r\n * @param {?function} getActive - If not null, is invoked _immediately_ as soon as the TweenData is running, and is set on the target property.\r\n * @param {function} ease - The ease function this tween uses.\r\n * @param {number} delay - Time in ms/frames before tween will start.\r\n * @param {number} duration - Duration of the tween in ms/frames.\r\n * @param {boolean} yoyo - Determines whether the tween should return back to its start value after hold has expired.\r\n * @param {number} hold - Time in ms/frames the tween will pause before repeating or returning to its starting value if yoyo is set to true.\r\n * @param {number} repeat - Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n * @param {number} repeatDelay - Time in ms/frames before the repeat will start.\r\n * @param {boolean} flipX - Should toggleFlipX be called when yoyo or repeat happens?\r\n * @param {boolean} flipY - Should toggleFlipY be called when yoyo or repeat happens?\r\n *\r\n * @return {Phaser.Types.Tweens.TweenDataConfig} The config object describing this TweenData.\r\n */\nvar TweenData = function (target, index, key, getEnd, getStart, getActive, ease, delay, duration, yoyo, hold, repeat, repeatDelay, flipX, flipY) {\n  return {\n    //  The target to tween\n    target: target,\n    //  The index of the target within the tween targets array\n    index: index,\n    //  The property of the target to tween\n    key: key,\n    //  What to set the property to the moment the TweenData is invoked.\n    getActiveValue: getActive,\n    //  The returned value sets what the property will be at the END of the Tween.\n    getEndValue: getEnd,\n    //  The returned value sets what the property will be at the START of the Tween.\n    getStartValue: getStart,\n    //  The ease function this tween uses.\n    ease: ease,\n    //  Duration of the tween in ms/frames, excludes time for yoyo or repeats.\n    duration: 0,\n    //  The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\n    totalDuration: 0,\n    //  Time in ms/frames before tween will start.\n    delay: 0,\n    //  Cause the tween to return back to its start value after hold has expired.\n    yoyo: yoyo,\n    //  Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\n    hold: 0,\n    //  Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\n    repeat: 0,\n    //  Time in ms/frames before the repeat will start.\n    repeatDelay: 0,\n    //  Automatically call toggleFlipX when the TweenData yoyos or repeats\n    flipX: flipX,\n    //  Automatically call toggleFlipY when the TweenData yoyos or repeats\n    flipY: flipY,\n    //  Between 0 and 1 showing completion of this TweenData.\n    progress: 0,\n    //  Delta counter.\n    elapsed: 0,\n    //  How many repeats are left to run?\n    repeatCounter: 0,\n    //  Ease Value Data:\n    start: 0,\n    previous: 0,\n    current: 0,\n    end: 0,\n    //  Time Durations\n    t1: 0,\n    t2: 0,\n    //  LoadValue generation functions\n    gen: {\n      delay: delay,\n      duration: duration,\n      hold: hold,\n      repeat: repeat,\n      repeatDelay: repeatDelay\n    },\n    //  TWEEN_CONST.CREATED\n    state: 0\n  };\n};\n\nmodule.exports = TweenData;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tweens/tween/TweenData.js"],"names":["TweenData","target","index","key","getEnd","getStart","getActive","ease","delay","duration","yoyo","hold","repeat","repeatDelay","flipX","flipY","getActiveValue","getEndValue","getStartValue","totalDuration","progress","elapsed","repeatCounter","start","previous","current","end","t1","t2","gen","state","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,IAAIA,SAAS,GAAG,UAAUC,MAAV,EAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,MAA9B,EAAsCC,QAAtC,EAAgDC,SAAhD,EAA2DC,IAA3D,EAAiEC,KAAjE,EAAwEC,QAAxE,EAAkFC,IAAlF,EAAwFC,IAAxF,EAA8FC,MAA9F,EAAsGC,WAAtG,EAAmHC,KAAnH,EAA0HC,KAA1H,EAChB;AACI,SAAO;AAEH;AACAd,IAAAA,MAAM,EAAEA,MAHL;AAKH;AACAC,IAAAA,KAAK,EAAEA,KANJ;AAQH;AACAC,IAAAA,GAAG,EAAEA,GATF;AAWH;AACAa,IAAAA,cAAc,EAAEV,SAZb;AAcH;AACAW,IAAAA,WAAW,EAAEb,MAfV;AAiBH;AACAc,IAAAA,aAAa,EAAEb,QAlBZ;AAoBH;AACAE,IAAAA,IAAI,EAAEA,IArBH;AAuBH;AACAE,IAAAA,QAAQ,EAAE,CAxBP;AA0BH;AACAU,IAAAA,aAAa,EAAE,CA3BZ;AA6BH;AACAX,IAAAA,KAAK,EAAE,CA9BJ;AAgCH;AACAE,IAAAA,IAAI,EAAEA,IAjCH;AAmCH;AACAC,IAAAA,IAAI,EAAE,CApCH;AAsCH;AACAC,IAAAA,MAAM,EAAE,CAvCL;AAyCH;AACAC,IAAAA,WAAW,EAAE,CA1CV;AA4CH;AACAC,IAAAA,KAAK,EAAEA,KA7CJ;AA+CH;AACAC,IAAAA,KAAK,EAAEA,KAhDJ;AAkDH;AACAK,IAAAA,QAAQ,EAAE,CAnDP;AAqDH;AACAC,IAAAA,OAAO,EAAE,CAtDN;AAwDH;AACAC,IAAAA,aAAa,EAAE,CAzDZ;AA2DH;AAEAC,IAAAA,KAAK,EAAE,CA7DJ;AA8DHC,IAAAA,QAAQ,EAAE,CA9DP;AA+DHC,IAAAA,OAAO,EAAE,CA/DN;AAgEHC,IAAAA,GAAG,EAAE,CAhEF;AAkEH;AACAC,IAAAA,EAAE,EAAE,CAnED;AAoEHC,IAAAA,EAAE,EAAE,CApED;AAsEH;AACAC,IAAAA,GAAG,EAAE;AACDrB,MAAAA,KAAK,EAAEA,KADN;AAEDC,MAAAA,QAAQ,EAAEA,QAFT;AAGDE,MAAAA,IAAI,EAAEA,IAHL;AAIDC,MAAAA,MAAM,EAAEA,MAJP;AAKDC,MAAAA,WAAW,EAAEA;AALZ,KAvEF;AA+EH;AACAiB,IAAAA,KAAK,EAAE;AAhFJ,GAAP;AAkFH,CApFD;;AAsFAC,MAAM,CAACC,OAAP,GAAiBhC,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Returns a TweenDataConfig object that describes the tween data for a unique property of a unique target.\r\n * A single Tween consists of multiple TweenDatas, depending on how many properties are being changed by the Tween.\r\n *\r\n * This is an internal function used by the TweenBuilder and should not be accessed directly, instead,\r\n * Tweens should be created using the GameObjectFactory or GameObjectCreator.\r\n *\r\n * @function Phaser.Tweens.TweenData\r\n * @since 3.0.0\r\n *\r\n * @param {any} target - The target to tween.\r\n * @param {integer} index - The target index within the Tween targets array.\r\n * @param {string} key - The property of the target to tween.\r\n * @param {function} getEnd - What the property will be at the END of the Tween.\r\n * @param {function} getStart - What the property will be at the START of the Tween.\r\n * @param {?function} getActive - If not null, is invoked _immediately_ as soon as the TweenData is running, and is set on the target property.\r\n * @param {function} ease - The ease function this tween uses.\r\n * @param {number} delay - Time in ms/frames before tween will start.\r\n * @param {number} duration - Duration of the tween in ms/frames.\r\n * @param {boolean} yoyo - Determines whether the tween should return back to its start value after hold has expired.\r\n * @param {number} hold - Time in ms/frames the tween will pause before repeating or returning to its starting value if yoyo is set to true.\r\n * @param {number} repeat - Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n * @param {number} repeatDelay - Time in ms/frames before the repeat will start.\r\n * @param {boolean} flipX - Should toggleFlipX be called when yoyo or repeat happens?\r\n * @param {boolean} flipY - Should toggleFlipY be called when yoyo or repeat happens?\r\n *\r\n * @return {Phaser.Types.Tweens.TweenDataConfig} The config object describing this TweenData.\r\n */\r\nvar TweenData = function (target, index, key, getEnd, getStart, getActive, ease, delay, duration, yoyo, hold, repeat, repeatDelay, flipX, flipY)\r\n{\r\n    return {\r\n\r\n        //  The target to tween\r\n        target: target,\r\n\r\n        //  The index of the target within the tween targets array\r\n        index: index,\r\n\r\n        //  The property of the target to tween\r\n        key: key,\r\n\r\n        //  What to set the property to the moment the TweenData is invoked.\r\n        getActiveValue: getActive,\r\n\r\n        //  The returned value sets what the property will be at the END of the Tween.\r\n        getEndValue: getEnd,\r\n\r\n        //  The returned value sets what the property will be at the START of the Tween.\r\n        getStartValue: getStart,\r\n\r\n        //  The ease function this tween uses.\r\n        ease: ease,\r\n\r\n        //  Duration of the tween in ms/frames, excludes time for yoyo or repeats.\r\n        duration: 0,\r\n\r\n        //  The total calculated duration of this TweenData (based on duration, repeat, delay and yoyo)\r\n        totalDuration: 0,\r\n\r\n        //  Time in ms/frames before tween will start.\r\n        delay: 0,\r\n\r\n        //  Cause the tween to return back to its start value after hold has expired.\r\n        yoyo: yoyo,\r\n\r\n        //  Time in ms/frames the tween will pause before running the yoyo or starting a repeat.\r\n        hold: 0,\r\n\r\n        //  Number of times to repeat the tween. The tween will always run once regardless, so a repeat value of '1' will play the tween twice.\r\n        repeat: 0,\r\n\r\n        //  Time in ms/frames before the repeat will start.\r\n        repeatDelay: 0,\r\n\r\n        //  Automatically call toggleFlipX when the TweenData yoyos or repeats\r\n        flipX: flipX,\r\n\r\n        //  Automatically call toggleFlipY when the TweenData yoyos or repeats\r\n        flipY: flipY,\r\n\r\n        //  Between 0 and 1 showing completion of this TweenData.\r\n        progress: 0,\r\n\r\n        //  Delta counter.\r\n        elapsed: 0,\r\n\r\n        //  How many repeats are left to run?\r\n        repeatCounter: 0,\r\n\r\n        //  Ease Value Data:\r\n\r\n        start: 0,\r\n        previous: 0,\r\n        current: 0,\r\n        end: 0,\r\n\r\n        //  Time Durations\r\n        t1: 0,\r\n        t2: 0,\r\n\r\n        //  LoadValue generation functions\r\n        gen: {\r\n            delay: delay,\r\n            duration: duration,\r\n            hold: hold,\r\n            repeat: repeat,\r\n            repeatDelay: repeatDelay\r\n        },\r\n\r\n        //  TWEEN_CONST.CREATED\r\n        state: 0\r\n    };\r\n};\r\n\r\nmodule.exports = TweenData;\r\n"]},"metadata":{},"sourceType":"script"}