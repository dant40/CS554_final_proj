{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar GetFastValue = require('../../../utils/object/GetFastValue');\n\nvar CreateGroupLayer = require('./CreateGroupLayer');\n/**\r\n * Parses a Tiled JSON object into an array of objects with details about the image layers.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseImageLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n *\r\n * @return {array} Array of objects that include critical info about the map's image layers\r\n */\n\n\nvar ParseImageLayers = function (json) {\n  var images = []; // State inherited from a parent group\n\n  var groupStack = [];\n  var curGroupState = CreateGroupLayer(json);\n\n  while (curGroupState.i < curGroupState.layers.length || groupStack.length > 0) {\n    if (curGroupState.i >= curGroupState.layers.length) {\n      // Ensure recursion stack is not empty first\n      if (groupStack.length < 1) {\n        console.warn('TilemapParser.parseTiledJSON - Invalid layer group hierarchy');\n        break;\n      } // Return to previous recursive state\n\n\n      curGroupState = groupStack.pop();\n      continue;\n    } // Get current layer and advance iterator\n\n\n    var curi = curGroupState.layers[curGroupState.i];\n    curGroupState.i++;\n\n    if (curi.type !== 'imagelayer') {\n      if (curi.type === 'group') {\n        // Compute next state inherited from group\n        var nextGroupState = CreateGroupLayer(json, curi, curGroupState); // Preserve current state before recursing\n\n        groupStack.push(curGroupState);\n        curGroupState = nextGroupState;\n      } // Skip this layer OR 'recurse' (iterative style) into the group\n\n\n      continue;\n    }\n\n    var layerOffsetX = GetFastValue(curi, 'offsetx', 0) + GetFastValue(curi, 'startx', 0);\n    var layerOffsetY = GetFastValue(curi, 'offsety', 0) + GetFastValue(curi, 'starty', 0);\n    images.push({\n      name: curGroupState.name + curi.name,\n      image: curi.image,\n      x: curGroupState.x + layerOffsetX + curi.x,\n      y: curGroupState.y + layerOffsetY + curi.y,\n      alpha: curGroupState.opacity * curi.opacity,\n      visible: curGroupState.visible && curi.visible,\n      properties: GetFastValue(curi, 'properties', {})\n    });\n  }\n\n  return images;\n};\n\nmodule.exports = ParseImageLayers;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/ParseImageLayers.js"],"names":["GetFastValue","require","CreateGroupLayer","ParseImageLayers","json","images","groupStack","curGroupState","i","layers","length","console","warn","pop","curi","type","nextGroupState","push","layerOffsetX","layerOffsetY","name","image","x","y","alpha","opacity","visible","properties","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,YAAY,GAAGC,OAAO,CAAC,oCAAD,CAA1B;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,oBAAD,CAA9B;AAEA;;;;;;;;;;;;AAUA,IAAIE,gBAAgB,GAAG,UAAUC,IAAV,EACvB;AACI,MAAIC,MAAM,GAAG,EAAb,CADJ,CAGI;;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAGL,gBAAgB,CAACE,IAAD,CAApC;;AAEA,SAAOG,aAAa,CAACC,CAAd,GAAkBD,aAAa,CAACE,MAAd,CAAqBC,MAAvC,IAAiDJ,UAAU,CAACI,MAAX,GAAoB,CAA5E,EACA;AACI,QAAIH,aAAa,CAACC,CAAd,IAAmBD,aAAa,CAACE,MAAd,CAAqBC,MAA5C,EACA;AACI;AACA,UAAIJ,UAAU,CAACI,MAAX,GAAoB,CAAxB,EACA;AACIC,QAAAA,OAAO,CAACC,IAAR,CACI,8DADJ;AAGA;AACH,OARL,CAUI;;;AACAL,MAAAA,aAAa,GAAGD,UAAU,CAACO,GAAX,EAAhB;AACA;AACH,KAfL,CAiBI;;;AACA,QAAIC,IAAI,GAAGP,aAAa,CAACE,MAAd,CAAqBF,aAAa,CAACC,CAAnC,CAAX;AACAD,IAAAA,aAAa,CAACC,CAAd;;AAEA,QAAIM,IAAI,CAACC,IAAL,KAAc,YAAlB,EACA;AACI,UAAID,IAAI,CAACC,IAAL,KAAc,OAAlB,EACA;AACI;AACA,YAAIC,cAAc,GAAGd,gBAAgB,CAACE,IAAD,EAAOU,IAAP,EAAaP,aAAb,CAArC,CAFJ,CAII;;AACAD,QAAAA,UAAU,CAACW,IAAX,CAAgBV,aAAhB;AACAA,QAAAA,aAAa,GAAGS,cAAhB;AACH,OATL,CAWI;;;AACA;AACH;;AAED,QAAIE,YAAY,GAAGlB,YAAY,CAACc,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAAZ,GAAmCd,YAAY,CAACc,IAAD,EAAO,QAAP,EAAiB,CAAjB,CAAlE;AACA,QAAIK,YAAY,GAAGnB,YAAY,CAACc,IAAD,EAAO,SAAP,EAAkB,CAAlB,CAAZ,GAAmCd,YAAY,CAACc,IAAD,EAAO,QAAP,EAAiB,CAAjB,CAAlE;AACAT,IAAAA,MAAM,CAACY,IAAP,CAAY;AACRG,MAAAA,IAAI,EAAGb,aAAa,CAACa,IAAd,GAAqBN,IAAI,CAACM,IADzB;AAERC,MAAAA,KAAK,EAAEP,IAAI,CAACO,KAFJ;AAGRC,MAAAA,CAAC,EAAGf,aAAa,CAACe,CAAd,GAAkBJ,YAAlB,GAAiCJ,IAAI,CAACQ,CAHlC;AAIRC,MAAAA,CAAC,EAAGhB,aAAa,CAACgB,CAAd,GAAkBJ,YAAlB,GAAiCL,IAAI,CAACS,CAJlC;AAKRC,MAAAA,KAAK,EAAGjB,aAAa,CAACkB,OAAd,GAAwBX,IAAI,CAACW,OAL7B;AAMRC,MAAAA,OAAO,EAAGnB,aAAa,CAACmB,OAAd,IAAyBZ,IAAI,CAACY,OANhC;AAORC,MAAAA,UAAU,EAAE3B,YAAY,CAACc,IAAD,EAAO,YAAP,EAAqB,EAArB;AAPhB,KAAZ;AASH;;AAED,SAAOT,MAAP;AACH,CA5DD;;AA8DAuB,MAAM,CAACC,OAAP,GAAiB1B,gBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar GetFastValue = require('../../../utils/object/GetFastValue');\r\nvar CreateGroupLayer = require('./CreateGroupLayer');\r\n\r\n/**\r\n * Parses a Tiled JSON object into an array of objects with details about the image layers.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseImageLayers\r\n * @since 3.0.0\r\n *\r\n * @param {object} json - The Tiled JSON object.\r\n *\r\n * @return {array} Array of objects that include critical info about the map's image layers\r\n */\r\nvar ParseImageLayers = function (json)\r\n{\r\n    var images = [];\r\n\r\n    // State inherited from a parent group\r\n    var groupStack = [];\r\n    var curGroupState = CreateGroupLayer(json);\r\n\r\n    while (curGroupState.i < curGroupState.layers.length || groupStack.length > 0)\r\n    {\r\n        if (curGroupState.i >= curGroupState.layers.length)\r\n        {\r\n            // Ensure recursion stack is not empty first\r\n            if (groupStack.length < 1)\r\n            {\r\n                console.warn(\r\n                    'TilemapParser.parseTiledJSON - Invalid layer group hierarchy'\r\n                );\r\n                break;\r\n            }\r\n\r\n            // Return to previous recursive state\r\n            curGroupState = groupStack.pop();\r\n            continue;\r\n        }\r\n\r\n        // Get current layer and advance iterator\r\n        var curi = curGroupState.layers[curGroupState.i];\r\n        curGroupState.i++;\r\n\r\n        if (curi.type !== 'imagelayer')\r\n        {\r\n            if (curi.type === 'group')\r\n            {\r\n                // Compute next state inherited from group\r\n                var nextGroupState = CreateGroupLayer(json, curi, curGroupState);\r\n\r\n                // Preserve current state before recursing\r\n                groupStack.push(curGroupState);\r\n                curGroupState = nextGroupState;\r\n            }\r\n\r\n            // Skip this layer OR 'recurse' (iterative style) into the group\r\n            continue;\r\n        }\r\n\r\n        var layerOffsetX = GetFastValue(curi, 'offsetx', 0) + GetFastValue(curi, 'startx', 0);\r\n        var layerOffsetY = GetFastValue(curi, 'offsety', 0) + GetFastValue(curi, 'starty', 0);\r\n        images.push({\r\n            name: (curGroupState.name + curi.name),\r\n            image: curi.image,\r\n            x: (curGroupState.x + layerOffsetX + curi.x),\r\n            y: (curGroupState.y + layerOffsetY + curi.y),\r\n            alpha: (curGroupState.opacity * curi.opacity),\r\n            visible: (curGroupState.visible && curi.visible),\r\n            properties: GetFastValue(curi, 'properties', {})\r\n        });\r\n    }\r\n\r\n    return images;\r\n};\r\n\r\nmodule.exports = ParseImageLayers;\r\n"]},"metadata":{},"sourceType":"script"}