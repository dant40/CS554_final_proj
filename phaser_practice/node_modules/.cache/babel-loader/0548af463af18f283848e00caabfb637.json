{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Contains = require('./Contains');\n\nvar GetPoint = require('./GetPoint');\n\nvar GetPoints = require('./GetPoints');\n\nvar GEOM_CONST = require('../const');\n\nvar Line = require('../line/Line');\n\nvar Random = require('./Random');\n/**\r\n * @classdesc\r\n * A triangle is a plane created by connecting three points.\r\n * The first two arguments specify the first point, the middle two arguments\r\n * specify the second point, and the last two arguments specify the third point.\r\n *\r\n * @class Triangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - `x` coordinate of the first point.\r\n * @param {number} [y1=0] - `y` coordinate of the first point.\r\n * @param {number} [x2=0] - `x` coordinate of the second point.\r\n * @param {number} [y2=0] - `y` coordinate of the second point.\r\n * @param {number} [x3=0] - `x` coordinate of the third point.\r\n * @param {number} [y3=0] - `y` coordinate of the third point.\r\n */\n\n\nvar Triangle = new Class({\n  initialize: function Triangle(x1, y1, x2, y2, x3, y3) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    if (x3 === undefined) {\n      x3 = 0;\n    }\n\n    if (y3 === undefined) {\n      y3 = 0;\n    }\n    /**\r\n     * The geometry constant type of this object: `GEOM_CONST.TRIANGLE`.\r\n     * Used for fast type comparisons.\r\n     *\r\n     * @name Phaser.Geom.Triangle#type\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.19.0\r\n     */\n\n\n    this.type = GEOM_CONST.TRIANGLE;\n    /**\r\n     * `x` coordinate of the first point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x1\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x1 = x1;\n    /**\r\n     * `y` coordinate of the first point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y1\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y1 = y1;\n    /**\r\n     * `x` coordinate of the second point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x2\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x2 = x2;\n    /**\r\n     * `y` coordinate of the second point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y2\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y2 = y2;\n    /**\r\n     * `x` coordinate of the third point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#x3\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.x3 = x3;\n    /**\r\n     * `y` coordinate of the third point.\r\n     *\r\n     * @name Phaser.Geom.Triangle#y3\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.y3 = y3;\n  },\n\n  /**\r\n   * Checks whether a given points lies within the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#contains\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point to check.\r\n   * @param {number} y - The y coordinate of the point to check.\r\n   *\r\n   * @return {boolean} `true` if the coordinate pair is within the triangle, otherwise `false`.\r\n   */\n  contains: function (x, y) {\n    return Contains(this, x, y);\n  },\n\n  /**\r\n   * Returns a specific point  on the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [output,$return]\r\n   *\r\n   * @param {number} position - Position as float within `0` and `1`. `0` equals the first point.\r\n   * @param {(Phaser.Geom.Point|object)} [output] - Optional Point, or point-like object, that the calculated point will be written to.\r\n   *\r\n   * @return {(Phaser.Geom.Point|object)} Calculated `Point` that represents the requested position. It is the same as `output` when this parameter has been given.\r\n   */\n  getPoint: function (position, output) {\n    return GetPoint(this, position, output);\n  },\n\n  /**\r\n   * Calculates a list of evenly distributed points on the triangle. It is either possible to pass an amount of points to be generated (`quantity`) or the distance between two points (`stepRate`).\r\n   *\r\n   * @method Phaser.Geom.Triangle#getPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n   *\r\n   * @param {integer} quantity - Number of points to be generated. Can be falsey when `stepRate` should be used. All points have the same distance along the triangle.\r\n   * @param {number} [stepRate] - Distance between two points. Will only be used when `quantity` is falsey.\r\n   * @param {(array|Phaser.Geom.Point[])} [output] - Optional Array for writing the calculated points into. Otherwise a new array will be created.\r\n   *\r\n   * @return {(array|Phaser.Geom.Point[])} Returns a list of calculated `Point` instances or the filled array passed as parameter `output`.\r\n   */\n  getPoints: function (quantity, stepRate, output) {\n    return GetPoints(this, quantity, stepRate, output);\n  },\n\n  /**\r\n   * Returns a random point along the triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getRandomPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Point} O - [point,$return]\r\n   *\r\n   * @param {Phaser.Geom.Point} [point] - Optional `Point` that should be modified. Otherwise a new one will be created.\r\n   *\r\n   * @return {Phaser.Geom.Point} Random `Point`. When parameter `point` has been provided it will be returned.\r\n   */\n  getRandomPoint: function (point) {\n    return Random(this, point);\n  },\n\n  /**\r\n   * Sets all three points of the triangle. Leaving out any coordinate sets it to be `0`.\r\n   *\r\n   * @method Phaser.Geom.Triangle#setTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x1=0] - `x` coordinate of the first point.\r\n   * @param {number} [y1=0] - `y` coordinate of the first point.\r\n   * @param {number} [x2=0] - `x` coordinate of the second point.\r\n   * @param {number} [y2=0] - `y` coordinate of the second point.\r\n   * @param {number} [x3=0] - `x` coordinate of the third point.\r\n   * @param {number} [y3=0] - `y` coordinate of the third point.\r\n   *\r\n   * @return {Phaser.Geom.Triangle} This Triangle object.\r\n   */\n  setTo: function (x1, y1, x2, y2, x3, y3) {\n    if (x1 === undefined) {\n      x1 = 0;\n    }\n\n    if (y1 === undefined) {\n      y1 = 0;\n    }\n\n    if (x2 === undefined) {\n      x2 = 0;\n    }\n\n    if (y2 === undefined) {\n      y2 = 0;\n    }\n\n    if (x3 === undefined) {\n      x3 = 0;\n    }\n\n    if (y3 === undefined) {\n      y3 = 0;\n    }\n\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n    return this;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line A of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineA\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line A of this Triangle.\r\n   */\n  getLineA: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x1, this.y1, this.x2, this.y2);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line B of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineB\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line B of this Triangle.\r\n   */\n  getLineB: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x2, this.y2, this.x3, this.y3);\n    return line;\n  },\n\n  /**\r\n   * Returns a Line object that corresponds to Line C of this Triangle.\r\n   *\r\n   * @method Phaser.Geom.Triangle#getLineC\r\n   * @since 3.0.0\r\n   *\r\n   * @generic {Phaser.Geom.Line} O - [line,$return]\r\n   *\r\n   * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n   *\r\n   * @return {Phaser.Geom.Line} A Line object that corresponds to line C of this Triangle.\r\n   */\n  getLineC: function (line) {\n    if (line === undefined) {\n      line = new Line();\n    }\n\n    line.setTo(this.x3, this.y3, this.x1, this.y1);\n    return line;\n  },\n\n  /**\r\n   * Left most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#left\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return Math.min(this.x1, this.x2, this.x3);\n    },\n    set: function (value) {\n      var diff = 0;\n\n      if (this.x1 <= this.x2 && this.x1 <= this.x3) {\n        diff = this.x1 - value;\n      } else if (this.x2 <= this.x1 && this.x2 <= this.x3) {\n        diff = this.x2 - value;\n      } else {\n        diff = this.x3 - value;\n      }\n\n      this.x1 -= diff;\n      this.x2 -= diff;\n      this.x3 -= diff;\n    }\n  },\n\n  /**\r\n   * Right most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#right\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return Math.max(this.x1, this.x2, this.x3);\n    },\n    set: function (value) {\n      var diff = 0;\n\n      if (this.x1 >= this.x2 && this.x1 >= this.x3) {\n        diff = this.x1 - value;\n      } else if (this.x2 >= this.x1 && this.x2 >= this.x3) {\n        diff = this.x2 - value;\n      } else {\n        diff = this.x3 - value;\n      }\n\n      this.x1 -= diff;\n      this.x2 -= diff;\n      this.x3 -= diff;\n    }\n  },\n\n  /**\r\n   * Top most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#top\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return Math.min(this.y1, this.y2, this.y3);\n    },\n    set: function (value) {\n      var diff = 0;\n\n      if (this.y1 <= this.y2 && this.y1 <= this.y3) {\n        diff = this.y1 - value;\n      } else if (this.y2 <= this.y1 && this.y2 <= this.y3) {\n        diff = this.y2 - value;\n      } else {\n        diff = this.y3 - value;\n      }\n\n      this.y1 -= diff;\n      this.y2 -= diff;\n      this.y3 -= diff;\n    }\n  },\n\n  /**\r\n   * Bottom most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n   *\r\n   * @name Phaser.Geom.Triangle#bottom\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return Math.max(this.y1, this.y2, this.y3);\n    },\n    set: function (value) {\n      var diff = 0;\n\n      if (this.y1 >= this.y2 && this.y1 >= this.y3) {\n        diff = this.y1 - value;\n      } else if (this.y2 >= this.y1 && this.y2 >= this.y3) {\n        diff = this.y2 - value;\n      } else {\n        diff = this.y3 - value;\n      }\n\n      this.y1 -= diff;\n      this.y2 -= diff;\n      this.y3 -= diff;\n    }\n  }\n});\nmodule.exports = Triangle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/triangle/Triangle.js"],"names":["Class","require","Contains","GetPoint","GetPoints","GEOM_CONST","Line","Random","Triangle","initialize","x1","y1","x2","y2","x3","y3","undefined","type","TRIANGLE","contains","x","y","getPoint","position","output","getPoints","quantity","stepRate","getRandomPoint","point","setTo","getLineA","line","getLineB","getLineC","left","get","Math","min","set","value","diff","right","max","top","bottom","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAD,CAAvB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,UAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIO,QAAQ,GAAG,IAAIR,KAAJ,CAAU;AAErBS,EAAAA,UAAU,EAEV,SAASD,QAAT,CAAmBE,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuCC,EAAvC,EACA;AACI,QAAIL,EAAE,KAAKM,SAAX,EAAsB;AAAEN,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKK,SAAX,EAAsB;AAAEL,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKI,SAAX,EAAsB;AAAEJ,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKG,SAAX,EAAsB;AAAEH,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKE,SAAX,EAAsB;AAAEF,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKC,SAAX,EAAsB;AAAED,MAAAA,EAAE,GAAG,CAAL;AAAS;AAEjC;;;;;;;;;;;AASA,SAAKE,IAAL,GAAYZ,UAAU,CAACa,QAAvB;AAEA;;;;;;;;;AAQA,SAAKR,EAAL,GAAUA,EAAV;AAEA;;;;;;;;;AAQA,SAAKC,EAAL,GAAUA,EAAV;AAEA;;;;;;;;;AAQA,SAAKC,EAAL,GAAUA,EAAV;AAEA;;;;;;;;;AAQA,SAAKC,EAAL,GAAUA,EAAV;AAEA;;;;;;;;;AAQA,SAAKC,EAAL,GAAUA,EAAV;AAEA;;;;;;;;;AAQA,SAAKC,EAAL,GAAUA,EAAV;AACH,GAnFoB;;AAqFrB;;;;;;;;;;;AAWAI,EAAAA,QAAQ,EAAE,UAAUC,CAAV,EAAaC,CAAb,EACV;AACI,WAAOnB,QAAQ,CAAC,IAAD,EAAOkB,CAAP,EAAUC,CAAV,CAAf;AACH,GAnGoB;;AAqGrB;;;;;;;;;;;;;AAaAC,EAAAA,QAAQ,EAAE,UAAUC,QAAV,EAAoBC,MAApB,EACV;AACI,WAAOrB,QAAQ,CAAC,IAAD,EAAOoB,QAAP,EAAiBC,MAAjB,CAAf;AACH,GArHoB;;AAuHrB;;;;;;;;;;;;;;AAcAC,EAAAA,SAAS,EAAE,UAAUC,QAAV,EAAoBC,QAApB,EAA8BH,MAA9B,EACX;AACI,WAAOpB,SAAS,CAAC,IAAD,EAAOsB,QAAP,EAAiBC,QAAjB,EAA2BH,MAA3B,CAAhB;AACH,GAxIoB;;AA0IrB;;;;;;;;;;;;AAYAI,EAAAA,cAAc,EAAE,UAAUC,KAAV,EAChB;AACI,WAAOtB,MAAM,CAAC,IAAD,EAAOsB,KAAP,CAAb;AACH,GAzJoB;;AA2JrB;;;;;;;;;;;;;;;AAeAC,EAAAA,KAAK,EAAE,UAAUpB,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EACP;AACI,QAAIL,EAAE,KAAKM,SAAX,EAAsB;AAAEN,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKK,SAAX,EAAsB;AAAEL,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKI,SAAX,EAAsB;AAAEJ,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKG,SAAX,EAAsB;AAAEH,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKE,SAAX,EAAsB;AAAEF,MAAAA,EAAE,GAAG,CAAL;AAAS;;AACjC,QAAIC,EAAE,KAAKC,SAAX,EAAsB;AAAED,MAAAA,EAAE,GAAG,CAAL;AAAS;;AAEjC,SAAKL,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,SAAKC,EAAL,GAAUA,EAAV;AACA,SAAKC,EAAL,GAAUA,EAAV;AAEA,WAAO,IAAP;AACH,GA7LoB;;AA+LrB;;;;;;;;;;;;AAYAgB,EAAAA,QAAQ,EAAE,UAAUC,IAAV,EACV;AACI,QAAIA,IAAI,KAAKhB,SAAb,EAAwB;AAAEgB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACF,KAAL,CAAW,KAAKpB,EAAhB,EAAoB,KAAKC,EAAzB,EAA6B,KAAKC,EAAlC,EAAsC,KAAKC,EAA3C;AAEA,WAAOmB,IAAP;AACH,GAlNoB;;AAoNrB;;;;;;;;;;;;AAYAC,EAAAA,QAAQ,EAAE,UAAUD,IAAV,EACV;AACI,QAAIA,IAAI,KAAKhB,SAAb,EAAwB;AAAEgB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACF,KAAL,CAAW,KAAKlB,EAAhB,EAAoB,KAAKC,EAAzB,EAA6B,KAAKC,EAAlC,EAAsC,KAAKC,EAA3C;AAEA,WAAOiB,IAAP;AACH,GAvOoB;;AAyOrB;;;;;;;;;;;;AAYAE,EAAAA,QAAQ,EAAE,UAAUF,IAAV,EACV;AACI,QAAIA,IAAI,KAAKhB,SAAb,EAAwB;AAAEgB,MAAAA,IAAI,GAAG,IAAI1B,IAAJ,EAAP;AAAoB;;AAE9C0B,IAAAA,IAAI,CAACF,KAAL,CAAW,KAAKhB,EAAhB,EAAoB,KAAKC,EAAzB,EAA6B,KAAKL,EAAlC,EAAsC,KAAKC,EAA3C;AAEA,WAAOqB,IAAP;AACH,GA5PoB;;AA8PrB;;;;;;;AAOAG,EAAAA,IAAI,EAAE;AAEFC,IAAAA,GAAG,EAAE,YACL;AACI,aAAOC,IAAI,CAACC,GAAL,CAAS,KAAK5B,EAAd,EAAkB,KAAKE,EAAvB,EAA2B,KAAKE,EAAhC,CAAP;AACH,KALC;AAOFyB,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIC,IAAI,GAAG,CAAX;;AAEA,UAAI,KAAK/B,EAAL,IAAW,KAAKE,EAAhB,IAAsB,KAAKF,EAAL,IAAW,KAAKI,EAA1C,EACA;AACI2B,QAAAA,IAAI,GAAG,KAAK/B,EAAL,GAAU8B,KAAjB;AACH,OAHD,MAIK,IAAI,KAAK5B,EAAL,IAAW,KAAKF,EAAhB,IAAsB,KAAKE,EAAL,IAAW,KAAKE,EAA1C,EACL;AACI2B,QAAAA,IAAI,GAAG,KAAK7B,EAAL,GAAU4B,KAAjB;AACH,OAHI,MAKL;AACIC,QAAAA,IAAI,GAAG,KAAK3B,EAAL,GAAU0B,KAAjB;AACH;;AAED,WAAK9B,EAAL,IAAW+B,IAAX;AACA,WAAK7B,EAAL,IAAW6B,IAAX;AACA,WAAK3B,EAAL,IAAW2B,IAAX;AACH;AA3BC,GArQe;;AAoSrB;;;;;;;AAOAC,EAAAA,KAAK,EAAE;AAEHN,IAAAA,GAAG,EAAE,YACL;AACI,aAAOC,IAAI,CAACM,GAAL,CAAS,KAAKjC,EAAd,EAAkB,KAAKE,EAAvB,EAA2B,KAAKE,EAAhC,CAAP;AACH,KALE;AAOHyB,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIC,IAAI,GAAG,CAAX;;AAEA,UAAI,KAAK/B,EAAL,IAAW,KAAKE,EAAhB,IAAsB,KAAKF,EAAL,IAAW,KAAKI,EAA1C,EACA;AACI2B,QAAAA,IAAI,GAAG,KAAK/B,EAAL,GAAU8B,KAAjB;AACH,OAHD,MAIK,IAAI,KAAK5B,EAAL,IAAW,KAAKF,EAAhB,IAAsB,KAAKE,EAAL,IAAW,KAAKE,EAA1C,EACL;AACI2B,QAAAA,IAAI,GAAG,KAAK7B,EAAL,GAAU4B,KAAjB;AACH,OAHI,MAKL;AACIC,QAAAA,IAAI,GAAG,KAAK3B,EAAL,GAAU0B,KAAjB;AACH;;AAED,WAAK9B,EAAL,IAAW+B,IAAX;AACA,WAAK7B,EAAL,IAAW6B,IAAX;AACA,WAAK3B,EAAL,IAAW2B,IAAX;AACH;AA3BE,GA3Sc;;AA0UrB;;;;;;;AAOAG,EAAAA,GAAG,EAAE;AAEDR,IAAAA,GAAG,EAAE,YACL;AACI,aAAOC,IAAI,CAACC,GAAL,CAAS,KAAK3B,EAAd,EAAkB,KAAKE,EAAvB,EAA2B,KAAKE,EAAhC,CAAP;AACH,KALA;AAODwB,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIC,IAAI,GAAG,CAAX;;AAEA,UAAI,KAAK9B,EAAL,IAAW,KAAKE,EAAhB,IAAsB,KAAKF,EAAL,IAAW,KAAKI,EAA1C,EACA;AACI0B,QAAAA,IAAI,GAAG,KAAK9B,EAAL,GAAU6B,KAAjB;AACH,OAHD,MAIK,IAAI,KAAK3B,EAAL,IAAW,KAAKF,EAAhB,IAAsB,KAAKE,EAAL,IAAW,KAAKE,EAA1C,EACL;AACI0B,QAAAA,IAAI,GAAG,KAAK5B,EAAL,GAAU2B,KAAjB;AACH,OAHI,MAKL;AACIC,QAAAA,IAAI,GAAG,KAAK1B,EAAL,GAAUyB,KAAjB;AACH;;AAED,WAAK7B,EAAL,IAAW8B,IAAX;AACA,WAAK5B,EAAL,IAAW4B,IAAX;AACA,WAAK1B,EAAL,IAAW0B,IAAX;AACH;AA3BA,GAjVgB;;AAgXrB;;;;;;;AAOAI,EAAAA,MAAM,EAAE;AAEJT,IAAAA,GAAG,EAAE,YACL;AACI,aAAOC,IAAI,CAACM,GAAL,CAAS,KAAKhC,EAAd,EAAkB,KAAKE,EAAvB,EAA2B,KAAKE,EAAhC,CAAP;AACH,KALG;AAOJwB,IAAAA,GAAG,EAAE,UAAUC,KAAV,EACL;AACI,UAAIC,IAAI,GAAG,CAAX;;AAEA,UAAI,KAAK9B,EAAL,IAAW,KAAKE,EAAhB,IAAsB,KAAKF,EAAL,IAAW,KAAKI,EAA1C,EACA;AACI0B,QAAAA,IAAI,GAAG,KAAK9B,EAAL,GAAU6B,KAAjB;AACH,OAHD,MAIK,IAAI,KAAK3B,EAAL,IAAW,KAAKF,EAAhB,IAAsB,KAAKE,EAAL,IAAW,KAAKE,EAA1C,EACL;AACI0B,QAAAA,IAAI,GAAG,KAAK5B,EAAL,GAAU2B,KAAjB;AACH,OAHI,MAKL;AACIC,QAAAA,IAAI,GAAG,KAAK1B,EAAL,GAAUyB,KAAjB;AACH;;AAED,WAAK7B,EAAL,IAAW8B,IAAX;AACA,WAAK5B,EAAL,IAAW4B,IAAX;AACA,WAAK1B,EAAL,IAAW0B,IAAX;AACH;AA3BG;AAvXa,CAAV,CAAf;AAwZAK,MAAM,CAACC,OAAP,GAAiBvC,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Contains = require('./Contains');\r\nvar GetPoint = require('./GetPoint');\r\nvar GetPoints = require('./GetPoints');\r\nvar GEOM_CONST = require('../const');\r\nvar Line = require('../line/Line');\r\nvar Random = require('./Random');\r\n\r\n/**\r\n * @classdesc\r\n * A triangle is a plane created by connecting three points.\r\n * The first two arguments specify the first point, the middle two arguments\r\n * specify the second point, and the last two arguments specify the third point.\r\n *\r\n * @class Triangle\r\n * @memberof Phaser.Geom\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {number} [x1=0] - `x` coordinate of the first point.\r\n * @param {number} [y1=0] - `y` coordinate of the first point.\r\n * @param {number} [x2=0] - `x` coordinate of the second point.\r\n * @param {number} [y2=0] - `y` coordinate of the second point.\r\n * @param {number} [x3=0] - `x` coordinate of the third point.\r\n * @param {number} [y3=0] - `y` coordinate of the third point.\r\n */\r\nvar Triangle = new Class({\r\n\r\n    initialize:\r\n\r\n    function Triangle (x1, y1, x2, y2, x3, y3)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n        if (x3 === undefined) { x3 = 0; }\r\n        if (y3 === undefined) { y3 = 0; }\r\n\r\n        /**\r\n         * The geometry constant type of this object: `GEOM_CONST.TRIANGLE`.\r\n         * Used for fast type comparisons.\r\n         *\r\n         * @name Phaser.Geom.Triangle#type\r\n         * @type {integer}\r\n         * @readonly\r\n         * @since 3.19.0\r\n         */\r\n        this.type = GEOM_CONST.TRIANGLE;\r\n\r\n        /**\r\n         * `x` coordinate of the first point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x1\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x1 = x1;\r\n\r\n        /**\r\n         * `y` coordinate of the first point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y1\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y1 = y1;\r\n\r\n        /**\r\n         * `x` coordinate of the second point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x2\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x2 = x2;\r\n\r\n        /**\r\n         * `y` coordinate of the second point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y2\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y2 = y2;\r\n\r\n        /**\r\n         * `x` coordinate of the third point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#x3\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.x3 = x3;\r\n\r\n        /**\r\n         * `y` coordinate of the third point.\r\n         *\r\n         * @name Phaser.Geom.Triangle#y3\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.y3 = y3;\r\n    },\r\n\r\n    /**\r\n     * Checks whether a given points lies within the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#contains\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point to check.\r\n     * @param {number} y - The y coordinate of the point to check.\r\n     *\r\n     * @return {boolean} `true` if the coordinate pair is within the triangle, otherwise `false`.\r\n     */\r\n    contains: function (x, y)\r\n    {\r\n        return Contains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * Returns a specific point  on the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [output,$return]\r\n     *\r\n     * @param {number} position - Position as float within `0` and `1`. `0` equals the first point.\r\n     * @param {(Phaser.Geom.Point|object)} [output] - Optional Point, or point-like object, that the calculated point will be written to.\r\n     *\r\n     * @return {(Phaser.Geom.Point|object)} Calculated `Point` that represents the requested position. It is the same as `output` when this parameter has been given.\r\n     */\r\n    getPoint: function (position, output)\r\n    {\r\n        return GetPoint(this, position, output);\r\n    },\r\n\r\n    /**\r\n     * Calculates a list of evenly distributed points on the triangle. It is either possible to pass an amount of points to be generated (`quantity`) or the distance between two points (`stepRate`).\r\n     *\r\n     * @method Phaser.Geom.Triangle#getPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point[]} O - [output,$return]\r\n     *\r\n     * @param {integer} quantity - Number of points to be generated. Can be falsey when `stepRate` should be used. All points have the same distance along the triangle.\r\n     * @param {number} [stepRate] - Distance between two points. Will only be used when `quantity` is falsey.\r\n     * @param {(array|Phaser.Geom.Point[])} [output] - Optional Array for writing the calculated points into. Otherwise a new array will be created.\r\n     *\r\n     * @return {(array|Phaser.Geom.Point[])} Returns a list of calculated `Point` instances or the filled array passed as parameter `output`.\r\n     */\r\n    getPoints: function (quantity, stepRate, output)\r\n    {\r\n        return GetPoints(this, quantity, stepRate, output);\r\n    },\r\n\r\n    /**\r\n     * Returns a random point along the triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getRandomPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Point} O - [point,$return]\r\n     *\r\n     * @param {Phaser.Geom.Point} [point] - Optional `Point` that should be modified. Otherwise a new one will be created.\r\n     *\r\n     * @return {Phaser.Geom.Point} Random `Point`. When parameter `point` has been provided it will be returned.\r\n     */\r\n    getRandomPoint: function (point)\r\n    {\r\n        return Random(this, point);\r\n    },\r\n\r\n    /**\r\n     * Sets all three points of the triangle. Leaving out any coordinate sets it to be `0`.\r\n     *\r\n     * @method Phaser.Geom.Triangle#setTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x1=0] - `x` coordinate of the first point.\r\n     * @param {number} [y1=0] - `y` coordinate of the first point.\r\n     * @param {number} [x2=0] - `x` coordinate of the second point.\r\n     * @param {number} [y2=0] - `y` coordinate of the second point.\r\n     * @param {number} [x3=0] - `x` coordinate of the third point.\r\n     * @param {number} [y3=0] - `y` coordinate of the third point.\r\n     *\r\n     * @return {Phaser.Geom.Triangle} This Triangle object.\r\n     */\r\n    setTo: function (x1, y1, x2, y2, x3, y3)\r\n    {\r\n        if (x1 === undefined) { x1 = 0; }\r\n        if (y1 === undefined) { y1 = 0; }\r\n        if (x2 === undefined) { x2 = 0; }\r\n        if (y2 === undefined) { y2 = 0; }\r\n        if (x3 === undefined) { x3 = 0; }\r\n        if (y3 === undefined) { y3 = 0; }\r\n\r\n        this.x1 = x1;\r\n        this.y1 = y1;\r\n\r\n        this.x2 = x2;\r\n        this.y2 = y2;\r\n\r\n        this.x3 = x3;\r\n        this.y3 = y3;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line A of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineA\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line A of this Triangle.\r\n     */\r\n    getLineA: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x1, this.y1, this.x2, this.y2);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line B of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineB\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line B of this Triangle.\r\n     */\r\n    getLineB: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x2, this.y2, this.x3, this.y3);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Returns a Line object that corresponds to Line C of this Triangle.\r\n     *\r\n     * @method Phaser.Geom.Triangle#getLineC\r\n     * @since 3.0.0\r\n     *\r\n     * @generic {Phaser.Geom.Line} O - [line,$return]\r\n     *\r\n     * @param {Phaser.Geom.Line} [line] - A Line object to set the results in. If `undefined` a new Line will be created.\r\n     *\r\n     * @return {Phaser.Geom.Line} A Line object that corresponds to line C of this Triangle.\r\n     */\r\n    getLineC: function (line)\r\n    {\r\n        if (line === undefined) { line = new Line(); }\r\n\r\n        line.setTo(this.x3, this.y3, this.x1, this.y1);\r\n\r\n        return line;\r\n    },\r\n\r\n    /**\r\n     * Left most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#left\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.x1, this.x2, this.x3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.x1 <= this.x2 && this.x1 <= this.x3)\r\n            {\r\n                diff = this.x1 - value;\r\n            }\r\n            else if (this.x2 <= this.x1 && this.x2 <= this.x3)\r\n            {\r\n                diff = this.x2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.x3 - value;\r\n            }\r\n\r\n            this.x1 -= diff;\r\n            this.x2 -= diff;\r\n            this.x3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Right most X coordinate of the triangle. Setting it moves the triangle on the X axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#right\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.x1, this.x2, this.x3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.x1 >= this.x2 && this.x1 >= this.x3)\r\n            {\r\n                diff = this.x1 - value;\r\n            }\r\n            else if (this.x2 >= this.x1 && this.x2 >= this.x3)\r\n            {\r\n                diff = this.x2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.x3 - value;\r\n            }\r\n\r\n            this.x1 -= diff;\r\n            this.x2 -= diff;\r\n            this.x3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Top most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#top\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.min(this.y1, this.y2, this.y3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.y1 <= this.y2 && this.y1 <= this.y3)\r\n            {\r\n                diff = this.y1 - value;\r\n            }\r\n            else if (this.y2 <= this.y1 && this.y2 <= this.y3)\r\n            {\r\n                diff = this.y2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.y3 - value;\r\n            }\r\n\r\n            this.y1 -= diff;\r\n            this.y2 -= diff;\r\n            this.y3 -= diff;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Bottom most Y coordinate of the triangle. Setting it moves the triangle on the Y axis accordingly.\r\n     *\r\n     * @name Phaser.Geom.Triangle#bottom\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return Math.max(this.y1, this.y2, this.y3);\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var diff = 0;\r\n\r\n            if (this.y1 >= this.y2 && this.y1 >= this.y3)\r\n            {\r\n                diff = this.y1 - value;\r\n            }\r\n            else if (this.y2 >= this.y1 && this.y2 >= this.y3)\r\n            {\r\n                diff = this.y2 - value;\r\n            }\r\n            else\r\n            {\r\n                diff = this.y3 - value;\r\n            }\r\n\r\n            this.y1 -= diff;\r\n            this.y2 -= diff;\r\n            this.y3 -= diff;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = Triangle;\r\n"]},"metadata":{},"sourceType":"script"}