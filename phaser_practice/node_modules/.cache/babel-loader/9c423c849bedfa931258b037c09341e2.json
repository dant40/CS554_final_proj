{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Contains = require('../triangle/Contains');\n\nvar LineToLine = require('./LineToLine');\n/**\r\n * Checks if a Triangle and a Line intersect.\r\n * \r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n *\r\n * @return {boolean} `true` if the Triangle and the Line intersect, otherwise `false`.\r\n */\n\n\nvar TriangleToLine = function (triangle, line) {\n  //  If the Triangle contains either the start or end point of the line, it intersects\n  if (Contains(triangle, line.getPointA()) || Contains(triangle, line.getPointB())) {\n    return true;\n  } //  Now check the line against each line of the Triangle\n\n\n  if (LineToLine(triangle.getLineA(), line)) {\n    return true;\n  }\n\n  if (LineToLine(triangle.getLineB(), line)) {\n    return true;\n  }\n\n  if (LineToLine(triangle.getLineC(), line)) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = TriangleToLine;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/TriangleToLine.js"],"names":["Contains","require","LineToLine","TriangleToLine","triangle","line","getPointA","getPointB","getLineA","getLineB","getLineC","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;AAEA;;;;;;;;;;;;;;;AAaA,IAAIE,cAAc,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EACrB;AACI;AACA,MAAIL,QAAQ,CAACI,QAAD,EAAWC,IAAI,CAACC,SAAL,EAAX,CAAR,IAAwCN,QAAQ,CAACI,QAAD,EAAWC,IAAI,CAACE,SAAL,EAAX,CAApD,EACA;AACI,WAAO,IAAP;AACH,GALL,CAOI;;;AACA,MAAIL,UAAU,CAACE,QAAQ,CAACI,QAAT,EAAD,EAAsBH,IAAtB,CAAd,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIH,UAAU,CAACE,QAAQ,CAACK,QAAT,EAAD,EAAsBJ,IAAtB,CAAd,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIH,UAAU,CAACE,QAAQ,CAACM,QAAT,EAAD,EAAsBL,IAAtB,CAAd,EACA;AACI,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH,CAzBD;;AA2BAM,MAAM,CAACC,OAAP,GAAiBT,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Contains = require('../triangle/Contains');\r\nvar LineToLine = require('./LineToLine');\r\n\r\n/**\r\n * Checks if a Triangle and a Line intersect.\r\n * \r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.TriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n *\r\n * @return {boolean} `true` if the Triangle and the Line intersect, otherwise `false`.\r\n */\r\nvar TriangleToLine = function (triangle, line)\r\n{\r\n    //  If the Triangle contains either the start or end point of the line, it intersects\r\n    if (Contains(triangle, line.getPointA()) || Contains(triangle, line.getPointB()))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //  Now check the line against each line of the Triangle\r\n    if (LineToLine(triangle.getLineA(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triangle.getLineB(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (LineToLine(triangle.getLineC(), line))\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nmodule.exports = TriangleToLine;\r\n"]},"metadata":{},"sourceType":"script"}