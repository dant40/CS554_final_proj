{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar File = require('../File');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetURL = require('../GetURL');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class HTML5AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [urlConfig] - The absolute or relative URL to load this file from.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar HTML5AudioFile = new Class({\n  Extends: File,\n  initialize: function HTML5AudioFile(loader, key, urlConfig, audioConfig) {\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      audioConfig = GetFastValue(config, 'config', audioConfig);\n    }\n\n    var fileConfig = {\n      type: 'audio',\n      cache: loader.cacheManager.audio,\n      extension: urlConfig.type,\n      key: key,\n      url: urlConfig.url,\n      config: audioConfig\n    };\n    File.call(this, loader, fileConfig); //  New properties specific to this class\n\n    this.locked = 'ontouchstart' in window;\n    this.loaded = false;\n    this.filesLoaded = 0;\n    this.filesTotal = 0;\n  },\n\n  /**\r\n   * Called when the file finishes loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onLoad\r\n   * @since 3.0.0\r\n   */\n  onLoad: function () {\n    if (this.loaded) {\n      return;\n    }\n\n    this.loaded = true;\n    this.loader.nextFile(this, true);\n  },\n\n  /**\r\n   * Called if the file errors while loading.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onError\r\n   * @since 3.0.0\r\n   */\n  onError: function () {\n    for (var i = 0; i < this.data.length; i++) {\n      var audio = this.data[i];\n      audio.oncanplaythrough = null;\n      audio.onerror = null;\n    }\n\n    this.loader.nextFile(this, false);\n  },\n\n  /**\r\n   * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#onProgress\r\n   * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n   * @since 3.0.0\r\n   */\n  onProgress: function (event) {\n    var audio = event.target;\n    audio.oncanplaythrough = null;\n    audio.onerror = null;\n    this.filesLoaded++;\n    this.percentComplete = Math.min(this.filesLoaded / this.filesTotal, 1);\n    this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\n\n    if (this.filesLoaded === this.filesTotal) {\n      this.onLoad();\n    }\n  },\n\n  /**\r\n   * Called by the Loader, starts the actual file downloading.\r\n   * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n   * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.HTML5AudioFile#load\r\n   * @since 3.0.0\r\n   */\n  load: function () {\n    this.data = [];\n    var instances = this.config && this.config.instances || 1;\n    this.filesTotal = instances;\n    this.filesLoaded = 0;\n    this.percentComplete = 0;\n\n    for (var i = 0; i < instances; i++) {\n      var audio = new Audio();\n      audio.dataset = {};\n      audio.dataset.name = this.key + ('0' + i).slice(-2);\n      audio.dataset.used = 'false';\n\n      if (this.locked) {\n        audio.dataset.locked = 'true';\n      } else {\n        audio.dataset.locked = 'false';\n        audio.preload = 'auto';\n        audio.oncanplaythrough = this.onProgress.bind(this);\n        audio.onerror = this.onError.bind(this);\n      }\n\n      this.data.push(audio);\n    }\n\n    for (i = 0; i < this.data.length; i++) {\n      audio = this.data[i];\n      audio.src = GetURL(this, this.loader.baseURL);\n\n      if (!this.locked) {\n        audio.load();\n      }\n    }\n\n    if (this.locked) {\n      //  This is super-dangerous but works. Race condition potential high.\n      //  Is there another way?\n      setTimeout(this.onLoad.bind(this));\n    }\n  }\n});\nmodule.exports = HTML5AudioFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/HTML5AudioFile.js"],"names":["Class","require","Events","File","GetFastValue","GetURL","IsPlainObject","HTML5AudioFile","Extends","initialize","loader","key","urlConfig","audioConfig","config","fileConfig","type","cache","cacheManager","audio","extension","url","call","locked","window","loaded","filesLoaded","filesTotal","onLoad","nextFile","onError","i","data","length","oncanplaythrough","onerror","onProgress","event","target","percentComplete","Math","min","emit","FILE_PROGRESS","load","instances","Audio","dataset","name","slice","used","preload","bind","push","src","baseURL","setTimeout","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar File = require('../File');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetURL = require('../GetURL');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Audio File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#audio method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#audio.\r\n *\r\n * @class HTML5AudioFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.AudioFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [urlConfig] - The absolute or relative URL to load this file from.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar HTML5AudioFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioFile (loader, key, urlConfig, audioConfig)\r\n    {\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            audioConfig = GetFastValue(config, 'config', audioConfig);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'audio',\r\n            cache: loader.cacheManager.audio,\r\n            extension: urlConfig.type,\r\n            key: key,\r\n            url: urlConfig.url,\r\n            config: audioConfig\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        //  New properties specific to this class\r\n        this.locked = 'ontouchstart' in window;\r\n        this.loaded = false;\r\n        this.filesLoaded = 0;\r\n        this.filesTotal = 0;\r\n    },\r\n\r\n    /**\r\n     * Called when the file finishes loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onLoad\r\n     * @since 3.0.0\r\n     */\r\n    onLoad: function ()\r\n    {\r\n        if (this.loaded)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.loaded = true;\r\n\r\n        this.loader.nextFile(this, true);\r\n    },\r\n\r\n    /**\r\n     * Called if the file errors while loading.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onError\r\n     * @since 3.0.0\r\n     */\r\n    onError: function ()\r\n    {\r\n        for (var i = 0; i < this.data.length; i++)\r\n        {\r\n            var audio = this.data[i];\r\n\r\n            audio.oncanplaythrough = null;\r\n            audio.onerror = null;\r\n        }\r\n\r\n        this.loader.nextFile(this, false);\r\n    },\r\n\r\n    /**\r\n     * Called during the file load progress. Is sent a DOM ProgressEvent.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#onProgress\r\n     * @fires Phaser.Loader.Events#FILE_PROGRESS\r\n     * @since 3.0.0\r\n     */\r\n    onProgress: function (event)\r\n    {\r\n        var audio = event.target;\r\n\r\n        audio.oncanplaythrough = null;\r\n        audio.onerror = null;\r\n\r\n        this.filesLoaded++;\r\n\r\n        this.percentComplete = Math.min((this.filesLoaded / this.filesTotal), 1);\r\n\r\n        this.loader.emit(Events.FILE_PROGRESS, this, this.percentComplete);\r\n\r\n        if (this.filesLoaded === this.filesTotal)\r\n        {\r\n            this.onLoad();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called by the Loader, starts the actual file downloading.\r\n     * During the load the methods onLoad, onError and onProgress are called, based on the XHR events.\r\n     * You shouldn't normally call this method directly, it's meant to be invoked by the Loader.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.HTML5AudioFile#load\r\n     * @since 3.0.0\r\n     */\r\n    load: function ()\r\n    {\r\n        this.data = [];\r\n\r\n        var instances = (this.config && this.config.instances) || 1;\r\n\r\n        this.filesTotal = instances;\r\n        this.filesLoaded = 0;\r\n        this.percentComplete = 0;\r\n\r\n        for (var i = 0; i < instances; i++)\r\n        {\r\n            var audio = new Audio();\r\n            audio.dataset = {};\r\n            audio.dataset.name = this.key + ('0' + i).slice(-2);\r\n            audio.dataset.used = 'false';\r\n\r\n            if (this.locked)\r\n            {\r\n                audio.dataset.locked = 'true';\r\n            }\r\n            else\r\n            {\r\n                audio.dataset.locked = 'false';\r\n\r\n                audio.preload = 'auto';\r\n                audio.oncanplaythrough = this.onProgress.bind(this);\r\n                audio.onerror = this.onError.bind(this);\r\n            }\r\n\r\n            this.data.push(audio);\r\n        }\r\n\r\n        for (i = 0; i < this.data.length; i++)\r\n        {\r\n            audio = this.data[i];\r\n            audio.src = GetURL(this, this.loader.baseURL);\r\n\r\n            if (!this.locked)\r\n            {\r\n                audio.load();\r\n            }\r\n        }\r\n\r\n        if (this.locked)\r\n        {\r\n            //  This is super-dangerous but works. Race condition potential high.\r\n            //  Is there another way?\r\n            setTimeout(this.onLoad.bind(this));\r\n        }\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioFile;\r\n"]},"metadata":{},"sourceType":"script"}