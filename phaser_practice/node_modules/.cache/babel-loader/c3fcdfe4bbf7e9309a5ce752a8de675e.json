{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Geom = require('../../geom/');\n\nvar GetTilesWithin = require('./GetTilesWithin');\n\nvar Intersects = require('../../geom/intersects/');\n\nvar NOOP = require('../../utils/NOOP');\n\nvar TileToWorldX = require('./TileToWorldX');\n\nvar TileToWorldY = require('./TileToWorldY');\n\nvar WorldToTileX = require('./WorldToTileX');\n\nvar WorldToTileY = require('./WorldToTileY');\n\nvar TriangleToRectangle = function (triangle, rect) {\n  return Intersects.RectangleToTriangle(rect, triangle);\n}; // Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\n// coordinates instead of shifting the tiles.\n\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\n\n\nvar GetTilesWithinShape = function (shape, filteringOptions, camera, layer) {\n  if (shape === undefined) {\n    return [];\n  } // intersectTest is a function with parameters: shape, rect\n\n\n  var intersectTest = NOOP;\n\n  if (shape instanceof Geom.Circle) {\n    intersectTest = Intersects.CircleToRectangle;\n  } else if (shape instanceof Geom.Rectangle) {\n    intersectTest = Intersects.RectangleToRectangle;\n  } else if (shape instanceof Geom.Triangle) {\n    intersectTest = TriangleToRectangle;\n  } else if (shape instanceof Geom.Line) {\n    intersectTest = Intersects.LineToRectangle;\n  } // Top left corner of the shapes's bounding box, rounded down to include partial tiles\n\n\n  var xStart = WorldToTileX(shape.left, true, camera, layer);\n  var yStart = WorldToTileY(shape.top, true, camera, layer); // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\n\n  var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\n  var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer)); // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\n  // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\n\n  var width = Math.max(xEnd - xStart, 1);\n  var height = Math.max(yEnd - yStart, 1);\n  var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\n  var tileWidth = layer.tileWidth;\n  var tileHeight = layer.tileHeight;\n\n  if (layer.tilemapLayer) {\n    tileWidth *= layer.tilemapLayer.scaleX;\n    tileHeight *= layer.tilemapLayer.scaleY;\n  }\n\n  var results = [];\n  var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\n\n  for (var i = 0; i < tiles.length; i++) {\n    var tile = tiles[i];\n    tileRect.x = TileToWorldX(tile.x, camera, layer);\n    tileRect.y = TileToWorldY(tile.y, camera, layer);\n\n    if (intersectTest(shape, tileRect)) {\n      results.push(tile);\n    }\n  }\n\n  return results;\n};\n\nmodule.exports = GetTilesWithinShape;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/GetTilesWithinShape.js"],"names":["Geom","require","GetTilesWithin","Intersects","NOOP","TileToWorldX","TileToWorldY","WorldToTileX","WorldToTileY","TriangleToRectangle","triangle","rect","RectangleToTriangle","GetTilesWithinShape","shape","filteringOptions","camera","layer","undefined","intersectTest","Circle","CircleToRectangle","Rectangle","RectangleToRectangle","Triangle","Line","LineToRectangle","xStart","left","yStart","top","xEnd","Math","ceil","right","yEnd","bottom","width","max","height","tiles","tileWidth","tileHeight","tilemapLayer","scaleX","scaleY","results","tileRect","i","length","tile","x","y","push","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,IAAI,GAAGC,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAAxB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,kBAAD,CAAlB;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIM,YAAY,GAAGN,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIO,YAAY,GAAGP,OAAO,CAAC,gBAAD,CAA1B;;AAEA,IAAIQ,mBAAmB,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAC1B;AACI,SAAOR,UAAU,CAACS,mBAAX,CAA+BD,IAA/B,EAAqCD,QAArC,CAAP;AACH,CAHD,C,CAKA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIG,mBAAmB,GAAG,UAAUC,KAAV,EAAiBC,gBAAjB,EAAmCC,MAAnC,EAA2CC,KAA3C,EAC1B;AACI,MAAIH,KAAK,KAAKI,SAAd,EAAyB;AAAE,WAAO,EAAP;AAAY,GAD3C,CAGI;;;AACA,MAAIC,aAAa,GAAGf,IAApB;;AACA,MAAIU,KAAK,YAAYd,IAAI,CAACoB,MAA1B,EAAkC;AAAED,IAAAA,aAAa,GAAGhB,UAAU,CAACkB,iBAA3B;AAA+C,GAAnF,MACK,IAAIP,KAAK,YAAYd,IAAI,CAACsB,SAA1B,EAAqC;AAAEH,IAAAA,aAAa,GAAGhB,UAAU,CAACoB,oBAA3B;AAAkD,GAAzF,MACA,IAAIT,KAAK,YAAYd,IAAI,CAACwB,QAA1B,EAAoC;AAAEL,IAAAA,aAAa,GAAGV,mBAAhB;AAAsC,GAA5E,MACA,IAAIK,KAAK,YAAYd,IAAI,CAACyB,IAA1B,EAAgC;AAAEN,IAAAA,aAAa,GAAGhB,UAAU,CAACuB,eAA3B;AAA6C,GARxF,CAUI;;;AACA,MAAIC,MAAM,GAAGpB,YAAY,CAACO,KAAK,CAACc,IAAP,EAAa,IAAb,EAAmBZ,MAAnB,EAA2BC,KAA3B,CAAzB;AACA,MAAIY,MAAM,GAAGrB,YAAY,CAACM,KAAK,CAACgB,GAAP,EAAY,IAAZ,EAAkBd,MAAlB,EAA0BC,KAA1B,CAAzB,CAZJ,CAcI;;AACA,MAAIc,IAAI,GAAGC,IAAI,CAACC,IAAL,CAAU1B,YAAY,CAACO,KAAK,CAACoB,KAAP,EAAc,KAAd,EAAqBlB,MAArB,EAA6BC,KAA7B,CAAtB,CAAX;AACA,MAAIkB,IAAI,GAAGH,IAAI,CAACC,IAAL,CAAUzB,YAAY,CAACM,KAAK,CAACsB,MAAP,EAAe,KAAf,EAAsBpB,MAAtB,EAA8BC,KAA9B,CAAtB,CAAX,CAhBJ,CAkBI;AACA;;AACA,MAAIoB,KAAK,GAAGL,IAAI,CAACM,GAAL,CAASP,IAAI,GAAGJ,MAAhB,EAAwB,CAAxB,CAAZ;AACA,MAAIY,MAAM,GAAGP,IAAI,CAACM,GAAL,CAASH,IAAI,GAAGN,MAAhB,EAAwB,CAAxB,CAAb;AACA,MAAIW,KAAK,GAAGtC,cAAc,CAACyB,MAAD,EAASE,MAAT,EAAiBQ,KAAjB,EAAwBE,MAAxB,EAAgCxB,gBAAhC,EAAkDE,KAAlD,CAA1B;AAEA,MAAIwB,SAAS,GAAGxB,KAAK,CAACwB,SAAtB;AACA,MAAIC,UAAU,GAAGzB,KAAK,CAACyB,UAAvB;;AACA,MAAIzB,KAAK,CAAC0B,YAAV,EACA;AACIF,IAAAA,SAAS,IAAIxB,KAAK,CAAC0B,YAAN,CAAmBC,MAAhC;AACAF,IAAAA,UAAU,IAAIzB,KAAK,CAAC0B,YAAN,CAAmBE,MAAjC;AACH;;AAED,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,QAAQ,GAAG,IAAI/C,IAAI,CAACsB,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBmB,SAAzB,EAAoCC,UAApC,CAAf;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EACA;AACI,QAAIE,IAAI,GAAGV,KAAK,CAACQ,CAAD,CAAhB;AACAD,IAAAA,QAAQ,CAACI,CAAT,GAAa9C,YAAY,CAAC6C,IAAI,CAACC,CAAN,EAASnC,MAAT,EAAiBC,KAAjB,CAAzB;AACA8B,IAAAA,QAAQ,CAACK,CAAT,GAAa9C,YAAY,CAAC4C,IAAI,CAACE,CAAN,EAASpC,MAAT,EAAiBC,KAAjB,CAAzB;;AACA,QAAIE,aAAa,CAACL,KAAD,EAAQiC,QAAR,CAAjB,EACA;AACID,MAAAA,OAAO,CAACO,IAAR,CAAaH,IAAb;AACH;AACJ;;AAED,SAAOJ,OAAP;AACH,CA/CD;;AAiDAQ,MAAM,CAACC,OAAP,GAAiB1C,mBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Geom = require('../../geom/');\r\nvar GetTilesWithin = require('./GetTilesWithin');\r\nvar Intersects = require('../../geom/intersects/');\r\nvar NOOP = require('../../utils/NOOP');\r\nvar TileToWorldX = require('./TileToWorldX');\r\nvar TileToWorldY = require('./TileToWorldY');\r\nvar WorldToTileX = require('./WorldToTileX');\r\nvar WorldToTileY = require('./WorldToTileY');\r\n\r\nvar TriangleToRectangle = function (triangle, rect)\r\n{\r\n    return Intersects.RectangleToTriangle(rect, triangle);\r\n};\r\n\r\n// Note: Could possibly be optimized by copying the shape and shifting it into tilemapLayer\r\n// coordinates instead of shifting the tiles.\r\n\r\n/**\r\n * Gets the tiles that overlap with the given shape in the given layer. The shape must be a Circle,\r\n * Line, Rectangle or Triangle. The shape should be in world coordinates.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTilesWithinShape\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {(Phaser.Geom.Circle|Phaser.Geom.Line|Phaser.Geom.Rectangle|Phaser.Geom.Triangle)} shape - A shape in world (pixel) coordinates\r\n * @param {object} [filteringOptions] - Optional filters to apply when getting the tiles.\r\n * @param {boolean} [filteringOptions.isNotEmpty=false] - If true, only return tiles that don't have -1 for an index.\r\n * @param {boolean} [filteringOptions.isColliding=false] - If true, only return tiles that collide on at least one side.\r\n * @param {boolean} [filteringOptions.hasInterestingFace=false] - If true, only return tiles that have at least one interesting face.\r\n * @param {Phaser.Cameras.Scene2D.Camera} [camera=main camera] - The Camera to use when calculating the tile index from the world values.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n *\r\n * @return {Phaser.Tilemaps.Tile[]} Array of Tile objects.\r\n */\r\nvar GetTilesWithinShape = function (shape, filteringOptions, camera, layer)\r\n{\r\n    if (shape === undefined) { return []; }\r\n\r\n    // intersectTest is a function with parameters: shape, rect\r\n    var intersectTest = NOOP;\r\n    if (shape instanceof Geom.Circle) { intersectTest = Intersects.CircleToRectangle; }\r\n    else if (shape instanceof Geom.Rectangle) { intersectTest = Intersects.RectangleToRectangle; }\r\n    else if (shape instanceof Geom.Triangle) { intersectTest = TriangleToRectangle; }\r\n    else if (shape instanceof Geom.Line) { intersectTest = Intersects.LineToRectangle; }\r\n\r\n    // Top left corner of the shapes's bounding box, rounded down to include partial tiles\r\n    var xStart = WorldToTileX(shape.left, true, camera, layer);\r\n    var yStart = WorldToTileY(shape.top, true, camera, layer);\r\n\r\n    // Bottom right corner of the shapes's bounding box, rounded up to include partial tiles\r\n    var xEnd = Math.ceil(WorldToTileX(shape.right, false, camera, layer));\r\n    var yEnd = Math.ceil(WorldToTileY(shape.bottom, false, camera, layer));\r\n\r\n    // Tiles within bounding rectangle of shape. Bounds are forced to be at least 1 x 1 tile in size\r\n    // to grab tiles for shapes that don't have a height or width (e.g. a horizontal line).\r\n    var width = Math.max(xEnd - xStart, 1);\r\n    var height = Math.max(yEnd - yStart, 1);\r\n    var tiles = GetTilesWithin(xStart, yStart, width, height, filteringOptions, layer);\r\n\r\n    var tileWidth = layer.tileWidth;\r\n    var tileHeight = layer.tileHeight;\r\n    if (layer.tilemapLayer)\r\n    {\r\n        tileWidth *= layer.tilemapLayer.scaleX;\r\n        tileHeight *= layer.tilemapLayer.scaleY;\r\n    }\r\n\r\n    var results = [];\r\n    var tileRect = new Geom.Rectangle(0, 0, tileWidth, tileHeight);\r\n    for (var i = 0; i < tiles.length; i++)\r\n    {\r\n        var tile = tiles[i];\r\n        tileRect.x = TileToWorldX(tile.x, camera, layer);\r\n        tileRect.y = TileToWorldY(tile.y, camera, layer);\r\n        if (intersectTest(shape, tileRect))\r\n        {\r\n            results.push(tile);\r\n        }\r\n    }\r\n\r\n    return results;\r\n};\r\n\r\nmodule.exports = GetTilesWithinShape;\r\n"]},"metadata":{},"sourceType":"script"}