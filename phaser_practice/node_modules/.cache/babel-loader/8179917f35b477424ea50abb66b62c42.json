{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * An external Scene JavaScript File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#sceneFile method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#sceneFile.\r\n *\r\n * @class SceneFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SceneFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar SceneFile = new Class({\n  Extends: File,\n  initialize: function SceneFile(loader, key, url, xhrSettings) {\n    var extension = 'js';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n    }\n\n    var fileConfig = {\n      type: 'text',\n      cache: loader.cacheManager.text,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.SceneFile#onProcess\r\n   * @since 3.16.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n    this.data = this.xhrLoader.responseText;\n    this.onProcessComplete();\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.SceneFile#addToCache\r\n   * @since 3.16.0\r\n   */\n  addToCache: function () {\n    var code = this.data.concat('(function(){\\n' + 'return new ' + this.key + '();\\n' + '}).call(this);'); //  Stops rollup from freaking out during build\n\n    var eval2 = eval;\n    this.loader.sceneManager.add(this.key, eval2(code));\n    this.complete = true;\n  }\n});\n/**\r\n * Adds an external Scene file, or array of Scene files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.sceneFile('Level1', 'src/Level1.js');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Scene Manager upon a successful load.\r\n * \r\n * For a Scene File it's vitally important that the key matches the class name in the JavaScript file.\r\n * \r\n * For example here is the source file:\r\n * \r\n * ```javascript\r\n * class ExternalScene extends Phaser.Scene {\r\n * \r\n *     constructor ()\r\n *     {\r\n *         super('myScene');\r\n *     }\r\n * \r\n * }\r\n * ```\r\n * \r\n * Because the class is called `ExternalScene` that is the exact same key you must use when loading it:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.sceneFile('ExternalScene', 'src/yourScene.js');\r\n * }\r\n * ```\r\n * \r\n * The key that is used within the Scene Manager can either be set to the same, or you can override it in the Scene\r\n * constructor, as we've done in the example above, where the Scene key was changed to `myScene`.\r\n * \r\n * The key should be unique both in terms of files being loaded and Scenes already present in the Scene Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Scene Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.sceneFile({\r\n *     key: 'Level1',\r\n *     url: 'src/Level1.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.SceneFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will be added to the Scene Manager.\r\n *\r\n * ```javascript\r\n * this.load.sceneFile('Level1', 'src/Level1.js');\r\n * // and later in your game ...\r\n * this.scene.start('Level1');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `WORLD1.` and the key was `Story` the final key will be `WORLD1.Story` and\r\n * this is what you would use to retrieve the text from the Scene Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"story\"\r\n * and no URL is given then the Loader will set the URL to be \"story.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Scene File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#sceneFile\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.16.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SceneFileConfig|Phaser.Types.Loader.FileTypes.SceneFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('sceneFile', function (key, url, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new SceneFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new SceneFile(this, key, url, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = SceneFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/SceneFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","SceneFile","Extends","initialize","loader","key","url","xhrSettings","extension","config","fileConfig","type","cache","cacheManager","text","responseType","call","onProcess","state","FILE_PROCESSING","data","xhrLoader","responseText","onProcessComplete","addToCache","code","concat","eval2","eval","sceneManager","add","complete","register","Array","isArray","i","length","addFile","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,qBAAD,CAA9B;;AACA,IAAII,YAAY,GAAGJ,OAAO,CAAC,iCAAD,CAA1B;;AACA,IAAIK,aAAa,GAAGL,OAAO,CAAC,kCAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBA,IAAIM,SAAS,GAAG,IAAIP,KAAJ,CAAU;AAEtBQ,EAAAA,OAAO,EAAEL,IAFa;AAItBM,EAAAA,UAAU,EAEV,SAASF,SAAT,CAAoBG,MAApB,EAA4BC,GAA5B,EAAiCC,GAAjC,EAAsCC,WAAtC,EACA;AACI,QAAIC,SAAS,GAAG,IAAhB;;AAEA,QAAIR,aAAa,CAACK,GAAD,CAAjB,EACA;AACI,UAAII,MAAM,GAAGJ,GAAb;AAEAA,MAAAA,GAAG,GAAGN,YAAY,CAACU,MAAD,EAAS,KAAT,CAAlB;AACAH,MAAAA,GAAG,GAAGP,YAAY,CAACU,MAAD,EAAS,KAAT,CAAlB;AACAF,MAAAA,WAAW,GAAGR,YAAY,CAACU,MAAD,EAAS,aAAT,CAA1B;AACAD,MAAAA,SAAS,GAAGT,YAAY,CAACU,MAAD,EAAS,WAAT,EAAsBD,SAAtB,CAAxB;AACH;;AAED,QAAIE,UAAU,GAAG;AACbC,MAAAA,IAAI,EAAE,MADO;AAEbC,MAAAA,KAAK,EAAER,MAAM,CAACS,YAAP,CAAoBC,IAFd;AAGbN,MAAAA,SAAS,EAAEA,SAHE;AAIbO,MAAAA,YAAY,EAAE,MAJD;AAKbV,MAAAA,GAAG,EAAEA,GALQ;AAMbC,MAAAA,GAAG,EAAEA,GANQ;AAObC,MAAAA,WAAW,EAAEA;AAPA,KAAjB;AAUAV,IAAAA,IAAI,CAACmB,IAAL,CAAU,IAAV,EAAgBZ,MAAhB,EAAwBM,UAAxB;AACH,GA/BqB;;AAiCtB;;;;;;;AAOAO,EAAAA,SAAS,EAAE,YACX;AACI,SAAKC,KAAL,GAAatB,KAAK,CAACuB,eAAnB;AAEA,SAAKC,IAAL,GAAY,KAAKC,SAAL,CAAeC,YAA3B;AAEA,SAAKC,iBAAL;AACH,GA/CqB;;AAiDtB;;;;;;AAMAC,EAAAA,UAAU,EAAE,YACZ;AACI,QAAIC,IAAI,GAAG,KAAKL,IAAL,CAAUM,MAAV,CAAiB,mBAAmB,aAAnB,GAAmC,KAAKrB,GAAxC,GAA8C,OAA9C,GAAwD,gBAAzE,CAAX,CADJ,CAGI;;AACA,QAAIsB,KAAK,GAAGC,IAAZ;AAEA,SAAKxB,MAAL,CAAYyB,YAAZ,CAAyBC,GAAzB,CAA6B,KAAKzB,GAAlC,EAAuCsB,KAAK,CAACF,IAAD,CAA5C;AAEA,SAAKM,QAAL,GAAgB,IAAhB;AACH;AAjEqB,CAAV,CAAhB;AAqEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FAjC,gBAAgB,CAACkC,QAAjB,CAA0B,WAA1B,EAAuC,UAAU3B,GAAV,EAAeC,GAAf,EAAoBC,WAApB,EACvC;AACI,MAAI0B,KAAK,CAACC,OAAN,CAAc7B,GAAd,CAAJ,EACA;AACI,SAAK,IAAI8B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG9B,GAAG,CAAC+B,MAAxB,EAAgCD,CAAC,EAAjC,EACA;AACI;AACA,WAAKE,OAAL,CAAa,IAAIpC,SAAJ,CAAc,IAAd,EAAoBI,GAAG,CAAC8B,CAAD,CAAvB,CAAb;AACH;AACJ,GAPD,MASA;AACI,SAAKE,OAAL,CAAa,IAAIpC,SAAJ,CAAc,IAAd,EAAoBI,GAApB,EAAyBC,GAAzB,EAA8BC,WAA9B,CAAb;AACH;;AAED,SAAO,IAAP;AACH,CAhBD;AAkBA+B,MAAM,CAACC,OAAP,GAAiBtC,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * An external Scene JavaScript File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#sceneFile method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#sceneFile.\r\n *\r\n * @class SceneFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.16.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SceneFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar SceneFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function SceneFile (loader, key, url, xhrSettings)\r\n    {\r\n        var extension = 'js';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'text',\r\n            cache: loader.cacheManager.text,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SceneFile#onProcess\r\n     * @since 3.16.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = this.xhrLoader.responseText;\r\n\r\n        this.onProcessComplete();\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SceneFile#addToCache\r\n     * @since 3.16.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var code = this.data.concat('(function(){\\n' + 'return new ' + this.key + '();\\n' + '}).call(this);');\r\n\r\n        //  Stops rollup from freaking out during build\r\n        var eval2 = eval;\r\n\r\n        this.loader.sceneManager.add(this.key, eval2(code));\r\n\r\n        this.complete = true;\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an external Scene file, or array of Scene files, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.sceneFile('Level1', 'src/Level1.js');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Scene Manager upon a successful load.\r\n * \r\n * For a Scene File it's vitally important that the key matches the class name in the JavaScript file.\r\n * \r\n * For example here is the source file:\r\n * \r\n * ```javascript\r\n * class ExternalScene extends Phaser.Scene {\r\n * \r\n *     constructor ()\r\n *     {\r\n *         super('myScene');\r\n *     }\r\n * \r\n * }\r\n * ```\r\n * \r\n * Because the class is called `ExternalScene` that is the exact same key you must use when loading it:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.sceneFile('ExternalScene', 'src/yourScene.js');\r\n * }\r\n * ```\r\n * \r\n * The key that is used within the Scene Manager can either be set to the same, or you can override it in the Scene\r\n * constructor, as we've done in the example above, where the Scene key was changed to `myScene`.\r\n * \r\n * The key should be unique both in terms of files being loaded and Scenes already present in the Scene Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Scene Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.sceneFile({\r\n *     key: 'Level1',\r\n *     url: 'src/Level1.js'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.SceneFileConfig` for more details.\r\n *\r\n * Once the file has finished loading it will be added to the Scene Manager.\r\n *\r\n * ```javascript\r\n * this.load.sceneFile('Level1', 'src/Level1.js');\r\n * // and later in your game ...\r\n * this.scene.start('Level1');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `WORLD1.` and the key was `Story` the final key will be `WORLD1.Story` and\r\n * this is what you would use to retrieve the text from the Scene Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"story\"\r\n * and no URL is given then the Loader will set the URL to be \"story.js\". It will always add `.js` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Scene File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#sceneFile\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.16.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SceneFileConfig|Phaser.Types.Loader.FileTypes.SceneFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.js`, i.e. if `key` was \"alien\" then the URL will be \"alien.js\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('sceneFile', function (key, url, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new SceneFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new SceneFile(this, key, url, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = SceneFile;\r\n"]},"metadata":{},"sourceType":"script"}