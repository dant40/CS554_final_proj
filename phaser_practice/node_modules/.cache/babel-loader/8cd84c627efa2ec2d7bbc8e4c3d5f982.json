{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Internally used method to keep track of the tile indexes that collide within a layer. This\r\n * updates LayerData.collideIndexes to either contain or not contain the given `tileIndex`.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetLayerCollisionIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileIndex - The tile index to set the collision boolean for.\r\n * @param {boolean} [collides=true] - Should the tile index collide or not?\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\nvar SetLayerCollisionIndex = function (tileIndex, collides, layer) {\n  var loc = layer.collideIndexes.indexOf(tileIndex);\n\n  if (collides && loc === -1) {\n    layer.collideIndexes.push(tileIndex);\n  } else if (!collides && loc !== -1) {\n    layer.collideIndexes.splice(loc, 1);\n  }\n};\n\nmodule.exports = SetLayerCollisionIndex;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/SetLayerCollisionIndex.js"],"names":["SetLayerCollisionIndex","tileIndex","collides","layer","loc","collideIndexes","indexOf","push","splice","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,sBAAsB,GAAG,UAAUC,SAAV,EAAqBC,QAArB,EAA+BC,KAA/B,EAC7B;AACI,MAAIC,GAAG,GAAGD,KAAK,CAACE,cAAN,CAAqBC,OAArB,CAA6BL,SAA7B,CAAV;;AAEA,MAAIC,QAAQ,IAAIE,GAAG,KAAK,CAAC,CAAzB,EACA;AACID,IAAAA,KAAK,CAACE,cAAN,CAAqBE,IAArB,CAA0BN,SAA1B;AACH,GAHD,MAIK,IAAI,CAACC,QAAD,IAAaE,GAAG,KAAK,CAAC,CAA1B,EACL;AACID,IAAAA,KAAK,CAACE,cAAN,CAAqBG,MAArB,CAA4BJ,GAA5B,EAAiC,CAAjC;AACH;AACJ,CAZD;;AAcAK,MAAM,CAACC,OAAP,GAAiBV,sBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Internally used method to keep track of the tile indexes that collide within a layer. This\r\n * updates LayerData.collideIndexes to either contain or not contain the given `tileIndex`.\r\n *\r\n * @function Phaser.Tilemaps.Components.SetLayerCollisionIndex\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileIndex - The tile index to set the collision boolean for.\r\n * @param {boolean} [collides=true] - Should the tile index collide or not?\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n */\r\nvar SetLayerCollisionIndex = function (tileIndex, collides, layer)\r\n{\r\n    var loc = layer.collideIndexes.indexOf(tileIndex);\r\n\r\n    if (collides && loc === -1)\r\n    {\r\n        layer.collideIndexes.push(tileIndex);\r\n    }\r\n    else if (!collides && loc !== -1)\r\n    {\r\n        layer.collideIndexes.splice(loc, 1);\r\n    }\r\n};\r\n\r\nmodule.exports = SetLayerCollisionIndex;\r\n"]},"metadata":{},"sourceType":"script"}