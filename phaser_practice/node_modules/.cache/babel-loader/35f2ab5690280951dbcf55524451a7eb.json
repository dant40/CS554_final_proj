{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar ALIGN_CONST = require('../../display/align/const');\n\nvar Axes = require('./lib/geometry/Axes');\n\nvar Bodies = require('./lib/factory/Bodies');\n\nvar Body = require('./lib/body/Body');\n\nvar BodyBounds = require('./BodyBounds');\n\nvar Bounds = require('./lib/geometry/Bounds');\n\nvar Class = require('../../utils/Class');\n\nvar Composite = require('./lib/body/Composite');\n\nvar Composites = require('./lib/factory/Composites');\n\nvar Constraint = require('./lib/constraint/Constraint');\n\nvar Detector = require('./lib/collision/Detector');\n\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\n\nvar Factory = require('./Factory');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar Grid = require('./lib/collision/Grid');\n\nvar MatterAttractors = require('./lib/plugins/MatterAttractors');\n\nvar MatterCollisionEvents = require('./lib/plugins/MatterCollisionEvents');\n\nvar MatterLib = require('./lib/core/Matter');\n\nvar MatterWrap = require('./lib/plugins/MatterWrap');\n\nvar Merge = require('../../utils/object/Merge');\n\nvar Pair = require('./lib/collision/Pair');\n\nvar Pairs = require('./lib/collision/Pairs');\n\nvar Plugin = require('./lib/core/Plugin');\n\nvar PluginCache = require('../../plugins/PluginCache');\n\nvar Query = require('./lib/collision/Query');\n\nvar Resolver = require('./lib/collision/Resolver');\n\nvar SAT = require('./lib/collision/SAT');\n\nvar SceneEvents = require('../../scene/events');\n\nvar Svg = require('./lib/geometry/Svg');\n\nvar Vector = require('./lib/geometry/Vector');\n\nvar Vertices = require('./lib/geometry/Vertices');\n\nvar World = require('./World');\n/**\r\n * @classdesc\r\n * The Phaser Matter plugin provides the ability to use the Matter JS Physics Engine within your Phaser games.\r\n * \r\n * Unlike Arcade Physics, the other physics system provided with Phaser, Matter JS is a full-body physics system.\r\n * It features:\r\n * \r\n * * Rigid bodies\r\n * * Compound bodies\r\n * * Composite bodies\r\n * * Concave and convex hulls\r\n * * Physical properties (mass, area, density etc.)\r\n * * Restitution (elastic and inelastic collisions)\r\n * * Collisions (broad-phase, mid-phase and narrow-phase)\r\n * * Stable stacking and resting\r\n * * Conservation of momentum\r\n * * Friction and resistance\r\n * * Constraints\r\n * * Gravity\r\n * * Sleeping and static bodies\r\n * * Rounded corners (chamfering)\r\n * * Views (translate, zoom)\r\n * * Collision queries (raycasting, region tests)\r\n * * Time scaling (slow-mo, speed-up)\r\n * \r\n * Configuration of Matter is handled via the Matter World Config object, which can be passed in either the\r\n * Phaser Game Config, or Phaser Scene Config. Here is a basic example:\r\n * \r\n * ```js\r\n * physics: {\r\n *     default: 'matter',\r\n *     matter: {\r\n *         enableSleeping: true,\r\n *         gravity: {\r\n *             y: 0\r\n *         },\r\n *         debug: {\r\n *             showBody: true,\r\n *             showStaticBody: true\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n * \r\n * This class acts as an interface between a Phaser Scene and a single instance of the Matter Engine.\r\n * \r\n * Use it to access the most common Matter features and helper functions.\r\n * \r\n * You can find details, documentation and examples on the Matter JS website: https://brm.io/matter-js/\r\n *\r\n * @class MatterPhysics\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Phaser Scene that owns this Matter Physics instance.\r\n */\n\n\nvar MatterPhysics = new Class({\n  initialize: function MatterPhysics(scene) {\n    /**\r\n     * The Phaser Scene that owns this Matter Physics instance\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#scene\r\n     * @type {Phaser.Scene}\r\n     * @since 3.0.0\r\n     */\n    this.scene = scene;\n    /**\r\n     * A reference to the Scene Systems that belong to the Scene owning this Matter Physics instance.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#systems\r\n     * @type {Phaser.Scenes.Systems}\r\n     * @since 3.0.0\r\n     */\n\n    this.systems = scene.sys;\n    /**\r\n     * The parsed Matter Configuration object.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#config\r\n     * @type {Phaser.Types.Physics.Matter.MatterWorldConfig}\r\n     * @since 3.0.0\r\n     */\n\n    this.config = this.getConfig();\n    /**\r\n     * An instance of the Matter World class. This class is responsible for the updating of the\r\n     * Matter Physics world, as well as handling debug drawing functions.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#world\r\n     * @type {Phaser.Physics.Matter.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world;\n    /**\r\n     * An instance of the Matter Factory. This class provides lots of functions for creating a\r\n     * wide variety of physics objects and adds them automatically to the Matter World.\r\n     * \r\n     * You can use this class to cut-down on the amount of code required in your game, however,\r\n     * use of the Factory is entirely optional and should be seen as a development aid. It's\r\n     * perfectly possible to create and add components to the Matter world without using it.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#add\r\n     * @type {Phaser.Physics.Matter.Factory}\r\n     * @since 3.0.0\r\n     */\n\n    this.add;\n    /**\r\n     * An instance of the Body Bounds class. This class contains functions used for getting the\r\n     * world position from various points around the bounds of a physics body.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#bodyBounds\r\n     * @type {Phaser.Physics.Matter.BodyBounds}\r\n     * @since 3.22.0\r\n     */\n\n    this.bodyBounds; //  Body\n\n    /**\r\n     * A reference to the `Matter.Body` module.\r\n     * \r\n     * The `Matter.Body` module contains methods for creating and manipulating body models.\r\n     * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\r\n     * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the `Bodies` module.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#body\r\n     * @type {MatterJS.BodyFactory}\r\n     * @since 3.18.0\r\n     */\n\n    this.body = Body;\n    /**\r\n     * A reference to the `Matter.Composite` module.\r\n     * \r\n     * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\r\n     * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\r\n     * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\r\n     * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#composite\r\n     * @type {MatterJS.CompositeFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.composite = Composite; //  Collision:\n\n    /**\r\n     * A reference to the `Matter.Detector` module.\r\n     * \r\n     * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#detector\r\n     * @type {MatterJS.DetectorFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.detector = Detector;\n    /**\r\n     * A reference to the `Matter.Grid` module.\r\n     * \r\n     * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#grid\r\n     * @type {MatterJS.GridFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.grid = Grid;\n    /**\r\n     * A reference to the `Matter.Pair` module.\r\n     * \r\n     * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#pair\r\n     * @type {MatterJS.PairFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.pair = Pair;\n    /**\r\n     * A reference to the `Matter.Pairs` module.\r\n     * \r\n     * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#pairs\r\n     * @type {MatterJS.PairsFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.pairs = Pairs;\n    /**\r\n     * A reference to the `Matter.Query` module.\r\n     * \r\n     * The `Matter.Query` module contains methods for performing collision queries.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#query\r\n     * @type {MatterJS.QueryFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.query = Query;\n    /**\r\n     * A reference to the `Matter.Resolver` module.\r\n     * \r\n     * The `Matter.Resolver` module contains methods for resolving collision pairs.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#resolver\r\n     * @type {MatterJS.ResolverFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.resolver = Resolver;\n    /**\r\n     * A reference to the `Matter.SAT` module.\r\n     * \r\n     * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#sat\r\n     * @type {MatterJS.SATFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.sat = SAT; //  Constraint\n\n    /**\r\n     * A reference to the `Matter.Constraint` module.\r\n     * \r\n     * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n     * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n     * The stiffness of constraints can be modified to create springs or elastic.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#constraint\r\n     * @type {MatterJS.ConstraintFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.constraint = Constraint; //  Factory\n\n    /**\r\n     * A reference to the `Matter.Bodies` module.\r\n     * \r\n     * The `Matter.Bodies` module contains factory methods for creating rigid bodies\r\n     * with commonly used body configurations (such as rectangles, circles and other polygons).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#bodies\r\n     * @type {MatterJS.BodiesFactory}\r\n     * @since 3.18.0\r\n     */\n\n    this.bodies = Bodies;\n    /**\r\n     * A reference to the `Matter.Composites` module.\r\n     * \r\n     * The `Matter.Composites` module contains factory methods for creating composite bodies\r\n     * with commonly used configurations (such as stacks and chains).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#composites\r\n     * @type {MatterJS.CompositesFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.composites = Composites; //  Geometry\n\n    /**\r\n     * A reference to the `Matter.Axes` module.\r\n     * \r\n     * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#axes\r\n     * @type {MatterJS.AxesFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.axes = Axes;\n    /**\r\n     * A reference to the `Matter.Bounds` module.\r\n     * \r\n     * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#bounds\r\n     * @type {MatterJS.BoundsFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.bounds = Bounds;\n    /**\r\n     * A reference to the `Matter.Svg` module.\r\n     * \r\n     * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\r\n     *\r\n     * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#svg\r\n     * @type {MatterJS.SvgFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.svg = Svg;\n    /**\r\n     * A reference to the `Matter.Vector` module.\r\n     * \r\n     * The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n     * Vectors are the basis of all the geometry related operations in the engine.\r\n     * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#vector\r\n     * @type {MatterJS.VectorFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.vector = Vector;\n    /**\r\n     * A reference to the `Matter.Vertices` module.\r\n     * \r\n     * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n     * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n     * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#vertices\r\n     * @type {MatterJS.VerticesFactory}\r\n     * @since 3.22.0\r\n     */\n\n    this.vertices = Vertices;\n    /**\r\n     * A reference to the `Matter.Vertices` module.\r\n     * \r\n     * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n     * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n     * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#verts\r\n     * @type {MatterJS.VerticesFactory}\r\n     * @since 3.14.0\r\n     */\n\n    this.verts = Vertices;\n    /**\r\n     * An internal temp vector used for velocity and force calculations.\r\n     *\r\n     * @name Phaser.Physics.Matter.MatterPhysics#_tempVec2\r\n     * @type {MatterJS.Vector}\r\n     * @private\r\n     * @since 3.22.0\r\n     */\n\n    this._tempVec2 = Vector.create(); //  Matter plugins\n\n    if (GetValue(this.config, 'plugins.collisionevents', true)) {\n      this.enableCollisionEventsPlugin();\n    }\n\n    if (GetValue(this.config, 'plugins.attractors', false)) {\n      this.enableAttractorPlugin();\n    }\n\n    if (GetValue(this.config, 'plugins.wrap', false)) {\n      this.enableWrapPlugin();\n    }\n\n    Resolver._restingThresh = GetValue(this.config, 'restingThresh', 4);\n    Resolver._restingThreshTangent = GetValue(this.config, 'restingThreshTangent', 6);\n    Resolver._positionDampen = GetValue(this.config, 'positionDampen', 0.9);\n    Resolver._positionWarming = GetValue(this.config, 'positionWarming', 0.8);\n    Resolver._frictionNormalMultiplier = GetValue(this.config, 'frictionNormalMultiplier', 5);\n    scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\n    scene.sys.events.on(SceneEvents.START, this.start, this);\n  },\n\n  /**\r\n   * This method is called automatically, only once, when the Scene is first created.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#boot\r\n   * @private\r\n   * @since 3.5.1\r\n   */\n  boot: function () {\n    this.world = new World(this.scene, this.config);\n    this.add = new Factory(this.world);\n    this.bodyBounds = new BodyBounds();\n    this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\n  },\n\n  /**\r\n   * This method is called automatically by the Scene when it is starting up.\r\n   * It is responsible for creating local systems, properties and listening for Scene events.\r\n   * Do not invoke it directly.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#start\r\n   * @private\r\n   * @since 3.5.0\r\n   */\n  start: function () {\n    if (!this.world) {\n      this.world = new World(this.scene, this.config);\n      this.add = new Factory(this.world);\n    }\n\n    var eventEmitter = this.systems.events;\n    eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\n    eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\n    eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\n  },\n\n  /**\r\n   * This internal method is called when this class starts and retrieves the final Matter World Config.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#getConfig\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Types.Physics.Matter.MatterWorldConfig} The Matter World Config.\r\n   */\n  getConfig: function () {\n    var gameConfig = this.systems.game.config.physics;\n    var sceneConfig = this.systems.settings.physics;\n    var config = Merge(GetFastValue(sceneConfig, 'matter', {}), GetFastValue(gameConfig, 'matter', {}));\n    return config;\n  },\n\n  /**\r\n   * Enables the Matter Attractors Plugin.\r\n   * \r\n   * The attractors plugin that makes it easy to apply continual forces on bodies.\r\n   * It's possible to simulate effects such as wind, gravity and magnetism.\r\n   * \r\n   * https://github.com/liabru/matter-attractors\r\n   * \r\n   * This method is called automatically if `plugins.attractors` is set in the Matter World Config.\r\n   * However, you can also call it directly from within your game.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#enableAttractorPlugin\r\n   * @since 3.0.0\r\n   * \r\n   * @return {this} This Matter Physics instance.\r\n   */\n  enableAttractorPlugin: function () {\n    Plugin.register(MatterAttractors);\n    Plugin.use(MatterLib, MatterAttractors);\n    return this;\n  },\n\n  /**\r\n   * Enables the Matter Wrap Plugin.\r\n   * \r\n   * The coordinate wrapping plugin that automatically wraps the position of bodies such that they always stay\r\n   * within the given bounds. Upon crossing a boundary the body will appear on the opposite side of the bounds,\r\n   * while maintaining its velocity.\r\n   * \r\n   * https://github.com/liabru/matter-wrap\r\n   * \r\n   * This method is called automatically if `plugins.wrap` is set in the Matter World Config.\r\n   * However, you can also call it directly from within your game.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#enableWrapPlugin\r\n   * @since 3.0.0\r\n   * \r\n   * @return {this} This Matter Physics instance.\r\n   */\n  enableWrapPlugin: function () {\n    Plugin.register(MatterWrap);\n    Plugin.use(MatterLib, MatterWrap);\n    return this;\n  },\n\n  /**\r\n   * Enables the Matter Collision Events Plugin.\r\n   * \r\n   * Note that this plugin is enabled by default. So you should only ever need to call this\r\n   * method if you have specifically disabled the plugin in your Matter World Config.\r\n   * You can disable it by setting `plugins.collisionevents: false` in your Matter World Config.\r\n   * \r\n   * This plugin triggers three new events on Matter.Body:\r\n   * \r\n   * 1. `onCollide`\r\n   * 2. `onCollideEnd`\r\n   * 3. `onCollideActive`\r\n   * \r\n   * These events correspond to the Matter.js events `collisionStart`, `collisionActive` and `collisionEnd`, respectively.\r\n   * You can listen to these events via Matter.Events or they will also be emitted from the Matter World.\r\n   * \r\n   * This plugin also extends Matter.Body with three convenience functions:\r\n   * \r\n   * `Matter.Body.setOnCollide(callback)`\r\n   * `Matter.Body.setOnCollideEnd(callback)`\r\n   * `Matter.Body.setOnCollideActive(callback)`\r\n   * \r\n   * You can register event callbacks by providing a function of type (pair: Matter.Pair) => void\r\n   * \r\n   * https://github.com/dxu/matter-collision-events\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#enableCollisionEventsPlugin\r\n   * @since 3.22.0\r\n   * \r\n   * @return {this} This Matter Physics instance.\r\n   */\n  enableCollisionEventsPlugin: function () {\n    Plugin.register(MatterCollisionEvents);\n    Plugin.use(MatterLib, MatterCollisionEvents);\n    return this;\n  },\n\n  /**\r\n   * Pauses the Matter World instance and sets `enabled` to `false`.\r\n   * \r\n   * A paused world will not run any simulations for the duration it is paused.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#pause\r\n   * @fires Phaser.Physics.Matter.Events#PAUSE\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n   */\n  pause: function () {\n    return this.world.pause();\n  },\n\n  /**\r\n   * Resumes this Matter World instance from a paused state and sets `enabled` to `true`.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#resume\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n   */\n  resume: function () {\n    return this.world.resume();\n  },\n\n  /**\r\n   * Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\r\n   * If you have set a custom `getDelta` function then this will override it.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#set60Hz\r\n   * @since 3.4.0\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  set60Hz: function () {\n    this.world.getDelta = this.world.update60Hz;\n    this.world.autoUpdate = true;\n    return this;\n  },\n\n  /**\r\n   * Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\r\n   * If you have set a custom `getDelta` function then this will override it.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#set30Hz\r\n   * @since 3.4.0\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  set30Hz: function () {\n    this.world.getDelta = this.world.update30Hz;\n    this.world.autoUpdate = true;\n    return this;\n  },\n\n  /**\r\n   * Manually advances the physics simulation by one iteration.\r\n   * \r\n   * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n   * If undefined they use the Matter defaults of 60Hz and no correction.\r\n   * \r\n   * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n   * \r\n   * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n   * value in to this call.\r\n   *\r\n   * You can adjust the number of iterations that Engine.update performs internally.\r\n   * Use the Scene Matter Physics config object to set the following properties:\r\n   *\r\n   * positionIterations (defaults to 6)\r\n   * velocityIterations (defaults to 4)\r\n   * constraintIterations (defaults to 2)\r\n   *\r\n   * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n   * of your game.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#step\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} [delta=16.666] - The delta value.\r\n   * @param {number} [correction=1] - Optional delta correction value.\r\n   */\n  step: function (delta, correction) {\n    this.world.step(delta, correction);\n  },\n\n  /**\r\n   * Checks if the vertices of the given body, or an array of bodies, contains the given point, or not.\r\n   * \r\n   * You can pass in either a single body, or an array of bodies to be checked. This method will\r\n   * return `true` if _any_ of the bodies in the array contain the point. See the `intersectPoint` method if you need\r\n   * to get a list of intersecting bodies.\r\n   * \r\n   * The point should be transformed into the Matter World coordinate system in advance. This happens by\r\n   * default with Input Pointers, but if you wish to use points from another system you may need to\r\n   * transform them before passing them.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#containsPoint\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} body - The body, or an array of bodies, to check against the point.\r\n   * @param {number} x - The horizontal coordinate of the point.\r\n   * @param {number} y - The vertical coordinate of the point.\r\n   * \r\n   * @return {boolean} `true` if the point is within one of the bodies given, otherwise `false`.\r\n   */\n  containsPoint: function (body, x, y) {\n    body = this.getMatterBodies(body);\n    var position = Vector.create(x, y);\n    var result = Query.point(body, position);\n    return result.length > 0 ? true : false;\n  },\n\n  /**\r\n   * Checks the given coordinates to see if any vertices of the given bodies contain it.\r\n   * \r\n   * If no bodies are provided it will search all bodies in the Matter World, including within Composites.\r\n   * \r\n   * The coordinates should be transformed into the Matter World coordinate system in advance. This happens by\r\n   * default with Input Pointers, but if you wish to use coordinates from another system you may need to\r\n   * transform them before passing them.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#intersectPoint\r\n   * @since 3.22.0\r\n   *\r\n   * @param {number} x - The horizontal coordinate of the point.\r\n   * @param {number} y - The vertical coordinate of the point.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n   * \r\n   * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies which contain the given point.\r\n   */\n  intersectPoint: function (x, y, bodies) {\n    bodies = this.getMatterBodies(bodies);\n    var position = Vector.create(x, y);\n    var output = [];\n    var result = Query.point(bodies, position);\n    result.forEach(function (body) {\n      if (output.indexOf(body) === -1) {\n        output.push(body);\n      }\n    });\n    return output;\n  },\n\n  /**\r\n   * Checks the given rectangular area to see if any vertices of the given bodies intersect with it.\r\n   * Or, if the `outside` parameter is set to `true`, it checks to see which bodies do not\r\n   * intersect with it.\r\n   * \r\n   * If no bodies are provided it will search all bodies in the Matter World, including within Composites.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#intersectRect\r\n   * @since 3.22.0\r\n   *\r\n   * @param {number} x - The horizontal coordinate of the top-left of the area.\r\n   * @param {number} y - The vertical coordinate of the top-left of the area.\r\n   * @param {number} width - The width of the area.\r\n   * @param {number} height - The height of the area.\r\n   * @param {boolean} [outside=false] - If `false` it checks for vertices inside the area, if `true` it checks for vertices outside the area.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n   * \r\n   * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies that intersect with the given area.\r\n   */\n  intersectRect: function (x, y, width, height, outside, bodies) {\n    if (outside === undefined) {\n      outside = false;\n    }\n\n    bodies = this.getMatterBodies(bodies);\n    var bounds = {\n      min: {\n        x: x,\n        y: y\n      },\n      max: {\n        x: x + width,\n        y: y + height\n      }\n    };\n    var output = [];\n    var result = Query.region(bodies, bounds, outside);\n    result.forEach(function (body) {\n      if (output.indexOf(body) === -1) {\n        output.push(body);\n      }\n    });\n    return output;\n  },\n\n  /**\r\n   * Checks the given ray segment to see if any vertices of the given bodies intersect with it.\r\n   * \r\n   * If no bodies are provided it will search all bodies in the Matter World.\r\n   * \r\n   * The width of the ray can be specified via the `rayWidth` parameter.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#intersectRay\r\n   * @since 3.22.0\r\n   *\r\n   * @param {number} x1 - The horizontal coordinate of the start of the ray segment.\r\n   * @param {number} y1 - The vertical coordinate of the start of the ray segment.\r\n   * @param {number} x2 - The horizontal coordinate of the end of the ray segment.\r\n   * @param {number} y2 - The vertical coordinate of the end of the ray segment.\r\n   * @param {number} [rayWidth=1] - The width of the ray segment.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n   * \r\n   * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies whos vertices intersect with the ray segment.\r\n   */\n  intersectRay: function (x1, y1, x2, y2, rayWidth, bodies) {\n    if (rayWidth === undefined) {\n      rayWidth = 1;\n    }\n\n    bodies = this.getMatterBodies(bodies);\n    var result = [];\n    var collisions = Query.ray(bodies, Vector.create(x1, y1), Vector.create(x2, y2), rayWidth);\n\n    for (var i = 0; i < collisions.length; i++) {\n      result.push(collisions[i].body);\n    }\n\n    return result;\n  },\n\n  /**\r\n   * Checks the given Matter Body to see if it intersects with any of the given bodies.\r\n   * \r\n   * If no bodies are provided it will check against all bodies in the Matter World.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#intersectBody\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody} body - The target body.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check the target body against. If not provided it will search all bodies in the world.\r\n   * \r\n   * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies whos vertices intersect with target body.\r\n   */\n  intersectBody: function (body, bodies) {\n    bodies = this.getMatterBodies(bodies);\n    var result = [];\n    var collisions = Query.collides(body, bodies);\n\n    for (var i = 0; i < collisions.length; i++) {\n      var pair = collisions[i];\n\n      if (pair.bodyA === body) {\n        result.push(pair.bodyB);\n      } else {\n        result.push(pair.bodyA);\n      }\n    }\n\n    return result;\n  },\n\n  /**\r\n   * Checks to see if the target body, or an array of target bodies, intersects with any of the given bodies.\r\n   * \r\n   * If intersection occurs this method will return `true` and, if provided, invoke the callbacks.\r\n   * \r\n   * If no bodies are provided for the second parameter the target will check again all bodies in the Matter World.\r\n   * \r\n   * Note that bodies can only overlap if they are in non-colliding collision groups or categories.\r\n   * \r\n   * If you provide a `processCallback` then the two bodies that overlap are sent to it. This callback\r\n   * must return a boolean and is used to allow you to perform additional processing tests before a final\r\n   * outcome is decided. If it returns `true` then the bodies are finally passed to the `overlapCallback`, if set.\r\n   * \r\n   * If you provide an `overlapCallback` then the matching pairs of overlapping bodies will be sent to it.\r\n   * \r\n   * Both callbacks have the following signature: `function (bodyA, bodyB, collisionInfo)` where `bodyA` is always\r\n   * the target body. The `collisionInfo` object contains additional data, such as the angle and depth of penetration.\r\n   * \r\n   * @method Phaser.Physics.Matter.MatterPhysics#overlap\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} target - The target body, or array of target bodies, to check.\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - The second body, or array of bodies, to check. If falsey it will check against all bodies in the world.\r\n   * @param {ArcadePhysicsCallback} [overlapCallback] - An optional callback function that is called if the bodies overlap.\r\n   * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two bodies if they overlap. If this is set then `overlapCallback` will only be invoked if this callback returns `true`.\r\n   * @param {*} [callbackContext] - The context, or scope, in which to run the callbacks.\r\n   * \r\n   * @return {boolean} `true` if the target body intersects with _any_ of the bodies given, otherwise `false`.\r\n   */\n  overlap: function (target, bodies, overlapCallback, processCallback, callbackContext) {\n    if (overlapCallback === undefined) {\n      overlapCallback = null;\n    }\n\n    if (processCallback === undefined) {\n      processCallback = null;\n    }\n\n    if (callbackContext === undefined) {\n      callbackContext = overlapCallback;\n    }\n\n    if (!Array.isArray(target)) {\n      target = [target];\n    }\n\n    target = this.getMatterBodies(target);\n    bodies = this.getMatterBodies(bodies);\n    var match = false;\n\n    for (var i = 0; i < target.length; i++) {\n      var entry = target[i];\n      var collisions = Query.collides(entry, bodies);\n\n      for (var c = 0; c < collisions.length; c++) {\n        var info = collisions[c];\n        var bodyB = info.bodyA.id === entry.id ? info.bodyB : info.bodyA;\n\n        if (!processCallback || processCallback.call(callbackContext, entry, bodyB, info)) {\n          match = true;\n\n          if (overlapCallback) {\n            overlapCallback.call(callbackContext, entry, bodyB, info);\n          } else if (!processCallback) {\n            //  If there are no callbacks we don't need to test every body, just exit when the first is found\n            return true;\n          }\n        }\n      }\n    }\n\n    return match;\n  },\n\n  /**\r\n   * Sets the collision filter category of all given Matter Bodies to the given value.\r\n   * \r\n   * This number must be a power of two between 2^0 (= 1) and 2^31.\r\n   * \r\n   * Bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\r\n   * categories are included in their collision masks (see {@link #setCollidesWith}).\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setCollisionCategory\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} value - Unique category bitfield.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setCollisionCategory: function (bodies, value) {\n    bodies = this.getMatterBodies(bodies);\n    bodies.forEach(function (body) {\n      body.collisionFilter.category = value;\n    });\n    return this;\n  },\n\n  /**\r\n   * Sets the collision filter group of all given Matter Bodies to the given value.\r\n   * \r\n   * If the group value is zero, or if two Matter Bodies have different group values,\r\n   * they will collide according to the usual collision filter rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\r\n   * \r\n   * If two Matter Bodies have the same positive group value, they will always collide;\r\n   * if they have the same negative group value they will never collide.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setCollisionGroup\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} value - Unique group index.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setCollisionGroup: function (bodies, value) {\n    bodies = this.getMatterBodies(bodies);\n    bodies.forEach(function (body) {\n      body.collisionFilter.group = value;\n    });\n    return this;\n  },\n\n  /**\r\n   * Sets the collision filter mask of all given Matter Bodies to the given value.\r\n   * \r\n   * Two Matter Bodies with different collision groups will only collide if each one includes the others\r\n   * category in its mask based on a bitwise AND operation: `(categoryA & maskB) !== 0` and \r\n   * `(categoryB & maskA) !== 0` are both true.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setCollidesWith\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setCollidesWith: function (bodies, categories) {\n    bodies = this.getMatterBodies(bodies);\n    var flags = 0;\n\n    if (!Array.isArray(categories)) {\n      flags = categories;\n    } else {\n      for (var i = 0; i < categories.length; i++) {\n        flags |= categories[i];\n      }\n    }\n\n    bodies.forEach(function (body) {\n      body.collisionFilter.mask = flags;\n    });\n    return this;\n  },\n\n  /**\r\n   * Takes an array and returns a new array made from all of the Matter Bodies found in the original array.\r\n   * \r\n   * For example, passing in Matter Game Objects, such as a bunch of Matter Sprites, to this method, would\r\n   * return an array containing all of their native Matter Body objects.\r\n   * \r\n   * If the `bodies` argument is falsey, it will return all bodies in the world.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#getMatterBodies\r\n   * @since 3.22.0\r\n   *\r\n   * @param {array} [bodies] - An array of objects to extract the bodies from. If falsey, it will return all bodies in the world.\r\n   *\r\n   * @return {MatterJS.BodyType[]} An array of native Matter Body objects.\r\n   */\n  getMatterBodies: function (bodies) {\n    if (!bodies) {\n      return this.world.getAllBodies();\n    }\n\n    if (!Array.isArray(bodies)) {\n      bodies = [bodies];\n    }\n\n    var output = [];\n\n    for (var i = 0; i < bodies.length; i++) {\n      var body = bodies[i].hasOwnProperty('body') ? bodies[i].body : bodies[i];\n      output.push(body);\n    }\n\n    return output;\n  },\n\n  /**\r\n   * Sets both the horizontal and vertical linear velocity of the physics bodies.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setVelocity\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} x - The horizontal linear velocity value.\r\n   * @param {number} y - The vertical linear velocity value.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setVelocity: function (bodies, x, y) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    vec2.x = x;\n    vec2.y = y;\n    bodies.forEach(function (body) {\n      Body.setVelocity(body, vec2);\n    });\n    return this;\n  },\n\n  /**\r\n   * Sets just the horizontal linear velocity of the physics bodies.\r\n   * The vertical velocity of the body is unchanged.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setVelocityX\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} x - The horizontal linear velocity value.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setVelocityX: function (bodies, x) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    vec2.x = x;\n    bodies.forEach(function (body) {\n      vec2.y = body.velocity.y;\n      Body.setVelocity(body, vec2);\n    });\n    return this;\n  },\n\n  /**\r\n   * Sets just the vertical linear velocity of the physics bodies.\r\n   * The horizontal velocity of the body is unchanged.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setVelocityY\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} y - The vertical linear velocity value.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setVelocityY: function (bodies, y) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    vec2.y = y;\n    bodies.forEach(function (body) {\n      vec2.x = body.velocity.x;\n      Body.setVelocity(body, vec2);\n    });\n    return this;\n  },\n\n  /**\r\n   * Sets the angular velocity of the bodies instantly.\r\n   * Position, angle, force etc. are unchanged.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#setAngularVelocity\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} value - The angular velocity.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  setAngularVelocity: function (bodies, value) {\n    bodies = this.getMatterBodies(bodies);\n    bodies.forEach(function (body) {\n      Body.setAngularVelocity(body, value);\n    });\n    return this;\n  },\n\n  /**\r\n   * Applies a force to a body, at the bodies current position, including resulting torque.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#applyForce\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {Phaser.Types.Math.Vector2Like} force - A Vector that specifies the force to apply.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  applyForce: function (bodies, force) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    bodies.forEach(function (body) {\n      vec2.x = body.position.x;\n      vec2.y = body.position.y;\n      Body.applyForce(body, vec2, force);\n    });\n    return this;\n  },\n\n  /**\r\n   * Applies a force to a body, from the given world position, including resulting torque.\r\n   * If no angle is given, the current body angle is used.\r\n   * \r\n   * Use very small speed values, such as 0.1, depending on the mass and required velocity.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#applyForceFromPosition\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {Phaser.Types.Math.Vector2Like} position - A Vector that specifies the world-space position to apply the force at.\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   * @param {number} [angle] - The angle, in radians, to apply the force from. Leave undefined to use the current body angle.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  applyForceFromPosition: function (bodies, position, speed, angle) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    bodies.forEach(function (body) {\n      if (angle === undefined) {\n        angle = body.angle;\n      }\n\n      vec2.x = speed * Math.cos(angle);\n      vec2.y = speed * Math.sin(angle);\n      Body.applyForce(body, position, vec2);\n    });\n    return this;\n  },\n\n  /**\r\n   * Apply a force to a body based on the given angle and speed.\r\n   * If no angle is given, the current body angle is used.\r\n   * \r\n   * Use very small speed values, such as 0.1, depending on the mass and required velocity.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#applyForceFromAngle\r\n   * @since 3.22.0\r\n   *\r\n   * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n   * @param {number} speed - A speed value to be applied to a directional force.\r\n   * @param {number} [angle] - The angle, in radians, to apply the force from. Leave undefined to use the current body angle.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  applyForceFromAngle: function (bodies, speed, angle) {\n    bodies = this.getMatterBodies(bodies);\n    var vec2 = this._tempVec2;\n    bodies.forEach(function (body) {\n      if (angle === undefined) {\n        angle = body.angle;\n      }\n\n      vec2.x = speed * Math.cos(angle);\n      vec2.y = speed * Math.sin(angle);\n      Body.applyForce(body, {\n        x: body.position.x,\n        y: body.position.y\n      }, vec2);\n    });\n    return this;\n  },\n\n  /**\r\n   * Returns the length of the given constraint, which is the distance between the two points.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#getConstraintLength\r\n   * @since 3.22.0\r\n   *\r\n   * @param {MatterJS.ConstraintType} constraint - The constraint to get the length from.\r\n   *\r\n   * @return {number} The length of the constraint.\r\n   */\n  getConstraintLength: function (constraint) {\n    var aX = constraint.pointA.x;\n    var aY = constraint.pointA.y;\n    var bX = constraint.pointB.x;\n    var bY = constraint.pointB.y;\n\n    if (constraint.bodyA) {\n      aX += constraint.bodyA.position.x;\n      aY += constraint.bodyA.position.y;\n    }\n\n    if (constraint.bodyB) {\n      bX += constraint.bodyB.position.x;\n      bY += constraint.bodyB.position.y;\n    }\n\n    return DistanceBetween(aX, aY, bX, bY);\n  },\n\n  /**\r\n   * Aligns a Body, or Matter Game Object, against the given coordinates.\r\n   * \r\n   * The alignment takes place using the body bounds, which take into consideration things\r\n   * like body scale and rotation.\r\n   * \r\n   * Although a Body has a `position` property, it is based on the center of mass for the body,\r\n   * not a dimension based center. This makes aligning bodies difficult, especially if they have\r\n   * rotated or scaled. This method will derive the correct position based on the body bounds and\r\n   * its center of mass offset, in order to align the body with the given coordinate.\r\n   * \r\n   * For example, if you wanted to align a body so it sat in the bottom-center of the\r\n   * Scene, and the world was 800 x 600 in size:\r\n   * \r\n   * ```javascript\r\n   * this.matter.alignBody(body, 400, 600, Phaser.Display.Align.BOTTOM_CENTER);\r\n   * ```\r\n   * \r\n   * You pass in 400 for the x coordinate, because that is the center of the world, and 600 for\r\n   * the y coordinate, as that is the base of the world.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#alignBody\r\n   * @since 3.22.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Matter.MatterBody} body - The Body to align.\r\n   * @param {number} x - The horizontal position to align the body to.\r\n   * @param {number} y - The vertical position to align the body to.\r\n   * @param {integer} align - One of the `Phaser.Display.Align` constants, such as `Phaser.Display.Align.TOP_LEFT`.\r\n   *\r\n   * @return {this} This Matter Physics instance.\r\n   */\n  alignBody: function (body, x, y, align) {\n    body = body.hasOwnProperty('body') ? body.body : body;\n    var pos;\n\n    switch (align) {\n      case ALIGN_CONST.TOP_LEFT:\n      case ALIGN_CONST.LEFT_TOP:\n        pos = this.bodyBounds.getTopLeft(body, x, y);\n        break;\n\n      case ALIGN_CONST.TOP_CENTER:\n        pos = this.bodyBounds.getTopCenter(body, x, y);\n        break;\n\n      case ALIGN_CONST.TOP_RIGHT:\n      case ALIGN_CONST.RIGHT_TOP:\n        pos = this.bodyBounds.getTopRight(body, x, y);\n        break;\n\n      case ALIGN_CONST.LEFT_CENTER:\n        pos = this.bodyBounds.getLeftCenter(body, x, y);\n        break;\n\n      case ALIGN_CONST.CENTER:\n        pos = this.bodyBounds.getCenter(body, x, y);\n        break;\n\n      case ALIGN_CONST.RIGHT_CENTER:\n        pos = this.bodyBounds.getRightCenter(body, x, y);\n        break;\n\n      case ALIGN_CONST.LEFT_BOTTOM:\n      case ALIGN_CONST.BOTTOM_LEFT:\n        pos = this.bodyBounds.getBottomLeft(body, x, y);\n        break;\n\n      case ALIGN_CONST.BOTTOM_CENTER:\n        pos = this.bodyBounds.getBottomCenter(body, x, y);\n        break;\n\n      case ALIGN_CONST.BOTTOM_RIGHT:\n      case ALIGN_CONST.RIGHT_BOTTOM:\n        pos = this.bodyBounds.getBottomRight(body, x, y);\n        break;\n    }\n\n    if (pos) {\n      Body.setPosition(body, pos);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is shutting down.\r\n   * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#shutdown\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  shutdown: function () {\n    var eventEmitter = this.systems.events;\n\n    if (this.world) {\n      eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\n      eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\n    }\n\n    eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\n\n    if (this.add) {\n      this.add.destroy();\n    }\n\n    if (this.world) {\n      this.world.destroy();\n    }\n\n    this.add = null;\n    this.world = null;\n  },\n\n  /**\r\n   * The Scene that owns this plugin is being destroyed.\r\n   * We need to shutdown and then kill off all external references.\r\n   *\r\n   * @method Phaser.Physics.Matter.MatterPhysics#destroy\r\n   * @private\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.shutdown();\n    this.scene.sys.events.off(SceneEvents.START, this.start, this);\n    this.scene = null;\n    this.systems = null;\n  }\n});\nPluginCache.register('MatterPhysics', MatterPhysics, 'matterPhysics');\nmodule.exports = MatterPhysics;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/MatterPhysics.js"],"names":["ALIGN_CONST","require","Axes","Bodies","Body","BodyBounds","Bounds","Class","Composite","Composites","Constraint","Detector","DistanceBetween","Factory","GetFastValue","GetValue","Grid","MatterAttractors","MatterCollisionEvents","MatterLib","MatterWrap","Merge","Pair","Pairs","Plugin","PluginCache","Query","Resolver","SAT","SceneEvents","Svg","Vector","Vertices","World","MatterPhysics","initialize","scene","systems","sys","config","getConfig","world","add","bodyBounds","body","composite","detector","grid","pair","pairs","query","resolver","sat","constraint","bodies","composites","axes","bounds","svg","vector","vertices","verts","_tempVec2","create","enableCollisionEventsPlugin","enableAttractorPlugin","enableWrapPlugin","_restingThresh","_restingThreshTangent","_positionDampen","_positionWarming","_frictionNormalMultiplier","events","once","BOOT","boot","on","START","start","DESTROY","destroy","eventEmitter","UPDATE","update","POST_UPDATE","postUpdate","SHUTDOWN","shutdown","gameConfig","game","physics","sceneConfig","settings","register","use","pause","resume","set60Hz","getDelta","update60Hz","autoUpdate","set30Hz","update30Hz","step","delta","correction","containsPoint","x","y","getMatterBodies","position","result","point","length","intersectPoint","output","forEach","indexOf","push","intersectRect","width","height","outside","undefined","min","max","region","intersectRay","x1","y1","x2","y2","rayWidth","collisions","ray","i","intersectBody","collides","bodyA","bodyB","overlap","target","overlapCallback","processCallback","callbackContext","Array","isArray","match","entry","c","info","id","call","setCollisionCategory","value","collisionFilter","category","setCollisionGroup","group","setCollidesWith","categories","flags","mask","getAllBodies","hasOwnProperty","setVelocity","vec2","setVelocityX","velocity","setVelocityY","setAngularVelocity","applyForce","force","applyForceFromPosition","speed","angle","Math","cos","sin","applyForceFromAngle","getConstraintLength","aX","pointA","aY","bX","pointB","bY","alignBody","align","pos","TOP_LEFT","LEFT_TOP","getTopLeft","TOP_CENTER","getTopCenter","TOP_RIGHT","RIGHT_TOP","getTopRight","LEFT_CENTER","getLeftCenter","CENTER","getCenter","RIGHT_CENTER","getRightCenter","LEFT_BOTTOM","BOTTOM_LEFT","getBottomLeft","BOTTOM_CENTER","getBottomCenter","BOTTOM_RIGHT","RIGHT_BOTTOM","getBottomRight","setPosition","off","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,WAAW,GAAGC,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,qBAAD,CAAlB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,sBAAD,CAApB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,iBAAD,CAAlB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,cAAD,CAAxB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,uBAAD,CAApB;;AACA,IAAIM,KAAK,GAAGN,OAAO,CAAC,mBAAD,CAAnB;;AACA,IAAIO,SAAS,GAAGP,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAIQ,UAAU,GAAGR,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIS,UAAU,GAAGT,OAAO,CAAC,6BAAD,CAAxB;;AACA,IAAIU,QAAQ,GAAGV,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAIW,eAAe,GAAGX,OAAO,CAAC,qCAAD,CAA7B;;AACA,IAAIY,OAAO,GAAGZ,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIa,YAAY,GAAGb,OAAO,CAAC,iCAAD,CAA1B;;AACA,IAAIc,QAAQ,GAAGd,OAAO,CAAC,6BAAD,CAAtB;;AACA,IAAIe,IAAI,GAAGf,OAAO,CAAC,sBAAD,CAAlB;;AACA,IAAIgB,gBAAgB,GAAGhB,OAAO,CAAC,gCAAD,CAA9B;;AACA,IAAIiB,qBAAqB,GAAGjB,OAAO,CAAC,qCAAD,CAAnC;;AACA,IAAIkB,SAAS,GAAGlB,OAAO,CAAC,mBAAD,CAAvB;;AACA,IAAImB,UAAU,GAAGnB,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIoB,KAAK,GAAGpB,OAAO,CAAC,0BAAD,CAAnB;;AACA,IAAIqB,IAAI,GAAGrB,OAAO,CAAC,sBAAD,CAAlB;;AACA,IAAIsB,KAAK,GAAGtB,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIuB,MAAM,GAAGvB,OAAO,CAAC,mBAAD,CAApB;;AACA,IAAIwB,WAAW,GAAGxB,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIyB,KAAK,GAAGzB,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAI0B,QAAQ,GAAG1B,OAAO,CAAC,0BAAD,CAAtB;;AACA,IAAI2B,GAAG,GAAG3B,OAAO,CAAC,qBAAD,CAAjB;;AACA,IAAI4B,WAAW,GAAG5B,OAAO,CAAC,oBAAD,CAAzB;;AACA,IAAI6B,GAAG,GAAG7B,OAAO,CAAC,oBAAD,CAAjB;;AACA,IAAI8B,MAAM,GAAG9B,OAAO,CAAC,uBAAD,CAApB;;AACA,IAAI+B,QAAQ,GAAG/B,OAAO,CAAC,yBAAD,CAAtB;;AACA,IAAIgC,KAAK,GAAGhC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,IAAIiC,aAAa,GAAG,IAAI3B,KAAJ,CAAU;AAE1B4B,EAAAA,UAAU,EAEV,SAASD,aAAT,CAAwBE,KAAxB,EACA;AACI;;;;;;;AAOA,SAAKA,KAAL,GAAaA,KAAb;AAEA;;;;;;;;AAOA,SAAKC,OAAL,GAAeD,KAAK,CAACE,GAArB;AAEA;;;;;;;;AAOA,SAAKC,MAAL,GAAc,KAAKC,SAAL,EAAd;AAEA;;;;;;;;;AAQA,SAAKC,KAAL;AAEA;;;;;;;;;;;;;AAYA,SAAKC,GAAL;AAEA;;;;;;;;;AAQA,SAAKC,UAAL,CA5DJ,CA8DI;;AAEA;;;;;;;;;;;;AAWA,SAAKC,IAAL,GAAYxC,IAAZ;AAEA;;;;;;;;;;;;;AAYA,SAAKyC,SAAL,GAAiBrC,SAAjB,CAzFJ,CA2FI;;AAEA;;;;;;;;;;AASA,SAAKsC,QAAL,GAAgBnC,QAAhB;AAEA;;;;;;;;;;AASA,SAAKoC,IAAL,GAAY/B,IAAZ;AAEA;;;;;;;;;;AASA,SAAKgC,IAAL,GAAY1B,IAAZ;AAEA;;;;;;;;;;AASA,SAAK2B,KAAL,GAAa1B,KAAb;AAEA;;;;;;;;;;AASA,SAAK2B,KAAL,GAAaxB,KAAb;AAEA;;;;;;;;;;AASA,SAAKyB,QAAL,GAAgBxB,QAAhB;AAEA;;;;;;;;;;AASA,SAAKyB,GAAL,GAAWxB,GAAX,CAxKJ,CA0KI;;AAEA;;;;;;;;;;;;AAWA,SAAKyB,UAAL,GAAkB3C,UAAlB,CAvLJ,CAyLI;;AAEA;;;;;;;;;;;AAUA,SAAK4C,MAAL,GAAcnD,MAAd;AAEA;;;;;;;;;;;AAUA,SAAKoD,UAAL,GAAkB9C,UAAlB,CAjNJ,CAmNI;;AAEA;;;;;;;;;;AASA,SAAK+C,IAAL,GAAYtD,IAAZ;AAEA;;;;;;;;;;AASA,SAAKuD,MAAL,GAAcnD,MAAd;AAEA;;;;;;;;;;;;AAWA,SAAKoD,GAAL,GAAW5B,GAAX;AAEA;;;;;;;;;;;;AAWA,SAAK6B,MAAL,GAAc5B,MAAd;AAEA;;;;;;;;;;;;AAWA,SAAK6B,QAAL,GAAgB5B,QAAhB;AAEA;;;;;;;;;;;;AAWA,SAAK6B,KAAL,GAAa7B,QAAb;AAEA;;;;;;;;;AAQA,SAAK8B,SAAL,GAAiB/B,MAAM,CAACgC,MAAP,EAAjB,CAvSJ,CAySI;;AAEA,QAAIhD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,yBAAd,EAAyC,IAAzC,CAAZ,EACA;AACI,WAAKyB,2BAAL;AACH;;AAED,QAAIjD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,oBAAd,EAAoC,KAApC,CAAZ,EACA;AACI,WAAK0B,qBAAL;AACH;;AAED,QAAIlD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,cAAd,EAA8B,KAA9B,CAAZ,EACA;AACI,WAAK2B,gBAAL;AACH;;AAEDvC,IAAAA,QAAQ,CAACwC,cAAT,GAA0BpD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,eAAd,EAA+B,CAA/B,CAAlC;AACAZ,IAAAA,QAAQ,CAACyC,qBAAT,GAAiCrD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,sBAAd,EAAsC,CAAtC,CAAzC;AACAZ,IAAAA,QAAQ,CAAC0C,eAAT,GAA2BtD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,gBAAd,EAAgC,GAAhC,CAAnC;AACAZ,IAAAA,QAAQ,CAAC2C,gBAAT,GAA4BvD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,iBAAd,EAAiC,GAAjC,CAApC;AACAZ,IAAAA,QAAQ,CAAC4C,yBAAT,GAAqCxD,QAAQ,CAAC,KAAKwB,MAAN,EAAc,0BAAd,EAA0C,CAA1C,CAA7C;AAEAH,IAAAA,KAAK,CAACE,GAAN,CAAUkC,MAAV,CAAiBC,IAAjB,CAAsB5C,WAAW,CAAC6C,IAAlC,EAAwC,KAAKC,IAA7C,EAAmD,IAAnD;AACAvC,IAAAA,KAAK,CAACE,GAAN,CAAUkC,MAAV,CAAiBI,EAAjB,CAAoB/C,WAAW,CAACgD,KAAhC,EAAuC,KAAKC,KAA5C,EAAmD,IAAnD;AACH,GAvUyB;;AAyU1B;;;;;;;;AAQAH,EAAAA,IAAI,EAAE,YACN;AACI,SAAKlC,KAAL,GAAa,IAAIR,KAAJ,CAAU,KAAKG,KAAf,EAAsB,KAAKG,MAA3B,CAAb;AACA,SAAKG,GAAL,GAAW,IAAI7B,OAAJ,CAAY,KAAK4B,KAAjB,CAAX;AACA,SAAKE,UAAL,GAAkB,IAAItC,UAAJ,EAAlB;AAEA,SAAKgC,OAAL,CAAamC,MAAb,CAAoBC,IAApB,CAAyB5C,WAAW,CAACkD,OAArC,EAA8C,KAAKC,OAAnD,EAA4D,IAA5D;AACH,GAxVyB;;AA0V1B;;;;;;;;;AASAF,EAAAA,KAAK,EAAE,YACP;AACI,QAAI,CAAC,KAAKrC,KAAV,EACA;AACI,WAAKA,KAAL,GAAa,IAAIR,KAAJ,CAAU,KAAKG,KAAf,EAAsB,KAAKG,MAA3B,CAAb;AACA,WAAKG,GAAL,GAAW,IAAI7B,OAAJ,CAAY,KAAK4B,KAAjB,CAAX;AACH;;AAED,QAAIwC,YAAY,GAAG,KAAK5C,OAAL,CAAamC,MAAhC;AAEAS,IAAAA,YAAY,CAACL,EAAb,CAAgB/C,WAAW,CAACqD,MAA5B,EAAoC,KAAKzC,KAAL,CAAW0C,MAA/C,EAAuD,KAAK1C,KAA5D;AACAwC,IAAAA,YAAY,CAACL,EAAb,CAAgB/C,WAAW,CAACuD,WAA5B,EAAyC,KAAK3C,KAAL,CAAW4C,UAApD,EAAgE,KAAK5C,KAArE;AACAwC,IAAAA,YAAY,CAACR,IAAb,CAAkB5C,WAAW,CAACyD,QAA9B,EAAwC,KAAKC,QAA7C,EAAuD,IAAvD;AACH,GAhXyB;;AAkX1B;;;;;;;;AAQA/C,EAAAA,SAAS,EAAE,YACX;AACI,QAAIgD,UAAU,GAAG,KAAKnD,OAAL,CAAaoD,IAAb,CAAkBlD,MAAlB,CAAyBmD,OAA1C;AACA,QAAIC,WAAW,GAAG,KAAKtD,OAAL,CAAauD,QAAb,CAAsBF,OAAxC;AAEA,QAAInD,MAAM,GAAGlB,KAAK,CACdP,YAAY,CAAC6E,WAAD,EAAc,QAAd,EAAwB,EAAxB,CADE,EAEd7E,YAAY,CAAC0E,UAAD,EAAa,QAAb,EAAuB,EAAvB,CAFE,CAAlB;AAKA,WAAOjD,MAAP;AACH,GArYyB;;AAuY1B;;;;;;;;;;;;;;;;AAgBA0B,EAAAA,qBAAqB,EAAE,YACvB;AACIzC,IAAAA,MAAM,CAACqE,QAAP,CAAgB5E,gBAAhB;AACAO,IAAAA,MAAM,CAACsE,GAAP,CAAW3E,SAAX,EAAsBF,gBAAtB;AAEA,WAAO,IAAP;AACH,GA7ZyB;;AA+Z1B;;;;;;;;;;;;;;;;;AAiBAiD,EAAAA,gBAAgB,EAAE,YAClB;AACI1C,IAAAA,MAAM,CAACqE,QAAP,CAAgBzE,UAAhB;AACAI,IAAAA,MAAM,CAACsE,GAAP,CAAW3E,SAAX,EAAsBC,UAAtB;AAEA,WAAO,IAAP;AACH,GAtbyB;;AAwb1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA4C,EAAAA,2BAA2B,EAAE,YAC7B;AACIxC,IAAAA,MAAM,CAACqE,QAAP,CAAgB3E,qBAAhB;AACAM,IAAAA,MAAM,CAACsE,GAAP,CAAW3E,SAAX,EAAsBD,qBAAtB;AAEA,WAAO,IAAP;AACH,GA7dyB;;AA+d1B;;;;;;;;;;;AAWA6E,EAAAA,KAAK,EAAE,YACP;AACI,WAAO,KAAKtD,KAAL,CAAWsD,KAAX,EAAP;AACH,GA7eyB;;AA+e1B;;;;;;;;AAQAC,EAAAA,MAAM,EAAE,YACR;AACI,WAAO,KAAKvD,KAAL,CAAWuD,MAAX,EAAP;AACH,GA1fyB;;AA4f1B;;;;;;;;;AASAC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKxD,KAAL,CAAWyD,QAAX,GAAsB,KAAKzD,KAAL,CAAW0D,UAAjC;AACA,SAAK1D,KAAL,CAAW2D,UAAX,GAAwB,IAAxB;AAEA,WAAO,IAAP;AACH,GA3gByB;;AA6gB1B;;;;;;;;;AASAC,EAAAA,OAAO,EAAE,YACT;AACI,SAAK5D,KAAL,CAAWyD,QAAX,GAAsB,KAAKzD,KAAL,CAAW6D,UAAjC;AACA,SAAK7D,KAAL,CAAW2D,UAAX,GAAwB,IAAxB;AAEA,WAAO,IAAP;AACH,GA5hByB;;AA8hB1B;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAG,EAAAA,IAAI,EAAE,UAAUC,KAAV,EAAiBC,UAAjB,EACN;AACI,SAAKhE,KAAL,CAAW8D,IAAX,CAAgBC,KAAhB,EAAuBC,UAAvB;AACH,GA5jByB;;AA8jB1B;;;;;;;;;;;;;;;;;;;;AAoBAC,EAAAA,aAAa,EAAE,UAAU9D,IAAV,EAAgB+D,CAAhB,EAAmBC,CAAnB,EACf;AACIhE,IAAAA,IAAI,GAAG,KAAKiE,eAAL,CAAqBjE,IAArB,CAAP;AAEA,QAAIkE,QAAQ,GAAG/E,MAAM,CAACgC,MAAP,CAAc4C,CAAd,EAAiBC,CAAjB,CAAf;AAEA,QAAIG,MAAM,GAAGrF,KAAK,CAACsF,KAAN,CAAYpE,IAAZ,EAAkBkE,QAAlB,CAAb;AAEA,WAAQC,MAAM,CAACE,MAAP,GAAgB,CAAjB,GAAsB,IAAtB,GAA6B,KAApC;AACH,GA3lByB;;AA6lB1B;;;;;;;;;;;;;;;;;;AAkBAC,EAAAA,cAAc,EAAE,UAAUP,CAAV,EAAaC,CAAb,EAAgBtD,MAAhB,EAChB;AACIA,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIwD,QAAQ,GAAG/E,MAAM,CAACgC,MAAP,CAAc4C,CAAd,EAAiBC,CAAjB,CAAf;AAEA,QAAIO,MAAM,GAAG,EAAb;AAEA,QAAIJ,MAAM,GAAGrF,KAAK,CAACsF,KAAN,CAAY1D,MAAZ,EAAoBwD,QAApB,CAAb;AAEAC,IAAAA,MAAM,CAACK,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI,UAAIuE,MAAM,CAACE,OAAP,CAAezE,IAAf,MAAyB,CAAC,CAA9B,EACA;AACIuE,QAAAA,MAAM,CAACG,IAAP,CAAY1E,IAAZ;AACH;AACJ,KAND;AAQA,WAAOuE,MAAP;AACH,GAloByB;;AAooB1B;;;;;;;;;;;;;;;;;;;AAmBAI,EAAAA,aAAa,EAAE,UAAUZ,CAAV,EAAaC,CAAb,EAAgBY,KAAhB,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCpE,MAAxC,EACf;AACI,QAAIoE,OAAO,KAAKC,SAAhB,EAA2B;AAAED,MAAAA,OAAO,GAAG,KAAV;AAAkB;;AAE/CpE,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIG,MAAM,GAAG;AACTmE,MAAAA,GAAG,EAAE;AAAEjB,QAAAA,CAAC,EAAEA,CAAL;AAAQC,QAAAA,CAAC,EAAEA;AAAX,OADI;AAETiB,MAAAA,GAAG,EAAE;AAAElB,QAAAA,CAAC,EAAEA,CAAC,GAAGa,KAAT;AAAgBZ,QAAAA,CAAC,EAAEA,CAAC,GAAGa;AAAvB;AAFI,KAAb;AAKA,QAAIN,MAAM,GAAG,EAAb;AAEA,QAAIJ,MAAM,GAAGrF,KAAK,CAACoG,MAAN,CAAaxE,MAAb,EAAqBG,MAArB,EAA6BiE,OAA7B,CAAb;AAEAX,IAAAA,MAAM,CAACK,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI,UAAIuE,MAAM,CAACE,OAAP,CAAezE,IAAf,MAAyB,CAAC,CAA9B,EACA;AACIuE,QAAAA,MAAM,CAACG,IAAP,CAAY1E,IAAZ;AACH;AACJ,KAND;AAQA,WAAOuE,MAAP;AACH,GA/qByB;;AAirB1B;;;;;;;;;;;;;;;;;;;AAmBAY,EAAAA,YAAY,EAAE,UAAUC,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,QAA1B,EAAoC9E,MAApC,EACd;AACI,QAAI8E,QAAQ,KAAKT,SAAjB,EAA4B;AAAES,MAAAA,QAAQ,GAAG,CAAX;AAAe;;AAE7C9E,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIyD,MAAM,GAAG,EAAb;AACA,QAAIsB,UAAU,GAAG3G,KAAK,CAAC4G,GAAN,CAAUhF,MAAV,EAAkBvB,MAAM,CAACgC,MAAP,CAAciE,EAAd,EAAkBC,EAAlB,CAAlB,EAAyClG,MAAM,CAACgC,MAAP,CAAcmE,EAAd,EAAkBC,EAAlB,CAAzC,EAAgEC,QAAhE,CAAjB;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACpB,MAA/B,EAAuCsB,CAAC,EAAxC,EACA;AACIxB,MAAAA,MAAM,CAACO,IAAP,CAAYe,UAAU,CAACE,CAAD,CAAV,CAAc3F,IAA1B;AACH;;AAED,WAAOmE,MAAP;AACH,GAntByB;;AAqtB1B;;;;;;;;;;;;;AAaAyB,EAAAA,aAAa,EAAE,UAAU5F,IAAV,EAAgBU,MAAhB,EACf;AACIA,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIyD,MAAM,GAAG,EAAb;AACA,QAAIsB,UAAU,GAAG3G,KAAK,CAAC+G,QAAN,CAAe7F,IAAf,EAAqBU,MAArB,CAAjB;;AAEA,SAAK,IAAIiF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAAU,CAACpB,MAA/B,EAAuCsB,CAAC,EAAxC,EACA;AACI,UAAIvF,IAAI,GAAGqF,UAAU,CAACE,CAAD,CAArB;;AAEA,UAAIvF,IAAI,CAAC0F,KAAL,KAAe9F,IAAnB,EACA;AACImE,QAAAA,MAAM,CAACO,IAAP,CAAYtE,IAAI,CAAC2F,KAAjB;AACH,OAHD,MAKA;AACI5B,QAAAA,MAAM,CAACO,IAAP,CAAYtE,IAAI,CAAC0F,KAAjB;AACH;AACJ;;AAED,WAAO3B,MAAP;AACH,GAxvByB;;AA0vB1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA6B,EAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkBvF,MAAlB,EAA0BwF,eAA1B,EAA2CC,eAA3C,EAA4DC,eAA5D,EACT;AACI,QAAIF,eAAe,KAAKnB,SAAxB,EAAmC;AAAEmB,MAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC9D,QAAIC,eAAe,KAAKpB,SAAxB,EAAmC;AAAEoB,MAAAA,eAAe,GAAG,IAAlB;AAAyB;;AAC9D,QAAIC,eAAe,KAAKrB,SAAxB,EAAmC;AAAEqB,MAAAA,eAAe,GAAGF,eAAlB;AAAoC;;AAEzE,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcL,MAAd,CAAL,EACA;AACIA,MAAAA,MAAM,GAAG,CAAEA,MAAF,CAAT;AACH;;AAEDA,IAAAA,MAAM,GAAG,KAAKhC,eAAL,CAAqBgC,MAArB,CAAT;AACAvF,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAI6F,KAAK,GAAG,KAAZ;;AAEA,SAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,MAAM,CAAC5B,MAA3B,EAAmCsB,CAAC,EAApC,EACA;AACI,UAAIa,KAAK,GAAGP,MAAM,CAACN,CAAD,CAAlB;AAEA,UAAIF,UAAU,GAAG3G,KAAK,CAAC+G,QAAN,CAAeW,KAAf,EAAsB9F,MAAtB,CAAjB;;AAEA,WAAK,IAAI+F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,UAAU,CAACpB,MAA/B,EAAuCoC,CAAC,EAAxC,EACA;AACI,YAAIC,IAAI,GAAGjB,UAAU,CAACgB,CAAD,CAArB;AACA,YAAIV,KAAK,GAAIW,IAAI,CAACZ,KAAL,CAAWa,EAAX,KAAkBH,KAAK,CAACG,EAAzB,GAA+BD,IAAI,CAACX,KAApC,GAA4CW,IAAI,CAACZ,KAA7D;;AAEA,YAAI,CAACK,eAAD,IAAoBA,eAAe,CAACS,IAAhB,CAAqBR,eAArB,EAAsCI,KAAtC,EAA6CT,KAA7C,EAAoDW,IAApD,CAAxB,EACA;AACIH,UAAAA,KAAK,GAAG,IAAR;;AAEA,cAAIL,eAAJ,EACA;AACIA,YAAAA,eAAe,CAACU,IAAhB,CAAqBR,eAArB,EAAsCI,KAAtC,EAA6CT,KAA7C,EAAoDW,IAApD;AACH,WAHD,MAIK,IAAI,CAACP,eAAL,EACL;AACI;AACA,mBAAO,IAAP;AACH;AACJ;AACJ;AACJ;;AAED,WAAOI,KAAP;AACH,GAp0ByB;;AAs0B1B;;;;;;;;;;;;;;;;AAgBAM,EAAAA,oBAAoB,EAAE,UAAUnG,MAAV,EAAkBoG,KAAlB,EACtB;AACIpG,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEAA,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACIA,MAAAA,IAAI,CAAC+G,eAAL,CAAqBC,QAArB,GAAgCF,KAAhC;AACH,KAHD;AAKA,WAAO,IAAP;AACH,GAh2ByB;;AAk2B1B;;;;;;;;;;;;;;;;;AAiBAG,EAAAA,iBAAiB,EAAE,UAAUvG,MAAV,EAAkBoG,KAAlB,EACnB;AACIpG,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEAA,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACIA,MAAAA,IAAI,CAAC+G,eAAL,CAAqBG,KAArB,GAA6BJ,KAA7B;AACH,KAHD;AAKA,WAAO,IAAP;AACH,GA73ByB;;AA+3B1B;;;;;;;;;;;;;;;AAeAK,EAAAA,eAAe,EAAE,UAAUzG,MAAV,EAAkB0G,UAAlB,EACjB;AACI1G,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAI2G,KAAK,GAAG,CAAZ;;AAEA,QAAI,CAAChB,KAAK,CAACC,OAAN,CAAcc,UAAd,CAAL,EACA;AACIC,MAAAA,KAAK,GAAGD,UAAR;AACH,KAHD,MAKA;AACI,WAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,UAAU,CAAC/C,MAA/B,EAAuCsB,CAAC,EAAxC,EACA;AACI0B,QAAAA,KAAK,IAAID,UAAU,CAACzB,CAAD,CAAnB;AACH;AACJ;;AAEDjF,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACIA,MAAAA,IAAI,CAAC+G,eAAL,CAAqBO,IAArB,GAA4BD,KAA5B;AACH,KAHD;AAKA,WAAO,IAAP;AACH,GAt6ByB;;AAw6B1B;;;;;;;;;;;;;;;AAeApD,EAAAA,eAAe,EAAE,UAAUvD,MAAV,EACjB;AACI,QAAI,CAACA,MAAL,EACA;AACI,aAAO,KAAKb,KAAL,CAAW0H,YAAX,EAAP;AACH;;AAED,QAAI,CAAClB,KAAK,CAACC,OAAN,CAAc5F,MAAd,CAAL,EACA;AACIA,MAAAA,MAAM,GAAG,CAAEA,MAAF,CAAT;AACH;;AAED,QAAI6D,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjF,MAAM,CAAC2D,MAA3B,EAAmCsB,CAAC,EAApC,EACA;AACI,UAAI3F,IAAI,GAAIU,MAAM,CAACiF,CAAD,CAAN,CAAU6B,cAAV,CAAyB,MAAzB,CAAD,GAAqC9G,MAAM,CAACiF,CAAD,CAAN,CAAU3F,IAA/C,GAAsDU,MAAM,CAACiF,CAAD,CAAvE;AAEApB,MAAAA,MAAM,CAACG,IAAP,CAAY1E,IAAZ;AACH;;AAED,WAAOuE,MAAP;AACH,GA78ByB;;AA+8B1B;;;;;;;;;;;;AAYAkD,EAAAA,WAAW,EAAE,UAAU/G,MAAV,EAAkBqD,CAAlB,EAAqBC,CAArB,EACb;AACItD,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAwG,IAAAA,IAAI,CAAC3D,CAAL,GAASA,CAAT;AACA2D,IAAAA,IAAI,CAAC1D,CAAL,GAASA,CAAT;AAEAtD,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACIxC,MAAAA,IAAI,CAACiK,WAAL,CAAiBzH,IAAjB,EAAuB0H,IAAvB;AACH,KAHD;AAKA,WAAO,IAAP;AACH,GA1+ByB;;AA4+B1B;;;;;;;;;;;;AAYAC,EAAAA,YAAY,EAAE,UAAUjH,MAAV,EAAkBqD,CAAlB,EACd;AACIrD,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAwG,IAAAA,IAAI,CAAC3D,CAAL,GAASA,CAAT;AAEArD,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI0H,MAAAA,IAAI,CAAC1D,CAAL,GAAShE,IAAI,CAAC4H,QAAL,CAAc5D,CAAvB;AACAxG,MAAAA,IAAI,CAACiK,WAAL,CAAiBzH,IAAjB,EAAuB0H,IAAvB;AACH,KAJD;AAMA,WAAO,IAAP;AACH,GAvgCyB;;AAygC1B;;;;;;;;;;;;AAYAG,EAAAA,YAAY,EAAE,UAAUnH,MAAV,EAAkBsD,CAAlB,EACd;AACItD,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAwG,IAAAA,IAAI,CAAC1D,CAAL,GAASA,CAAT;AAEAtD,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI0H,MAAAA,IAAI,CAAC3D,CAAL,GAAS/D,IAAI,CAAC4H,QAAL,CAAc7D,CAAvB;AACAvG,MAAAA,IAAI,CAACiK,WAAL,CAAiBzH,IAAjB,EAAuB0H,IAAvB;AACH,KAJD;AAMA,WAAO,IAAP;AACH,GApiCyB;;AAsiC1B;;;;;;;;;;;;AAYAI,EAAAA,kBAAkB,EAAE,UAAUpH,MAAV,EAAkBoG,KAAlB,EACpB;AACIpG,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEAA,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACIxC,MAAAA,IAAI,CAACsK,kBAAL,CAAwB9H,IAAxB,EAA8B8G,KAA9B;AACH,KAHD;AAKA,WAAO,IAAP;AACH,GA5jCyB;;AA8jC1B;;;;;;;;;;;AAWAiB,EAAAA,UAAU,EAAE,UAAUrH,MAAV,EAAkBsH,KAAlB,EACZ;AACItH,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAR,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI0H,MAAAA,IAAI,CAAC3D,CAAL,GAAS/D,IAAI,CAACkE,QAAL,CAAcH,CAAvB;AACA2D,MAAAA,IAAI,CAAC1D,CAAL,GAAShE,IAAI,CAACkE,QAAL,CAAcF,CAAvB;AAEAxG,MAAAA,IAAI,CAACuK,UAAL,CAAgB/H,IAAhB,EAAsB0H,IAAtB,EAA4BM,KAA5B;AACH,KAND;AAQA,WAAO,IAAP;AACH,GAxlCyB;;AA0lC1B;;;;;;;;;;;;;;;;AAgBAC,EAAAA,sBAAsB,EAAE,UAAUvH,MAAV,EAAkBwD,QAAlB,EAA4BgE,KAA5B,EAAmCC,KAAnC,EACxB;AACIzH,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAR,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI,UAAImI,KAAK,KAAKpD,SAAd,EACA;AACIoD,QAAAA,KAAK,GAAGnI,IAAI,CAACmI,KAAb;AACH;;AAEDT,MAAAA,IAAI,CAAC3D,CAAL,GAASmE,KAAK,GAAGE,IAAI,CAACC,GAAL,CAASF,KAAT,CAAjB;AACAT,MAAAA,IAAI,CAAC1D,CAAL,GAASkE,KAAK,GAAGE,IAAI,CAACE,GAAL,CAASH,KAAT,CAAjB;AAEA3K,MAAAA,IAAI,CAACuK,UAAL,CAAgB/H,IAAhB,EAAsBkE,QAAtB,EAAgCwD,IAAhC;AACH,KAXD;AAaA,WAAO,IAAP;AACH,GA9nCyB;;AAgoC1B;;;;;;;;;;;;;;;AAeAa,EAAAA,mBAAmB,EAAE,UAAU7H,MAAV,EAAkBwH,KAAlB,EAAyBC,KAAzB,EACrB;AACIzH,IAAAA,MAAM,GAAG,KAAKuD,eAAL,CAAqBvD,MAArB,CAAT;AAEA,QAAIgH,IAAI,GAAG,KAAKxG,SAAhB;AAEAR,IAAAA,MAAM,CAAC8D,OAAP,CAAe,UAAUxE,IAAV,EACf;AACI,UAAImI,KAAK,KAAKpD,SAAd,EACA;AACIoD,QAAAA,KAAK,GAAGnI,IAAI,CAACmI,KAAb;AACH;;AAEDT,MAAAA,IAAI,CAAC3D,CAAL,GAASmE,KAAK,GAAGE,IAAI,CAACC,GAAL,CAASF,KAAT,CAAjB;AACAT,MAAAA,IAAI,CAAC1D,CAAL,GAASkE,KAAK,GAAGE,IAAI,CAACE,GAAL,CAASH,KAAT,CAAjB;AAEA3K,MAAAA,IAAI,CAACuK,UAAL,CAAgB/H,IAAhB,EAAsB;AAAE+D,QAAAA,CAAC,EAAE/D,IAAI,CAACkE,QAAL,CAAcH,CAAnB;AAAsBC,QAAAA,CAAC,EAAEhE,IAAI,CAACkE,QAAL,CAAcF;AAAvC,OAAtB,EAAkE0D,IAAlE;AACH,KAXD;AAaA,WAAO,IAAP;AACH,GAnqCyB;;AAqqC1B;;;;;;;;;;AAUAc,EAAAA,mBAAmB,EAAE,UAAU/H,UAAV,EACrB;AACI,QAAIgI,EAAE,GAAGhI,UAAU,CAACiI,MAAX,CAAkB3E,CAA3B;AACA,QAAI4E,EAAE,GAAGlI,UAAU,CAACiI,MAAX,CAAkB1E,CAA3B;AACA,QAAI4E,EAAE,GAAGnI,UAAU,CAACoI,MAAX,CAAkB9E,CAA3B;AACA,QAAI+E,EAAE,GAAGrI,UAAU,CAACoI,MAAX,CAAkB7E,CAA3B;;AAEA,QAAIvD,UAAU,CAACqF,KAAf,EACA;AACI2C,MAAAA,EAAE,IAAIhI,UAAU,CAACqF,KAAX,CAAiB5B,QAAjB,CAA0BH,CAAhC;AACA4E,MAAAA,EAAE,IAAIlI,UAAU,CAACqF,KAAX,CAAiB5B,QAAjB,CAA0BF,CAAhC;AACH;;AAED,QAAIvD,UAAU,CAACsF,KAAf,EACA;AACI6C,MAAAA,EAAE,IAAInI,UAAU,CAACsF,KAAX,CAAiB7B,QAAjB,CAA0BH,CAAhC;AACA+E,MAAAA,EAAE,IAAIrI,UAAU,CAACsF,KAAX,CAAiB7B,QAAjB,CAA0BF,CAAhC;AACH;;AAED,WAAOhG,eAAe,CAACyK,EAAD,EAAKE,EAAL,EAASC,EAAT,EAAaE,EAAb,CAAtB;AACH,GAnsCyB;;AAqsC1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAC,EAAAA,SAAS,EAAE,UAAU/I,IAAV,EAAgB+D,CAAhB,EAAmBC,CAAnB,EAAsBgF,KAAtB,EACX;AACIhJ,IAAAA,IAAI,GAAIA,IAAI,CAACwH,cAAL,CAAoB,MAApB,CAAD,GAAgCxH,IAAI,CAACA,IAArC,GAA4CA,IAAnD;AAEA,QAAIiJ,GAAJ;;AAEA,YAAQD,KAAR;AAEI,WAAK5L,WAAW,CAAC8L,QAAjB;AACA,WAAK9L,WAAW,CAAC+L,QAAjB;AACIF,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBqJ,UAAhB,CAA2BpJ,IAA3B,EAAiC+D,CAAjC,EAAoCC,CAApC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAACiM,UAAjB;AACIJ,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBuJ,YAAhB,CAA6BtJ,IAA7B,EAAmC+D,CAAnC,EAAsCC,CAAtC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAACmM,SAAjB;AACA,WAAKnM,WAAW,CAACoM,SAAjB;AACIP,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgB0J,WAAhB,CAA4BzJ,IAA5B,EAAkC+D,CAAlC,EAAqCC,CAArC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAACsM,WAAjB;AACIT,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgB4J,aAAhB,CAA8B3J,IAA9B,EAAoC+D,CAApC,EAAuCC,CAAvC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAACwM,MAAjB;AACIX,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgB8J,SAAhB,CAA0B7J,IAA1B,EAAgC+D,CAAhC,EAAmCC,CAAnC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAAC0M,YAAjB;AACIb,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBgK,cAAhB,CAA+B/J,IAA/B,EAAqC+D,CAArC,EAAwCC,CAAxC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAAC4M,WAAjB;AACA,WAAK5M,WAAW,CAAC6M,WAAjB;AACIhB,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBmK,aAAhB,CAA8BlK,IAA9B,EAAoC+D,CAApC,EAAuCC,CAAvC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAAC+M,aAAjB;AACIlB,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBqK,eAAhB,CAAgCpK,IAAhC,EAAsC+D,CAAtC,EAAyCC,CAAzC,CAAN;AACA;;AAEJ,WAAK5G,WAAW,CAACiN,YAAjB;AACA,WAAKjN,WAAW,CAACkN,YAAjB;AACIrB,QAAAA,GAAG,GAAG,KAAKlJ,UAAL,CAAgBwK,cAAhB,CAA+BvK,IAA/B,EAAqC+D,CAArC,EAAwCC,CAAxC,CAAN;AACA;AAxCR;;AA2CA,QAAIiF,GAAJ,EACA;AACIzL,MAAAA,IAAI,CAACgN,WAAL,CAAiBxK,IAAjB,EAAuBiJ,GAAvB;AACH;;AAED,WAAO,IAAP;AACH,GA3xCyB;;AA6xC1B;;;;;;;;AAQAtG,EAAAA,QAAQ,EAAE,YACV;AACI,QAAIN,YAAY,GAAG,KAAK5C,OAAL,CAAamC,MAAhC;;AAEA,QAAI,KAAK/B,KAAT,EACA;AACIwC,MAAAA,YAAY,CAACoI,GAAb,CAAiBxL,WAAW,CAACqD,MAA7B,EAAqC,KAAKzC,KAAL,CAAW0C,MAAhD,EAAwD,KAAK1C,KAA7D;AACAwC,MAAAA,YAAY,CAACoI,GAAb,CAAiBxL,WAAW,CAACuD,WAA7B,EAA0C,KAAK3C,KAAL,CAAW4C,UAArD,EAAiE,KAAK5C,KAAtE;AACH;;AAEDwC,IAAAA,YAAY,CAACoI,GAAb,CAAiBxL,WAAW,CAACyD,QAA7B,EAAuC,KAAKC,QAA5C,EAAsD,IAAtD;;AAEA,QAAI,KAAK7C,GAAT,EACA;AACI,WAAKA,GAAL,CAASsC,OAAT;AACH;;AAED,QAAI,KAAKvC,KAAT,EACA;AACI,WAAKA,KAAL,CAAWuC,OAAX;AACH;;AAED,SAAKtC,GAAL,GAAW,IAAX;AACA,SAAKD,KAAL,GAAa,IAAb;AACH,GA7zCyB;;AA+zC1B;;;;;;;;AAQAuC,EAAAA,OAAO,EAAE,YACT;AACI,SAAKO,QAAL;AAEA,SAAKnD,KAAL,CAAWE,GAAX,CAAekC,MAAf,CAAsB6I,GAAtB,CAA0BxL,WAAW,CAACgD,KAAtC,EAA6C,KAAKC,KAAlD,EAAyD,IAAzD;AAEA,SAAK1C,KAAL,GAAa,IAAb;AACA,SAAKC,OAAL,GAAe,IAAf;AACH;AA/0CyB,CAAV,CAApB;AAm1CAZ,WAAW,CAACoE,QAAZ,CAAqB,eAArB,EAAsC3D,aAAtC,EAAqD,eAArD;AAEAoL,MAAM,CAACC,OAAP,GAAiBrL,aAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar ALIGN_CONST = require('../../display/align/const');\r\nvar Axes = require('./lib/geometry/Axes');\r\nvar Bodies = require('./lib/factory/Bodies');\r\nvar Body = require('./lib/body/Body');\r\nvar BodyBounds = require('./BodyBounds');\r\nvar Bounds = require('./lib/geometry/Bounds');\r\nvar Class = require('../../utils/Class');\r\nvar Composite = require('./lib/body/Composite');\r\nvar Composites = require('./lib/factory/Composites');\r\nvar Constraint = require('./lib/constraint/Constraint');\r\nvar Detector = require('./lib/collision/Detector');\r\nvar DistanceBetween = require('../../math/distance/DistanceBetween');\r\nvar Factory = require('./Factory');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar Grid = require('./lib/collision/Grid');\r\nvar MatterAttractors = require('./lib/plugins/MatterAttractors');\r\nvar MatterCollisionEvents = require('./lib/plugins/MatterCollisionEvents');\r\nvar MatterLib = require('./lib/core/Matter');\r\nvar MatterWrap = require('./lib/plugins/MatterWrap');\r\nvar Merge = require('../../utils/object/Merge');\r\nvar Pair = require('./lib/collision/Pair');\r\nvar Pairs = require('./lib/collision/Pairs');\r\nvar Plugin = require('./lib/core/Plugin');\r\nvar PluginCache = require('../../plugins/PluginCache');\r\nvar Query = require('./lib/collision/Query');\r\nvar Resolver = require('./lib/collision/Resolver');\r\nvar SAT = require('./lib/collision/SAT');\r\nvar SceneEvents = require('../../scene/events');\r\nvar Svg = require('./lib/geometry/Svg');\r\nvar Vector = require('./lib/geometry/Vector');\r\nvar Vertices = require('./lib/geometry/Vertices');\r\nvar World = require('./World');\r\n\r\n/**\r\n * @classdesc\r\n * The Phaser Matter plugin provides the ability to use the Matter JS Physics Engine within your Phaser games.\r\n * \r\n * Unlike Arcade Physics, the other physics system provided with Phaser, Matter JS is a full-body physics system.\r\n * It features:\r\n * \r\n * * Rigid bodies\r\n * * Compound bodies\r\n * * Composite bodies\r\n * * Concave and convex hulls\r\n * * Physical properties (mass, area, density etc.)\r\n * * Restitution (elastic and inelastic collisions)\r\n * * Collisions (broad-phase, mid-phase and narrow-phase)\r\n * * Stable stacking and resting\r\n * * Conservation of momentum\r\n * * Friction and resistance\r\n * * Constraints\r\n * * Gravity\r\n * * Sleeping and static bodies\r\n * * Rounded corners (chamfering)\r\n * * Views (translate, zoom)\r\n * * Collision queries (raycasting, region tests)\r\n * * Time scaling (slow-mo, speed-up)\r\n * \r\n * Configuration of Matter is handled via the Matter World Config object, which can be passed in either the\r\n * Phaser Game Config, or Phaser Scene Config. Here is a basic example:\r\n * \r\n * ```js\r\n * physics: {\r\n *     default: 'matter',\r\n *     matter: {\r\n *         enableSleeping: true,\r\n *         gravity: {\r\n *             y: 0\r\n *         },\r\n *         debug: {\r\n *             showBody: true,\r\n *             showStaticBody: true\r\n *         }\r\n *     }\r\n * }\r\n * ```\r\n * \r\n * This class acts as an interface between a Phaser Scene and a single instance of the Matter Engine.\r\n * \r\n * Use it to access the most common Matter features and helper functions.\r\n * \r\n * You can find details, documentation and examples on the Matter JS website: https://brm.io/matter-js/\r\n *\r\n * @class MatterPhysics\r\n * @memberof Phaser.Physics.Matter\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Scene} scene - The Phaser Scene that owns this Matter Physics instance.\r\n */\r\nvar MatterPhysics = new Class({\r\n\r\n    initialize:\r\n\r\n    function MatterPhysics (scene)\r\n    {\r\n        /**\r\n         * The Phaser Scene that owns this Matter Physics instance\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#scene\r\n         * @type {Phaser.Scene}\r\n         * @since 3.0.0\r\n         */\r\n        this.scene = scene;\r\n\r\n        /**\r\n         * A reference to the Scene Systems that belong to the Scene owning this Matter Physics instance.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#systems\r\n         * @type {Phaser.Scenes.Systems}\r\n         * @since 3.0.0\r\n         */\r\n        this.systems = scene.sys;\r\n\r\n        /**\r\n         * The parsed Matter Configuration object.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#config\r\n         * @type {Phaser.Types.Physics.Matter.MatterWorldConfig}\r\n         * @since 3.0.0\r\n         */\r\n        this.config = this.getConfig();\r\n\r\n        /**\r\n         * An instance of the Matter World class. This class is responsible for the updating of the\r\n         * Matter Physics world, as well as handling debug drawing functions.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#world\r\n         * @type {Phaser.Physics.Matter.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world;\r\n\r\n        /**\r\n         * An instance of the Matter Factory. This class provides lots of functions for creating a\r\n         * wide variety of physics objects and adds them automatically to the Matter World.\r\n         * \r\n         * You can use this class to cut-down on the amount of code required in your game, however,\r\n         * use of the Factory is entirely optional and should be seen as a development aid. It's\r\n         * perfectly possible to create and add components to the Matter world without using it.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#add\r\n         * @type {Phaser.Physics.Matter.Factory}\r\n         * @since 3.0.0\r\n         */\r\n        this.add;\r\n\r\n        /**\r\n         * An instance of the Body Bounds class. This class contains functions used for getting the\r\n         * world position from various points around the bounds of a physics body.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#bodyBounds\r\n         * @type {Phaser.Physics.Matter.BodyBounds}\r\n         * @since 3.22.0\r\n         */\r\n        this.bodyBounds;\r\n\r\n        //  Body\r\n\r\n        /**\r\n         * A reference to the `Matter.Body` module.\r\n         * \r\n         * The `Matter.Body` module contains methods for creating and manipulating body models.\r\n         * A `Matter.Body` is a rigid body that can be simulated by a `Matter.Engine`.\r\n         * Factories for commonly used body configurations (such as rectangles, circles and other polygons) can be found in the `Bodies` module.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#body\r\n         * @type {MatterJS.BodyFactory}\r\n         * @since 3.18.0\r\n         */\r\n        this.body = Body;\r\n\r\n        /**\r\n         * A reference to the `Matter.Composite` module.\r\n         * \r\n         * The `Matter.Composite` module contains methods for creating and manipulating composite bodies.\r\n         * A composite body is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite`, therefore composites form a tree structure.\r\n         * It is important to use the functions in this module to modify composites, rather than directly modifying their properties.\r\n         * Note that the `Matter.World` object is also a type of `Matter.Composite` and as such all composite methods here can also operate on a `Matter.World`.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#composite\r\n         * @type {MatterJS.CompositeFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.composite = Composite;\r\n\r\n        //  Collision:\r\n\r\n        /**\r\n         * A reference to the `Matter.Detector` module.\r\n         * \r\n         * The `Matter.Detector` module contains methods for detecting collisions given a set of pairs.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#detector\r\n         * @type {MatterJS.DetectorFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.detector = Detector;\r\n\r\n        /**\r\n         * A reference to the `Matter.Grid` module.\r\n         * \r\n         * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#grid\r\n         * @type {MatterJS.GridFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.grid = Grid;\r\n\r\n        /**\r\n         * A reference to the `Matter.Pair` module.\r\n         * \r\n         * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#pair\r\n         * @type {MatterJS.PairFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.pair = Pair;\r\n\r\n        /**\r\n         * A reference to the `Matter.Pairs` module.\r\n         * \r\n         * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#pairs\r\n         * @type {MatterJS.PairsFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.pairs = Pairs;\r\n\r\n        /**\r\n         * A reference to the `Matter.Query` module.\r\n         * \r\n         * The `Matter.Query` module contains methods for performing collision queries.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#query\r\n         * @type {MatterJS.QueryFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.query = Query;\r\n\r\n        /**\r\n         * A reference to the `Matter.Resolver` module.\r\n         * \r\n         * The `Matter.Resolver` module contains methods for resolving collision pairs.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#resolver\r\n         * @type {MatterJS.ResolverFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.resolver = Resolver;\r\n\r\n        /**\r\n         * A reference to the `Matter.SAT` module.\r\n         * \r\n         * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#sat\r\n         * @type {MatterJS.SATFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.sat = SAT;\r\n\r\n        //  Constraint\r\n\r\n        /**\r\n         * A reference to the `Matter.Constraint` module.\r\n         * \r\n         * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\r\n         * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\r\n         * The stiffness of constraints can be modified to create springs or elastic.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#constraint\r\n         * @type {MatterJS.ConstraintFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.constraint = Constraint;\r\n\r\n        //  Factory\r\n\r\n        /**\r\n         * A reference to the `Matter.Bodies` module.\r\n         * \r\n         * The `Matter.Bodies` module contains factory methods for creating rigid bodies\r\n         * with commonly used body configurations (such as rectangles, circles and other polygons).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#bodies\r\n         * @type {MatterJS.BodiesFactory}\r\n         * @since 3.18.0\r\n         */\r\n        this.bodies = Bodies;\r\n\r\n        /**\r\n         * A reference to the `Matter.Composites` module.\r\n         * \r\n         * The `Matter.Composites` module contains factory methods for creating composite bodies\r\n         * with commonly used configurations (such as stacks and chains).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#composites\r\n         * @type {MatterJS.CompositesFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.composites = Composites;\r\n\r\n        //  Geometry\r\n\r\n        /**\r\n         * A reference to the `Matter.Axes` module.\r\n         * \r\n         * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#axes\r\n         * @type {MatterJS.AxesFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.axes = Axes;\r\n\r\n        /**\r\n         * A reference to the `Matter.Bounds` module.\r\n         * \r\n         * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#bounds\r\n         * @type {MatterJS.BoundsFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.bounds = Bounds;\r\n\r\n        /**\r\n         * A reference to the `Matter.Svg` module.\r\n         * \r\n         * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\r\n         *\r\n         * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#svg\r\n         * @type {MatterJS.SvgFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.svg = Svg;\r\n\r\n        /**\r\n         * A reference to the `Matter.Vector` module.\r\n         * \r\n         * The `Matter.Vector` module contains methods for creating and manipulating vectors.\r\n         * Vectors are the basis of all the geometry related operations in the engine.\r\n         * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#vector\r\n         * @type {MatterJS.VectorFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.vector = Vector;\r\n\r\n        /**\r\n         * A reference to the `Matter.Vertices` module.\r\n         * \r\n         * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n         * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n         * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#vertices\r\n         * @type {MatterJS.VerticesFactory}\r\n         * @since 3.22.0\r\n         */\r\n        this.vertices = Vertices;\r\n\r\n        /**\r\n         * A reference to the `Matter.Vertices` module.\r\n         * \r\n         * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\r\n         * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\r\n         * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#verts\r\n         * @type {MatterJS.VerticesFactory}\r\n         * @since 3.14.0\r\n         */\r\n        this.verts = Vertices;\r\n\r\n        /**\r\n         * An internal temp vector used for velocity and force calculations.\r\n         *\r\n         * @name Phaser.Physics.Matter.MatterPhysics#_tempVec2\r\n         * @type {MatterJS.Vector}\r\n         * @private\r\n         * @since 3.22.0\r\n         */\r\n        this._tempVec2 = Vector.create();\r\n\r\n        //  Matter plugins\r\n\r\n        if (GetValue(this.config, 'plugins.collisionevents', true))\r\n        {\r\n            this.enableCollisionEventsPlugin();\r\n        }\r\n\r\n        if (GetValue(this.config, 'plugins.attractors', false))\r\n        {\r\n            this.enableAttractorPlugin();\r\n        }\r\n\r\n        if (GetValue(this.config, 'plugins.wrap', false))\r\n        {\r\n            this.enableWrapPlugin();\r\n        }\r\n\r\n        Resolver._restingThresh = GetValue(this.config, 'restingThresh', 4);\r\n        Resolver._restingThreshTangent = GetValue(this.config, 'restingThreshTangent', 6);\r\n        Resolver._positionDampen = GetValue(this.config, 'positionDampen', 0.9);\r\n        Resolver._positionWarming = GetValue(this.config, 'positionWarming', 0.8);\r\n        Resolver._frictionNormalMultiplier = GetValue(this.config, 'frictionNormalMultiplier', 5);\r\n\r\n        scene.sys.events.once(SceneEvents.BOOT, this.boot, this);\r\n        scene.sys.events.on(SceneEvents.START, this.start, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically, only once, when the Scene is first created.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#boot\r\n     * @private\r\n     * @since 3.5.1\r\n     */\r\n    boot: function ()\r\n    {\r\n        this.world = new World(this.scene, this.config);\r\n        this.add = new Factory(this.world);\r\n        this.bodyBounds = new BodyBounds();\r\n\r\n        this.systems.events.once(SceneEvents.DESTROY, this.destroy, this);\r\n    },\r\n\r\n    /**\r\n     * This method is called automatically by the Scene when it is starting up.\r\n     * It is responsible for creating local systems, properties and listening for Scene events.\r\n     * Do not invoke it directly.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#start\r\n     * @private\r\n     * @since 3.5.0\r\n     */\r\n    start: function ()\r\n    {\r\n        if (!this.world)\r\n        {\r\n            this.world = new World(this.scene, this.config);\r\n            this.add = new Factory(this.world);\r\n        }\r\n\r\n        var eventEmitter = this.systems.events;\r\n\r\n        eventEmitter.on(SceneEvents.UPDATE, this.world.update, this.world);\r\n        eventEmitter.on(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        eventEmitter.once(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n    },\r\n\r\n    /**\r\n     * This internal method is called when this class starts and retrieves the final Matter World Config.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#getConfig\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Types.Physics.Matter.MatterWorldConfig} The Matter World Config.\r\n     */\r\n    getConfig: function ()\r\n    {\r\n        var gameConfig = this.systems.game.config.physics;\r\n        var sceneConfig = this.systems.settings.physics;\r\n\r\n        var config = Merge(\r\n            GetFastValue(sceneConfig, 'matter', {}),\r\n            GetFastValue(gameConfig, 'matter', {})\r\n        );\r\n\r\n        return config;\r\n    },\r\n\r\n    /**\r\n     * Enables the Matter Attractors Plugin.\r\n     * \r\n     * The attractors plugin that makes it easy to apply continual forces on bodies.\r\n     * It's possible to simulate effects such as wind, gravity and magnetism.\r\n     * \r\n     * https://github.com/liabru/matter-attractors\r\n     * \r\n     * This method is called automatically if `plugins.attractors` is set in the Matter World Config.\r\n     * However, you can also call it directly from within your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableAttractorPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    enableAttractorPlugin: function ()\r\n    {\r\n        Plugin.register(MatterAttractors);\r\n        Plugin.use(MatterLib, MatterAttractors);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables the Matter Wrap Plugin.\r\n     * \r\n     * The coordinate wrapping plugin that automatically wraps the position of bodies such that they always stay\r\n     * within the given bounds. Upon crossing a boundary the body will appear on the opposite side of the bounds,\r\n     * while maintaining its velocity.\r\n     * \r\n     * https://github.com/liabru/matter-wrap\r\n     * \r\n     * This method is called automatically if `plugins.wrap` is set in the Matter World Config.\r\n     * However, you can also call it directly from within your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableWrapPlugin\r\n     * @since 3.0.0\r\n     * \r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    enableWrapPlugin: function ()\r\n    {\r\n        Plugin.register(MatterWrap);\r\n        Plugin.use(MatterLib, MatterWrap);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Enables the Matter Collision Events Plugin.\r\n     * \r\n     * Note that this plugin is enabled by default. So you should only ever need to call this\r\n     * method if you have specifically disabled the plugin in your Matter World Config.\r\n     * You can disable it by setting `plugins.collisionevents: false` in your Matter World Config.\r\n     * \r\n     * This plugin triggers three new events on Matter.Body:\r\n     * \r\n     * 1. `onCollide`\r\n     * 2. `onCollideEnd`\r\n     * 3. `onCollideActive`\r\n     * \r\n     * These events correspond to the Matter.js events `collisionStart`, `collisionActive` and `collisionEnd`, respectively.\r\n     * You can listen to these events via Matter.Events or they will also be emitted from the Matter World.\r\n     * \r\n     * This plugin also extends Matter.Body with three convenience functions:\r\n     * \r\n     * `Matter.Body.setOnCollide(callback)`\r\n     * `Matter.Body.setOnCollideEnd(callback)`\r\n     * `Matter.Body.setOnCollideActive(callback)`\r\n     * \r\n     * You can register event callbacks by providing a function of type (pair: Matter.Pair) => void\r\n     * \r\n     * https://github.com/dxu/matter-collision-events\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#enableCollisionEventsPlugin\r\n     * @since 3.22.0\r\n     * \r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    enableCollisionEventsPlugin: function ()\r\n    {\r\n        Plugin.register(MatterCollisionEvents);\r\n        Plugin.use(MatterLib, MatterCollisionEvents);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Pauses the Matter World instance and sets `enabled` to `false`.\r\n     * \r\n     * A paused world will not run any simulations for the duration it is paused.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#pause\r\n     * @fires Phaser.Physics.Matter.Events#PAUSE\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    pause: function ()\r\n    {\r\n        return this.world.pause();\r\n    },\r\n\r\n    /**\r\n     * Resumes this Matter World instance from a paused state and sets `enabled` to `true`.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#resume\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Matter.World} The Matter World object.\r\n     */\r\n    resume: function ()\r\n    {\r\n        return this.world.resume();\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 60Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set60Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    set60Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update60Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the Matter Engine to run at fixed timestep of 30Hz and enables `autoUpdate`.\r\n     * If you have set a custom `getDelta` function then this will override it.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#set30Hz\r\n     * @since 3.4.0\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    set30Hz: function ()\r\n    {\r\n        this.world.getDelta = this.world.update30Hz;\r\n        this.world.autoUpdate = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Manually advances the physics simulation by one iteration.\r\n     * \r\n     * You can optionally pass in the `delta` and `correction` values to be used by Engine.update.\r\n     * If undefined they use the Matter defaults of 60Hz and no correction.\r\n     * \r\n     * Calling `step` directly bypasses any checks of `enabled` or `autoUpdate`.\r\n     * \r\n     * It also ignores any custom `getDelta` functions, as you should be passing the delta\r\n     * value in to this call.\r\n     *\r\n     * You can adjust the number of iterations that Engine.update performs internally.\r\n     * Use the Scene Matter Physics config object to set the following properties:\r\n     *\r\n     * positionIterations (defaults to 6)\r\n     * velocityIterations (defaults to 4)\r\n     * constraintIterations (defaults to 2)\r\n     *\r\n     * Adjusting these values can help performance in certain situations, depending on the physics requirements\r\n     * of your game.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#step\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} [delta=16.666] - The delta value.\r\n     * @param {number} [correction=1] - Optional delta correction value.\r\n     */\r\n    step: function (delta, correction)\r\n    {\r\n        this.world.step(delta, correction);\r\n    },\r\n\r\n    /**\r\n     * Checks if the vertices of the given body, or an array of bodies, contains the given point, or not.\r\n     * \r\n     * You can pass in either a single body, or an array of bodies to be checked. This method will\r\n     * return `true` if _any_ of the bodies in the array contain the point. See the `intersectPoint` method if you need\r\n     * to get a list of intersecting bodies.\r\n     * \r\n     * The point should be transformed into the Matter World coordinate system in advance. This happens by\r\n     * default with Input Pointers, but if you wish to use points from another system you may need to\r\n     * transform them before passing them.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#containsPoint\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} body - The body, or an array of bodies, to check against the point.\r\n     * @param {number} x - The horizontal coordinate of the point.\r\n     * @param {number} y - The vertical coordinate of the point.\r\n     * \r\n     * @return {boolean} `true` if the point is within one of the bodies given, otherwise `false`.\r\n     */\r\n    containsPoint: function (body, x, y)\r\n    {\r\n        body = this.getMatterBodies(body);\r\n\r\n        var position = Vector.create(x, y);\r\n\r\n        var result = Query.point(body, position);\r\n\r\n        return (result.length > 0) ? true : false;\r\n    },\r\n\r\n    /**\r\n     * Checks the given coordinates to see if any vertices of the given bodies contain it.\r\n     * \r\n     * If no bodies are provided it will search all bodies in the Matter World, including within Composites.\r\n     * \r\n     * The coordinates should be transformed into the Matter World coordinate system in advance. This happens by\r\n     * default with Input Pointers, but if you wish to use coordinates from another system you may need to\r\n     * transform them before passing them.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#intersectPoint\r\n     * @since 3.22.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate of the point.\r\n     * @param {number} y - The vertical coordinate of the point.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n     * \r\n     * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies which contain the given point.\r\n     */\r\n    intersectPoint: function (x, y, bodies)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var position = Vector.create(x, y);\r\n\r\n        var output = [];\r\n\r\n        var result = Query.point(bodies, position);\r\n\r\n        result.forEach(function (body)\r\n        {\r\n            if (output.indexOf(body) === -1)\r\n            {\r\n                output.push(body);\r\n            }\r\n        });\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Checks the given rectangular area to see if any vertices of the given bodies intersect with it.\r\n     * Or, if the `outside` parameter is set to `true`, it checks to see which bodies do not\r\n     * intersect with it.\r\n     * \r\n     * If no bodies are provided it will search all bodies in the Matter World, including within Composites.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#intersectRect\r\n     * @since 3.22.0\r\n     *\r\n     * @param {number} x - The horizontal coordinate of the top-left of the area.\r\n     * @param {number} y - The vertical coordinate of the top-left of the area.\r\n     * @param {number} width - The width of the area.\r\n     * @param {number} height - The height of the area.\r\n     * @param {boolean} [outside=false] - If `false` it checks for vertices inside the area, if `true` it checks for vertices outside the area.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n     * \r\n     * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies that intersect with the given area.\r\n     */\r\n    intersectRect: function (x, y, width, height, outside, bodies)\r\n    {\r\n        if (outside === undefined) { outside = false; }\r\n\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var bounds = {\r\n            min: { x: x, y: y },\r\n            max: { x: x + width, y: y + height }\r\n        };\r\n\r\n        var output = [];\r\n\r\n        var result = Query.region(bodies, bounds, outside);\r\n\r\n        result.forEach(function (body)\r\n        {\r\n            if (output.indexOf(body) === -1)\r\n            {\r\n                output.push(body);\r\n            }\r\n        });\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Checks the given ray segment to see if any vertices of the given bodies intersect with it.\r\n     * \r\n     * If no bodies are provided it will search all bodies in the Matter World.\r\n     * \r\n     * The width of the ray can be specified via the `rayWidth` parameter.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#intersectRay\r\n     * @since 3.22.0\r\n     *\r\n     * @param {number} x1 - The horizontal coordinate of the start of the ray segment.\r\n     * @param {number} y1 - The vertical coordinate of the start of the ray segment.\r\n     * @param {number} x2 - The horizontal coordinate of the end of the ray segment.\r\n     * @param {number} y2 - The vertical coordinate of the end of the ray segment.\r\n     * @param {number} [rayWidth=1] - The width of the ray segment.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check. If not provided it will search all bodies in the world.\r\n     * \r\n     * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies whos vertices intersect with the ray segment.\r\n     */\r\n    intersectRay: function (x1, y1, x2, y2, rayWidth, bodies)\r\n    {\r\n        if (rayWidth === undefined) { rayWidth = 1; }\r\n        \r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var result = [];\r\n        var collisions = Query.ray(bodies, Vector.create(x1, y1), Vector.create(x2, y2), rayWidth);\r\n\r\n        for (var i = 0; i < collisions.length; i++)\r\n        {\r\n            result.push(collisions[i].body);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Checks the given Matter Body to see if it intersects with any of the given bodies.\r\n     * \r\n     * If no bodies are provided it will check against all bodies in the Matter World.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#intersectBody\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody} body - The target body.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - An array of bodies to check the target body against. If not provided it will search all bodies in the world.\r\n     * \r\n     * @return {Phaser.Types.Physics.Matter.MatterBody[]} An array of bodies whos vertices intersect with target body.\r\n     */\r\n    intersectBody: function (body, bodies)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var result = [];\r\n        var collisions = Query.collides(body, bodies);\r\n\r\n        for (var i = 0; i < collisions.length; i++)\r\n        {\r\n            var pair = collisions[i];\r\n\r\n            if (pair.bodyA === body)\r\n            {\r\n                result.push(pair.bodyB);\r\n            }\r\n            else\r\n            {\r\n                result.push(pair.bodyA);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if the target body, or an array of target bodies, intersects with any of the given bodies.\r\n     * \r\n     * If intersection occurs this method will return `true` and, if provided, invoke the callbacks.\r\n     * \r\n     * If no bodies are provided for the second parameter the target will check again all bodies in the Matter World.\r\n     * \r\n     * Note that bodies can only overlap if they are in non-colliding collision groups or categories.\r\n     * \r\n     * If you provide a `processCallback` then the two bodies that overlap are sent to it. This callback\r\n     * must return a boolean and is used to allow you to perform additional processing tests before a final\r\n     * outcome is decided. If it returns `true` then the bodies are finally passed to the `overlapCallback`, if set.\r\n     * \r\n     * If you provide an `overlapCallback` then the matching pairs of overlapping bodies will be sent to it.\r\n     * \r\n     * Both callbacks have the following signature: `function (bodyA, bodyB, collisionInfo)` where `bodyA` is always\r\n     * the target body. The `collisionInfo` object contains additional data, such as the angle and depth of penetration.\r\n     * \r\n     * @method Phaser.Physics.Matter.MatterPhysics#overlap\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} target - The target body, or array of target bodies, to check.\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} [bodies] - The second body, or array of bodies, to check. If falsey it will check against all bodies in the world.\r\n     * @param {ArcadePhysicsCallback} [overlapCallback] - An optional callback function that is called if the bodies overlap.\r\n     * @param {ArcadePhysicsCallback} [processCallback] - An optional callback function that lets you perform additional checks against the two bodies if they overlap. If this is set then `overlapCallback` will only be invoked if this callback returns `true`.\r\n     * @param {*} [callbackContext] - The context, or scope, in which to run the callbacks.\r\n     * \r\n     * @return {boolean} `true` if the target body intersects with _any_ of the bodies given, otherwise `false`.\r\n     */\r\n    overlap: function (target, bodies, overlapCallback, processCallback, callbackContext)\r\n    {\r\n        if (overlapCallback === undefined) { overlapCallback = null; }\r\n        if (processCallback === undefined) { processCallback = null; }\r\n        if (callbackContext === undefined) { callbackContext = overlapCallback; }\r\n\r\n        if (!Array.isArray(target))\r\n        {\r\n            target = [ target ];\r\n        }\r\n\r\n        target = this.getMatterBodies(target);\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var match = false;\r\n\r\n        for (var i = 0; i < target.length; i++)\r\n        {\r\n            var entry = target[i];\r\n\r\n            var collisions = Query.collides(entry, bodies);\r\n\r\n            for (var c = 0; c < collisions.length; c++)\r\n            {\r\n                var info = collisions[c];\r\n                var bodyB = (info.bodyA.id === entry.id) ? info.bodyB : info.bodyA;\r\n\r\n                if (!processCallback || processCallback.call(callbackContext, entry, bodyB, info))\r\n                {\r\n                    match = true;\r\n\r\n                    if (overlapCallback)\r\n                    {\r\n                        overlapCallback.call(callbackContext, entry, bodyB, info);\r\n                    }\r\n                    else if (!processCallback)\r\n                    {\r\n                        //  If there are no callbacks we don't need to test every body, just exit when the first is found\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return match;\r\n    },\r\n\r\n    /**\r\n     * Sets the collision filter category of all given Matter Bodies to the given value.\r\n     * \r\n     * This number must be a power of two between 2^0 (= 1) and 2^31.\r\n     * \r\n     * Bodies with different collision groups (see {@link #setCollisionGroup}) will only collide if their collision\r\n     * categories are included in their collision masks (see {@link #setCollidesWith}).\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setCollisionCategory\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} value - Unique category bitfield.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setCollisionCategory: function (bodies, value)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            body.collisionFilter.category = value;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the collision filter group of all given Matter Bodies to the given value.\r\n     * \r\n     * If the group value is zero, or if two Matter Bodies have different group values,\r\n     * they will collide according to the usual collision filter rules (see {@link #setCollisionCategory} and {@link #setCollisionGroup}).\r\n     * \r\n     * If two Matter Bodies have the same positive group value, they will always collide;\r\n     * if they have the same negative group value they will never collide.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setCollisionGroup\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} value - Unique group index.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setCollisionGroup: function (bodies, value)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            body.collisionFilter.group = value;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the collision filter mask of all given Matter Bodies to the given value.\r\n     * \r\n     * Two Matter Bodies with different collision groups will only collide if each one includes the others\r\n     * category in its mask based on a bitwise AND operation: `(categoryA & maskB) !== 0` and \r\n     * `(categoryB & maskA) !== 0` are both true.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setCollidesWith\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody[]} bodies - An array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {(number|number[])} categories - A unique category bitfield, or an array of them.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setCollidesWith: function (bodies, categories)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var flags = 0;\r\n\r\n        if (!Array.isArray(categories))\r\n        {\r\n            flags = categories;\r\n        }\r\n        else\r\n        {\r\n            for (var i = 0; i < categories.length; i++)\r\n            {\r\n                flags |= categories[i];\r\n            }\r\n        }\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            body.collisionFilter.mask = flags;\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Takes an array and returns a new array made from all of the Matter Bodies found in the original array.\r\n     * \r\n     * For example, passing in Matter Game Objects, such as a bunch of Matter Sprites, to this method, would\r\n     * return an array containing all of their native Matter Body objects.\r\n     * \r\n     * If the `bodies` argument is falsey, it will return all bodies in the world.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#getMatterBodies\r\n     * @since 3.22.0\r\n     *\r\n     * @param {array} [bodies] - An array of objects to extract the bodies from. If falsey, it will return all bodies in the world.\r\n     *\r\n     * @return {MatterJS.BodyType[]} An array of native Matter Body objects.\r\n     */\r\n    getMatterBodies: function (bodies)\r\n    {\r\n        if (!bodies)\r\n        {\r\n            return this.world.getAllBodies();\r\n        }\r\n\r\n        if (!Array.isArray(bodies))\r\n        {\r\n            bodies = [ bodies ];\r\n        }\r\n\r\n        var output = [];\r\n\r\n        for (var i = 0; i < bodies.length; i++)\r\n        {\r\n            var body = (bodies[i].hasOwnProperty('body')) ? bodies[i].body : bodies[i];\r\n\r\n            output.push(body);\r\n        }\r\n\r\n        return output;\r\n    },\r\n\r\n    /**\r\n     * Sets both the horizontal and vertical linear velocity of the physics bodies.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setVelocity\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} x - The horizontal linear velocity value.\r\n     * @param {number} y - The vertical linear velocity value.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setVelocity: function (bodies, x, y)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        vec2.x = x;\r\n        vec2.y = y;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            Body.setVelocity(body, vec2);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets just the horizontal linear velocity of the physics bodies.\r\n     * The vertical velocity of the body is unchanged.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setVelocityX\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} x - The horizontal linear velocity value.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setVelocityX: function (bodies, x)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        vec2.x = x;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            vec2.y = body.velocity.y;\r\n            Body.setVelocity(body, vec2);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets just the vertical linear velocity of the physics bodies.\r\n     * The horizontal velocity of the body is unchanged.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setVelocityY\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} y - The vertical linear velocity value.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setVelocityY: function (bodies, y)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        vec2.y = y;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            vec2.x = body.velocity.x;\r\n            Body.setVelocity(body, vec2);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the angular velocity of the bodies instantly.\r\n     * Position, angle, force etc. are unchanged.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#setAngularVelocity\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} value - The angular velocity.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    setAngularVelocity: function (bodies, value)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            Body.setAngularVelocity(body, value);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies a force to a body, at the bodies current position, including resulting torque.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#applyForce\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {Phaser.Types.Math.Vector2Like} force - A Vector that specifies the force to apply.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    applyForce: function (bodies, force)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            vec2.x = body.position.x;\r\n            vec2.y = body.position.y;\r\n\r\n            Body.applyForce(body, vec2, force);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Applies a force to a body, from the given world position, including resulting torque.\r\n     * If no angle is given, the current body angle is used.\r\n     * \r\n     * Use very small speed values, such as 0.1, depending on the mass and required velocity.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#applyForceFromPosition\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {Phaser.Types.Math.Vector2Like} position - A Vector that specifies the world-space position to apply the force at.\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     * @param {number} [angle] - The angle, in radians, to apply the force from. Leave undefined to use the current body angle.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    applyForceFromPosition: function (bodies, position, speed, angle)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            if (angle === undefined)\r\n            {\r\n                angle = body.angle;\r\n            }\r\n\r\n            vec2.x = speed * Math.cos(angle);\r\n            vec2.y = speed * Math.sin(angle);\r\n\r\n            Body.applyForce(body, position, vec2);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Apply a force to a body based on the given angle and speed.\r\n     * If no angle is given, the current body angle is used.\r\n     * \r\n     * Use very small speed values, such as 0.1, depending on the mass and required velocity.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#applyForceFromAngle\r\n     * @since 3.22.0\r\n     *\r\n     * @param {(Phaser.Types.Physics.Matter.MatterBody|Phaser.Types.Physics.Matter.MatterBody[])} bodies - Either a single Body, or an array of bodies to update. If falsey it will use all bodies in the world.\r\n     * @param {number} speed - A speed value to be applied to a directional force.\r\n     * @param {number} [angle] - The angle, in radians, to apply the force from. Leave undefined to use the current body angle.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    applyForceFromAngle: function (bodies, speed, angle)\r\n    {\r\n        bodies = this.getMatterBodies(bodies);\r\n\r\n        var vec2 = this._tempVec2;\r\n\r\n        bodies.forEach(function (body)\r\n        {\r\n            if (angle === undefined)\r\n            {\r\n                angle = body.angle;\r\n            }\r\n\r\n            vec2.x = speed * Math.cos(angle);\r\n            vec2.y = speed * Math.sin(angle);\r\n\r\n            Body.applyForce(body, { x: body.position.x, y: body.position.y }, vec2);\r\n        });\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the length of the given constraint, which is the distance between the two points.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#getConstraintLength\r\n     * @since 3.22.0\r\n     *\r\n     * @param {MatterJS.ConstraintType} constraint - The constraint to get the length from.\r\n     *\r\n     * @return {number} The length of the constraint.\r\n     */\r\n    getConstraintLength: function (constraint)\r\n    {\r\n        var aX = constraint.pointA.x;\r\n        var aY = constraint.pointA.y;\r\n        var bX = constraint.pointB.x;\r\n        var bY = constraint.pointB.y;\r\n\r\n        if (constraint.bodyA)\r\n        {\r\n            aX += constraint.bodyA.position.x;\r\n            aY += constraint.bodyA.position.y;\r\n        }\r\n\r\n        if (constraint.bodyB)\r\n        {\r\n            bX += constraint.bodyB.position.x;\r\n            bY += constraint.bodyB.position.y;\r\n        }\r\n\r\n        return DistanceBetween(aX, aY, bX, bY);\r\n    },\r\n\r\n    /**\r\n     * Aligns a Body, or Matter Game Object, against the given coordinates.\r\n     * \r\n     * The alignment takes place using the body bounds, which take into consideration things\r\n     * like body scale and rotation.\r\n     * \r\n     * Although a Body has a `position` property, it is based on the center of mass for the body,\r\n     * not a dimension based center. This makes aligning bodies difficult, especially if they have\r\n     * rotated or scaled. This method will derive the correct position based on the body bounds and\r\n     * its center of mass offset, in order to align the body with the given coordinate.\r\n     * \r\n     * For example, if you wanted to align a body so it sat in the bottom-center of the\r\n     * Scene, and the world was 800 x 600 in size:\r\n     * \r\n     * ```javascript\r\n     * this.matter.alignBody(body, 400, 600, Phaser.Display.Align.BOTTOM_CENTER);\r\n     * ```\r\n     * \r\n     * You pass in 400 for the x coordinate, because that is the center of the world, and 600 for\r\n     * the y coordinate, as that is the base of the world.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#alignBody\r\n     * @since 3.22.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Matter.MatterBody} body - The Body to align.\r\n     * @param {number} x - The horizontal position to align the body to.\r\n     * @param {number} y - The vertical position to align the body to.\r\n     * @param {integer} align - One of the `Phaser.Display.Align` constants, such as `Phaser.Display.Align.TOP_LEFT`.\r\n     *\r\n     * @return {this} This Matter Physics instance.\r\n     */\r\n    alignBody: function (body, x, y, align)\r\n    {\r\n        body = (body.hasOwnProperty('body')) ? body.body : body;\r\n\r\n        var pos;\r\n\r\n        switch (align)\r\n        {\r\n            case ALIGN_CONST.TOP_LEFT:\r\n            case ALIGN_CONST.LEFT_TOP:\r\n                pos = this.bodyBounds.getTopLeft(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.TOP_CENTER:\r\n                pos = this.bodyBounds.getTopCenter(body, x, y);\r\n                break;\r\n    \r\n            case ALIGN_CONST.TOP_RIGHT:\r\n            case ALIGN_CONST.RIGHT_TOP:\r\n                pos = this.bodyBounds.getTopRight(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.LEFT_CENTER:\r\n                pos = this.bodyBounds.getLeftCenter(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.CENTER:\r\n                pos = this.bodyBounds.getCenter(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.RIGHT_CENTER:\r\n                pos = this.bodyBounds.getRightCenter(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.LEFT_BOTTOM:\r\n            case ALIGN_CONST.BOTTOM_LEFT:\r\n                pos = this.bodyBounds.getBottomLeft(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.BOTTOM_CENTER:\r\n                pos = this.bodyBounds.getBottomCenter(body, x, y);\r\n                break;\r\n\r\n            case ALIGN_CONST.BOTTOM_RIGHT:\r\n            case ALIGN_CONST.RIGHT_BOTTOM:\r\n                pos = this.bodyBounds.getBottomRight(body, x, y);\r\n                break;\r\n        }\r\n\r\n        if (pos)\r\n        {\r\n            Body.setPosition(body, pos);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is shutting down.\r\n     * We need to kill and reset all internal properties as well as stop listening to Scene events.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#shutdown\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    shutdown: function ()\r\n    {\r\n        var eventEmitter = this.systems.events;\r\n\r\n        if (this.world)\r\n        {\r\n            eventEmitter.off(SceneEvents.UPDATE, this.world.update, this.world);\r\n            eventEmitter.off(SceneEvents.POST_UPDATE, this.world.postUpdate, this.world);\r\n        }\r\n\r\n        eventEmitter.off(SceneEvents.SHUTDOWN, this.shutdown, this);\r\n\r\n        if (this.add)\r\n        {\r\n            this.add.destroy();\r\n        }\r\n\r\n        if (this.world)\r\n        {\r\n            this.world.destroy();\r\n        }\r\n\r\n        this.add = null;\r\n        this.world = null;\r\n    },\r\n\r\n    /**\r\n     * The Scene that owns this plugin is being destroyed.\r\n     * We need to shutdown and then kill off all external references.\r\n     *\r\n     * @method Phaser.Physics.Matter.MatterPhysics#destroy\r\n     * @private\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.shutdown();\r\n\r\n        this.scene.sys.events.off(SceneEvents.START, this.start, this);\r\n\r\n        this.scene = null;\r\n        this.systems = null;\r\n    }\r\n\r\n});\r\n\r\nPluginCache.register('MatterPhysics', MatterPhysics, 'matterPhysics');\r\n\r\nmodule.exports = MatterPhysics;\r\n"]},"metadata":{},"sourceType":"script"}