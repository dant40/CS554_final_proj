{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar IsInLayerBounds = require('./IsInLayerBounds');\n/**\r\n * Gets a tile at the given tile coordinates from the given layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n * were invalid.\r\n */\n\n\nvar GetTileAt = function (tileX, tileY, nonNull, layer) {\n  if (nonNull === undefined) {\n    nonNull = false;\n  }\n\n  if (IsInLayerBounds(tileX, tileY, layer)) {\n    var tile = layer.data[tileY][tileX] || null;\n\n    if (tile === null) {\n      return null;\n    } else if (tile.index === -1) {\n      return nonNull ? tile : null;\n    } else {\n      return tile;\n    }\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = GetTileAt;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/components/GetTileAt.js"],"names":["IsInLayerBounds","require","GetTileAt","tileX","tileY","nonNull","layer","undefined","tile","data","index","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIC,SAAS,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAChB;AACI,MAAID,OAAO,KAAKE,SAAhB,EAA2B;AAAEF,IAAAA,OAAO,GAAG,KAAV;AAAkB;;AAE/C,MAAIL,eAAe,CAACG,KAAD,EAAQC,KAAR,EAAeE,KAAf,CAAnB,EACA;AACI,QAAIE,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAWL,KAAX,EAAkBD,KAAlB,KAA4B,IAAvC;;AACA,QAAIK,IAAI,KAAK,IAAb,EACA;AACI,aAAO,IAAP;AACH,KAHD,MAIK,IAAIA,IAAI,CAACE,KAAL,KAAe,CAAC,CAApB,EACL;AACI,aAAOL,OAAO,GAAGG,IAAH,GAAU,IAAxB;AACH,KAHI,MAKL;AACI,aAAOA,IAAP;AACH;AACJ,GAfD,MAiBA;AACI,WAAO,IAAP;AACH;AACJ,CAxBD;;AA0BAG,MAAM,CAACC,OAAP,GAAiBV,SAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar IsInLayerBounds = require('./IsInLayerBounds');\r\n\r\n/**\r\n * Gets a tile at the given tile coordinates from the given layer.\r\n *\r\n * @function Phaser.Tilemaps.Components.GetTileAt\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {integer} tileX - X position to get the tile from (given in tile units, not pixels).\r\n * @param {integer} tileY - Y position to get the tile from (given in tile units, not pixels).\r\n * @param {boolean} [nonNull=false] - If true getTile won't return null for empty tiles, but a Tile object with an index of -1.\r\n * @param {Phaser.Tilemaps.LayerData} layer - The Tilemap Layer to act upon.\r\n * \r\n * @return {Phaser.Tilemaps.Tile} The tile at the given coordinates or null if no tile was found or the coordinates\r\n * were invalid.\r\n */\r\nvar GetTileAt = function (tileX, tileY, nonNull, layer)\r\n{\r\n    if (nonNull === undefined) { nonNull = false; }\r\n\r\n    if (IsInLayerBounds(tileX, tileY, layer))\r\n    {\r\n        var tile = layer.data[tileY][tileX] || null;\r\n        if (tile === null)\r\n        {\r\n            return null;\r\n        }\r\n        else if (tile.index === -1)\r\n        {\r\n            return nonNull ? tile : null;\r\n        }\r\n        else\r\n        {\r\n            return tile;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return null;\r\n    }\r\n};\r\n\r\nmodule.exports = GetTileAt;\r\n"]},"metadata":{},"sourceType":"script"}