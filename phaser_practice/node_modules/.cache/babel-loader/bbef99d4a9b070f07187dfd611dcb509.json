{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Sets a value in an object, allowing for dot notation to control the depth of the property.\r\n * \r\n * For example:\r\n * \r\n * ```javascript\r\n * var data = {\r\n *   world: {\r\n *     position: {\r\n *       x: 200,\r\n *       y: 100\r\n *     }\r\n *   }\r\n * };\r\n * \r\n * SetValue(data, 'world.position.y', 300);\r\n * \r\n * console.log(data.world.position.y); // 300\r\n * ```\r\n *\r\n * @function Phaser.Utils.Objects.SetValue\r\n * @since 3.17.0\r\n *\r\n * @param {object} source - The object to set the value in.\r\n * @param {string} key - The name of the property in the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`)\r\n * @param {any} value - The value to set into the property, if found in the source object.\r\n *\r\n * @return {boolean} `true` if the property key was valid and the value was set, otherwise `false`.\r\n */\nvar SetValue = function (source, key, value) {\n  if (!source || typeof source === 'number') {\n    return false;\n  } else if (source.hasOwnProperty(key)) {\n    source[key] = value;\n    return true;\n  } else if (key.indexOf('.') !== -1) {\n    var keys = key.split('.');\n    var parent = source;\n    var prev = source; //  Use for loop here so we can break early\n\n    for (var i = 0; i < keys.length; i++) {\n      if (parent.hasOwnProperty(keys[i])) {\n        //  Yes it has a key property, let's carry on down\n        prev = parent;\n        parent = parent[keys[i]];\n      } else {\n        return false;\n      }\n    }\n\n    prev[keys[keys.length - 1]] = value;\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = SetValue;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/utils/object/SetValue.js"],"names":["SetValue","source","key","value","hasOwnProperty","indexOf","keys","split","parent","prev","i","length","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAIA,QAAQ,GAAG,UAAUC,MAAV,EAAkBC,GAAlB,EAAuBC,KAAvB,EACf;AACI,MAAI,CAACF,MAAD,IAAW,OAAOA,MAAP,KAAkB,QAAjC,EACA;AACI,WAAO,KAAP;AACH,GAHD,MAIK,IAAIA,MAAM,CAACG,cAAP,CAAsBF,GAAtB,CAAJ,EACL;AACID,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AAEA,WAAO,IAAP;AACH,GALI,MAMA,IAAID,GAAG,CAACG,OAAJ,CAAY,GAAZ,MAAqB,CAAC,CAA1B,EACL;AACI,QAAIC,IAAI,GAAGJ,GAAG,CAACK,KAAJ,CAAU,GAAV,CAAX;AACA,QAAIC,MAAM,GAAGP,MAAb;AACA,QAAIQ,IAAI,GAAGR,MAAX,CAHJ,CAKI;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EACA;AACI,UAAIF,MAAM,CAACJ,cAAP,CAAsBE,IAAI,CAACI,CAAD,CAA1B,CAAJ,EACA;AACI;AACAD,QAAAA,IAAI,GAAGD,MAAP;AACAA,QAAAA,MAAM,GAAGA,MAAM,CAACF,IAAI,CAACI,CAAD,CAAL,CAAf;AACH,OALD,MAOA;AACI,eAAO,KAAP;AACH;AACJ;;AAEDD,IAAAA,IAAI,CAACH,IAAI,CAACA,IAAI,CAACK,MAAL,GAAc,CAAf,CAAL,CAAJ,GAA8BR,KAA9B;AAEA,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH,CAvCD;;AAyCAS,MAAM,CAACC,OAAP,GAAiBb,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Sets a value in an object, allowing for dot notation to control the depth of the property.\r\n * \r\n * For example:\r\n * \r\n * ```javascript\r\n * var data = {\r\n *   world: {\r\n *     position: {\r\n *       x: 200,\r\n *       y: 100\r\n *     }\r\n *   }\r\n * };\r\n * \r\n * SetValue(data, 'world.position.y', 300);\r\n * \r\n * console.log(data.world.position.y); // 300\r\n * ```\r\n *\r\n * @function Phaser.Utils.Objects.SetValue\r\n * @since 3.17.0\r\n *\r\n * @param {object} source - The object to set the value in.\r\n * @param {string} key - The name of the property in the object. If a property is nested, the names of its preceding properties should be separated by a dot (`.`)\r\n * @param {any} value - The value to set into the property, if found in the source object.\r\n *\r\n * @return {boolean} `true` if the property key was valid and the value was set, otherwise `false`.\r\n */\r\nvar SetValue = function (source, key, value)\r\n{\r\n    if (!source || typeof source === 'number')\r\n    {\r\n        return false;\r\n    }\r\n    else if (source.hasOwnProperty(key))\r\n    {\r\n        source[key] = value;\r\n\r\n        return true;\r\n    }\r\n    else if (key.indexOf('.') !== -1)\r\n    {\r\n        var keys = key.split('.');\r\n        var parent = source;\r\n        var prev = source;\r\n\r\n        //  Use for loop here so we can break early\r\n        for (var i = 0; i < keys.length; i++)\r\n        {\r\n            if (parent.hasOwnProperty(keys[i]))\r\n            {\r\n                //  Yes it has a key property, let's carry on down\r\n                prev = parent;\r\n                parent = parent[keys[i]];\r\n            }\r\n            else\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        prev[keys[keys.length - 1]] = value;\r\n\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n};\r\n\r\nmodule.exports = SetValue;\r\n"]},"metadata":{},"sourceType":"script"}