{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar CircleContains = require('../../geom/circle/Contains');\n\nvar Class = require('../../utils/Class');\n\nvar CONST = require('./const');\n\nvar RectangleContains = require('../../geom/rectangle/Contains');\n\nvar Vector2 = require('../../math/Vector2');\n/**\r\n * @classdesc\r\n * A Static Arcade Physics Body.\r\n *\r\n * A Static Body never moves, and isn't automatically synchronized with its parent Game Object.\r\n * That means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\r\n *\r\n * A Static Body can collide with other Bodies, but is never moved by collisions.\r\n *\r\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.\r\n *\r\n * @class StaticBody\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics simulation this Static Body belongs to.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object this Static Body belongs to.\r\n */\n\n\nvar StaticBody = new Class({\n  initialize: function StaticBody(world, gameObject) {\n    var width = gameObject.width ? gameObject.width : 64;\n    var height = gameObject.height ? gameObject.height : 64;\n    /**\r\n     * The Arcade Physics simulation this Static Body belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#world\r\n     * @type {Phaser.Physics.Arcade.World}\r\n     * @since 3.0.0\r\n     */\n\n    this.world = world;\n    /**\r\n     * The Game Object this Static Body belongs to.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#gameObject\r\n     * @type {Phaser.GameObjects.GameObject}\r\n     * @since 3.0.0\r\n     */\n\n    this.gameObject = gameObject;\n    /**\r\n     * Whether the Static Body's boundary is drawn to the debug display.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#debugShowBody\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugShowBody = world.defaults.debugShowStaticBody;\n    /**\r\n     * The color of this Static Body on the debug display.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#debugBodyColor\r\n     * @type {integer}\r\n     * @since 3.0.0\r\n     */\n\n    this.debugBodyColor = world.defaults.staticBodyDebugColor;\n    /**\r\n     * Whether this Static Body is updated by the physics simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#enable\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.enable = true;\n    /**\r\n     * Whether this Static Body's boundary is circular (`true`) or rectangular (`false`).\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#isCircle\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.isCircle = false;\n    /**\r\n     * If this Static Body is circular, this is the unscaled radius of the Static Body's boundary, as set by {@link #setCircle}, in source pixels.\r\n     * The true radius is equal to `halfWidth`.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#radius\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.radius = 0;\n    /**\r\n     * The offset of this Static Body's actual position from any updated position.\r\n     *\r\n     * Unlike a dynamic Body, a Static Body does not follow its Game Object. As such, this offset is only applied when resizing the Static Body.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#offset\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.offset = new Vector2();\n    /**\r\n     * The position of this Static Body within the simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#position\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.position = new Vector2(gameObject.x - gameObject.displayOriginX, gameObject.y - gameObject.displayOriginY);\n    /**\r\n     * The width of the Static Body's boundary, in pixels.\r\n     * If the Static Body is circular, this is also the Static Body's diameter.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#width\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.width = width;\n    /**\r\n     * The height of the Static Body's boundary, in pixels.\r\n     * If the Static Body is circular, this is also the Static Body's diameter.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#height\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.height = height;\n    /**\r\n     * Half the Static Body's width, in pixels.\r\n     * If the Static Body is circular, this is also the Static Body's radius.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#halfWidth\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.halfWidth = Math.abs(this.width / 2);\n    /**\r\n     * Half the Static Body's height, in pixels.\r\n     * If the Static Body is circular, this is also the Static Body's radius.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#halfHeight\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\n\n    this.halfHeight = Math.abs(this.height / 2);\n    /**\r\n     * The center of the Static Body's boundary.\r\n     * This is the midpoint of its `position` (top-left corner) and its bottom-right corner.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#center\r\n     * @type {Phaser.Math.Vector2}\r\n     * @since 3.0.0\r\n     */\n\n    this.center = new Vector2(gameObject.x + this.halfWidth, gameObject.y + this.halfHeight);\n    /**\r\n     * A constant zero velocity used by the Arcade Physics simulation for calculations.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#velocity\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.velocity = Vector2.ZERO;\n    /**\r\n     * A constant `false` value expected by the Arcade Physics simulation.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#allowGravity\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.allowGravity = false;\n    /**\r\n     * Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#gravity\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.gravity = Vector2.ZERO;\n    /**\r\n     * Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#bounce\r\n     * @type {Phaser.Math.Vector2}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\n\n    this.bounce = Vector2.ZERO; //  If true this Body will dispatch events\n\n    /**\r\n     * Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary.\r\n     * Always false for a Static Body. (Static Bodies never collide with the world boundary and never trigger a `worldbounds` event.)\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#onWorldBounds\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.onWorldBounds = false;\n    /**\r\n     * Whether the simulation emits a `collide` event when this StaticBody collides with another.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#onCollide\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.onCollide = false;\n    /**\r\n     * Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#onOverlap\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.onOverlap = false;\n    /**\r\n     * The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#mass\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.mass = 1;\n    /**\r\n     * Whether this object can be moved by collisions with another body.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#immovable\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n\n    this.immovable = true;\n    /**\r\n     * A flag disabling the default horizontal separation of colliding bodies. Pass your own `collideHandler` to the collider.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#customSeparateX\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.customSeparateX = false;\n    /**\r\n     * A flag disabling the default vertical separation of colliding bodies. Pass your own `collideHandler` to the collider.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#customSeparateY\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.customSeparateY = false;\n    /**\r\n     * The amount of horizontal overlap (before separation), if this Body is colliding with another.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#overlapX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.overlapX = 0;\n    /**\r\n     * The amount of vertical overlap (before separation), if this Body is colliding with another.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#overlapY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.overlapY = 0;\n    /**\r\n     * The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#overlapR\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.overlapR = 0;\n    /**\r\n     * Whether this StaticBody has ever overlapped with another while both were not moving.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#embedded\r\n     * @type {boolean}\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.embedded = false;\n    /**\r\n     * Whether this StaticBody interacts with the world boundary.\r\n     * Always false for a Static Body. (Static Bodies never collide with the world boundary.)\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#collideWorldBounds\r\n     * @type {boolean}\r\n     * @readonly\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this.collideWorldBounds = false;\n    /**\r\n     * Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#checkCollision\r\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n     * @since 3.0.0\r\n     */\n\n    this.checkCollision = {\n      none: false,\n      up: true,\n      down: true,\n      left: true,\n      right: true\n    };\n    /**\r\n     * Whether this StaticBody has ever collided with another body and in which direction.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#touching\r\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n     * @since 3.0.0\r\n     */\n\n    this.touching = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\r\n     * Whether this StaticBody was colliding with another body during the last step or any previous step, and in which direction.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#wasTouching\r\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n     * @since 3.0.0\r\n     */\n\n    this.wasTouching = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\r\n     * Whether this StaticBody has ever collided with a tile or the world boundary.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#blocked\r\n     * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n     * @since 3.0.0\r\n     */\n\n    this.blocked = {\n      none: true,\n      up: false,\n      down: false,\n      left: false,\n      right: false\n    };\n    /**\r\n     * The StaticBody's physics type (static by default).\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#physicsType\r\n     * @type {integer}\r\n     * @default Phaser.Physics.Arcade.STATIC_BODY\r\n     * @since 3.0.0\r\n     */\n\n    this.physicsType = CONST.STATIC_BODY;\n    /**\r\n     * The calculated change in the Body's horizontal position during the current step.\r\n     * For a static body this is always zero.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#_dx\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.10.0\r\n     */\n\n    this._dx = 0;\n    /**\r\n     * The calculated change in the Body's vertical position during the current step.\r\n     * For a static body this is always zero.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#_dy\r\n     * @type {number}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.10.0\r\n     */\n\n    this._dy = 0;\n  },\n\n  /**\r\n   * Changes the Game Object this Body is bound to.\r\n   * First it removes its reference from the old Game Object, then sets the new one.\r\n   * You can optionally update the position and dimensions of this Body to reflect that of the new Game Object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#setGameObject\r\n   * @since 3.1.0\r\n   *\r\n   * @param {Phaser.GameObjects.GameObject} gameObject - The new Game Object that will own this Body.\r\n   * @param {boolean} [update=true] - Reposition and resize this Body to match the new Game Object?\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   *\r\n   * @see Phaser.Physics.Arcade.StaticBody#updateFromGameObject\r\n   */\n  setGameObject: function (gameObject, update) {\n    if (gameObject && gameObject !== this.gameObject) {\n      //  Remove this body from the old game object\n      this.gameObject.body = null;\n      gameObject.body = this; //  Update our reference\n\n      this.gameObject = gameObject;\n    }\n\n    if (update) {\n      this.updateFromGameObject();\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Syncs the Body's position and size with its parent Game Object.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#updateFromGameObject\r\n   * @since 3.1.0\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  updateFromGameObject: function () {\n    this.world.staticTree.remove(this);\n    var gameObject = this.gameObject;\n    gameObject.getTopLeft(this.position);\n    this.width = gameObject.displayWidth;\n    this.height = gameObject.displayHeight;\n    this.halfWidth = Math.abs(this.width / 2);\n    this.halfHeight = Math.abs(this.height / 2);\n    this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\r\n   * Sets the offset of the body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#setOffset\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} x - The horizontal offset of the Body from the Game Object's center.\r\n   * @param {number} y - The vertical offset of the Body from the Game Object's center.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  setOffset: function (x, y) {\n    if (y === undefined) {\n      y = x;\n    }\n\n    this.world.staticTree.remove(this);\n    this.position.x -= this.offset.x;\n    this.position.y -= this.offset.y;\n    this.offset.set(x, y);\n    this.position.x += this.offset.x;\n    this.position.y += this.offset.y;\n    this.updateCenter();\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\r\n   * Sets the size of the body.\r\n   * Resets the width and height to match current frame, if no width and height provided and a frame is found.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#setSize\r\n   * @since 3.0.0\r\n   *\r\n   * @param {integer} [width] - The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\r\n   * @param {integer} [height] - The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\r\n   * @param {boolean} [center=true] - Modify the Body's `offset`, placing the Body's center on its Game Object's center. Only works if the Game Object has the `getCenter` method.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  setSize: function (width, height, center) {\n    if (center === undefined) {\n      center = true;\n    }\n\n    var gameObject = this.gameObject;\n\n    if (!width && gameObject.frame) {\n      width = gameObject.frame.realWidth;\n    }\n\n    if (!height && gameObject.frame) {\n      height = gameObject.frame.realHeight;\n    }\n\n    this.world.staticTree.remove(this);\n    this.width = width;\n    this.height = height;\n    this.halfWidth = Math.floor(width / 2);\n    this.halfHeight = Math.floor(height / 2);\n\n    if (center && gameObject.getCenter) {\n      var ox = gameObject.displayWidth / 2;\n      var oy = gameObject.displayHeight / 2;\n      this.position.x -= this.offset.x;\n      this.position.y -= this.offset.y;\n      this.offset.set(ox - this.halfWidth, oy - this.halfHeight);\n      this.position.x += this.offset.x;\n      this.position.y += this.offset.y;\n    }\n\n    this.updateCenter();\n    this.isCircle = false;\n    this.radius = 0;\n    this.world.staticTree.insert(this);\n    return this;\n  },\n\n  /**\r\n   * Sets this Static Body to have a circular body and sets its sizes and position.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#setCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radius - The radius of the StaticBody, in pixels.\r\n   * @param {number} [offsetX] - The horizontal offset of the StaticBody from its Game Object, in pixels.\r\n   * @param {number} [offsetY] - The vertical offset of the StaticBody from its Game Object, in pixels.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  setCircle: function (radius, offsetX, offsetY) {\n    if (offsetX === undefined) {\n      offsetX = this.offset.x;\n    }\n\n    if (offsetY === undefined) {\n      offsetY = this.offset.y;\n    }\n\n    if (radius > 0) {\n      this.world.staticTree.remove(this);\n      this.isCircle = true;\n      this.radius = radius;\n      this.width = radius * 2;\n      this.height = radius * 2;\n      this.halfWidth = Math.floor(this.width / 2);\n      this.halfHeight = Math.floor(this.height / 2);\n      this.offset.set(offsetX, offsetY);\n      this.updateCenter();\n      this.world.staticTree.insert(this);\n    } else {\n      this.isCircle = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Updates the StaticBody's `center` from its `position` and dimensions.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#updateCenter\r\n   * @since 3.0.0\r\n   */\n  updateCenter: function () {\n    this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\n  },\n\n  /**\r\n   * Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#reset\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [x] - The x coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\r\n   * @param {number} [y] - The y coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\r\n   */\n  reset: function (x, y) {\n    var gameObject = this.gameObject;\n\n    if (x === undefined) {\n      x = gameObject.x;\n    }\n\n    if (y === undefined) {\n      y = gameObject.y;\n    }\n\n    this.world.staticTree.remove(this);\n    gameObject.setPosition(x, y);\n    gameObject.getTopLeft(this.position);\n    this.updateCenter();\n    this.world.staticTree.insert(this);\n  },\n\n  /**\r\n   * NOOP function. A Static Body cannot be stopped.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#stop\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  stop: function () {\n    return this;\n  },\n\n  /**\r\n   * Returns the x and y coordinates of the top left and bottom right points of the StaticBody.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#getBounds\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} obj - The object which will hold the coordinates of the bounds.\r\n   *\r\n   * @return {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} The same object that was passed with `x`, `y`, `right` and `bottom` values matching the respective values of the StaticBody.\r\n   */\n  getBounds: function (obj) {\n    obj.x = this.x;\n    obj.y = this.y;\n    obj.right = this.right;\n    obj.bottom = this.bottom;\n    return obj;\n  },\n\n  /**\r\n   * Checks to see if a given x,y coordinate is colliding with this Static Body.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#hitTest\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to check against this body.\r\n   * @param {number} y - The y coordinate to check against this body.\r\n   *\r\n   * @return {boolean} `true` if the given coordinate lies within this body, otherwise `false`.\r\n   */\n  hitTest: function (x, y) {\n    return this.isCircle ? CircleContains(this, x, y) : RectangleContains(this, x, y);\n  },\n\n  /**\r\n   * NOOP\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#postUpdate\r\n   * @since 3.12.0\r\n   */\n  postUpdate: function () {},\n\n  /**\r\n   * The absolute (non-negative) change in this StaticBody's horizontal position from the previous step. Always zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#deltaAbsX\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} Always zero for a Static Body.\r\n   */\n  deltaAbsX: function () {\n    return 0;\n  },\n\n  /**\r\n   * The absolute (non-negative) change in this StaticBody's vertical position from the previous step. Always zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#deltaAbsY\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} Always zero for a Static Body.\r\n   */\n  deltaAbsY: function () {\n    return 0;\n  },\n\n  /**\r\n   * The change in this StaticBody's horizontal position from the previous step. Always zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#deltaX\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\r\n   */\n  deltaX: function () {\n    return 0;\n  },\n\n  /**\r\n   * The change in this StaticBody's vertical position from the previous step. Always zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#deltaY\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\r\n   */\n  deltaY: function () {\n    return 0;\n  },\n\n  /**\r\n   * The change in this StaticBody's rotation from the previous step. Always zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#deltaZ\r\n   * @since 3.0.0\r\n   *\r\n   * @return {number} The change in this StaticBody's rotation from the previous step. Always zero.\r\n   */\n  deltaZ: function () {\n    return 0;\n  },\n\n  /**\r\n   * Disables this Body and marks it for destruction during the next step.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this.enable = false;\n    this.world.pendingDestroy.set(this);\n  },\n\n  /**\r\n   * Draws a graphical representation of the StaticBody for visual debugging purposes.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#drawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.GameObjects.Graphics} graphic - The Graphics object to use for the debug drawing of the StaticBody.\r\n   */\n  drawDebug: function (graphic) {\n    var pos = this.position;\n    var x = pos.x + this.halfWidth;\n    var y = pos.y + this.halfHeight;\n\n    if (this.debugShowBody) {\n      graphic.lineStyle(graphic.defaultStrokeWidth, this.debugBodyColor, 1);\n\n      if (this.isCircle) {\n        graphic.strokeCircle(x, y, this.width / 2);\n      } else {\n        graphic.strokeRect(pos.x, pos.y, this.width, this.height);\n      }\n    }\n  },\n\n  /**\r\n   * Indicates whether the StaticBody is going to be showing a debug visualization during postUpdate.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#willDrawDebug\r\n   * @since 3.0.0\r\n   *\r\n   * @return {boolean} Whether or not the StaticBody is going to show the debug visualization during postUpdate.\r\n   */\n  willDrawDebug: function () {\n    return this.debugShowBody;\n  },\n\n  /**\r\n   * Sets the Mass of the StaticBody. Will set the Mass to 0.1 if the value passed is less than or equal to zero.\r\n   *\r\n   * @method Phaser.Physics.Arcade.StaticBody#setMass\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} value - The value to set the Mass to. Values of zero or less are changed to 0.1.\r\n   *\r\n   * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n   */\n  setMass: function (value) {\n    if (value <= 0) {\n      //  Causes havoc otherwise\n      value = 0.1;\n    }\n\n    this.mass = value;\n    return this;\n  },\n\n  /**\r\n   * The x coordinate of the StaticBody.\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#x\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  x: {\n    get: function () {\n      return this.position.x;\n    },\n    set: function (value) {\n      this.world.staticTree.remove(this);\n      this.position.x = value;\n      this.world.staticTree.insert(this);\n    }\n  },\n\n  /**\r\n   * The y coordinate of the StaticBody.\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#y\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  y: {\n    get: function () {\n      return this.position.y;\n    },\n    set: function (value) {\n      this.world.staticTree.remove(this);\n      this.position.y = value;\n      this.world.staticTree.insert(this);\n    }\n  },\n\n  /**\r\n   * Returns the left-most x coordinate of the area of the StaticBody.\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#left\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  left: {\n    get: function () {\n      return this.position.x;\n    }\n  },\n\n  /**\r\n   * The right-most x coordinate of the area of the StaticBody.\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#right\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  right: {\n    get: function () {\n      return this.position.x + this.width;\n    }\n  },\n\n  /**\r\n   * The highest y coordinate of the area of the StaticBody.\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#top\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  top: {\n    get: function () {\n      return this.position.y;\n    }\n  },\n\n  /**\r\n   * The lowest y coordinate of the area of the StaticBody. (y + height)\r\n   *\r\n   * @name Phaser.Physics.Arcade.StaticBody#bottom\r\n   * @type {number}\r\n   * @readonly\r\n   * @since 3.0.0\r\n   */\n  bottom: {\n    get: function () {\n      return this.position.y + this.height;\n    }\n  }\n});\nmodule.exports = StaticBody;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/arcade/StaticBody.js"],"names":["CircleContains","require","Class","CONST","RectangleContains","Vector2","StaticBody","initialize","world","gameObject","width","height","debugShowBody","defaults","debugShowStaticBody","debugBodyColor","staticBodyDebugColor","enable","isCircle","radius","offset","position","x","displayOriginX","y","displayOriginY","halfWidth","Math","abs","halfHeight","center","velocity","ZERO","allowGravity","gravity","bounce","onWorldBounds","onCollide","onOverlap","mass","immovable","customSeparateX","customSeparateY","overlapX","overlapY","overlapR","embedded","collideWorldBounds","checkCollision","none","up","down","left","right","touching","wasTouching","blocked","physicsType","STATIC_BODY","_dx","_dy","setGameObject","update","body","updateFromGameObject","staticTree","remove","getTopLeft","displayWidth","displayHeight","set","insert","setOffset","undefined","updateCenter","setSize","frame","realWidth","realHeight","floor","getCenter","ox","oy","setCircle","offsetX","offsetY","reset","setPosition","stop","getBounds","obj","bottom","hitTest","postUpdate","deltaAbsX","deltaAbsY","deltaX","deltaY","deltaZ","destroy","pendingDestroy","drawDebug","graphic","pos","lineStyle","defaultStrokeWidth","strokeCircle","strokeRect","willDrawDebug","setMass","value","get","top","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar CircleContains = require('../../geom/circle/Contains');\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('./const');\r\nvar RectangleContains = require('../../geom/rectangle/Contains');\r\nvar Vector2 = require('../../math/Vector2');\r\n\r\n/**\r\n * @classdesc\r\n * A Static Arcade Physics Body.\r\n *\r\n * A Static Body never moves, and isn't automatically synchronized with its parent Game Object.\r\n * That means if you make any change to the parent's origin, position, or scale after creating or adding the body, you'll need to update the Body manually.\r\n *\r\n * A Static Body can collide with other Bodies, but is never moved by collisions.\r\n *\r\n * Its dynamic counterpart is {@link Phaser.Physics.Arcade.Body}.\r\n *\r\n * @class StaticBody\r\n * @memberof Phaser.Physics.Arcade\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Physics.Arcade.World} world - The Arcade Physics simulation this Static Body belongs to.\r\n * @param {Phaser.GameObjects.GameObject} gameObject - The Game Object this Static Body belongs to.\r\n */\r\nvar StaticBody = new Class({\r\n\r\n    initialize:\r\n\r\n    function StaticBody (world, gameObject)\r\n    {\r\n        var width = (gameObject.width) ? gameObject.width : 64;\r\n        var height = (gameObject.height) ? gameObject.height : 64;\r\n\r\n        /**\r\n         * The Arcade Physics simulation this Static Body belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#world\r\n         * @type {Phaser.Physics.Arcade.World}\r\n         * @since 3.0.0\r\n         */\r\n        this.world = world;\r\n\r\n        /**\r\n         * The Game Object this Static Body belongs to.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#gameObject\r\n         * @type {Phaser.GameObjects.GameObject}\r\n         * @since 3.0.0\r\n         */\r\n        this.gameObject = gameObject;\r\n\r\n        /**\r\n         * Whether the Static Body's boundary is drawn to the debug display.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#debugShowBody\r\n         * @type {boolean}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugShowBody = world.defaults.debugShowStaticBody;\r\n\r\n        /**\r\n         * The color of this Static Body on the debug display.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#debugBodyColor\r\n         * @type {integer}\r\n         * @since 3.0.0\r\n         */\r\n        this.debugBodyColor = world.defaults.staticBodyDebugColor;\r\n\r\n        /**\r\n         * Whether this Static Body is updated by the physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#enable\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.enable = true;\r\n\r\n        /**\r\n         * Whether this Static Body's boundary is circular (`true`) or rectangular (`false`).\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#isCircle\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.isCircle = false;\r\n\r\n        /**\r\n         * If this Static Body is circular, this is the unscaled radius of the Static Body's boundary, as set by {@link #setCircle}, in source pixels.\r\n         * The true radius is equal to `halfWidth`.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#radius\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.radius = 0;\r\n\r\n        /**\r\n         * The offset of this Static Body's actual position from any updated position.\r\n         *\r\n         * Unlike a dynamic Body, a Static Body does not follow its Game Object. As such, this offset is only applied when resizing the Static Body.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#offset\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.offset = new Vector2();\r\n\r\n        /**\r\n         * The position of this Static Body within the simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#position\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.position = new Vector2(gameObject.x - gameObject.displayOriginX, gameObject.y - gameObject.displayOriginY);\r\n\r\n        /**\r\n         * The width of the Static Body's boundary, in pixels.\r\n         * If the Static Body is circular, this is also the Static Body's diameter.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#width\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.width = width;\r\n\r\n        /**\r\n         * The height of the Static Body's boundary, in pixels.\r\n         * If the Static Body is circular, this is also the Static Body's diameter.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#height\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.height = height;\r\n\r\n        /**\r\n         * Half the Static Body's width, in pixels.\r\n         * If the Static Body is circular, this is also the Static Body's radius.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#halfWidth\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.halfWidth = Math.abs(this.width / 2);\r\n\r\n        /**\r\n         * Half the Static Body's height, in pixels.\r\n         * If the Static Body is circular, this is also the Static Body's radius.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#halfHeight\r\n         * @type {number}\r\n         * @since 3.0.0\r\n         */\r\n        this.halfHeight = Math.abs(this.height / 2);\r\n\r\n        /**\r\n         * The center of the Static Body's boundary.\r\n         * This is the midpoint of its `position` (top-left corner) and its bottom-right corner.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#center\r\n         * @type {Phaser.Math.Vector2}\r\n         * @since 3.0.0\r\n         */\r\n        this.center = new Vector2(gameObject.x + this.halfWidth, gameObject.y + this.halfHeight);\r\n\r\n        /**\r\n         * A constant zero velocity used by the Arcade Physics simulation for calculations.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#velocity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.velocity = Vector2.ZERO;\r\n\r\n        /**\r\n         * A constant `false` value expected by the Arcade Physics simulation.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#allowGravity\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.allowGravity = false;\r\n\r\n        /**\r\n         * Gravitational force applied specifically to this Body. Values are in pixels per second squared. Always zero for a Static Body.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#gravity\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.gravity = Vector2.ZERO;\r\n\r\n        /**\r\n         * Rebound, or restitution, following a collision, relative to 1. Always zero for a Static Body.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#bounce\r\n         * @type {Phaser.Math.Vector2}\r\n         * @readonly\r\n         * @since 3.0.0\r\n         */\r\n        this.bounce = Vector2.ZERO;\r\n\r\n        //  If true this Body will dispatch events\r\n\r\n        /**\r\n         * Whether the simulation emits a `worldbounds` event when this StaticBody collides with the world boundary.\r\n         * Always false for a Static Body. (Static Bodies never collide with the world boundary and never trigger a `worldbounds` event.)\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#onWorldBounds\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.onWorldBounds = false;\r\n\r\n        /**\r\n         * Whether the simulation emits a `collide` event when this StaticBody collides with another.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#onCollide\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.onCollide = false;\r\n\r\n        /**\r\n         * Whether the simulation emits an `overlap` event when this StaticBody overlaps with another.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#onOverlap\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.onOverlap = false;\r\n\r\n        /**\r\n         * The StaticBody's inertia, relative to a default unit (1). With `bounce`, this affects the exchange of momentum (velocities) during collisions.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#mass\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.mass = 1;\r\n\r\n        /**\r\n         * Whether this object can be moved by collisions with another body.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#immovable\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.immovable = true;\r\n\r\n        /**\r\n         * A flag disabling the default horizontal separation of colliding bodies. Pass your own `collideHandler` to the collider.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#customSeparateX\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.customSeparateX = false;\r\n\r\n        /**\r\n         * A flag disabling the default vertical separation of colliding bodies. Pass your own `collideHandler` to the collider.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#customSeparateY\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.customSeparateY = false;\r\n\r\n        /**\r\n         * The amount of horizontal overlap (before separation), if this Body is colliding with another.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#overlapX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.overlapX = 0;\r\n\r\n        /**\r\n         * The amount of vertical overlap (before separation), if this Body is colliding with another.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#overlapY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.overlapY = 0;\r\n\r\n        /**\r\n         * The amount of overlap (before separation), if this StaticBody is circular and colliding with another circular body.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#overlapR\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.overlapR = 0;\r\n\r\n        /**\r\n         * Whether this StaticBody has ever overlapped with another while both were not moving.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#embedded\r\n         * @type {boolean}\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.embedded = false;\r\n\r\n        /**\r\n         * Whether this StaticBody interacts with the world boundary.\r\n         * Always false for a Static Body. (Static Bodies never collide with the world boundary.)\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#collideWorldBounds\r\n         * @type {boolean}\r\n         * @readonly\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this.collideWorldBounds = false;\r\n\r\n        /**\r\n         * Whether this StaticBody is checked for collisions and for which directions. You can set `checkCollision.none = false` to disable collision checks.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#checkCollision\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n         * @since 3.0.0\r\n         */\r\n        this.checkCollision = { none: false, up: true, down: true, left: true, right: true };\r\n\r\n        /**\r\n         * Whether this StaticBody has ever collided with another body and in which direction.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#touching\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n         * @since 3.0.0\r\n         */\r\n        this.touching = { none: true, up: false, down: false, left: false, right: false };\r\n\r\n        /**\r\n         * Whether this StaticBody was colliding with another body during the last step or any previous step, and in which direction.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#wasTouching\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n         * @since 3.0.0\r\n         */\r\n        this.wasTouching = { none: true, up: false, down: false, left: false, right: false };\r\n\r\n        /**\r\n         * Whether this StaticBody has ever collided with a tile or the world boundary.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#blocked\r\n         * @type {Phaser.Types.Physics.Arcade.ArcadeBodyCollision}\r\n         * @since 3.0.0\r\n         */\r\n        this.blocked = { none: true, up: false, down: false, left: false, right: false };\r\n\r\n        /**\r\n         * The StaticBody's physics type (static by default).\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#physicsType\r\n         * @type {integer}\r\n         * @default Phaser.Physics.Arcade.STATIC_BODY\r\n         * @since 3.0.0\r\n         */\r\n        this.physicsType = CONST.STATIC_BODY;\r\n\r\n        /**\r\n         * The calculated change in the Body's horizontal position during the current step.\r\n         * For a static body this is always zero.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#_dx\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this._dx = 0;\r\n\r\n        /**\r\n         * The calculated change in the Body's vertical position during the current step.\r\n         * For a static body this is always zero.\r\n         *\r\n         * @name Phaser.Physics.Arcade.StaticBody#_dy\r\n         * @type {number}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.10.0\r\n         */\r\n        this._dy = 0;\r\n    },\r\n\r\n    /**\r\n     * Changes the Game Object this Body is bound to.\r\n     * First it removes its reference from the old Game Object, then sets the new one.\r\n     * You can optionally update the position and dimensions of this Body to reflect that of the new Game Object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#setGameObject\r\n     * @since 3.1.0\r\n     *\r\n     * @param {Phaser.GameObjects.GameObject} gameObject - The new Game Object that will own this Body.\r\n     * @param {boolean} [update=true] - Reposition and resize this Body to match the new Game Object?\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     *\r\n     * @see Phaser.Physics.Arcade.StaticBody#updateFromGameObject\r\n     */\r\n    setGameObject: function (gameObject, update)\r\n    {\r\n        if (gameObject && gameObject !== this.gameObject)\r\n        {\r\n            //  Remove this body from the old game object\r\n            this.gameObject.body = null;\r\n\r\n            gameObject.body = this;\r\n\r\n            //  Update our reference\r\n            this.gameObject = gameObject;\r\n        }\r\n\r\n        if (update)\r\n        {\r\n            this.updateFromGameObject();\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Syncs the Body's position and size with its parent Game Object.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#updateFromGameObject\r\n     * @since 3.1.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    updateFromGameObject: function ()\r\n    {\r\n        this.world.staticTree.remove(this);\r\n\r\n        var gameObject = this.gameObject;\r\n\r\n        gameObject.getTopLeft(this.position);\r\n\r\n        this.width = gameObject.displayWidth;\r\n        this.height = gameObject.displayHeight;\r\n\r\n        this.halfWidth = Math.abs(this.width / 2);\r\n        this.halfHeight = Math.abs(this.height / 2);\r\n\r\n        this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\r\n\r\n        this.world.staticTree.insert(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the offset of the body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#setOffset\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} x - The horizontal offset of the Body from the Game Object's center.\r\n     * @param {number} y - The vertical offset of the Body from the Game Object's center.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    setOffset: function (x, y)\r\n    {\r\n        if (y === undefined) { y = x; }\r\n\r\n        this.world.staticTree.remove(this);\r\n\r\n        this.position.x -= this.offset.x;\r\n        this.position.y -= this.offset.y;\r\n\r\n        this.offset.set(x, y);\r\n\r\n        this.position.x += this.offset.x;\r\n        this.position.y += this.offset.y;\r\n\r\n        this.updateCenter();\r\n\r\n        this.world.staticTree.insert(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the size of the body.\r\n     * Resets the width and height to match current frame, if no width and height provided and a frame is found.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#setSize\r\n     * @since 3.0.0\r\n     *\r\n     * @param {integer} [width] - The width of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame width.\r\n     * @param {integer} [height] - The height of the Body in pixels. Cannot be zero. If not given, and the parent Game Object has a frame, it will use the frame height.\r\n     * @param {boolean} [center=true] - Modify the Body's `offset`, placing the Body's center on its Game Object's center. Only works if the Game Object has the `getCenter` method.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    setSize: function (width, height, center)\r\n    {\r\n        if (center === undefined) { center = true; }\r\n\r\n        var gameObject = this.gameObject;\r\n\r\n        if (!width && gameObject.frame)\r\n        {\r\n            width = gameObject.frame.realWidth;\r\n        }\r\n\r\n        if (!height && gameObject.frame)\r\n        {\r\n            height = gameObject.frame.realHeight;\r\n        }\r\n\r\n        this.world.staticTree.remove(this);\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.halfWidth = Math.floor(width / 2);\r\n        this.halfHeight = Math.floor(height / 2);\r\n\r\n        if (center && gameObject.getCenter)\r\n        {\r\n            var ox = gameObject.displayWidth / 2;\r\n            var oy = gameObject.displayHeight / 2;\r\n\r\n            this.position.x -= this.offset.x;\r\n            this.position.y -= this.offset.y;\r\n\r\n            this.offset.set(ox - this.halfWidth, oy - this.halfHeight);\r\n\r\n            this.position.x += this.offset.x;\r\n            this.position.y += this.offset.y;\r\n        }\r\n\r\n        this.updateCenter();\r\n\r\n        this.isCircle = false;\r\n        this.radius = 0;\r\n\r\n        this.world.staticTree.insert(this);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets this Static Body to have a circular body and sets its sizes and position.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#setCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radius - The radius of the StaticBody, in pixels.\r\n     * @param {number} [offsetX] - The horizontal offset of the StaticBody from its Game Object, in pixels.\r\n     * @param {number} [offsetY] - The vertical offset of the StaticBody from its Game Object, in pixels.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    setCircle: function (radius, offsetX, offsetY)\r\n    {\r\n        if (offsetX === undefined) { offsetX = this.offset.x; }\r\n        if (offsetY === undefined) { offsetY = this.offset.y; }\r\n\r\n        if (radius > 0)\r\n        {\r\n            this.world.staticTree.remove(this);\r\n\r\n            this.isCircle = true;\r\n\r\n            this.radius = radius;\r\n\r\n            this.width = radius * 2;\r\n            this.height = radius * 2;\r\n\r\n            this.halfWidth = Math.floor(this.width / 2);\r\n            this.halfHeight = Math.floor(this.height / 2);\r\n\r\n            this.offset.set(offsetX, offsetY);\r\n\r\n            this.updateCenter();\r\n\r\n            this.world.staticTree.insert(this);\r\n        }\r\n        else\r\n        {\r\n            this.isCircle = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Updates the StaticBody's `center` from its `position` and dimensions.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#updateCenter\r\n     * @since 3.0.0\r\n     */\r\n    updateCenter: function ()\r\n    {\r\n        this.center.set(this.position.x + this.halfWidth, this.position.y + this.halfHeight);\r\n    },\r\n\r\n    /**\r\n     * Resets this Body to the given coordinates. Also positions its parent Game Object to the same coordinates.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#reset\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [x] - The x coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\r\n     * @param {number} [y] - The y coordinate to reset the body to. If not given will use the parent Game Object's coordinate.\r\n     */\r\n    reset: function (x, y)\r\n    {\r\n        var gameObject = this.gameObject;\r\n\r\n        if (x === undefined) { x = gameObject.x; }\r\n        if (y === undefined) { y = gameObject.y; }\r\n\r\n        this.world.staticTree.remove(this);\r\n\r\n        gameObject.setPosition(x, y);\r\n\r\n        gameObject.getTopLeft(this.position);\r\n\r\n        this.updateCenter();\r\n\r\n        this.world.staticTree.insert(this);\r\n    },\r\n\r\n    /**\r\n     * NOOP function. A Static Body cannot be stopped.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#stop\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    stop: function ()\r\n    {\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Returns the x and y coordinates of the top left and bottom right points of the StaticBody.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#getBounds\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} obj - The object which will hold the coordinates of the bounds.\r\n     *\r\n     * @return {Phaser.Types.Physics.Arcade.ArcadeBodyBounds} The same object that was passed with `x`, `y`, `right` and `bottom` values matching the respective values of the StaticBody.\r\n     */\r\n    getBounds: function (obj)\r\n    {\r\n        obj.x = this.x;\r\n        obj.y = this.y;\r\n        obj.right = this.right;\r\n        obj.bottom = this.bottom;\r\n\r\n        return obj;\r\n    },\r\n\r\n    /**\r\n     * Checks to see if a given x,y coordinate is colliding with this Static Body.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#hitTest\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to check against this body.\r\n     * @param {number} y - The y coordinate to check against this body.\r\n     *\r\n     * @return {boolean} `true` if the given coordinate lies within this body, otherwise `false`.\r\n     */\r\n    hitTest: function (x, y)\r\n    {\r\n        return (this.isCircle) ? CircleContains(this, x, y) : RectangleContains(this, x, y);\r\n    },\r\n\r\n    /**\r\n     * NOOP\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#postUpdate\r\n     * @since 3.12.0\r\n     */\r\n    postUpdate: function ()\r\n    {\r\n    },\r\n\r\n    /**\r\n     * The absolute (non-negative) change in this StaticBody's horizontal position from the previous step. Always zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#deltaAbsX\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} Always zero for a Static Body.\r\n     */\r\n    deltaAbsX: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * The absolute (non-negative) change in this StaticBody's vertical position from the previous step. Always zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#deltaAbsY\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} Always zero for a Static Body.\r\n     */\r\n    deltaAbsY: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * The change in this StaticBody's horizontal position from the previous step. Always zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#deltaX\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\r\n     */\r\n    deltaX: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * The change in this StaticBody's vertical position from the previous step. Always zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#deltaY\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The change in this StaticBody's velocity from the previous step. Always zero.\r\n     */\r\n    deltaY: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * The change in this StaticBody's rotation from the previous step. Always zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#deltaZ\r\n     * @since 3.0.0\r\n     *\r\n     * @return {number} The change in this StaticBody's rotation from the previous step. Always zero.\r\n     */\r\n    deltaZ: function ()\r\n    {\r\n        return 0;\r\n    },\r\n\r\n    /**\r\n     * Disables this Body and marks it for destruction during the next step.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this.enable = false;\r\n\r\n        this.world.pendingDestroy.set(this);\r\n    },\r\n\r\n    /**\r\n     * Draws a graphical representation of the StaticBody for visual debugging purposes.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#drawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.GameObjects.Graphics} graphic - The Graphics object to use for the debug drawing of the StaticBody.\r\n     */\r\n    drawDebug: function (graphic)\r\n    {\r\n        var pos = this.position;\r\n\r\n        var x = pos.x + this.halfWidth;\r\n        var y = pos.y + this.halfHeight;\r\n\r\n        if (this.debugShowBody)\r\n        {\r\n            graphic.lineStyle(graphic.defaultStrokeWidth, this.debugBodyColor, 1);\r\n\r\n            if (this.isCircle)\r\n            {\r\n                graphic.strokeCircle(x, y, this.width / 2);\r\n            }\r\n            else\r\n            {\r\n                graphic.strokeRect(pos.x, pos.y, this.width, this.height);\r\n            }\r\n\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Indicates whether the StaticBody is going to be showing a debug visualization during postUpdate.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#willDrawDebug\r\n     * @since 3.0.0\r\n     *\r\n     * @return {boolean} Whether or not the StaticBody is going to show the debug visualization during postUpdate.\r\n     */\r\n    willDrawDebug: function ()\r\n    {\r\n        return this.debugShowBody;\r\n    },\r\n\r\n    /**\r\n     * Sets the Mass of the StaticBody. Will set the Mass to 0.1 if the value passed is less than or equal to zero.\r\n     *\r\n     * @method Phaser.Physics.Arcade.StaticBody#setMass\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} value - The value to set the Mass to. Values of zero or less are changed to 0.1.\r\n     *\r\n     * @return {Phaser.Physics.Arcade.StaticBody} This Static Body object.\r\n     */\r\n    setMass: function (value)\r\n    {\r\n        if (value <= 0)\r\n        {\r\n            //  Causes havoc otherwise\r\n            value = 0.1;\r\n        }\r\n\r\n        this.mass = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The x coordinate of the StaticBody.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#x\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    x: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.world.staticTree.remove(this);\r\n\r\n            this.position.x = value;\r\n\r\n            this.world.staticTree.insert(this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The y coordinate of the StaticBody.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#y\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    y: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this.world.staticTree.remove(this);\r\n\r\n            this.position.y = value;\r\n\r\n            this.world.staticTree.insert(this);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Returns the left-most x coordinate of the area of the StaticBody.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#left\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    left: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The right-most x coordinate of the area of the StaticBody.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#right\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    right: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.x + this.width;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The highest y coordinate of the area of the StaticBody.\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#top\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    top: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * The lowest y coordinate of the area of the StaticBody. (y + height)\r\n     *\r\n     * @name Phaser.Physics.Arcade.StaticBody#bottom\r\n     * @type {number}\r\n     * @readonly\r\n     * @since 3.0.0\r\n     */\r\n    bottom: {\r\n\r\n        get: function ()\r\n        {\r\n            return this.position.y + this.height;\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = StaticBody;\r\n"]},"metadata":{},"sourceType":"script"}