{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('../Formats');\n\nvar Parse2DArray = require('./Parse2DArray');\n\nvar ParseCSV = require('./ParseCSV');\n\nvar ParseJSONTiled = require('./tiled/ParseJSONTiled');\n\nvar ParseWeltmeister = require('./impact/ParseWeltmeister');\n/**\r\n * Parses raw data of a given Tilemap format into a new MapData object. If no recognized data format\r\n * is found, returns `null`. When loading from CSV or a 2D array, you should specify the tileWidth &\r\n * tileHeight. When parsing from a map from Tiled, the tileWidth & tileHeight will be pulled from\r\n * the map data.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer} mapFormat - See ../Formats.js.\r\n * @param {(integer[][]|string|object)} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {integer} tileHeight - The height of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The created `MapData` object.\r\n */\n\n\nvar Parse = function (name, mapFormat, data, tileWidth, tileHeight, insertNull) {\n  var newMap;\n\n  switch (mapFormat) {\n    case Formats.ARRAY_2D:\n      newMap = Parse2DArray(name, data, tileWidth, tileHeight, insertNull);\n      break;\n\n    case Formats.CSV:\n      newMap = ParseCSV(name, data, tileWidth, tileHeight, insertNull);\n      break;\n\n    case Formats.TILED_JSON:\n      newMap = ParseJSONTiled(name, data, insertNull);\n      break;\n\n    case Formats.WELTMEISTER:\n      newMap = ParseWeltmeister(name, data, insertNull);\n      break;\n\n    default:\n      console.warn('Unrecognized tilemap data format: ' + mapFormat);\n      newMap = null;\n  }\n\n  return newMap;\n};\n\nmodule.exports = Parse;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/Parse.js"],"names":["Formats","require","Parse2DArray","ParseCSV","ParseJSONTiled","ParseWeltmeister","Parse","name","mapFormat","data","tileWidth","tileHeight","insertNull","newMap","ARRAY_2D","CSV","TILED_JSON","WELTMEISTER","console","warn","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA1B;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,wBAAD,CAA5B;;AACA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,2BAAD,CAA9B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAIK,KAAK,GAAG,UAAUC,IAAV,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,UAA5C,EAAwDC,UAAxD,EACZ;AACI,MAAIC,MAAJ;;AAEA,UAAQL,SAAR;AAEI,SAAMR,OAAO,CAACc,QAAd;AACID,MAAAA,MAAM,GAAGX,YAAY,CAACK,IAAD,EAAOE,IAAP,EAAaC,SAAb,EAAwBC,UAAxB,EAAoCC,UAApC,CAArB;AACA;;AACJ,SAAMZ,OAAO,CAACe,GAAd;AACIF,MAAAA,MAAM,GAAGV,QAAQ,CAACI,IAAD,EAAOE,IAAP,EAAaC,SAAb,EAAwBC,UAAxB,EAAoCC,UAApC,CAAjB;AACA;;AACJ,SAAMZ,OAAO,CAACgB,UAAd;AACIH,MAAAA,MAAM,GAAGT,cAAc,CAACG,IAAD,EAAOE,IAAP,EAAaG,UAAb,CAAvB;AACA;;AACJ,SAAMZ,OAAO,CAACiB,WAAd;AACIJ,MAAAA,MAAM,GAAGR,gBAAgB,CAACE,IAAD,EAAOE,IAAP,EAAaG,UAAb,CAAzB;AACA;;AACJ;AACIM,MAAAA,OAAO,CAACC,IAAR,CAAa,uCAAuCX,SAApD;AACAK,MAAAA,MAAM,GAAG,IAAT;AAhBR;;AAmBA,SAAOA,MAAP;AACH,CAxBD;;AA0BAO,MAAM,CAACC,OAAP,GAAiBf,KAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../Formats');\r\nvar Parse2DArray = require('./Parse2DArray');\r\nvar ParseCSV = require('./ParseCSV');\r\nvar ParseJSONTiled = require('./tiled/ParseJSONTiled');\r\nvar ParseWeltmeister = require('./impact/ParseWeltmeister');\r\n\r\n/**\r\n * Parses raw data of a given Tilemap format into a new MapData object. If no recognized data format\r\n * is found, returns `null`. When loading from CSV or a 2D array, you should specify the tileWidth &\r\n * tileHeight. When parsing from a map from Tiled, the tileWidth & tileHeight will be pulled from\r\n * the map data.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Parse\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {integer} mapFormat - See ../Formats.js.\r\n * @param {(integer[][]|string|object)} data - 2D array, CSV string or Tiled JSON object.\r\n * @param {integer} tileWidth - The width of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {integer} tileHeight - The height of a tile in pixels. Required for 2D array and CSV, but\r\n * ignored for Tiled JSON.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {Phaser.Tilemaps.MapData} The created `MapData` object.\r\n */\r\nvar Parse = function (name, mapFormat, data, tileWidth, tileHeight, insertNull)\r\n{\r\n    var newMap;\r\n\r\n    switch (mapFormat)\r\n    {\r\n        case (Formats.ARRAY_2D):\r\n            newMap = Parse2DArray(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.CSV):\r\n            newMap = ParseCSV(name, data, tileWidth, tileHeight, insertNull);\r\n            break;\r\n        case (Formats.TILED_JSON):\r\n            newMap = ParseJSONTiled(name, data, insertNull);\r\n            break;\r\n        case (Formats.WELTMEISTER):\r\n            newMap = ParseWeltmeister(name, data, insertNull);\r\n            break;\r\n        default:\r\n            console.warn('Unrecognized tilemap data format: ' + mapFormat);\r\n            newMap = null;\r\n    }\r\n\r\n    return newMap;\r\n};\r\n\r\nmodule.exports = Parse;\r\n"]},"metadata":{},"sourceType":"script"}