{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseSoundManager = require('../BaseSoundManager');\n\nvar Class = require('../../utils/Class');\n\nvar Events = require('../events');\n\nvar HTML5AudioSound = require('./HTML5AudioSound');\n/**\r\n * HTML5 Audio implementation of the Sound Manager.\r\n * \r\n * Note: To play multiple instances of the same HTML5 Audio sound, you need to provide an `instances` value when\r\n * loading the sound with the Loader:\r\n * \r\n * ```javascript\r\n * this.load.audio('explosion', 'explosion.mp3', {\r\n *     instances: 2\r\n * });\r\n * ```\r\n *\r\n * @class HTML5AudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\n\n\nvar HTML5AudioSoundManager = new Class({\n  Extends: BaseSoundManager,\n  initialize: function HTML5AudioSoundManager(game) {\n    /**\r\n     * Flag indicating whether if there are no idle instances of HTML5 Audio tag,\r\n     * for any particular sound, if one of the used tags should be hijacked and used\r\n     * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\r\n     * call should be ignored.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#override\r\n     * @type {boolean}\r\n     * @default true\r\n     * @since 3.0.0\r\n     */\n    this.override = true;\n    /**\r\n     * Value representing time difference, in seconds, between calling\r\n     * play method on an audio tag and when it actually starts playing.\r\n     * It is used to achieve more accurate delayed sound playback.\r\n     *\r\n     * You might need to tweak this value to get the desired results\r\n     * since audio play delay varies depending on the browser/platform.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#audioPlayDelay\r\n     * @type {number}\r\n     * @default 0.1\r\n     * @since 3.0.0\r\n     */\n\n    this.audioPlayDelay = 0.1;\n    /**\r\n     * A value by which we should offset the loop end marker of the\r\n     * looping sound to compensate for lag, caused by changing audio\r\n     * tag playback position, in order to achieve gapless looping.\r\n     *\r\n     * You might need to tweak this value to get the desired results\r\n     * since loop lag varies depending on the browser/platform.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#loopEndOffset\r\n     * @type {number}\r\n     * @default 0.05\r\n     * @since 3.0.0\r\n     */\n\n    this.loopEndOffset = 0.05;\n    /**\r\n     * An array for keeping track of all the sounds\r\n     * that were paused when game lost focus.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#onBlurPausedSounds\r\n     * @type {Phaser.Sound.HTML5AudioSound[]}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.onBlurPausedSounds = [];\n    this.locked = 'ontouchstart' in window;\n    /**\r\n     * A queue of all actions performed on sound objects while audio was locked.\r\n     * Once the audio gets unlocked, after an explicit user interaction,\r\n     * all actions will be performed in chronological order.\r\n     * Array of object types: { sound: Phaser.Sound.HTML5AudioSound, name: string, value?: * }\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#lockedActionsQueue\r\n     * @type {array}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this.lockedActionsQueue = this.locked ? [] : null;\n    /**\r\n     * Property that actually holds the value of global mute\r\n     * for HTML5 Audio sound manager implementation.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#_mute\r\n     * @type {boolean}\r\n     * @private\r\n     * @default false\r\n     * @since 3.0.0\r\n     */\n\n    this._mute = false;\n    /**\r\n     * Property that actually holds the value of global volume\r\n     * for HTML5 Audio sound manager implementation.\r\n     *\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#_volume\r\n     * @type {boolean}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this._volume = 1;\n    BaseSoundManager.call(this, game);\n  },\n\n  /**\r\n   * Adds a new sound into the sound manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#add\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - Asset key for the sound.\r\n   * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSound} The new sound instance.\r\n   */\n  add: function (key, config) {\n    var sound = new HTML5AudioSound(this, key, config);\n    this.sounds.push(sound);\n    return sound;\n  },\n\n  /**\r\n   * Unlocks HTML5 Audio loading and playback on mobile\r\n   * devices on the initial explicit user interaction.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#unlock\r\n   * @since 3.0.0\r\n   */\n  unlock: function () {\n    this.locked = false;\n\n    var _this = this;\n\n    this.game.cache.audio.entries.each(function (key, tags) {\n      for (var i = 0; i < tags.length; i++) {\n        if (tags[i].dataset.locked === 'true') {\n          _this.locked = true;\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    if (!this.locked) {\n      return;\n    }\n\n    var moved = false;\n\n    var detectMove = function () {\n      moved = true;\n    };\n\n    var unlock = function () {\n      if (moved) {\n        moved = false;\n        return;\n      }\n\n      document.body.removeEventListener('touchmove', detectMove);\n      document.body.removeEventListener('touchend', unlock);\n      var lockedTags = [];\n\n      _this.game.cache.audio.entries.each(function (key, tags) {\n        for (var i = 0; i < tags.length; i++) {\n          var tag = tags[i];\n\n          if (tag.dataset.locked === 'true') {\n            lockedTags.push(tag);\n          }\n        }\n\n        return true;\n      });\n\n      if (lockedTags.length === 0) {\n        return;\n      }\n\n      var lastTag = lockedTags[lockedTags.length - 1];\n\n      lastTag.oncanplaythrough = function () {\n        lastTag.oncanplaythrough = null;\n        lockedTags.forEach(function (tag) {\n          tag.dataset.locked = 'false';\n        });\n        _this.unlocked = true;\n      };\n\n      lockedTags.forEach(function (tag) {\n        tag.load();\n      });\n    };\n\n    this.once(Events.UNLOCKED, function () {\n      this.forEachActiveSound(function (sound) {\n        if (sound.currentMarker === null && sound.duration === 0) {\n          sound.duration = sound.tags[0].duration;\n        }\n\n        sound.totalDuration = sound.tags[0].duration;\n      });\n\n      while (this.lockedActionsQueue.length) {\n        var lockedAction = this.lockedActionsQueue.shift();\n\n        if (lockedAction.sound[lockedAction.prop].apply) {\n          lockedAction.sound[lockedAction.prop].apply(lockedAction.sound, lockedAction.value || []);\n        } else {\n          lockedAction.sound[lockedAction.prop] = lockedAction.value;\n        }\n      }\n    }, this);\n    document.body.addEventListener('touchmove', detectMove, false);\n    document.body.addEventListener('touchend', unlock, false);\n  },\n\n  /**\r\n   * Method used internally for pausing sound manager if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onBlur: function () {\n    this.forEachActiveSound(function (sound) {\n      if (sound.isPlaying) {\n        this.onBlurPausedSounds.push(sound);\n        sound.onBlur();\n      }\n    });\n  },\n\n  /**\r\n   * Method used internally for resuming sound manager if\r\n   * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#onFocus\r\n   * @protected\r\n   * @since 3.0.0\r\n   */\n  onFocus: function () {\n    this.onBlurPausedSounds.forEach(function (sound) {\n      sound.onFocus();\n    });\n    this.onBlurPausedSounds.length = 0;\n  },\n\n  /**\r\n   * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n   * and cleans up all HTML5 Audio related stuff.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    BaseSoundManager.prototype.destroy.call(this);\n    this.onBlurPausedSounds.length = 0;\n    this.onBlurPausedSounds = null;\n  },\n\n  /**\r\n   * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\r\n   * to check if sound manager is locked and then either perform action immediately or queue it\r\n   * to be performed once the sound manager gets unlocked.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#isLocked\r\n   * @protected\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Sound.HTML5AudioSound} sound - Sound object on which to perform queued action.\r\n   * @param {string} prop - Name of the method to be called or property to be assigned a value to.\r\n   * @param {*} [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.\r\n   *\r\n   * @return {boolean} Whether the sound manager is locked.\r\n   */\n  isLocked: function (sound, prop, value) {\n    if (sound.tags[0].dataset.locked === 'true') {\n      this.lockedActionsQueue.push({\n        sound: sound,\n        prop: prop,\n        value: value\n      });\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\r\n   * Sets the muted state of all this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#setMute\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.3.0\r\n   *\r\n   * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n   */\n  setMute: function (value) {\n    this.mute = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.HTML5AudioSoundManager#mute\r\n   * @type {boolean}\r\n   * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n   * @since 3.0.0\r\n   */\n  mute: {\n    get: function () {\n      return this._mute;\n    },\n    set: function (value) {\n      this._mute = value;\n      this.forEachActiveSound(function (sound) {\n        sound.updateMute();\n      });\n      this.emit(Events.GLOBAL_MUTE, this, value);\n    }\n  },\n\n  /**\r\n   * Sets the volume of this Sound Manager.\r\n   *\r\n   * @method Phaser.Sound.HTML5AudioSoundManager#setVolume\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.3.0\r\n   *\r\n   * @param {number} value - The global volume of this Sound Manager.\r\n   *\r\n   * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n   */\n  setVolume: function (value) {\n    this.volume = value;\n    return this;\n  },\n\n  /**\r\n   * @name Phaser.Sound.HTML5AudioSoundManager#volume\r\n   * @type {number}\r\n   * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n   * @since 3.0.0\r\n   */\n  volume: {\n    get: function () {\n      return this._volume;\n    },\n    set: function (value) {\n      this._volume = value;\n      this.forEachActiveSound(function (sound) {\n        sound.updateVolume();\n      });\n      this.emit(Events.GLOBAL_VOLUME, this, value);\n    }\n  }\n});\nmodule.exports = HTML5AudioSoundManager;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/sound/html5/HTML5AudioSoundManager.js"],"names":["BaseSoundManager","require","Class","Events","HTML5AudioSound","HTML5AudioSoundManager","Extends","initialize","game","override","audioPlayDelay","loopEndOffset","onBlurPausedSounds","locked","window","lockedActionsQueue","_mute","_volume","call","add","key","config","sound","sounds","push","unlock","_this","cache","audio","entries","each","tags","i","length","dataset","moved","detectMove","document","body","removeEventListener","lockedTags","tag","lastTag","oncanplaythrough","forEach","unlocked","load","once","UNLOCKED","forEachActiveSound","currentMarker","duration","totalDuration","lockedAction","shift","prop","apply","value","addEventListener","onBlur","isPlaying","onFocus","destroy","prototype","isLocked","setMute","mute","get","set","updateMute","emit","GLOBAL_MUTE","setVolume","volume","updateVolume","GLOBAL_VOLUME","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @author       Pavle Goloskokovic <pgoloskokovic@gmail.com> (http://prunegames.com)\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseSoundManager = require('../BaseSoundManager');\r\nvar Class = require('../../utils/Class');\r\nvar Events = require('../events');\r\nvar HTML5AudioSound = require('./HTML5AudioSound');\r\n\r\n/**\r\n * HTML5 Audio implementation of the Sound Manager.\r\n * \r\n * Note: To play multiple instances of the same HTML5 Audio sound, you need to provide an `instances` value when\r\n * loading the sound with the Loader:\r\n * \r\n * ```javascript\r\n * this.load.audio('explosion', 'explosion.mp3', {\r\n *     instances: 2\r\n * });\r\n * ```\r\n *\r\n * @class HTML5AudioSoundManager\r\n * @extends Phaser.Sound.BaseSoundManager\r\n * @memberof Phaser.Sound\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Game} game - Reference to the current game instance.\r\n */\r\nvar HTML5AudioSoundManager = new Class({\r\n\r\n    Extends: BaseSoundManager,\r\n\r\n    initialize:\r\n\r\n    function HTML5AudioSoundManager (game)\r\n    {\r\n        /**\r\n         * Flag indicating whether if there are no idle instances of HTML5 Audio tag,\r\n         * for any particular sound, if one of the used tags should be hijacked and used\r\n         * for succeeding playback or if succeeding Phaser.Sound.HTML5AudioSound#play\r\n         * call should be ignored.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#override\r\n         * @type {boolean}\r\n         * @default true\r\n         * @since 3.0.0\r\n         */\r\n        this.override = true;\r\n\r\n        /**\r\n         * Value representing time difference, in seconds, between calling\r\n         * play method on an audio tag and when it actually starts playing.\r\n         * It is used to achieve more accurate delayed sound playback.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since audio play delay varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#audioPlayDelay\r\n         * @type {number}\r\n         * @default 0.1\r\n         * @since 3.0.0\r\n         */\r\n        this.audioPlayDelay = 0.1;\r\n\r\n        /**\r\n         * A value by which we should offset the loop end marker of the\r\n         * looping sound to compensate for lag, caused by changing audio\r\n         * tag playback position, in order to achieve gapless looping.\r\n         *\r\n         * You might need to tweak this value to get the desired results\r\n         * since loop lag varies depending on the browser/platform.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#loopEndOffset\r\n         * @type {number}\r\n         * @default 0.05\r\n         * @since 3.0.0\r\n         */\r\n        this.loopEndOffset = 0.05;\r\n\r\n        /**\r\n         * An array for keeping track of all the sounds\r\n         * that were paused when game lost focus.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#onBlurPausedSounds\r\n         * @type {Phaser.Sound.HTML5AudioSound[]}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.onBlurPausedSounds = [];\r\n\r\n        this.locked = 'ontouchstart' in window;\r\n\r\n        /**\r\n         * A queue of all actions performed on sound objects while audio was locked.\r\n         * Once the audio gets unlocked, after an explicit user interaction,\r\n         * all actions will be performed in chronological order.\r\n         * Array of object types: { sound: Phaser.Sound.HTML5AudioSound, name: string, value?: * }\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#lockedActionsQueue\r\n         * @type {array}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this.lockedActionsQueue = this.locked ? [] : null;\r\n\r\n        /**\r\n         * Property that actually holds the value of global mute\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_mute\r\n         * @type {boolean}\r\n         * @private\r\n         * @default false\r\n         * @since 3.0.0\r\n         */\r\n        this._mute = false;\r\n\r\n        /**\r\n         * Property that actually holds the value of global volume\r\n         * for HTML5 Audio sound manager implementation.\r\n         *\r\n         * @name Phaser.Sound.HTML5AudioSoundManager#_volume\r\n         * @type {boolean}\r\n         * @private\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this._volume = 1;\r\n\r\n        BaseSoundManager.call(this, game);\r\n    },\r\n\r\n    /**\r\n     * Adds a new sound into the sound manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#add\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - Asset key for the sound.\r\n     * @param {Phaser.Types.Sound.SoundConfig} [config] - An optional config object containing default sound settings.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSound} The new sound instance.\r\n     */\r\n    add: function (key, config)\r\n    {\r\n        var sound = new HTML5AudioSound(this, key, config);\r\n\r\n        this.sounds.push(sound);\r\n\r\n        return sound;\r\n    },\r\n\r\n    /**\r\n     * Unlocks HTML5 Audio loading and playback on mobile\r\n     * devices on the initial explicit user interaction.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#unlock\r\n     * @since 3.0.0\r\n     */\r\n    unlock: function ()\r\n    {\r\n        this.locked = false;\r\n\r\n        var _this = this;\r\n\r\n        this.game.cache.audio.entries.each(function (key, tags)\r\n        {\r\n            for (var i = 0; i < tags.length; i++)\r\n            {\r\n                if (tags[i].dataset.locked === 'true')\r\n                {\r\n                    _this.locked = true;\r\n\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        if (!this.locked)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var moved = false;\r\n\r\n        var detectMove = function ()\r\n        {\r\n            moved = true;\r\n        };\r\n\r\n        var unlock = function ()\r\n        {\r\n            if (moved)\r\n            {\r\n                moved = false;\r\n                return;\r\n            }\r\n\r\n            document.body.removeEventListener('touchmove', detectMove);\r\n            document.body.removeEventListener('touchend', unlock);\r\n\r\n            var lockedTags = [];\r\n\r\n            _this.game.cache.audio.entries.each(function (key, tags)\r\n            {\r\n                for (var i = 0; i < tags.length; i++)\r\n                {\r\n                    var tag = tags[i];\r\n\r\n                    if (tag.dataset.locked === 'true')\r\n                    {\r\n                        lockedTags.push(tag);\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            if (lockedTags.length === 0)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var lastTag = lockedTags[lockedTags.length - 1];\r\n\r\n            lastTag.oncanplaythrough = function ()\r\n            {\r\n                lastTag.oncanplaythrough = null;\r\n\r\n                lockedTags.forEach(function (tag)\r\n                {\r\n                    tag.dataset.locked = 'false';\r\n                });\r\n\r\n                _this.unlocked = true;\r\n            };\r\n\r\n            lockedTags.forEach(function (tag)\r\n            {\r\n                tag.load();\r\n            });\r\n        };\r\n\r\n        this.once(Events.UNLOCKED, function ()\r\n        {\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                if (sound.currentMarker === null && sound.duration === 0)\r\n                {\r\n                    sound.duration = sound.tags[0].duration;\r\n                }\r\n\r\n                sound.totalDuration = sound.tags[0].duration;\r\n            });\r\n\r\n            while (this.lockedActionsQueue.length)\r\n            {\r\n                var lockedAction = this.lockedActionsQueue.shift();\r\n\r\n                if (lockedAction.sound[lockedAction.prop].apply)\r\n                {\r\n                    lockedAction.sound[lockedAction.prop].apply(lockedAction.sound, lockedAction.value || []);\r\n                }\r\n                else\r\n                {\r\n                    lockedAction.sound[lockedAction.prop] = lockedAction.value;\r\n                }\r\n            }\r\n\r\n        }, this);\r\n\r\n        document.body.addEventListener('touchmove', detectMove, false);\r\n        document.body.addEventListener('touchend', unlock, false);\r\n    },\r\n\r\n    /**\r\n     * Method used internally for pausing sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onBlur\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onBlur: function ()\r\n    {\r\n        this.forEachActiveSound(function (sound)\r\n        {\r\n            if (sound.isPlaying)\r\n            {\r\n                this.onBlurPausedSounds.push(sound);\r\n                sound.onBlur();\r\n            }\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Method used internally for resuming sound manager if\r\n     * Phaser.Sound.HTML5AudioSoundManager#pauseOnBlur is set to true.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#onFocus\r\n     * @protected\r\n     * @since 3.0.0\r\n     */\r\n    onFocus: function ()\r\n    {\r\n        this.onBlurPausedSounds.forEach(function (sound)\r\n        {\r\n            sound.onFocus();\r\n        });\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n    },\r\n\r\n    /**\r\n     * Calls Phaser.Sound.BaseSoundManager#destroy method\r\n     * and cleans up all HTML5 Audio related stuff.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        BaseSoundManager.prototype.destroy.call(this);\r\n\r\n        this.onBlurPausedSounds.length = 0;\r\n        this.onBlurPausedSounds = null;\r\n    },\r\n\r\n    /**\r\n     * Method used internally by Phaser.Sound.HTML5AudioSound class methods and property setters\r\n     * to check if sound manager is locked and then either perform action immediately or queue it\r\n     * to be performed once the sound manager gets unlocked.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#isLocked\r\n     * @protected\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Sound.HTML5AudioSound} sound - Sound object on which to perform queued action.\r\n     * @param {string} prop - Name of the method to be called or property to be assigned a value to.\r\n     * @param {*} [value] - An optional parameter that either holds an array of arguments to be passed to the method call or value to be set to the property.\r\n     *\r\n     * @return {boolean} Whether the sound manager is locked.\r\n     */\r\n    isLocked: function (sound, prop, value)\r\n    {\r\n        if (sound.tags[0].dataset.locked === 'true')\r\n        {\r\n            this.lockedActionsQueue.push({\r\n                sound: sound,\r\n                prop: prop,\r\n                value: value\r\n            });\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * Sets the muted state of all this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setMute\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.3.0\r\n     *\r\n     * @param {boolean} value - `true` to mute all sounds, `false` to unmute them.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setMute: function (value)\r\n    {\r\n        this.mute = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#mute\r\n     * @type {boolean}\r\n     * @fires Phaser.Sound.Events#GLOBAL_MUTE\r\n     * @since 3.0.0\r\n     */\r\n    mute: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._mute;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._mute = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateMute();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_MUTE, this, value);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Sets the volume of this Sound Manager.\r\n     *\r\n     * @method Phaser.Sound.HTML5AudioSoundManager#setVolume\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.3.0\r\n     *\r\n     * @param {number} value - The global volume of this Sound Manager.\r\n     *\r\n     * @return {Phaser.Sound.HTML5AudioSoundManager} This Sound Manager.\r\n     */\r\n    setVolume: function (value)\r\n    {\r\n        this.volume = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * @name Phaser.Sound.HTML5AudioSoundManager#volume\r\n     * @type {number}\r\n     * @fires Phaser.Sound.Events#GLOBAL_VOLUME\r\n     * @since 3.0.0\r\n     */\r\n    volume: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._volume;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            this._volume = value;\r\n\r\n            this.forEachActiveSound(function (sound)\r\n            {\r\n                sound.updateVolume();\r\n            });\r\n\r\n            this.emit(Events.GLOBAL_VOLUME, this, value);\r\n        }\r\n\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = HTML5AudioSoundManager;\r\n"]},"metadata":{},"sourceType":"script"}