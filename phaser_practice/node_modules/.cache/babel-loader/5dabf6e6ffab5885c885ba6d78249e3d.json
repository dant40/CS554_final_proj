{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n//  bitmask flag for GameObject.renderMask\nvar _FLAG = 8; // 1000\n\n/**\r\n * Provides methods used for getting and setting the texture of a Game Object.\r\n *\r\n * @namespace Phaser.GameObjects.Components.TextureCrop\r\n * @since 3.0.0\r\n */\n\nvar TextureCrop = {\n  /**\r\n   * The Texture this Game Object is using to render with.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#texture\r\n   * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n   * @since 3.0.0\r\n   */\n  texture: null,\n\n  /**\r\n   * The Texture Frame this Game Object is using to render with.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#frame\r\n   * @type {Phaser.Textures.Frame}\r\n   * @since 3.0.0\r\n   */\n  frame: null,\n\n  /**\r\n   * A boolean flag indicating if this Game Object is being cropped or not.\r\n   * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\r\n   * Equally, calling `setCrop` with no arguments will reset the crop and disable it.\r\n   *\r\n   * @name Phaser.GameObjects.Components.TextureCrop#isCropped\r\n   * @type {boolean}\r\n   * @since 3.11.0\r\n   */\n  isCropped: false,\n\n  /**\r\n   * Applies a crop to a texture based Game Object, such as a Sprite or Image.\r\n   * \r\n   * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\r\n   * \r\n   * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\r\n   * changes what is shown when rendered.\r\n   * \r\n   * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\r\n   * \r\n   * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\r\n   * half of it, you could call `setCrop(0, 0, 400, 600)`.\r\n   * \r\n   * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\r\n   * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\r\n   * \r\n   * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\r\n   * \r\n   * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\r\n   * \r\n   * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\r\n   * the renderer to skip several internal calculations.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setCrop\r\n   * @since 3.11.0\r\n   *\r\n   * @param {(number|Phaser.Geom.Rectangle)} [x] - The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\r\n   * @param {number} [y] - The y coordinate to start the crop from.\r\n   * @param {number} [width] - The width of the crop rectangle in pixels.\r\n   * @param {number} [height] - The height of the crop rectangle in pixels.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setCrop: function (x, y, width, height) {\n    if (x === undefined) {\n      this.isCropped = false;\n    } else if (this.frame) {\n      if (typeof x === 'number') {\n        this.frame.setCropUVs(this._crop, x, y, width, height, this.flipX, this.flipY);\n      } else {\n        var rect = x;\n        this.frame.setCropUVs(this._crop, rect.x, rect.y, rect.width, rect.height, this.flipX, this.flipY);\n      }\n\n      this.isCropped = true;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Sets the texture and frame this Game Object will use to render with.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setTexture: function (key, frame) {\n    this.texture = this.scene.sys.textures.get(key);\n    return this.setFrame(frame);\n  },\n\n  /**\r\n   * Sets the frame this Game Object will use to render with.\r\n   *\r\n   * The Frame has to belong to the current Texture being used.\r\n   *\r\n   * It can be either a string or an index.\r\n   *\r\n   * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\r\n   * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#setFrame\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|integer)} frame - The name or index of the frame within the Texture.\r\n   * @param {boolean} [updateSize=true] - Should this call adjust the size of the Game Object?\r\n   * @param {boolean} [updateOrigin=true] - Should this call adjust the origin of the Game Object?\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setFrame: function (frame, updateSize, updateOrigin) {\n    if (updateSize === undefined) {\n      updateSize = true;\n    }\n\n    if (updateOrigin === undefined) {\n      updateOrigin = true;\n    }\n\n    this.frame = this.texture.get(frame);\n\n    if (!this.frame.cutWidth || !this.frame.cutHeight) {\n      this.renderFlags &= ~_FLAG;\n    } else {\n      this.renderFlags |= _FLAG;\n    }\n\n    if (this._sizeComponent && updateSize) {\n      this.setSizeToFrame();\n    }\n\n    if (this._originComponent && updateOrigin) {\n      if (this.frame.customPivot) {\n        this.setOrigin(this.frame.pivotX, this.frame.pivotY);\n      } else {\n        this.updateDisplayOrigin();\n      }\n    }\n\n    if (this.isCropped) {\n      this.frame.updateCropUVs(this._crop, this.flipX, this.flipY);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal method that returns a blank, well-formed crop object for use by a Game Object.\r\n   *\r\n   * @method Phaser.GameObjects.Components.TextureCrop#resetCropObject\r\n   * @private\r\n   * @since 3.12.0\r\n   * \r\n   * @return {object} The crop object.\r\n   */\n  resetCropObject: function () {\n    return {\n      u0: 0,\n      v0: 0,\n      u1: 0,\n      v1: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n      flipX: false,\n      flipY: false,\n      cx: 0,\n      cy: 0,\n      cw: 0,\n      ch: 0\n    };\n  }\n};\nmodule.exports = TextureCrop;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/TextureCrop.js"],"names":["_FLAG","TextureCrop","texture","frame","isCropped","setCrop","x","y","width","height","undefined","setCropUVs","_crop","flipX","flipY","rect","setTexture","key","scene","sys","textures","get","setFrame","updateSize","updateOrigin","cutWidth","cutHeight","renderFlags","_sizeComponent","setSizeToFrame","_originComponent","customPivot","setOrigin","pivotX","pivotY","updateDisplayOrigin","updateCropUVs","resetCropObject","u0","v0","u1","v1","cx","cy","cw","ch","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n//  bitmask flag for GameObject.renderMask\r\nvar _FLAG = 8; // 1000\r\n\r\n/**\r\n * Provides methods used for getting and setting the texture of a Game Object.\r\n *\r\n * @namespace Phaser.GameObjects.Components.TextureCrop\r\n * @since 3.0.0\r\n */\r\n\r\nvar TextureCrop = {\r\n\r\n    /**\r\n     * The Texture this Game Object is using to render with.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#texture\r\n     * @type {Phaser.Textures.Texture|Phaser.Textures.CanvasTexture}\r\n     * @since 3.0.0\r\n     */\r\n    texture: null,\r\n\r\n    /**\r\n     * The Texture Frame this Game Object is using to render with.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#frame\r\n     * @type {Phaser.Textures.Frame}\r\n     * @since 3.0.0\r\n     */\r\n    frame: null,\r\n\r\n    /**\r\n     * A boolean flag indicating if this Game Object is being cropped or not.\r\n     * You can toggle this at any time after `setCrop` has been called, to turn cropping on or off.\r\n     * Equally, calling `setCrop` with no arguments will reset the crop and disable it.\r\n     *\r\n     * @name Phaser.GameObjects.Components.TextureCrop#isCropped\r\n     * @type {boolean}\r\n     * @since 3.11.0\r\n     */\r\n    isCropped: false,\r\n\r\n    /**\r\n     * Applies a crop to a texture based Game Object, such as a Sprite or Image.\r\n     * \r\n     * The crop is a rectangle that limits the area of the texture frame that is visible during rendering.\r\n     * \r\n     * Cropping a Game Object does not change its size, dimensions, physics body or hit area, it just\r\n     * changes what is shown when rendered.\r\n     * \r\n     * The crop coordinates are relative to the texture frame, not the Game Object, meaning 0 x 0 is the top-left.\r\n     * \r\n     * Therefore, if you had a Game Object that had an 800x600 sized texture, and you wanted to show only the left\r\n     * half of it, you could call `setCrop(0, 0, 400, 600)`.\r\n     * \r\n     * It is also scaled to match the Game Object scale automatically. Therefore a crop rect of 100x50 would crop\r\n     * an area of 200x100 when applied to a Game Object that had a scale factor of 2.\r\n     * \r\n     * You can either pass in numeric values directly, or you can provide a single Rectangle object as the first argument.\r\n     * \r\n     * Call this method with no arguments at all to reset the crop, or toggle the property `isCropped` to `false`.\r\n     * \r\n     * You should do this if the crop rectangle becomes the same size as the frame itself, as it will allow\r\n     * the renderer to skip several internal calculations.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setCrop\r\n     * @since 3.11.0\r\n     *\r\n     * @param {(number|Phaser.Geom.Rectangle)} [x] - The x coordinate to start the crop from. Or a Phaser.Geom.Rectangle object, in which case the rest of the arguments are ignored.\r\n     * @param {number} [y] - The y coordinate to start the crop from.\r\n     * @param {number} [width] - The width of the crop rectangle in pixels.\r\n     * @param {number} [height] - The height of the crop rectangle in pixels.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setCrop: function (x, y, width, height)\r\n    {\r\n        if (x === undefined)\r\n        {\r\n            this.isCropped = false;\r\n        }\r\n        else if (this.frame)\r\n        {\r\n            if (typeof x === 'number')\r\n            {\r\n                this.frame.setCropUVs(this._crop, x, y, width, height, this.flipX, this.flipY);\r\n            }\r\n            else\r\n            {\r\n                var rect = x;\r\n\r\n                this.frame.setCropUVs(this._crop, rect.x, rect.y, rect.width, rect.height, this.flipX, this.flipY);\r\n            }\r\n\r\n            this.isCropped = true;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the texture and frame this Game Object will use to render with.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {string} key - The key of the texture to be used, as stored in the Texture Manager.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setTexture: function (key, frame)\r\n    {\r\n        this.texture = this.scene.sys.textures.get(key);\r\n\r\n        return this.setFrame(frame);\r\n    },\r\n\r\n    /**\r\n     * Sets the frame this Game Object will use to render with.\r\n     *\r\n     * The Frame has to belong to the current Texture being used.\r\n     *\r\n     * It can be either a string or an index.\r\n     *\r\n     * Calling `setFrame` will modify the `width` and `height` properties of your Game Object.\r\n     * It will also change the `origin` if the Frame has a custom pivot point, as exported from packages like Texture Packer.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#setFrame\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|integer)} frame - The name or index of the frame within the Texture.\r\n     * @param {boolean} [updateSize=true] - Should this call adjust the size of the Game Object?\r\n     * @param {boolean} [updateOrigin=true] - Should this call adjust the origin of the Game Object?\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setFrame: function (frame, updateSize, updateOrigin)\r\n    {\r\n        if (updateSize === undefined) { updateSize = true; }\r\n        if (updateOrigin === undefined) { updateOrigin = true; }\r\n\r\n        this.frame = this.texture.get(frame);\r\n\r\n        if (!this.frame.cutWidth || !this.frame.cutHeight)\r\n        {\r\n            this.renderFlags &= ~_FLAG;\r\n        }\r\n        else\r\n        {\r\n            this.renderFlags |= _FLAG;\r\n        }\r\n\r\n        if (this._sizeComponent && updateSize)\r\n        {\r\n            this.setSizeToFrame();\r\n        }\r\n\r\n        if (this._originComponent && updateOrigin)\r\n        {\r\n            if (this.frame.customPivot)\r\n            {\r\n                this.setOrigin(this.frame.pivotX, this.frame.pivotY);\r\n            }\r\n            else\r\n            {\r\n                this.updateDisplayOrigin();\r\n            }\r\n        }\r\n\r\n        if (this.isCropped)\r\n        {\r\n            this.frame.updateCropUVs(this._crop, this.flipX, this.flipY);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal method that returns a blank, well-formed crop object for use by a Game Object.\r\n     *\r\n     * @method Phaser.GameObjects.Components.TextureCrop#resetCropObject\r\n     * @private\r\n     * @since 3.12.0\r\n     * \r\n     * @return {object} The crop object.\r\n     */\r\n    resetCropObject: function ()\r\n    {\r\n        return { u0: 0, v0: 0, u1: 0, v1: 0, width: 0, height: 0, x: 0, y: 0, flipX: false, flipY: false, cx: 0, cy: 0, cw: 0, ch: 0 };\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = TextureCrop;\r\n"]},"metadata":{},"sourceType":"script"}