{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Takes the given data string and parses it as XML.\r\n * First tries to use the window.DOMParser and reverts to the Microsoft.XMLDOM if that fails.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?(DOMParser|ActiveXObject)} The parsed XML data, or `null` if the data could not be parsed.\r\n */\nvar ParseXML = function (data) {\n  var xml = '';\n\n  try {\n    if (window['DOMParser']) {\n      var domparser = new DOMParser();\n      xml = domparser.parseFromString(data, 'text/xml');\n    } else {\n      xml = new ActiveXObject('Microsoft.XMLDOM');\n      xml.loadXML(data);\n    }\n  } catch (e) {\n    xml = null;\n  }\n\n  if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length) {\n    return null;\n  } else {\n    return xml;\n  }\n};\n\nmodule.exports = ParseXML;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/dom/ParseXML.js"],"names":["ParseXML","data","xml","window","domparser","DOMParser","parseFromString","ActiveXObject","loadXML","e","documentElement","getElementsByTagName","length","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;;;AAYA,IAAIA,QAAQ,GAAG,UAAUC,IAAV,EACf;AACI,MAAIC,GAAG,GAAG,EAAV;;AAEA,MACA;AACI,QAAIC,MAAM,CAAC,WAAD,CAAV,EACA;AACI,UAAIC,SAAS,GAAG,IAAIC,SAAJ,EAAhB;AACAH,MAAAA,GAAG,GAAGE,SAAS,CAACE,eAAV,CAA0BL,IAA1B,EAAgC,UAAhC,CAAN;AACH,KAJD,MAMA;AACIC,MAAAA,GAAG,GAAG,IAAIK,aAAJ,CAAkB,kBAAlB,CAAN;AACAL,MAAAA,GAAG,CAACM,OAAJ,CAAYP,IAAZ;AACH;AACJ,GAZD,CAaA,OAAOQ,CAAP,EACA;AACIP,IAAAA,GAAG,GAAG,IAAN;AACH;;AAED,MAAI,CAACA,GAAD,IAAQ,CAACA,GAAG,CAACQ,eAAb,IAAgCR,GAAG,CAACS,oBAAJ,CAAyB,aAAzB,EAAwCC,MAA5E,EACA;AACI,WAAO,IAAP;AACH,GAHD,MAKA;AACI,WAAOV,GAAP;AACH;AACJ,CA9BD;;AAgCAW,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Takes the given data string and parses it as XML.\r\n * First tries to use the window.DOMParser and reverts to the Microsoft.XMLDOM if that fails.\r\n * The parsed XML object is returned, or `null` if there was an error while parsing the data.\r\n *\r\n * @function Phaser.DOM.ParseXML\r\n * @since 3.0.0\r\n *\r\n * @param {string} data - The XML source stored in a string.\r\n *\r\n * @return {?(DOMParser|ActiveXObject)} The parsed XML data, or `null` if the data could not be parsed.\r\n */\r\nvar ParseXML = function (data)\r\n{\r\n    var xml = '';\r\n\r\n    try\r\n    {\r\n        if (window['DOMParser'])\r\n        {\r\n            var domparser = new DOMParser();\r\n            xml = domparser.parseFromString(data, 'text/xml');\r\n        }\r\n        else\r\n        {\r\n            xml = new ActiveXObject('Microsoft.XMLDOM');\r\n            xml.loadXML(data);\r\n        }\r\n    }\r\n    catch (e)\r\n    {\r\n        xml = null;\r\n    }\r\n\r\n    if (!xml || !xml.documentElement || xml.getElementsByTagName('parsererror').length)\r\n    {\r\n        return null;\r\n    }\r\n    else\r\n    {\r\n        return xml;\r\n    }\r\n};\r\n\r\nmodule.exports = ParseXML;\r\n"]},"metadata":{},"sourceType":"script"}