{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('../../Formats');\n\nvar MapData = require('../../mapdata/MapData');\n\nvar ParseTileLayers = require('./ParseTileLayers');\n\nvar ParseImageLayers = require('./ParseImageLayers');\n\nvar ParseTilesets = require('./ParseTilesets');\n\nvar ParseObjectLayers = require('./ParseObjectLayers');\n\nvar BuildTilesetIndex = require('./BuildTilesetIndex');\n\nvar AssignTileProperties = require('./AssignTileProperties');\n/**\r\n * Parses a Tiled JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseJSONTiled\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?Phaser.Tilemaps.MapData} The created MapData object, or `null` if the data can't be parsed.\r\n */\n\n\nvar ParseJSONTiled = function (name, json, insertNull) {\n  if (json.orientation !== 'orthogonal') {\n    console.warn('Only orthogonal map types are supported in this version of Phaser');\n    return null;\n  } //  Map data will consist of: layers, objects, images, tilesets, sizes\n\n\n  var mapData = new MapData({\n    width: json.width,\n    height: json.height,\n    name: name,\n    tileWidth: json.tilewidth,\n    tileHeight: json.tileheight,\n    orientation: json.orientation,\n    format: Formats.TILED_JSON,\n    version: json.version,\n    properties: json.properties,\n    renderOrder: json.renderorder,\n    infinite: json.infinite\n  });\n  mapData.layers = ParseTileLayers(json, insertNull);\n  mapData.images = ParseImageLayers(json);\n  var sets = ParseTilesets(json);\n  mapData.tilesets = sets.tilesets;\n  mapData.imageCollections = sets.imageCollections;\n  mapData.objects = ParseObjectLayers(json);\n  mapData.tiles = BuildTilesetIndex(mapData);\n  AssignTileProperties(mapData);\n  return mapData;\n};\n\nmodule.exports = ParseJSONTiled;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/ParseJSONTiled.js"],"names":["Formats","require","MapData","ParseTileLayers","ParseImageLayers","ParseTilesets","ParseObjectLayers","BuildTilesetIndex","AssignTileProperties","ParseJSONTiled","name","json","insertNull","orientation","console","warn","mapData","width","height","tileWidth","tilewidth","tileHeight","tileheight","format","TILED_JSON","version","properties","renderOrder","renderorder","infinite","layers","images","sets","tilesets","imageCollections","objects","tiles","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,mBAAD,CAA7B;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIK,iBAAiB,GAAGL,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,qBAAD,CAA/B;;AACA,IAAIO,oBAAoB,GAAGP,OAAO,CAAC,wBAAD,CAAlC;AAEA;;;;;;;;;;;;;;;;;;;AAiBA,IAAIQ,cAAc,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,UAAtB,EACrB;AACI,MAAID,IAAI,CAACE,WAAL,KAAqB,YAAzB,EACA;AACIC,IAAAA,OAAO,CAACC,IAAR,CAAa,mEAAb;AACA,WAAO,IAAP;AACH,GALL,CAOI;;;AACA,MAAIC,OAAO,GAAG,IAAId,OAAJ,CAAY;AACtBe,IAAAA,KAAK,EAAEN,IAAI,CAACM,KADU;AAEtBC,IAAAA,MAAM,EAAEP,IAAI,CAACO,MAFS;AAGtBR,IAAAA,IAAI,EAAEA,IAHgB;AAItBS,IAAAA,SAAS,EAAER,IAAI,CAACS,SAJM;AAKtBC,IAAAA,UAAU,EAAEV,IAAI,CAACW,UALK;AAMtBT,IAAAA,WAAW,EAAEF,IAAI,CAACE,WANI;AAOtBU,IAAAA,MAAM,EAAEvB,OAAO,CAACwB,UAPM;AAQtBC,IAAAA,OAAO,EAAEd,IAAI,CAACc,OARQ;AAStBC,IAAAA,UAAU,EAAEf,IAAI,CAACe,UATK;AAUtBC,IAAAA,WAAW,EAAEhB,IAAI,CAACiB,WAVI;AAWtBC,IAAAA,QAAQ,EAAElB,IAAI,CAACkB;AAXO,GAAZ,CAAd;AAcAb,EAAAA,OAAO,CAACc,MAAR,GAAiB3B,eAAe,CAACQ,IAAD,EAAOC,UAAP,CAAhC;AACAI,EAAAA,OAAO,CAACe,MAAR,GAAiB3B,gBAAgB,CAACO,IAAD,CAAjC;AAEA,MAAIqB,IAAI,GAAG3B,aAAa,CAACM,IAAD,CAAxB;AACAK,EAAAA,OAAO,CAACiB,QAAR,GAAmBD,IAAI,CAACC,QAAxB;AACAjB,EAAAA,OAAO,CAACkB,gBAAR,GAA2BF,IAAI,CAACE,gBAAhC;AAEAlB,EAAAA,OAAO,CAACmB,OAAR,GAAkB7B,iBAAiB,CAACK,IAAD,CAAnC;AAEAK,EAAAA,OAAO,CAACoB,KAAR,GAAgB7B,iBAAiB,CAACS,OAAD,CAAjC;AAEAR,EAAAA,oBAAoB,CAACQ,OAAD,CAApB;AAEA,SAAOA,OAAP;AACH,CArCD;;AAuCAqB,MAAM,CAACC,OAAP,GAAiB7B,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('../../Formats');\r\nvar MapData = require('../../mapdata/MapData');\r\nvar ParseTileLayers = require('./ParseTileLayers');\r\nvar ParseImageLayers = require('./ParseImageLayers');\r\nvar ParseTilesets = require('./ParseTilesets');\r\nvar ParseObjectLayers = require('./ParseObjectLayers');\r\nvar BuildTilesetIndex = require('./BuildTilesetIndex');\r\nvar AssignTileProperties = require('./AssignTileProperties');\r\n\r\n/**\r\n * Parses a Tiled JSON object into a new MapData object.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.ParseJSONTiled\r\n * @since 3.0.0\r\n *\r\n * @param {string} name - The name of the tilemap, used to set the name on the MapData.\r\n * @param {object} json - The Tiled JSON object.\r\n * @param {boolean} insertNull - Controls how empty tiles, tiles with an index of -1, in the map\r\n * data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n *\r\n * @return {?Phaser.Tilemaps.MapData} The created MapData object, or `null` if the data can't be parsed.\r\n */\r\nvar ParseJSONTiled = function (name, json, insertNull)\r\n{\r\n    if (json.orientation !== 'orthogonal')\r\n    {\r\n        console.warn('Only orthogonal map types are supported in this version of Phaser');\r\n        return null;\r\n    }\r\n\r\n    //  Map data will consist of: layers, objects, images, tilesets, sizes\r\n    var mapData = new MapData({\r\n        width: json.width,\r\n        height: json.height,\r\n        name: name,\r\n        tileWidth: json.tilewidth,\r\n        tileHeight: json.tileheight,\r\n        orientation: json.orientation,\r\n        format: Formats.TILED_JSON,\r\n        version: json.version,\r\n        properties: json.properties,\r\n        renderOrder: json.renderorder,\r\n        infinite: json.infinite\r\n    });\r\n\r\n    mapData.layers = ParseTileLayers(json, insertNull);\r\n    mapData.images = ParseImageLayers(json);\r\n\r\n    var sets = ParseTilesets(json);\r\n    mapData.tilesets = sets.tilesets;\r\n    mapData.imageCollections = sets.imageCollections;\r\n\r\n    mapData.objects = ParseObjectLayers(json);\r\n\r\n    mapData.tiles = BuildTilesetIndex(mapData);\r\n\r\n    AssignTileProperties(mapData);\r\n\r\n    return mapData;\r\n};\r\n\r\nmodule.exports = ParseJSONTiled;\r\n"]},"metadata":{},"sourceType":"script"}