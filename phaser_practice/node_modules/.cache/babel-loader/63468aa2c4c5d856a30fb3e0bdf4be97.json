{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar BaseCamera = require('../../cameras/2d/BaseCamera.js');\n\nvar Class = require('../../utils/Class');\n\nvar Commands = require('./Commands');\n\nvar ComponentsAlpha = require('../components/AlphaSingle');\n\nvar ComponentsBlendMode = require('../components/BlendMode');\n\nvar ComponentsDepth = require('../components/Depth');\n\nvar ComponentsMask = require('../components/Mask');\n\nvar ComponentsPipeline = require('../components/Pipeline');\n\nvar ComponentsTransform = require('../components/Transform');\n\nvar ComponentsVisible = require('../components/Visible');\n\nvar ComponentsScrollFactor = require('../components/ScrollFactor');\n\nvar TransformMatrix = require('../components/TransformMatrix');\n\nvar Ellipse = require('../../geom/ellipse/Ellipse');\n\nvar GameObject = require('../GameObject');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar GetValue = require('../../utils/object/GetValue');\n\nvar MATH_CONST = require('../../math/const');\n\nvar Render = require('./GraphicsRender');\n/**\r\n * @classdesc\r\n * A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\r\n * Rectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\r\n * object it will be empty.\r\n *\r\n * To draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\r\n * fill or stroke them. For example:\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.beginPath();\r\n * graphics.moveTo(100, 100);\r\n * graphics.lineTo(200, 200);\r\n * graphics.closePath();\r\n * graphics.strokePath();\r\n * ```\r\n *\r\n * There are also many helpful methods that draw and fill/stroke common shapes for you.\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.fillStyle(0xFFFFFF, 1.0);\r\n * graphics.fillRect(50, 50, 400, 200);\r\n * graphics.strokeRect(50, 50, 400, 200);\r\n * ```\r\n *\r\n * When a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\r\n * Under Canvas it will use the HTML Canvas context drawing operations to draw the path.\r\n * Under WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\r\n * complex shapes.\r\n *\r\n * If your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\r\n * performance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\r\n * a Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\r\n * updates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\r\n * memory.\r\n *\r\n * As you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\r\n * in their complexity and quantity of them in your game.\r\n *\r\n * @class Graphics\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Graphics object belongs.\r\n * @param {Phaser.Types.GameObjects.Graphics.Options} [options] - Options that set the position and default style of this Graphics object.\r\n */\n\n\nvar Graphics = new Class({\n  Extends: GameObject,\n  Mixins: [ComponentsAlpha, ComponentsBlendMode, ComponentsDepth, ComponentsMask, ComponentsPipeline, ComponentsTransform, ComponentsVisible, ComponentsScrollFactor, Render],\n  initialize: function Graphics(scene, options) {\n    var x = GetValue(options, 'x', 0);\n    var y = GetValue(options, 'y', 0);\n    GameObject.call(this, scene, 'Graphics');\n    this.setPosition(x, y);\n    this.initPipeline();\n    /**\r\n     * The horizontal display origin of the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#displayOriginX\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.displayOriginX = 0;\n    /**\r\n     * The vertical display origin of the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#displayOriginY\r\n     * @type {number}\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this.displayOriginY = 0;\n    /**\r\n     * The array of commands used to render the Graphics.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#commandBuffer\r\n     * @type {array}\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this.commandBuffer = [];\n    /**\r\n     * The default fill color for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultFillColor\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFillColor = -1;\n    /**\r\n     * The default fill alpha for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultFillAlpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultFillAlpha = 1;\n    /**\r\n     * The default stroke width for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeWidth\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeWidth = 1;\n    /**\r\n     * The default stroke color for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeColor\r\n     * @type {number}\r\n     * @default -1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeColor = -1;\n    /**\r\n     * The default stroke alpha for shapes rendered by this Graphics object.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#defaultStrokeAlpha\r\n     * @type {number}\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\n\n    this.defaultStrokeAlpha = 1;\n    /**\r\n     * Internal property that keeps track of the line width style setting.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#_lineWidth\r\n     * @type {number}\r\n     * @private\r\n     * @since 3.0.0\r\n     */\n\n    this._lineWidth = 1.0;\n    /**\r\n     * A temporary Transform Matrix, re-used internally during batching.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#_tempMatrix1\r\n     * @private\r\n     * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n     * @since 3.17.0\r\n     */\n\n    this._tempMatrix1 = new TransformMatrix();\n    /**\r\n     * A temporary Transform Matrix, re-used internally during batching.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#_tempMatrix2\r\n     * @private\r\n     * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n     * @since 3.17.0\r\n     */\n\n    this._tempMatrix2 = new TransformMatrix();\n    /**\r\n     * A temporary Transform Matrix, re-used internally during batching.\r\n     *\r\n     * @name Phaser.GameObjects.Graphics#_tempMatrix3\r\n     * @private\r\n     * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n     * @since 3.17.0\r\n     */\n\n    this._tempMatrix3 = new TransformMatrix();\n    this.setDefaultStyles(options);\n  },\n\n  /**\r\n   * Set the default style settings for this Graphics object.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#setDefaultStyles\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Types.GameObjects.Graphics.Styles} options - The styles to set as defaults.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  setDefaultStyles: function (options) {\n    if (GetValue(options, 'lineStyle', null)) {\n      this.defaultStrokeWidth = GetValue(options, 'lineStyle.width', 1);\n      this.defaultStrokeColor = GetValue(options, 'lineStyle.color', 0xffffff);\n      this.defaultStrokeAlpha = GetValue(options, 'lineStyle.alpha', 1);\n      this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\n    }\n\n    if (GetValue(options, 'fillStyle', null)) {\n      this.defaultFillColor = GetValue(options, 'fillStyle.color', 0xffffff);\n      this.defaultFillAlpha = GetValue(options, 'fillStyle.alpha', 1);\n      this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Set the current line style.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} lineWidth - The stroke width.\r\n   * @param {number} color - The stroke color.\r\n   * @param {number} [alpha=1] - The stroke alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineStyle: function (lineWidth, color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.LINE_STYLE, lineWidth, color, alpha);\n    this._lineWidth = lineWidth;\n    return this;\n  },\n\n  /**\r\n   * Set the current fill style.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillStyle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} color - The fill color.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillStyle: function (color, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.FILL_STYLE, color, alpha);\n    return this;\n  },\n\n  /**\r\n   * Sets a gradient fill style. This is a WebGL only feature.\r\n   *\r\n   * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n   * The gradient is used to color all filled shapes and paths drawn after calling this method.\r\n   * If you wish to turn a gradient off, call `fillStyle` and provide a new single fill color.\r\n   *\r\n   * When filling a triangle only the first 3 color values provided are used for the 3 points of a triangle.\r\n   *\r\n   * This feature is best used only on rectangles and triangles. All other shapes will give strange results.\r\n   *\r\n   * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n   * will be filled with a gradient on its own. There is no ability to gradient fill a shape or path as a single\r\n   * entity at this time.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillGradientStyle\r\n   * @webglOnly\r\n   * @since 3.12.0\r\n   *\r\n   * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n   * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n   * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n   * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillGradientStyle: function (topLeft, topRight, bottomLeft, bottomRight, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.GRADIENT_FILL_STYLE, alpha, topLeft, topRight, bottomLeft, bottomRight);\n    return this;\n  },\n\n  /**\r\n   * Sets a gradient line style. This is a WebGL only feature.\r\n   *\r\n   * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n   * The gradient is used to color all stroked shapes and paths drawn after calling this method.\r\n   * If you wish to turn a gradient off, call `lineStyle` and provide a new single line color.\r\n   *\r\n   * This feature is best used only on single lines. All other shapes will give strange results.\r\n   *\r\n   * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n   * will be filled with a gradient on its own. There is no ability to gradient stroke a shape or path as a single\r\n   * entity at this time.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineGradientStyle\r\n   * @webglOnly\r\n   * @since 3.12.0\r\n   *\r\n   * @param {number} lineWidth - The stroke width.\r\n   * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n   * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n   * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n   * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n   * @param {number} [alpha=1] - The fill alpha.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineGradientStyle: function (lineWidth, topLeft, topRight, bottomLeft, bottomRight, alpha) {\n    if (alpha === undefined) {\n      alpha = 1;\n    }\n\n    this.commandBuffer.push(Commands.GRADIENT_LINE_STYLE, lineWidth, alpha, topLeft, topRight, bottomLeft, bottomRight);\n    return this;\n  },\n\n  /**\r\n   * Sets the texture frame this Graphics Object will use when drawing all shapes defined after calling this.\r\n   *\r\n   * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n   *\r\n   * Once set, all shapes will use this texture. Call this method with no arguments to clear it.\r\n   *\r\n   * The textures are not tiled. They are stretched to the dimensions of the shapes being rendered. For this reason,\r\n   * it works best with seamless / tileable textures.\r\n   *\r\n   * The mode argument controls how the textures are combined with the fill colors. The default value (0) will\r\n   * multiply the texture by the fill color. A value of 1 will use just the fill color, but the alpha data from the texture,\r\n   * and a value of 2 will use just the texture and no fill color at all.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#setTexture\r\n   * @since 3.12.0\r\n   * @webglOnly\r\n   *\r\n   * @param {string} [key] - The key of the texture to be used, as stored in the Texture Manager. Leave blank to clear a previously set texture.\r\n   * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n   * @param {number} [mode=0] - The texture tint mode. 0 is multiply, 1 is alpha only and 2 is texture only.\r\n   *\r\n   * @return {this} This Game Object.\r\n   */\n  setTexture: function (key, frame, mode) {\n    if (mode === undefined) {\n      mode = 0;\n    }\n\n    if (key === undefined) {\n      this.commandBuffer.push(Commands.CLEAR_TEXTURE);\n    } else {\n      var textureFrame = this.scene.sys.textures.getFrame(key, frame);\n\n      if (textureFrame) {\n        if (mode === 2) {\n          mode = 3;\n        }\n\n        this.commandBuffer.push(Commands.SET_TEXTURE, textureFrame, mode);\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Start a new shape path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#beginPath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  beginPath: function () {\n    this.commandBuffer.push(Commands.BEGIN_PATH);\n    return this;\n  },\n\n  /**\r\n   * Close the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#closePath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  closePath: function () {\n    this.commandBuffer.push(Commands.CLOSE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPath: function () {\n    this.commandBuffer.push(Commands.FILL_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the current path.\r\n   * \r\n   * This is an alias for `Graphics.fillPath` and does the same thing.\r\n   * It was added to match the CanvasRenderingContext 2D API.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fill\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fill: function () {\n    this.commandBuffer.push(Commands.FILL_PATH);\n    return this;\n  },\n\n  /**\r\n   * Stroke the current path.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokePath\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokePath: function () {\n    this.commandBuffer.push(Commands.STROKE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Stroke the current path.\r\n   * \r\n   * This is an alias for `Graphics.strokePath` and does the same thing.\r\n   * It was added to match the CanvasRenderingContext 2D API.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#stroke\r\n   * @since 3.16.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  stroke: function () {\n    this.commandBuffer.push(Commands.STROKE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Fill the given circle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillCircleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Circle} circle - The circle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillCircleShape: function (circle) {\n    return this.fillCircle(circle.x, circle.y, circle.radius);\n  },\n\n  /**\r\n   * Stroke the given circle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeCircleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Circle} circle - The circle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeCircleShape: function (circle) {\n    return this.strokeCircle(circle.x, circle.y, circle.radius);\n  },\n\n  /**\r\n   * Fill a circle with the given position and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillCircle: function (x, y, radius) {\n    this.beginPath();\n    this.arc(x, y, radius, 0, MATH_CONST.PI2);\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke a circle with the given position and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeCircle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeCircle: function (x, y, radius) {\n    this.beginPath();\n    this.arc(x, y, radius, 0, MATH_CONST.PI2);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the given rectangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRectShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Rectangle} rect - The rectangle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRectShape: function (rect) {\n    return this.fillRect(rect.x, rect.y, rect.width, rect.height);\n  },\n\n  /**\r\n   * Stroke the given rectangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRectShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Rectangle} rect - The rectangle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRectShape: function (rect) {\n    return this.strokeRect(rect.x, rect.y, rect.width, rect.height);\n  },\n\n  /**\r\n   * Fill a rectangle with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRect: function (x, y, width, height) {\n    this.commandBuffer.push(Commands.FILL_RECT, x, y, width, height);\n    return this;\n  },\n\n  /**\r\n   * Stroke a rectangle with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRect\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRect: function (x, y, width, height) {\n    var lineWidthHalf = this._lineWidth / 2;\n    var minx = x - lineWidthHalf;\n    var maxx = x + lineWidthHalf;\n    this.beginPath();\n    this.moveTo(x, y);\n    this.lineTo(x, y + height);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(x + width, y);\n    this.lineTo(x + width, y + height);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(minx, y);\n    this.lineTo(maxx + width, y);\n    this.strokePath();\n    this.beginPath();\n    this.moveTo(minx, y + height);\n    this.lineTo(maxx + width, y + height);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill a rounded rectangle with the given position, size and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillRoundedRect\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   * @param {(Phaser.Types.GameObjects.Graphics.RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillRoundedRect: function (x, y, width, height, radius) {\n    if (radius === undefined) {\n      radius = 20;\n    }\n\n    var tl = radius;\n    var tr = radius;\n    var bl = radius;\n    var br = radius;\n\n    if (typeof radius !== 'number') {\n      tl = GetFastValue(radius, 'tl', 20);\n      tr = GetFastValue(radius, 'tr', 20);\n      bl = GetFastValue(radius, 'bl', 20);\n      br = GetFastValue(radius, 'br', 20);\n    }\n\n    this.beginPath();\n    this.moveTo(x + tl, y);\n    this.lineTo(x + width - tr, y);\n    this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\n    this.lineTo(x + width, y + height - br);\n    this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\n    this.lineTo(x + bl, y + height);\n    this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\n    this.lineTo(x, y + tl);\n    this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke a rounded rectangle with the given position, size and radius.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeRoundedRect\r\n   * @since 3.11.0\r\n   *\r\n   * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n   * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n   * @param {number} width - The width of the rectangle.\r\n   * @param {number} height - The height of the rectangle.\r\n   * @param {(Phaser.Types.GameObjects.Graphics.RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeRoundedRect: function (x, y, width, height, radius) {\n    if (radius === undefined) {\n      radius = 20;\n    }\n\n    var tl = radius;\n    var tr = radius;\n    var bl = radius;\n    var br = radius;\n\n    if (typeof radius !== 'number') {\n      tl = GetFastValue(radius, 'tl', 20);\n      tr = GetFastValue(radius, 'tr', 20);\n      bl = GetFastValue(radius, 'bl', 20);\n      br = GetFastValue(radius, 'br', 20);\n    }\n\n    this.beginPath();\n    this.moveTo(x + tl, y);\n    this.lineTo(x + width - tr, y);\n    this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\n    this.lineTo(x + width, y + height - br);\n    this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\n    this.lineTo(x + bl, y + height);\n    this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\n    this.lineTo(x, y + tl);\n    this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the given point.\r\n   *\r\n   * Draws a square at the given position, 1 pixel in size by default.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPointShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The point to fill.\r\n   * @param {number} [size=1] - The size of the square to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPointShape: function (point, size) {\n    return this.fillPoint(point.x, point.y, size);\n  },\n\n  /**\r\n   * Fill a point at the given position.\r\n   *\r\n   * Draws a square at the given position, 1 pixel in size by default.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPoint\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the point.\r\n   * @param {number} y - The y coordinate of the point.\r\n   * @param {number} [size=1] - The size of the square to draw.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPoint: function (x, y, size) {\n    if (!size || size < 1) {\n      size = 1;\n    } else {\n      x -= size / 2;\n      y -= size / 2;\n    }\n\n    this.commandBuffer.push(Commands.FILL_RECT, x, y, size, size);\n    return this;\n  },\n\n  /**\r\n   * Fill the given triangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillTriangleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Triangle} triangle - The triangle to fill.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillTriangleShape: function (triangle) {\n    return this.fillTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\n  },\n\n  /**\r\n   * Stroke the given triangle.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeTriangleShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Triangle} triangle - The triangle to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeTriangleShape: function (triangle) {\n    return this.strokeTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\n  },\n\n  /**\r\n   * Fill a triangle with the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillTriangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x0 - The x coordinate of the first point.\r\n   * @param {number} y0 - The y coordinate of the first point.\r\n   * @param {number} x1 - The x coordinate of the second point.\r\n   * @param {number} y1 - The y coordinate of the second point.\r\n   * @param {number} x2 - The x coordinate of the third point.\r\n   * @param {number} y2 - The y coordinate of the third point.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillTriangle: function (x0, y0, x1, y1, x2, y2) {\n    this.commandBuffer.push(Commands.FILL_TRIANGLE, x0, y0, x1, y1, x2, y2);\n    return this;\n  },\n\n  /**\r\n   * Stroke a triangle with the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeTriangle\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x0 - The x coordinate of the first point.\r\n   * @param {number} y0 - The y coordinate of the first point.\r\n   * @param {number} x1 - The x coordinate of the second point.\r\n   * @param {number} y1 - The y coordinate of the second point.\r\n   * @param {number} x2 - The x coordinate of the third point.\r\n   * @param {number} y2 - The y coordinate of the third point.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeTriangle: function (x0, y0, x1, y1, x2, y2) {\n    this.commandBuffer.push(Commands.STROKE_TRIANGLE, x0, y0, x1, y1, x2, y2);\n    return this;\n  },\n\n  /**\r\n   * Draw the given line.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeLineShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Line} line - The line to stroke.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeLineShape: function (line) {\n    return this.lineBetween(line.x1, line.y1, line.x2, line.y2);\n  },\n\n  /**\r\n   * Draw a line between the given points.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineBetween\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x1 - The x coordinate of the start point of the line.\r\n   * @param {number} y1 - The y coordinate of the start point of the line.\r\n   * @param {number} x2 - The x coordinate of the end point of the line.\r\n   * @param {number} y2 - The y coordinate of the end point of the line.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineBetween: function (x1, y1, x2, y2) {\n    this.beginPath();\n    this.moveTo(x1, y1);\n    this.lineTo(x2, y2);\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Draw a line from the current drawing position to the given position.\r\n   *\r\n   * Moves the current drawing position to the given position.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#lineTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to draw the line to.\r\n   * @param {number} y - The y coordinate to draw the line to.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  lineTo: function (x, y) {\n    this.commandBuffer.push(Commands.LINE_TO, x, y);\n    return this;\n  },\n\n  /**\r\n   * Move the current drawing position to the given position.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#moveTo\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate to move to.\r\n   * @param {number} y - The y coordinate to move to.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  moveTo: function (x, y) {\n    this.commandBuffer.push(Commands.MOVE_TO, x, y);\n    return this;\n  },\n\n  /**\r\n   * Stroke the shape represented by the given array of points.\r\n   *\r\n   * Pass `closeShape` to automatically close the shape by joining the last to the first point.\r\n   * \r\n   * Pass `closePath` to automatically close the path before it is stroked.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokePoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|Phaser.Geom.Point[])} points - The points to stroke.\r\n   * @param {boolean} [closeShape=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n   * @param {boolean} [closePath=false] - When `true`, the path is closed before being stroked.\r\n   * @param {integer} [endIndex] - The index of `points` to stop drawing at. Defaults to `points.length`.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokePoints: function (points, closeShape, closePath, endIndex) {\n    if (closeShape === undefined) {\n      closeShape = false;\n    }\n\n    if (closePath === undefined) {\n      closePath = false;\n    }\n\n    if (endIndex === undefined) {\n      endIndex = points.length;\n    }\n\n    this.beginPath();\n    this.moveTo(points[0].x, points[0].y);\n\n    for (var i = 1; i < endIndex; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n\n    if (closeShape) {\n      this.lineTo(points[0].x, points[0].y);\n    }\n\n    if (closePath) {\n      this.closePath();\n    }\n\n    this.strokePath();\n    return this;\n  },\n\n  /**\r\n   * Fill the shape represented by the given array of points.\r\n   *\r\n   * Pass `closeShape` to automatically close the shape by joining the last to the first point.\r\n   * \r\n   * Pass `closePath` to automatically close the path before it is filled.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillPoints\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(array|Phaser.Geom.Point[])} points - The points to fill.\r\n   * @param {boolean} [closeShape=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n   * @param {boolean} [closePath=false] - When `true`, the path is closed before being stroked.\r\n   * @param {integer} [endIndex] - The index of `points` to stop at. Defaults to `points.length`.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillPoints: function (points, closeShape, closePath, endIndex) {\n    if (closeShape === undefined) {\n      closeShape = false;\n    }\n\n    if (closePath === undefined) {\n      closePath = false;\n    }\n\n    if (endIndex === undefined) {\n      endIndex = points.length;\n    }\n\n    this.beginPath();\n    this.moveTo(points[0].x, points[0].y);\n\n    for (var i = 1; i < endIndex; i++) {\n      this.lineTo(points[i].x, points[i].y);\n    }\n\n    if (closeShape) {\n      this.lineTo(points[0].x, points[0].y);\n    }\n\n    if (closePath) {\n      this.closePath();\n    }\n\n    this.fillPath();\n    return this;\n  },\n\n  /**\r\n   * Stroke the given ellipse.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeEllipseShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to stroke.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeEllipseShape: function (ellipse, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var points = ellipse.getPoints(smoothness);\n    return this.strokePoints(points, true);\n  },\n\n  /**\r\n   * Stroke an ellipse with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#strokeEllipse\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the ellipse.\r\n   * @param {number} y - The y coordinate of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  strokeEllipse: function (x, y, width, height, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var ellipse = new Ellipse(x, y, width, height);\n    var points = ellipse.getPoints(smoothness);\n    return this.strokePoints(points, true);\n  },\n\n  /**\r\n   * Fill the given ellipse.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillEllipseShape\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to fill.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillEllipseShape: function (ellipse, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var points = ellipse.getPoints(smoothness);\n    return this.fillPoints(points, true);\n  },\n\n  /**\r\n   * Fill an ellipse with the given position and size.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#fillEllipse\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the ellipse.\r\n   * @param {number} y - The y coordinate of the center of the ellipse.\r\n   * @param {number} width - The width of the ellipse.\r\n   * @param {number} height - The height of the ellipse.\r\n   * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  fillEllipse: function (x, y, width, height, smoothness) {\n    if (smoothness === undefined) {\n      smoothness = 32;\n    }\n\n    var ellipse = new Ellipse(x, y, width, height);\n    var points = ellipse.getPoints(smoothness);\n    return this.fillPoints(points, true);\n  },\n\n  /**\r\n   * Draw an arc.\r\n   *\r\n   * This method can be used to create circles, or parts of circles.\r\n   * \r\n   * Make sure you call `beginPath` before starting the arc unless you wish for the arc to automatically\r\n   * close when filled or stroked.\r\n   *\r\n   * Use the optional `overshoot` argument increase the number of iterations that take place when\r\n   * the arc is rendered in WebGL. This is useful if you're drawing an arc with an especially thick line,\r\n   * as it will allow the arc to fully join-up. Try small values at first, i.e. 0.01.\r\n   *\r\n   * Call {@link Phaser.GameObjects.Graphics#fillPath} or {@link Phaser.GameObjects.Graphics#strokePath} after calling\r\n   * this method to draw the arc.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#arc\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x coordinate of the center of the circle.\r\n   * @param {number} y - The y coordinate of the center of the circle.\r\n   * @param {number} radius - The radius of the circle.\r\n   * @param {number} startAngle - The starting angle, in radians.\r\n   * @param {number} endAngle - The ending angle, in radians.\r\n   * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n   * @param {number} [overshoot=0] - This value allows you to increase the segment iterations in WebGL rendering. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Use small numbers such as 0.01 to start with and increase as needed.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  arc: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot) {\n    if (anticlockwise === undefined) {\n      anticlockwise = false;\n    }\n\n    if (overshoot === undefined) {\n      overshoot = 0;\n    }\n\n    this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n    return this;\n  },\n\n  /**\r\n   * Creates a pie-chart slice shape centered at `x`, `y` with the given radius.\r\n   * You must define the start and end angle of the slice.\r\n   *\r\n   * Setting the `anticlockwise` argument to `true` creates a shape similar to Pacman.\r\n   * Setting it to `false` creates a shape like a slice of pie.\r\n   *\r\n   * This method will begin a new path and close the path at the end of it.\r\n   * To display the actual slice you need to call either `strokePath` or `fillPath` after it.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#slice\r\n   * @since 3.4.0\r\n   *\r\n   * @param {number} x - The horizontal center of the slice.\r\n   * @param {number} y - The vertical center of the slice.\r\n   * @param {number} radius - The radius of the slice.\r\n   * @param {number} startAngle - The start angle of the slice, given in radians.\r\n   * @param {number} endAngle - The end angle of the slice, given in radians.\r\n   * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n   * @param {number} [overshoot=0] - This value allows you to overshoot the endAngle by this amount. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  slice: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot) {\n    if (anticlockwise === undefined) {\n      anticlockwise = false;\n    }\n\n    if (overshoot === undefined) {\n      overshoot = 0;\n    }\n\n    this.commandBuffer.push(Commands.BEGIN_PATH);\n    this.commandBuffer.push(Commands.MOVE_TO, x, y);\n    this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\n    this.commandBuffer.push(Commands.CLOSE_PATH);\n    return this;\n  },\n\n  /**\r\n   * Saves the state of the Graphics by pushing the current state onto a stack.\r\n   *\r\n   * The most recently saved state can then be restored with {@link Phaser.GameObjects.Graphics#restore}.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#save\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  save: function () {\n    this.commandBuffer.push(Commands.SAVE);\n    return this;\n  },\n\n  /**\r\n   * Restores the most recently saved state of the Graphics by popping from the state stack.\r\n   *\r\n   * Use {@link Phaser.GameObjects.Graphics#save} to save the current state, and call this afterwards to restore that state.\r\n   *\r\n   * If there is no saved state, this command does nothing.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#restore\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  restore: function () {\n    this.commandBuffer.push(Commands.RESTORE);\n    return this;\n  },\n\n  /**\r\n   * Inserts a translation command into this Graphics objects command buffer.\r\n   * \r\n   * All objects drawn _after_ calling this method will be translated\r\n   * by the given amount.\r\n   * \r\n   * This does not change the position of the Graphics object itself,\r\n   * only of the objects drawn by it after calling this method.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#translateCanvas\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal translation to apply.\r\n   * @param {number} y - The vertical translation to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  translateCanvas: function (x, y) {\n    this.commandBuffer.push(Commands.TRANSLATE, x, y);\n    return this;\n  },\n\n  /**\r\n   * Inserts a scale command into this Graphics objects command buffer.\r\n   * \r\n   * All objects drawn _after_ calling this method will be scaled\r\n   * by the given amount.\r\n   * \r\n   * This does not change the scale of the Graphics object itself,\r\n   * only of the objects drawn by it after calling this method.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#scaleCanvas\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The horizontal scale to apply.\r\n   * @param {number} y - The vertical scale to apply.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  scaleCanvas: function (x, y) {\n    this.commandBuffer.push(Commands.SCALE, x, y);\n    return this;\n  },\n\n  /**\r\n   * Inserts a rotation command into this Graphics objects command buffer.\r\n   * \r\n   * All objects drawn _after_ calling this method will be rotated\r\n   * by the given amount.\r\n   * \r\n   * This does not change the rotation of the Graphics object itself,\r\n   * only of the objects drawn by it after calling this method.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#rotateCanvas\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The rotation angle, in radians.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  rotateCanvas: function (radians) {\n    this.commandBuffer.push(Commands.ROTATE, radians);\n    return this;\n  },\n\n  /**\r\n   * Clear the command buffer and reset the fill style and line style to their defaults.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#clear\r\n   * @since 3.0.0\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  clear: function () {\n    this.commandBuffer.length = 0;\n\n    if (this.defaultFillColor > -1) {\n      this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\n    }\n\n    if (this.defaultStrokeColor > -1) {\n      this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Generate a texture from this Graphics object.\r\n   *\r\n   * If `key` is a string it'll generate a new texture using it and add it into the\r\n   * Texture Manager (assuming no key conflict happens).\r\n   *\r\n   * If `key` is a Canvas it will draw the texture to that canvas context. Note that it will NOT\r\n   * automatically upload it to the GPU in WebGL mode.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#generateTexture\r\n   * @since 3.0.0\r\n   *\r\n   * @param {(string|HTMLCanvasElement)} key - The key to store the texture with in the Texture Manager, or a Canvas to draw to.\r\n   * @param {integer} [width] - The width of the graphics to generate.\r\n   * @param {integer} [height] - The height of the graphics to generate.\r\n   *\r\n   * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n   */\n  generateTexture: function (key, width, height) {\n    var sys = this.scene.sys;\n    var renderer = sys.game.renderer;\n\n    if (width === undefined) {\n      width = sys.scale.width;\n    }\n\n    if (height === undefined) {\n      height = sys.scale.height;\n    }\n\n    Graphics.TargetCamera.setScene(this.scene);\n    Graphics.TargetCamera.setViewport(0, 0, width, height);\n    Graphics.TargetCamera.scrollX = this.x;\n    Graphics.TargetCamera.scrollY = this.y;\n    var texture;\n    var ctx;\n\n    if (typeof key === 'string') {\n      if (sys.textures.exists(key)) {\n        //  Key is a string, it DOES exist in the Texture Manager AND is a canvas, so draw to it\n        texture = sys.textures.get(key);\n        var src = texture.getSourceImage();\n\n        if (src instanceof HTMLCanvasElement) {\n          ctx = src.getContext('2d');\n        }\n      } else {\n        //  Key is a string and doesn't exist in the Texture Manager, so generate and save it\n        texture = sys.textures.createCanvas(key, width, height);\n        ctx = texture.getSourceImage().getContext('2d');\n      }\n    } else if (key instanceof HTMLCanvasElement) {\n      //  Key is a Canvas, so draw to it\n      ctx = key.getContext('2d');\n    }\n\n    if (ctx) {\n      // var GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\n      this.renderCanvas(renderer, this, 0, Graphics.TargetCamera, null, ctx, false);\n\n      if (texture) {\n        texture.refresh();\n      }\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Internal destroy handler, called as part of the destroy process.\r\n   *\r\n   * @method Phaser.GameObjects.Graphics#preDestroy\r\n   * @protected\r\n   * @since 3.9.0\r\n   */\n  preDestroy: function () {\n    this.commandBuffer = [];\n  }\n});\n/**\r\n * A Camera used specifically by the Graphics system for rendering to textures.\r\n *\r\n * @name Phaser.GameObjects.Graphics.TargetCamera\r\n * @type {Phaser.Cameras.Scene2D.Camera}\r\n * @since 3.1.0\r\n */\n\nGraphics.TargetCamera = new BaseCamera();\nmodule.exports = Graphics;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/graphics/Graphics.js"],"names":["BaseCamera","require","Class","Commands","ComponentsAlpha","ComponentsBlendMode","ComponentsDepth","ComponentsMask","ComponentsPipeline","ComponentsTransform","ComponentsVisible","ComponentsScrollFactor","TransformMatrix","Ellipse","GameObject","GetFastValue","GetValue","MATH_CONST","Render","Graphics","Extends","Mixins","initialize","scene","options","x","y","call","setPosition","initPipeline","displayOriginX","displayOriginY","commandBuffer","defaultFillColor","defaultFillAlpha","defaultStrokeWidth","defaultStrokeColor","defaultStrokeAlpha","_lineWidth","_tempMatrix1","_tempMatrix2","_tempMatrix3","setDefaultStyles","lineStyle","fillStyle","lineWidth","color","alpha","undefined","push","LINE_STYLE","FILL_STYLE","fillGradientStyle","topLeft","topRight","bottomLeft","bottomRight","GRADIENT_FILL_STYLE","lineGradientStyle","GRADIENT_LINE_STYLE","setTexture","key","frame","mode","CLEAR_TEXTURE","textureFrame","sys","textures","getFrame","SET_TEXTURE","beginPath","BEGIN_PATH","closePath","CLOSE_PATH","fillPath","FILL_PATH","fill","strokePath","STROKE_PATH","stroke","fillCircleShape","circle","fillCircle","radius","strokeCircleShape","strokeCircle","arc","PI2","fillRectShape","rect","fillRect","width","height","strokeRectShape","strokeRect","FILL_RECT","lineWidthHalf","minx","maxx","moveTo","lineTo","fillRoundedRect","tl","tr","bl","br","TAU","Math","PI","strokeRoundedRect","fillPointShape","point","size","fillPoint","fillTriangleShape","triangle","fillTriangle","x1","y1","x2","y2","x3","y3","strokeTriangleShape","strokeTriangle","x0","y0","FILL_TRIANGLE","STROKE_TRIANGLE","strokeLineShape","line","lineBetween","LINE_TO","MOVE_TO","strokePoints","points","closeShape","endIndex","length","i","fillPoints","strokeEllipseShape","ellipse","smoothness","getPoints","strokeEllipse","fillEllipseShape","fillEllipse","startAngle","endAngle","anticlockwise","overshoot","ARC","slice","save","SAVE","restore","RESTORE","translateCanvas","TRANSLATE","scaleCanvas","SCALE","rotateCanvas","radians","ROTATE","clear","generateTexture","renderer","game","scale","TargetCamera","setScene","setViewport","scrollX","scrollY","texture","ctx","exists","get","src","getSourceImage","HTMLCanvasElement","getContext","createCanvas","renderCanvas","refresh","preDestroy","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar BaseCamera = require('../../cameras/2d/BaseCamera.js');\r\nvar Class = require('../../utils/Class');\r\nvar Commands = require('./Commands');\r\nvar ComponentsAlpha = require('../components/AlphaSingle');\r\nvar ComponentsBlendMode = require('../components/BlendMode');\r\nvar ComponentsDepth = require('../components/Depth');\r\nvar ComponentsMask = require('../components/Mask');\r\nvar ComponentsPipeline = require('../components/Pipeline');\r\nvar ComponentsTransform = require('../components/Transform');\r\nvar ComponentsVisible = require('../components/Visible');\r\nvar ComponentsScrollFactor = require('../components/ScrollFactor');\r\n\r\nvar TransformMatrix = require('../components/TransformMatrix');\r\n\r\nvar Ellipse = require('../../geom/ellipse/Ellipse');\r\nvar GameObject = require('../GameObject');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar GetValue = require('../../utils/object/GetValue');\r\nvar MATH_CONST = require('../../math/const');\r\nvar Render = require('./GraphicsRender');\r\n\r\n/**\r\n * @classdesc\r\n * A Graphics object is a way to draw primitive shapes to your game. Primitives include forms of geometry, such as\r\n * Rectangles, Circles, and Polygons. They also include lines, arcs and curves. When you initially create a Graphics\r\n * object it will be empty.\r\n *\r\n * To draw to it you must first specify a line style or fill style (or both), draw shapes using paths, and finally\r\n * fill or stroke them. For example:\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.beginPath();\r\n * graphics.moveTo(100, 100);\r\n * graphics.lineTo(200, 200);\r\n * graphics.closePath();\r\n * graphics.strokePath();\r\n * ```\r\n *\r\n * There are also many helpful methods that draw and fill/stroke common shapes for you.\r\n *\r\n * ```javascript\r\n * graphics.lineStyle(5, 0xFF00FF, 1.0);\r\n * graphics.fillStyle(0xFFFFFF, 1.0);\r\n * graphics.fillRect(50, 50, 400, 200);\r\n * graphics.strokeRect(50, 50, 400, 200);\r\n * ```\r\n *\r\n * When a Graphics object is rendered it will render differently based on if the game is running under Canvas or WebGL.\r\n * Under Canvas it will use the HTML Canvas context drawing operations to draw the path.\r\n * Under WebGL the graphics data is decomposed into polygons. Both of these are expensive processes, especially with\r\n * complex shapes.\r\n *\r\n * If your Graphics object doesn't change much (or at all) once you've drawn your shape to it, then you will help\r\n * performance by calling {@link Phaser.GameObjects.Graphics#generateTexture}. This will 'bake' the Graphics object into\r\n * a Texture, and return it. You can then use this Texture for Sprites or other display objects. If your Graphics object\r\n * updates frequently then you should avoid doing this, as it will constantly generate new textures, which will consume\r\n * memory.\r\n *\r\n * As you can tell, Graphics objects are a bit of a trade-off. While they are extremely useful, you need to be careful\r\n * in their complexity and quantity of them in your game.\r\n *\r\n * @class Graphics\r\n * @extends Phaser.GameObjects.GameObject\r\n * @memberof Phaser.GameObjects\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @extends Phaser.GameObjects.Components.AlphaSingle\r\n * @extends Phaser.GameObjects.Components.BlendMode\r\n * @extends Phaser.GameObjects.Components.Depth\r\n * @extends Phaser.GameObjects.Components.Mask\r\n * @extends Phaser.GameObjects.Components.Pipeline\r\n * @extends Phaser.GameObjects.Components.Transform\r\n * @extends Phaser.GameObjects.Components.Visible\r\n * @extends Phaser.GameObjects.Components.ScrollFactor\r\n *\r\n * @param {Phaser.Scene} scene - The Scene to which this Graphics object belongs.\r\n * @param {Phaser.Types.GameObjects.Graphics.Options} [options] - Options that set the position and default style of this Graphics object.\r\n */\r\nvar Graphics = new Class({\r\n\r\n    Extends: GameObject,\r\n\r\n    Mixins: [\r\n        ComponentsAlpha,\r\n        ComponentsBlendMode,\r\n        ComponentsDepth,\r\n        ComponentsMask,\r\n        ComponentsPipeline,\r\n        ComponentsTransform,\r\n        ComponentsVisible,\r\n        ComponentsScrollFactor,\r\n        Render\r\n    ],\r\n\r\n    initialize:\r\n\r\n    function Graphics (scene, options)\r\n    {\r\n        var x = GetValue(options, 'x', 0);\r\n        var y = GetValue(options, 'y', 0);\r\n\r\n        GameObject.call(this, scene, 'Graphics');\r\n\r\n        this.setPosition(x, y);\r\n        this.initPipeline();\r\n\r\n        /**\r\n         * The horizontal display origin of the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#displayOriginX\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.displayOriginX = 0;\r\n\r\n        /**\r\n         * The vertical display origin of the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#displayOriginY\r\n         * @type {number}\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this.displayOriginY = 0;\r\n\r\n        /**\r\n         * The array of commands used to render the Graphics.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#commandBuffer\r\n         * @type {array}\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this.commandBuffer = [];\r\n\r\n        /**\r\n         * The default fill color for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultFillColor\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFillColor = -1;\r\n\r\n        /**\r\n         * The default fill alpha for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultFillAlpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultFillAlpha = 1;\r\n\r\n        /**\r\n         * The default stroke width for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeWidth\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeWidth = 1;\r\n\r\n        /**\r\n         * The default stroke color for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeColor\r\n         * @type {number}\r\n         * @default -1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeColor = -1;\r\n\r\n        /**\r\n         * The default stroke alpha for shapes rendered by this Graphics object.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#defaultStrokeAlpha\r\n         * @type {number}\r\n         * @default 1\r\n         * @since 3.0.0\r\n         */\r\n        this.defaultStrokeAlpha = 1;\r\n\r\n        /**\r\n         * Internal property that keeps track of the line width style setting.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#_lineWidth\r\n         * @type {number}\r\n         * @private\r\n         * @since 3.0.0\r\n         */\r\n        this._lineWidth = 1.0;\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#_tempMatrix1\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.17.0\r\n         */\r\n        this._tempMatrix1 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#_tempMatrix2\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.17.0\r\n         */\r\n        this._tempMatrix2 = new TransformMatrix();\r\n\r\n        /**\r\n         * A temporary Transform Matrix, re-used internally during batching.\r\n         *\r\n         * @name Phaser.GameObjects.Graphics#_tempMatrix3\r\n         * @private\r\n         * @type {Phaser.GameObjects.Components.TransformMatrix}\r\n         * @since 3.17.0\r\n         */\r\n        this._tempMatrix3 = new TransformMatrix();\r\n\r\n        this.setDefaultStyles(options);\r\n    },\r\n\r\n    /**\r\n     * Set the default style settings for this Graphics object.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#setDefaultStyles\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Types.GameObjects.Graphics.Styles} options - The styles to set as defaults.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    setDefaultStyles: function (options)\r\n    {\r\n        if (GetValue(options, 'lineStyle', null))\r\n        {\r\n            this.defaultStrokeWidth = GetValue(options, 'lineStyle.width', 1);\r\n            this.defaultStrokeColor = GetValue(options, 'lineStyle.color', 0xffffff);\r\n            this.defaultStrokeAlpha = GetValue(options, 'lineStyle.alpha', 1);\r\n\r\n            this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\r\n        }\r\n\r\n        if (GetValue(options, 'fillStyle', null))\r\n        {\r\n            this.defaultFillColor = GetValue(options, 'fillStyle.color', 0xffffff);\r\n            this.defaultFillAlpha = GetValue(options, 'fillStyle.alpha', 1);\r\n\r\n            this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the current line style.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} lineWidth - The stroke width.\r\n     * @param {number} color - The stroke color.\r\n     * @param {number} [alpha=1] - The stroke alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineStyle: function (lineWidth, color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.LINE_STYLE,\r\n            lineWidth, color, alpha\r\n        );\r\n\r\n        this._lineWidth = lineWidth;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the current fill style.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillStyle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} color - The fill color.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillStyle: function (color, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.FILL_STYLE,\r\n            color, alpha\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a gradient fill style. This is a WebGL only feature.\r\n     *\r\n     * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n     * The gradient is used to color all filled shapes and paths drawn after calling this method.\r\n     * If you wish to turn a gradient off, call `fillStyle` and provide a new single fill color.\r\n     *\r\n     * When filling a triangle only the first 3 color values provided are used for the 3 points of a triangle.\r\n     *\r\n     * This feature is best used only on rectangles and triangles. All other shapes will give strange results.\r\n     *\r\n     * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n     * will be filled with a gradient on its own. There is no ability to gradient fill a shape or path as a single\r\n     * entity at this time.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillGradientStyle\r\n     * @webglOnly\r\n     * @since 3.12.0\r\n     *\r\n     * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n     * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n     * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n     * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillGradientStyle: function (topLeft, topRight, bottomLeft, bottomRight, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.GRADIENT_FILL_STYLE,\r\n            alpha, topLeft, topRight, bottomLeft, bottomRight\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets a gradient line style. This is a WebGL only feature.\r\n     *\r\n     * The gradient color values represent the 4 corners of an untransformed rectangle.\r\n     * The gradient is used to color all stroked shapes and paths drawn after calling this method.\r\n     * If you wish to turn a gradient off, call `lineStyle` and provide a new single line color.\r\n     *\r\n     * This feature is best used only on single lines. All other shapes will give strange results.\r\n     *\r\n     * Note that for objects such as arcs or ellipses, or anything which is made out of triangles, each triangle used\r\n     * will be filled with a gradient on its own. There is no ability to gradient stroke a shape or path as a single\r\n     * entity at this time.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineGradientStyle\r\n     * @webglOnly\r\n     * @since 3.12.0\r\n     *\r\n     * @param {number} lineWidth - The stroke width.\r\n     * @param {integer} topLeft - The tint being applied to the top-left of the Game Object.\r\n     * @param {integer} topRight - The tint being applied to the top-right of the Game Object.\r\n     * @param {integer} bottomLeft - The tint being applied to the bottom-left of the Game Object.\r\n     * @param {integer} bottomRight - The tint being applied to the bottom-right of the Game Object.\r\n     * @param {number} [alpha=1] - The fill alpha.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineGradientStyle: function (lineWidth, topLeft, topRight, bottomLeft, bottomRight, alpha)\r\n    {\r\n        if (alpha === undefined) { alpha = 1; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.GRADIENT_LINE_STYLE,\r\n            lineWidth, alpha, topLeft, topRight, bottomLeft, bottomRight\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets the texture frame this Graphics Object will use when drawing all shapes defined after calling this.\r\n     *\r\n     * Textures are referenced by their string-based keys, as stored in the Texture Manager.\r\n     *\r\n     * Once set, all shapes will use this texture. Call this method with no arguments to clear it.\r\n     *\r\n     * The textures are not tiled. They are stretched to the dimensions of the shapes being rendered. For this reason,\r\n     * it works best with seamless / tileable textures.\r\n     *\r\n     * The mode argument controls how the textures are combined with the fill colors. The default value (0) will\r\n     * multiply the texture by the fill color. A value of 1 will use just the fill color, but the alpha data from the texture,\r\n     * and a value of 2 will use just the texture and no fill color at all.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#setTexture\r\n     * @since 3.12.0\r\n     * @webglOnly\r\n     *\r\n     * @param {string} [key] - The key of the texture to be used, as stored in the Texture Manager. Leave blank to clear a previously set texture.\r\n     * @param {(string|integer)} [frame] - The name or index of the frame within the Texture.\r\n     * @param {number} [mode=0] - The texture tint mode. 0 is multiply, 1 is alpha only and 2 is texture only.\r\n     *\r\n     * @return {this} This Game Object.\r\n     */\r\n    setTexture: function (key, frame, mode)\r\n    {\r\n        if (mode === undefined) { mode = 0; }\r\n\r\n        if (key === undefined)\r\n        {\r\n            this.commandBuffer.push(\r\n                Commands.CLEAR_TEXTURE\r\n            );\r\n        }\r\n        else\r\n        {\r\n            var textureFrame = this.scene.sys.textures.getFrame(key, frame);\r\n\r\n            if (textureFrame)\r\n            {\r\n                if (mode === 2)\r\n                {\r\n                    mode = 3;\r\n                }\r\n\r\n                this.commandBuffer.push(\r\n                    Commands.SET_TEXTURE,\r\n                    textureFrame,\r\n                    mode\r\n                );\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Start a new shape path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#beginPath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    beginPath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.BEGIN_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Close the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#closePath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    closePath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.CLOSE_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the current path.\r\n     * \r\n     * This is an alias for `Graphics.fillPath` and does the same thing.\r\n     * It was added to match the CanvasRenderingContext 2D API.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fill\r\n     * @since 3.16.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fill: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the current path.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokePath\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokePath: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.STROKE_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the current path.\r\n     * \r\n     * This is an alias for `Graphics.strokePath` and does the same thing.\r\n     * It was added to match the CanvasRenderingContext 2D API.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#stroke\r\n     * @since 3.16.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    stroke: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.STROKE_PATH\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given circle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillCircleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Circle} circle - The circle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillCircleShape: function (circle)\r\n    {\r\n        return this.fillCircle(circle.x, circle.y, circle.radius);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given circle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeCircleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Circle} circle - The circle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeCircleShape: function (circle)\r\n    {\r\n        return this.strokeCircle(circle.x, circle.y, circle.radius);\r\n    },\r\n\r\n    /**\r\n     * Fill a circle with the given position and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillCircle: function (x, y, radius)\r\n    {\r\n        this.beginPath();\r\n        this.arc(x, y, radius, 0, MATH_CONST.PI2);\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a circle with the given position and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeCircle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeCircle: function (x, y, radius)\r\n    {\r\n        this.beginPath();\r\n        this.arc(x, y, radius, 0, MATH_CONST.PI2);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given rectangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRectShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} rect - The rectangle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRectShape: function (rect)\r\n    {\r\n        return this.fillRect(rect.x, rect.y, rect.width, rect.height);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given rectangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRectShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Rectangle} rect - The rectangle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRectShape: function (rect)\r\n    {\r\n        return this.strokeRect(rect.x, rect.y, rect.width, rect.height);\r\n    },\r\n\r\n    /**\r\n     * Fill a rectangle with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRect: function (x, y, width, height)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_RECT,\r\n            x, y, width, height\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a rectangle with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRect\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRect: function (x, y, width, height)\r\n    {\r\n        var lineWidthHalf = this._lineWidth / 2;\r\n        var minx = x - lineWidthHalf;\r\n        var maxx = x + lineWidthHalf;\r\n\r\n        this.beginPath();\r\n        this.moveTo(x, y);\r\n        this.lineTo(x, y + height);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + width, y);\r\n        this.lineTo(x + width, y + height);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(minx, y);\r\n        this.lineTo(maxx + width, y);\r\n        this.strokePath();\r\n\r\n        this.beginPath();\r\n        this.moveTo(minx, y + height);\r\n        this.lineTo(maxx + width, y + height);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill a rounded rectangle with the given position, size and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillRoundedRect\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     * @param {(Phaser.Types.GameObjects.Graphics.RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillRoundedRect: function (x, y, width, height, radius)\r\n    {\r\n        if (radius === undefined) { radius = 20; }\r\n\r\n        var tl = radius;\r\n        var tr = radius;\r\n        var bl = radius;\r\n        var br = radius;\r\n\r\n        if (typeof radius !== 'number')\r\n        {\r\n            tl = GetFastValue(radius, 'tl', 20);\r\n            tr = GetFastValue(radius, 'tr', 20);\r\n            bl = GetFastValue(radius, 'bl', 20);\r\n            br = GetFastValue(radius, 'br', 20);\r\n        }\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + tl, y);\r\n        this.lineTo(x + width - tr, y);\r\n        this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\r\n        this.lineTo(x + width, y + height - br);\r\n        this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\r\n        this.lineTo(x + bl, y + height);\r\n        this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\r\n        this.lineTo(x, y + tl);\r\n        this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a rounded rectangle with the given position, size and radius.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeRoundedRect\r\n     * @since 3.11.0\r\n     *\r\n     * @param {number} x - The x coordinate of the top-left of the rectangle.\r\n     * @param {number} y - The y coordinate of the top-left of the rectangle.\r\n     * @param {number} width - The width of the rectangle.\r\n     * @param {number} height - The height of the rectangle.\r\n     * @param {(Phaser.Types.GameObjects.Graphics.RoundedRectRadius|number)} [radius=20] - The corner radius; It can also be an object to specify different radii for corners.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeRoundedRect: function (x, y, width, height, radius)\r\n    {\r\n        if (radius === undefined) { radius = 20; }\r\n\r\n        var tl = radius;\r\n        var tr = radius;\r\n        var bl = radius;\r\n        var br = radius;\r\n\r\n        if (typeof radius !== 'number')\r\n        {\r\n            tl = GetFastValue(radius, 'tl', 20);\r\n            tr = GetFastValue(radius, 'tr', 20);\r\n            bl = GetFastValue(radius, 'bl', 20);\r\n            br = GetFastValue(radius, 'br', 20);\r\n        }\r\n\r\n        this.beginPath();\r\n        this.moveTo(x + tl, y);\r\n        this.lineTo(x + width - tr, y);\r\n        this.arc(x + width - tr, y + tr, tr, -MATH_CONST.TAU, 0);\r\n        this.lineTo(x + width, y + height - br);\r\n        this.arc(x + width - br, y + height - br, br, 0, MATH_CONST.TAU);\r\n        this.lineTo(x + bl, y + height);\r\n        this.arc(x + bl, y + height - bl, bl, MATH_CONST.TAU, Math.PI);\r\n        this.lineTo(x, y + tl);\r\n        this.arc(x + tl, y + tl, tl, -Math.PI, -MATH_CONST.TAU);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given point.\r\n     *\r\n     * Draws a square at the given position, 1 pixel in size by default.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPointShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(Phaser.Geom.Point|Phaser.Math.Vector2|object)} point - The point to fill.\r\n     * @param {number} [size=1] - The size of the square to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPointShape: function (point, size)\r\n    {\r\n        return this.fillPoint(point.x, point.y, size);\r\n    },\r\n\r\n    /**\r\n     * Fill a point at the given position.\r\n     *\r\n     * Draws a square at the given position, 1 pixel in size by default.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPoint\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the point.\r\n     * @param {number} y - The y coordinate of the point.\r\n     * @param {number} [size=1] - The size of the square to draw.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPoint: function (x, y, size)\r\n    {\r\n        if (!size || size < 1)\r\n        {\r\n            size = 1;\r\n        }\r\n        else\r\n        {\r\n            x -= (size / 2);\r\n            y -= (size / 2);\r\n        }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.FILL_RECT,\r\n            x, y, size, size\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the given triangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillTriangleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Triangle} triangle - The triangle to fill.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillTriangleShape: function (triangle)\r\n    {\r\n        return this.fillTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\r\n    },\r\n\r\n    /**\r\n     * Stroke the given triangle.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeTriangleShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Triangle} triangle - The triangle to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeTriangleShape: function (triangle)\r\n    {\r\n        return this.strokeTriangle(triangle.x1, triangle.y1, triangle.x2, triangle.y2, triangle.x3, triangle.y3);\r\n    },\r\n\r\n    /**\r\n     * Fill a triangle with the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillTriangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x0 - The x coordinate of the first point.\r\n     * @param {number} y0 - The y coordinate of the first point.\r\n     * @param {number} x1 - The x coordinate of the second point.\r\n     * @param {number} y1 - The y coordinate of the second point.\r\n     * @param {number} x2 - The x coordinate of the third point.\r\n     * @param {number} y2 - The y coordinate of the third point.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillTriangle: function (x0, y0, x1, y1, x2, y2)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.FILL_TRIANGLE,\r\n            x0, y0, x1, y1, x2, y2\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke a triangle with the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeTriangle\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x0 - The x coordinate of the first point.\r\n     * @param {number} y0 - The y coordinate of the first point.\r\n     * @param {number} x1 - The x coordinate of the second point.\r\n     * @param {number} y1 - The y coordinate of the second point.\r\n     * @param {number} x2 - The x coordinate of the third point.\r\n     * @param {number} y2 - The y coordinate of the third point.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeTriangle: function (x0, y0, x1, y1, x2, y2)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.STROKE_TRIANGLE,\r\n            x0, y0, x1, y1, x2, y2\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draw the given line.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeLineShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Line} line - The line to stroke.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeLineShape: function (line)\r\n    {\r\n        return this.lineBetween(line.x1, line.y1, line.x2, line.y2);\r\n    },\r\n\r\n    /**\r\n     * Draw a line between the given points.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineBetween\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x1 - The x coordinate of the start point of the line.\r\n     * @param {number} y1 - The y coordinate of the start point of the line.\r\n     * @param {number} x2 - The x coordinate of the end point of the line.\r\n     * @param {number} y2 - The y coordinate of the end point of the line.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineBetween: function (x1, y1, x2, y2)\r\n    {\r\n        this.beginPath();\r\n        this.moveTo(x1, y1);\r\n        this.lineTo(x2, y2);\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Draw a line from the current drawing position to the given position.\r\n     *\r\n     * Moves the current drawing position to the given position.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#lineTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to draw the line to.\r\n     * @param {number} y - The y coordinate to draw the line to.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    lineTo: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.LINE_TO,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Move the current drawing position to the given position.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#moveTo\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate to move to.\r\n     * @param {number} y - The y coordinate to move to.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    moveTo: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.MOVE_TO,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the shape represented by the given array of points.\r\n     *\r\n     * Pass `closeShape` to automatically close the shape by joining the last to the first point.\r\n     * \r\n     * Pass `closePath` to automatically close the path before it is stroked.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokePoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|Phaser.Geom.Point[])} points - The points to stroke.\r\n     * @param {boolean} [closeShape=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n     * @param {boolean} [closePath=false] - When `true`, the path is closed before being stroked.\r\n     * @param {integer} [endIndex] - The index of `points` to stop drawing at. Defaults to `points.length`.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokePoints: function (points, closeShape, closePath, endIndex)\r\n    {\r\n        if (closeShape === undefined) { closeShape = false; }\r\n        if (closePath === undefined) { closePath = false; }\r\n        if (endIndex === undefined) { endIndex = points.length; }\r\n\r\n        this.beginPath();\r\n\r\n        this.moveTo(points[0].x, points[0].y);\r\n\r\n        for (var i = 1; i < endIndex; i++)\r\n        {\r\n            this.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (closeShape)\r\n        {\r\n            this.lineTo(points[0].x, points[0].y);\r\n        }\r\n\r\n        if (closePath)\r\n        {\r\n            this.closePath();\r\n        }\r\n\r\n        this.strokePath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Fill the shape represented by the given array of points.\r\n     *\r\n     * Pass `closeShape` to automatically close the shape by joining the last to the first point.\r\n     * \r\n     * Pass `closePath` to automatically close the path before it is filled.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillPoints\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(array|Phaser.Geom.Point[])} points - The points to fill.\r\n     * @param {boolean} [closeShape=false] - When `true`, the shape is closed by joining the last point to the first point.\r\n     * @param {boolean} [closePath=false] - When `true`, the path is closed before being stroked.\r\n     * @param {integer} [endIndex] - The index of `points` to stop at. Defaults to `points.length`.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillPoints: function (points, closeShape, closePath, endIndex)\r\n    {\r\n        if (closeShape === undefined) { closeShape = false; }\r\n        if (closePath === undefined) { closePath = false; }\r\n        if (endIndex === undefined) { endIndex = points.length; }\r\n\r\n        this.beginPath();\r\n\r\n        this.moveTo(points[0].x, points[0].y);\r\n\r\n        for (var i = 1; i < endIndex; i++)\r\n        {\r\n            this.lineTo(points[i].x, points[i].y);\r\n        }\r\n\r\n        if (closeShape)\r\n        {\r\n            this.lineTo(points[0].x, points[0].y);\r\n        }\r\n\r\n        if (closePath)\r\n        {\r\n            this.closePath();\r\n        }\r\n\r\n        this.fillPath();\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Stroke the given ellipse.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeEllipseShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to stroke.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeEllipseShape: function (ellipse, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.strokePoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Stroke an ellipse with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#strokeEllipse\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the ellipse.\r\n     * @param {number} y - The y coordinate of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    strokeEllipse: function (x, y, width, height, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var ellipse = new Ellipse(x, y, width, height);\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.strokePoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Fill the given ellipse.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillEllipseShape\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Phaser.Geom.Ellipse} ellipse - The ellipse to fill.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillEllipseShape: function (ellipse, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.fillPoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Fill an ellipse with the given position and size.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#fillEllipse\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the ellipse.\r\n     * @param {number} y - The y coordinate of the center of the ellipse.\r\n     * @param {number} width - The width of the ellipse.\r\n     * @param {number} height - The height of the ellipse.\r\n     * @param {integer} [smoothness=32] - The number of points to draw the ellipse with.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    fillEllipse: function (x, y, width, height, smoothness)\r\n    {\r\n        if (smoothness === undefined) { smoothness = 32; }\r\n\r\n        var ellipse = new Ellipse(x, y, width, height);\r\n\r\n        var points = ellipse.getPoints(smoothness);\r\n\r\n        return this.fillPoints(points, true);\r\n    },\r\n\r\n    /**\r\n     * Draw an arc.\r\n     *\r\n     * This method can be used to create circles, or parts of circles.\r\n     * \r\n     * Make sure you call `beginPath` before starting the arc unless you wish for the arc to automatically\r\n     * close when filled or stroked.\r\n     *\r\n     * Use the optional `overshoot` argument increase the number of iterations that take place when\r\n     * the arc is rendered in WebGL. This is useful if you're drawing an arc with an especially thick line,\r\n     * as it will allow the arc to fully join-up. Try small values at first, i.e. 0.01.\r\n     *\r\n     * Call {@link Phaser.GameObjects.Graphics#fillPath} or {@link Phaser.GameObjects.Graphics#strokePath} after calling\r\n     * this method to draw the arc.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#arc\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x coordinate of the center of the circle.\r\n     * @param {number} y - The y coordinate of the center of the circle.\r\n     * @param {number} radius - The radius of the circle.\r\n     * @param {number} startAngle - The starting angle, in radians.\r\n     * @param {number} endAngle - The ending angle, in radians.\r\n     * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n     * @param {number} [overshoot=0] - This value allows you to increase the segment iterations in WebGL rendering. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly. Use small numbers such as 0.01 to start with and increase as needed.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    arc: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot)\r\n    {\r\n        if (anticlockwise === undefined) { anticlockwise = false; }\r\n        if (overshoot === undefined) { overshoot = 0; }\r\n\r\n        this.commandBuffer.push(\r\n            Commands.ARC,\r\n            x, y, radius, startAngle, endAngle, anticlockwise, overshoot\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Creates a pie-chart slice shape centered at `x`, `y` with the given radius.\r\n     * You must define the start and end angle of the slice.\r\n     *\r\n     * Setting the `anticlockwise` argument to `true` creates a shape similar to Pacman.\r\n     * Setting it to `false` creates a shape like a slice of pie.\r\n     *\r\n     * This method will begin a new path and close the path at the end of it.\r\n     * To display the actual slice you need to call either `strokePath` or `fillPath` after it.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#slice\r\n     * @since 3.4.0\r\n     *\r\n     * @param {number} x - The horizontal center of the slice.\r\n     * @param {number} y - The vertical center of the slice.\r\n     * @param {number} radius - The radius of the slice.\r\n     * @param {number} startAngle - The start angle of the slice, given in radians.\r\n     * @param {number} endAngle - The end angle of the slice, given in radians.\r\n     * @param {boolean} [anticlockwise=false] - Whether the drawing should be anticlockwise or clockwise.\r\n     * @param {number} [overshoot=0] - This value allows you to overshoot the endAngle by this amount. Useful if the arc has a thick stroke and needs to overshoot to join-up cleanly.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    slice: function (x, y, radius, startAngle, endAngle, anticlockwise, overshoot)\r\n    {\r\n        if (anticlockwise === undefined) { anticlockwise = false; }\r\n        if (overshoot === undefined) { overshoot = 0; }\r\n\r\n        this.commandBuffer.push(Commands.BEGIN_PATH);\r\n\r\n        this.commandBuffer.push(Commands.MOVE_TO, x, y);\r\n\r\n        this.commandBuffer.push(Commands.ARC, x, y, radius, startAngle, endAngle, anticlockwise, overshoot);\r\n\r\n        this.commandBuffer.push(Commands.CLOSE_PATH);\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Saves the state of the Graphics by pushing the current state onto a stack.\r\n     *\r\n     * The most recently saved state can then be restored with {@link Phaser.GameObjects.Graphics#restore}.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#save\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    save: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.SAVE\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Restores the most recently saved state of the Graphics by popping from the state stack.\r\n     *\r\n     * Use {@link Phaser.GameObjects.Graphics#save} to save the current state, and call this afterwards to restore that state.\r\n     *\r\n     * If there is no saved state, this command does nothing.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#restore\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    restore: function ()\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.RESTORE\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts a translation command into this Graphics objects command buffer.\r\n     * \r\n     * All objects drawn _after_ calling this method will be translated\r\n     * by the given amount.\r\n     * \r\n     * This does not change the position of the Graphics object itself,\r\n     * only of the objects drawn by it after calling this method.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#translateCanvas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal translation to apply.\r\n     * @param {number} y - The vertical translation to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    translateCanvas: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.TRANSLATE,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts a scale command into this Graphics objects command buffer.\r\n     * \r\n     * All objects drawn _after_ calling this method will be scaled\r\n     * by the given amount.\r\n     * \r\n     * This does not change the scale of the Graphics object itself,\r\n     * only of the objects drawn by it after calling this method.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#scaleCanvas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The horizontal scale to apply.\r\n     * @param {number} y - The vertical scale to apply.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    scaleCanvas: function (x, y)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.SCALE,\r\n            x, y\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Inserts a rotation command into this Graphics objects command buffer.\r\n     * \r\n     * All objects drawn _after_ calling this method will be rotated\r\n     * by the given amount.\r\n     * \r\n     * This does not change the rotation of the Graphics object itself,\r\n     * only of the objects drawn by it after calling this method.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#rotateCanvas\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The rotation angle, in radians.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    rotateCanvas: function (radians)\r\n    {\r\n        this.commandBuffer.push(\r\n            Commands.ROTATE,\r\n            radians\r\n        );\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Clear the command buffer and reset the fill style and line style to their defaults.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#clear\r\n     * @since 3.0.0\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    clear: function ()\r\n    {\r\n        this.commandBuffer.length = 0;\r\n\r\n        if (this.defaultFillColor > -1)\r\n        {\r\n            this.fillStyle(this.defaultFillColor, this.defaultFillAlpha);\r\n        }\r\n\r\n        if (this.defaultStrokeColor > -1)\r\n        {\r\n            this.lineStyle(this.defaultStrokeWidth, this.defaultStrokeColor, this.defaultStrokeAlpha);\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Generate a texture from this Graphics object.\r\n     *\r\n     * If `key` is a string it'll generate a new texture using it and add it into the\r\n     * Texture Manager (assuming no key conflict happens).\r\n     *\r\n     * If `key` is a Canvas it will draw the texture to that canvas context. Note that it will NOT\r\n     * automatically upload it to the GPU in WebGL mode.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#generateTexture\r\n     * @since 3.0.0\r\n     *\r\n     * @param {(string|HTMLCanvasElement)} key - The key to store the texture with in the Texture Manager, or a Canvas to draw to.\r\n     * @param {integer} [width] - The width of the graphics to generate.\r\n     * @param {integer} [height] - The height of the graphics to generate.\r\n     *\r\n     * @return {Phaser.GameObjects.Graphics} This Game Object.\r\n     */\r\n    generateTexture: function (key, width, height)\r\n    {\r\n        var sys = this.scene.sys;\r\n        var renderer = sys.game.renderer;\r\n\r\n        if (width === undefined) { width = sys.scale.width; }\r\n        if (height === undefined) { height = sys.scale.height; }\r\n\r\n        Graphics.TargetCamera.setScene(this.scene);\r\n        Graphics.TargetCamera.setViewport(0, 0, width, height);\r\n        Graphics.TargetCamera.scrollX = this.x;\r\n        Graphics.TargetCamera.scrollY = this.y;\r\n\r\n        var texture;\r\n        var ctx;\r\n\r\n        if (typeof key === 'string')\r\n        {\r\n            if (sys.textures.exists(key))\r\n            {\r\n                //  Key is a string, it DOES exist in the Texture Manager AND is a canvas, so draw to it\r\n\r\n                texture = sys.textures.get(key);\r\n\r\n                var src = texture.getSourceImage();\r\n\r\n                if (src instanceof HTMLCanvasElement)\r\n                {\r\n                    ctx = src.getContext('2d');\r\n                }\r\n            }\r\n            else\r\n            {\r\n                //  Key is a string and doesn't exist in the Texture Manager, so generate and save it\r\n\r\n                texture = sys.textures.createCanvas(key, width, height);\r\n\r\n                ctx = texture.getSourceImage().getContext('2d');\r\n            }\r\n        }\r\n        else if (key instanceof HTMLCanvasElement)\r\n        {\r\n            //  Key is a Canvas, so draw to it\r\n\r\n            ctx = key.getContext('2d');\r\n        }\r\n\r\n        if (ctx)\r\n        {\r\n            // var GraphicsCanvasRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix, renderTargetCtx, allowClip)\r\n            this.renderCanvas(renderer, this, 0, Graphics.TargetCamera, null, ctx, false);\r\n\r\n            if (texture)\r\n            {\r\n                texture.refresh();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Internal destroy handler, called as part of the destroy process.\r\n     *\r\n     * @method Phaser.GameObjects.Graphics#preDestroy\r\n     * @protected\r\n     * @since 3.9.0\r\n     */\r\n    preDestroy: function ()\r\n    {\r\n        this.commandBuffer = [];\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * A Camera used specifically by the Graphics system for rendering to textures.\r\n *\r\n * @name Phaser.GameObjects.Graphics.TargetCamera\r\n * @type {Phaser.Cameras.Scene2D.Camera}\r\n * @since 3.1.0\r\n */\r\nGraphics.TargetCamera = new BaseCamera();\r\n\r\nmodule.exports = Graphics;\r\n"]},"metadata":{},"sourceType":"script"}