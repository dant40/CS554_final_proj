{"ast":null,"code":"/**\r\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Events\r\n*/\nvar Events = {};\nmodule.exports = Events;\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * Subscribes a callback function to the given object's `eventName`.\r\n   * @method on\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {function} callback\r\n   */\n  Events.on = function (object, eventNames, callback) {\n    var names = eventNames.split(' '),\n        name;\n\n    for (var i = 0; i < names.length; i++) {\n      name = names[i];\n      object.events = object.events || {};\n      object.events[name] = object.events[name] || [];\n      object.events[name].push(callback);\n    }\n\n    return callback;\n  };\n  /**\r\n   * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\r\n   * @method off\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {function} callback\r\n   */\n\n\n  Events.off = function (object, eventNames, callback) {\n    if (!eventNames) {\n      object.events = {};\n      return;\n    } // handle Events.off(object, callback)\n\n\n    if (typeof eventNames === 'function') {\n      callback = eventNames;\n      eventNames = Common.keys(object.events).join(' ');\n    }\n\n    var names = eventNames.split(' ');\n\n    for (var i = 0; i < names.length; i++) {\n      var callbacks = object.events[names[i]],\n          newCallbacks = [];\n\n      if (callback && callbacks) {\n        for (var j = 0; j < callbacks.length; j++) {\n          if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n        }\n      }\n\n      object.events[names[i]] = newCallbacks;\n    }\n  };\n  /**\r\n   * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\r\n   * @method trigger\r\n   * @param {} object\r\n   * @param {string} eventNames\r\n   * @param {} event\r\n   */\n\n\n  Events.trigger = function (object, eventNames, event) {\n    var names, name, callbacks, eventClone;\n    var events = object.events;\n\n    if (events && Common.keys(events).length > 0) {\n      if (!event) event = {};\n      names = eventNames.split(' ');\n\n      for (var i = 0; i < names.length; i++) {\n        name = names[i];\n        callbacks = events[name];\n\n        if (callbacks) {\n          eventClone = Common.clone(event, false);\n          eventClone.name = name;\n          eventClone.source = object;\n\n          for (var j = 0; j < callbacks.length; j++) {\n            callbacks[j].apply(object, [eventClone]);\n          }\n        }\n      }\n    }\n  };\n})();","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/core/Events.js"],"names":["Events","module","exports","Common","require","on","object","eventNames","callback","names","split","name","i","length","events","push","off","keys","join","callbacks","newCallbacks","j","trigger","event","eventClone","clone","source","apply"],"mappings":"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","sourcesContent":["/**\r\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\r\n*\r\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\r\n*\r\n* @class Events\r\n*/\r\n\r\nvar Events = {};\r\n\r\nmodule.exports = Events;\r\n\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Subscribes a callback function to the given object's `eventName`.\r\n     * @method on\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.on = function(object, eventNames, callback) {\r\n        var names = eventNames.split(' '),\r\n            name;\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            name = names[i];\r\n            object.events = object.events || {};\r\n            object.events[name] = object.events[name] || [];\r\n            object.events[name].push(callback);\r\n        }\r\n\r\n        return callback;\r\n    };\r\n\r\n    /**\r\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\r\n     * @method off\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {function} callback\r\n     */\r\n    Events.off = function(object, eventNames, callback) {\r\n        if (!eventNames) {\r\n            object.events = {};\r\n            return;\r\n        }\r\n\r\n        // handle Events.off(object, callback)\r\n        if (typeof eventNames === 'function') {\r\n            callback = eventNames;\r\n            eventNames = Common.keys(object.events).join(' ');\r\n        }\r\n\r\n        var names = eventNames.split(' ');\r\n\r\n        for (var i = 0; i < names.length; i++) {\r\n            var callbacks = object.events[names[i]],\r\n                newCallbacks = [];\r\n\r\n            if (callback && callbacks) {\r\n                for (var j = 0; j < callbacks.length; j++) {\r\n                    if (callbacks[j] !== callback)\r\n                        newCallbacks.push(callbacks[j]);\r\n                }\r\n            }\r\n\r\n            object.events[names[i]] = newCallbacks;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\r\n     * @method trigger\r\n     * @param {} object\r\n     * @param {string} eventNames\r\n     * @param {} event\r\n     */\r\n    Events.trigger = function(object, eventNames, event) {\r\n        var names,\r\n            name,\r\n            callbacks,\r\n            eventClone;\r\n\r\n        var events = object.events;\r\n        \r\n        if (events && Common.keys(events).length > 0) {\r\n            if (!event)\r\n                event = {};\r\n\r\n            names = eventNames.split(' ');\r\n\r\n            for (var i = 0; i < names.length; i++) {\r\n                name = names[i];\r\n                callbacks = events[name];\r\n\r\n                if (callbacks) {\r\n                    eventClone = Common.clone(event, false);\r\n                    eventClone.name = name;\r\n                    eventClone.source = object;\r\n\r\n                    for (var j = 0; j < callbacks.length; j++) {\r\n                        callbacks[j].apply(object, [eventClone]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}