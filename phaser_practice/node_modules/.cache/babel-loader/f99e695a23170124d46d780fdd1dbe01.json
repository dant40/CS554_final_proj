{"ast":null,"code":"var Matter = require('../../CustomMain');\n/**\r\n * A coordinate wrapping plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterWrap\r\n */\n\n\nvar MatterWrap = {\n  // plugin meta\n  name: 'matter-wrap',\n  // PLUGIN_NAME\n  version: '0.1.4',\n  // PLUGIN_VERSION\n  for: 'matter-js@^0.14.2',\n  silent: true,\n  // no console log please\n  // installs the plugin where `base` is `Matter`\n  // you should not need to call this directly.\n  install: function (base) {\n    base.after('Engine.update', function () {\n      MatterWrap.Engine.update(this);\n    });\n  },\n  Engine: {\n    /**\r\n     * Updates the engine by wrapping bodies and composites inside `engine.world`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\n    update: function (engine) {\n      var world = engine.world,\n          bodies = Matter.Composite.allBodies(world),\n          composites = Matter.Composite.allComposites(world);\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var body = bodies[i];\n\n        if (body.plugin.wrap) {\n          MatterWrap.Body.wrap(body, body.plugin.wrap);\n        }\n      }\n\n      for (i = 0; i < composites.length; i += 1) {\n        var composite = composites[i];\n\n        if (composite.plugin.wrap) {\n          MatterWrap.Composite.wrap(composite, composite.plugin.wrap);\n        }\n      }\n    }\n  },\n  Bounds: {\n    /**\r\n     * Returns a translation vector that wraps the `objectBounds` inside the `bounds`.\r\n     * @function MatterWrap.Bounds.wrap\r\n     * @param {Matter.Bounds} objectBounds The bounds of the object to wrap inside the bounds.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} A translation vector (only if wrapping is required).\r\n     */\n    wrap: function (objectBounds, bounds) {\n      var x = null,\n          y = null;\n\n      if (typeof bounds.min.x !== 'undefined' && typeof bounds.max.x !== 'undefined') {\n        if (objectBounds.min.x > bounds.max.x) {\n          x = bounds.min.x - objectBounds.max.x;\n        } else if (objectBounds.max.x < bounds.min.x) {\n          x = bounds.max.x - objectBounds.min.x;\n        }\n      }\n\n      if (typeof bounds.min.y !== 'undefined' && typeof bounds.max.y !== 'undefined') {\n        if (objectBounds.min.y > bounds.max.y) {\n          y = bounds.min.y - objectBounds.max.y;\n        } else if (objectBounds.max.y < bounds.min.y) {\n          y = bounds.max.y - objectBounds.min.y;\n        }\n      }\n\n      if (x !== null || y !== null) {\n        return {\n          x: x || 0,\n          y: y || 0\n        };\n      }\n    }\n  },\n  Body: {\n    /**\r\n     * Wraps the `body` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the body will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Body.wrap\r\n     * @param {Matter.Body} body The body to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\n    wrap: function (body, bounds) {\n      var translation = MatterWrap.Bounds.wrap(body.bounds, bounds);\n\n      if (translation) {\n        Matter.Body.translate(body, translation);\n      }\n\n      return translation;\n    }\n  },\n  Composite: {\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies\r\n     * (not accounting for constraints).\r\n     * @function MatterWrap.Composite.bounds\r\n     * @param {Matter.Composite} composite The composite.\r\n     * @returns {Matter.Bounds} The composite bounds.\r\n     */\n    bounds: function (composite) {\n      var bodies = Matter.Composite.allBodies(composite),\n          vertices = [];\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var body = bodies[i];\n        vertices.push(body.bounds.min, body.bounds.max);\n      }\n\n      return Matter.Bounds.create(vertices);\n    },\n\n    /**\r\n     * Wraps the `composite` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the composite will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Composite.wrap\r\n     * @param {Matter.Composite} composite The composite to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the composite inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\n    wrap: function (composite, bounds) {\n      var translation = MatterWrap.Bounds.wrap(MatterWrap.Composite.bounds(composite), bounds);\n\n      if (translation) {\n        Matter.Composite.translate(composite, translation);\n      }\n\n      return translation;\n    }\n  }\n};\nmodule.exports = MatterWrap;\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\n\n/**\r\n * This plugin adds a new property `body.plugin.wrap` to instances of `Matter.Body`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} body.plugin.wrap\r\n * @memberof Matter.Body\r\n */\n\n/**\r\n * This plugin adds a new property `composite.plugin.wrap` to instances of `Matter.Composite`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} composite.plugin.wrap\r\n * @memberof Matter.Composite\r\n */","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/plugins/MatterWrap.js"],"names":["Matter","require","MatterWrap","name","version","for","silent","install","base","after","Engine","update","engine","world","bodies","Composite","allBodies","composites","allComposites","i","length","body","plugin","wrap","Body","composite","Bounds","objectBounds","bounds","x","y","min","max","translation","translate","vertices","push","create","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAD,CAApB;AAEA;;;;;;;AAKA,IAAIC,UAAU,GAAG;AACf;AACAC,EAAAA,IAAI,EAAE,aAFS;AAEM;AACrBC,EAAAA,OAAO,EAAE,OAHM;AAGG;AAClBC,EAAAA,GAAG,EAAE,mBAJU;AAKfC,EAAAA,MAAM,EAAE,IALO;AAKD;AAEd;AACA;AACAC,EAAAA,OAAO,EAAE,UAASC,IAAT,EAAe;AACtBA,IAAAA,IAAI,CAACC,KAAL,CAAW,eAAX,EAA4B,YAAW;AACrCP,MAAAA,UAAU,CAACQ,MAAX,CAAkBC,MAAlB,CAAyB,IAAzB;AACD,KAFD;AAGD,GAbc;AAefD,EAAAA,MAAM,EAAE;AACN;;;;;;;AAOAC,IAAAA,MAAM,EAAE,UAASC,MAAT,EAAiB;AACvB,UAAIC,KAAK,GAAGD,MAAM,CAACC,KAAnB;AAAA,UACEC,MAAM,GAAGd,MAAM,CAACe,SAAP,CAAiBC,SAAjB,CAA2BH,KAA3B,CADX;AAAA,UAEEI,UAAU,GAAGjB,MAAM,CAACe,SAAP,CAAiBG,aAAjB,CAA+BL,KAA/B,CAFf;;AAIA,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACzC,YAAIE,IAAI,GAAGP,MAAM,CAACK,CAAD,CAAjB;;AAEA,YAAIE,IAAI,CAACC,MAAL,CAAYC,IAAhB,EAAsB;AACpBrB,UAAAA,UAAU,CAACsB,IAAX,CAAgBD,IAAhB,CAAqBF,IAArB,EAA2BA,IAAI,CAACC,MAAL,CAAYC,IAAvC;AACD;AACF;;AAED,WAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,UAAU,CAACG,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACzC,YAAIM,SAAS,GAAGR,UAAU,CAACE,CAAD,CAA1B;;AAEA,YAAIM,SAAS,CAACH,MAAV,CAAiBC,IAArB,EAA2B;AACzBrB,UAAAA,UAAU,CAACa,SAAX,CAAqBQ,IAArB,CAA0BE,SAA1B,EAAqCA,SAAS,CAACH,MAAV,CAAiBC,IAAtD;AACD;AACF;AACF;AA5BK,GAfO;AA8CfG,EAAAA,MAAM,EAAE;AACN;;;;;;;AAOAH,IAAAA,IAAI,EAAE,UAASI,YAAT,EAAuBC,MAAvB,EAA+B;AACnC,UAAIC,CAAC,GAAG,IAAR;AAAA,UACEC,CAAC,GAAG,IADN;;AAGA,UAAI,OAAOF,MAAM,CAACG,GAAP,CAAWF,CAAlB,KAAwB,WAAxB,IAAuC,OAAOD,MAAM,CAACI,GAAP,CAAWH,CAAlB,KAAwB,WAAnE,EAAgF;AAC9E,YAAIF,YAAY,CAACI,GAAb,CAAiBF,CAAjB,GAAqBD,MAAM,CAACI,GAAP,CAAWH,CAApC,EAAuC;AACrCA,UAAAA,CAAC,GAAGD,MAAM,CAACG,GAAP,CAAWF,CAAX,GAAeF,YAAY,CAACK,GAAb,CAAiBH,CAApC;AACD,SAFD,MAEO,IAAIF,YAAY,CAACK,GAAb,CAAiBH,CAAjB,GAAqBD,MAAM,CAACG,GAAP,CAAWF,CAApC,EAAuC;AAC5CA,UAAAA,CAAC,GAAGD,MAAM,CAACI,GAAP,CAAWH,CAAX,GAAeF,YAAY,CAACI,GAAb,CAAiBF,CAApC;AACD;AACF;;AAED,UAAI,OAAOD,MAAM,CAACG,GAAP,CAAWD,CAAlB,KAAwB,WAAxB,IAAuC,OAAOF,MAAM,CAACI,GAAP,CAAWF,CAAlB,KAAwB,WAAnE,EAAgF;AAC9E,YAAIH,YAAY,CAACI,GAAb,CAAiBD,CAAjB,GAAqBF,MAAM,CAACI,GAAP,CAAWF,CAApC,EAAuC;AACrCA,UAAAA,CAAC,GAAGF,MAAM,CAACG,GAAP,CAAWD,CAAX,GAAeH,YAAY,CAACK,GAAb,CAAiBF,CAApC;AACD,SAFD,MAEO,IAAIH,YAAY,CAACK,GAAb,CAAiBF,CAAjB,GAAqBF,MAAM,CAACG,GAAP,CAAWD,CAApC,EAAuC;AAC5CA,UAAAA,CAAC,GAAGF,MAAM,CAACI,GAAP,CAAWF,CAAX,GAAeH,YAAY,CAACI,GAAb,CAAiBD,CAApC;AACD;AACF;;AAED,UAAID,CAAC,KAAK,IAAN,IAAcC,CAAC,KAAK,IAAxB,EAA8B;AAC5B,eAAO;AACLD,UAAAA,CAAC,EAAEA,CAAC,IAAI,CADH;AAELC,UAAAA,CAAC,EAAEA,CAAC,IAAI;AAFH,SAAP;AAID;AACF;AAlCK,GA9CO;AAmFfN,EAAAA,IAAI,EAAE;AACJ;;;;;;;;;;AAUAD,IAAAA,IAAI,EAAE,UAASF,IAAT,EAAeO,MAAf,EAAuB;AAC3B,UAAIK,WAAW,GAAG/B,UAAU,CAACwB,MAAX,CAAkBH,IAAlB,CAAuBF,IAAI,CAACO,MAA5B,EAAoCA,MAApC,CAAlB;;AAEA,UAAIK,WAAJ,EAAiB;AACfjC,QAAAA,MAAM,CAACwB,IAAP,CAAYU,SAAZ,CAAsBb,IAAtB,EAA4BY,WAA5B;AACD;;AAED,aAAOA,WAAP;AACD;AAnBG,GAnFS;AAyGflB,EAAAA,SAAS,EAAE;AACT;;;;;;;AAOAa,IAAAA,MAAM,EAAE,UAASH,SAAT,EAAoB;AAC1B,UAAIX,MAAM,GAAGd,MAAM,CAACe,SAAP,CAAiBC,SAAjB,CAA2BS,SAA3B,CAAb;AAAA,UACEU,QAAQ,GAAG,EADb;;AAGA,WAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACzC,YAAIE,IAAI,GAAGP,MAAM,CAACK,CAAD,CAAjB;AACAgB,QAAAA,QAAQ,CAACC,IAAT,CAAcf,IAAI,CAACO,MAAL,CAAYG,GAA1B,EAA+BV,IAAI,CAACO,MAAL,CAAYI,GAA3C;AACD;;AAED,aAAOhC,MAAM,CAAC0B,MAAP,CAAcW,MAAd,CAAqBF,QAArB,CAAP;AACD,KAlBQ;;AAoBT;;;;;;;;;;AAUAZ,IAAAA,IAAI,EAAE,UAASE,SAAT,EAAoBG,MAApB,EAA4B;AAChC,UAAIK,WAAW,GAAG/B,UAAU,CAACwB,MAAX,CAAkBH,IAAlB,CAChBrB,UAAU,CAACa,SAAX,CAAqBa,MAArB,CAA4BH,SAA5B,CADgB,EAEhBG,MAFgB,CAAlB;;AAKA,UAAIK,WAAJ,EAAiB;AACfjC,QAAAA,MAAM,CAACe,SAAP,CAAiBmB,SAAjB,CAA2BT,SAA3B,EAAsCQ,WAAtC;AACD;;AAED,aAAOA,WAAP;AACD;AAzCQ;AAzGI,CAAjB;AAsJAK,MAAM,CAACC,OAAP,GAAiBrC,UAAjB;AAEA;;;;;AAKA;;;;;;;AAOA","sourcesContent":["var Matter = require('../../CustomMain');\r\n\r\n/**\r\n * A coordinate wrapping plugin for matter.js.\r\n * See the readme for usage and examples.\r\n * @module MatterWrap\r\n */\r\nvar MatterWrap = {\r\n  // plugin meta\r\n  name: 'matter-wrap', // PLUGIN_NAME\r\n  version: '0.1.4', // PLUGIN_VERSION\r\n  for: 'matter-js@^0.14.2',\r\n  silent: true, // no console log please\r\n\r\n  // installs the plugin where `base` is `Matter`\r\n  // you should not need to call this directly.\r\n  install: function(base) {\r\n    base.after('Engine.update', function() {\r\n      MatterWrap.Engine.update(this);\r\n    });\r\n  },\r\n\r\n  Engine: {\r\n    /**\r\n     * Updates the engine by wrapping bodies and composites inside `engine.world`.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Engine.update\r\n     * @param {Matter.Engine} engine The engine to update.\r\n     * @returns {void} No return value.\r\n     */\r\n    update: function(engine) {\r\n      var world = engine.world,\r\n        bodies = Matter.Composite.allBodies(world),\r\n        composites = Matter.Composite.allComposites(world);\r\n\r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var body = bodies[i];\r\n\r\n        if (body.plugin.wrap) {\r\n          MatterWrap.Body.wrap(body, body.plugin.wrap);\r\n        }\r\n      }\r\n\r\n      for (i = 0; i < composites.length; i += 1) {\r\n        var composite = composites[i];\r\n\r\n        if (composite.plugin.wrap) {\r\n          MatterWrap.Composite.wrap(composite, composite.plugin.wrap);\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  Bounds: {\r\n    /**\r\n     * Returns a translation vector that wraps the `objectBounds` inside the `bounds`.\r\n     * @function MatterWrap.Bounds.wrap\r\n     * @param {Matter.Bounds} objectBounds The bounds of the object to wrap inside the bounds.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} A translation vector (only if wrapping is required).\r\n     */\r\n    wrap: function(objectBounds, bounds) {\r\n      var x = null,\r\n        y = null;\r\n\r\n      if (typeof bounds.min.x !== 'undefined' && typeof bounds.max.x !== 'undefined') {\r\n        if (objectBounds.min.x > bounds.max.x) {\r\n          x = bounds.min.x - objectBounds.max.x;\r\n        } else if (objectBounds.max.x < bounds.min.x) {\r\n          x = bounds.max.x - objectBounds.min.x;\r\n        }\r\n      }\r\n\r\n      if (typeof bounds.min.y !== 'undefined' && typeof bounds.max.y !== 'undefined') {\r\n        if (objectBounds.min.y > bounds.max.y) {\r\n          y = bounds.min.y - objectBounds.max.y;\r\n        } else if (objectBounds.max.y < bounds.min.y) {\r\n          y = bounds.max.y - objectBounds.min.y;\r\n        }\r\n      }\r\n\r\n      if (x !== null || y !== null) {\r\n        return {\r\n          x: x || 0,\r\n          y: y || 0\r\n        };\r\n      }\r\n    }\r\n  },\r\n\r\n  Body: {\r\n    /**\r\n     * Wraps the `body` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the body will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Body.wrap\r\n     * @param {Matter.Body} body The body to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the body inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\r\n    wrap: function(body, bounds) {\r\n      var translation = MatterWrap.Bounds.wrap(body.bounds, bounds);\r\n\r\n      if (translation) {\r\n        Matter.Body.translate(body, translation);\r\n      }\r\n\r\n      return translation;\r\n    }\r\n  },\r\n\r\n  Composite: {\r\n    /**\r\n     * Returns the union of the bounds of all of the composite's bodies\r\n     * (not accounting for constraints).\r\n     * @function MatterWrap.Composite.bounds\r\n     * @param {Matter.Composite} composite The composite.\r\n     * @returns {Matter.Bounds} The composite bounds.\r\n     */\r\n    bounds: function(composite) {\r\n      var bodies = Matter.Composite.allBodies(composite),\r\n        vertices = [];\r\n      \r\n      for (var i = 0; i < bodies.length; i += 1) {\r\n        var body = bodies[i];\r\n        vertices.push(body.bounds.min, body.bounds.max);\r\n      }\r\n\r\n      return Matter.Bounds.create(vertices);\r\n    },\r\n\r\n    /**\r\n     * Wraps the `composite` position such that it always stays within the given bounds. \r\n     * Upon crossing a boundary the composite will appear on the opposite side of the bounds, \r\n     * while maintaining its velocity.\r\n     * This is called automatically by the plugin.\r\n     * @function MatterWrap.Composite.wrap\r\n     * @param {Matter.Composite} composite The composite to wrap.\r\n     * @param {Matter.Bounds} bounds The bounds to wrap the composite inside.\r\n     * @returns {?Matter.Vector} The translation vector that was applied (only if wrapping was required).\r\n     */\r\n    wrap: function(composite, bounds) {\r\n      var translation = MatterWrap.Bounds.wrap(\r\n        MatterWrap.Composite.bounds(composite), \r\n        bounds\r\n      );\r\n\r\n      if (translation) {\r\n        Matter.Composite.translate(composite, translation);\r\n      }\r\n\r\n      return translation;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = MatterWrap;\r\n\r\n/**\r\n * @namespace Matter.Body\r\n * @see http://brm.io/matter-js/docs/classes/Body.html\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `body.plugin.wrap` to instances of `Matter.Body`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} body.plugin.wrap\r\n * @memberof Matter.Body\r\n */\r\n\r\n/**\r\n * This plugin adds a new property `composite.plugin.wrap` to instances of `Matter.Composite`.  \r\n * This is a `Matter.Bounds` instance that specifies the wrapping region.\r\n * @property {Matter.Bounds} composite.plugin.wrap\r\n * @memberof Matter.Composite\r\n */"]},"metadata":{},"sourceType":"script"}