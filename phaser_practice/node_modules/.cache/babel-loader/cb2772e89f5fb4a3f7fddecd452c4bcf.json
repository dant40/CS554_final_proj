{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../utils/Class');\n\nvar EventEmitter = require('eventemitter3');\n\nvar Events = require('./events');\n/**\r\n * @classdesc\r\n * A Process Queue maintains three internal lists.\r\n * \r\n * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n * The `active` list is a selection of items which are considered active and should be updated.\r\n * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n *\r\n * When new items are added to a Process Queue they are put in the pending list, rather than being added\r\n * immediately the active list. Equally, items that are removed are put into the destroy list, rather than\r\n * being destroyed immediately. This allows the Process Queue to carefully process each item at a specific, fixed\r\n * time, rather than at the time of the request from the API.\r\n *\r\n * @class ProcessQueue\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n */\n\n\nvar ProcessQueue = new Class({\n  Extends: EventEmitter,\n  initialize: function ProcessQueue() {\n    EventEmitter.call(this);\n    /**\r\n     * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_pending\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._pending = [];\n    /**\r\n     * The `active` list is a selection of items which are considered active and should be updated.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_active\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._active = [];\n    /**\r\n     * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n     *\r\n     * @genericUse {T[]} - [$type]\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_destroy\r\n     * @type {Array.<*>}\r\n     * @private\r\n     * @default []\r\n     * @since 3.0.0\r\n     */\n\n    this._destroy = [];\n    /**\r\n     * The total number of items awaiting processing.\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#_toProcess\r\n     * @type {integer}\r\n     * @private\r\n     * @default 0\r\n     * @since 3.0.0\r\n     */\n\n    this._toProcess = 0;\n  },\n\n  /**\r\n   * Adds a new item to the Process Queue.\r\n   * \r\n   * The item is added to the pending list and made active in the next update.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#add\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [item]\r\n   * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n   *\r\n   * @param {*} item - The item to add to the queue.\r\n   *\r\n   * @return {*} The item that was added.\r\n   */\n  add: function (item) {\n    this._pending.push(item);\n\n    this._toProcess++;\n    return item;\n  },\n\n  /**\r\n   * Removes an item from the Process Queue.\r\n   * \r\n   * The item is added to the pending destroy and fully removed in the next update.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#remove\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T} - [item]\r\n   * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n   *\r\n   * @param {*} item - The item to be removed from the queue.\r\n   *\r\n   * @return {*} The item that was removed.\r\n   */\n  remove: function (item) {\n    this._destroy.push(item);\n\n    this._toProcess++;\n    return item;\n  },\n\n  /**\r\n   * Removes all active items from this Process Queue.\r\n   * \r\n   * All the items are marked as 'pending destroy' and fully removed in the next update.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#removeAll\r\n   * @since 3.20.0\r\n   *\r\n   * @return {this} This Process Queue object.\r\n   */\n  removeAll: function () {\n    var list = this._active;\n    var destroy = this._destroy;\n    var i = list.length;\n\n    while (i--) {\n      destroy.push(list[i]);\n      this._toProcess++;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Update this queue. First it will process any items awaiting destruction, and remove them.\r\n   * \r\n   * Then it will check to see if there are any items pending insertion, and move them to an\r\n   * active state. Finally, it will return a list of active items for further processing.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#update\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} A list of active items.\r\n   */\n  update: function () {\n    if (this._toProcess === 0) {\n      //  Quick bail\n      return this._active;\n    }\n\n    var list = this._destroy;\n    var active = this._active;\n    var i;\n    var item; //  Clear the 'destroy' list\n\n    for (i = 0; i < list.length; i++) {\n      item = list[i]; //  Remove from the 'active' array\n\n      var idx = active.indexOf(item);\n\n      if (idx !== -1) {\n        active.splice(idx, 1);\n        this.emit(Events.REMOVE, item);\n      }\n    }\n\n    list.length = 0; //  Process the pending addition list\n    //  This stops callbacks and out of sync events from populating the active array mid-way during an update\n\n    list = this._pending;\n\n    for (i = 0; i < list.length; i++) {\n      item = list[i];\n\n      this._active.push(item);\n\n      this.emit(Events.ADD, item);\n    }\n\n    list.length = 0;\n    this._toProcess = 0; //  The owner of this queue can now safely do whatever it needs to with the active list\n\n    return this._active;\n  },\n\n  /**\r\n   * Returns the current list of active items.\r\n   * \r\n   * This method returns a reference to the active list array, not a copy of it.\r\n   * Therefore, be careful to not modify this array outside of the ProcessQueue.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#getActive\r\n   * @since 3.0.0\r\n   *\r\n   * @genericUse {T[]} - [$return]\r\n   *\r\n   * @return {Array.<*>} A list of active items.\r\n   */\n  getActive: function () {\n    return this._active;\n  },\n\n  /**\r\n   * The number of entries in the active list.\r\n   *\r\n   * @name Phaser.Structs.ProcessQueue#length\r\n   * @type {integer}\r\n   * @readonly\r\n   * @since 3.20.0\r\n   */\n  length: {\n    get: function () {\n      return this._active.length;\n    }\n  },\n\n  /**\r\n   * Immediately destroys this process queue, clearing all of its internal arrays and resetting the process totals.\r\n   *\r\n   * @method Phaser.Structs.ProcessQueue#destroy\r\n   * @since 3.0.0\r\n   */\n  destroy: function () {\n    this._toProcess = 0;\n    this._pending = [];\n    this._active = [];\n    this._destroy = [];\n  }\n});\nmodule.exports = ProcessQueue;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/structs/ProcessQueue.js"],"names":["Class","require","EventEmitter","Events","ProcessQueue","Extends","initialize","call","_pending","_active","_destroy","_toProcess","add","item","push","remove","removeAll","list","destroy","i","length","update","active","idx","indexOf","splice","emit","REMOVE","ADD","getActive","get","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../utils/Class');\r\nvar EventEmitter = require('eventemitter3');\r\nvar Events = require('./events');\r\n\r\n/**\r\n * @classdesc\r\n * A Process Queue maintains three internal lists.\r\n * \r\n * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n * The `active` list is a selection of items which are considered active and should be updated.\r\n * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n *\r\n * When new items are added to a Process Queue they are put in the pending list, rather than being added\r\n * immediately the active list. Equally, items that are removed are put into the destroy list, rather than\r\n * being destroyed immediately. This allows the Process Queue to carefully process each item at a specific, fixed\r\n * time, rather than at the time of the request from the API.\r\n *\r\n * @class ProcessQueue\r\n * @extends Phaser.Events.EventEmitter\r\n * @memberof Phaser.Structs\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @generic T\r\n */\r\nvar ProcessQueue = new Class({\r\n\r\n    Extends: EventEmitter,\r\n\r\n    initialize:\r\n\r\n    function ProcessQueue ()\r\n    {\r\n        EventEmitter.call(this);\r\n\r\n        /**\r\n         * The `pending` list is a selection of items which are due to be made 'active' in the next update.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_pending\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._pending = [];\r\n\r\n        /**\r\n         * The `active` list is a selection of items which are considered active and should be updated.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_active\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._active = [];\r\n\r\n        /**\r\n         * The `destroy` list is a selection of items that were active and are awaiting being destroyed in the next update.\r\n         *\r\n         * @genericUse {T[]} - [$type]\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_destroy\r\n         * @type {Array.<*>}\r\n         * @private\r\n         * @default []\r\n         * @since 3.0.0\r\n         */\r\n        this._destroy = [];\r\n\r\n        /**\r\n         * The total number of items awaiting processing.\r\n         *\r\n         * @name Phaser.Structs.ProcessQueue#_toProcess\r\n         * @type {integer}\r\n         * @private\r\n         * @default 0\r\n         * @since 3.0.0\r\n         */\r\n        this._toProcess = 0;\r\n    },\r\n\r\n    /**\r\n     * Adds a new item to the Process Queue.\r\n     * \r\n     * The item is added to the pending list and made active in the next update.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#add\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [item]\r\n     * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n     *\r\n     * @param {*} item - The item to add to the queue.\r\n     *\r\n     * @return {*} The item that was added.\r\n     */\r\n    add: function (item)\r\n    {\r\n        this._pending.push(item);\r\n\r\n        this._toProcess++;\r\n\r\n        return item;\r\n    },\r\n\r\n    /**\r\n     * Removes an item from the Process Queue.\r\n     * \r\n     * The item is added to the pending destroy and fully removed in the next update.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#remove\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T} - [item]\r\n     * @genericUse {Phaser.Structs.ProcessQueue.<T>} - [$return]\r\n     *\r\n     * @param {*} item - The item to be removed from the queue.\r\n     *\r\n     * @return {*} The item that was removed.\r\n     */\r\n    remove: function (item)\r\n    {\r\n        this._destroy.push(item);\r\n\r\n        this._toProcess++;\r\n\r\n        return item;\r\n    },\r\n\r\n    /**\r\n     * Removes all active items from this Process Queue.\r\n     * \r\n     * All the items are marked as 'pending destroy' and fully removed in the next update.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#removeAll\r\n     * @since 3.20.0\r\n     *\r\n     * @return {this} This Process Queue object.\r\n     */\r\n    removeAll: function ()\r\n    {\r\n        var list = this._active;\r\n        var destroy = this._destroy;\r\n        var i = list.length;\r\n\r\n        while (i--)\r\n        {\r\n            destroy.push(list[i]);\r\n\r\n            this._toProcess++;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Update this queue. First it will process any items awaiting destruction, and remove them.\r\n     * \r\n     * Then it will check to see if there are any items pending insertion, and move them to an\r\n     * active state. Finally, it will return a list of active items for further processing.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#update\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} A list of active items.\r\n     */\r\n    update: function ()\r\n    {\r\n        if (this._toProcess === 0)\r\n        {\r\n            //  Quick bail\r\n            return this._active;\r\n        }\r\n\r\n        var list = this._destroy;\r\n        var active = this._active;\r\n        var i;\r\n        var item;\r\n\r\n        //  Clear the 'destroy' list\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            item = list[i];\r\n\r\n            //  Remove from the 'active' array\r\n            var idx = active.indexOf(item);\r\n\r\n            if (idx !== -1)\r\n            {\r\n                active.splice(idx, 1);\r\n\r\n                this.emit(Events.REMOVE, item);\r\n            }\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        //  Process the pending addition list\r\n        //  This stops callbacks and out of sync events from populating the active array mid-way during an update\r\n\r\n        list = this._pending;\r\n\r\n        for (i = 0; i < list.length; i++)\r\n        {\r\n            item = list[i];\r\n\r\n            this._active.push(item);\r\n\r\n            this.emit(Events.ADD, item);\r\n        }\r\n\r\n        list.length = 0;\r\n\r\n        this._toProcess = 0;\r\n\r\n        //  The owner of this queue can now safely do whatever it needs to with the active list\r\n        return this._active;\r\n    },\r\n\r\n    /**\r\n     * Returns the current list of active items.\r\n     * \r\n     * This method returns a reference to the active list array, not a copy of it.\r\n     * Therefore, be careful to not modify this array outside of the ProcessQueue.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#getActive\r\n     * @since 3.0.0\r\n     *\r\n     * @genericUse {T[]} - [$return]\r\n     *\r\n     * @return {Array.<*>} A list of active items.\r\n     */\r\n    getActive: function ()\r\n    {\r\n        return this._active;\r\n    },\r\n\r\n    /**\r\n     * The number of entries in the active list.\r\n     *\r\n     * @name Phaser.Structs.ProcessQueue#length\r\n     * @type {integer}\r\n     * @readonly\r\n     * @since 3.20.0\r\n     */\r\n    length: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._active.length;\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * Immediately destroys this process queue, clearing all of its internal arrays and resetting the process totals.\r\n     *\r\n     * @method Phaser.Structs.ProcessQueue#destroy\r\n     * @since 3.0.0\r\n     */\r\n    destroy: function ()\r\n    {\r\n        this._toProcess = 0;\r\n\r\n        this._pending = [];\r\n        this._active = [];\r\n        this._destroy = [];\r\n    }\r\n\r\n});\r\n\r\nmodule.exports = ProcessQueue;\r\n"]},"metadata":{},"sourceType":"script"}