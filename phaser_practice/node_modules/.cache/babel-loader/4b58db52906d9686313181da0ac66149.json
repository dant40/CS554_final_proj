{"ast":null,"code":"// @if DEBUG\n\n/**\r\n* _Internal Class_, not generally used outside of the engine's internals.\r\n*\r\n*/\nvar Metrics = {};\nmodule.exports = Metrics;\n\nvar Composite = require('../body/Composite');\n\nvar Common = require('./Common');\n\n(function () {\n  /**\r\n   * Creates a new metrics.\r\n   * @method create\r\n   * @private\r\n   * @return {metrics} A new metrics\r\n   */\n  Metrics.create = function (options) {\n    var defaults = {\n      extended: false,\n      narrowDetections: 0,\n      narrowphaseTests: 0,\n      narrowReuse: 0,\n      narrowReuseCount: 0,\n      midphaseTests: 0,\n      broadphaseTests: 0,\n      narrowEff: 0.0001,\n      midEff: 0.0001,\n      broadEff: 0.0001,\n      collisions: 0,\n      buckets: 0,\n      bodies: 0,\n      pairs: 0\n    };\n    return Common.extend(defaults, false, options);\n  };\n  /**\r\n   * Resets metrics.\r\n   * @method reset\r\n   * @private\r\n   * @param {metrics} metrics\r\n   */\n\n\n  Metrics.reset = function (metrics) {\n    if (metrics.extended) {\n      metrics.narrowDetections = 0;\n      metrics.narrowphaseTests = 0;\n      metrics.narrowReuse = 0;\n      metrics.narrowReuseCount = 0;\n      metrics.midphaseTests = 0;\n      metrics.broadphaseTests = 0;\n      metrics.narrowEff = 0;\n      metrics.midEff = 0;\n      metrics.broadEff = 0;\n      metrics.collisions = 0;\n      metrics.buckets = 0;\n      metrics.pairs = 0;\n      metrics.bodies = 0;\n    }\n  };\n  /**\r\n   * Updates metrics.\r\n   * @method update\r\n   * @private\r\n   * @param {metrics} metrics\r\n   * @param {engine} engine\r\n   */\n\n\n  Metrics.update = function (metrics, engine) {\n    if (metrics.extended) {\n      var world = engine.world,\n          bodies = Composite.allBodies(world);\n      metrics.collisions = metrics.narrowDetections;\n      metrics.pairs = engine.pairs.list.length;\n      metrics.bodies = bodies.length;\n      metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\n      metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\n      metrics.broadEff = (1 - metrics.broadphaseTests / (bodies.length || 1)).toFixed(2);\n      metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2); //var broadphase = engine.broadphase[engine.broadphase.current];\n      //if (broadphase.instance)\n      //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\n    }\n  };\n})(); // @endif","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/physics/matter-js/lib/core/Metrics.js"],"names":["Metrics","module","exports","Composite","require","Common","create","options","defaults","extended","narrowDetections","narrowphaseTests","narrowReuse","narrowReuseCount","midphaseTests","broadphaseTests","narrowEff","midEff","broadEff","collisions","buckets","bodies","pairs","extend","reset","metrics","update","engine","world","allBodies","list","length","toFixed"],"mappings":"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","sourcesContent":["// @if DEBUG\r\n/**\r\n* _Internal Class_, not generally used outside of the engine's internals.\r\n*\r\n*/\r\n\r\nvar Metrics = {};\r\n\r\nmodule.exports = Metrics;\r\n\r\nvar Composite = require('../body/Composite');\r\nvar Common = require('./Common');\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Creates a new metrics.\r\n     * @method create\r\n     * @private\r\n     * @return {metrics} A new metrics\r\n     */\r\n    Metrics.create = function(options) {\r\n        var defaults = {\r\n            extended: false,\r\n            narrowDetections: 0,\r\n            narrowphaseTests: 0,\r\n            narrowReuse: 0,\r\n            narrowReuseCount: 0,\r\n            midphaseTests: 0,\r\n            broadphaseTests: 0,\r\n            narrowEff: 0.0001,\r\n            midEff: 0.0001,\r\n            broadEff: 0.0001,\r\n            collisions: 0,\r\n            buckets: 0,\r\n            bodies: 0,\r\n            pairs: 0\r\n        };\r\n\r\n        return Common.extend(defaults, false, options);\r\n    };\r\n\r\n    /**\r\n     * Resets metrics.\r\n     * @method reset\r\n     * @private\r\n     * @param {metrics} metrics\r\n     */\r\n    Metrics.reset = function(metrics) {\r\n        if (metrics.extended) {\r\n            metrics.narrowDetections = 0;\r\n            metrics.narrowphaseTests = 0;\r\n            metrics.narrowReuse = 0;\r\n            metrics.narrowReuseCount = 0;\r\n            metrics.midphaseTests = 0;\r\n            metrics.broadphaseTests = 0;\r\n            metrics.narrowEff = 0;\r\n            metrics.midEff = 0;\r\n            metrics.broadEff = 0;\r\n            metrics.collisions = 0;\r\n            metrics.buckets = 0;\r\n            metrics.pairs = 0;\r\n            metrics.bodies = 0;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Updates metrics.\r\n     * @method update\r\n     * @private\r\n     * @param {metrics} metrics\r\n     * @param {engine} engine\r\n     */\r\n    Metrics.update = function(metrics, engine) {\r\n        if (metrics.extended) {\r\n            var world = engine.world,\r\n                bodies = Composite.allBodies(world);\r\n\r\n            metrics.collisions = metrics.narrowDetections;\r\n            metrics.pairs = engine.pairs.list.length;\r\n            metrics.bodies = bodies.length;\r\n            metrics.midEff = (metrics.narrowDetections / (metrics.midphaseTests || 1)).toFixed(2);\r\n            metrics.narrowEff = (metrics.narrowDetections / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            metrics.broadEff = (1 - (metrics.broadphaseTests / (bodies.length || 1))).toFixed(2);\r\n            metrics.narrowReuse = (metrics.narrowReuseCount / (metrics.narrowphaseTests || 1)).toFixed(2);\r\n            //var broadphase = engine.broadphase[engine.broadphase.current];\r\n            //if (broadphase.instance)\r\n            //    metrics.buckets = Common.keys(broadphase.instance.buckets).length;\r\n        }\r\n    };\r\n\r\n})();\r\n// @endif\r\n"]},"metadata":{},"sourceType":"script"}