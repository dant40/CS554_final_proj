{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single Image File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#image method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#image.\r\n *\r\n * @class ImageFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ImageFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {Phaser.Types.Loader.FileTypes.ImageFrameConfig} [frameConfig] - The frame configuration object. Only provided for, and used by, Sprite Sheets.\r\n */\n\n\nvar ImageFile = new Class({\n  Extends: File,\n  initialize: function ImageFile(loader, key, url, xhrSettings, frameConfig) {\n    var extension = 'png';\n    var normalMapURL;\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      normalMapURL = GetFastValue(config, 'normalMap');\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n      frameConfig = GetFastValue(config, 'frameConfig');\n    }\n\n    if (Array.isArray(url)) {\n      normalMapURL = url[1];\n      url = url[0];\n    }\n\n    var fileConfig = {\n      type: 'image',\n      cache: loader.textureManager,\n      extension: extension,\n      responseType: 'blob',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings,\n      config: frameConfig\n    };\n    File.call(this, loader, fileConfig); //  Do we have a normal map to load as well?\n\n    if (normalMapURL) {\n      var normalMap = new ImageFile(loader, this.key, normalMapURL, xhrSettings, frameConfig);\n      normalMap.type = 'normalMap';\n      this.setLink(normalMap);\n      loader.addFile(normalMap);\n    }\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.ImageFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n    this.data = new Image();\n    this.data.crossOrigin = this.crossOrigin;\n\n    var _this = this;\n\n    this.data.onload = function () {\n      File.revokeObjectURL(_this.data);\n\n      _this.onProcessComplete();\n    };\n\n    this.data.onerror = function () {\n      File.revokeObjectURL(_this.data);\n\n      _this.onProcessError();\n    };\n\n    File.createObjectURL(this.data, this.xhrLoader.response, 'image/png');\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.ImageFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function () {\n    var texture;\n    var linkFile = this.linkFile;\n\n    if (linkFile && linkFile.state === CONST.FILE_COMPLETE) {\n      if (this.type === 'image') {\n        texture = this.cache.addImage(this.key, this.data, linkFile.data);\n      } else {\n        texture = this.cache.addImage(linkFile.key, linkFile.data, this.data);\n      }\n\n      this.pendingDestroy(texture);\n      linkFile.pendingDestroy(texture);\n    } else if (!linkFile) {\n      texture = this.cache.addImage(this.key, this.data);\n      this.pendingDestroy(texture);\n    }\n  }\n});\n/**\r\n * Adds an Image, or array of Images, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.image('logo', 'images/phaserLogo.png');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n * If you try to load an animated gif only the first frame will be rendered. Browsers do not natively support playback\r\n * of animated gifs to Canvas elements.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.ImageFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', 'images/AtariLogo.png');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'logo');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', [ 'images/AtariLogo.png', 'images/AtariLogo-n.png' ]);\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png',\r\n *     normalMap: 'images/AtariLogo-n.png'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Image File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#image\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ImageFileConfig|Phaser.Types.Loader.FileTypes.ImageFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('image', function (key, url, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new ImageFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new ImageFile(this, key, url, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = ImageFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/ImageFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","ImageFile","Extends","initialize","loader","key","url","xhrSettings","frameConfig","extension","normalMapURL","config","Array","isArray","fileConfig","type","cache","textureManager","responseType","call","normalMap","setLink","addFile","onProcess","state","FILE_PROCESSING","data","Image","crossOrigin","_this","onload","revokeObjectURL","onProcessComplete","onerror","onProcessError","createObjectURL","xhrLoader","response","addToCache","texture","linkFile","FILE_COMPLETE","addImage","pendingDestroy","register","i","length","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single Image File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#image method and are not typically created directly.\r\n * \r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#image.\r\n *\r\n * @class ImageFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ImageFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n * @param {Phaser.Types.Loader.FileTypes.ImageFrameConfig} [frameConfig] - The frame configuration object. Only provided for, and used by, Sprite Sheets.\r\n */\r\nvar ImageFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function ImageFile (loader, key, url, xhrSettings, frameConfig)\r\n    {\r\n        var extension = 'png';\r\n        var normalMapURL;\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            normalMapURL = GetFastValue(config, 'normalMap');\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n            frameConfig = GetFastValue(config, 'frameConfig');\r\n        }\r\n\r\n        if (Array.isArray(url))\r\n        {\r\n            normalMapURL = url[1];\r\n            url = url[0];\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'image',\r\n            cache: loader.textureManager,\r\n            extension: extension,\r\n            responseType: 'blob',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: frameConfig\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n\r\n        //  Do we have a normal map to load as well?\r\n        if (normalMapURL)\r\n        {\r\n            var normalMap = new ImageFile(loader, this.key, normalMapURL, xhrSettings, frameConfig);\r\n\r\n            normalMap.type = 'normalMap';\r\n\r\n            this.setLink(normalMap);\r\n\r\n            loader.addFile(normalMap);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ImageFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        this.data = new Image();\r\n\r\n        this.data.crossOrigin = this.crossOrigin;\r\n\r\n        var _this = this;\r\n\r\n        this.data.onload = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            File.revokeObjectURL(_this.data);\r\n\r\n            _this.onProcessError();\r\n        };\r\n\r\n        File.createObjectURL(this.data, this.xhrLoader.response, 'image/png');\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.ImageFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var texture;\r\n        var linkFile = this.linkFile;\r\n\r\n        if (linkFile && linkFile.state === CONST.FILE_COMPLETE)\r\n        {\r\n            if (this.type === 'image')\r\n            {\r\n                texture = this.cache.addImage(this.key, this.data, linkFile.data);\r\n            }\r\n            else\r\n            {\r\n                texture = this.cache.addImage(linkFile.key, linkFile.data, this.data);\r\n            }\r\n\r\n            this.pendingDestroy(texture);\r\n\r\n            linkFile.pendingDestroy(texture);\r\n        }\r\n        else if (!linkFile)\r\n        {\r\n            texture = this.cache.addImage(this.key, this.data);\r\n\r\n            this.pendingDestroy(texture);\r\n        }\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an Image, or array of Images, to the current load queue.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.image('logo', 'images/phaserLogo.png');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n * \r\n * Phaser can load all common image types: png, jpg, gif and any other format the browser can natively handle.\r\n * If you try to load an animated gif only the first frame will be rendered. Browsers do not natively support playback\r\n * of animated gifs to Canvas elements.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.ImageFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', 'images/AtariLogo.png');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'logo');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.png\". It will always add `.png` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n *\r\n * Phaser also supports the automatic loading of associated normal maps. If you have a normal map to go with this image,\r\n * then you can specify it by providing an array as the `url` where the second element is the normal map:\r\n * \r\n * ```javascript\r\n * this.load.image('logo', [ 'images/AtariLogo.png', 'images/AtariLogo-n.png' ]);\r\n * ```\r\n *\r\n * Or, if you are using a config object use the `normalMap` property:\r\n * \r\n * ```javascript\r\n * this.load.image({\r\n *     key: 'logo',\r\n *     url: 'images/AtariLogo.png',\r\n *     normalMap: 'images/AtariLogo-n.png'\r\n * });\r\n * ```\r\n *\r\n * The normal map file is subject to the same conditions as the image file with regard to the path, baseURL, CORs and XHR Settings.\r\n * Normal maps are a WebGL only feature.\r\n *\r\n * Note: The ability to load this type of file will only be available if the Image File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#image\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.ImageFileConfig|Phaser.Types.Loader.FileTypes.ImageFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string|string[]} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.png`, i.e. if `key` was \"alien\" then the URL will be \"alien.png\".\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('image', function (key, url, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new ImageFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new ImageFile(this, key, url, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = ImageFile;\r\n"]},"metadata":{},"sourceType":"script"}