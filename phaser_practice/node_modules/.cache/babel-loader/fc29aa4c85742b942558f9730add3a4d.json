{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Class = require('../../utils/Class');\n\nvar CONST = require('../const');\n\nvar File = require('../File');\n\nvar FileTypesManager = require('../FileTypesManager');\n\nvar GetFastValue = require('../../utils/object/GetFastValue');\n\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\n/**\r\n * @classdesc\r\n * A single SVG File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#svg method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#svg.\r\n *\r\n * @class SVGFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SVGFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Types.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\n\n\nvar SVGFile = new Class({\n  Extends: File,\n  initialize: function SVGFile(loader, key, url, svgConfig, xhrSettings) {\n    var extension = 'svg';\n\n    if (IsPlainObject(key)) {\n      var config = key;\n      key = GetFastValue(config, 'key');\n      url = GetFastValue(config, 'url');\n      svgConfig = GetFastValue(config, 'svgConfig', {});\n      xhrSettings = GetFastValue(config, 'xhrSettings');\n      extension = GetFastValue(config, 'extension', extension);\n    }\n\n    var fileConfig = {\n      type: 'svg',\n      cache: loader.textureManager,\n      extension: extension,\n      responseType: 'text',\n      key: key,\n      url: url,\n      xhrSettings: xhrSettings,\n      config: {\n        width: GetFastValue(svgConfig, 'width'),\n        height: GetFastValue(svgConfig, 'height'),\n        scale: GetFastValue(svgConfig, 'scale')\n      }\n    };\n    File.call(this, loader, fileConfig);\n  },\n\n  /**\r\n   * Called automatically by Loader.nextFile.\r\n   * This method controls what extra work this File does with its loaded data.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.SVGFile#onProcess\r\n   * @since 3.7.0\r\n   */\n  onProcess: function () {\n    this.state = CONST.FILE_PROCESSING;\n    var text = this.xhrLoader.responseText;\n    var svg = [text];\n    var width = this.config.width;\n    var height = this.config.height;\n    var scale = this.config.scale;\n\n    resize: if (width && height || scale) {\n      var xml = null;\n      var parser = new DOMParser();\n      xml = parser.parseFromString(text, 'text/xml');\n      var svgXML = xml.getElementsByTagName('svg')[0];\n      var hasViewBox = svgXML.hasAttribute('viewBox');\n      var svgWidth = parseFloat(svgXML.getAttribute('width'));\n      var svgHeight = parseFloat(svgXML.getAttribute('height'));\n\n      if (!hasViewBox && svgWidth && svgHeight) {\n        //  If there's no viewBox attribute, set one\n        svgXML.setAttribute('viewBox', '0  0 ' + svgWidth + ' ' + svgHeight);\n      } else if (hasViewBox && !svgWidth && !svgHeight) {\n        //  Get the w/h from the viewbox\n        var viewBox = svgXML.getAttribute('viewBox').split(/\\s+|,/);\n        svgWidth = viewBox[2];\n        svgHeight = viewBox[3];\n      }\n\n      if (scale) {\n        if (svgWidth && svgHeight) {\n          width = svgWidth * scale;\n          height = svgHeight * scale;\n        } else {\n          break resize;\n        }\n      }\n\n      svgXML.setAttribute('width', width.toString() + 'px');\n      svgXML.setAttribute('height', height.toString() + 'px');\n      svg = [new XMLSerializer().serializeToString(svgXML)];\n    }\n\n    try {\n      var blob = new window.Blob(svg, {\n        type: 'image/svg+xml;charset=utf-8'\n      });\n    } catch (e) {\n      this.onProcessError();\n      return;\n    }\n\n    this.data = new Image();\n    this.data.crossOrigin = this.crossOrigin;\n\n    var _this = this;\n\n    var retry = false;\n\n    this.data.onload = function () {\n      if (!retry) {\n        File.revokeObjectURL(_this.data);\n      }\n\n      _this.onProcessComplete();\n    };\n\n    this.data.onerror = function () {\n      //  Safari 8 re-try\n      if (!retry) {\n        retry = true;\n        File.revokeObjectURL(_this.data);\n        _this.data.src = 'data:image/svg+xml,' + encodeURIComponent(svg.join(''));\n      } else {\n        _this.onProcessError();\n      }\n    };\n\n    File.createObjectURL(this.data, blob, 'image/svg+xml');\n  },\n\n  /**\r\n   * Adds this file to its target cache upon successful loading and processing.\r\n   *\r\n   * @method Phaser.Loader.FileTypes.SVGFile#addToCache\r\n   * @since 3.7.0\r\n   */\n  addToCache: function () {\n    var texture = this.cache.addImage(this.key, this.data);\n    this.pendingDestroy(texture);\n  }\n});\n/**\r\n * Adds an SVG File, or array of SVG Files, to the current load queue. When the files are loaded they\r\n * will be rendered to bitmap textures and stored in the Texture Manager.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.SVGFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n *\r\n * ```javascript\r\n * this.load.svg('morty', 'images/Morty.svg');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'morty');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n * \r\n * You can optionally pass an SVG Resize Configuration object when you load an SVG file. By default the SVG will be rendered to a texture\r\n * at the same size defined in the SVG file attributes. However, this isn't always desirable. You may wish to resize the SVG (either down\r\n * or up) to improve texture clarity, or reduce texture memory consumption. You can either specify an exact width and height to resize\r\n * the SVG to:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { width: 300, height: 600 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         width: 300,\r\n *         height: 600\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * Alternatively, you can just provide a scale factor instead:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { scale: 2.5 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         scale: 2.5\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * If scale, width and height values are all given, the scale has priority and the width and height values are ignored.\r\n *\r\n * Note: The ability to load this type of file will only be available if the SVG File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#svg\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SVGFileConfig|Phaser.Types.Loader.FileTypes.SVGFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Types.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\n\nFileTypesManager.register('svg', function (key, url, svgConfig, xhrSettings) {\n  if (Array.isArray(key)) {\n    for (var i = 0; i < key.length; i++) {\n      //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\n      this.addFile(new SVGFile(this, key[i]));\n    }\n  } else {\n    this.addFile(new SVGFile(this, key, url, svgConfig, xhrSettings));\n  }\n\n  return this;\n});\nmodule.exports = SVGFile;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/loader/filetypes/SVGFile.js"],"names":["Class","require","CONST","File","FileTypesManager","GetFastValue","IsPlainObject","SVGFile","Extends","initialize","loader","key","url","svgConfig","xhrSettings","extension","config","fileConfig","type","cache","textureManager","responseType","width","height","scale","call","onProcess","state","FILE_PROCESSING","text","xhrLoader","responseText","svg","resize","xml","parser","DOMParser","parseFromString","svgXML","getElementsByTagName","hasViewBox","hasAttribute","svgWidth","parseFloat","getAttribute","svgHeight","setAttribute","viewBox","split","toString","XMLSerializer","serializeToString","blob","window","Blob","e","onProcessError","data","Image","crossOrigin","_this","retry","onload","revokeObjectURL","onProcessComplete","onerror","src","encodeURIComponent","join","createObjectURL","addToCache","texture","addImage","pendingDestroy","register","Array","isArray","i","length","addFile","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Class = require('../../utils/Class');\r\nvar CONST = require('../const');\r\nvar File = require('../File');\r\nvar FileTypesManager = require('../FileTypesManager');\r\nvar GetFastValue = require('../../utils/object/GetFastValue');\r\nvar IsPlainObject = require('../../utils/object/IsPlainObject');\r\n\r\n/**\r\n * @classdesc\r\n * A single SVG File suitable for loading by the Loader.\r\n *\r\n * These are created when you use the Phaser.Loader.LoaderPlugin#svg method and are not typically created directly.\r\n *\r\n * For documentation about what all the arguments and configuration options mean please see Phaser.Loader.LoaderPlugin#svg.\r\n *\r\n * @class SVGFile\r\n * @extends Phaser.Loader.File\r\n * @memberof Phaser.Loader.FileTypes\r\n * @constructor\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Loader.LoaderPlugin} loader - A reference to the Loader that is responsible for this file.\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SVGFileConfig)} key - The key to use for this file, or a file configuration object.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Types.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - Extra XHR Settings specifically for this file.\r\n */\r\nvar SVGFile = new Class({\r\n\r\n    Extends: File,\r\n\r\n    initialize:\r\n\r\n    function SVGFile (loader, key, url, svgConfig, xhrSettings)\r\n    {\r\n        var extension = 'svg';\r\n\r\n        if (IsPlainObject(key))\r\n        {\r\n            var config = key;\r\n\r\n            key = GetFastValue(config, 'key');\r\n            url = GetFastValue(config, 'url');\r\n            svgConfig = GetFastValue(config, 'svgConfig', {});\r\n            xhrSettings = GetFastValue(config, 'xhrSettings');\r\n            extension = GetFastValue(config, 'extension', extension);\r\n        }\r\n\r\n        var fileConfig = {\r\n            type: 'svg',\r\n            cache: loader.textureManager,\r\n            extension: extension,\r\n            responseType: 'text',\r\n            key: key,\r\n            url: url,\r\n            xhrSettings: xhrSettings,\r\n            config: {\r\n                width: GetFastValue(svgConfig, 'width'),\r\n                height: GetFastValue(svgConfig, 'height'),\r\n                scale: GetFastValue(svgConfig, 'scale')\r\n            }\r\n        };\r\n\r\n        File.call(this, loader, fileConfig);\r\n    },\r\n\r\n    /**\r\n     * Called automatically by Loader.nextFile.\r\n     * This method controls what extra work this File does with its loaded data.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SVGFile#onProcess\r\n     * @since 3.7.0\r\n     */\r\n    onProcess: function ()\r\n    {\r\n        this.state = CONST.FILE_PROCESSING;\r\n\r\n        var text = this.xhrLoader.responseText;\r\n        var svg = [ text ];\r\n        var width = this.config.width;\r\n        var height = this.config.height;\r\n        var scale = this.config.scale;\r\n\r\n        resize: if (width && height || scale)\r\n        {\r\n            var xml = null;\r\n            var parser = new DOMParser();\r\n            xml = parser.parseFromString(text, 'text/xml');\r\n            var svgXML = xml.getElementsByTagName('svg')[0];\r\n\r\n            var hasViewBox = svgXML.hasAttribute('viewBox');\r\n            var svgWidth = parseFloat(svgXML.getAttribute('width'));\r\n            var svgHeight = parseFloat(svgXML.getAttribute('height'));\r\n\r\n            if (!hasViewBox && svgWidth && svgHeight)\r\n            {\r\n                //  If there's no viewBox attribute, set one\r\n                svgXML.setAttribute('viewBox', '0  0 ' + svgWidth + ' ' + svgHeight);\r\n            }\r\n            else if (hasViewBox && !svgWidth && !svgHeight)\r\n            {\r\n                //  Get the w/h from the viewbox\r\n                var viewBox = svgXML.getAttribute('viewBox').split(/\\s+|,/);\r\n\r\n                svgWidth = viewBox[2];\r\n                svgHeight = viewBox[3];\r\n            }\r\n\r\n            if (scale)\r\n            {\r\n                if (svgWidth && svgHeight)\r\n                {\r\n                    width = svgWidth * scale;\r\n                    height = svgHeight * scale;\r\n                }\r\n                else\r\n                {\r\n                    break resize;\r\n                }\r\n            }\r\n\r\n            svgXML.setAttribute('width', width.toString() + 'px');\r\n            svgXML.setAttribute('height', height.toString() + 'px');\r\n\r\n            svg = [ (new XMLSerializer()).serializeToString(svgXML) ];\r\n        }\r\n\r\n        try\r\n        {\r\n            var blob = new window.Blob(svg, { type: 'image/svg+xml;charset=utf-8' });\r\n        }\r\n        catch (e)\r\n        {\r\n            this.onProcessError();\r\n\r\n            return;\r\n        }\r\n\r\n        this.data = new Image();\r\n\r\n        this.data.crossOrigin = this.crossOrigin;\r\n\r\n        var _this = this;\r\n        var retry = false;\r\n\r\n        this.data.onload = function ()\r\n        {\r\n            if (!retry)\r\n            {\r\n                File.revokeObjectURL(_this.data);\r\n            }\r\n\r\n            _this.onProcessComplete();\r\n        };\r\n\r\n        this.data.onerror = function ()\r\n        {\r\n            //  Safari 8 re-try\r\n            if (!retry)\r\n            {\r\n                retry = true;\r\n\r\n                File.revokeObjectURL(_this.data);\r\n\r\n                _this.data.src = 'data:image/svg+xml,' + encodeURIComponent(svg.join(''));\r\n            }\r\n            else\r\n            {\r\n                _this.onProcessError();\r\n            }\r\n        };\r\n\r\n        File.createObjectURL(this.data, blob, 'image/svg+xml');\r\n    },\r\n\r\n    /**\r\n     * Adds this file to its target cache upon successful loading and processing.\r\n     *\r\n     * @method Phaser.Loader.FileTypes.SVGFile#addToCache\r\n     * @since 3.7.0\r\n     */\r\n    addToCache: function ()\r\n    {\r\n        var texture = this.cache.addImage(this.key, this.data);\r\n\r\n        this.pendingDestroy(texture);\r\n    }\r\n\r\n});\r\n\r\n/**\r\n * Adds an SVG File, or array of SVG Files, to the current load queue. When the files are loaded they\r\n * will be rendered to bitmap textures and stored in the Texture Manager.\r\n *\r\n * You can call this method from within your Scene's `preload`, along with any other files you wish to load:\r\n *\r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg');\r\n * }\r\n * ```\r\n *\r\n * The file is **not** loaded right away. It is added to a queue ready to be loaded either when the loader starts,\r\n * or if it's already running, when the next free load slot becomes available. This happens automatically if you\r\n * are calling this from within the Scene's `preload` method, or a related callback. Because the file is queued\r\n * it means you cannot use the file immediately after calling this method, but must wait for the file to complete.\r\n * The typical flow for a Phaser Scene is that you load assets in the Scene's `preload` method and then when the\r\n * Scene's `create` method is called you are guaranteed that all of those assets are ready for use and have been\r\n * loaded.\r\n *\r\n * The key must be a unique String. It is used to add the file to the global Texture Manager upon a successful load.\r\n * The key should be unique both in terms of files being loaded and files already present in the Texture Manager.\r\n * Loading a file using a key that is already taken will result in a warning. If you wish to replace an existing file\r\n * then remove it from the Texture Manager first, before loading a new one.\r\n *\r\n * Instead of passing arguments you can pass a configuration object, such as:\r\n *\r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg'\r\n * });\r\n * ```\r\n *\r\n * See the documentation for `Phaser.Types.Loader.FileTypes.SVGFileConfig` for more details.\r\n *\r\n * Once the file has finished loading you can use it as a texture for a Game Object by referencing its key:\r\n *\r\n * ```javascript\r\n * this.load.svg('morty', 'images/Morty.svg');\r\n * // and later in your game ...\r\n * this.add.image(x, y, 'morty');\r\n * ```\r\n *\r\n * If you have specified a prefix in the loader, via `Loader.setPrefix` then this value will be prepended to this files\r\n * key. For example, if the prefix was `MENU.` and the key was `Background` the final key will be `MENU.Background` and\r\n * this is what you would use to retrieve the image from the Texture Manager.\r\n *\r\n * The URL can be relative or absolute. If the URL is relative the `Loader.baseURL` and `Loader.path` values will be prepended to it.\r\n *\r\n * If the URL isn't specified the Loader will take the key and create a filename from that. For example if the key is \"alien\"\r\n * and no URL is given then the Loader will set the URL to be \"alien.html\". It will always add `.html` as the extension, although\r\n * this can be overridden if using an object instead of method arguments. If you do not desire this action then provide a URL.\r\n * \r\n * You can optionally pass an SVG Resize Configuration object when you load an SVG file. By default the SVG will be rendered to a texture\r\n * at the same size defined in the SVG file attributes. However, this isn't always desirable. You may wish to resize the SVG (either down\r\n * or up) to improve texture clarity, or reduce texture memory consumption. You can either specify an exact width and height to resize\r\n * the SVG to:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { width: 300, height: 600 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         width: 300,\r\n *         height: 600\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * Alternatively, you can just provide a scale factor instead:\r\n * \r\n * ```javascript\r\n * function preload ()\r\n * {\r\n *     this.load.svg('morty', 'images/Morty.svg', { scale: 2.5 });\r\n * }\r\n * ```\r\n * \r\n * Or when using a configuration object:\r\n * \r\n * ```javascript\r\n * this.load.svg({\r\n *     key: 'morty',\r\n *     url: 'images/Morty.svg',\r\n *     svgConfig: {\r\n *         scale: 2.5\r\n *     }\r\n * });\r\n * ```\r\n * \r\n * If scale, width and height values are all given, the scale has priority and the width and height values are ignored.\r\n *\r\n * Note: The ability to load this type of file will only be available if the SVG File type has been built into Phaser.\r\n * It is available in the default build but can be excluded from custom builds.\r\n *\r\n * @method Phaser.Loader.LoaderPlugin#svg\r\n * @fires Phaser.Loader.LoaderPlugin#addFileEvent\r\n * @since 3.0.0\r\n *\r\n * @param {(string|Phaser.Types.Loader.FileTypes.SVGFileConfig|Phaser.Types.Loader.FileTypes.SVGFileConfig[])} key - The key to use for this file, or a file configuration object, or array of them.\r\n * @param {string} [url] - The absolute or relative URL to load this file from. If undefined or `null` it will be set to `<key>.svg`, i.e. if `key` was \"alien\" then the URL will be \"alien.svg\".\r\n * @param {Phaser.Types.Loader.FileTypes.SVGSizeConfig} [svgConfig] - The svg size configuration object.\r\n * @param {Phaser.Types.Loader.XHRSettingsObject} [xhrSettings] - An XHR Settings configuration object. Used in replacement of the Loaders default XHR Settings.\r\n *\r\n * @return {Phaser.Loader.LoaderPlugin} The Loader instance.\r\n */\r\nFileTypesManager.register('svg', function (key, url, svgConfig, xhrSettings)\r\n{\r\n    if (Array.isArray(key))\r\n    {\r\n        for (var i = 0; i < key.length; i++)\r\n        {\r\n            //  If it's an array it has to be an array of Objects, so we get everything out of the 'key' object\r\n            this.addFile(new SVGFile(this, key[i]));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.addFile(new SVGFile(this, key, url, svgConfig, xhrSettings));\r\n    }\r\n\r\n    return this;\r\n});\r\n\r\nmodule.exports = SVGFile;\r\n\r\n"]},"metadata":{},"sourceType":"script"}