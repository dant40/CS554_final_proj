{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Implements a model view projection matrices.\r\n * Pipelines can implement this for doing 2D and 3D rendering.\r\n *\r\n * @namespace Phaser.Renderer.WebGL.Pipelines.ModelViewProjection\r\n * @since 3.0.0\r\n */\nvar ModelViewProjection = {\n  /**\r\n   * Dirty flag for checking if model matrix needs to be updated on GPU.\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelMatrixDirty\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  modelMatrixDirty: false,\n\n  /**\r\n   * Dirty flag for checking if view matrix needs to be updated on GPU.\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewMatrixDirty\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  viewMatrixDirty: false,\n\n  /**\r\n   * Dirty flag for checking if projection matrix needs to be updated on GPU.\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projectionMatrixDirty\r\n   * @type {boolean}\r\n   * @since 3.0.0\r\n   */\n  projectionMatrixDirty: false,\n\n  /**\r\n   * Model matrix\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelMatrix\r\n   * @type {?Float32Array}\r\n   * @since 3.0.0\r\n   */\n  modelMatrix: null,\n\n  /**\r\n   * View matrix\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewMatrix\r\n   * @type {?Float32Array}\r\n   * @since 3.0.0\r\n   */\n  viewMatrix: null,\n\n  /**\r\n   * Projection matrix\r\n   * \r\n   * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projectionMatrix\r\n   * @type {?Float32Array}\r\n   * @since 3.0.0\r\n   */\n  projectionMatrix: null,\n\n  /**\r\n   * Initializes MVP matrices with an identity matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#mvpInit\r\n   * @since 3.0.0\r\n   */\n  mvpInit: function () {\n    this.modelMatrixDirty = true;\n    this.viewMatrixDirty = true;\n    this.projectionMatrixDirty = true;\n    this.modelMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    this.viewMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    this.projectionMatrix = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n    return this;\n  },\n\n  /**\r\n   * If dirty flags are set then the matrices are uploaded to the GPU.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#mvpUpdate\r\n   * @since 3.0.0\r\n   */\n  mvpUpdate: function () {\n    var program = this.program;\n\n    if (this.modelMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uModelMatrix', false, this.modelMatrix);\n      this.modelMatrixDirty = false;\n    }\n\n    if (this.viewMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uViewMatrix', false, this.viewMatrix);\n      this.viewMatrixDirty = false;\n    }\n\n    if (this.projectionMatrixDirty) {\n      this.renderer.setMatrix4(program, 'uProjectionMatrix', false, this.projectionMatrix);\n      this.projectionMatrixDirty = false;\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Loads an identity matrix to the model matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelIdentity\r\n   * @since 3.0.0\r\n   */\n  modelIdentity: function () {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[0] = 1;\n    modelMatrix[1] = 0;\n    modelMatrix[2] = 0;\n    modelMatrix[3] = 0;\n    modelMatrix[4] = 0;\n    modelMatrix[5] = 1;\n    modelMatrix[6] = 0;\n    modelMatrix[7] = 0;\n    modelMatrix[8] = 0;\n    modelMatrix[9] = 0;\n    modelMatrix[10] = 1;\n    modelMatrix[11] = 0;\n    modelMatrix[12] = 0;\n    modelMatrix[13] = 0;\n    modelMatrix[14] = 0;\n    modelMatrix[15] = 1;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Scale model matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x component.\r\n   * @param {number} y - The y component.\r\n   * @param {number} z - The z component.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  modelScale: function (x, y, z) {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[0] = modelMatrix[0] * x;\n    modelMatrix[1] = modelMatrix[1] * x;\n    modelMatrix[2] = modelMatrix[2] * x;\n    modelMatrix[3] = modelMatrix[3] * x;\n    modelMatrix[4] = modelMatrix[4] * y;\n    modelMatrix[5] = modelMatrix[5] * y;\n    modelMatrix[6] = modelMatrix[6] * y;\n    modelMatrix[7] = modelMatrix[7] * y;\n    modelMatrix[8] = modelMatrix[8] * z;\n    modelMatrix[9] = modelMatrix[9] * z;\n    modelMatrix[10] = modelMatrix[10] * z;\n    modelMatrix[11] = modelMatrix[11] * z;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Translate model matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelTranslate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x component.\r\n   * @param {number} y - The y component.\r\n   * @param {number} z - The z component.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  modelTranslate: function (x, y, z) {\n    var modelMatrix = this.modelMatrix;\n    modelMatrix[12] = modelMatrix[0] * x + modelMatrix[4] * y + modelMatrix[8] * z + modelMatrix[12];\n    modelMatrix[13] = modelMatrix[1] * x + modelMatrix[5] * y + modelMatrix[9] * z + modelMatrix[13];\n    modelMatrix[14] = modelMatrix[2] * x + modelMatrix[6] * y + modelMatrix[10] * z + modelMatrix[14];\n    modelMatrix[15] = modelMatrix[3] * x + modelMatrix[7] * y + modelMatrix[11] * z + modelMatrix[15];\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the X axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  modelRotateX: function (radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a10 = modelMatrix[4];\n    var a11 = modelMatrix[5];\n    var a12 = modelMatrix[6];\n    var a13 = modelMatrix[7];\n    var a20 = modelMatrix[8];\n    var a21 = modelMatrix[9];\n    var a22 = modelMatrix[10];\n    var a23 = modelMatrix[11];\n    modelMatrix[4] = a10 * c + a20 * s;\n    modelMatrix[5] = a11 * c + a21 * s;\n    modelMatrix[6] = a12 * c + a22 * s;\n    modelMatrix[7] = a13 * c + a23 * s;\n    modelMatrix[8] = a20 * c - a10 * s;\n    modelMatrix[9] = a21 * c - a11 * s;\n    modelMatrix[10] = a22 * c - a12 * s;\n    modelMatrix[11] = a23 * c - a13 * s;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the Y axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  modelRotateY: function (radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = modelMatrix[0];\n    var a01 = modelMatrix[1];\n    var a02 = modelMatrix[2];\n    var a03 = modelMatrix[3];\n    var a20 = modelMatrix[8];\n    var a21 = modelMatrix[9];\n    var a22 = modelMatrix[10];\n    var a23 = modelMatrix[11];\n    modelMatrix[0] = a00 * c - a20 * s;\n    modelMatrix[1] = a01 * c - a21 * s;\n    modelMatrix[2] = a02 * c - a22 * s;\n    modelMatrix[3] = a03 * c - a23 * s;\n    modelMatrix[8] = a00 * s + a20 * c;\n    modelMatrix[9] = a01 * s + a21 * c;\n    modelMatrix[10] = a02 * s + a22 * c;\n    modelMatrix[11] = a03 * s + a23 * c;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates the model matrix in the Z axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  modelRotateZ: function (radians) {\n    var modelMatrix = this.modelMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = modelMatrix[0];\n    var a01 = modelMatrix[1];\n    var a02 = modelMatrix[2];\n    var a03 = modelMatrix[3];\n    var a10 = modelMatrix[4];\n    var a11 = modelMatrix[5];\n    var a12 = modelMatrix[6];\n    var a13 = modelMatrix[7];\n    modelMatrix[0] = a00 * c + a10 * s;\n    modelMatrix[1] = a01 * c + a11 * s;\n    modelMatrix[2] = a02 * c + a12 * s;\n    modelMatrix[3] = a03 * c + a13 * s;\n    modelMatrix[4] = a10 * c - a00 * s;\n    modelMatrix[5] = a11 * c - a01 * s;\n    modelMatrix[6] = a12 * c - a02 * s;\n    modelMatrix[7] = a13 * c - a03 * s;\n    this.modelMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads identity matrix into the view matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewIdentity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewIdentity: function () {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[0] = 1;\n    viewMatrix[1] = 0;\n    viewMatrix[2] = 0;\n    viewMatrix[3] = 0;\n    viewMatrix[4] = 0;\n    viewMatrix[5] = 1;\n    viewMatrix[6] = 0;\n    viewMatrix[7] = 0;\n    viewMatrix[8] = 0;\n    viewMatrix[9] = 0;\n    viewMatrix[10] = 1;\n    viewMatrix[11] = 0;\n    viewMatrix[12] = 0;\n    viewMatrix[13] = 0;\n    viewMatrix[14] = 0;\n    viewMatrix[15] = 1;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Scales view matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewScale\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x component.\r\n   * @param {number} y - The y component.\r\n   * @param {number} z - The z component.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewScale: function (x, y, z) {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[0] = viewMatrix[0] * x;\n    viewMatrix[1] = viewMatrix[1] * x;\n    viewMatrix[2] = viewMatrix[2] * x;\n    viewMatrix[3] = viewMatrix[3] * x;\n    viewMatrix[4] = viewMatrix[4] * y;\n    viewMatrix[5] = viewMatrix[5] * y;\n    viewMatrix[6] = viewMatrix[6] * y;\n    viewMatrix[7] = viewMatrix[7] * y;\n    viewMatrix[8] = viewMatrix[8] * z;\n    viewMatrix[9] = viewMatrix[9] * z;\n    viewMatrix[10] = viewMatrix[10] * z;\n    viewMatrix[11] = viewMatrix[11] * z;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Translates view matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewTranslate\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} x - The x component.\r\n   * @param {number} y - The y component.\r\n   * @param {number} z - The z component.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewTranslate: function (x, y, z) {\n    var viewMatrix = this.viewMatrix;\n    viewMatrix[12] = viewMatrix[0] * x + viewMatrix[4] * y + viewMatrix[8] * z + viewMatrix[12];\n    viewMatrix[13] = viewMatrix[1] * x + viewMatrix[5] * y + viewMatrix[9] * z + viewMatrix[13];\n    viewMatrix[14] = viewMatrix[2] * x + viewMatrix[6] * y + viewMatrix[10] * z + viewMatrix[14];\n    viewMatrix[15] = viewMatrix[3] * x + viewMatrix[7] * y + viewMatrix[11] * z + viewMatrix[15];\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the X axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateX\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewRotateX: function (radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a10 = viewMatrix[4];\n    var a11 = viewMatrix[5];\n    var a12 = viewMatrix[6];\n    var a13 = viewMatrix[7];\n    var a20 = viewMatrix[8];\n    var a21 = viewMatrix[9];\n    var a22 = viewMatrix[10];\n    var a23 = viewMatrix[11];\n    viewMatrix[4] = a10 * c + a20 * s;\n    viewMatrix[5] = a11 * c + a21 * s;\n    viewMatrix[6] = a12 * c + a22 * s;\n    viewMatrix[7] = a13 * c + a23 * s;\n    viewMatrix[8] = a20 * c - a10 * s;\n    viewMatrix[9] = a21 * c - a11 * s;\n    viewMatrix[10] = a22 * c - a12 * s;\n    viewMatrix[11] = a23 * c - a13 * s;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the Y axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateY\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewRotateY: function (radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = viewMatrix[0];\n    var a01 = viewMatrix[1];\n    var a02 = viewMatrix[2];\n    var a03 = viewMatrix[3];\n    var a20 = viewMatrix[8];\n    var a21 = viewMatrix[9];\n    var a22 = viewMatrix[10];\n    var a23 = viewMatrix[11];\n    viewMatrix[0] = a00 * c - a20 * s;\n    viewMatrix[1] = a01 * c - a21 * s;\n    viewMatrix[2] = a02 * c - a22 * s;\n    viewMatrix[3] = a03 * c - a23 * s;\n    viewMatrix[8] = a00 * s + a20 * c;\n    viewMatrix[9] = a01 * s + a21 * c;\n    viewMatrix[10] = a02 * s + a22 * c;\n    viewMatrix[11] = a03 * s + a23 * c;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Rotates view matrix in the Z axis.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateZ\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} radians - The amount to rotate by.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewRotateZ: function (radians) {\n    var viewMatrix = this.viewMatrix;\n    var s = Math.sin(radians);\n    var c = Math.cos(radians);\n    var a00 = viewMatrix[0];\n    var a01 = viewMatrix[1];\n    var a02 = viewMatrix[2];\n    var a03 = viewMatrix[3];\n    var a10 = viewMatrix[4];\n    var a11 = viewMatrix[5];\n    var a12 = viewMatrix[6];\n    var a13 = viewMatrix[7];\n    viewMatrix[0] = a00 * c + a10 * s;\n    viewMatrix[1] = a01 * c + a11 * s;\n    viewMatrix[2] = a02 * c + a12 * s;\n    viewMatrix[3] = a03 * c + a13 * s;\n    viewMatrix[4] = a10 * c - a00 * s;\n    viewMatrix[5] = a11 * c - a01 * s;\n    viewMatrix[6] = a12 * c - a02 * s;\n    viewMatrix[7] = a13 * c - a03 * s;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads a 2D view matrix (3x2 matrix) into a 4x4 view matrix \r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewLoad2D\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Float32Array} matrix2D - The Matrix2D.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewLoad2D: function (matrix2D) {\n    var vm = this.viewMatrix;\n    vm[0] = matrix2D[0];\n    vm[1] = matrix2D[1];\n    vm[2] = 0.0;\n    vm[3] = 0.0;\n    vm[4] = matrix2D[2];\n    vm[5] = matrix2D[3];\n    vm[6] = 0.0;\n    vm[7] = 0.0;\n    vm[8] = matrix2D[4];\n    vm[9] = matrix2D[5];\n    vm[10] = 1.0;\n    vm[11] = 0.0;\n    vm[12] = 0.0;\n    vm[13] = 0.0;\n    vm[14] = 0.0;\n    vm[15] = 1.0;\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Copies a 4x4 matrix into the view matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewLoad\r\n   * @since 3.0.0\r\n   *\r\n   * @param {Float32Array} matrix - The Matrix2D.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  viewLoad: function (matrix) {\n    var vm = this.viewMatrix;\n    vm[0] = matrix[0];\n    vm[1] = matrix[1];\n    vm[2] = matrix[2];\n    vm[3] = matrix[3];\n    vm[4] = matrix[4];\n    vm[5] = matrix[5];\n    vm[6] = matrix[6];\n    vm[7] = matrix[7];\n    vm[8] = matrix[8];\n    vm[9] = matrix[9];\n    vm[10] = matrix[10];\n    vm[11] = matrix[11];\n    vm[12] = matrix[12];\n    vm[13] = matrix[13];\n    vm[14] = matrix[14];\n    vm[15] = matrix[15];\n    this.viewMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Loads identity matrix into the projection matrix.\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projIdentity\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  projIdentity: function () {\n    var projectionMatrix = this.projectionMatrix;\n    projectionMatrix[0] = 1;\n    projectionMatrix[1] = 0;\n    projectionMatrix[2] = 0;\n    projectionMatrix[3] = 0;\n    projectionMatrix[4] = 0;\n    projectionMatrix[5] = 1;\n    projectionMatrix[6] = 0;\n    projectionMatrix[7] = 0;\n    projectionMatrix[8] = 0;\n    projectionMatrix[9] = 0;\n    projectionMatrix[10] = 1;\n    projectionMatrix[11] = 0;\n    projectionMatrix[12] = 0;\n    projectionMatrix[13] = 0;\n    projectionMatrix[14] = 0;\n    projectionMatrix[15] = 1;\n    this.projectionMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Sets up an orthographic projection matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projOrtho\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} left - The left value.\r\n   * @param {number} right - The right value.\r\n   * @param {number} bottom - The bottom value.\r\n   * @param {number} top - The top value.\r\n   * @param {number} near - The near value.\r\n   * @param {number} far - The far value.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  projOrtho: function (left, right, bottom, top, near, far) {\n    var projectionMatrix = this.projectionMatrix;\n    var leftRight = 1.0 / (left - right);\n    var bottomTop = 1.0 / (bottom - top);\n    var nearFar = 1.0 / (near - far);\n    projectionMatrix[0] = -2.0 * leftRight;\n    projectionMatrix[1] = 0.0;\n    projectionMatrix[2] = 0.0;\n    projectionMatrix[3] = 0.0;\n    projectionMatrix[4] = 0.0;\n    projectionMatrix[5] = -2.0 * bottomTop;\n    projectionMatrix[6] = 0.0;\n    projectionMatrix[7] = 0.0;\n    projectionMatrix[8] = 0.0;\n    projectionMatrix[9] = 0.0;\n    projectionMatrix[10] = 2.0 * nearFar;\n    projectionMatrix[11] = 0.0;\n    projectionMatrix[12] = (left + right) * leftRight;\n    projectionMatrix[13] = (top + bottom) * bottomTop;\n    projectionMatrix[14] = (far + near) * nearFar;\n    projectionMatrix[15] = 1.0;\n    this.projectionMatrixDirty = true;\n    return this;\n  },\n\n  /**\r\n   * Sets up a perspective projection matrix\r\n   * \r\n   * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projPersp\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} fovY - The fov value.\r\n   * @param {number} aspectRatio - The aspectRatio value.\r\n   * @param {number} near - The near value.\r\n   * @param {number} far - The far value.\r\n   *\r\n   * @return {this} This Model View Projection.\r\n   */\n  projPersp: function (fovY, aspectRatio, near, far) {\n    var projectionMatrix = this.projectionMatrix;\n    var fov = 1.0 / Math.tan(fovY / 2.0);\n    var nearFar = 1.0 / (near - far);\n    projectionMatrix[0] = fov / aspectRatio;\n    projectionMatrix[1] = 0.0;\n    projectionMatrix[2] = 0.0;\n    projectionMatrix[3] = 0.0;\n    projectionMatrix[4] = 0.0;\n    projectionMatrix[5] = fov;\n    projectionMatrix[6] = 0.0;\n    projectionMatrix[7] = 0.0;\n    projectionMatrix[8] = 0.0;\n    projectionMatrix[9] = 0.0;\n    projectionMatrix[10] = (far + near) * nearFar;\n    projectionMatrix[11] = -1.0;\n    projectionMatrix[12] = 0.0;\n    projectionMatrix[13] = 0.0;\n    projectionMatrix[14] = 2.0 * far * near * nearFar;\n    projectionMatrix[15] = 0.0;\n    this.projectionMatrixDirty = true;\n    return this;\n  }\n};\nmodule.exports = ModelViewProjection;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/renderer/webgl/pipelines/components/ModelViewProjection.js"],"names":["ModelViewProjection","modelMatrixDirty","viewMatrixDirty","projectionMatrixDirty","modelMatrix","viewMatrix","projectionMatrix","mvpInit","Float32Array","mvpUpdate","program","renderer","setMatrix4","modelIdentity","modelScale","x","y","z","modelTranslate","modelRotateX","radians","s","Math","sin","c","cos","a10","a11","a12","a13","a20","a21","a22","a23","modelRotateY","a00","a01","a02","a03","modelRotateZ","viewIdentity","viewScale","viewTranslate","viewRotateX","viewRotateY","viewRotateZ","viewLoad2D","matrix2D","vm","viewLoad","matrix","projIdentity","projOrtho","left","right","bottom","top","near","far","leftRight","bottomTop","nearFar","projPersp","fovY","aspectRatio","fov","tan","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Implements a model view projection matrices.\r\n * Pipelines can implement this for doing 2D and 3D rendering.\r\n *\r\n * @namespace Phaser.Renderer.WebGL.Pipelines.ModelViewProjection\r\n * @since 3.0.0\r\n */\r\nvar ModelViewProjection = {\r\n\r\n    /**\r\n     * Dirty flag for checking if model matrix needs to be updated on GPU.\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelMatrixDirty\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    modelMatrixDirty: false,\r\n\r\n    /**\r\n     * Dirty flag for checking if view matrix needs to be updated on GPU.\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewMatrixDirty\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    viewMatrixDirty: false,\r\n\r\n    /**\r\n     * Dirty flag for checking if projection matrix needs to be updated on GPU.\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projectionMatrixDirty\r\n     * @type {boolean}\r\n     * @since 3.0.0\r\n     */\r\n    projectionMatrixDirty: false,\r\n\r\n    /**\r\n     * Model matrix\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelMatrix\r\n     * @type {?Float32Array}\r\n     * @since 3.0.0\r\n     */\r\n    modelMatrix: null,\r\n\r\n    /**\r\n     * View matrix\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewMatrix\r\n     * @type {?Float32Array}\r\n     * @since 3.0.0\r\n     */\r\n    viewMatrix: null,\r\n\r\n    /**\r\n     * Projection matrix\r\n     * \r\n     * @name Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projectionMatrix\r\n     * @type {?Float32Array}\r\n     * @since 3.0.0\r\n     */\r\n    projectionMatrix: null,\r\n\r\n    /**\r\n     * Initializes MVP matrices with an identity matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#mvpInit\r\n     * @since 3.0.0\r\n     */\r\n    mvpInit: function ()\r\n    {\r\n        this.modelMatrixDirty = true;\r\n        this.viewMatrixDirty = true;\r\n        this.projectionMatrixDirty = true;\r\n        \r\n        this.modelMatrix = new Float32Array([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]);\r\n        \r\n        this.viewMatrix = new Float32Array([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]);\r\n        \r\n        this.projectionMatrix = new Float32Array([\r\n            1, 0, 0, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]);\r\n        \r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * If dirty flags are set then the matrices are uploaded to the GPU.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#mvpUpdate\r\n     * @since 3.0.0\r\n     */\r\n    mvpUpdate: function ()\r\n    {\r\n        var program = this.program;\r\n\r\n        if (this.modelMatrixDirty)\r\n        {\r\n            this.renderer.setMatrix4(program, 'uModelMatrix', false, this.modelMatrix);\r\n            this.modelMatrixDirty = false;\r\n        }\r\n        \r\n        if (this.viewMatrixDirty)\r\n        {\r\n            this.renderer.setMatrix4(program, 'uViewMatrix', false, this.viewMatrix);\r\n            this.viewMatrixDirty = false;\r\n        }\r\n\r\n        if (this.projectionMatrixDirty)\r\n        {\r\n            this.renderer.setMatrix4(program, 'uProjectionMatrix', false, this.projectionMatrix);\r\n            this.projectionMatrixDirty = false;\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Loads an identity matrix to the model matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelIdentity\r\n     * @since 3.0.0\r\n     */\r\n    modelIdentity: function ()\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n        \r\n        modelMatrix[0] = 1;\r\n        modelMatrix[1] = 0;\r\n        modelMatrix[2] = 0;\r\n        modelMatrix[3] = 0;\r\n        modelMatrix[4] = 0;\r\n        modelMatrix[5] = 1;\r\n        modelMatrix[6] = 0;\r\n        modelMatrix[7] = 0;\r\n        modelMatrix[8] = 0;\r\n        modelMatrix[9] = 0;\r\n        modelMatrix[10] = 1;\r\n        modelMatrix[11] = 0;\r\n        modelMatrix[12] = 0;\r\n        modelMatrix[13] = 0;\r\n        modelMatrix[14] = 0;\r\n        modelMatrix[15] = 1;\r\n\r\n        this.modelMatrixDirty = true;\r\n        \r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Scale model matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    modelScale: function (x, y, z)\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n\r\n        modelMatrix[0] = modelMatrix[0] * x;\r\n        modelMatrix[1] = modelMatrix[1] * x;\r\n        modelMatrix[2] = modelMatrix[2] * x;\r\n        modelMatrix[3] = modelMatrix[3] * x;\r\n        modelMatrix[4] = modelMatrix[4] * y;\r\n        modelMatrix[5] = modelMatrix[5] * y;\r\n        modelMatrix[6] = modelMatrix[6] * y;\r\n        modelMatrix[7] = modelMatrix[7] * y;\r\n        modelMatrix[8] = modelMatrix[8] * z;\r\n        modelMatrix[9] = modelMatrix[9] * z;\r\n        modelMatrix[10] = modelMatrix[10] * z;\r\n        modelMatrix[11] = modelMatrix[11] * z;\r\n    \r\n        this.modelMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translate model matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelTranslate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    modelTranslate: function (x, y, z)\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n\r\n        modelMatrix[12] = modelMatrix[0] * x + modelMatrix[4] * y + modelMatrix[8] * z + modelMatrix[12];\r\n        modelMatrix[13] = modelMatrix[1] * x + modelMatrix[5] * y + modelMatrix[9] * z + modelMatrix[13];\r\n        modelMatrix[14] = modelMatrix[2] * x + modelMatrix[6] * y + modelMatrix[10] * z + modelMatrix[14];\r\n        modelMatrix[15] = modelMatrix[3] * x + modelMatrix[7] * y + modelMatrix[11] * z + modelMatrix[15];\r\n\r\n        this.modelMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotates the model matrix in the X axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    modelRotateX: function (radians)\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a10 = modelMatrix[4];\r\n        var a11 = modelMatrix[5];\r\n        var a12 = modelMatrix[6];\r\n        var a13 = modelMatrix[7];\r\n        var a20 = modelMatrix[8];\r\n        var a21 = modelMatrix[9];\r\n        var a22 = modelMatrix[10];\r\n        var a23 = modelMatrix[11];\r\n\r\n        modelMatrix[4] = a10 * c + a20 * s;\r\n        modelMatrix[5] = a11 * c + a21 * s;\r\n        modelMatrix[6] = a12 * c + a22 * s;\r\n        modelMatrix[7] = a13 * c + a23 * s;\r\n        modelMatrix[8] = a20 * c - a10 * s;\r\n        modelMatrix[9] = a21 * c - a11 * s;\r\n        modelMatrix[10] = a22 * c - a12 * s;\r\n        modelMatrix[11] = a23 * c - a13 * s;\r\n\r\n        this.modelMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Rotates the model matrix in the Y axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    modelRotateY: function (radians)\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a00 = modelMatrix[0];\r\n        var a01 = modelMatrix[1];\r\n        var a02 = modelMatrix[2];\r\n        var a03 = modelMatrix[3];\r\n        var a20 = modelMatrix[8];\r\n        var a21 = modelMatrix[9];\r\n        var a22 = modelMatrix[10];\r\n        var a23 = modelMatrix[11];\r\n\r\n        modelMatrix[0] = a00 * c - a20 * s;\r\n        modelMatrix[1] = a01 * c - a21 * s;\r\n        modelMatrix[2] = a02 * c - a22 * s;\r\n        modelMatrix[3] = a03 * c - a23 * s;\r\n        modelMatrix[8] = a00 * s + a20 * c;\r\n        modelMatrix[9] = a01 * s + a21 * c;\r\n        modelMatrix[10] = a02 * s + a22 * c;\r\n        modelMatrix[11] = a03 * s + a23 * c;\r\n\r\n        this.modelMatrixDirty = true;\r\n        \r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Rotates the model matrix in the Z axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#modelRotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    modelRotateZ: function (radians)\r\n    {\r\n        var modelMatrix = this.modelMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a00 = modelMatrix[0];\r\n        var a01 = modelMatrix[1];\r\n        var a02 = modelMatrix[2];\r\n        var a03 = modelMatrix[3];\r\n        var a10 = modelMatrix[4];\r\n        var a11 = modelMatrix[5];\r\n        var a12 = modelMatrix[6];\r\n        var a13 = modelMatrix[7];\r\n\r\n        modelMatrix[0] = a00 * c + a10 * s;\r\n        modelMatrix[1] = a01 * c + a11 * s;\r\n        modelMatrix[2] = a02 * c + a12 * s;\r\n        modelMatrix[3] = a03 * c + a13 * s;\r\n        modelMatrix[4] = a10 * c - a00 * s;\r\n        modelMatrix[5] = a11 * c - a01 * s;\r\n        modelMatrix[6] = a12 * c - a02 * s;\r\n        modelMatrix[7] = a13 * c - a03 * s;\r\n\r\n        this.modelMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Loads identity matrix into the view matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewIdentity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewIdentity: function ()\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n        \r\n        viewMatrix[0] = 1;\r\n        viewMatrix[1] = 0;\r\n        viewMatrix[2] = 0;\r\n        viewMatrix[3] = 0;\r\n        viewMatrix[4] = 0;\r\n        viewMatrix[5] = 1;\r\n        viewMatrix[6] = 0;\r\n        viewMatrix[7] = 0;\r\n        viewMatrix[8] = 0;\r\n        viewMatrix[9] = 0;\r\n        viewMatrix[10] = 1;\r\n        viewMatrix[11] = 0;\r\n        viewMatrix[12] = 0;\r\n        viewMatrix[13] = 0;\r\n        viewMatrix[14] = 0;\r\n        viewMatrix[15] = 1;\r\n\r\n        this.viewMatrixDirty = true;\r\n        \r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Scales view matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewScale\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewScale: function (x, y, z)\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n\r\n        viewMatrix[0] = viewMatrix[0] * x;\r\n        viewMatrix[1] = viewMatrix[1] * x;\r\n        viewMatrix[2] = viewMatrix[2] * x;\r\n        viewMatrix[3] = viewMatrix[3] * x;\r\n        viewMatrix[4] = viewMatrix[4] * y;\r\n        viewMatrix[5] = viewMatrix[5] * y;\r\n        viewMatrix[6] = viewMatrix[6] * y;\r\n        viewMatrix[7] = viewMatrix[7] * y;\r\n        viewMatrix[8] = viewMatrix[8] * z;\r\n        viewMatrix[9] = viewMatrix[9] * z;\r\n        viewMatrix[10] = viewMatrix[10] * z;\r\n        viewMatrix[11] = viewMatrix[11] * z;\r\n    \r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Translates view matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewTranslate\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} x - The x component.\r\n     * @param {number} y - The y component.\r\n     * @param {number} z - The z component.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewTranslate: function (x, y, z)\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n\r\n        viewMatrix[12] = viewMatrix[0] * x + viewMatrix[4] * y + viewMatrix[8] * z + viewMatrix[12];\r\n        viewMatrix[13] = viewMatrix[1] * x + viewMatrix[5] * y + viewMatrix[9] * z + viewMatrix[13];\r\n        viewMatrix[14] = viewMatrix[2] * x + viewMatrix[6] * y + viewMatrix[10] * z + viewMatrix[14];\r\n        viewMatrix[15] = viewMatrix[3] * x + viewMatrix[7] * y + viewMatrix[11] * z + viewMatrix[15];\r\n\r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Rotates view matrix in the X axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateX\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewRotateX: function (radians)\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a10 = viewMatrix[4];\r\n        var a11 = viewMatrix[5];\r\n        var a12 = viewMatrix[6];\r\n        var a13 = viewMatrix[7];\r\n        var a20 = viewMatrix[8];\r\n        var a21 = viewMatrix[9];\r\n        var a22 = viewMatrix[10];\r\n        var a23 = viewMatrix[11];\r\n\r\n        viewMatrix[4] = a10 * c + a20 * s;\r\n        viewMatrix[5] = a11 * c + a21 * s;\r\n        viewMatrix[6] = a12 * c + a22 * s;\r\n        viewMatrix[7] = a13 * c + a23 * s;\r\n        viewMatrix[8] = a20 * c - a10 * s;\r\n        viewMatrix[9] = a21 * c - a11 * s;\r\n        viewMatrix[10] = a22 * c - a12 * s;\r\n        viewMatrix[11] = a23 * c - a13 * s;\r\n\r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Rotates view matrix in the Y axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateY\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewRotateY: function (radians)\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a00 = viewMatrix[0];\r\n        var a01 = viewMatrix[1];\r\n        var a02 = viewMatrix[2];\r\n        var a03 = viewMatrix[3];\r\n        var a20 = viewMatrix[8];\r\n        var a21 = viewMatrix[9];\r\n        var a22 = viewMatrix[10];\r\n        var a23 = viewMatrix[11];\r\n\r\n        viewMatrix[0] = a00 * c - a20 * s;\r\n        viewMatrix[1] = a01 * c - a21 * s;\r\n        viewMatrix[2] = a02 * c - a22 * s;\r\n        viewMatrix[3] = a03 * c - a23 * s;\r\n        viewMatrix[8] = a00 * s + a20 * c;\r\n        viewMatrix[9] = a01 * s + a21 * c;\r\n        viewMatrix[10] = a02 * s + a22 * c;\r\n        viewMatrix[11] = a03 * s + a23 * c;\r\n\r\n        this.viewMatrixDirty = true;\r\n        \r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Rotates view matrix in the Z axis.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewRotateZ\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} radians - The amount to rotate by.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewRotateZ: function (radians)\r\n    {\r\n        var viewMatrix = this.viewMatrix;\r\n        var s = Math.sin(radians);\r\n        var c = Math.cos(radians);\r\n        var a00 = viewMatrix[0];\r\n        var a01 = viewMatrix[1];\r\n        var a02 = viewMatrix[2];\r\n        var a03 = viewMatrix[3];\r\n        var a10 = viewMatrix[4];\r\n        var a11 = viewMatrix[5];\r\n        var a12 = viewMatrix[6];\r\n        var a13 = viewMatrix[7];\r\n\r\n        viewMatrix[0] = a00 * c + a10 * s;\r\n        viewMatrix[1] = a01 * c + a11 * s;\r\n        viewMatrix[2] = a02 * c + a12 * s;\r\n        viewMatrix[3] = a03 * c + a13 * s;\r\n        viewMatrix[4] = a10 * c - a00 * s;\r\n        viewMatrix[5] = a11 * c - a01 * s;\r\n        viewMatrix[6] = a12 * c - a02 * s;\r\n        viewMatrix[7] = a13 * c - a03 * s;\r\n\r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Loads a 2D view matrix (3x2 matrix) into a 4x4 view matrix \r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewLoad2D\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Float32Array} matrix2D - The Matrix2D.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewLoad2D: function (matrix2D)\r\n    {\r\n        var vm = this.viewMatrix;\r\n\r\n        vm[0] = matrix2D[0];\r\n        vm[1] = matrix2D[1];\r\n        vm[2] = 0.0;\r\n        vm[3] = 0.0;\r\n        vm[4] = matrix2D[2];\r\n        vm[5] = matrix2D[3];\r\n        vm[6] = 0.0;\r\n        vm[7] = 0.0;\r\n        vm[8] = matrix2D[4];\r\n        vm[9] = matrix2D[5];\r\n        vm[10] = 1.0;\r\n        vm[11] = 0.0;\r\n        vm[12] = 0.0;\r\n        vm[13] = 0.0;\r\n        vm[14] = 0.0;\r\n        vm[15] = 1.0;\r\n\r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n\r\n    /**\r\n     * Copies a 4x4 matrix into the view matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#viewLoad\r\n     * @since 3.0.0\r\n     *\r\n     * @param {Float32Array} matrix - The Matrix2D.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    viewLoad: function (matrix)\r\n    {\r\n        var vm = this.viewMatrix;\r\n\r\n        vm[0] = matrix[0];\r\n        vm[1] = matrix[1];\r\n        vm[2] = matrix[2];\r\n        vm[3] = matrix[3];\r\n        vm[4] = matrix[4];\r\n        vm[5] = matrix[5];\r\n        vm[6] = matrix[6];\r\n        vm[7] = matrix[7];\r\n        vm[8] = matrix[8];\r\n        vm[9] = matrix[9];\r\n        vm[10] = matrix[10];\r\n        vm[11] = matrix[11];\r\n        vm[12] = matrix[12];\r\n        vm[13] = matrix[13];\r\n        vm[14] = matrix[14];\r\n        vm[15] = matrix[15];\r\n\r\n        this.viewMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Loads identity matrix into the projection matrix.\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projIdentity\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    projIdentity: function ()\r\n    {\r\n        var projectionMatrix = this.projectionMatrix;\r\n        \r\n        projectionMatrix[0] = 1;\r\n        projectionMatrix[1] = 0;\r\n        projectionMatrix[2] = 0;\r\n        projectionMatrix[3] = 0;\r\n        projectionMatrix[4] = 0;\r\n        projectionMatrix[5] = 1;\r\n        projectionMatrix[6] = 0;\r\n        projectionMatrix[7] = 0;\r\n        projectionMatrix[8] = 0;\r\n        projectionMatrix[9] = 0;\r\n        projectionMatrix[10] = 1;\r\n        projectionMatrix[11] = 0;\r\n        projectionMatrix[12] = 0;\r\n        projectionMatrix[13] = 0;\r\n        projectionMatrix[14] = 0;\r\n        projectionMatrix[15] = 1;\r\n\r\n        this.projectionMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Sets up an orthographic projection matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projOrtho\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} left - The left value.\r\n     * @param {number} right - The right value.\r\n     * @param {number} bottom - The bottom value.\r\n     * @param {number} top - The top value.\r\n     * @param {number} near - The near value.\r\n     * @param {number} far - The far value.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    projOrtho: function (left, right, bottom, top, near, far)\r\n    {\r\n        var projectionMatrix = this.projectionMatrix;\r\n        var leftRight = 1.0 / (left - right);\r\n        var bottomTop = 1.0 / (bottom - top);\r\n        var nearFar = 1.0 / (near - far);\r\n\r\n        projectionMatrix[0] = -2.0 * leftRight;\r\n        projectionMatrix[1] = 0.0;\r\n        projectionMatrix[2] = 0.0;\r\n        projectionMatrix[3] = 0.0;\r\n        projectionMatrix[4] = 0.0;\r\n        projectionMatrix[5] = -2.0 * bottomTop;\r\n        projectionMatrix[6] = 0.0;\r\n        projectionMatrix[7] = 0.0;\r\n        projectionMatrix[8] = 0.0;\r\n        projectionMatrix[9] = 0.0;\r\n        projectionMatrix[10] = 2.0 * nearFar;\r\n        projectionMatrix[11] = 0.0;\r\n        projectionMatrix[12] = (left + right) * leftRight;\r\n        projectionMatrix[13] = (top + bottom) * bottomTop;\r\n        projectionMatrix[14] = (far + near) * nearFar;\r\n        projectionMatrix[15] = 1.0;\r\n\r\n        this.projectionMatrixDirty = true;\r\n\r\n        return this;\r\n    },\r\n    \r\n    /**\r\n     * Sets up a perspective projection matrix\r\n     * \r\n     * @method Phaser.Renderer.WebGL.Pipelines.ModelViewProjection#projPersp\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} fovY - The fov value.\r\n     * @param {number} aspectRatio - The aspectRatio value.\r\n     * @param {number} near - The near value.\r\n     * @param {number} far - The far value.\r\n     *\r\n     * @return {this} This Model View Projection.\r\n     */\r\n    projPersp: function (fovY, aspectRatio, near, far)\r\n    {\r\n        var projectionMatrix = this.projectionMatrix;\r\n        var fov = 1.0 / Math.tan(fovY / 2.0);\r\n        var nearFar = 1.0 / (near - far);\r\n        \r\n        projectionMatrix[0] = fov / aspectRatio;\r\n        projectionMatrix[1] = 0.0;\r\n        projectionMatrix[2] = 0.0;\r\n        projectionMatrix[3] = 0.0;\r\n        projectionMatrix[4] = 0.0;\r\n        projectionMatrix[5] = fov;\r\n        projectionMatrix[6] = 0.0;\r\n        projectionMatrix[7] = 0.0;\r\n        projectionMatrix[8] = 0.0;\r\n        projectionMatrix[9] = 0.0;\r\n        projectionMatrix[10] = (far + near) * nearFar;\r\n        projectionMatrix[11] = -1.0;\r\n        projectionMatrix[12] = 0.0;\r\n        projectionMatrix[13] = 0.0;\r\n        projectionMatrix[14] = (2.0 * far * near) * nearFar;\r\n        projectionMatrix[15] = 0.0;\r\n        \r\n        this.projectionMatrixDirty = true;\r\n\r\n        return this;\r\n    }\r\n};\r\n\r\nmodule.exports = ModelViewProjection;\r\n"]},"metadata":{},"sourceType":"script"}