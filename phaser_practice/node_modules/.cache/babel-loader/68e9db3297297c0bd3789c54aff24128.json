{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n\n/**\r\n * Master list of tiles -> x, y, index in tileset.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.BuildTilesetIndex\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.MapData} mapData - [description]\r\n *\r\n * @return {array} [description]\r\n */\nvar BuildTilesetIndex = function (mapData) {\n  var tiles = [];\n\n  for (var i = 0; i < mapData.tilesets.length; i++) {\n    var set = mapData.tilesets[i];\n    var x = set.tileMargin;\n    var y = set.tileMargin;\n    var count = 0;\n    var countX = 0;\n    var countY = 0;\n\n    for (var t = set.firstgid; t < set.firstgid + set.total; t++) {\n      //  Can add extra properties here as needed\n      tiles[t] = [x, y, i];\n      x += set.tileWidth + set.tileSpacing;\n      count++;\n\n      if (count === set.total) {\n        break;\n      }\n\n      countX++;\n\n      if (countX === set.columns) {\n        x = set.tileMargin;\n        y += set.tileHeight + set.tileSpacing;\n        countX = 0;\n        countY++;\n\n        if (countY === set.rows) {\n          break;\n        }\n      }\n    }\n  }\n\n  return tiles;\n};\n\nmodule.exports = BuildTilesetIndex;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/parsers/tiled/BuildTilesetIndex.js"],"names":["BuildTilesetIndex","mapData","tiles","i","tilesets","length","set","x","tileMargin","y","count","countX","countY","t","firstgid","total","tileWidth","tileSpacing","columns","tileHeight","rows","module","exports"],"mappings":"AAAA;;;;;;AAMA;;;;;;;;;;AAUA,IAAIA,iBAAiB,GAAG,UAAUC,OAAV,EACxB;AACI,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,QAAR,CAAiBC,MAArC,EAA6CF,CAAC,EAA9C,EACA;AACI,QAAIG,GAAG,GAAGL,OAAO,CAACG,QAAR,CAAiBD,CAAjB,CAAV;AAEA,QAAII,CAAC,GAAGD,GAAG,CAACE,UAAZ;AACA,QAAIC,CAAC,GAAGH,GAAG,CAACE,UAAZ;AAEA,QAAIE,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAG,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAGP,GAAG,CAACQ,QAAjB,EAA2BD,CAAC,GAAGP,GAAG,CAACQ,QAAJ,GAAeR,GAAG,CAACS,KAAlD,EAAyDF,CAAC,EAA1D,EACA;AACI;AACAX,MAAAA,KAAK,CAACW,CAAD,CAAL,GAAW,CAAEN,CAAF,EAAKE,CAAL,EAAQN,CAAR,CAAX;AAEAI,MAAAA,CAAC,IAAID,GAAG,CAACU,SAAJ,GAAgBV,GAAG,CAACW,WAAzB;AAEAP,MAAAA,KAAK;;AAEL,UAAIA,KAAK,KAAKJ,GAAG,CAACS,KAAlB,EACA;AACI;AACH;;AAEDJ,MAAAA,MAAM;;AAEN,UAAIA,MAAM,KAAKL,GAAG,CAACY,OAAnB,EACA;AACIX,QAAAA,CAAC,GAAGD,GAAG,CAACE,UAAR;AACAC,QAAAA,CAAC,IAAIH,GAAG,CAACa,UAAJ,GAAiBb,GAAG,CAACW,WAA1B;AAEAN,QAAAA,MAAM,GAAG,CAAT;AACAC,QAAAA,MAAM;;AAEN,YAAIA,MAAM,KAAKN,GAAG,CAACc,IAAnB,EACA;AACI;AACH;AACJ;AACJ;AACJ;;AAED,SAAOlB,KAAP;AACH,CAhDD;;AAkDAmB,MAAM,CAACC,OAAP,GAAiBtB,iBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n/**\r\n * Master list of tiles -> x, y, index in tileset.\r\n *\r\n * @function Phaser.Tilemaps.Parsers.Tiled.BuildTilesetIndex\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Tilemaps.MapData} mapData - [description]\r\n *\r\n * @return {array} [description]\r\n */\r\nvar BuildTilesetIndex = function (mapData)\r\n{\r\n    var tiles = [];\r\n\r\n    for (var i = 0; i < mapData.tilesets.length; i++)\r\n    {\r\n        var set = mapData.tilesets[i];\r\n\r\n        var x = set.tileMargin;\r\n        var y = set.tileMargin;\r\n\r\n        var count = 0;\r\n        var countX = 0;\r\n        var countY = 0;\r\n\r\n        for (var t = set.firstgid; t < set.firstgid + set.total; t++)\r\n        {\r\n            //  Can add extra properties here as needed\r\n            tiles[t] = [ x, y, i ];\r\n\r\n            x += set.tileWidth + set.tileSpacing;\r\n\r\n            count++;\r\n\r\n            if (count === set.total)\r\n            {\r\n                break;\r\n            }\r\n\r\n            countX++;\r\n\r\n            if (countX === set.columns)\r\n            {\r\n                x = set.tileMargin;\r\n                y += set.tileHeight + set.tileSpacing;\r\n\r\n                countX = 0;\r\n                countY++;\r\n\r\n                if (countY === set.rows)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tiles;\r\n};\r\n\r\nmodule.exports = BuildTilesetIndex;\r\n"]},"metadata":{},"sourceType":"script"}