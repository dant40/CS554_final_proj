{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar AdvanceKeyCombo = require('./AdvanceKeyCombo');\n/**\r\n * Used internally by the KeyCombo class.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.ProcessKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to be processed.\r\n *\r\n * @return {boolean} `true` if the combo was matched, otherwise `false`.\r\n */\n\n\nvar ProcessKeyCombo = function (event, combo) {\n  if (combo.matched) {\n    return true;\n  }\n\n  var comboMatched = false;\n  var keyMatched = false;\n\n  if (event.keyCode === combo.current) {\n    //  Key was correct\n    if (combo.index > 0 && combo.maxKeyDelay > 0) {\n      //  We have to check to see if the delay between\n      //  the new key and the old one was too long (if enabled)\n      var timeLimit = combo.timeLastMatched + combo.maxKeyDelay; //  Check if they pressed it in time or not\n\n      if (event.timeStamp <= timeLimit) {\n        keyMatched = true;\n        comboMatched = AdvanceKeyCombo(event, combo);\n      }\n    } else {\n      keyMatched = true; //  We don't check the time for the first key pressed, so just advance it\n\n      comboMatched = AdvanceKeyCombo(event, combo);\n    }\n  }\n\n  if (!keyMatched && combo.resetOnWrongKey) {\n    //  Wrong key was pressed\n    combo.index = 0;\n    combo.current = combo.keyCodes[0];\n  }\n\n  if (comboMatched) {\n    combo.timeLastMatched = event.timeStamp;\n    combo.matched = true;\n    combo.timeMatched = event.timeStamp;\n  }\n\n  return comboMatched;\n};\n\nmodule.exports = ProcessKeyCombo;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/input/keyboard/combo/ProcessKeyCombo.js"],"names":["AdvanceKeyCombo","require","ProcessKeyCombo","event","combo","matched","comboMatched","keyMatched","keyCode","current","index","maxKeyDelay","timeLimit","timeLastMatched","timeStamp","resetOnWrongKey","keyCodes","timeMatched","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;AAEA;;;;;;;;;;;;;;AAYA,IAAIC,eAAe,GAAG,UAAUC,KAAV,EAAiBC,KAAjB,EACtB;AACI,MAAIA,KAAK,CAACC,OAAV,EACA;AACI,WAAO,IAAP;AACH;;AAED,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,UAAU,GAAG,KAAjB;;AAEA,MAAIJ,KAAK,CAACK,OAAN,KAAkBJ,KAAK,CAACK,OAA5B,EACA;AACI;AAEA,QAAIL,KAAK,CAACM,KAAN,GAAc,CAAd,IAAmBN,KAAK,CAACO,WAAN,GAAoB,CAA3C,EACA;AACI;AACA;AAEA,UAAIC,SAAS,GAAGR,KAAK,CAACS,eAAN,GAAwBT,KAAK,CAACO,WAA9C,CAJJ,CAMI;;AACA,UAAIR,KAAK,CAACW,SAAN,IAAmBF,SAAvB,EACA;AACIL,QAAAA,UAAU,GAAG,IAAb;AACAD,QAAAA,YAAY,GAAGN,eAAe,CAACG,KAAD,EAAQC,KAAR,CAA9B;AACH;AACJ,KAbD,MAeA;AACIG,MAAAA,UAAU,GAAG,IAAb,CADJ,CAGI;;AACAD,MAAAA,YAAY,GAAGN,eAAe,CAACG,KAAD,EAAQC,KAAR,CAA9B;AACH;AACJ;;AAED,MAAI,CAACG,UAAD,IAAeH,KAAK,CAACW,eAAzB,EACA;AACI;AACAX,IAAAA,KAAK,CAACM,KAAN,GAAc,CAAd;AACAN,IAAAA,KAAK,CAACK,OAAN,GAAgBL,KAAK,CAACY,QAAN,CAAe,CAAf,CAAhB;AACH;;AAED,MAAIV,YAAJ,EACA;AACIF,IAAAA,KAAK,CAACS,eAAN,GAAwBV,KAAK,CAACW,SAA9B;AACAV,IAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACAD,IAAAA,KAAK,CAACa,WAAN,GAAoBd,KAAK,CAACW,SAA1B;AACH;;AAED,SAAOR,YAAP;AACH,CApDD;;AAsDAY,MAAM,CAACC,OAAP,GAAiBjB,eAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar AdvanceKeyCombo = require('./AdvanceKeyCombo');\r\n\r\n/**\r\n * Used internally by the KeyCombo class.\r\n *\r\n * @function Phaser.Input.Keyboard.KeyCombo.ProcessKeyCombo\r\n * @private\r\n * @since 3.0.0\r\n *\r\n * @param {KeyboardEvent} event - The native Keyboard Event.\r\n * @param {Phaser.Input.Keyboard.KeyCombo} combo - The KeyCombo object to be processed.\r\n *\r\n * @return {boolean} `true` if the combo was matched, otherwise `false`.\r\n */\r\nvar ProcessKeyCombo = function (event, combo)\r\n{\r\n    if (combo.matched)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    var comboMatched = false;\r\n    var keyMatched = false;\r\n\r\n    if (event.keyCode === combo.current)\r\n    {\r\n        //  Key was correct\r\n\r\n        if (combo.index > 0 && combo.maxKeyDelay > 0)\r\n        {\r\n            //  We have to check to see if the delay between\r\n            //  the new key and the old one was too long (if enabled)\r\n\r\n            var timeLimit = combo.timeLastMatched + combo.maxKeyDelay;\r\n\r\n            //  Check if they pressed it in time or not\r\n            if (event.timeStamp <= timeLimit)\r\n            {\r\n                keyMatched = true;\r\n                comboMatched = AdvanceKeyCombo(event, combo);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            keyMatched = true;\r\n\r\n            //  We don't check the time for the first key pressed, so just advance it\r\n            comboMatched = AdvanceKeyCombo(event, combo);\r\n        }\r\n    }\r\n\r\n    if (!keyMatched && combo.resetOnWrongKey)\r\n    {\r\n        //  Wrong key was pressed\r\n        combo.index = 0;\r\n        combo.current = combo.keyCodes[0];\r\n    }\r\n\r\n    if (comboMatched)\r\n    {\r\n        combo.timeLastMatched = event.timeStamp;\r\n        combo.matched = true;\r\n        combo.timeMatched = event.timeStamp;\r\n    }\r\n\r\n    return comboMatched;\r\n};\r\n\r\nmodule.exports = ProcessKeyCombo;\r\n"]},"metadata":{},"sourceType":"script"}