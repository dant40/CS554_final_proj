{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\n// Checks whether the x and y coordinates are contained within this polygon.\n//  Adapted from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html by Jonas Raoni Soares Silva\n\n/**\r\n * Checks if a point is within the bounds of a Polygon.\r\n *\r\n * @function Phaser.Geom.Polygon.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The Polygon to check against.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is within the bounds of the Polygon, otherwise `false`.\r\n */\nvar Contains = function (polygon, x, y) {\n  var inside = false;\n\n  for (var i = -1, j = polygon.points.length - 1; ++i < polygon.points.length; j = i) {\n    var ix = polygon.points[i].x;\n    var iy = polygon.points[i].y;\n    var jx = polygon.points[j].x;\n    var jy = polygon.points[j].y;\n\n    if ((iy <= y && y < jy || jy <= y && y < iy) && x < (jx - ix) * (y - iy) / (jy - iy) + ix) {\n      inside = !inside;\n    }\n  }\n\n  return inside;\n};\n\nmodule.exports = Contains;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/polygon/Contains.js"],"names":["Contains","polygon","x","y","inside","i","j","points","length","ix","iy","jx","jy","module","exports"],"mappings":"AAAA;;;;;AAMA;AACA;;AAEA;;;;;;;;;;;;AAYA,IAAIA,QAAQ,GAAG,UAAUC,OAAV,EAAmBC,CAAnB,EAAsBC,CAAtB,EACf;AACI,MAAIC,MAAM,GAAG,KAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAC,CAAT,EAAYC,CAAC,GAAGL,OAAO,CAACM,MAAR,CAAeC,MAAf,GAAwB,CAA7C,EAAgD,EAAEH,CAAF,GAAMJ,OAAO,CAACM,MAAR,CAAeC,MAArE,EAA6EF,CAAC,GAAGD,CAAjF,EACA;AACI,QAAII,EAAE,GAAGR,OAAO,CAACM,MAAR,CAAeF,CAAf,EAAkBH,CAA3B;AACA,QAAIQ,EAAE,GAAGT,OAAO,CAACM,MAAR,CAAeF,CAAf,EAAkBF,CAA3B;AAEA,QAAIQ,EAAE,GAAGV,OAAO,CAACM,MAAR,CAAeD,CAAf,EAAkBJ,CAA3B;AACA,QAAIU,EAAE,GAAGX,OAAO,CAACM,MAAR,CAAeD,CAAf,EAAkBH,CAA3B;;AAEA,QAAI,CAAEO,EAAE,IAAIP,CAAN,IAAWA,CAAC,GAAGS,EAAhB,IAAwBA,EAAE,IAAIT,CAAN,IAAWA,CAAC,GAAGO,EAAxC,KAAiDR,CAAC,GAAG,CAACS,EAAE,GAAGF,EAAN,KAAaN,CAAC,GAAGO,EAAjB,KAAwBE,EAAE,GAAGF,EAA7B,IAAmCD,EAA5F,EACA;AACIL,MAAAA,MAAM,GAAG,CAACA,MAAV;AACH;AACJ;;AAED,SAAOA,MAAP;AACH,CAnBD;;AAqBAS,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\n// Checks whether the x and y coordinates are contained within this polygon.\r\n//  Adapted from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html by Jonas Raoni Soares Silva\r\n\r\n/**\r\n * Checks if a point is within the bounds of a Polygon.\r\n *\r\n * @function Phaser.Geom.Polygon.Contains\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Polygon} polygon - The Polygon to check against.\r\n * @param {number} x - The X coordinate of the point to check.\r\n * @param {number} y - The Y coordinate of the point to check.\r\n *\r\n * @return {boolean} `true` if the point is within the bounds of the Polygon, otherwise `false`.\r\n */\r\nvar Contains = function (polygon, x, y)\r\n{\r\n    var inside = false;\r\n\r\n    for (var i = -1, j = polygon.points.length - 1; ++i < polygon.points.length; j = i)\r\n    {\r\n        var ix = polygon.points[i].x;\r\n        var iy = polygon.points[i].y;\r\n\r\n        var jx = polygon.points[j].x;\r\n        var jy = polygon.points[j].y;\r\n\r\n        if (((iy <= y && y < jy) || (jy <= y && y < iy)) && (x < (jx - ix) * (y - iy) / (jy - iy) + ix))\r\n        {\r\n            inside = !inside;\r\n        }\r\n    }\r\n\r\n    return inside;\r\n};\r\n\r\nmodule.exports = Contains;\r\n"]},"metadata":{},"sourceType":"script"}