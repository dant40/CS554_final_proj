{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar FillPathWebGL = require('../FillPathWebGL');\n\nvar StrokePathWebGL = require('../StrokePathWebGL');\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Curve#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Curve} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\n\n\nvar CurveWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix) {\n  var pipeline = this.pipeline;\n  var camMatrix = pipeline._tempMatrix1;\n  var shapeMatrix = pipeline._tempMatrix2;\n  var calcMatrix = pipeline._tempMatrix3;\n  renderer.setPipeline(pipeline);\n  shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\n  camMatrix.copyFrom(camera.matrix);\n\n  if (parentMatrix) {\n    //  Multiply the camera by the parent matrix\n    camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY); //  Undo the camera scroll\n\n    shapeMatrix.e = src.x;\n    shapeMatrix.f = src.y;\n  } else {\n    shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\n    shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\n  }\n\n  camMatrix.multiply(shapeMatrix, calcMatrix);\n  var dx = src._displayOriginX + src._curveBounds.x;\n  var dy = src._displayOriginY + src._curveBounds.y;\n  var alpha = camera.alpha * src.alpha;\n\n  if (src.isFilled) {\n    FillPathWebGL(pipeline, calcMatrix, src, alpha, dx, dy);\n  }\n\n  if (src.isStroked) {\n    StrokePathWebGL(pipeline, src, alpha, dx, dy);\n  }\n};\n\nmodule.exports = CurveWebGLRenderer;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/shape/curve/CurveWebGLRenderer.js"],"names":["FillPathWebGL","require","StrokePathWebGL","CurveWebGLRenderer","renderer","src","interpolationPercentage","camera","parentMatrix","pipeline","camMatrix","_tempMatrix1","shapeMatrix","_tempMatrix2","calcMatrix","_tempMatrix3","setPipeline","applyITRS","x","y","rotation","scaleX","scaleY","copyFrom","matrix","multiplyWithOffset","scrollX","scrollFactorX","scrollY","scrollFactorY","e","f","multiply","dx","_displayOriginX","_curveBounds","dy","_displayOriginY","alpha","isFilled","isStroked","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,aAAa,GAAGC,OAAO,CAAC,kBAAD,CAA3B;;AACA,IAAIC,eAAe,GAAGD,OAAO,CAAC,oBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;AAeA,IAAIE,kBAAkB,GAAG,UAAUC,QAAV,EAAoBC,GAApB,EAAyBC,uBAAzB,EAAkDC,MAAlD,EAA0DC,YAA1D,EACzB;AACI,MAAIC,QAAQ,GAAG,KAAKA,QAApB;AAEA,MAAIC,SAAS,GAAGD,QAAQ,CAACE,YAAzB;AACA,MAAIC,WAAW,GAAGH,QAAQ,CAACI,YAA3B;AACA,MAAIC,UAAU,GAAGL,QAAQ,CAACM,YAA1B;AAEAX,EAAAA,QAAQ,CAACY,WAAT,CAAqBP,QAArB;AAEAG,EAAAA,WAAW,CAACK,SAAZ,CAAsBZ,GAAG,CAACa,CAA1B,EAA6Bb,GAAG,CAACc,CAAjC,EAAoCd,GAAG,CAACe,QAAxC,EAAkDf,GAAG,CAACgB,MAAtD,EAA8DhB,GAAG,CAACiB,MAAlE;AAEAZ,EAAAA,SAAS,CAACa,QAAV,CAAmBhB,MAAM,CAACiB,MAA1B;;AAEA,MAAIhB,YAAJ,EACA;AACI;AACAE,IAAAA,SAAS,CAACe,kBAAV,CAA6BjB,YAA7B,EAA2C,CAACD,MAAM,CAACmB,OAAR,GAAkBrB,GAAG,CAACsB,aAAjE,EAAgF,CAACpB,MAAM,CAACqB,OAAR,GAAkBvB,GAAG,CAACwB,aAAtG,EAFJ,CAII;;AACAjB,IAAAA,WAAW,CAACkB,CAAZ,GAAgBzB,GAAG,CAACa,CAApB;AACAN,IAAAA,WAAW,CAACmB,CAAZ,GAAgB1B,GAAG,CAACc,CAApB;AACH,GARD,MAUA;AACIP,IAAAA,WAAW,CAACkB,CAAZ,IAAiBvB,MAAM,CAACmB,OAAP,GAAiBrB,GAAG,CAACsB,aAAtC;AACAf,IAAAA,WAAW,CAACmB,CAAZ,IAAiBxB,MAAM,CAACqB,OAAP,GAAiBvB,GAAG,CAACwB,aAAtC;AACH;;AAEDnB,EAAAA,SAAS,CAACsB,QAAV,CAAmBpB,WAAnB,EAAgCE,UAAhC;AAEA,MAAImB,EAAE,GAAG5B,GAAG,CAAC6B,eAAJ,GAAsB7B,GAAG,CAAC8B,YAAJ,CAAiBjB,CAAhD;AACA,MAAIkB,EAAE,GAAG/B,GAAG,CAACgC,eAAJ,GAAsBhC,GAAG,CAAC8B,YAAJ,CAAiBhB,CAAhD;AAEA,MAAImB,KAAK,GAAG/B,MAAM,CAAC+B,KAAP,GAAejC,GAAG,CAACiC,KAA/B;;AAEA,MAAIjC,GAAG,CAACkC,QAAR,EACA;AACIvC,IAAAA,aAAa,CAACS,QAAD,EAAWK,UAAX,EAAuBT,GAAvB,EAA4BiC,KAA5B,EAAmCL,EAAnC,EAAuCG,EAAvC,CAAb;AACH;;AAED,MAAI/B,GAAG,CAACmC,SAAR,EACA;AACItC,IAAAA,eAAe,CAACO,QAAD,EAAWJ,GAAX,EAAgBiC,KAAhB,EAAuBL,EAAvB,EAA2BG,EAA3B,CAAf;AACH;AACJ,CA7CD;;AA+CAK,MAAM,CAACC,OAAP,GAAiBvC,kBAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar FillPathWebGL = require('../FillPathWebGL');\r\nvar StrokePathWebGL = require('../StrokePathWebGL');\r\n\r\n/**\r\n * Renders this Game Object with the WebGL Renderer to the given Camera.\r\n * The object will not render if any of its renderFlags are set or it is being actively filtered out by the Camera.\r\n * This method should not be called directly. It is a utility function of the Render module.\r\n *\r\n * @method Phaser.GameObjects.Curve#renderWebGL\r\n * @since 3.13.0\r\n * @private\r\n *\r\n * @param {Phaser.Renderer.WebGL.WebGLRenderer} renderer - A reference to the current active WebGL renderer.\r\n * @param {Phaser.GameObjects.Curve} src - The Game Object being rendered in this call.\r\n * @param {number} interpolationPercentage - Reserved for future use and custom pipelines.\r\n * @param {Phaser.Cameras.Scene2D.Camera} camera - The Camera that is rendering the Game Object.\r\n * @param {Phaser.GameObjects.Components.TransformMatrix} parentMatrix - This transform matrix is defined if the game object is nested\r\n */\r\nvar CurveWebGLRenderer = function (renderer, src, interpolationPercentage, camera, parentMatrix)\r\n{\r\n    var pipeline = this.pipeline;\r\n\r\n    var camMatrix = pipeline._tempMatrix1;\r\n    var shapeMatrix = pipeline._tempMatrix2;\r\n    var calcMatrix = pipeline._tempMatrix3;\r\n\r\n    renderer.setPipeline(pipeline);\r\n\r\n    shapeMatrix.applyITRS(src.x, src.y, src.rotation, src.scaleX, src.scaleY);\r\n\r\n    camMatrix.copyFrom(camera.matrix);\r\n\r\n    if (parentMatrix)\r\n    {\r\n        //  Multiply the camera by the parent matrix\r\n        camMatrix.multiplyWithOffset(parentMatrix, -camera.scrollX * src.scrollFactorX, -camera.scrollY * src.scrollFactorY);\r\n\r\n        //  Undo the camera scroll\r\n        shapeMatrix.e = src.x;\r\n        shapeMatrix.f = src.y;\r\n    }\r\n    else\r\n    {\r\n        shapeMatrix.e -= camera.scrollX * src.scrollFactorX;\r\n        shapeMatrix.f -= camera.scrollY * src.scrollFactorY;\r\n    }\r\n\r\n    camMatrix.multiply(shapeMatrix, calcMatrix);\r\n\r\n    var dx = src._displayOriginX + src._curveBounds.x;\r\n    var dy = src._displayOriginY + src._curveBounds.y;\r\n\r\n    var alpha = camera.alpha * src.alpha;\r\n\r\n    if (src.isFilled)\r\n    {\r\n        FillPathWebGL(pipeline, calcMatrix, src, alpha, dx, dy);\r\n    }\r\n\r\n    if (src.isStroked)\r\n    {\r\n        StrokePathWebGL(pipeline, src, alpha, dx, dy);\r\n    }\r\n};\r\n\r\nmodule.exports = CurveWebGLRenderer;\r\n"]},"metadata":{},"sourceType":"script"}