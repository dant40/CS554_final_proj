{"ast":null,"code":"/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Point = require('../point/Point');\n\nvar TriangleToLine = require('./TriangleToLine');\n\nvar LineToLine = require('./LineToLine');\n/**\r\n * Checks if a Triangle and a Line intersect, and returns the intersection points as a Point object array.\r\n *\r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.GetTriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\n\n\nvar GetTriangleToLine = function (triangle, line, out) {\n  if (out === undefined) {\n    out = [];\n  }\n\n  if (TriangleToLine(triangle, line)) {\n    var lineA = triangle.getLineA();\n    var lineB = triangle.getLineB();\n    var lineC = triangle.getLineC();\n    var output = [new Point(), new Point(), new Point()];\n    var result = [LineToLine(lineA, line, output[0]), LineToLine(lineB, line, output[1]), LineToLine(lineC, line, output[2])];\n\n    for (var i = 0; i < 3; i++) {\n      if (result[i]) {\n        out.push(output[i]);\n      }\n    }\n  }\n\n  return out;\n};\n\nmodule.exports = GetTriangleToLine;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/geom/intersects/GetTriangleToLine.js"],"names":["Point","require","TriangleToLine","LineToLine","GetTriangleToLine","triangle","line","out","undefined","lineA","getLineA","lineB","getLineB","lineC","getLineC","output","result","i","push","module","exports"],"mappings":"AAAA;;;;;;AAOA,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;;AACA,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAxB;AAEA;;;;;;;;;;;;;;;;AAcA,IAAIG,iBAAiB,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,GAA1B,EACxB;AACI,MAAIA,GAAG,KAAKC,SAAZ,EAAuB;AAAED,IAAAA,GAAG,GAAG,EAAN;AAAW;;AAEpC,MAAIL,cAAc,CAACG,QAAD,EAAWC,IAAX,CAAlB,EACA;AACI,QAAIG,KAAK,GAAGJ,QAAQ,CAACK,QAAT,EAAZ;AACA,QAAIC,KAAK,GAAGN,QAAQ,CAACO,QAAT,EAAZ;AACA,QAAIC,KAAK,GAAGR,QAAQ,CAACS,QAAT,EAAZ;AAEA,QAAIC,MAAM,GAAG,CAAE,IAAIf,KAAJ,EAAF,EAAe,IAAIA,KAAJ,EAAf,EAA4B,IAAIA,KAAJ,EAA5B,CAAb;AAEA,QAAIgB,MAAM,GAAG,CACTb,UAAU,CAACM,KAAD,EAAQH,IAAR,EAAcS,MAAM,CAAC,CAAD,CAApB,CADD,EAETZ,UAAU,CAACQ,KAAD,EAAQL,IAAR,EAAcS,MAAM,CAAC,CAAD,CAApB,CAFD,EAGTZ,UAAU,CAACU,KAAD,EAAQP,IAAR,EAAcS,MAAM,CAAC,CAAD,CAApB,CAHD,CAAb;;AAMA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACA;AACI,UAAID,MAAM,CAACC,CAAD,CAAV,EAAe;AAAEV,QAAAA,GAAG,CAACW,IAAJ,CAASH,MAAM,CAACE,CAAD,CAAf;AAAsB;AAC1C;AACJ;;AAED,SAAOV,GAAP;AACH,CAzBD;;AA2BAY,MAAM,CAACC,OAAP,GAAiBhB,iBAAjB","sourcesContent":["/**\r\n * @author       Florian Vazelle\r\n * @author       Geoffrey Glaive\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Point = require('../point/Point');\r\nvar TriangleToLine = require('./TriangleToLine');\r\nvar LineToLine = require('./LineToLine');\r\n\r\n/**\r\n * Checks if a Triangle and a Line intersect, and returns the intersection points as a Point object array.\r\n *\r\n * The Line intersects the Triangle if it starts inside of it, ends inside of it, or crosses any of the Triangle's sides. Thus, the Triangle is considered \"solid\".\r\n *\r\n * @function Phaser.Geom.Intersects.GetTriangleToLine\r\n * @since 3.0.0\r\n *\r\n * @param {Phaser.Geom.Triangle} triangle - The Triangle to check with.\r\n * @param {Phaser.Geom.Line} line - The Line to check with.\r\n * @param {array} [out] - An optional array in which to store the points of intersection.\r\n *\r\n * @return {array} An array with the points of intersection if objects intersect, otherwise an empty array.\r\n */\r\nvar GetTriangleToLine = function (triangle, line, out)\r\n{\r\n    if (out === undefined) { out = []; }\r\n\r\n    if (TriangleToLine(triangle, line))\r\n    {\r\n        var lineA = triangle.getLineA();\r\n        var lineB = triangle.getLineB();\r\n        var lineC = triangle.getLineC();\r\n\r\n        var output = [ new Point(), new Point(), new Point() ];\r\n\r\n        var result = [\r\n            LineToLine(lineA, line, output[0]),\r\n            LineToLine(lineB, line, output[1]),\r\n            LineToLine(lineC, line, output[2])\r\n        ];\r\n\r\n        for (var i = 0; i < 3; i++)\r\n        {\r\n            if (result[i]) { out.push(output[i]); }\r\n        }\r\n    }\r\n\r\n    return out;\r\n};\r\n\r\nmodule.exports = GetTriangleToLine;\r\n"]},"metadata":{},"sourceType":"script"}