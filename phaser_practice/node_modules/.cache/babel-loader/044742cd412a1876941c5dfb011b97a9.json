{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Clamp = require('../../math/Clamp'); //  bitmask flag for GameObject.renderMask\n\n\nvar _FLAG = 2; // 0010\n\n/**\r\n * Provides methods used for setting the alpha property of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.AlphaSingle\r\n * @since 3.22.0\r\n */\n\nvar AlphaSingle = {\n  /**\r\n   * Private internal value. Holds the global alpha value.\r\n   *\r\n   * @name Phaser.GameObjects.Components.AlphaSingle#_alpha\r\n   * @type {number}\r\n   * @private\r\n   * @default 1\r\n   * @since 3.0.0\r\n   */\n  _alpha: 1,\n\n  /**\r\n   * Clears all alpha values associated with this Game Object.\r\n   *\r\n   * Immediately sets the alpha levels back to 1 (fully opaque).\r\n   *\r\n   * @method Phaser.GameObjects.Components.AlphaSingle#clearAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  clearAlpha: function () {\n    return this.setAlpha(1);\n  },\n\n  /**\r\n   * Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\r\n   * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n   *\r\n   * @method Phaser.GameObjects.Components.AlphaSingle#setAlpha\r\n   * @since 3.0.0\r\n   *\r\n   * @param {number} [value=1] - The alpha value applied across the whole Game Object.\r\n   *\r\n   * @return {this} This Game Object instance.\r\n   */\n  setAlpha: function (value) {\n    if (value === undefined) {\n      value = 1;\n    }\n\n    this.alpha = value;\n    return this;\n  },\n\n  /**\r\n   * The alpha value of the Game Object.\r\n   *\r\n   * This is a global value, impacting the entire Game Object, not just a region of it.\r\n   *\r\n   * @name Phaser.GameObjects.Components.AlphaSingle#alpha\r\n   * @type {number}\r\n   * @since 3.0.0\r\n   */\n  alpha: {\n    get: function () {\n      return this._alpha;\n    },\n    set: function (value) {\n      var v = Clamp(value, 0, 1);\n      this._alpha = v;\n\n      if (v === 0) {\n        this.renderFlags &= ~_FLAG;\n      } else {\n        this.renderFlags |= _FLAG;\n      }\n    }\n  }\n};\nmodule.exports = AlphaSingle;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/gameobjects/components/AlphaSingle.js"],"names":["Clamp","require","_FLAG","AlphaSingle","_alpha","clearAlpha","setAlpha","value","undefined","alpha","get","set","v","renderFlags","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,KAAK,GAAGC,OAAO,CAAC,kBAAD,CAAnB,C,CAEA;;;AACA,IAAIC,KAAK,GAAG,CAAZ,C,CAAe;;AAEf;;;;;;;;AAQA,IAAIC,WAAW,GAAG;AAEd;;;;;;;;;AASAC,EAAAA,MAAM,EAAE,CAXM;;AAad;;;;;;;;;;AAUAC,EAAAA,UAAU,EAAE,YACZ;AACI,WAAO,KAAKC,QAAL,CAAc,CAAd,CAAP;AACH,GA1Ba;;AA4Bd;;;;;;;;;;;AAWAA,EAAAA,QAAQ,EAAE,UAAUC,KAAV,EACV;AACI,QAAIA,KAAK,KAAKC,SAAd,EAAyB;AAAED,MAAAA,KAAK,GAAG,CAAR;AAAY;;AAEvC,SAAKE,KAAL,GAAaF,KAAb;AAEA,WAAO,IAAP;AACH,GA9Ca;;AAgDd;;;;;;;;;AASAE,EAAAA,KAAK,EAAE;AAEHC,IAAAA,GAAG,EAAE,YACL;AACI,aAAO,KAAKN,MAAZ;AACH,KALE;AAOHO,IAAAA,GAAG,EAAE,UAAUJ,KAAV,EACL;AACI,UAAIK,CAAC,GAAGZ,KAAK,CAACO,KAAD,EAAQ,CAAR,EAAW,CAAX,CAAb;AAEA,WAAKH,MAAL,GAAcQ,CAAd;;AAEA,UAAIA,CAAC,KAAK,CAAV,EACA;AACI,aAAKC,WAAL,IAAoB,CAACX,KAArB;AACH,OAHD,MAKA;AACI,aAAKW,WAAL,IAAoBX,KAApB;AACH;AACJ;AArBE;AAzDO,CAAlB;AAoFAY,MAAM,CAACC,OAAP,GAAiBZ,WAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Clamp = require('../../math/Clamp');\r\n\r\n//  bitmask flag for GameObject.renderMask\r\nvar _FLAG = 2; // 0010\r\n\r\n/**\r\n * Provides methods used for setting the alpha property of a Game Object.\r\n * Should be applied as a mixin and not used directly.\r\n *\r\n * @namespace Phaser.GameObjects.Components.AlphaSingle\r\n * @since 3.22.0\r\n */\r\n\r\nvar AlphaSingle = {\r\n\r\n    /**\r\n     * Private internal value. Holds the global alpha value.\r\n     *\r\n     * @name Phaser.GameObjects.Components.AlphaSingle#_alpha\r\n     * @type {number}\r\n     * @private\r\n     * @default 1\r\n     * @since 3.0.0\r\n     */\r\n    _alpha: 1,\r\n\r\n    /**\r\n     * Clears all alpha values associated with this Game Object.\r\n     *\r\n     * Immediately sets the alpha levels back to 1 (fully opaque).\r\n     *\r\n     * @method Phaser.GameObjects.Components.AlphaSingle#clearAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    clearAlpha: function ()\r\n    {\r\n        return this.setAlpha(1);\r\n    },\r\n\r\n    /**\r\n     * Set the Alpha level of this Game Object. The alpha controls the opacity of the Game Object as it renders.\r\n     * Alpha values are provided as a float between 0, fully transparent, and 1, fully opaque.\r\n     *\r\n     * @method Phaser.GameObjects.Components.AlphaSingle#setAlpha\r\n     * @since 3.0.0\r\n     *\r\n     * @param {number} [value=1] - The alpha value applied across the whole Game Object.\r\n     *\r\n     * @return {this} This Game Object instance.\r\n     */\r\n    setAlpha: function (value)\r\n    {\r\n        if (value === undefined) { value = 1; }\r\n\r\n        this.alpha = value;\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * The alpha value of the Game Object.\r\n     *\r\n     * This is a global value, impacting the entire Game Object, not just a region of it.\r\n     *\r\n     * @name Phaser.GameObjects.Components.AlphaSingle#alpha\r\n     * @type {number}\r\n     * @since 3.0.0\r\n     */\r\n    alpha: {\r\n\r\n        get: function ()\r\n        {\r\n            return this._alpha;\r\n        },\r\n\r\n        set: function (value)\r\n        {\r\n            var v = Clamp(value, 0, 1);\r\n\r\n            this._alpha = v;\r\n\r\n            if (v === 0)\r\n            {\r\n                this.renderFlags &= ~_FLAG;\r\n            }\r\n            else\r\n            {\r\n                this.renderFlags |= _FLAG;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = AlphaSingle;\r\n"]},"metadata":{},"sourceType":"script"}