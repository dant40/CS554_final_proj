{"ast":null,"code":"/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\nvar Formats = require('./Formats');\n\nvar MapData = require('./mapdata/MapData');\n\nvar Parse = require('./parsers/Parse');\n\nvar Tilemap = require('./Tilemap');\n/**\r\n * Create a Tilemap from the given key or data. If neither is given, make a blank Tilemap. When\r\n * loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing from\r\n * a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map data. For\r\n * an empty map, you should specify tileWidth, tileHeight, width & height.\r\n *\r\n * @function Phaser.Tilemaps.ParseToTilemap\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {string} [key] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @param {integer} [tileWidth=32] - The width of a tile in pixels.\r\n * @param {integer} [tileHeight=32] - The height of a tile in pixels.\r\n * @param {integer} [width=10] - The width of the map in tiles.\r\n * @param {integer} [height=10] - The height of the map in tiles.\r\n * @param {integer[][]} [data] - Instead of loading from the cache, you can also load directly from\r\n * a 2D array of tile indexes.\r\n * @param {boolean} [insertNull=false] - Controls how empty tiles, tiles with an index of -1, in the\r\n * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n * \r\n * @return {Phaser.Tilemaps.Tilemap}\r\n */\n\n\nvar ParseToTilemap = function (scene, key, tileWidth, tileHeight, width, height, data, insertNull) {\n  if (tileWidth === undefined) {\n    tileWidth = 32;\n  }\n\n  if (tileHeight === undefined) {\n    tileHeight = 32;\n  }\n\n  if (width === undefined) {\n    width = 10;\n  }\n\n  if (height === undefined) {\n    height = 10;\n  }\n\n  if (insertNull === undefined) {\n    insertNull = false;\n  }\n\n  var mapData = null;\n\n  if (Array.isArray(data)) {\n    var name = key !== undefined ? key : 'map';\n    mapData = Parse(name, Formats.ARRAY_2D, data, tileWidth, tileHeight, insertNull);\n  } else if (key !== undefined) {\n    var tilemapData = scene.cache.tilemap.get(key);\n\n    if (!tilemapData) {\n      console.warn('No map data found for key ' + key);\n    } else {\n      mapData = Parse(key, tilemapData.format, tilemapData.data, tileWidth, tileHeight, insertNull);\n    }\n  }\n\n  if (mapData === null) {\n    mapData = new MapData({\n      tileWidth: tileWidth,\n      tileHeight: tileHeight,\n      width: width,\n      height: height\n    });\n  }\n\n  return new Tilemap(scene, mapData);\n};\n\nmodule.exports = ParseToTilemap;","map":{"version":3,"sources":["/mnt/c/Users/kubec/Desktop/Projects/Projects/Phaser/phaser_practice/node_modules/phaser/src/tilemaps/ParseToTilemap.js"],"names":["Formats","require","MapData","Parse","Tilemap","ParseToTilemap","scene","key","tileWidth","tileHeight","width","height","data","insertNull","undefined","mapData","Array","isArray","name","ARRAY_2D","tilemapData","cache","tilemap","get","console","warn","format","module","exports"],"mappings":"AAAA;;;;;AAMA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,iBAAD,CAAnB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAII,cAAc,GAAG,UAAUC,KAAV,EAAiBC,GAAjB,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6CC,KAA7C,EAAoDC,MAApD,EAA4DC,IAA5D,EAAkEC,UAAlE,EACrB;AACI,MAAIL,SAAS,KAAKM,SAAlB,EAA6B;AAAEN,IAAAA,SAAS,GAAG,EAAZ;AAAiB;;AAChD,MAAIC,UAAU,KAAKK,SAAnB,EAA8B;AAAEL,IAAAA,UAAU,GAAG,EAAb;AAAkB;;AAClD,MAAIC,KAAK,KAAKI,SAAd,EAAyB;AAAEJ,IAAAA,KAAK,GAAG,EAAR;AAAa;;AACxC,MAAIC,MAAM,KAAKG,SAAf,EAA0B;AAAEH,IAAAA,MAAM,GAAG,EAAT;AAAc;;AAC1C,MAAIE,UAAU,KAAKC,SAAnB,EAA8B;AAAED,IAAAA,UAAU,GAAG,KAAb;AAAqB;;AAErD,MAAIE,OAAO,GAAG,IAAd;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAJ,EACA;AACI,QAAIM,IAAI,GAAGX,GAAG,KAAKO,SAAR,GAAoBP,GAApB,GAA0B,KAArC;AACAQ,IAAAA,OAAO,GAAGZ,KAAK,CAACe,IAAD,EAAOlB,OAAO,CAACmB,QAAf,EAAyBP,IAAzB,EAA+BJ,SAA/B,EAA0CC,UAA1C,EAAsDI,UAAtD,CAAf;AACH,GAJD,MAKK,IAAIN,GAAG,KAAKO,SAAZ,EACL;AACI,QAAIM,WAAW,GAAGd,KAAK,CAACe,KAAN,CAAYC,OAAZ,CAAoBC,GAApB,CAAwBhB,GAAxB,CAAlB;;AAEA,QAAI,CAACa,WAAL,EACA;AACII,MAAAA,OAAO,CAACC,IAAR,CAAa,+BAA+BlB,GAA5C;AACH,KAHD,MAKA;AACIQ,MAAAA,OAAO,GAAGZ,KAAK,CAACI,GAAD,EAAMa,WAAW,CAACM,MAAlB,EAA0BN,WAAW,CAACR,IAAtC,EAA4CJ,SAA5C,EAAuDC,UAAvD,EAAmEI,UAAnE,CAAf;AACH;AACJ;;AAED,MAAIE,OAAO,KAAK,IAAhB,EACA;AACIA,IAAAA,OAAO,GAAG,IAAIb,OAAJ,CAAY;AAClBM,MAAAA,SAAS,EAAEA,SADO;AAElBC,MAAAA,UAAU,EAAEA,UAFM;AAGlBC,MAAAA,KAAK,EAAEA,KAHW;AAIlBC,MAAAA,MAAM,EAAEA;AAJU,KAAZ,CAAV;AAMH;;AAED,SAAO,IAAIP,OAAJ,CAAYE,KAAZ,EAAmBS,OAAnB,CAAP;AACH,CAxCD;;AA0CAY,MAAM,CAACC,OAAP,GAAiBvB,cAAjB","sourcesContent":["/**\r\n * @author       Richard Davey <rich@photonstorm.com>\r\n * @copyright    2020 Photon Storm Ltd.\r\n * @license      {@link https://opensource.org/licenses/MIT|MIT License}\r\n */\r\n\r\nvar Formats = require('./Formats');\r\nvar MapData = require('./mapdata/MapData');\r\nvar Parse = require('./parsers/Parse');\r\nvar Tilemap = require('./Tilemap');\r\n\r\n/**\r\n * Create a Tilemap from the given key or data. If neither is given, make a blank Tilemap. When\r\n * loading from CSV or a 2D array, you should specify the tileWidth & tileHeight. When parsing from\r\n * a map from Tiled, the tileWidth, tileHeight, width & height will be pulled from the map data. For\r\n * an empty map, you should specify tileWidth, tileHeight, width & height.\r\n *\r\n * @function Phaser.Tilemaps.ParseToTilemap\r\n * @since 3.0.0\r\n * \r\n * @param {Phaser.Scene} scene - The Scene to which this Tilemap belongs.\r\n * @param {string} [key] - The key in the Phaser cache that corresponds to the loaded tilemap data.\r\n * @param {integer} [tileWidth=32] - The width of a tile in pixels.\r\n * @param {integer} [tileHeight=32] - The height of a tile in pixels.\r\n * @param {integer} [width=10] - The width of the map in tiles.\r\n * @param {integer} [height=10] - The height of the map in tiles.\r\n * @param {integer[][]} [data] - Instead of loading from the cache, you can also load directly from\r\n * a 2D array of tile indexes.\r\n * @param {boolean} [insertNull=false] - Controls how empty tiles, tiles with an index of -1, in the\r\n * map data are handled. If `true`, empty locations will get a value of `null`. If `false`, empty\r\n * location will get a Tile object with an index of -1. If you've a large sparsely populated map and\r\n * the tile data doesn't need to change then setting this value to `true` will help with memory\r\n * consumption. However if your map is small or you need to update the tiles dynamically, then leave\r\n * the default value set.\r\n * \r\n * @return {Phaser.Tilemaps.Tilemap}\r\n */\r\nvar ParseToTilemap = function (scene, key, tileWidth, tileHeight, width, height, data, insertNull)\r\n{\r\n    if (tileWidth === undefined) { tileWidth = 32; }\r\n    if (tileHeight === undefined) { tileHeight = 32; }\r\n    if (width === undefined) { width = 10; }\r\n    if (height === undefined) { height = 10; }\r\n    if (insertNull === undefined) { insertNull = false; }\r\n\r\n    var mapData = null;\r\n\r\n    if (Array.isArray(data))\r\n    {\r\n        var name = key !== undefined ? key : 'map';\r\n        mapData = Parse(name, Formats.ARRAY_2D, data, tileWidth, tileHeight, insertNull);\r\n    }\r\n    else if (key !== undefined)\r\n    {\r\n        var tilemapData = scene.cache.tilemap.get(key);\r\n\r\n        if (!tilemapData)\r\n        {\r\n            console.warn('No map data found for key ' + key);\r\n        }\r\n        else\r\n        {\r\n            mapData = Parse(key, tilemapData.format, tilemapData.data, tileWidth, tileHeight, insertNull);\r\n        }\r\n    }\r\n\r\n    if (mapData === null)\r\n    {\r\n        mapData = new MapData({\r\n            tileWidth: tileWidth,\r\n            tileHeight: tileHeight,\r\n            width: width,\r\n            height: height\r\n        });\r\n    }\r\n\r\n    return new Tilemap(scene, mapData);\r\n};\r\n\r\nmodule.exports = ParseToTilemap;\r\n"]},"metadata":{},"sourceType":"script"}